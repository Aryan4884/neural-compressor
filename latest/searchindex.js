Search.setIndex({"docnames": ["autoapi/block_mask/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/compression/pruning/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/profiling/parser/factory/index", "autoapi/neural_compressor/profiling/parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index", "autoapi/neural_compressor/profiling/parser/parser/index", "autoapi/neural_compressor/profiling/parser/result/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index", "autoapi/neural_compressor/profiling/profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index", "autoapi/neural_compressor/profiling/profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/template/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/diagnosis", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/block_mask/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/compression/pruning/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/profiling/parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/result/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index.rst", "autoapi/neural_compressor/profiling/profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index.rst", "autoapi/neural_compressor/profiling/profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/template/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/diagnosis.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.reduce</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.unary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_scaler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.pattern_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.auto_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.pattern_analyzer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.weight_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template.api_doc_example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.neural_insights_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.weights_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "DataLoader", "Dataset", "Design", "Diagnosis", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (68)", "Pythonic Style Access for Configurations", "Quantization", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"block": [0, 153, 157, 168, 174, 175, 178, 295, 336, 378, 432, 458, 460, 465, 468, 471], "mask": [0, 174, 175, 198, 242, 268, 297, 321, 460, 474], "adaptor_registri": [1, 401], "cl": [1, 158, 165, 174, 175, 176, 177, 200, 207, 215, 217, 222, 244, 251, 257, 279, 286, 290, 295, 297, 299, 310, 325, 336, 371, 391], "sourc": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 151, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 230, 231, 232, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 254, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 285, 286, 287, 290, 291, 292, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 340, 342, 343, 344, 345, 347, 348, 350, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 374, 375, 376, 377, 378, 380, 381, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 397, 400, 434, 436, 449, 451, 453, 454, 456, 461], "The": [1, 3, 11, 14, 16, 34, 52, 73, 112, 118, 120, 139, 147, 151, 156, 158, 163, 164, 165, 168, 172, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 198, 199, 200, 201, 202, 206, 207, 215, 217, 220, 222, 225, 227, 230, 231, 232, 242, 243, 244, 245, 246, 250, 251, 257, 258, 263, 265, 266, 267, 269, 270, 272, 274, 275, 276, 278, 279, 281, 282, 284, 285, 286, 287, 290, 292, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 307, 308, 309, 310, 314, 316, 318, 319, 320, 322, 323, 325, 326, 334, 336, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 375, 377, 378, 380, 381, 383, 385, 386, 390, 391, 392, 395, 397, 398, 401, 402, 403, 404, 406, 410, 413, 416, 418, 419, 420, 422, 423, 425, 427, 429, 431, 432, 433, 435, 436, 437, 438, 441, 442, 444, 447, 449, 450, 451, 453, 454, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474], "decor": [1, 16, 34, 66, 67, 69, 147, 158, 174, 175, 177, 215, 222, 257, 272, 279, 286, 290, 295, 297, 299, 310, 313, 325, 336, 371, 374, 391, 397, 398, 401, 471], "us": [1, 13, 16, 34, 42, 43, 47, 48, 69, 102, 104, 115, 140, 149, 151, 156, 163, 165, 168, 172, 174, 175, 177, 180, 182, 183, 186, 187, 196, 197, 198, 199, 200, 201, 202, 205, 214, 215, 216, 217, 222, 230, 231, 240, 241, 242, 243, 244, 245, 246, 249, 256, 257, 261, 262, 263, 265, 266, 268, 272, 273, 274, 279, 286, 287, 290, 292, 295, 297, 298, 299, 300, 301, 304, 307, 310, 313, 314, 318, 319, 321, 325, 336, 353, 358, 359, 363, 366, 368, 371, 374, 375, 377, 378, 381, 382, 383, 384, 391, 395, 396, 397, 398, 401, 402, 418, 420, 422, 423, 424, 425, 427, 429, 431, 433, 434, 436, 437, 438, 439, 440, 441, 443, 444, 447, 449, 451, 453, 454, 456, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474], "regist": [1, 16, 34, 158, 165, 168, 174, 175, 176, 177, 200, 207, 215, 217, 222, 244, 251, 257, 272, 279, 286, 290, 295, 297, 299, 310, 313, 325, 336, 371, 374, 388, 398, 401, 420, 425, 435, 436, 457, 458, 468, 471], "all": [1, 13, 16, 34, 44, 62, 96, 156, 157, 158, 160, 163, 164, 174, 175, 178, 182, 183, 188, 189, 196, 200, 207, 215, 216, 222, 225, 227, 232, 240, 244, 251, 257, 262, 265, 268, 270, 272, 279, 286, 290, 291, 295, 301, 310, 313, 318, 321, 323, 325, 327, 336, 371, 374, 377, 383, 391, 395, 400, 401, 402, 403, 419, 420, 425, 429, 433, 436, 439, 447, 450, 451, 454, 455, 456, 457, 459, 460, 461, 463, 464, 468, 470, 471], "subclass": [1, 16, 34, 158, 174, 175, 177, 193, 197, 200, 207, 215, 222, 237, 241, 244, 251, 257, 272, 279, 286, 290, 295, 297, 299, 310, 313, 325, 336, 371, 374, 401], "paramet": [1, 11, 13, 14, 16, 42, 43, 44, 66, 67, 69, 85, 104, 115, 131, 139, 140, 147, 148, 149, 154, 155, 156, 157, 158, 163, 164, 165, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 197, 198, 200, 207, 211, 215, 217, 222, 227, 230, 231, 241, 242, 244, 251, 254, 257, 258, 260, 261, 262, 263, 265, 266, 268, 269, 270, 272, 274, 275, 276, 278, 279, 280, 281, 282, 284, 285, 286, 287, 290, 292, 295, 296, 297, 298, 299, 300, 304, 310, 314, 316, 318, 319, 321, 322, 323, 325, 326, 330, 334, 336, 353, 358, 359, 363, 371, 375, 377, 378, 380, 383, 387, 388, 390, 391, 397, 402, 419, 420, 423, 425, 432, 435, 436, 450, 456, 457, 460, 463, 465, 467, 468, 470, 471, 473], "framework_specific_info": [1, 3, 11, 14, 44, 46, 401], "base": [1, 3, 11, 13, 14, 16, 34, 45, 46, 85, 104, 115, 119, 121, 131, 143, 149, 153, 156, 158, 164, 168, 183, 188, 191, 196, 198, 200, 207, 215, 225, 232, 235, 240, 242, 244, 251, 257, 272, 278, 280, 286, 287, 290, 292, 297, 307, 310, 314, 325, 327, 334, 335, 336, 368, 371, 375, 398, 400, 401, 402, 403, 420, 424, 425, 429, 436, 437, 444, 445, 447, 456, 460, 463, 465, 467, 469, 471, 474], "framework": [1, 3, 11, 13, 14, 44, 163, 165, 168, 174, 175, 184, 185, 189, 190, 194, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 212, 215, 217, 218, 222, 228, 229, 233, 234, 236, 238, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 255, 257, 263, 272, 273, 300, 308, 314, 325, 326, 327, 328, 330, 369, 375, 383, 400, 401, 403, 422, 425, 426, 430, 431, 432, 433, 435, 436, 437, 460, 461, 463, 466, 469, 470, 471, 472, 473, 474], "layer": [1, 3, 11, 14, 45, 46, 115, 116, 117, 118, 120, 121, 154, 157, 161, 165, 170, 172, 173, 174, 175, 178, 182, 183, 217, 224, 295, 296, 381, 383, 391, 401, 402, 403, 424, 432, 460, 466], "mxnet_util": 2, "util": [2, 12, 17, 104, 109, 110, 138, 141, 148, 149, 150, 155, 167, 169, 182, 183, 224, 264, 266, 296, 306, 317, 319, 351, 356, 367, 402, 403, 404, 425, 436, 439, 463, 471, 472], "ox_util": 2, "oper": [2, 17, 43, 103, 109, 139, 147, 172, 173, 174, 182, 183, 211, 254, 295, 353, 358, 397, 418, 419, 422, 427, 456, 463, 465, 468, 470, 471], "activ": [2, 17, 29, 140, 156, 157, 182, 183, 224, 314, 375, 377, 401, 402, 403, 422, 424, 429, 436, 457, 462, 463, 465, 468, 469, 473], "argmax": [2, 17, 29], "attent": [2, 17, 29, 153, 170, 172, 175, 182, 183, 198, 242, 395, 423, 460], "binary_op": [2, 17, 29], "concat": [2, 17, 29, 146], "conv": [2, 17, 29, 57, 61, 65, 70, 71, 72, 91, 108, 161, 182, 183, 397, 402, 403, 436, 460, 462, 463, 471], "direct_q8": [2, 17, 29], "embed_layernorm": [2, 17, 29], "gather": [2, 13, 17, 29, 182, 183, 295], "gavgpool": [2, 17, 29], "gemm": [2, 17, 29, 182, 183], "lstm": [2, 17, 29], "matmul": [2, 17, 29, 51, 58, 64, 72, 93, 108, 127, 136, 174, 182, 183, 295, 429, 471], "maxpool": [2, 17, 29, 128, 137, 429], "norm": [2, 17, 29], "op": [2, 13, 17, 29, 44, 51, 56, 64, 65, 66, 67, 68, 69, 70, 71, 73, 77, 80, 84, 87, 90, 91, 92, 93, 95, 104, 106, 108, 122, 123, 124, 130, 132, 133, 134, 135, 140, 142, 145, 147, 148, 149, 155, 156, 161, 172, 182, 183, 262, 307, 314, 315, 353, 358, 364, 366, 368, 375, 376, 377, 385, 391, 401, 402, 403, 422, 429, 436, 437, 460, 463, 464, 466, 468, 469, 471, 473], "pad": [2, 17, 29, 70, 71, 198, 215, 242, 257, 420, 470], "pool": [2, 17, 29], "reduc": [2, 17, 29, 182, 183, 401, 424, 436, 437, 456, 457, 460, 461, 463, 464, 465, 468, 471, 473], "resiz": [2, 17, 29, 198, 199, 211, 215, 242, 243, 254, 257, 420, 470], "split": [2, 17, 29, 43, 81, 157, 214, 215, 256, 257, 397, 465, 468, 470], "unary_op": [2, 17, 29], "calibr": [2, 11, 13, 14, 17, 48, 88, 89, 139, 156, 157, 163, 182, 183, 186, 187, 230, 231, 263, 300, 359, 385, 401, 403, 420, 431, 432, 463, 471, 473], "quantiz": [2, 11, 13, 14, 16, 17, 42, 43, 47, 48, 87, 91, 93, 95, 98, 106, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 148, 149, 151, 154, 156, 157, 161, 163, 164, 182, 183, 186, 187, 211, 218, 225, 230, 231, 254, 262, 263, 264, 274, 301, 307, 313, 317, 364, 366, 368, 377, 380, 381, 385, 390, 391, 401, 408, 419, 420, 425, 426, 429, 431, 432, 435, 438, 439, 444, 446, 447, 450, 459, 461, 466, 469, 470, 471, 472, 473], "smooth_quant": [2, 17, 160, 182, 183, 317, 463, 468], "tf_util": 2, "graph_rewrit": [2, 110], "bf16": [2, 56, 86, 110, 148, 182, 183, 314, 375, 401, 402, 429, 436, 441, 446, 450, 456, 464, 471, 474], "gener": [2, 13, 47, 48, 86, 110, 121, 147, 156, 163, 172, 178, 186, 187, 188, 197, 200, 201, 202, 203, 215, 230, 231, 232, 241, 244, 245, 246, 247, 257, 265, 273, 304, 318, 326, 354, 359, 363, 378, 380, 397, 401, 403, 419, 423, 435, 436, 437, 439, 444, 449, 451, 453, 454, 456, 458, 460, 461, 463, 464, 465, 468, 469, 470, 471], "int8": [2, 18, 19, 43, 86, 110, 122, 123, 124, 130, 132, 133, 134, 135, 142, 147, 157, 162, 163, 182, 183, 211, 254, 260, 261, 262, 314, 316, 375, 377, 390, 391, 397, 401, 402, 403, 418, 420, 424, 429, 436, 437, 441, 444, 446, 447, 450, 456, 462, 463, 464, 466, 467, 468, 469, 470, 473], "onnx": [2, 14, 15, 16, 29, 41, 43, 86, 110, 141, 161, 182, 183, 194, 238, 260, 261, 262, 326, 333, 353, 389, 400, 401, 402, 404, 419, 422, 426, 427, 429, 430, 432, 437, 438, 441, 446, 447, 461, 462, 465, 466, 468, 471], "qdq": [2, 42, 86, 110, 111, 112, 141, 156, 157, 182, 183, 260, 261, 262, 401, 422, 427, 432, 446, 447, 463, 466, 468], "graph_bas": [2, 86, 110], "quantize_graph": [2, 110], "qat": [2, 110, 111, 155, 183, 274, 334, 424, 425, 432, 436, 463], "quantize_graph_bas": [2, 110, 111], "quantize_graph_bn": [2, 110, 111], "quantize_graph_concatv2": [2, 110, 111], "quantize_graph_conv": [2, 110, 111], "quantize_graph_for_intel_cpu": [2, 110, 111], "quantize_graph_matmul": [2, 110, 111], "quantize_graph_pool": [2, 110, 111], "transform_graph": [2, 110], "bias_correct": [2, 110, 144], "graph_transform_bas": [2, 110, 144], "insert_log": [2, 110, 144], "rerange_quantized_concat": [2, 110, 144], "graph_convert": [2, 110], "graph_converter_without_calib": [2, 110], "graph_util": [2, 110], "quantize_graph_common": [2, 110], "smooth_quant_calibr": [2, 110], "smooth_quant_scal": [2, 110], "tf2onnx_convert": [2, 110], "torch_util": [2, 219, 264, 317, 468], "bf16_convert": [2, 50, 86, 110, 150], "hawq_metr": [2, 150], "model_wrapp": [2, 15, 150], "pattern_detector": [2, 150], "symbolic_trac": [2, 150], "tensorflow": [2, 50, 52, 74, 75, 76, 86, 94, 100, 101, 102, 103, 104, 105, 109, 110, 111, 113, 116, 129, 139, 140, 141, 144, 147, 182, 183, 197, 198, 199, 200, 203, 205, 207, 215, 217, 222, 241, 242, 243, 244, 247, 249, 251, 257, 261, 262, 263, 266, 268, 272, 273, 274, 300, 308, 319, 321, 325, 326, 334, 352, 353, 357, 358, 359, 369, 391, 398, 400, 401, 402, 419, 422, 423, 424, 426, 429, 430, 432, 433, 436, 437, 438, 446, 447, 460, 461, 462, 467, 468, 471, 473], "kerasadaptor": 3, "kerasqueri": 3, "local_config_fil": [3, 11, 14, 46], "none": [3, 13, 14, 41, 43, 44, 46, 47, 48, 62, 88, 101, 103, 104, 109, 115, 141, 147, 149, 151, 154, 156, 157, 163, 164, 165, 170, 172, 174, 178, 179, 180, 182, 183, 186, 187, 188, 190, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 211, 215, 216, 217, 218, 225, 227, 230, 231, 232, 234, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 254, 257, 258, 261, 262, 263, 268, 272, 273, 274, 275, 278, 287, 292, 296, 300, 304, 307, 309, 310, 314, 321, 325, 326, 336, 352, 357, 358, 359, 360, 363, 364, 368, 370, 371, 375, 378, 380, 381, 383, 388, 390, 391, 401, 402, 419, 420, 435, 463, 469, 470, 471], "defin": [3, 11, 14, 45, 85, 149, 152, 172, 174, 175, 176, 177, 182, 183, 186, 187, 230, 231, 275, 276, 278, 279, 280, 287, 292, 295, 296, 297, 299, 326, 359, 380, 390, 395, 398, 401, 402, 419, 420, 423, 424, 429, 432, 435, 436, 457, 459, 460, 463, 467, 468, 469, 471, 473], "queri": [3, 11, 13, 14, 46, 147, 156, 172, 175, 182, 183, 402, 403, 463], "interfac": [3, 11, 14, 45, 85, 112, 179, 263, 287, 292, 300, 301, 383, 432, 436, 447, 463, 466], "each": [3, 11, 14, 45, 140, 147, 149, 182, 183, 196, 200, 203, 211, 215, 240, 244, 247, 254, 257, 266, 268, 269, 270, 307, 319, 321, 322, 323, 368, 391, 396, 401, 402, 403, 420, 422, 423, 424, 429, 436, 441, 447, 450, 456, 458, 460, 467, 468, 469, 470, 471, 472], "adapt": [3, 11, 14, 45, 395, 400, 402, 420, 447, 461], "should": [3, 11, 14, 45, 53, 114, 115, 164, 170, 172, 175, 182, 183, 186, 187, 196, 198, 200, 215, 220, 230, 231, 240, 242, 244, 257, 262, 266, 319, 325, 326, 359, 378, 380, 391, 397, 398, 401, 402, 403, 420, 423, 425, 435, 436, 442, 451, 454, 456, 458, 460, 463, 470, 471, 473], "implement": [3, 11, 14, 45, 109, 142, 146, 186, 187, 193, 196, 197, 198, 200, 230, 231, 237, 240, 241, 242, 244, 265, 318, 326, 336, 359, 366, 380, 403, 419, 420, 435, 436, 447, 457, 460, 463, 466, 469, 471, 473], "inherit": [3, 11, 14, 45, 164, 165, 175, 177, 182, 195, 215, 217, 225, 239, 257, 297, 299, 398, 401, 402, 420], "specif": [3, 11, 14, 42, 45, 103, 115, 157, 163, 178, 182, 183, 198, 199, 200, 201, 205, 207, 222, 242, 243, 244, 245, 249, 251, 274, 281, 282, 284, 285, 286, 325, 359, 388, 395, 398, 401, 402, 419, 422, 423, 429, 431, 435, 436, 437, 438, 439, 443, 444, 446, 450, 456, 458, 460, 462, 471, 473], "backend": [3, 11, 14, 15, 41, 42, 45, 161, 182, 183, 184, 185, 189, 190, 194, 198, 199, 201, 202, 203, 204, 205, 209, 212, 215, 221, 222, 228, 229, 233, 234, 236, 238, 242, 243, 245, 246, 247, 248, 249, 253, 255, 257, 273, 308, 326, 327, 328, 330, 369, 397, 403, 422, 425, 431, 432, 436, 437, 445, 462, 470, 473], "own": [3, 11, 14, 45, 73, 196, 215, 240, 257, 336, 398, 402, 419, 420, 432, 435, 458, 465, 467, 472], "mxnetadaptor": 11, "do": [11, 14, 164, 182, 183, 197, 198, 241, 242, 258, 262, 265, 268, 298, 318, 321, 390, 395, 402, 420, 425, 429, 432, 435, 436, 451, 454, 460, 464, 466, 468, 471], "inspect": [11, 14, 466, 469], "tensor": [11, 13, 14, 15, 16, 43, 69, 104, 147, 149, 156, 157, 168, 174, 175, 176, 183, 215, 257, 260, 262, 295, 297, 307, 334, 368, 391, 397, 403, 419, 420, 422, 460, 463, 466, 469, 470, 471], "dict": [11, 13, 14, 44, 115, 147, 148, 149, 156, 157, 158, 163, 168, 172, 173, 174, 175, 176, 177, 178, 180, 182, 183, 186, 187, 197, 216, 222, 230, 231, 241, 260, 262, 267, 268, 269, 270, 272, 275, 278, 279, 280, 287, 290, 292, 295, 296, 297, 298, 299, 304, 307, 313, 316, 320, 321, 322, 323, 325, 326, 334, 359, 374, 377, 378, 380, 381, 383, 390, 391, 397, 402, 427, 435, 460, 462, 463, 468, 469, 471], "configur": [11, 13, 14, 44, 117, 148, 156, 163, 178, 179, 182, 183, 186, 187, 189, 200, 203, 216, 221, 230, 231, 244, 247, 258, 262, 263, 274, 275, 276, 278, 287, 292, 296, 300, 301, 307, 325, 326, 336, 359, 368, 377, 380, 382, 383, 389, 390, 397, 398, 401, 402, 420, 422, 436, 443, 457, 458, 460, 463, 466, 470, 471, 474], "mxnetqueri": 11, "mxnet": [12, 13, 16, 183, 193, 197, 200, 203, 207, 215, 237, 241, 244, 247, 251, 257, 263, 272, 300, 325, 326, 331, 359, 400, 401, 402, 419, 426, 429, 432, 433, 436, 437, 438, 462, 471, 473], "init": [12, 17, 42, 160, 166, 169, 171, 420, 435, 471], "optyp": [13, 182, 183, 260, 402], "enum": 13, "type": [13, 16, 42, 43, 44, 73, 95, 104, 115, 121, 131, 139, 147, 148, 149, 156, 157, 158, 165, 172, 173, 174, 175, 176, 177, 178, 180, 182, 183, 196, 198, 200, 207, 215, 217, 222, 240, 242, 244, 251, 257, 262, 265, 266, 268, 272, 279, 286, 290, 295, 297, 299, 304, 310, 314, 316, 318, 319, 321, 325, 334, 336, 363, 364, 371, 375, 377, 378, 390, 391, 396, 401, 402, 420, 422, 425, 427, 429, 432, 436, 437, 457, 463, 467, 470, 471, 472, 473], "isiter": 13, "obj": [13, 104, 178, 197, 227, 241, 258, 263, 274, 275, 276, 278, 287, 292, 296, 300, 326, 336, 359, 380, 383, 391], "bool": [13, 42, 140, 147, 155, 156, 157, 174, 182, 183, 198, 200, 211, 215, 242, 244, 254, 257, 262, 266, 272, 295, 313, 319, 325, 374, 378, 390, 391, 419, 420, 435, 462, 470], "check": [13, 66, 67, 104, 147, 156, 157, 178, 189, 200, 244, 260, 296, 390, 391, 396, 400, 422, 425, 433, 440, 442, 444, 451, 454, 455, 466], "whether": [13, 104, 115, 147, 157, 174, 182, 183, 196, 198, 211, 215, 240, 242, 254, 257, 266, 268, 272, 295, 319, 321, 325, 383, 390, 391, 401, 420, 435, 463, 465, 468, 470], "object": [13, 42, 43, 44, 73, 85, 104, 115, 131, 148, 149, 155, 156, 163, 164, 168, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 198, 199, 200, 215, 216, 218, 227, 230, 231, 232, 242, 243, 244, 257, 258, 263, 268, 276, 278, 281, 282, 284, 285, 286, 287, 292, 295, 296, 297, 298, 299, 300, 304, 317, 321, 325, 326, 334, 335, 353, 358, 359, 363, 377, 380, 383, 390, 391, 397, 398, 402, 408, 418, 419, 420, 428, 435, 436, 438, 459, 460, 462, 463, 470, 471, 472, 474], "i": [13, 43, 44, 47, 48, 52, 53, 56, 59, 63, 69, 81, 84, 104, 131, 142, 147, 149, 151, 155, 156, 162, 163, 164, 168, 172, 173, 175, 176, 178, 182, 183, 186, 187, 188, 196, 197, 198, 199, 200, 201, 202, 205, 207, 211, 215, 216, 218, 222, 224, 225, 230, 231, 232, 240, 241, 242, 243, 244, 245, 246, 249, 251, 254, 257, 265, 268, 270, 272, 274, 279, 287, 292, 296, 297, 301, 308, 318, 321, 323, 325, 326, 336, 342, 343, 347, 359, 364, 369, 377, 378, 380, 390, 391, 395, 396, 397, 398, 400, 401, 402, 403, 404, 406, 410, 413, 416, 418, 419, 420, 422, 423, 424, 425, 427, 428, 429, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 447, 449, 450, 451, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474], "iter": [13, 15, 104, 139, 147, 157, 163, 173, 175, 177, 182, 183, 186, 187, 191, 196, 200, 201, 218, 230, 231, 235, 240, 244, 245, 297, 299, 326, 359, 380, 383, 397, 398, 401, 418, 419, 420, 436, 460, 462, 463, 469, 471, 473], "return": [13, 16, 44, 52, 66, 67, 69, 73, 104, 115, 147, 148, 149, 155, 156, 157, 158, 163, 165, 172, 174, 175, 176, 177, 178, 180, 186, 187, 200, 207, 211, 215, 216, 217, 222, 227, 230, 231, 244, 251, 254, 257, 262, 265, 266, 268, 269, 270, 272, 278, 279, 286, 290, 295, 296, 297, 299, 304, 310, 314, 316, 318, 319, 321, 322, 323, 325, 326, 330, 334, 336, 353, 358, 359, 363, 371, 375, 377, 378, 380, 383, 388, 390, 391, 397, 398, 402, 403, 419, 420, 425, 435, 438, 458, 460, 463, 468, 469, 471], "true": [13, 84, 112, 145, 147, 157, 163, 182, 183, 196, 198, 200, 201, 214, 215, 216, 240, 242, 244, 245, 256, 257, 262, 266, 272, 290, 313, 319, 325, 336, 359, 374, 378, 383, 390, 391, 402, 419, 420, 422, 425, 429, 435, 436, 439, 442, 443, 462, 463, 465, 468, 469, 470, 471, 473], "els": [13, 147, 183, 196, 240, 336, 388, 444, 469], "fals": [13, 14, 15, 41, 42, 46, 47, 48, 70, 71, 88, 91, 98, 101, 102, 104, 112, 130, 135, 142, 145, 146, 147, 155, 156, 157, 163, 165, 182, 183, 188, 190, 193, 194, 195, 197, 198, 200, 211, 215, 216, 217, 218, 224, 232, 234, 237, 238, 239, 241, 242, 244, 254, 257, 268, 272, 321, 325, 336, 359, 378, 383, 391, 401, 402, 419, 420, 429, 435, 436, 449, 453, 462, 463, 468, 469, 470, 471, 473], "boolean": 13, "ensure_list": 13, "x": [13, 53, 73, 173, 182, 183, 197, 215, 241, 257, 304, 363, 378, 422, 425, 437, 438, 463, 468, 469, 470, 472], "ensur": [13, 215, 257, 304, 363, 425, 463, 470], "list": [13, 42, 43, 52, 104, 139, 147, 148, 149, 153, 156, 163, 172, 173, 174, 175, 182, 183, 186, 187, 191, 198, 211, 215, 216, 230, 231, 235, 242, 254, 257, 261, 262, 265, 266, 268, 269, 270, 272, 279, 287, 292, 295, 298, 313, 318, 319, 321, 322, 323, 325, 326, 334, 342, 343, 347, 359, 374, 378, 380, 381, 391, 397, 400, 401, 420, 427, 429, 433, 436, 439, 444, 446, 449, 450, 453, 458, 460, 462, 463, 464, 468, 469, 471], "input": [13, 15, 42, 43, 44, 52, 59, 63, 66, 67, 69, 70, 71, 73, 81, 82, 84, 85, 104, 108, 109, 115, 121, 140, 147, 148, 154, 155, 156, 157, 161, 172, 173, 182, 183, 186, 187, 198, 199, 200, 202, 211, 214, 215, 220, 230, 231, 242, 243, 244, 246, 254, 256, 257, 260, 261, 262, 325, 326, 330, 334, 359, 380, 388, 390, 391, 398, 401, 402, 418, 419, 420, 422, 423, 424, 425, 427, 429, 431, 435, 436, 437, 438, 439, 444, 460, 462, 463, 465, 468, 469, 470, 473], "check_mx_vers": 13, "version": [13, 52, 103, 156, 172, 183, 261, 262, 317, 395, 397, 401, 429, 433, 434, 436, 449, 451, 453, 454, 461, 468, 471, 472], "str": [13, 42, 139, 148, 149, 153, 154, 155, 156, 157, 158, 165, 172, 182, 183, 198, 199, 200, 207, 211, 215, 217, 221, 222, 242, 243, 244, 251, 254, 257, 261, 262, 265, 266, 268, 270, 272, 279, 290, 313, 316, 318, 319, 321, 323, 325, 344, 352, 354, 357, 358, 374, 377, 378, 383, 388, 391, 392, 419, 420, 435, 462, 469, 470], "mx": 13, "__version__": 13, "combine_cap": 13, "current": [13, 69, 103, 154, 168, 172, 174, 175, 182, 183, 274, 281, 282, 284, 285, 286, 295, 297, 304, 308, 363, 369, 391, 397, 398, 401, 403, 425, 429, 436, 439, 443, 456, 458, 460, 463, 468, 471], "new": [13, 16, 147, 154, 163, 188, 200, 215, 216, 232, 244, 257, 296, 336, 396, 402, 425, 436, 437, 450, 456, 457, 460, 461, 463, 465, 466, 467, 470, 472, 473], "combin": [13, 156, 182, 183, 186, 187, 211, 225, 230, 231, 254, 326, 359, 380, 391, 397, 401, 432, 436, 459, 461, 463, 464, 470, 471], "capabl": [13, 46, 314, 375, 402, 403, 418, 429, 436, 437, 447, 460, 462, 463, 471, 473], "contain": [13, 66, 67, 69, 73, 138, 147, 149, 156, 157, 163, 164, 172, 174, 175, 177, 178, 182, 183, 186, 187, 198, 199, 200, 230, 231, 242, 243, 244, 258, 262, 263, 268, 269, 270, 274, 287, 290, 292, 295, 296, 297, 298, 299, 300, 321, 322, 323, 326, 359, 380, 383, 390, 420, 423, 432, 435, 457, 460, 465, 469, 471, 472], "make_nc_model": 13, "target": [13, 42, 43, 101, 172, 177, 178, 183, 296, 299, 304, 363, 420, 425, 436, 460, 469, 470, 471, 473], "sym_model": 13, "ctx": 13, "input_desc": 13, "convert": [13, 43, 47, 48, 49, 51, 52, 53, 54, 55, 65, 73, 85, 98, 99, 101, 102, 103, 104, 130, 135, 141, 148, 156, 172, 182, 183, 198, 211, 214, 215, 242, 254, 256, 257, 261, 268, 274, 296, 314, 321, 375, 378, 397, 402, 436, 437, 441, 463, 464, 468, 470, 471], "symbol": [13, 148, 155, 156, 265, 318, 326, 359, 397, 438], "model": [13, 15, 16, 29, 41, 42, 43, 44, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 115, 117, 139, 140, 141, 147, 148, 149, 151, 153, 154, 155, 156, 157, 161, 163, 164, 170, 172, 175, 177, 178, 182, 183, 186, 187, 194, 197, 198, 200, 215, 216, 219, 220, 227, 230, 231, 238, 241, 242, 244, 257, 258, 260, 261, 262, 263, 264, 272, 273, 274, 275, 278, 281, 282, 284, 285, 286, 287, 292, 296, 297, 298, 299, 300, 301, 304, 307, 309, 310, 317, 325, 326, 336, 352, 357, 358, 359, 360, 363, 364, 368, 370, 371, 377, 378, 380, 386, 388, 390, 391, 393, 397, 398, 400, 401, 403, 408, 418, 419, 420, 422, 423, 424, 425, 426, 431, 432, 434, 435, 437, 439, 444, 446, 447, 450, 456, 458, 459, 461, 463, 466, 467, 469, 470, 471, 472, 473], "an": [13, 66, 67, 69, 104, 140, 142, 149, 156, 162, 175, 182, 183, 191, 196, 200, 215, 219, 224, 235, 240, 244, 257, 264, 265, 269, 270, 278, 279, 301, 317, 318, 322, 323, 326, 353, 358, 359, 378, 380, 391, 393, 395, 397, 398, 400, 401, 403, 419, 420, 421, 422, 427, 435, 436, 437, 439, 443, 444, 447, 456, 458, 460, 461, 463, 467, 468, 469, 470, 471], "neural": [13, 149, 163, 164, 174, 182, 183, 210, 211, 212, 215, 216, 219, 222, 225, 254, 255, 257, 259, 264, 271, 272, 274, 287, 292, 295, 298, 300, 301, 306, 312, 317, 324, 325, 326, 330, 337, 359, 366, 367, 373, 388, 393, 396, 401, 402, 403, 418, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 437, 438, 440, 441, 444, 446, 447, 449, 451, 453, 454, 455, 458, 459, 461, 463, 465, 466, 468, 469, 470, 471, 473, 474], "compressor": [13, 163, 164, 174, 182, 183, 210, 211, 212, 215, 216, 219, 222, 225, 254, 255, 257, 259, 264, 271, 272, 274, 295, 298, 300, 301, 306, 312, 317, 324, 325, 326, 330, 337, 359, 367, 373, 388, 393, 396, 398, 401, 402, 403, 418, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 437, 438, 439, 440, 444, 446, 447, 449, 451, 453, 454, 455, 458, 459, 460, 461, 463, 465, 466, 468, 469, 470, 471, 472, 473, 474], "tupl": [13, 104, 147, 156, 183, 186, 187, 211, 215, 230, 231, 254, 257, 262, 313, 326, 359, 374, 380, 402, 420, 435, 436, 463, 470], "symnet": 13, "arg": [13, 52, 104, 198, 199, 200, 242, 243, 244, 295, 304, 363, 378, 386, 387, 420, 425, 436, 445, 463, 465, 468, 469, 470], "aux": 13, "data": [13, 42, 43, 54, 104, 139, 147, 149, 154, 156, 157, 161, 172, 182, 183, 186, 187, 216, 218, 230, 231, 262, 264, 304, 314, 316, 317, 326, 352, 357, 359, 363, 375, 377, 380, 383, 388, 391, 400, 401, 419, 420, 425, 429, 430, 433, 435, 436, 437, 463, 464, 466, 467, 468, 469, 470, 471, 472], "descript": [13, 131, 378, 396, 397, 402, 403, 419, 468], "ncmodel": 13, "fuse": [13, 57, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 90, 91, 92, 93, 95, 130, 135, 155, 156, 161, 397, 468, 469], "suppli": 13, "get_framework_nam": 13, "get": [13, 42, 44, 66, 67, 69, 103, 104, 147, 154, 156, 157, 163, 168, 170, 172, 174, 175, 176, 177, 180, 183, 191, 215, 216, 222, 224, 235, 257, 262, 295, 297, 299, 307, 314, 316, 325, 334, 359, 368, 375, 377, 383, 391, 402, 428, 432, 433, 436, 442, 461, 465, 468, 471, 472, 475], "name": [13, 43, 44, 52, 66, 67, 69, 103, 104, 109, 115, 139, 147, 148, 149, 154, 155, 156, 157, 158, 163, 168, 172, 174, 175, 176, 177, 180, 182, 183, 198, 199, 200, 203, 207, 213, 215, 216, 220, 223, 224, 242, 243, 244, 247, 251, 257, 260, 261, 262, 267, 272, 290, 295, 297, 299, 314, 316, 320, 325, 330, 334, 336, 359, 375, 377, 381, 383, 391, 397, 402, 403, 420, 422, 425, 427, 429, 434, 435, 436, 438, 442, 449, 453, 457, 460, 463, 466, 467, 469, 471, 473, 474], "context": [13, 391, 462, 465], "prepare_model_data": 13, "nc_model": [13, 287, 292], "data_x": 13, "prepar": [13, 156, 397, 400, 420, 425, 430, 463], "dataload": [13, 15, 42, 139, 140, 149, 154, 156, 157, 163, 170, 172, 186, 187, 198, 209, 219, 230, 231, 242, 253, 258, 264, 287, 292, 301, 317, 352, 357, 359, 380, 383, 397, 400, 401, 402, 422, 423, 424, 425, 430, 431, 436, 437, 459, 463, 464, 468, 469, 470, 472, 473], "need": [13, 42, 104, 108, 154, 157, 163, 172, 183, 186, 187, 188, 196, 197, 200, 207, 215, 218, 220, 221, 230, 231, 232, 240, 241, 244, 251, 257, 262, 301, 307, 325, 326, 336, 359, 368, 380, 390, 391, 397, 401, 419, 420, 422, 423, 425, 432, 436, 439, 441, 442, 445, 449, 450, 451, 453, 454, 456, 457, 460, 462, 463, 464, 465, 466, 468, 470, 471, 473], "run": [13, 139, 147, 163, 175, 178, 182, 183, 186, 187, 197, 214, 216, 230, 231, 241, 256, 296, 297, 304, 326, 359, 363, 380, 396, 401, 418, 425, 428, 429, 436, 439, 441, 443, 444, 445, 447, 449, 450, 451, 453, 454, 456, 461, 463, 466, 467, 469, 471, 473], "loader": [13, 139, 186, 187, 230, 231, 326, 359, 380, 386, 419, 463], "dataloaderwrap": 13, "prepare_model": 13, "create_data_exampl": 13, "creat": [13, 16, 104, 182, 183, 188, 198, 200, 218, 232, 242, 244, 268, 278, 279, 314, 321, 353, 358, 375, 377, 378, 383, 395, 398, 401, 420, 438, 449, 451, 453, 454, 457, 463, 467, 469, 471, 472], "exampl": [13, 149, 156, 157, 163, 172, 173, 182, 183, 198, 199, 200, 211, 215, 242, 243, 244, 254, 257, 268, 269, 270, 272, 298, 321, 322, 323, 325, 326, 336, 359, 377, 378, 380, 395, 396, 400, 402, 403, 408, 431, 432, 439, 442, 443, 444, 447, 464, 466, 470, 471, 472, 475], "prepare_dataload": 13, "io": 13, "ndarray_to_devic": 13, "ndarrai": [13, 42, 43, 66, 67, 69, 215, 257, 381, 428, 470], "devic": [13, 78, 88, 89, 90, 91, 92, 93, 96, 106, 130, 135, 146, 172, 173, 182, 183, 402, 419, 423, 436, 437, 439, 442, 447, 456, 462, 465], "is_model_quant": 13, "query_quantizable_nod": 13, "node": [13, 42, 43, 49, 52, 53, 54, 55, 59, 61, 63, 66, 67, 69, 73, 76, 79, 81, 82, 83, 97, 101, 102, 104, 109, 131, 139, 147, 172, 260, 262, 334, 358, 401, 402, 422, 425, 469, 471, 474], "given": [13, 16, 66, 67, 69, 103, 104, 115, 147, 156, 215, 257, 268, 321, 359, 398, 403, 460, 468, 470], "map": [13, 43, 104, 147, 183, 215, 257, 260, 262, 263, 267, 269, 270, 272, 287, 292, 297, 300, 320, 322, 323, 325, 420, 425, 435, 436, 449, 453, 460, 463, 465], "quantize_sym_model": 13, "qconfig": [13, 469], "accord": [13, 121, 156, 163, 182, 183, 198, 199, 200, 215, 242, 243, 244, 257, 307, 366, 368, 383, 398, 401, 420, 425, 460, 464, 468, 470, 471], "run_forward": 13, "b_filter": 13, "collector": [13, 149, 381], "pre_batch": 13, "post_batch": 13, "forward": [13, 400, 402, 436, 460, 462, 463, 465, 468, 469], "propag": [13, 99], "filter": [13, 198, 199, 200, 201, 202, 203, 205, 209, 242, 243, 244, 245, 246, 247, 249, 253, 264, 317, 391, 403, 420, 432, 460, 469], "which": [13, 42, 54, 82, 109, 149, 154, 168, 172, 173, 174, 175, 177, 178, 182, 183, 198, 199, 200, 211, 216, 242, 243, 244, 254, 265, 270, 279, 281, 282, 284, 285, 286, 290, 295, 296, 297, 299, 304, 318, 323, 325, 330, 336, 359, 363, 391, 395, 397, 398, 401, 402, 403, 419, 420, 422, 423, 425, 428, 429, 432, 435, 436, 437, 438, 440, 444, 447, 450, 456, 457, 459, 460, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473], "batch": [13, 156, 188, 190, 191, 196, 197, 218, 232, 234, 235, 240, 241, 380, 419, 423, 424, 436, 459, 460, 470, 471, 474], "infer": [13, 104, 157, 172, 263, 300, 334, 336, 359, 380, 401, 402, 423, 424, 436, 437, 456, 458, 460, 461, 463, 465, 468, 469, 471], "collect": [13, 16, 43, 156, 213, 215, 218, 220, 221, 223, 257, 270, 272, 323, 325, 381, 391, 402, 463, 469, 471], "inform": [13, 149, 168, 172, 174, 175, 176, 177, 178, 183, 186, 187, 218, 220, 221, 230, 231, 295, 297, 298, 299, 301, 325, 391, 395, 396, 399, 400, 401, 402, 403, 404, 406, 410, 413, 416, 423, 429, 436, 438, 451, 454, 457, 460, 464, 466, 469, 473, 474, 475], "dure": [13, 139, 174, 177, 182, 183, 295, 299, 336, 391, 402, 422, 436, 438, 458, 459, 460, 463, 468, 469, 473], "call": [13, 42, 154, 158, 172, 175, 268, 297, 321, 397, 398, 401, 419, 431, 445, 447, 457, 463, 468, 469, 470], "prior": [13, 87, 471], "after": [13, 77, 156, 170, 174, 175, 182, 183, 198, 211, 215, 218, 242, 254, 257, 297, 364, 378, 391, 398, 402, 420, 422, 423, 424, 427, 432, 435, 436, 449, 450, 453, 457, 458, 459, 460, 463, 464, 467, 468, 469, 470, 471], "count": [13, 398, 420, 465], "int": [13, 16, 42, 43, 104, 139, 147, 153, 156, 157, 170, 182, 183, 197, 198, 199, 211, 215, 241, 242, 243, 254, 257, 261, 262, 266, 268, 272, 279, 319, 321, 325, 344, 353, 358, 377, 378, 391, 419, 420, 435, 436, 462, 470], "make_symbol_block": 13, "gluon": [13, 326, 359, 438], "symbolblock": 13, "make_modul": 13, "parse_tune_config": 13, "tune_cfg": [13, 147, 148, 156, 401, 403, 471], "quantizable_nod": 13, "strategi": [13, 156, 175, 182, 183, 184, 200, 228, 244, 264, 317, 400, 401, 402, 403, 408, 419, 425, 432, 436, 444, 456, 461, 462, 463, 464, 466, 472, 473], "config": [13, 114, 115, 117, 121, 156, 163, 168, 170, 174, 175, 176, 177, 178, 182, 186, 187, 198, 227, 230, 231, 242, 281, 282, 284, 285, 286, 287, 292, 295, 296, 297, 298, 299, 314, 315, 317, 326, 353, 358, 375, 376, 377, 378, 380, 383, 390, 391, 398, 400, 402, 403, 408, 418, 419, 422, 423, 424, 425, 427, 430, 432, 435, 436, 437, 438, 459, 460, 462, 463, 464, 465, 467, 469, 471], "tune": [13, 44, 163, 182, 183, 186, 187, 198, 200, 230, 231, 242, 244, 263, 300, 302, 303, 304, 305, 307, 308, 309, 310, 313, 314, 315, 316, 326, 336, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 374, 375, 376, 377, 380, 391, 401, 402, 419, 420, 422, 425, 432, 434, 436, 437, 456, 458, 460, 461, 464, 465, 466, 467, 469, 473], "from": [13, 43, 44, 60, 66, 67, 69, 104, 147, 154, 156, 163, 164, 165, 168, 174, 175, 176, 177, 178, 182, 183, 186, 187, 188, 191, 195, 198, 199, 200, 201, 202, 203, 205, 210, 211, 217, 218, 221, 230, 231, 232, 235, 239, 242, 243, 244, 245, 246, 247, 249, 254, 258, 260, 261, 262, 265, 268, 269, 270, 274, 279, 295, 296, 297, 299, 314, 316, 318, 321, 322, 323, 326, 334, 336, 359, 375, 377, 378, 380, 383, 390, 391, 395, 397, 398, 401, 403, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 430, 432, 435, 437, 438, 439, 443, 444, 445, 447, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472], "distribute_calib_tensor": 13, "calib_tensor": 13, "calib_cfg": 13, "tensor_to_nod": 13, "distribut": [13, 16, 142, 162, 182, 183, 188, 190, 191, 193, 194, 195, 196, 197, 218, 232, 234, 235, 237, 238, 239, 240, 241, 385, 400, 402, 419, 423, 433, 451, 454, 461, 463, 465, 466, 468, 472, 474], "depend": [13, 186, 187, 216, 230, 231, 326, 359, 380, 396, 428, 429, 462, 463, 471], "algorithm": [13, 156, 179, 265, 272, 280, 317, 318, 325, 383, 385, 398, 401, 402, 403, 423, 424, 429, 432, 445, 450, 460, 463, 465, 469, 473], "set": [13, 43, 56, 95, 104, 114, 147, 154, 156, 163, 178, 180, 182, 183, 186, 187, 188, 198, 200, 203, 215, 216, 221, 222, 230, 231, 232, 242, 244, 247, 257, 268, 274, 287, 292, 296, 301, 321, 325, 326, 334, 358, 359, 378, 380, 388, 391, 395, 398, 402, 418, 419, 420, 423, 425, 427, 429, 431, 432, 433, 435, 436, 437, 439, 441, 443, 457, 460, 462, 463, 467, 468, 471, 473], "kl": [13, 16, 182, 183, 381, 385, 402, 403, 429, 436, 471, 473], "minmax": [13, 16, 402, 403, 429, 463, 473], "calib_model": 13, "qsym_model": 13, "calib_data": 13, "calibdata": 13, "threshold": [13, 159, 381, 385, 435], "amp_convert": 13, "amp_cfg": 13, "support": [13, 42, 43, 96, 103, 154, 161, 165, 174, 175, 182, 183, 186, 187, 197, 198, 200, 207, 211, 215, 217, 218, 219, 222, 227, 230, 231, 241, 242, 244, 251, 254, 257, 264, 272, 274, 279, 295, 297, 301, 308, 314, 317, 325, 326, 330, 336, 359, 369, 375, 378, 380, 383, 385, 391, 393, 400, 402, 436, 439, 444, 447, 450, 456, 461, 464, 467, 471, 472], "amp": [13, 439, 446], "wrap": [13, 104, 115, 165, 217, 268, 321, 397, 425, 451, 454], "dataiterload": 13, "data_it": [13, 172], "collectorbas": 13, "calibcollector": 13, "include_tensors_kl": 13, "include_tensors_minmax": 13, "num_bin": [13, 16, 381], "8001": [13, 381], "tensorcollector": 13, "include_nod": 13, "qtensor_to_tensor": 13, "build": [13, 42, 114, 158, 159, 161, 162, 175, 275, 278, 329, 331, 333, 334, 335, 401, 402, 403, 433, 438, 449, 451, 453, 454, 457, 461, 467, 471], "up": [13, 99, 175, 215, 257, 296, 425, 426, 429, 432, 447, 451, 454, 456, 461, 462, 463, 467, 470, 471, 473], "namecollector": 13, "cache_kl": 13, "cache_minmax": 13, "tensors_kl": 13, "tensors_minmax": 13, "onnxruntimeadaptor": 14, "rt": 14, "onnxrt_qlinearopsadaptor": [14, 401], "onnxrt_integeropsadaptor": 14, "onnxrt_qdqadaptor": 14, "onnxrtqueri": 14, "dynam": [14, 183, 188, 232, 262, 314, 375, 400, 401, 419, 423, 427, 432, 436, 439, 444, 445, 446, 447, 450, 456, 461, 471, 474], "static": [14, 41, 42, 46, 154, 161, 172, 183, 262, 314, 359, 375, 401, 402, 403, 422, 427, 432, 436, 439, 444, 445, 446, 447, 450, 456, 468, 471, 474], "format": [14, 18, 43, 52, 147, 182, 183, 198, 199, 200, 242, 243, 244, 262, 268, 274, 314, 321, 375, 378, 402, 403, 420, 425, 427, 435, 436, 437, 438, 439, 463, 466], "onnxrtaug": 15, "dump_op_typ": 15, "black_nod": [15, 139], "white_nod": 15, "cpuexecutionprovid": [15, 41, 42, 437, 463], "reduce_rang": [15, 41, 42, 182, 183, 403, 462], "augment": 15, "dump": [15, 156, 163, 262, 391, 463, 466, 469], "calib_registri": 16, "calib_method": 16, "calibratorbas": 16, "minmaxcalibr": 16, "percentilecalibr": 16, "2048": [16, 391], "percentil": [16, 139, 157], "99": [16, 468, 474], "999": [16, 473], "option": [16, 104, 157, 174, 182, 183, 186, 187, 198, 215, 230, 231, 242, 257, 261, 262, 268, 274, 295, 301, 314, 317, 321, 325, 326, 359, 375, 377, 378, 380, 384, 391, 402, 403, 419, 420, 429, 433, 436, 450, 460, 463, 465, 467, 470, 471, 473], "number": [16, 66, 67, 104, 139, 156, 157, 170, 174, 182, 183, 196, 199, 211, 215, 240, 243, 254, 257, 269, 270, 272, 295, 304, 322, 323, 325, 353, 358, 363, 378, 383, 391, 418, 419, 420, 425, 435, 460, 463, 465, 467, 470, 471], "bin": [16, 391, 428], "histogram": [16, 381, 391, 469], "valu": [16, 43, 54, 66, 67, 69, 88, 89, 104, 142, 147, 156, 162, 163, 168, 172, 173, 175, 178, 180, 182, 183, 186, 187, 198, 201, 202, 211, 215, 216, 230, 231, 242, 245, 246, 254, 257, 268, 272, 296, 304, 307, 314, 321, 325, 326, 359, 363, 368, 375, 377, 378, 380, 381, 383, 391, 397, 402, 403, 420, 422, 429, 435, 436, 437, 442, 458, 460, 462, 463, 465, 466, 468, 470, 471, 473], "default": [16, 96, 147, 157, 178, 180, 182, 183, 186, 187, 190, 198, 199, 200, 211, 215, 230, 231, 234, 242, 243, 244, 254, 257, 261, 262, 265, 274, 296, 316, 318, 325, 334, 377, 383, 391, 397, 401, 419, 420, 429, 432, 433, 435, 436, 437, 444, 447, 449, 453, 458, 460, 462, 463, 464, 465, 467, 468, 470, 471, 473], "float": [16, 43, 139, 140, 149, 157, 174, 175, 176, 178, 182, 183, 198, 211, 242, 254, 266, 268, 269, 270, 297, 319, 321, 322, 323, 378, 388, 391, 420, 435, 462, 463, 468, 470], "A": [16, 53, 73, 74, 102, 115, 139, 140, 147, 156, 157, 164, 168, 172, 174, 175, 176, 177, 178, 182, 183, 200, 215, 218, 220, 221, 227, 244, 257, 258, 265, 268, 269, 270, 272, 275, 278, 279, 280, 287, 290, 292, 295, 296, 297, 298, 299, 304, 318, 321, 322, 323, 325, 326, 330, 334, 363, 380, 391, 400, 402, 419, 420, 426, 429, 435, 436, 438, 449, 450, 453, 456, 460, 461, 463, 465, 468, 470, 471, 473], "between": [16, 42, 142, 162, 175, 182, 183, 215, 257, 269, 272, 322, 325, 353, 358, 391, 397, 401, 402, 403, 422, 423, 432, 435, 436, 447, 463, 466, 467, 468, 470, 471], "0": [16, 43, 52, 89, 104, 147, 156, 157, 159, 161, 165, 170, 182, 183, 188, 190, 193, 194, 195, 197, 198, 201, 202, 205, 211, 215, 217, 218, 232, 234, 237, 238, 239, 241, 242, 245, 246, 249, 254, 257, 262, 263, 272, 279, 287, 292, 300, 325, 336, 359, 364, 378, 397, 419, 420, 423, 425, 427, 428, 429, 433, 434, 435, 436, 437, 442, 444, 449, 453, 460, 462, 463, 465, 466, 467, 468, 469, 470, 471, 473], "100": [16, 163, 182, 183, 200, 244, 378, 418, 420, 425, 431, 436, 462, 463, 468, 470, 471, 473, 474], "klcalibr": 16, "128": [16, 156, 157, 198, 201, 202, 215, 242, 245, 246, 257, 420, 436, 463, 470], "num_quantized_bin": 16, "histogramcollector": 16, "collctor": 16, "smooth_distribut": 16, "p": [16, 457, 465], "ep": [16, 162, 437], "0001": [16, 182, 183, 423, 436, 462], "smooth": [16, 139, 140, 147, 154, 161, 182, 183, 313, 460], "discret": [16, 471], "mai": [16, 147, 281, 282, 284, 285, 286, 378, 395, 396, 402, 422, 427, 428, 434, 437, 449, 453, 461, 463, 471], "have": [16, 73, 82, 140, 147, 173, 174, 175, 196, 218, 240, 265, 268, 295, 297, 318, 321, 325, 359, 377, 378, 395, 396, 402, 403, 419, 420, 422, 425, 429, 434, 435, 436, 437, 439, 456, 458, 460, 463, 465, 468, 471, 472], "been": [16, 174, 175, 265, 295, 297, 318, 396, 398, 403, 423, 436, 437, 456, 465, 468], "normal": [16, 33, 215, 257, 270, 323, 436, 458, 465, 468, 470], "1": [16, 42, 43, 53, 73, 88, 104, 108, 112, 145, 147, 154, 156, 157, 159, 161, 162, 163, 165, 175, 182, 183, 188, 190, 193, 194, 195, 197, 198, 199, 201, 202, 205, 206, 211, 215, 216, 217, 218, 232, 234, 237, 238, 239, 241, 242, 243, 245, 246, 249, 250, 254, 257, 263, 268, 269, 270, 272, 287, 292, 297, 300, 301, 321, 322, 323, 325, 336, 359, 377, 378, 383, 395, 397, 400, 401, 403, 419, 420, 422, 423, 427, 429, 430, 433, 435, 437, 440, 442, 458, 459, 460, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473], "replac": [16, 154, 157, 270, 323, 425, 436, 447, 466], "zero": [16, 43, 175, 178, 215, 257, 297, 391, 400, 460, 463, 468, 470, 471], "multipli": 16, "scale": [16, 43, 99, 140, 142, 154, 156, 157, 161, 162, 211, 215, 254, 257, 463, 465, 467, 468, 470, 471], "factor": [16, 140, 465, 468, 474], "take": [16, 174, 183, 186, 187, 191, 215, 220, 230, 231, 235, 257, 295, 304, 325, 326, 359, 363, 380, 395, 397, 398, 419, 422, 423, 429, 436, 456, 460, 463, 464, 470, 471, 473], "correspond": [16, 149, 172, 175, 182, 183, 198, 242, 265, 268, 272, 318, 321, 325, 383, 391, 401, 429, 436, 460, 462, 463, 467, 468, 471], "amount": 16, "off": [16, 66, 67, 69, 396, 465], "non": [16, 296, 391, 397, 422, 471], "ref": [16, 147], "http": [16, 149, 168, 174, 175, 198, 200, 242, 244, 265, 266, 268, 269, 270, 295, 297, 298, 318, 319, 321, 322, 323, 325, 359, 397, 400, 420, 422, 430, 433, 434, 436, 445, 451, 454, 466], "hanj": 16, "c": [16, 73, 200, 244, 420, 428, 433, 465, 471], "illinoi": 16, "edu": [16, 200, 244, 420], "cs412": 16, "bk3": 16, "diverg": [16, 381, 385, 403, 423, 471], "pdf": 16, "github": [16, 149, 174, 198, 242, 265, 266, 269, 270, 295, 298, 318, 319, 322, 323, 325, 359, 396, 420, 422, 426, 433, 434, 436, 445, 451, 454, 466], "com": [16, 149, 174, 198, 242, 265, 266, 269, 270, 295, 298, 318, 319, 322, 323, 325, 359, 395, 400, 420, 422, 430, 433, 434, 436, 439, 445, 466, 467, 474], "apach": [16, 434], "incub": 16, "blob": [16, 149, 174, 265, 266, 269, 270, 295, 318, 319, 322, 323, 325, 359, 436, 445], "master": [16, 174, 265, 266, 269, 270, 295, 298, 318, 319, 322, 323, 325, 359, 436, 471], "python": [16, 74, 147, 200, 219, 244, 264, 317, 378, 391, 393, 396, 397, 420, 422, 425, 428, 433, 436, 441, 447, 450, 456, 461, 470], "contrib": [16, 264, 317], "py": [16, 147, 149, 163, 175, 182, 183, 266, 268, 269, 270, 297, 319, 321, 322, 323, 378, 397, 401, 422, 425, 433, 436, 441, 443, 444, 445, 451, 454, 463, 466, 469], "microsoft": [16, 401], "onnxruntim": [16, 182, 183, 194, 200, 207, 238, 244, 251, 273, 353, 401, 419, 432, 433, 437, 462], "main": [16, 175, 222, 298, 397, 419, 422, 425, 436, 443, 445, 457, 460, 463, 465], "tool": [16, 147, 261, 391, 400, 401, 436, 449, 453, 460, 461, 463], "arrai": [16, 43, 147, 215, 257, 268, 279, 321, 391, 470], "small": [16, 66, 67, 68, 366, 398, 460, 465, 471, 474], "probabl": [16, 182, 183, 385, 465], "activationoper": 18, "onnx_quant": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "onnx_nod": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 86, 100, 110], "removableactivationoper": 18, "remov": [18, 43, 55, 56, 59, 73, 79, 82, 83, 84, 95, 97, 139, 170, 175, 270, 323, 395, 396, 436, 449, 453, 460, 469], "qactivationoper": 18, "children": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39], "initi": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 42, 43, 104, 115, 147, 165, 175, 186, 187, 195, 198, 217, 230, 231, 239, 242, 296, 297, 314, 359, 375, 380, 398, 403, 420, 435, 455, 460, 463, 468, 471], "qoper": [18, 34, 182, 183, 427], "float16activationoper": 18, "float16": [18, 21, 43, 420], "argmaxoper": 19, "qargmaxoper": 19, "attentionoper": 20, "qattentionoper": 20, "qattent": 20, "binari": [21, 147, 272, 325, 428, 435, 451, 454, 466], "binaryoper": 21, "qbinaryoper": 21, "qbinari": 21, "float16binaryoper": 21, "concatoper": 22, "qconcatoper": 22, "qconcat": 22, "convoper": 23, "qconvoper": 23, "qlinearconv": 23, "direct8bit": 24, "direct8bitoper": 24, "qdirectoper": 24, "qdirect": 24, "embedlayernorm": 25, "embedlayernormalizationoper": 25, "qembedlayernormalizationoper": 25, "qembedlayernorm": 25, "gatheroper": 26, "qgatheroper": 26, "qgather": 26, "globalaveragepool": 27, "globalaveragepooloper": 27, "qglobalaveragepooloper": 27, "qlinearglobalaveragepool": 27, "gemmoper": 28, "qgemmoper": 28, "qgemm": 28, "lstmoper": 30, "matmuloper": 31, "qmatmuloper": 31, "qlinearmatmul": 31, "fusedmatmuloper": 31, "fusedmatmul": 31, "maxpooloper": 32, "qmaxpooloper": 32, "qmaxpool": 32, "batchnormalizationoper": 33, "batchnorm": [33, 61, 66, 120, 397, 468], "normalizationoper": 33, "op_registri": 34, "op_typ": [34, 139, 147, 315, 376], "qop_registri": 34, "padoper": 35, "qpadoper": 35, "qpad": 35, "averagepool": 36, "pooloper": 36, "qpooloper": 36, "qlinearaveragepool": 36, "reduceoper": 37, "resizeoper": 38, "qresizeoper": 38, "qresiz": 38, "splitoper": 39, "qsplitoper": 39, "qsplit": 39, "unari": 40, "unaryoper": 40, "q_config": [41, 156, 262, 401], "mode": [41, 42, 43, 44, 109, 154, 207, 251, 268, 314, 321, 334, 375, 388, 391, 401, 402, 422, 432, 449, 453, 463, 464, 471], "quantization_param": 41, "op_types_to_quant": 41, "fallback_list": 41, "fp32": [41, 42, 78, 130, 135, 142, 156, 157, 162, 182, 183, 186, 187, 230, 231, 261, 262, 272, 307, 314, 325, 364, 368, 375, 383, 390, 391, 400, 401, 403, 422, 429, 430, 435, 436, 437, 446, 462, 463, 464, 466, 467, 468, 469, 471, 473, 474], "add_qdq_pair_to_weight": [41, 182, 183, 463], "optypes_to_exclude_output_qu": [41, 182, 183, 463], "dedicated_qdq_pair": [41, 182, 183, 463], "smoothquant": [42, 154, 156, 161, 400, 461, 465, 472], "onnxrt": [42, 43, 198, 200, 207, 215, 242, 244, 251, 257, 272, 325, 352, 389, 401, 422, 437, 463, 474], "get_quant_dequant_output": 42, "input_data": [42, 419], "output_data": 42, "loss": [42, 165, 182, 183, 217, 263, 272, 287, 292, 300, 325, 380, 422, 423, 424, 425, 426, 435, 436, 437, 447, 459, 460, 463, 465, 468, 471, 473], "output": [42, 43, 52, 56, 58, 73, 97, 104, 109, 147, 156, 157, 172, 173, 174, 180, 182, 183, 186, 187, 220, 224, 230, 231, 261, 262, 265, 295, 318, 325, 326, 334, 359, 380, 386, 387, 391, 397, 401, 402, 423, 424, 425, 427, 429, 431, 435, 436, 438, 447, 456, 457, 459, 460, 462, 463, 465, 466, 468, 469, 470, 471, 473], "numpi": [42, 43, 66, 67, 69, 104, 147, 215, 257, 268, 279, 321, 428, 470], "7": [42, 163, 182, 183, 336, 403, 418, 428, 429, 433, 436, 460, 463, 466, 468, 471, 474], "bit": [42, 156, 157, 182, 183, 377, 403, 424, 437, 461, 463, 465, 468], "execut": [42, 43, 52, 163, 175, 182, 183, 297, 301, 303, 358, 359, 360, 362, 380, 383, 390, 391, 422, 423, 424, 436, 437, 441, 442, 449, 450, 453, 456, 457, 459, 460, 463, 467, 471, 474], "provid": [42, 43, 101, 104, 109, 172, 186, 187, 215, 230, 231, 257, 263, 268, 287, 292, 300, 301, 321, 326, 359, 380, 384, 386, 398, 400, 401, 402, 403, 418, 419, 422, 424, 425, 426, 432, 433, 435, 436, 437, 438, 439, 443, 447, 450, 456, 457, 460, 462, 463, 469, 471, 472, 473, 474], "make_sub_graph": 42, "opset": [42, 101, 103, 104, 183, 261, 262, 427], "ir_vers": 42, "thi": [42, 44, 85, 109, 131, 138, 142, 146, 149, 156, 157, 162, 164, 170, 172, 174, 175, 176, 177, 182, 183, 186, 187, 197, 198, 199, 200, 201, 202, 203, 205, 215, 218, 224, 225, 230, 231, 241, 242, 243, 244, 245, 246, 247, 249, 257, 265, 268, 269, 270, 272, 281, 282, 284, 285, 286, 287, 292, 295, 297, 299, 300, 301, 304, 307, 318, 321, 322, 323, 325, 326, 336, 359, 363, 368, 377, 378, 380, 390, 391, 395, 396, 397, 398, 401, 402, 403, 419, 420, 423, 424, 425, 427, 428, 429, 432, 434, 435, 436, 437, 438, 439, 441, 442, 444, 445, 447, 449, 451, 453, 454, 455, 456, 457, 460, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472], "quant_dequant_data": 42, "qtype": [42, 43, 401], "3": [42, 147, 175, 183, 200, 215, 244, 257, 268, 321, 378, 397, 398, 400, 419, 420, 423, 425, 427, 429, 430, 433, 435, 436, 437, 439, 443, 447, 449, 453, 458, 462, 463, 465, 466, 467, 468, 470, 471, 474], "scheme": [42, 43, 156, 157, 401, 402, 403, 419, 429, 447, 465, 471, 473], "sym": [42, 43, 157, 402, 403, 429, 463, 465, 473], "dequant": [42, 43, 56, 87, 90, 91, 92, 93, 95, 149, 156, 157, 391, 397, 402, 468, 469], "asym": [42, 43, 156, 157, 403, 429, 465, 473], "ortsmoothqu": 42, "fake": [42, 112, 154, 157, 161, 377, 436, 463, 465, 468], "channel": [42, 43, 142, 154, 157, 161, 162, 170, 173, 174, 182, 183, 211, 215, 254, 257, 295, 401, 403, 432, 433, 439, 441, 446, 460, 465, 470, 474], "For": [42, 157, 161, 172, 173, 174, 183, 200, 215, 244, 257, 269, 270, 272, 295, 298, 322, 323, 325, 326, 359, 395, 397, 399, 401, 403, 423, 424, 425, 427, 429, 432, 439, 441, 442, 444, 447, 460, 464, 468, 469, 471, 473, 474], "more": [42, 147, 154, 161, 174, 215, 257, 295, 398, 399, 400, 402, 420, 423, 425, 427, 430, 432, 433, 436, 437, 439, 447, 451, 454, 458, 459, 460, 464, 465, 468, 471, 472, 474], "detail": [42, 154, 161, 172, 215, 257, 391, 392, 395, 396, 400, 402, 403, 423, 429, 430, 431, 435, 436, 437, 439, 447, 456, 460, 466, 467, 469, 471, 472], "pleas": [42, 149, 154, 161, 168, 174, 175, 182, 183, 198, 199, 200, 203, 242, 243, 244, 247, 295, 297, 298, 325, 359, 378, 397, 398, 399, 400, 401, 418, 420, 424, 425, 427, 433, 435, 437, 439, 440, 444, 447, 460, 463, 464, 466, 467, 468, 472], "refer": [42, 149, 154, 161, 168, 174, 175, 178, 182, 183, 198, 242, 265, 266, 272, 295, 297, 298, 318, 319, 325, 359, 378, 397, 401, 402, 418, 419, 420, 422, 424, 425, 427, 431, 433, 434, 435, 436, 437, 439, 444, 447, 458, 462, 466, 470, 471], "accur": [42, 154, 161, 465, 468], "effici": [42, 154, 161, 398, 419, 423, 439, 459, 461, 465, 468, 471], "post": [42, 96, 97, 154, 161, 175, 183, 186, 187, 230, 231, 359, 395, 400, 401, 402, 422, 424, 425, 427, 432, 433, 439, 445, 456, 460, 461, 465, 468, 469, 471], "train": [42, 55, 79, 154, 161, 164, 175, 182, 183, 186, 187, 198, 200, 215, 225, 230, 231, 242, 244, 257, 258, 274, 297, 317, 359, 383, 398, 400, 401, 402, 408, 420, 422, 423, 424, 427, 432, 437, 439, 445, 456, 459, 460, 461, 465, 467, 468, 471, 473], "larg": [42, 154, 161, 400, 419, 423, 436, 460, 461, 465, 468, 474], "languag": [42, 154, 161, 265, 318, 395, 427, 460, 461, 465, 468], "2": [42, 43, 52, 73, 104, 108, 154, 159, 161, 163, 174, 175, 182, 183, 199, 216, 243, 268, 270, 272, 297, 304, 321, 323, 325, 336, 363, 378, 397, 401, 419, 420, 422, 423, 429, 432, 433, 434, 435, 437, 458, 460, 463, 465, 466, 467, 468, 470, 471, 472], "spiq": [42, 154, 161, 468], "free": [42, 154, 161, 175, 186, 187, 230, 231, 359, 395, 400, 445, 450, 458, 467, 468], "per": [42, 43, 154, 157, 161, 163, 182, 183, 216, 385, 401, 403, 419, 464, 465, 474], "we": [42, 43, 66, 67, 69, 73, 85, 142, 154, 161, 162, 163, 172, 174, 175, 182, 183, 197, 216, 218, 241, 265, 268, 318, 321, 366, 395, 397, 401, 402, 403, 419, 422, 425, 427, 429, 435, 436, 443, 444, 447, 451, 454, 456, 457, 458, 459, 460, 462, 463, 465, 466, 467, 468, 469, 471, 472], "onli": [42, 52, 62, 69, 85, 108, 114, 142, 154, 161, 162, 163, 174, 175, 182, 183, 198, 216, 218, 222, 242, 262, 274, 295, 297, 308, 359, 369, 377, 378, 391, 400, 401, 402, 403, 418, 419, 422, 423, 425, 428, 429, 436, 437, 444, 457, 460, 461, 462, 463, 468, 469, 471, 472, 473], "inplac": [42, 154], "mean": [42, 154, 174, 175, 182, 183, 211, 215, 254, 257, 270, 272, 295, 307, 323, 325, 368, 397, 402, 403, 419, 422, 425, 429, 435, 436, 442, 460, 463, 468, 470, 471, 473], "weight": [42, 43, 59, 60, 121, 140, 142, 147, 149, 154, 156, 157, 162, 168, 173, 174, 175, 176, 182, 183, 262, 295, 297, 314, 325, 359, 366, 375, 377, 391, 392, 400, 401, 402, 403, 422, 424, 429, 431, 436, 458, 460, 462, 463, 468, 469, 471, 472, 473], "chang": [42, 95, 142, 154, 162, 175, 177, 182, 183, 297, 299, 366, 391, 396, 402, 419, 425, 428, 434, 436, 439, 449, 450, 453, 456, 460, 469, 470, 471], "you": [42, 154, 182, 183, 196, 198, 240, 242, 297, 325, 359, 396, 397, 402, 419, 420, 422, 425, 433, 434, 435, 437, 439, 441, 442, 444, 449, 453, 456, 457, 460, 463, 466, 467, 468, 469, 472], "can": [42, 142, 149, 154, 162, 172, 173, 174, 175, 177, 182, 183, 186, 187, 197, 200, 215, 216, 218, 230, 231, 241, 244, 257, 268, 270, 272, 295, 297, 299, 321, 323, 325, 326, 336, 359, 380, 391, 397, 398, 400, 401, 402, 403, 418, 419, 420, 422, 423, 424, 425, 427, 429, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 447, 449, 450, 451, 453, 454, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474], "recov": [42, 154, 391, 401, 424, 468], "helper": [43, 44, 109, 115, 147, 156, 198, 199, 200, 214, 242, 243, 244, 256, 260, 261, 262, 334, 389], "dtype_to_nam": 43, "dtype_map": 43, "dtype": [43, 101, 104, 182, 183, 201, 202, 211, 215, 245, 246, 254, 257, 402, 403, 420, 422, 427, 429, 439, 462, 463, 468, 469, 470, 473], "its": [43, 59, 95, 147, 149, 172, 175, 183, 194, 200, 215, 238, 244, 257, 260, 266, 267, 297, 304, 319, 320, 363, 395, 420, 423, 434, 435, 437, 447, 449, 453, 456, 457, 460, 465, 467, 470, 471], "string": [43, 44, 115, 147, 163, 165, 172, 174, 175, 176, 177, 178, 179, 182, 183, 200, 217, 222, 244, 258, 263, 265, 268, 274, 275, 276, 278, 279, 287, 292, 295, 296, 297, 298, 299, 300, 318, 321, 330, 334, 383, 388, 391, 435, 468, 470], "represent": [43, 395, 397, 424, 460, 463], "quanttyp": [43, 377], "repres": [43, 174, 175, 176, 178, 200, 205, 244, 249, 268, 270, 272, 321, 323, 325, 395, 403, 420, 427, 460, 463, 471], "make_quant_nod": 43, "make": [43, 104, 142, 162, 174, 175, 177, 196, 240, 295, 297, 299, 391, 395, 396, 401, 402, 418, 419, 429, 435, 436, 444, 449, 453, 456, 463, 464, 465, 467, 468, 471], "quantizelinear": 43, "make_dquant_nod": 43, "axi": [43, 183], "dequantizelinear": 43, "is_b_transpos": 43, "wheter": 43, "inuput": 43, "b": [43, 73, 198, 242, 420, 435, 460, 465, 468, 471], "transpos": [43, 72, 174, 211, 215, 257, 261, 295, 470], "split_shared_bia": 43, "share": [43, 81, 97, 108, 140, 157, 428, 429, 468, 471], "float_to_float16": 43, "float_to_bfloat16": 43, "bfloat16": [43, 437, 439, 447, 464], "cast_tensor": 43, "tensorproto": [43, 104], "remove_init_from_model_input": 43, "collate_pr": 43, "result": [43, 147, 149, 156, 211, 215, 254, 257, 265, 268, 269, 270, 272, 318, 321, 322, 323, 325, 339, 359, 366, 380, 390, 391, 395, 398, 400, 419, 422, 423, 425, 432, 434, 435, 436, 444, 445, 456, 457, 458, 460, 461, 463, 465, 467, 468, 469, 470, 471, 472, 474], "quantize_data_with_scale_zero": 43, "zero_point": 43, "point": [43, 211, 254, 269, 270, 279, 304, 322, 323, 363, 391, 435, 456, 463, 468, 470, 471], "To": [43, 268, 321, 336, 396, 402, 403, 420, 422, 425, 437, 440, 443, 449, 451, 453, 454, 462, 464, 465, 466, 468, 471, 473], "pack": [43, 60], "comput": [43, 104, 149, 156, 265, 266, 269, 270, 272, 318, 319, 322, 323, 325, 380, 391, 419, 424, 427, 435, 436, 437, 439, 450, 460, 461, 463, 465, 468, 471], "linear": [43, 161, 170, 172, 173, 174, 175, 178, 182, 183, 295, 397, 423, 427, 436, 460, 468, 471], "transform": [43, 49, 142, 144, 145, 146, 153, 175, 198, 199, 200, 201, 202, 203, 205, 207, 209, 242, 243, 244, 245, 246, 247, 249, 251, 253, 264, 317, 397, 398, 400, 420, 423, 424, 425, 426, 430, 436, 439, 444, 445, 446, 447, 460, 461, 464, 465, 468, 469, 471, 473, 474], "when": [43, 52, 63, 69, 147, 173, 175, 178, 182, 183, 198, 199, 207, 215, 242, 243, 251, 257, 266, 296, 297, 319, 359, 380, 395, 398, 402, 419, 420, 436, 447, 449, 450, 453, 457, 460, 463, 465, 468, 470, 471], "uint8": [43, 157, 211, 254, 268, 316, 321, 377, 401, 420, 429, 462, 463, 470, 473], "rmin": [43, 463], "rmax": [43, 463], "m": [43, 149, 174, 182, 183, 295, 423, 433, 439, 441, 444, 447, 451, 454, 460, 474], "where": [43, 182, 183, 268, 272, 321, 325, 377, 391, 403, 422, 423, 449, 453, 457, 468, 469], "max": [43, 103, 142, 162, 182, 183, 215, 257, 269, 270, 304, 322, 323, 363, 391, 400, 422, 433, 436, 460, 463, 468, 470, 471], "ab": [43, 168, 175, 297, 463, 468], "np": [43, 215, 257, 304, 363, 425, 470, 471], "calculate_scale_zp": 43, "quantize_rang": 43, "calcul": [43, 59, 156, 168, 174, 178, 183, 201, 202, 245, 246, 269, 270, 295, 297, 307, 322, 323, 368, 381, 391, 420, 435, 436, 447, 458, 460, 463, 467, 468, 471, 473], "quantize_data": 43, "add": [43, 51, 63, 108, 118, 147, 178, 182, 183, 198, 200, 222, 242, 244, 296, 314, 375, 391, 396, 397, 403, 419, 420, 425, 427, 429, 435, 436, 451, 454, 467, 469, 471, 472], "necessari": [43, 395, 398, 402, 438, 457, 460, 467, 471], "intermedi": [43, 149, 165, 182, 183, 217, 397, 432, 463], "trasnform": 43, "full": [43, 198, 199, 200, 242, 243, 244, 391, 400, 420, 422, 428, 434, 457, 460, 466], "equat": [43, 270, 272, 323, 325, 463, 468], "r": [43, 142, 162, 422, 433, 457, 463, 474], "": [43, 104, 142, 147, 162, 172, 173, 174, 175, 179, 180, 182, 183, 197, 200, 214, 215, 216, 218, 220, 227, 241, 244, 256, 257, 270, 295, 297, 323, 325, 326, 330, 359, 388, 391, 395, 398, 402, 403, 422, 423, 425, 427, 429, 432, 436, 437, 444, 447, 449, 453, 456, 459, 460, 461, 462, 463, 465, 466, 467, 468, 471, 472, 473, 474], "q": [43, 106, 108, 130, 402, 465, 468], "z": [43, 423, 468], "real": [43, 201, 218, 245, 402, 425, 461, 463], "origin": [43, 154, 156, 172, 175, 178, 183, 198, 215, 216, 242, 257, 281, 282, 284, 285, 286, 296, 297, 316, 364, 377, 391, 396, 420, 444, 460, 463, 470, 471, 473], "quantize_data_per_channel": 43, "dequantize_data_with_scale_zero": 43, "tensor_valu": 43, "scale_valu": 43, "zo_valu": 43, "sacal": 43, "dequantize_data": 43, "valueinfo": 43, "tensor_nam": [43, 147], "new_dtyp": 43, "cast": [43, 56, 464, 470], "info": [43, 156, 157, 174, 178, 213, 218, 223, 295, 330, 387, 391, 397, 422, 438], "quantizedvalu": 43, "new_quantized_nam": 43, "scale_nam": 43, "zero_point_nam": 43, "quantized_value_typ": 43, "quint8": 43, "linearli": 43, "intial": 43, "quantizediniti": 43, "quantized_data": 43, "quantizationmod": 43, "quantizedvaluetyp": 43, "quantformat": 43, "quantize_nparrai": 43, "arr": [43, 391], "low": [43, 186, 187, 201, 202, 230, 231, 245, 246, 263, 273, 300, 326, 401, 402, 418, 420, 425, 436, 437, 461, 463, 465, 468, 471], "high": [43, 201, 202, 245, 246, 420, 422, 433, 461, 471], "attribute_to_kwarg": 43, "attribut": [43, 82, 103, 104, 147, 156, 172, 175, 180, 183, 391, 401, 419, 429, 431, 436, 462, 473], "kwarg": [43, 104, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 134, 136, 137, 170, 182, 183, 200, 213, 215, 220, 223, 244, 257, 313, 315, 325, 326, 327, 329, 331, 333, 334, 335, 359, 374, 376, 378, 380, 386, 387, 390, 391, 419], "make_nod": 43, "find_by_nam": 43, "item_list": 43, "find": [43, 66, 67, 69, 104, 147, 272, 279, 304, 325, 363, 391, 401, 422, 442, 449, 453, 456, 457, 467, 469, 471], "item": [43, 178, 180, 182, 183, 214, 256, 296, 314, 375, 425, 460, 468, 471], "trt_env_setup": 43, "environ": [43, 163, 216, 395, 418, 449, 453, 456, 471], "variabl": [43, 163, 176, 182, 183, 200, 216, 244, 304, 363, 377, 433, 460, 471], "tensorrt": [43, 437, 463], "to_numpi": 43, "get_ops_recurs": 44, "prefix": [44, 147, 148, 155, 163, 439, 444, 469], "graph_info": 44, "templateadaptor": 44, "tampl": 44, "dictionari": [44, 66, 67, 69, 147, 148, 149, 156, 180, 182, 183, 214, 256, 268, 275, 278, 280, 321, 391], "yaml": [44, 178, 180, 183, 186, 187, 198, 200, 216, 230, 231, 242, 244, 258, 263, 274, 275, 276, 278, 287, 292, 300, 301, 390, 391, 401, 403, 431, 435, 436, 458, 462, 469, 470], "file": [44, 104, 147, 156, 160, 178, 179, 182, 183, 186, 187, 198, 199, 200, 203, 214, 215, 221, 224, 230, 231, 242, 243, 244, 247, 256, 257, 258, 263, 268, 274, 275, 276, 278, 287, 292, 296, 298, 300, 301, 321, 326, 336, 342, 343, 347, 359, 390, 391, 398, 401, 402, 403, 425, 428, 431, 434, 435, 436, 438, 442, 451, 454, 455, 456, 457, 458, 462, 463, 465, 469, 470], "pytorchadaptor": 44, "api": [44, 69, 74, 109, 226, 263, 268, 300, 313, 314, 321, 325, 359, 374, 375, 378, 391, 396, 397, 404, 406, 410, 413, 416, 422, 427, 432, 436, 441, 445, 446, 447, 466, 467, 471, 475], "pytorch_ipexadaptor": 44, "intel": [44, 174, 219, 222, 259, 264, 271, 272, 295, 298, 306, 312, 317, 324, 325, 337, 359, 367, 373, 393, 395, 396, 398, 399, 401, 402, 403, 420, 421, 423, 424, 426, 427, 429, 430, 434, 437, 438, 439, 444, 446, 447, 458, 459, 460, 461, 463, 464, 466, 468, 469, 471, 472, 473], "extens": [44, 391, 398, 400, 401, 429, 432, 433, 436, 437, 438, 440, 445, 446, 447, 451, 454, 455, 460, 461, 463, 468, 471, 472, 473], "ipex": [44, 151, 156, 182, 183, 432, 436, 437, 441, 445, 446, 468], "pytorch_fxadaptor": 44, "fx": [44, 156, 182, 308, 369, 432, 437, 445, 446, 461, 463, 464], "graph": [44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 116, 129, 131, 135, 138, 141, 142, 144, 145, 146, 147, 172, 197, 241, 263, 327, 334, 358, 397, 401, 420, 423, 425, 431, 438, 439, 463, 464, 469], "pytorchweightonlyadaptor": 44, "querybackendcap": [45, 401, 402], "tensorflowadaptor": 46, "stock": [46, 445, 468], "spr": 46, "tensorflow_itexadaptor": 46, "itex": [46, 108, 182, 183, 261, 437, 463, 468], "tensorflowqueri": [46, 401], "performance_onli": [46, 47, 48, 106, 130, 135, 146, 182, 436], "itex_mod": [46, 47, 88, 106, 130, 135], "quant_mod": [46, 314, 375, 402, 403], "graphconvert": 47, "qt_config": 47, "recip": [47, 172, 182, 183, 263, 300, 436, 465, 468, 471], "int8_sequ": 47, "fp32_op": [47, 49, 106], "bf16_op": [47, 49, 106, 402, 464], "data_load": [47, 48, 401], "fake_qu": [47, 87, 106, 130, 135], "qdq_enabl": 47, "new_api": [47, 48, 70, 71, 76, 78, 91, 98, 130, 135, 142], "use_bf16": [47, 48, 182, 462], "without": [48, 89, 147, 175, 215, 257, 297, 316, 377, 395, 423, 425, 436, 447, 460, 461, 462, 471, 472], "graphconverterwithoutcalib": 48, "recover_config": 48, "rewrit": [49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 105, 106, 107, 108, 227], "bf16convert": [49, 464], "biasadd": [51, 58, 63, 65, 108, 429], "convertaddtobiasaddoptim": 51, "conv2d": [51, 58, 59, 60, 64, 65, 70, 124, 134, 142, 402, 403, 422, 427, 429, 468, 469, 471], "addv2": [51, 68, 429], "layout": 52, "convertlayoutoptim": 52, "optim": [52, 73, 74, 78, 79, 115, 117, 172, 175, 179, 182, 183, 219, 225, 227, 263, 264, 280, 300, 304, 317, 363, 380, 381, 388, 391, 398, 400, 418, 422, 423, 424, 425, 429, 430, 432, 433, 436, 438, 439, 441, 443, 444, 447, 450, 460, 461, 462, 463, 464, 467, 468, 469, 471, 473], "nchw": [52, 211], "nhwc": [52, 211], "It": [52, 164, 174, 186, 187, 224, 230, 231, 270, 272, 279, 295, 300, 307, 323, 325, 326, 359, 364, 368, 380, 401, 402, 403, 422, 423, 436, 442, 445, 450, 456, 457, 460, 463, 466, 467, 471, 473], "exist": [52, 163, 180, 216, 334, 427, 435, 443, 471], "4": [52, 156, 157, 163, 174, 175, 182, 183, 207, 210, 211, 215, 251, 254, 257, 265, 266, 268, 318, 319, 321, 377, 378, 395, 401, 403, 418, 425, 426, 429, 432, 433, 435, 436, 444, 460, 463, 465, 468, 470, 471, 474], "abov": [52, 401, 402, 403, 423, 460, 463, 468, 471], "graph_def": [52, 147, 261, 326, 334, 358, 359], "leakyrelu": [53, 468], "convertleakyreluoptim": 53, "below": [53, 65, 73, 182, 183, 301, 325, 359, 396, 397, 400, 401, 402, 403, 419, 422, 423, 425, 431, 435, 439, 441, 449, 450, 453, 456, 458, 459, 460, 462, 463, 465, 467, 468, 469, 471, 472], "subgraph": [53, 65, 104, 155, 471], "mul": [53, 64, 65, 68, 161, 427, 468], "maximum": [53, 174, 175, 182, 183, 198, 215, 242, 257, 266, 297, 304, 319, 363, 403, 420, 422, 436, 460, 463, 470], "note": [53, 174, 268, 308, 321, 369, 398, 402, 403, 419, 422, 425, 427, 429, 433, 436, 441, 444, 449, 453, 456, 460, 463, 465, 468, 469, 471, 472, 473], "coeffici": [53, 460], "less": [53, 147, 182, 183, 391, 418, 423, 436, 460], "than": [53, 147, 198, 215, 242, 257, 391, 398, 400, 418, 420, 431, 458, 459, 460, 463, 465, 467, 470, 471], "convers": [53, 183, 274, 401, 402, 436, 437, 463, 464, 468], "valid": [53, 66, 67, 104, 175, 178, 182, 183, 200, 244, 268, 296, 297, 321, 334, 396, 398, 400, 401, 420, 422, 423, 426, 429, 432, 434, 436, 447, 460, 463, 466], "nan": 54, "random": [54, 147, 182, 183, 211, 215, 254, 257, 264, 280, 304, 306, 317, 363, 367, 391, 396, 398, 436, 462, 470, 473], "convertnantorandom": 54, "const": [54, 55, 62, 63, 66, 67, 69, 81, 97], "consist": [54, 62, 396, 397, 468, 471], "placehold": [55, 196, 240], "convertplaceholdertoconst": 55, "rerewrit": 56, "dequantizecastoptim": 56, "b16": 56, "dilat": 57, "contract": 57, "dilatedcontract": 57, "spacetobatchnd": 57, "batchtospacend": 57, "pattern": [57, 58, 60, 77, 95, 106, 107, 108, 130, 135, 156, 167, 169, 172, 173, 175, 176, 179, 182, 183, 200, 244, 264, 285, 286, 288, 293, 297, 314, 317, 375, 401, 420, 429, 432, 436, 457, 459, 462, 468, 471, 474], "inject": [58, 436], "dummi": [58, 172, 201, 202, 245, 246, 272, 325, 400, 420, 430, 435, 436], "injectdummybiasaddoptim": 58, "fusion": [58, 60, 69, 77, 108, 125, 126, 127, 130, 131, 132, 136, 397, 401, 429], "expanddim": 59, "expanddimsoptim": 59, "next": [59, 191, 235, 378, 398, 402, 403, 419, 462, 465, 471], "featch": 60, "reshap": [60, 66, 67, 72, 468], "fetchweightfromreshapeoptim": 60, "handl": [60, 147, 154, 161, 387, 397, 399, 419, 468], "fold": [61, 62, 262, 429, 468], "foldbatchnormnodesoptim": 61, "graphfoldconstantoptim": 62, "sequenc": [62, 104, 173, 174, 182, 183, 198, 214, 215, 242, 256, 257, 266, 270, 295, 319, 323, 401, 420, 429, 460, 465, 470], "self": [62, 172, 182, 183, 336, 401, 402, 419, 420, 432, 435, 467, 469, 471], "supported_op_typ": 62, "fusebiasaddandaddoptim": 63, "second": [63, 173, 182, 183, 198, 242, 364, 391, 422, 436, 449, 453, 457, 465, 468, 471, 473], "columnwis": 64, "fusecolumnwisemuloptim": 64, "depthwiseconv2dn": [64, 70, 124, 134, 429], "math": [65, 463], "fuseconvwithmathoptim": 65, "elimin": 65, "sub": [65, 156, 163, 172, 216, 398, 471], "realdiv": [65, 68], "decompos": [66, 67], "fusedecomposedbnoptim": 66, "input_graph_def": [66, 67, 69], "node_name_from_input": [66, 67, 69], "node_nam": [66, 67, 69, 147, 334, 344, 402], "strip": [66, 67, 69, 82, 83, 147, 469], "port": [66, 67, 69], "other": [66, 67, 69, 154, 161, 197, 241, 270, 323, 334, 395, 396, 397, 402, 403, 422, 429, 432, 434, 436, 438, 458, 460, 463, 468, 470, 471, 474], "underli": [66, 67, 69], "node_from_map": [66, 67, 69], "node_map": [66, 67, 69], "pull": [66, 67, 69], "def": [66, 67, 69, 186, 187, 230, 231, 359, 378, 380, 397, 401, 419, 420, 423, 424, 425, 435, 436, 463, 468, 469, 471], "entri": [66, 67, 69, 149, 222, 263, 301, 391, 434], "index": [66, 67, 69, 104, 163, 183, 191, 196, 200, 235, 240, 244, 279, 391, 420, 435, 457, 468], "everi": [66, 67, 69, 174, 175, 182, 183, 295, 297, 401, 419, 444, 449, 453, 471], "identifi": [66, 67, 69, 268, 321, 334, 460], "want": [66, 67, 69, 172, 182, 183, 196, 198, 240, 242, 297, 364, 380, 397, 401, 419, 420, 425, 436, 444, 456, 457, 458, 467, 469, 471], "nodedef": [66, 67, 69], "rais": [66, 67, 69, 104, 174, 175, 178, 268, 295, 296, 297, 321, 326, 378, 400, 460, 461], "valueerror": [66, 67, 69, 268, 321, 378, 428], "If": [66, 67, 69, 73, 163, 182, 183, 186, 187, 200, 215, 230, 231, 244, 257, 296, 326, 359, 378, 380, 396, 397, 402, 418, 419, 420, 425, 433, 434, 435, 436, 442, 450, 451, 454, 456, 458, 463, 467, 468, 469, 470, 471], "isn": [66, 67, 69], "t": [66, 67, 69, 142, 162, 174, 182, 183, 215, 218, 257, 270, 323, 397, 401, 422, 423, 425, 436, 437, 457, 460, 463, 471, 473], "present": [66, 67, 69, 422, 461, 468], "values_from_const": [66, 67, 69], "node_def": [66, 67, 69], "extract": [66, 67, 69, 147, 172, 200, 244, 316, 377, 420], "ha": [66, 67, 69, 73, 174, 175, 216, 265, 295, 297, 318, 378, 396, 398, 401, 402, 403, 419, 427, 432, 436, 437, 442, 456, 460, 462, 463, 464, 467, 468, 471], "access": [66, 67, 69, 180, 183, 386, 391, 451, 454], "valid_reshape_input": [66, 67], "reshape_in0_ndef": [66, 67], "reshape_in1_ndef": [66, 67], "ar": [66, 67, 104, 156, 174, 175, 182, 183, 198, 215, 242, 257, 268, 272, 279, 295, 296, 297, 301, 303, 304, 321, 325, 360, 362, 363, 377, 378, 383, 390, 391, 395, 396, 397, 398, 401, 402, 419, 420, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 442, 444, 447, 450, 456, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473], "bypass_reshap": [66, 67], "input_node_map": [66, 67], "input_nam": [66, 67, 101, 141, 183, 261, 262, 427], "get_const_dim_count": [66, 67], "dimens": [66, 67, 104, 190, 215, 234, 257, 420, 423, 470], "instancenorm": [67, 468], "fusedecomposedinoptim": 67, "gelu": 68, "fusegeluoptim": 68, "sqrt": [68, 422], "erf": 68, "samll": 69, "layernorm": [69, 468], "fuselayernormoptim": 69, "remap": 69, "smaller": [69, 215, 257, 423, 436, 460, 470], "case": [69, 73, 157, 163, 183, 197, 214, 215, 216, 241, 256, 257, 263, 287, 292, 300, 336, 403, 419, 423, 424, 425, 429, 431, 435, 440, 444, 456, 457, 458, 460, 461, 463, 465, 466, 470, 472, 473, 474], "fusedbatcnormv3": 69, "And": [69, 397, 418, 436, 442, 468], "further": [69, 183, 395, 437, 438, 439, 441, 450, 456, 463], "restrict": [69, 182, 183, 460, 467], "2d": [69, 468], "3d": [69, 461, 468], "kera": [69, 115, 172, 178, 183, 200, 207, 222, 244, 251, 329, 334, 402, 419, 425, 438, 446, 447], "fusepadwithconv2doptim": 70, "excluded_op_nam": [70, 71, 179, 182, 183, 436, 460], "cfg": [70, 71, 156, 179, 314, 375, 383, 402, 403], "itex_qdq_mod": [70, 71], "conv3d": [70, 124], "fusepadwithfp32conv2doptim": 71, "fusetransposereshapeoptim": 72, "cse": [73, 97], "graphcseoptim": 73, "introduc": [73, 396, 401, 402, 403, 429, 436, 463, 465, 466, 468, 472], "ident": [73, 79, 173, 395, 423], "three": [73, 178, 198, 242, 303, 360, 362, 397, 401, 402, 433, 437, 450, 459, 463, 464, 467, 468, 469], "d": [73, 156, 423, 431, 457, 474], "those": [73, 307, 368, 391, 422, 423, 424, 431, 436, 437, 459, 460, 463, 471], "child": [73, 469], "b1": 73, "c1c2": 73, "d1": [73, 391], "c1": 73, "c2": 73, "memori": [73, 263, 287, 292, 300, 336, 391, 419, 424, 436, 437, 439, 458, 460, 463, 465, 468, 471, 474], "bound": [73, 163, 215, 257, 268, 304, 321, 363, 435, 470], "like": [73, 95, 97, 147, 172, 178, 183, 186, 187, 188, 200, 230, 231, 232, 244, 263, 272, 297, 300, 301, 325, 334, 359, 380, 396, 397, 398, 401, 402, 422, 423, 424, 432, 444, 459, 460, 463, 465, 466, 468, 471], "relu": [73, 77, 108, 397, 429, 468, 469], "relu6": [73, 429], "updat": [73, 156, 168, 174, 178, 297, 325, 359, 388, 428, 435, 436, 442, 447, 450, 460, 468, 471, 472], "graphdef": [73, 147, 334, 358, 438], "grappler": [74, 429], "grappleroptim": 74, "input_output_nam": 74, "opt_cfg": 74, "wrapper": [74, 101, 102, 103, 104, 121, 139, 148, 165, 197, 215, 217, 218, 220, 221, 227, 241, 257, 268, 272, 321, 325, 330, 334, 464], "leverag": [74, 398, 400, 423, 427, 439, 456, 459, 463, 465, 471], "built": [74, 184, 185, 189, 194, 198, 199, 204, 206, 208, 209, 211, 212, 215, 220, 222, 228, 229, 233, 236, 238, 242, 243, 248, 250, 252, 253, 254, 255, 257, 301, 325, 328, 336, 359, 380, 398, 401, 420, 425, 436, 449, 453, 458, 463, 470, 471, 473], "convert_add_to_biasadd": [75, 86, 110], "convert_layout": [75, 86, 110], "convert_leakyrelu": [75, 86, 110], "convert_nan_to_random": [75, 86, 110], "convert_placeholder_to_const": [75, 86, 110], "dequantize_cast_optim": [75, 86, 110], "dilated_contract": [75, 86, 110], "dummy_biasadd": [75, 86, 110], "expanddims_optim": [75, 86, 110], "fetch_weight_from_reshap": [75, 86, 110], "fold_batch_norm": [75, 86, 110], "fold_const": [75, 86, 110], "fuse_biasadd_add": [75, 86, 110], "fuse_column_wise_mul": [75, 86, 110], "fuse_conv_with_math": [75, 86, 110], "fuse_decomposed_bn": [75, 86, 110], "fuse_decomposed_in": [75, 86, 110], "fuse_gelu": [75, 86, 110], "fuse_layer_norm": [75, 86, 110], "fuse_pad_with_conv": [75, 86, 110], "fuse_pad_with_fp32_conv": [75, 86, 110], "fuse_reshape_transpos": [75, 86, 110], "graph_cse_optim": [75, 86, 110], "grappler_pass": [75, 86, 110], "insert_print_nod": [75, 86, 110], "move_squeeze_after_relu": [75, 86, 110], "pre_optim": [75, 86, 110], "remove_training_nod": [75, 86, 110], "rename_batch_norm": [75, 86, 110], "split_shared_input": [75, 86, 110], "strip_equivalent_nod": [75, 86, 110, 147], "strip_unused_nod": [75, 86, 110, 147], "switch_optim": [75, 86, 110], "insert": [76, 104, 106, 108, 112, 145, 154, 161, 397, 402, 419, 432, 436, 439, 460, 463, 464, 468, 469], "print": [76, 149, 172, 272, 325, 378, 391, 425, 435, 436, 460, 468, 471], "insertprintminmaxnod": 76, "pre_node_nam": 76, "post_node_nam": 76, "pass": [76, 147, 163, 325, 359, 391, 397, 401, 418, 420, 423, 424, 425, 431, 435, 436, 457, 460, 462, 463, 464, 468, 473], "sampl": [76, 157, 182, 183, 191, 196, 198, 199, 200, 211, 215, 235, 240, 242, 243, 244, 254, 257, 272, 279, 304, 325, 363, 398, 419, 420, 426, 432, 457, 463, 470, 471, 473, 474], "move": [77, 397, 462, 465, 466], "squeez": [77, 397], "movesqueezeafterreluoptim": 77, "match": [77, 101, 172, 268, 269, 321, 322, 423, 457, 465], "pre": [78, 115, 172, 186, 187, 198, 230, 231, 242, 326, 359, 380, 420, 423, 424, 436, 444, 460, 461, 463, 465, 469, 471], "entranc": [78, 189], "preoptim": 78, "removetrainingnodesoptim": 79, "protected_nod": 79, "types_to_splic": 79, "checknumer": 79, "stopgradi": 79, "renam": [80, 466], "fusedbatchnorm": 80, "fusedbatchnormv2": 80, "renamebatchnormoptim": 80, "splitsharedinputoptim": 81, "equival": [82, 468], "stripequivalentnodesoptim": 82, "output_node_nam": [82, 83, 130, 131, 135, 147], "same": [82, 140, 147, 157, 175, 183, 198, 215, 242, 257, 268, 321, 391, 401, 403, 418, 419, 420, 423, 425, 429, 436, 440, 444, 449, 453, 460, 462, 463, 465, 468, 469, 470, 471], "unus": [83, 147], "stripunusednodesoptim": 83, "input_node_nam": [83, 130, 135, 147], "switch": [84, 439, 469], "switchoptim": 84, "condit": [84, 198, 199, 200, 215, 242, 243, 244, 257, 303, 360, 362, 420, 434, 470, 471], "graphrewriterbas": 85, "abstract": [85, 164, 215, 257, 258, 263, 300, 401, 403, 431], "freeze_fake_qu": [86, 94, 110], "freeze_valu": [86, 94, 110], "freeze_value_without_calib": [86, 94, 110], "fuse_conv_redundant_dequant": [86, 94, 110], "fuse_conv_requant": [86, 94, 110], "fuse_matmul_redundant_dequant": [86, 94, 110], "fuse_matmul_requant": [86, 94, 110], "meta_op_optim": [86, 94, 110], "post_hostconst_convert": [86, 94, 110], "post_quantized_op_cs": [86, 94, 110], "rnn_convert": [86, 94, 110], "scale_propag": [86, 94, 110], "onnx_graph": [86, 100, 110], "onnx_schema": [86, 100, 110], "tf2onnx_util": [86, 100, 110], "insert_qdq_pattern": [86, 105, 110], "merge_duplicated_qdq": [86, 105, 110], "share_qdq_y_pattern": [86, 105, 110], "freez": [87, 88, 89, 439, 460], "fakequ": 87, "freezefakequantopoptim": 87, "follow": [87, 109, 173, 200, 244, 265, 268, 318, 321, 395, 396, 397, 398, 401, 402, 403, 419, 420, 423, 424, 425, 429, 433, 434, 435, 436, 437, 438, 439, 440, 441, 449, 453, 459, 460, 462, 463, 468, 469, 471], "freezevaluetransform": 88, "max_min_data": [88, 89], "postfix": [88, 89], "tensor_data": [88, 391, 392], "th": [88, 89], "gpu": [88, 89, 96, 182, 183, 400, 418, 432, 436, 437, 441, 447, 456, 462, 463], "freezevaluewithoutcalibtransform": 89, "95": [89, 272, 325, 435, 468, 474], "quantizedconv": [90, 91], "quantizeddeconv": 90, "redund": [90, 92], "fuseconvredundantdequantizetransform": 90, "cpu": [90, 91, 92, 93, 182, 183, 391, 400, 402, 418, 432, 436, 437, 439, 441, 447, 456, 461, 462, 463, 464, 469], "_quantizedconv": 90, "_quantizeddeconv": 90, "successor": [90, 91, 92, 93], "requant": [91, 93, 469], "fuseconvrequantizetransform": 91, "quantizedmatmul": [92, 93], "fusematmulredundantdequantizetransform": 92, "_quantizedmatmul": [92, 93], "fusematmulrequantizedequantizetransform": 93, "quantizedmatmulwithbiasanddequant": 93, "fusematmulrequantizetransform": 93, "fusematmulrequantizedequantizenewapitransform": 93, "fusematmulrequantizenewapitransform": 93, "newapi": 93, "meta": [95, 461], "metainfochangingmemopoptim": 95, "metaop": 95, "With": [95, 336, 397, 401, 403, 419, 436, 444, 449, 453, 457, 458, 460, 461, 467, 468, 471, 474], "better": [95, 182, 183, 186, 187, 230, 231, 279, 326, 359, 380, 424, 435, 437, 460, 461, 463, 465, 467, 471], "perform": [95, 139, 163, 176, 182, 183, 198, 210, 211, 216, 242, 254, 263, 287, 292, 300, 307, 325, 336, 359, 364, 368, 397, 398, 401, 402, 418, 420, 421, 422, 424, 426, 427, 432, 433, 435, 436, 437, 438, 439, 441, 445, 447, 450, 456, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 471, 473, 474], "hostconst": 96, "posthostconstconvert": 96, "just": [96, 188, 213, 215, 218, 220, 221, 223, 232, 257, 336, 398, 436, 446, 450, 456, 459, 463, 468, 470, 471], "postcseoptim": 97, "duplic": [97, 107, 304, 363], "quantizev2": 97, "decreas": [97, 460], "size": [97, 157, 174, 190, 191, 197, 200, 206, 211, 215, 234, 235, 241, 244, 250, 254, 257, 295, 336, 391, 395, 402, 419, 420, 425, 428, 436, 456, 457, 458, 460, 465, 468, 470, 473, 474], "rnn": 98, "quantizedrnnconvert": 98, "calibration_data": [98, 106], "rnn_detail": 98, "scalepropagationtransform": 99, "direct": [99, 174, 295, 460], "export": [100, 183, 264, 268, 317, 321, 400, 430, 442, 457, 469, 472], "onnxgraph": 101, "output_shap": 101, "extra_opset": 101, "output_nam": [101, 141, 183, 261, 262, 427], "is_subgraph": 101, "graph_nam": 101, "manipul": [101, 102], "onnxnod": 102, "skip_convers": 102, "schema": [103, 157], "onnxopschema": 103, "domain": [103, 104, 182, 183, 460, 471], "since_vers": 103, "get_schema": 103, "max_inclusive_opset_vers": 103, "within": [103, 175, 263, 268, 300, 321, 334, 353, 358, 395, 397, 403, 437, 449, 453, 456, 461, 468, 471], "get_max_supported_opset_vers": 103, "packag": [103, 401, 428, 433, 456, 457, 461, 466, 471], "set_nam": 104, "find_opset": 104, "assert_error": 104, "bool_val": 104, "error_msg": 104, "error": [104, 149, 272, 307, 325, 368, 387, 422, 435, 440, 468, 471], "messag": [104, 145, 471], "map_numpy_to_onnx_dtyp": 104, "np_dtype": 104, "map_onnx_to_numpy_typ": 104, "onnx_typ": 104, "add_port_to_nam": 104, "nr": 104, "get_tensorflow_node_attr": 104, "pars": [104, 156, 198, 199, 211, 215, 242, 243, 254, 257, 342, 343, 347, 402, 403, 470], "get_tensorflow_tensor_shap": 104, "shape": [104, 147, 174, 201, 202, 211, 215, 245, 246, 254, 257, 268, 321, 400, 420, 429, 430, 436, 468, 470], "get_tensorflow_node_shape_attr": 104, "attr": [104, 147, 172], "map_tensorflow_dtyp": 104, "get_tensorflow_tensor_data": 104, "convert_tensorflow_tensor_to_onnx": 104, "read_tensorflow_node_attr": 104, "read": [104, 147, 203, 215, 247, 257, 296, 420, 464, 467], "infer_onnx_shape_dtyp": 104, "opset_vers": [104, 141, 183, 261, 262, 427], "input_shap": [104, 202, 246, 420], "input_dtyp": 104, "sometim": [104, 397, 422, 463], "so": [104, 215, 257, 377, 397, 401, 422, 428, 432, 437, 442, 444, 463, 464, 465, 468, 469, 470, 472], "make_onnx_shap": 104, "seqtyp": 104, "tensor_dtyp": 104, "around": 104, "signifi": 104, "make_onnx_inputs_output": 104, "elem_typ": 104, "text": [104, 214, 215, 256, 257, 265, 270, 298, 318, 323, 427, 434, 445, 460, 461, 465, 468, 470, 474], "datatyp": [104, 156, 464, 471, 474], "save_protobuf": 104, "path": [104, 147, 156, 172, 178, 179, 198, 199, 200, 215, 242, 243, 244, 257, 258, 261, 262, 263, 274, 275, 276, 278, 287, 292, 296, 298, 300, 301, 314, 326, 334, 358, 359, 375, 388, 391, 397, 398, 401, 420, 422, 425, 431, 435, 436, 437, 438, 442, 445, 456, 459, 470, 473], "as_text": 104, "save": [104, 178, 182, 183, 200, 227, 244, 261, 262, 301, 334, 359, 380, 381, 386, 391, 397, 401, 431, 436, 437, 438, 440, 444, 449, 453, 459, 463, 465, 468], "protobuf": 104, "is_onnx_domain": 104, "is_list_or_tupl": 104, "are_shapes_equ": 104, "src": [104, 457], "dest": 104, "equal": [104, 142, 147, 162, 378, 391, 460], "get_subgraphs_from_onnx": 104, "model_proto": 104, "over": [104, 200, 244, 272, 325, 402, 426, 430, 432, 435, 447, 456, 462, 468, 471], "df": 104, "initialize_name_count": 104, "avoid": [104, 157, 198, 242, 397, 465, 469], "conflict": [104, 428], "counter": 104, "make_nam": 104, "get_index_from_strided_slice_of_shap": 104, "outputs_to_valu": 104, "stride": [104, 215, 257, 470], "slice": 104, "compute_const_folding_using_tf": 104, "g": [104, 174, 182, 183, 423, 426, 430, 439, 444, 460, 465, 466, 468, 471], "const_node_valu": 104, "graph_output": 104, "constant": [104, 262, 264, 304, 306, 312, 317, 363, 367, 373, 384, 419, 429, 470], "tf": [104, 115, 147, 172, 178, 197, 198, 199, 200, 215, 241, 242, 243, 244, 257, 332, 334, 425, 438, 461, 464, 470], "generategraphwithqdqpattern": 106, "op_wise_config": [106, 130, 135, 402], "quantized_nod": 106, "dq": [106, 108, 130, 468], "pair": [106, 182, 183, 402, 419, 436, 437, 466], "befor": [106, 108, 161, 174, 175, 177, 182, 183, 198, 242, 295, 297, 299, 396, 403, 419, 420, 423, 424, 425, 428, 429, 433, 436, 451, 454, 463, 467, 469, 471], "merg": [107, 190, 234, 314, 375, 451, 454, 469, 471], "mergeduplicatedqdqoptim": 107, "y": [108, 182, 183, 215, 257, 304, 363, 422, 428, 442, 468, 470], "shareqdqforitexypatternoptim": 108, "one": [108, 109, 114, 156, 157, 163, 174, 175, 177, 215, 225, 257, 265, 268, 272, 274, 295, 298, 299, 318, 321, 325, 398, 401, 423, 424, 425, 429, 432, 433, 435, 436, 437, 439, 440, 444, 445, 447, 449, 450, 453, 456, 457, 458, 459, 460, 462, 463, 465, 466, 468, 470, 471], "enabl": [108, 149, 157, 175, 182, 183, 297, 402, 403, 425, 433, 437, 439, 441, 444, 445, 447, 460, 461, 471], "break": [108, 425, 436], "graphanalyz": 109, "extend_engin": 109, "analyz": [109, 172, 334, 467, 468, 469], "under": [109, 182, 183, 200, 244, 390, 398, 420, 434, 435, 436, 439, 444, 445, 456, 459, 460, 468, 469, 471], "singleton": [109, 391], "specifi": [109, 156, 163, 182, 183, 186, 187, 215, 216, 230, 231, 257, 263, 268, 272, 275, 278, 287, 292, 300, 301, 321, 325, 326, 359, 378, 380, 390, 391, 402, 403, 425, 429, 435, 436, 444, 458, 462, 470, 471, 473], "graphrewriterhelp": 109, "encapsul": [109, 186, 187, 230, 231, 326, 359, 380, 438], "quantize_lay": [110, 111, 113], "fake_quant": [110, 111, 113], "quantize_config": [110, 111, 113, 402], "quantize_help": [110, 111, 113], "quantize_wrapp": [110, 111, 113], "fuse_qdq_bn": [110, 111, 129], "fuse_qdq_concatv2": [110, 111, 129], "fuse_qdq_conv": [110, 111, 129], "fuse_qdq_deconv": [110, 111, 129], "fuse_qdq_in": [110, 111, 129], "fuse_qdq_matmul": [110, 111, 129], "fuse_qdq_pool": [110, 111, 129], "optimize_qdq": [110, 111, 129], "optimize_lay": [111, 113, 116], "quantize_layer_add": [111, 113, 116], "quantize_layer_bas": [111, 113, 116], "quantize_layer_bn": [111, 113, 116], "fakequantizebas": 112, "abc": [112, 270, 323, 401, 469, 471], "appli": [112, 125, 126, 127, 130, 132, 136, 164, 175, 225, 266, 319, 395, 402, 403, 436, 439, 441, 447, 456, 459, 460, 463, 464, 467, 468, 471, 472, 473], "fakequant": 112, "per_channel": [112, 402, 403, 429, 463, 473], "num_bit": [112, 156, 157, 468], "8": [112, 182, 183, 214, 256, 397, 402, 429, 433, 460, 461, 465, 468, 471, 474], "channel_axi": [112, 159, 162], "symmetr": [112, 403, 463, 470, 471], "narrow_rang": 112, "quantizeconfig": [114, 115], "custom": [114, 157, 163, 301, 325, 336, 390, 418, 423, 424, 439, 460, 461, 465, 467], "There": [114, 301, 303, 360, 362, 422, 423, 429, 432, 436, 439, 465, 468, 471, 473], "instanc": [114, 115, 163, 182, 183, 186, 187, 216, 230, 231, 269, 270, 272, 275, 278, 281, 282, 284, 285, 286, 304, 316, 322, 323, 325, 326, 359, 363, 377, 380, 388, 391, 395, 397, 401, 418, 436, 441, 447, 471, 473, 474], "global": [114, 174, 182, 183, 281, 282, 284, 285, 286, 295, 377, 391, 397, 436, 460, 462, 471], "class": [115, 152, 156, 279, 326, 359, 397, 398, 402, 419, 420, 423, 435, 436, 447, 458, 459, 463, 466, 469, 471, 473], "init_quantize_config": 115, "quantize_recip": 115, "begin": [115, 175, 297, 419, 423, 424, 436, 460, 471], "process": [115, 139, 149, 163, 174, 175, 177, 178, 182, 183, 186, 187, 198, 199, 200, 211, 215, 216, 230, 231, 242, 243, 244, 254, 257, 295, 297, 299, 303, 304, 326, 359, 360, 362, 363, 380, 390, 391, 398, 401, 402, 403, 419, 420, 423, 424, 425, 427, 436, 440, 459, 460, 463, 468, 469, 470, 473], "model_nam": [115, 182, 183], "special": [115, 172, 336, 397, 419, 435, 436, 458, 460, 472], "decid": [115, 182, 183, 266, 297, 319, 401, 402, 436, 463, 466, 471], "qat_clone_funct": 115, "leav": [115, 450], "quantizewrapp": [115, 121], "wrapped_lay": 115, "config_quantizable_lay": 117, "quantizelayeradd": 118, "quantizelay": 119, "quantizelayerbas": 119, "quantizelayerbatchnorm": 120, "quantizewrapperbas": 121, "fusedbatchnormv3": [122, 132], "fusenodestartwithfusedbatchnormv3": [122, 132], "_quantizedfusedbatchnorm": 122, "concatv2": [123, 133, 146, 429], "fusenodestartwithconcatv2": [123, 133], "quantizedconcatv2": [123, 133], "fusenodestartwithconv2d": [124, 134], "conv2dbackpropinput": 125, "conv3dbackpropinputv2": 125, "fusenodestartwithdeconv2d": 125, "fusedinstancenorm": 126, "fusenodestartwithfusedinstancenorm": 126, "batchmatmul": 127, "batchmatmulv2": 127, "fusenodestartwithmatmul": [127, 136], "avgpool": [128, 137, 429], "fusenodestartwithpool": [128, 137], "optimizeqdqgraph": 130, "input_graph": [130, 135, 142, 354, 358, 401], "op_wise_sequ": [130, 135], "quantizegraph": 131, "quantizegraphbas": 131, "quantizenodebas": 131, "quantizegraphforintel": 135, "common": [138, 183, 213, 264, 274, 278, 279, 280, 317, 383, 395, 420, 424, 425, 427, 431, 433, 436, 463, 468], "herlper": 138, "quantizegraphhelp": 138, "sever": [138, 177, 215, 257, 299, 398, 422, 423, 424, 432, 436, 437, 449, 453, 460, 462, 468, 470, 471, 473], "staticmethod": 138, "function": [138, 182, 183, 186, 187, 199, 230, 231, 243, 275, 278, 287, 292, 397, 398, 401, 402, 403, 418, 419, 423, 424, 427, 431, 432, 433, 435, 436, 437, 447, 457, 460, 463, 466, 467, 468, 469, 471, 472], "smoothquantcalibr": 139, "dataset": [139, 140, 156, 186, 187, 188, 190, 191, 193, 194, 195, 196, 197, 209, 218, 230, 231, 232, 234, 235, 237, 238, 239, 240, 241, 253, 264, 268, 269, 270, 272, 301, 317, 321, 322, 323, 325, 326, 359, 380, 383, 398, 400, 401, 402, 419, 425, 430, 435, 436, 444, 460, 463, 466, 468, 471, 473, 474], "outlier": [139, 402, 422, 465, 468], "ignor": [139, 391, 420, 465, 468], "smoothquantscal": 140, "alpha": [140, 161, 168, 176, 463], "scales_per_op": 140, "method": [140, 142, 156, 157, 176, 182, 183, 191, 196, 197, 198, 200, 207, 215, 218, 235, 240, 241, 242, 244, 251, 257, 278, 279, 280, 314, 375, 377, 383, 384, 386, 387, 397, 398, 400, 419, 420, 422, 423, 424, 435, 436, 459, 460, 463, 464, 465, 468, 470, 471], "individu": [140, 174, 295, 353, 358, 395, 460, 468], "tensorflowqdqtoonnxqdqconvert": 141, "shape_overrid": 141, "inputs_as_nchw": [141, 261], "default_opset_vers": 141, "bia": [142, 182, 183, 469], "correct": [142, 162, 178, 182, 183, 268, 269, 270, 272, 296, 321, 322, 323, 325, 395, 439], "biascorrect": 142, "fp32_graph": 142, "weight_empir": 142, "Will": [142, 423, 432], "our": [142, 156, 182, 183, 398, 400, 427, 436, 457, 467, 472], "task": [142, 198, 205, 242, 249, 272, 325, 420, 423, 424, 427, 432, 435, 436, 460, 465, 468], "close": [142, 162], "w_int8": [142, 162], "u": [142, 162, 400, 439], "w_fp32": [142, 162], "varianc": [142, 162, 422], "ratio": [142, 162, 174, 175, 178, 182, 183, 211, 215, 254, 257, 297, 420, 436, 460, 470, 474], "differ": [142, 158, 162, 165, 175, 182, 183, 191, 200, 215, 217, 235, 244, 257, 263, 272, 278, 280, 289, 300, 325, 336, 385, 395, 397, 398, 402, 419, 420, 422, 423, 425, 426, 431, 432, 435, 436, 438, 449, 453, 458, 460, 463, 468, 469, 470, 471], "wise": [142, 157, 162, 182, 183, 304, 307, 363, 364, 368, 402, 432, 460, 469, 471, 473], "minim": [142, 162, 304, 363, 402, 403, 423, 426, 435, 436, 449, 453, 460, 463, 471], "round": [142, 157, 162, 463, 465, 468], "scale_c": [142, 162], "shift": [142, 162, 211, 254, 457, 470], "notic": [142, 162, 216, 434, 437, 466], "first": [142, 162, 173, 180, 182, 183, 198, 242, 268, 314, 321, 364, 375, 391, 397, 398, 401, 402, 403, 420, 422, 433, 437, 441, 450, 451, 454, 457, 462, 463, 464, 465, 467, 468, 469, 471, 473], "empir": [142, 162], "solut": [142, 162, 400, 401, 402, 428, 441, 445, 450, 461, 466, 468, 471, 472], "don": [142, 162, 174, 182, 183, 397, 460, 471], "min": [142, 162, 391, 422, 460, 463, 468, 470, 471], "graphtransform": 143, "graphtransformbas": 143, "input_pb": [143, 145, 146], "log": [145, 163, 172, 342, 343, 347, 387, 397, 447, 467, 469, 471], "insertlog": 145, "node_name_list": 145, "show_nam": 145, "show_op": 145, "first_n": 145, "summar": [145, 423], "1024": [145, 200, 244, 442], "dump_fp32": 145, "rerang": 146, "rerangequantizedconcat": 146, "rerange_quant": 146, "version1_lt_version2": [147, 391], "version1": [147, 391], "version2": [147, 391], "version1_gt_version2": [147, 391], "greater": [147, 391, 460, 471], "version1_eq_version2": [147, 391], "version1_gte_version2": [147, 391], "version1_lte_version2": [147, 391], "disable_random": 147, "seed": [147, 182, 183, 280, 391, 436, 473], "disabl": [147, 182, 183, 395, 456, 464], "read_graph": 147, "in_graph": 147, "in_graph_is_binari": 147, "write_graph": 147, "out_graph_def": 147, "out_graph_fil": 147, "write": [147, 207, 251, 391, 425, 431, 436, 439, 469], "is_ckpt_format": 147, "model_path": [147, 422], "ckpt": [147, 326, 334, 359, 474], "folder": [147, 200, 205, 244, 249, 326, 359, 390, 420, 444, 449, 453, 465, 469], "is_saved_model_format": 147, "saved_model": [147, 274], "get_estimator_graph": 147, "estim": [147, 272, 325, 334, 471], "input_fn": [147, 334], "get_tensor_by_nam": 147, "try_cnt": 147, "consid": [147, 272, 325, 395, 423, 457, 471], "import": [147, 163, 182, 183, 274, 326, 336, 359, 378, 380, 391, 397, 398, 400, 403, 418, 419, 420, 422, 423, 424, 425, 427, 430, 435, 436, 437, 438, 439, 443, 445, 458, 459, 460, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472], "scope": [147, 402, 436], "onc": [147, 177, 222, 299, 303, 360, 362, 402, 403, 419, 456, 460, 461, 471, 474], "both": [147, 183, 395, 398, 401, 424, 436, 440, 460, 462, 463, 468, 471], "compat": [147, 334, 425, 438, 451, 454, 456, 466], "v1": [147, 210, 211, 254, 269, 270, 272, 322, 323, 325, 334, 425, 427, 428, 435, 438, 460, 466, 467, 474], "suffix": 147, "time": [147, 182, 183, 215, 257, 272, 304, 325, 336, 363, 391, 402, 419, 422, 425, 428, 436, 444, 446, 449, 453, 456, 457, 458, 460, 461, 463, 465, 467, 469, 470, 471], "got": [147, 402, 428, 469], "iterator_sess_run": 147, "sess": [147, 334], "iter_op": 147, "feed_dict": [147, 197, 241], "output_tensor": [147, 334], "measur": [147, 216, 326, 385, 398, 401, 418, 422, 423, 435, 436, 465, 469, 471, 474], "integr": [147, 165, 217, 401, 436, 457, 465], "session": [147, 197, 241, 334, 436, 469], "makeiter": 147, "feed": [147, 197, 241, 423, 460], "end": [147, 175, 182, 183, 198, 214, 215, 242, 256, 257, 297, 303, 360, 362, 401, 402, 403, 423, 424, 429, 433, 436, 450, 458, 460, 469, 470, 471], "predict": [147, 215, 220, 257, 265, 269, 270, 272, 318, 322, 323, 325, 359, 398, 423, 435, 447, 465, 468, 469, 470], "pred": [147, 272, 325, 435], "collate_tf_pr": 147, "collat": [147, 156, 419], "tbe": 147, "get_input_output_node_nam": 147, "fix_ref_type_of_graph_def": 147, "fix": [147, 175, 198, 242, 297, 396, 419, 420, 443, 460, 468, 471], "strip_unused_lib": 147, "offici": [147, 265, 269, 270, 318, 322, 323, 395, 468], "r1": 147, "15": [147, 429, 433], "branch": 147, "get_graph_def": 147, "auto_input_output": 147, "get_model_input_shap": 147, "inout": 147, "get_tensor_val_from_graph_nod": 147, "graph_node_name_map": 147, "kei": [147, 149, 154, 172, 175, 178, 180, 182, 183, 279, 296, 334, 378, 381, 383, 391, 400, 402, 461, 465, 469, 471], "val": [147, 178, 200, 203, 244, 247, 296, 422, 436], "tensor_v": 147, "int8_node_name_revers": 147, "revers": 147, "tf_diagnosis_help": 147, "fp32_model": [147, 149, 156, 262, 391, 401], "quan_model": 147, "save_path": [147, 261, 262, 401, 438], "diagnosi": [147, 182, 183, 436, 461, 466, 472], "generate_feed_dict": 147, "input_tensor": [147, 334], "get_weight_from_input_tensor": 147, "input_tensor_nam": [147, 334], "associ": [147, 268, 321], "quant": [147, 156, 157, 182, 183, 314, 375, 397, 436, 463], "search": [147, 172, 175, 179, 186, 187, 230, 231, 263, 265, 275, 278, 279, 280, 300, 304, 318, 363, 400, 432, 435, 439, 440, 450, 461, 465, 469, 471, 472], "look": [147, 175, 400, 401, 403, 429, 435, 473], "sq_weight_tensor": 147, "sq_weights_nod": 147, "two": [147, 149, 163, 173, 174, 175, 177, 200, 205, 216, 244, 249, 268, 295, 299, 301, 308, 321, 369, 391, 397, 398, 419, 420, 423, 425, 427, 429, 436, 437, 463, 464, 465, 467, 471, 473], "torch": [148, 149, 150, 152, 153, 154, 155, 156, 157, 161, 172, 173, 174, 175, 179, 182, 183, 227, 262, 326, 359, 390, 397, 400, 403, 404, 423, 425, 427, 436, 437, 438, 439, 444, 447, 463, 468, 469], "bf16modulewrapp": 148, "bf16modul": 148, "mix": [148, 151, 182, 183, 302, 314, 326, 361, 375, 400, 401, 408, 432, 439, 445, 446, 447, 472], "precis": [148, 151, 182, 183, 186, 187, 230, 231, 263, 270, 272, 273, 300, 302, 314, 323, 325, 326, 336, 361, 364, 375, 391, 400, 401, 402, 408, 418, 424, 425, 429, 432, 439, 445, 446, 447, 461, 462, 463, 468, 471, 472], "mixed_precision_model": 148, "bf16_symbolic_trac": 148, "fx_sub_module_list": 148, "trace": [148, 149, 155, 156, 172, 182, 183, 262, 366, 397, 446, 471], "_description_": 148, "hessian": [149, 366, 471], "awar": [149, 157, 164, 183, 225, 274, 295, 366, 380, 400, 401, 402, 403, 424, 425, 427, 432, 456, 459, 461, 465, 471], "node_collector": 149, "hook": [149, 164, 175, 224, 225, 287, 292, 383, 423, 424, 436, 460, 468, 469], "record": [149, 156, 157, 165, 198, 199, 200, 206, 217, 224, 242, 243, 244, 250, 391, 420, 467, 469, 471], "hessiantrac": 149, "q_model": [149, 183, 274, 359, 397, 400, 419, 420, 422, 425, 427, 430, 431, 435, 436, 438, 463, 464, 465], "criterion": [149, 164, 166, 167, 168, 174, 175, 182, 183, 219, 222, 264, 317, 423, 424, 436, 460, 463, 471, 473], "yao": 149, "zhewei": 149, "et": [149, 465, 468], "al": [149, 465, 468], "pyhessian": 149, "network": [149, 168, 174, 297, 366, 398, 423, 424, 427, 436, 461, 463, 468, 471], "through": [149, 186, 187, 230, 231, 325, 326, 359, 400, 418, 429, 431, 432, 435, 442, 458, 459, 460, 462, 463, 468], "len": [149, 183, 215, 257, 420, 425, 470], "2020": 149, "ieee": [149, 437, 468], "intern": [149, 314, 375, 419, 420, 435, 460], "confer": [149, 460, 468], "big": [149, 422], "dong": 149, "zhen": 149, "hawq": [149, 366, 471], "v2": [149, 366, 419, 425, 427, 428, 433, 445, 466, 471, 472, 474], "advanc": [149, 182, 183, 395, 400, 402, 408, 463, 473], "system": [149, 163, 216, 391, 418, 442, 474], "33": [149, 474], "18518": 149, "18529": 149, "openvinotoolkit": 149, "nncf": 149, "develop": [149, 336, 396, 397, 433, 436, 437, 439, 445, 456, 460, 461, 464, 467], "hessian_trac": 149, "compare_weight": 149, "float_dict": 149, "ani": [149, 268, 270, 313, 321, 323, 353, 358, 374, 378, 388, 391, 395, 396, 400, 403, 425, 439, 444, 457, 460, 467], "quantized_dict": 149, "compar": [149, 272, 325, 391, 424, 435, 460, 463, 465, 467, 469, 471], "being": [149, 268, 321, 403], "wt_compare_dict": 149, "float_model": 149, "state_dict": [149, 425, 469], "qmodel": 149, "compute_error": 149, "state": [149, 173, 403, 442, 460], "weight_dict": 149, "hawq_top": 149, "enable_act": 149, "modul": [150, 152, 277, 283, 293, 294, 397, 419, 423, 432, 435, 436, 438, 460, 462, 464, 469, 472], "ipex_mixed_precis": 151, "example_input": [151, 154, 156, 182, 183, 262, 427], "nn": [152, 154, 156, 157, 172, 173, 175, 182, 183, 227, 262, 326, 359, 390, 397, 423, 436, 438, 468, 469], "detector": 153, "transformerbasedmodelblockpatterndetector": 153, "pattern_lst": 153, "block_pattern": 153, "detect": [153, 156, 172, 182, 183, 268, 272, 321, 325, 330, 397, 439, 446, 447, 460, 471], "ffn": [153, 175], "get_modul": 154, "set_modul": [154, 156], "new_modul": [154, 156], "torchsmoothqu": [154, 468], "q_func": [154, 186, 187, 230, 231, 304, 307, 309, 310, 360, 363, 364, 368, 370, 371, 401, 436, 471], "traced_model": [154, 155], "whose": [154, 161, 174, 296, 431, 468, 471], "could": [154, 161, 174, 186, 187, 200, 230, 231, 244, 301, 326, 359, 380, 395, 397, 424, 436, 459, 460, 463, 465, 468, 472], "absorb": [154, 157, 161], "later": [154, 161, 469], "graphtrac": 154, "trace_and_fuse_sub_graph": 155, "is_qat": 155, "get_embedding_contigu": 156, "embed": [156, 460], "contigu": 156, "is_fused_modul": 156, "_propagate_qconfig_help": 156, "collate_torch_pr": 156, "fetch": [156, 160, 191, 235, 402, 420], "collate_result": 156, "input2tupl": 156, "append_attr": 156, "fx_model": 156, "fx_white_list": 156, "append": [156, 301, 304, 363, 397, 424, 436, 459], "graphmodul": [156, 397, 464], "addit": [156, 183, 380, 402, 403, 423, 450, 466, 471], "dir": [156, 198, 242, 390, 420, 428, 431], "generate_activation_observ": 156, "observ": [156, 403, 467, 469, 471], "what": [156, 175, 196, 240, 325, 359, 380, 395, 400, 461], "check_cfg_and_qconfig": 156, "op_infos_from_cfg": 156, "output_tensor_ids_op_nam": 156, "paser_cfg": 156, "ops_nam": 156, "get_quantizable_ops_from_cfg": 156, "input_tensor_ids_op_nam": 156, "update_sq_scal": 156, "ipex_config_path": 156, "smoothquant_scale_info": 156, "ipex_config": 156, "json": [156, 199, 215, 243, 257, 420, 438, 457, 465, 470], "temporari": [156, 391, 395], "auto_copi": 156, "fetch_modul": 156, "op_nam": [156, 179, 182, 183, 315, 376, 391, 392, 402, 436, 460, 469], "simple_infer": 156, "get_example_input": 156, "example_inp": 156, "get_fallback_ord": 156, "confidence_batch": [156, 471], "fallback": [156, 183, 307, 308, 366, 368, 369, 427, 437, 464, 471], "requantize_cfg": 156, "fall": 156, "back": [156, 215, 221, 257, 422, 456], "order": [156, 265, 266, 301, 304, 307, 316, 318, 319, 363, 368, 377, 397, 422, 435, 462, 468, 469, 471], "confid": 156, "ordered_op": 156, "get_mse_order_per_fp32": 156, "mse": [156, 157, 182, 183, 264, 272, 306, 317, 325, 359, 367, 391, 422, 435, 462, 465, 466], "influenc": [156, 460], "last": [156, 168, 178, 182, 183, 419, 437, 439, 441, 446, 450, 463, 468], "fallback_ord": 156, "get_mse_order_per_int8": 156, "get_torch_vers": 156, "match_datatype_pattern": 156, "calculate_quant_min_max": 156, "unsign": [156, 316, 377, 403], "qmin": 156, "qmax": 156, "get_depth": 156, "depth": [156, 423, 464], "get_dict_at_depth": 156, "target_depth": 156, "nest": [156, 180], "get_element_under_depth": 156, "ops_lst": 156, "get_op_type_by_nam": 156, "quantizable_op": 156, "collect_weight_info": 156, "weight_config": [156, 157, 465], "fc": [156, 183], "group_siz": [156, 157, 377, 465], "rtn": [156, 465], "param": [156, 163, 188, 216, 222, 232, 272, 304, 325, 363, 391, 401, 438, 471], "configu": 156, "_type_": 156, "qdq_weight_asym": 157, "quantil": [157, 471], "return_int": 157, "clip": [157, 465, 468], "choos": [157, 200, 244, 400, 432, 444, 461, 466, 468, 471, 473], "qdq_weight_sym": 157, "qdq_weight_actor": 157, "quant_weight": 157, "group": [157, 176, 282, 432, 460, 465, 469, 470, 471, 474], "how": [157, 164, 168, 174, 175, 182, 183, 215, 257, 258, 295, 396, 397, 399, 400, 401, 419, 420, 423, 424, 425, 431, 435, 436, 450, 451, 454, 455, 456, 460, 461, 463, 468, 470, 471, 472, 473], "mani": [157, 325, 359, 419, 433, 465, 471, 473], "element": [157, 174, 178, 196, 240, 268, 295, 321, 391, 420, 432, 435, 460, 465, 468], "zp": [157, 468], "rtn_quantiz": 157, "32": [157, 170, 377, 425, 431, 468, 474], "nearst": 157, "num": [157, 391, 419], "configir": 157, "fc2": 157, "int32": [157, 420], "get_module_input_output": 157, "module_hook_config": 157, "calib_func": [157, 359, 464], "help": [157, 224, 274, 438, 439, 445, 456, 465, 471, 472], "module_name_list": 157, "requir": [157, 182, 183, 189, 301, 334, 358, 397, 401, 402, 418, 419, 422, 424, 425, 429, 436, 437, 438, 440, 450, 456, 460, 463, 465, 466, 467, 468, 469, 471, 473], "fc1": 157, "input_valu": 157, "output_valu": 157, "awq_quant": 157, "absorb_dict": 157, "n_sampl": 157, "auto_scal": [157, 465], "mse_rang": [157, 465], "n_block": [157, 465], "5": [157, 161, 165, 182, 183, 202, 211, 217, 246, 254, 272, 325, 359, 401, 420, 427, 429, 435, 436, 460, 462, 463, 465, 468, 470, 471, 473, 474], "awq": [157, 465], "absorb_lay": 157, "absorbed_lay": 157, "fc3": 157, "salient": [157, 460], "oom": 157, "algorithm_registri": 158, "algorithm_typ": 158, "locat": [158, 178, 215, 257, 425, 442, 449, 453, 456, 463, 466, 470, 473], "registr": [158, 200, 207, 215, 244, 251, 257, 290], "algorithmschedul": 158, "conf": [158, 163, 164, 183, 186, 187, 216, 230, 231, 274, 281, 282, 284, 285, 286, 287, 292, 304, 307, 309, 310, 314, 326, 336, 359, 360, 363, 364, 368, 370, 371, 375, 378, 380, 397, 398, 400, 403, 418, 423, 430, 431, 436, 437, 438, 459, 463, 464, 465, 467, 468, 471], "control": [158, 182, 183, 397, 436, 460, 471], "phase": [158, 398, 436, 460, 463, 464, 471], "fastbiascorrect": [159, 162], "fast_bias_correct": [160, 182, 183, 317, 463], "weight_correct": [160, 182, 183, 317, 463], "kernel": [161, 182, 183, 401, 402, 471], "futur": [161, 186, 187, 218, 230, 231, 432, 436, 447, 472], "weightcorrect": 162, "1e": [162, 468, 473], "05": [162, 183, 272, 325, 435, 468, 474], "evalu": [163, 164, 174, 182, 186, 187, 198, 216, 230, 231, 242, 258, 265, 268, 269, 270, 272, 274, 318, 321, 322, 323, 325, 326, 336, 359, 380, 383, 398, 401, 402, 420, 423, 424, 431, 432, 435, 436, 437, 439, 445, 447, 450, 456, 458, 460, 463, 467, 469, 471, 473], "set_env_var": [163, 216], "env_var": [163, 216], "overwrite_exist": [163, 216], "env": [163, 216, 428], "alreadi": [163, 200, 214, 216, 244, 256, 401, 420, 432, 451, 454, 471], "set_all_env_var": [163, 216], "physic": [163, 216, 395, 418], "core": [163, 182, 183, 216, 418, 434, 449, 453, 474], "get_architectur": [163, 216], "architectur": [163, 216, 275, 278, 400, 418, 423, 436, 460, 461, 465, 472], "get_threads_per_cor": [163, 216], "thread": [163, 182, 183, 216, 353, 358, 419], "get_thread": [163, 216], "get_physical_id": [163, 216], "socket": [163, 216, 391, 474], "get_core_id": [163, 216], "id": [163, 214, 216, 256, 265, 267, 268, 269, 270, 318, 320, 321, 322, 323, 435, 467, 471], "get_bounded_thread": [163, 216], "core_id": [163, 216], "bind": [163, 216], "run_inst": 163, "b_dataload": [163, 182, 183, 418, 436], "b_func": [163, 418], "benchmarkconfig": [163, 182, 183, 418, 422, 436], "accuraci": [163, 178, 182, 183, 186, 187, 230, 231, 258, 263, 272, 287, 292, 300, 325, 326, 336, 359, 364, 378, 380, 388, 397, 400, 402, 403, 419, 420, 422, 424, 425, 426, 427, 435, 436, 447, 456, 458, 459, 460, 461, 462, 465, 466, 467, 468, 469, 472, 473, 474], "goal": [163, 258, 263, 287, 292, 300, 326, 359, 402, 419, 459, 463, 471], "prefer": [163, 263, 300, 359, 460, 465], "space": [163, 175, 182, 183, 186, 187, 230, 231, 263, 270, 275, 278, 279, 280, 300, 304, 307, 314, 323, 326, 359, 363, 368, 375, 395, 396, 398, 401, 402, 403, 460, 463, 473], "etc": [163, 164, 214, 256, 258, 263, 270, 287, 292, 300, 323, 326, 359, 390, 423, 432, 460, 467, 471], "user": [163, 172, 175, 178, 182, 183, 186, 187, 200, 203, 207, 215, 216, 222, 227, 230, 231, 244, 247, 251, 257, 263, 287, 292, 298, 300, 301, 325, 326, 336, 359, 364, 377, 380, 391, 397, 398, 400, 401, 402, 403, 408, 418, 419, 423, 424, 427, 429, 432, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 447, 450, 456, 458, 459, 460, 461, 463, 464, 466, 468, 469, 470, 471, 475], "generate_prefix": 163, "core_list": 163, "command": [163, 216, 380, 422, 425, 439, 441, 444, 449, 453, 457], "numactl": [163, 428, 442, 450], "call_on": 163, "cmd": [163, 457], "log_fil": [163, 352, 357], "window": [163, 418, 456, 457], "config_inst": 163, "raw_cmd": 163, "multi": [163, 170, 172, 175, 268, 321, 325, 359, 398, 419, 420, 432, 436, 458, 460, 463, 471], "trigger": [163, 175, 297, 396], "raw": [163, 199, 203, 206, 243, 247, 250, 307, 368, 435, 471], "summary_benchmark": 163, "summari": [163, 380, 422, 451, 454, 469, 474], "profil": [163, 317], "benchmark_with_raw_cmd": 163, "commend": 163, "fit_with_raw_cmd": 163, "cores_per_inst": [163, 182, 183, 418, 436, 462], "num_of_inst": [163, 182, 183, 418, 436, 462], "test": [163, 182, 183, 215, 257, 396, 400, 422, 433, 474], "fit": [163, 174, 182, 183, 304, 326, 359, 363, 378, 380, 397, 400, 418, 419, 420, 422, 425, 430, 431, 435, 436, 437, 438, 460, 463, 464, 465], "pb": [163, 182, 183, 326, 334, 359, 400, 418, 425, 430, 436, 438, 469, 474], "eval_dataload": [163, 182, 183, 186, 187, 230, 231, 301, 304, 307, 309, 310, 326, 359, 360, 363, 364, 368, 370, 371, 380, 418, 431, 435, 436, 463, 471], "compon": [164, 258, 264, 301, 317, 397, 422, 425, 433, 434, 439, 456, 459], "quantizationawaretrainingcallback": 164, "pruningcallback": 164, "distillationcallback": 164, "basecallback": 164, "design": [164, 197, 220, 225, 241, 325, 364, 398, 400, 436, 444, 447, 460, 463, 472], "mainli": [164, 177, 225, 299, 436, 460, 463], "prune": [164, 168, 169, 170, 173, 174, 175, 176, 177, 178, 182, 183, 225, 226, 264, 281, 282, 284, 285, 286, 290, 292, 293, 295, 296, 297, 299, 301, 317, 391, 400, 425, 426, 429, 430, 432, 459, 461, 472, 473], "distil": [164, 167, 182, 183, 217, 224, 225, 264, 317, 400, 426, 430, 432, 459, 472, 473], "In": [164, 174, 175, 176, 183, 197, 225, 241, 268, 295, 297, 321, 336, 395, 397, 398, 400, 401, 402, 419, 420, 422, 423, 424, 425, 435, 436, 446, 449, 450, 453, 458, 459, 460, 463, 464, 465, 467, 468, 469, 470, 471, 472], "adaptor": [164, 182, 183, 316, 377, 383, 400, 403, 432, 464, 466, 468, 469, 472], "deriv": [164, 168, 174, 175, 176, 177, 258, 295, 297, 299], "pipelin": [164, 258, 275, 276, 301, 424, 436, 459], "knowledg": [164, 165, 182, 183, 217, 258, 424, 426, 430, 432, 436, 438, 473], "transfer": [164, 205, 249, 258, 420, 423, 424, 436, 468], "teacher": [164, 182, 183, 258, 423, 424, 436, 474], "student": [164, 182, 183, 198, 224, 242, 258, 420, 423, 424, 474], "distillation_conf": [164, 179, 258], "_epoch_ran": [164, 258], "integ": [164, 174, 175, 182, 183, 258, 268, 272, 279, 295, 297, 321, 325, 378, 401, 403, 463, 468, 471], "indic": [164, 182, 183, 191, 196, 198, 235, 240, 242, 258, 268, 279, 321, 397, 419, 428, 465, 469], "much": [164, 168, 182, 183, 215, 257, 258, 423, 450, 468, 470], "epoch": [164, 175, 258, 297, 380, 419, 423, 424, 425, 436, 459, 460, 473], "ran": [164, 258], "eval_frequ": [164, 258], "frequenc": [164, 175, 182, 183, 258, 297, 436, 460, 473], "term": [164, 175, 176, 258, 396, 423, 434, 435, 458, 459, 471], "best_scor": [164, 258], "best": [164, 215, 257, 258, 263, 300, 307, 368, 395, 398, 433, 439, 445, 456, 458, 463, 465, 470, 471], "metric": [164, 182, 183, 186, 187, 219, 230, 231, 258, 263, 264, 279, 287, 292, 300, 301, 317, 326, 359, 380, 383, 398, 401, 402, 420, 422, 425, 436, 437, 463, 467, 469, 471, 472, 473, 474], "best_model": [164, 258, 465], "found": [164, 258, 400, 423, 437, 444, 468, 471, 474], "critet": [165, 217], "includ": [165, 168, 172, 174, 176, 182, 183, 198, 200, 207, 215, 217, 242, 244, 251, 257, 263, 273, 295, 300, 378, 391, 395, 396, 401, 402, 403, 419, 420, 422, 433, 434, 435, 436, 439, 442, 445, 450, 460, 463, 464, 469, 471], "tensorflowknowledgedistillationloss": [165, 217], "pytorchknowledgedistillationloss": [165, 217, 436], "pytorchintermediatelayersknowledgedistillationloss": [165, 217], "tensorflowcriterion": [165, 217], "pytorchcriterion": [165, 217], "criterion_registri": [165, 217], "criterion_typ": [165, 217], "registry_criterion": [165, 217], "knowledgedistillationframework": [165, 217], "student_model": [165, 183, 217, 436], "teacher_model": [165, 182, 183, 217, 423, 424, 436], "knowledgedistillationloss": [165, 217, 436, 473], "temperatur": [165, 182, 183, 217, 436, 473], "loss_typ": [165, 182, 183, 217, 436, 473], "ce": [165, 182, 183, 217, 436, 473], "loss_weight": [165, 182, 183, 217, 436, 473], "pytorchknowledgedistillationlosswrapp": [165, 217], "param_dict": [165, 217, 222], "tensorflowknowledgedistillationlosswrapp": [165, 217], "tensorflowknowledgedistillationlossextern": [165, 217], "intermediatelayersknowledgedistillationloss": [165, 217], "layer_map": [165, 183, 217, 423], "add_origin_loss": [165, 183, 217], "pytorch": [165, 168, 172, 174, 175, 182, 183, 197, 198, 200, 203, 207, 215, 217, 222, 224, 241, 242, 244, 247, 251, 257, 262, 263, 272, 273, 293, 295, 298, 300, 308, 317, 325, 326, 335, 359, 369, 384, 391, 397, 398, 400, 401, 402, 403, 419, 423, 424, 426, 429, 432, 433, 436, 437, 438, 439, 441, 444, 445, 446, 447, 456, 460, 461, 462, 465, 466, 468, 471, 473], "pytorchintermediatelayersknowledgedistillationlosswrapp": [165, 217], "selfknowledgedistillationloss": [165, 217], "selfknowledg": [165, 217], "pytorchselfknowledgedistillationloss": [165, 217], "pytorchselfknowledgedistillationlosswrapp": [165, 217], "pruner": [167, 264, 281, 282, 283, 284, 285, 287, 292, 293, 295, 298, 317, 436, 460, 473], "model_slim": [167, 169, 175], "auto_slim": [167, 169, 171], "pattern_analyz": [167, 169, 171], "weight_slim": [167, 169, 171, 175], "criteria": [167, 169, 182, 183, 263, 287, 292, 295, 297, 300, 397, 456, 468], "reg": [167, 169, 175], "schedul": [167, 169, 175, 176, 182, 183, 264, 293, 297, 317, 436, 459], "callback": [167, 287, 292, 380, 383, 397, 436, 459, 460, 463], "register_criterion": 168, "registri": [168, 174, 175, 176, 177, 295, 297, 299, 398], "get_criterion": 168, "pruningcriterion": 168, "about": [168, 391, 395, 419, 436, 464, 471, 472, 474], "module_nam": [168, 175, 176, 297, 391], "store": [168, 172, 175, 176, 182, 183, 200, 244, 290, 297, 431], "score": [168, 174, 175, 182, 183, 265, 266, 268, 269, 270, 272, 297, 318, 319, 321, 322, 323, 325, 366, 383, 397, 435, 458, 460, 467, 471], "magnitudecriterion": 168, "magnitud": [168, 182, 183, 264, 272, 283, 317, 325, 432, 460], "criterion_class": 168, "determin": [168, 174, 175, 182, 183, 385, 395, 397, 460, 463, 468], "gradientcriterion": 168, "gradient": [168, 281, 432, 436, 460, 474], "absolut": [168, 182, 183, 272, 325, 435, 436, 460, 463, 471], "snipcriterion": 168, "snip": [168, 182, 183, 297, 432, 460, 474], "product": [168, 400, 432, 437, 439, 440, 456, 461, 463, 467, 471], "singl": [168, 177, 182, 183, 191, 198, 215, 235, 242, 257, 268, 297, 299, 321, 325, 359, 397, 420, 422, 433, 460], "shot": [168, 175, 177, 225, 297, 299, 398, 432, 436, 460, 461], "connect": [168, 297, 456, 460, 467], "sensit": [168, 281, 297, 432, 460], "arxiv": [168, 175, 297, 460, 465, 468], "org": [168, 175, 268, 297, 321, 396, 397, 422, 433, 451, 454], "1810": [168, 297], "02340": [168, 297], "snipmomentumcriterion": 168, "snip_momentum": [168, 182, 183, 436, 460], "momentum": [168, 297, 432, 436, 460, 473], "mechan": [168, 460, 467, 472], "preserv": 168, "step": [168, 174, 175, 177, 182, 183, 295, 297, 299, 380, 402, 403, 422, 423, 424, 425, 436, 451, 454, 456, 459, 460, 462, 464, 465, 467, 468, 469, 471], "beta": 168, "snipmomentumblockcriterion": 168, "snip_momentum_block": 168, "retrainfreecriterion": 168, "retrain_fre": [168, 175], "auto": [170, 172, 182, 183, 302, 317, 361, 367, 391, 397, 439, 442, 444, 446, 447, 460, 463, 465], "slim": [170, 171, 172, 268, 321, 332, 334, 438, 460], "round_multipli": 170, "spars": [170, 175, 297, 420, 461], "automat": [170, 172, 173, 182, 183, 200, 203, 210, 211, 244, 247, 254, 263, 273, 300, 397, 400, 418, 420, 432, 436, 437, 439, 441, 444, 445, 447, 449, 450, 451, 453, 454, 456, 459, 460, 463, 468, 470, 471], "model_slim_ffn2": 170, "some": [170, 172, 182, 183, 198, 242, 296, 402, 403, 420, 422, 427, 433, 435, 436, 458, 460, 463, 464, 465, 468, 469, 471, 472, 474], "part": [170, 175, 295, 297, 397, 433, 437, 451, 454, 460, 468, 472], "perman": [170, 395, 460], "obtain": [170, 172, 175, 176, 178, 296, 397, 402, 460, 467, 468, 471], "acceler": [170, 423, 436, 439, 447, 456, 460, 461, 464, 465, 468, 471], "directli": [170, 182, 183, 197, 241, 268, 272, 296, 321, 325, 435, 436, 443, 460, 462, 463, 469], "sprase": 170, "multipl": [170, 182, 183, 184, 185, 189, 190, 198, 199, 201, 202, 203, 204, 205, 209, 212, 215, 222, 228, 229, 233, 234, 236, 242, 243, 245, 246, 247, 248, 249, 253, 255, 257, 273, 326, 327, 328, 330, 336, 418, 420, 427, 436, 459, 460, 467, 468, 471], "model_slim_mha": 170, "parse_auto_slim_config": 170, "ffn2_sparsiti": 170, "mha_spars": 170, "generate_ffn2_pruning_config": 170, "consecut": [170, 172, 173, 460], "generate_mha_pruning_config": 170, "head": [170, 172, 174, 175, 178, 460, 474], "get_attribut": 172, "level": [172, 364, 378, 387, 395, 468, 471], "descent": 172, "get_common_modul": 172, "layer1": [172, 182, 183, 436, 460, 463], "layer2": [172, 436, 460, 463], "nearest": [172, 215, 257, 465, 470], "father": 172, "print_iter": 172, "recipesearch": 172, "searcher": [172, 280], "root": [172, 198, 199, 200, 203, 242, 243, 244, 247, 272, 325, 420, 425, 435, 436, 473], "levelwis": 172, "wai": [172, 199, 200, 203, 243, 244, 247, 398, 403, 419, 420, 422, 435, 436, 439, 442, 457, 459, 460, 463, 465, 468, 471, 473], "huggingfac": [172, 175, 198, 242, 386, 420, 426, 430, 444, 445, 446, 447, 468, 474], "bert": [172, 183, 194, 197, 198, 215, 238, 241, 242, 257, 400, 420, 423, 435, 444, 460, 470, 474], "recipe_sampl": 172, "bertattent": 172, "dens": [172, 177, 182, 183, 299, 460, 474], "infom": [172, 218], "basic": [172, 174, 182, 183, 214, 256, 264, 275, 295, 306, 310, 313, 317, 367, 371, 374, 380, 432, 433, 436, 462, 467], "searching_result": 172, "jitbasicsearch": 172, "placeholder_shap": 172, "placeholder_dtyp": 172, "By": [172, 182, 183, 265, 318, 402, 403, 435, 438, 449, 450, 453, 461, 471], "jit": [172, 182, 439, 441, 446, 468, 469], "script": [172, 265, 266, 269, 270, 318, 319, 322, 323, 425, 432, 439, 443, 446, 447, 450, 461], "them": [172, 198, 242, 397, 403, 419, 422, 427, 429, 431, 459, 460, 465, 471], "static_graph": 172, "flatten_static_graph": 172, "target_lay": 172, "linear2linearsearch": 172, "target_op_lut": 172, "lookup": 172, "tabl": [172, 175, 391, 403, 422, 427, 474], "code": [172, 186, 187, 216, 230, 231, 274, 298, 301, 359, 380, 397, 400, 401, 402, 403, 420, 423, 424, 425, 431, 432, 434, 435, 439, 441, 443, 444, 445, 447, 450, 456, 458, 459, 460, 461, 462, 463, 467, 468, 469, 470], "current_pattern": 172, "statu": [172, 388, 395, 419, 458, 460], "selfmhasearch": 172, "classifierheadsearch": 172, "final": [172, 175, 178, 297, 402, 436, 442, 458, 460, 463, 466, 471], "classifi": [172, 178, 198, 242, 272, 325, 420, 423], "classifierheadsearchertf": 172, "squeezer": 173, "postcompressionutil": 173, "librari": [173, 219, 264, 317, 353, 393, 396, 400, 433, 436, 437, 441, 450, 456, 461, 463], "relat": [173, 176, 258, 268, 287, 292, 295, 321, 377, 383, 403, 439, 460, 473], "linearcompress": 173, "root_linear": 173, "target_linear": 173, "also": [173, 197, 200, 215, 241, 244, 257, 265, 318, 325, 336, 359, 396, 398, 401, 402, 403, 419, 422, 426, 430, 432, 435, 436, 439, 444, 449, 450, 453, 456, 457, 458, 460, 461, 463, 464, 468, 471], "while": [173, 175, 178, 297, 304, 363, 401, 402, 420, 426, 432, 437, 439, 444, 456, 462, 463, 465, 468], "hidden": [173, 174, 295, 401], "structur": [173, 175, 182, 183, 297, 315, 376, 432, 455, 457, 460, 463, 469, 472, 474], "layer_1": 173, "act_fn": 173, "layer_2": 173, "linearcompressioniter": 173, "linear_pattern": 173, "register_pattern": [174, 295], "sure": [174, 175, 177, 295, 297, 299, 418], "get_pattern": [174, 295], "assertionerror": [174, 175, 178, 295, 296, 297, 326], "basepattern": [174, 176], "unit": [174, 295, 396, 460], "e": [174, 182, 183, 395, 423, 426, 430, 439, 444, 445, 449, 453, 460, 465, 468, 471], "4x1": [174, 182, 183, 291, 436, 460, 474], "is_glob": [174, 295], "local": [174, 182, 183, 295, 391, 449, 453, 460, 467], "contrast": [174, 295, 470], "keep_mask_lay": 174, "invalid_lay": 174, "max_sparsity_ratio_per_op": [174, 175, 179, 182, 183, 436, 460], "sparsiti": [174, 175, 177, 178, 182, 183, 297, 299, 391, 400, 420, 432, 436, 472, 474], "reach": [174, 177, 182, 183, 299, 396, 400, 419, 460, 471], "min_sparsity_ratio_per_op": [174, 179, 182, 183, 436, 460], "minimum": [174, 182, 183, 403, 422, 436, 447, 460, 471], "target_spars": [174, 179, 182, 183, 436, 460, 462, 473], "patternnxm": [174, 295], "nxm": [174, 175, 182, 183, 291, 295, 460], "kept": [174, 295], "block_siz": [174, 295], "height": [174, 211, 215, 254, 257, 295, 425, 470, 473], "width": [174, 211, 215, 254, 257, 295, 425, 460, 463, 470, 473], "vertic": [174, 215, 257, 295, 470], "becaus": [174, 175, 215, 257, 295, 397, 463, 468, 470, 471], "patternninm": [174, 295], "n": [174, 182, 183, 199, 215, 243, 257, 266, 295, 319, 378, 403, 420, 422, 423, 460, 463, 465, 468, 470], "out": [174, 182, 183, 198, 199, 200, 242, 243, 244, 263, 295, 300, 396, 397, 400, 420, 439, 444, 449, 450, 451, 453, 454, 456, 460, 462, 463, 465], "continu": [174, 268, 295, 321, 398, 436, 457, 460, 472], "doc": [174, 182, 183, 295, 313, 314, 325, 359, 374, 375, 378, 391, 435, 436, 451, 454], "md": [174, 182, 183, 295, 325, 359, 402, 425, 463], "patternmha": 174, "mha": [174, 175], "register_prun": [175, 297], "parse_valid_pruner_typ": 175, "get_prun": [175, 297], "cuurent": [175, 297], "baseprun": 175, "current_sparsity_ratio": [175, 297], "global_step": [175, 297], "total": [175, 215, 257, 272, 297, 325, 420, 422, 460, 470, 474], "start_step": [175, 179, 182, 183, 297, 436, 460, 462], "end_step": [175, 179, 182, 183, 297, 436, 460, 462], "pruning_frequ": [175, 179, 182, 183, 436, 460], "target_sparsity_ratio": [175, 297], "show": [175, 391, 395, 423, 425, 436, 442, 457, 468, 471, 472], "basicprun": 175, "arrang": [175, 199, 200, 203, 243, 244, 247, 420, 460], "proce": 175, "regul": 175, "patternlockprun": [175, 285, 297], "parent": [175, 177, 291, 297, 299, 469], "blockmaskprun": 175, "grad": 175, "retrainfreeprun": 175, "pruner_class": 175, "rearrang": 175, "fast": [175, 182, 183, 400, 461], "retrain": [175, 424, 460], "effect": [175, 401, 461], "2204": 175, "09656": 175, "progressiveprun": 175, "interpol": [175, 215, 257, 435, 460, 470], "fine": [175, 198, 242, 420, 442, 460, 461, 463], "grain": [175, 460, 461, 471], "improv": [175, 396, 436, 439, 456, 457, 460, 461, 463, 464, 465, 471, 472, 474], "ad": [175, 198, 242, 265, 304, 318, 363, 402, 403, 422, 437, 439, 444, 447, 451, 454, 460, 469], "interv": [175, 460], "multiheadattentionprun": 175, "mha_modul": 175, "partial": [175, 460, 463], "qkv": 175, "feedward": 175, "simultan": [175, 439, 459, 462], "qkv_name": 175, "query_layer_nam": 175, "key_layer_nam": 175, "value_layer_nam": 175, "ffn_name": 175, "attention_ffn_nam": 175, "mha_nam": 175, "keep": [175, 178, 296, 364, 397, 401, 455, 456, 466], "qkv_modul": 175, "ffn_modul": 175, "mha_compress": 175, "mhacompress": 175, "critic": [175, 395], "modifi": [175, 200, 227, 244, 358, 377, 397, 403, 425, 429, 460, 473], "linear_lay": 175, "independ": [175, 353, 358, 403], "length": [175, 182, 183, 198, 215, 242, 257, 268, 321, 400, 420, 435, 461, 463, 470], "4x": [175, 398, 463], "subsequ": [175, 402, 439, 456], "head_mask": 175, "mha_head_s": 175, "similar": [175, 436, 462, 468, 471, 473], "mha_scor": 175, "regular": [176, 265, 296, 318], "register_reg": 176, "regulariz": 176, "get_reg_typ": 176, "get_reg": 176, "basereg": 176, "grouplasso": 176, "coeff": 176, "lasso": [176, 282, 432, 460], "select": [176, 183, 198, 242, 397, 398, 432, 433, 456, 460, 463, 469, 471], "reg_term": 176, "coeffient": 176, "register_schedul": [177, 299], "get_schedul": [177, 299], "pruningschedul": 177, "gradual": [177, 299, 460], "oneshotschedul": [177, 299], "iterativeschedul": [177, 299], "get_sparsity_ratio": 178, "elementwise_over_matmul_gemm_conv": 178, "elementwise_over_al": 178, "blockwise_over_matmul_gemm_conv": 178, "get_sparsity_ratio_tf": 178, "check_config": [178, 296], "prune_config": [178, 296], "everyth": [178, 296, 444], "reset_none_to_default": 178, "undefin": [178, 296], "update_param": 178, "process_weight_config": 178, "global_config": [178, 281, 282, 284, 285, 286], "local_config": [178, 182, 183, 281, 282, 284, 285, 286], "default_config": 178, "pruners_info": 178, "process_yaml_config": 178, "check_key_valid": 178, "template_config": 178, "user_config": 178, "process_and_check_config": [178, 296], "process_config": [178, 296], "parse_last_linear": 178, "often": [178, 419, 423, 459, 460], "act": [178, 196, 240, 395], "might": [178, 397, 471], "caus": [178, 402, 419, 440, 460, 465], "drop": [178, 268, 296, 321, 436, 437, 450, 460, 465, 474], "parse_last_linear_tf": 178, "parse_to_prun": [178, 296], "parse_to_prune_tf": 178, "generate_pruner_config": 178, "dotdict": [178, 179, 183, 336, 391], "prunerv2": 179, "pruning_typ": [179, 182, 183, 436, 460], "pruning_scop": [179, 182, 183, 436, 460], "sparsity_decay_typ": [179, 182, 183, 436, 460], "pruning_op_typ": [179, 182, 183, 436, 460], "reg_typ": 179, "criterion_reduce_typ": 179, "resume_from_pruned_checkpoint": 179, "similiar": 179, "cfg_fname": 179, "parser": 179, "quantization_conf": 179, "pruning_conf": 179, "graph_optimization_conf": [179, 263], "mixedprecision_conf": 179, "benchmark_conf": 179, "nasconfig": [179, 183, 276, 278, 398], "approach": [179, 182, 183, 275, 276, 278, 397, 398, 420, 423, 432, 436, 444, 456, 461, 462, 465, 471, 473], "search_spac": [179, 183, 275, 278, 279, 280], "search_algorithm": [179, 183, 264, 277, 317, 398], "na": [179, 183, 264, 317, 330, 432, 474], "procedur": [179, 398, 460], "deep_get": [180, 336], "dot": [180, 437, 463], "eg": [180, 200, 244, 420, 462], "person": [180, 395, 461], "john": 180, "deep": [180, 400, 401, 402, 419, 432, 433, 436, 437, 439, 441, 444, 445, 447, 450, 456, 461, 463, 471, 472, 474], "deep_set": [180, 336], "sex": [180, 395], "male": 180, "instead": [180, 183, 197, 241, 391, 442, 444, 447, 460], "notat": [180, 183, 391], "pythonic_config": 181, "random_se": [182, 183, 304, 363, 436, 473], "1978": [182, 183], "workspac": [182, 183, 390, 391, 438], "default_workspac": [182, 183], "resume_from": [182, 183, 391], "tensorboard": [182, 183, 383, 391, 401, 436], "set_random_se": [182, 183, 391], "set_workspac": [182, 183, 391], "set_resume_from": [182, 183, 391], "set_tensorboard": [182, 183, 391], "directori": [182, 183, 199, 200, 243, 244, 334, 386, 388, 390, 391, 420, 425, 428, 449, 451, 453, 454, 469], "histori": [182, 183, 390, 391, 456, 471], "nc_workspac": [182, 183], "datetim": [182, 183], "now": [182, 183, 215, 257, 397, 398, 403, 420, 425, 447, 462, 470, 471], "strftime": [182, 183], "d_": [182, 183], "h": [182, 183, 215, 257, 425, 470], "resum": [182, 183, 186, 187, 230, 231, 309, 310, 360, 363, 364, 368, 370, 371], "wa": [182, 183, 401, 436, 461, 471], "flag": [182, 183, 266, 319, 422], "visual": [182, 183, 400, 447, 456, 467, 469, 471, 472], "displai": [182, 183, 313, 314, 374, 375, 391, 456], "2022": [182, 183, 400, 434, 465, 468, 474], "workspace_path": [182, 183], "accuracycriterion": [182, 183, 436, 471], "higher_is_bett": [182, 183, 325, 359, 471, 473], "rel": [182, 183, 336, 436, 462, 471, 473, 474], "tolerable_loss": [182, 183, 436, 471], "01": [182, 183, 436, 462, 465, 471, 473, 474], "higher": [182, 183, 186, 187, 230, 231, 279, 326, 359, 380, 397, 422, 423, 427, 435, 460, 463, 467], "accept": [182, 183, 378, 395, 418, 419], "accuracy_criterion": [182, 183, 336, 436, 458, 462, 471, 473], "avail": [182, 183, 330, 404, 406, 410, 413, 416, 426, 428, 430, 432, 449, 453, 460, 471, 474], "warmup": [182, 183, 418, 436, 462], "inter_num_of_thread": [182, 183, 353, 358, 436, 462], "intra_num_of_thread": [182, 183, 353, 358, 436, 462], "benchmark": [182, 183, 218, 264, 301, 317, 336, 391, 400, 408, 438, 439, 443, 447, 450, 456, 471, 472, 473, 474], "empti": [182, 183, 442], "onnxrt_trt_ep": [182, 183, 437, 463], "onnxrt_cuda_ep": [182, 183, 437, 463], "inter": [182, 183, 196, 200, 240, 244], "intra": [182, 183], "quantizationconfig": 182, "post_training_static_qu": [182, 420, 436, 462, 471], "calibration_sampling_s": [182, 183, 436], "op_type_dict": [182, 183, 403, 462, 463, 465, 471], "op_name_dict": [182, 183, 422, 436, 463, 471], "strategy_kwarg": [182, 183, 467, 471], "timeout": [182, 183, 436, 462, 471, 473], "max_trial": [182, 183, 436, 471], "quant_level": [182, 183, 471], "posttrainingquantconfig": [182, 183, 359, 397, 400, 403, 419, 422, 427, 430, 435, 436, 438, 463, 464, 465, 467, 468, 471], "quantizationawaretrainingconfig": [182, 183, 380, 397, 424, 427, 436, 463, 464, 471], "cv": [182, 183, 460], "object_detect": [182, 183, 268, 321], "nlp": [182, 183, 298, 444, 460, 463], "recommendation_system": [182, 183], "explicitli": [182, 183, 431, 460], "overrid": [182, 183, 391], "quantiztaion": [182, 183], "smooth_quant_arg": [182, 183, 463, 468], "gemm_to_matmul": [182, 183, 463], "graph_optimization_level": [182, 183, 462, 463], "disable_al": [182, 183, 462], "enable_bas": [182, 183], "enable_extend": [182, 183], "enable_al": [182, 183], "first_conv_or_matmul_quant": [182, 183, 463], "last_conv_or_matmul_quant": [182, 183, 463], "pre_post_process_quant": [182, 183, 463], "preprocess": [182, 183, 198, 215, 242, 257, 377, 383, 425, 470], "postprocess": [182, 183, 209, 212, 215, 219, 257, 264, 317, 325, 359, 383, 401, 436, 469, 470], "vaild": [182, 183], "dedic": [182, 183], "quant_format": [182, 183, 262, 427], "constraint": [182, 183, 263, 300, 436, 460, 467, 471, 473], "conv1": [182, 183, 463, 473], "tuning_strategi": [182, 183], "guarante": [182, 183, 436], "models": [182, 183, 336, 436, 458, 462], "footprint": [182, 183, 263, 287, 292, 300, 336, 424, 436, 458, 460, 462], "earli": [182, 183, 436, 463, 471, 473], "stop": [182, 183, 436, 471, 472, 473], "field": [182, 183, 200, 244, 268, 321, 397, 401, 403, 425, 436, 467, 471, 473], "exit": [182, 183, 303, 360, 362, 436, 473], "excluded_precis": [182, 183, 464], "exclud": [182, 183, 401, 464], "conserv": [182, 183, 317, 367], "use_distributed_tun": 182, "weightpruningconfig": [182, 183, 227, 436, 459, 460], "pruning_config": [182, 183, 436], "9": [182, 183, 397, 433, 436, 460, 462, 468, 471, 473, 474], "98": [182, 183, 436, 460, 462, 474], "exp": [182, 183, 436, 460], "link": [182, 183, 198, 242, 325, 359, 420, 427, 449, 453, 456, 474], "90": [182, 183, 473, 474], "magnitude_progress": [182, 183], "snip_progress": [182, 183], "snip_momentum_progress": [182, 183], "pattern_lock": [182, 183, 264, 283, 317], "most": [182, 183, 272, 325, 422, 436, 437, 460, 463, 465, 468, 471, 474], "feasibl": [182, 183], "situat": [182, 183, 425, 460], "unstructur": [182, 183, 291, 432, 460, 474], "8x1": [182, 183], "channelx1": [182, 183, 460], "1xchannel": [182, 183, 460], "itrex": [182, 183], "start": [182, 183, 215, 257, 268, 321, 364, 433, 461, 470, 471, 472, 475], "togeth": [182, 183, 215, 257, 423, 433, 443, 461, 469, 470], "sort": [182, 183, 307, 368, 422, 471], "sinc": [182, 183, 263, 265, 287, 292, 300, 318, 423, 427, 433, 435, 450, 456, 459, 465, 466], "lead": [182, 183, 423, 436, 437, 460, 465, 468], "increas": [182, 183, 421, 432, 439, 456, 471], "cube": [182, 183, 460], "6": [182, 183, 400, 429, 463, 468, 471, 474], "update_config": [182, 183], "10": [182, 183, 200, 244, 304, 363, 400, 418, 420, 427, 433, 436, 460, 462, 470, 471, 474], "knowledgedistillationlossconfig": [182, 183, 423, 424, 436, 459], "hyperparamet": [182, 183, 313, 467, 468, 471], "entropi": [182, 183, 471], "groundtruth": [182, 183, 268, 321], "label": [182, 183, 186, 187, 198, 200, 201, 202, 203, 206, 211, 215, 220, 230, 231, 242, 244, 245, 246, 247, 250, 254, 257, 265, 267, 272, 318, 320, 325, 326, 359, 380, 397, 419, 420, 422, 435, 436, 463, 470], "tpye": [182, 183], "sum": [182, 183, 272, 325, 422, 423], "distillationconfig": [182, 183, 380, 423, 424, 436, 459], "prepare_compress": [182, 183, 380, 397, 423, 424, 436, 459, 460, 463], "criterion_conf": [182, 183], "d_conf": [182, 183, 424, 436, 459], "compression_manag": [182, 183, 380, 397, 423, 424, 436, 459, 460, 463], "sgd": [182, 183, 222, 423, 436, 462, 473], "learning_r": [182, 183, 436, 462, 473], "callabl": [182, 183, 270, 323, 380, 419], "featur": [182, 183, 198, 199, 211, 215, 242, 243, 254, 257, 396, 400, 418, 419, 421, 423, 436, 437, 438, 439, 443, 444, 447, 456, 460, 461, 466, 470], "altern": [182, 183, 359], "distil_loss": [182, 183, 436], "crossentropyloss": [182, 183, 217, 423, 436], "lr": [182, 183, 423, 425, 436], "tuningcriterion": [183, 436, 458, 467, 471], "tuning_criterion": [183, 436, 458, 467, 471], "weight_onli": [183, 465], "ptq": [183, 359, 397, 422, 425, 432, 436, 463, 468, 469, 471], "tri": [183, 471], "meet": [183, 189, 301, 303, 360, 362, 397, 402, 458, 461, 462, 463, 465, 469, 471], "bayesian": [183, 264, 280, 306, 317, 367, 398, 462], "mse_v2": [183, 264, 306, 317, 367], "hawq_v2": [183, 317, 367], "exhaust": [183, 264, 280, 306, 317, 367, 462], "docstr": [183, 378], "copi": [183, 296, 391, 419], "deepcopi": 183, "model_origin": [183, 359, 464], "qat_op_name_dict": 183, "intermediatelayersknowledgedistillationlossconfig": [183, 423], "relationship": 183, "student_layer_nam": 183, "student_layer_output_process": 183, "teacher_layer_nam": 183, "teacher_layer_output_process": 183, "desir": [183, 211, 215, 254, 257, 402, 403, 470], "either": [183, 268, 321, 440, 444, 459, 462, 463], "serv": [183, 334], "numer": [183, 272, 325, 403, 437, 461, 463], "abbrevi": 183, "layer_nam": 183, "l1": 183, "selfknowledgedistillationlossconfig": [183, 423, 436], "student1_layer_name1": 183, "teacher_layer_name1": 183, "student2_layer_name1": 183, "student1_layer_name2": 183, "teacher_layer_name2": 183, "student2_layer_name2": 183, "soft": 183, "l2": [183, 460], "hard": [183, 419, 422], "resblock": 183, "deepst": 183, "02": [183, 468, 474], "mixedprecisionconfig": [183, 326, 378, 436, 437], "mixedprecis": [183, 273, 436], "doesn": [183, 215, 257, 401, 425, 436, 437, 457, 473], "fp16": [183, 314, 375, 463], "won": [183, 463], "work": [183, 263, 300, 399, 402, 419, 423, 451, 454, 460, 464, 465, 466, 468, 469], "mix_precis": [183, 317, 378, 436, 437], "converted_model": [183, 326, 436, 437], "exportconfig": 183, "14": [183, 261, 262, 427, 433, 468, 474], "dynamic_ax": [183, 262, 427], "qlinear": [183, 200, 207, 244, 251, 272, 325, 401, 446], "ax": [183, 262], "onnxqlinear2qdqconfig": 183, "onnxqlinear2qdq": 183, "torch2onnxconfig": [183, 427], "torch2onnx": [183, 259, 264, 317], "qdq_op_fp32_bia": 183, "qdq_op_int32_bia": 183, "qdq_op_fp32_bias_qdq": 183, "resnet50": [183, 400, 422, 425, 427, 437, 439, 443, 460, 463, 467, 474], "int8_onnx_config": [183, 427], "randn": [183, 427], "224": [183, 211, 254, 400, 420, 425, 427, 430, 436, 439, 470, 473], "batch_siz": [183, 188, 190, 193, 194, 195, 196, 197, 198, 199, 218, 232, 234, 237, 238, 239, 240, 241, 242, 243, 262, 398, 419, 420, 425, 427, 431, 436, 439, 463], "tf2onnxconfig": [183, 427], "tf2onnx": [183, 259, 264, 317], "keyword": 183, "argument": [183, 378, 398, 422, 465], "output_graph": 183, "42": [183, 280, 474], "dyna": [183, 264, 277, 317, 398, 432, 462], "sigopt": [184, 185, 228, 229, 264, 317, 461], "tpe": [184, 185, 228, 229, 264, 317], "sigopttunestrategi": [186, 230], "q_dataload": [186, 187, 230, 231, 304, 307, 309, 310, 360, 363, 364, 368, 370, 371, 431, 471], "eval_func": [186, 187, 230, 231, 301, 304, 307, 309, 310, 326, 359, 360, 363, 364, 368, 370, 371, 378, 380, 397, 419, 420, 422, 423, 424, 425, 436, 463, 464, 465, 471, 473], "eval_metr": [186, 187, 326, 359, 360, 363, 364, 368, 370, 371, 380, 435, 463], "q_hook": [186, 187, 230, 231, 304, 307, 309, 310, 360, 363, 364, 368, 370, 371], "hpo": [186, 230], "mandatori": [186, 187, 230, 231, 359, 436, 473], "yield": [186, 187, 196, 218, 230, 231, 240, 304, 326, 359, 363, 378, 380, 419, 463, 471], "_": [186, 187, 230, 231, 359, 397, 398, 401, 402, 419, 422, 423, 425, 427, 429, 436, 437, 438, 439, 445, 449, 451, 453, 454, 458, 460, 463, 465, 466, 467, 468, 469, 471, 473], "well": [186, 187, 230, 231, 326, 359, 380, 398, 400, 420, 460, 463, 466, 468, 473], "taken": [186, 187, 230, 231, 326, 359, 380, 463], "reserv": [186, 187, 230, 231], "abl": [186, 187, 230, 231, 326, 359, 380, 447, 456, 463], "tuner": [186, 187, 230, 231, 263, 300, 326, 359, 380, 463], "scalar": [186, 187, 230, 231, 326, 359, 380, 435, 463], "pseudo": [186, 187, 230, 231, 359, 380, 469], "someth": [186, 187, 200, 230, 231, 244, 359, 380], "fefin": [187, 231], "tpetunestrategi": [187, 231], "basedatalod": [188, 232], "basedataload": [188, 193, 195, 232, 237, 239], "last_batch": [188, 190, 193, 194, 195, 197, 218, 232, 234, 237, 238, 239, 241], "rollov": [188, 190, 193, 194, 195, 197, 218, 232, 234, 237, 238, 239, 241, 419], "collate_fn": [188, 190, 191, 193, 194, 195, 197, 218, 232, 234, 235, 237, 238, 239, 241, 420], "sampler": [188, 190, 192, 193, 194, 195, 197, 218, 232, 234, 236, 237, 238, 239, 241, 253, 264, 313, 374, 419, 425], "batch_sampl": [188, 190, 193, 194, 195, 197, 218, 232, 234, 237, 238, 239, 241], "num_work": [188, 190, 193, 194, 195, 197, 218, 232, 234, 237, 238, 239, 241, 436, 463], "pin_memori": [188, 190, 193, 194, 195, 197, 218, 232, 234, 237, 238, 239, 241], "shuffl": [188, 190, 193, 194, 195, 197, 218, 232, 234, 237, 238, 239, 241, 419, 436, 463], "_generate_dataload": [188, 232], "check_dataload": 189, "default_col": [190, 234], "outer": [190, 234], "defaultdataload": [190, 197, 234, 241], "definit": [191, 196, 235, 240], "style": [191, 205, 235, 249, 378, 396, 420, 431], "drop_last": [191, 196, 235, 240], "iterablefetch": [191, 235], "indexfetch": [191, 235], "base_dataload": [192, 236, 253, 264], "default_dataload": [192, 236, 253, 264], "fetcher": [192, 236, 253, 264], "mxnet_dataload": [192, 236, 253, 264], "onnxrt_dataload": [192, 236, 253, 264, 352], "pytorch_dataload": [192, 236, 253, 264], "tensorflow_dataload": [192, 236, 253, 264, 357], "mxnetdataload": [193, 237], "onnxrtbertdataload": [194, 238], "varient": [194, 238], "onnxrtdataload": [194, 238, 352], "pytorchdataload": [195, 239], "data_sourc": [196, 240, 383], "__iter__": [196, 200, 240, 244, 419, 420, 436], "matter": [196, 240, 464], "iterablesampl": [196, 240], "squential": [196, 240], "your": [196, 198, 240, 242, 396, 419, 420, 422, 425, 434, 436, 439, 442, 443, 444, 449, 450, 451, 453, 454, 456, 460, 461, 467, 469, 471, 472], "clear": [196, 240, 401, 429, 435, 436], "iterabledataset": [196, 200, 240, 244], "try": [196, 240, 397, 422, 460, 463, 468, 471], "indexdataset": [196, 240], "__getitem__": [196, 200, 215, 240, 244, 257, 420, 436], "__len__": [196, 200, 240, 244, 420], "retriev": [196, 240], "sequentialsampl": [196, 240], "sequenti": [196, 240, 301, 303, 360, 362, 471], "batchsampl": [196, 240], "tfdatadataload": [197, 241], "tensorflow1": [197, 241], "coupl": [197, 241], "satisfi": [197, 241, 422, 433], "usag": [197, 241, 268, 274, 301, 321, 378, 402, 420, 425, 426, 439, 447, 458, 462, 470], "tf1": [197, 241, 438], "although": [197, 241, 467], "tensorflowbertdataload": [197, 241], "tensorflowmodelzoobertdataload": [197, 241], "zoo": [197, 215, 241, 257, 400, 426, 430, 474], "tensorflowdataload": [197, 241, 357], "pytorchbertdataset": [198, 242], "model_typ": [198, 242, 391, 420], "construct": [198, 201, 202, 205, 213, 218, 220, 221, 223, 242, 245, 246, 249, 325, 330, 334, 377, 383, 395, 402, 403, 420, 425, 460, 471], "tensordataset": [198, 242, 420], "repo": [198, 242, 394, 420, 426, 449, 451, 453, 454, 475], "todo": [198, 201, 242, 245, 268, 314, 321, 375], "easi": [198, 242, 300, 427, 436, 461, 463, 467], "load": [198, 214, 215, 242, 256, 257, 326, 334, 359, 390, 391, 402, 419, 449, 453, 457, 462, 463, 468], "squad": [198, 215, 242, 257, 269, 270, 272, 322, 323, 325, 420, 435, 460, 470, 474], "distilbert": [198, 242, 400, 420, 437, 461, 474], "xlnet": [198, 242, 420, 474], "xlm": [198, 242, 420, 474], "101": [198, 242, 272, 325, 435, 468, 474], "2043": [198, 242], "2001": [198, 242], "onnxrtbertdataset": [198, 242], "data_dir": [198, 242, 420], "model_name_or_path": [198, 242, 420, 436, 444, 445], "max_seq_length": [198, 215, 242, 257, 420, 470], "do_lower_cas": [198, 214, 215, 242, 256, 257, 420, 470], "mrpc": [198, 242, 272, 325, 420, 435, 444, 460, 471, 474], "dynamic_length": [198, 242, 420], "shortcut": [198, 242, 420], "token": [198, 209, 212, 215, 242, 253, 255, 257, 264, 265, 266, 317, 318, 319, 386, 420, 435, 436, 465, 467, 468, 470, 471], "longer": [198, 215, 242, 257, 420, 470], "truncat": [198, 215, 242, 257, 420, 470], "shorter": [198, 215, 242, 257, 420, 470], "lowercas": [198, 242, 420], "choic": [198, 242, 401, 420, 435, 468], "qqp": [198, 242, 420, 435, 474], "qnli": [198, 242, 420, 435, 474], "rte": [198, 242, 420, 435, 474], "st": [198, 242, 420, 435], "cola": [198, 242, 420, 435, 474], "mnli": [198, 242, 420, 435, 474], "wnli": [198, 242, 420, 435], "mobilebert": [198, 242, 420, 423, 474], "roberta": [198, 242, 420, 474], "uncas": [198, 215, 242, 257, 420, 470, 474], "load_and_cache_exampl": [198, 242], "cach": [198, 242, 428, 463, 465], "convert_examples_to_featur": [198, 215, 242, 257], "max_length": [198, 242], "label_list": [198, 242, 272, 325], "output_mod": [198, 242], "classif": [198, 215, 242, 257, 272, 298, 325, 423, 427, 435, 445, 460, 461], "pad_token": [198, 242], "pad_token_segment_id": [198, 242], "mask_padding_with_zero": [198, 242], "inputfeatur": [198, 215, 242, 257], "properti": [198, 242, 377, 434], "input_id": [198, 215, 242, 257, 436], "vocabulari": [198, 214, 215, 242, 256, 257, 470], "attention_mask": [198, 242, 436], "usual": [198, 242, 402, 422, 423, 459, 460, 463, 468], "NOT": [198, 242, 429], "token_type_id": [198, 242, 436], "segment": [198, 242, 266, 268, 319, 321], "portion": [198, 242], "problem": [198, 242, 272, 325, 435, 437, 457], "regress": [198, 242, 422], "seq_length": [198, 242], "tensorflowbertdataset": [198, 242], "label_fil": [198, 215, 242, 257, 420, 470], "tfrecord": [198, 199, 200, 242, 243, 244, 420], "guid": [198, 242, 397, 400, 420, 423, 433, 439, 447, 456, 475], "parsedecodebert": [198, 242], "tensorflowmodelzoobertdataset": [198, 199, 242, 243], "num_cor": [198, 199, 203, 242, 243, 247, 420], "28": [198, 199, 203, 242, 243, 247, 420, 474], "coco": [199, 206, 210, 243, 250, 268, 272, 321, 325, 435, 460], "parsedecodecoco": [199, 243], "cocorecorddataset": [199, 243], "interleav": [199, 243, 420], "parallel": [199, 243, 353, 358, 420, 436, 471], "cocoraw": [199, 243, 420], "img_dir": [199, 243, 420], "val2017": [199, 243, 420], "anno_dir": [199, 243, 420], "annot": [199, 243, 268, 321, 378, 402, 403, 420, 435, 460, 471], "instances_val2017": [199, 243, 420], "jpg": [199, 203, 205, 243, 247, 249, 420], "imag": [199, 200, 203, 205, 211, 215, 243, 244, 247, 249, 254, 257, 268, 321, 420, 425, 427, 460, 462, 468, 469, 470, 474], "coconpi": [199, 243, 420], "npy_dir": [199, 243, 420], "npy": [199, 243, 420], "tensorflowdataset": [200, 244], "pytorchdataset": [200, 244], "mxnetdataset": [200, 244], "onnxrtqldataset": [200, 244], "onnxrtitdataset": [200, 244], "IT": [200, 207, 244, 251, 461], "pytorchmxnetwrapdataset": [200, 244], "datafunc": [200, 244], "pytorchmxnetwrapfunct": [200, 215, 244, 257], "framework_dataset": [200, 244], "convent": [200, 244, 268, 321, 423], "imageclassifi": [200, 244], "tensorflow_itex": [200, 203, 205, 207, 244, 247, 249, 251, 419, 462], "onnxrt_qdq": [200, 207, 244, 251, 462], "onnxrt_qlinearop": [200, 207, 215, 244, 251, 257, 462], "onnxrt_integerop": [200, 207, 215, 244, 251, 257, 462], "pytorch_ipex": [200, 207, 244, 251, 436, 462, 473], "pytorch_fx": [200, 207, 244, 251, 436, 462], "dataset_registri": [200, 244], "dataset_typ": [200, 244], "dataset_format": [200, 244], "data_format": [200, 211, 244, 254], "raw_imag": [200, 244], "overwrit": [200, 244, 449, 453], "download_url": [200, 244], "url": [200, 244, 434], "filenam": [200, 244, 391, 420], "md5": [200, 244], "download": [200, 244, 420, 422, 433, 466], "address": [200, 244, 395, 437, 461], "gen_bar_updat": [200, 244], "progress": [200, 244, 450, 456, 460, 463], "bar": [200, 244, 456, 461], "check_integr": [200, 244], "fpath": [200, 244], "checksum": [200, 244], "calculate_md5": [200, 244], "chunk_siz": [200, 244], "cifar10": [200, 244, 420], "cifar100": [200, 244, 420], "databas": [200, 244], "otherwis": [200, 215, 244, 257, 391, 395, 402, 420, 451, 454, 462, 470], "www": [200, 244, 420, 474], "toronto": [200, 244, 420], "kriz": [200, 244, 420], "cifar": [200, 244, 420, 474], "tar": [200, 244, 420, 422, 451, 454], "gz": [200, 244, 420, 422, 451, 454], "manual": [200, 244, 420, 439, 445, 447, 450], "subset": [200, 203, 244, 247, 420], "internet": [200, 244, 420], "put": [200, 244, 420, 423], "again": [200, 244, 420, 464], "pytorchcifar10": [200, 244], "mxnetcifar10": [200, 244], "tensorflowcifar10": [200, 244], "pytorchcifar100": [200, 244], "mxnetcifar100": [200, 244], "tensorflowcifar100": [200, 244], "mnist": [200, 244, 420, 425], "nation": [200, 244, 395], "institut": [200, 244], "standard": [200, 215, 244, 257, 402, 422, 427, 435, 470, 471], "technologi": [200, 244, 436], "fashionmnist": [200, 244, 420], "npz": [200, 244, 420], "idx1": [200, 244, 420], "ubyt": [200, 244, 420], "idx3": [200, 244, 420], "t10k": [200, 244, 420], "pytorchmnist": [200, 244], "mxnetmnist": [200, 244], "tensorflowmnist": [200, 244], "pytorchfashionmnist": [200, 244], "mxnetfashionmnist": [200, 244], "tensorflowfashionmnist": [200, 244], "imagefold": [200, 244, 420, 425, 436], "expect": [200, 244, 395, 396, 428, 456, 463, 465, 471], "subfold": [200, 244], "belong": [200, 244, 330, 463], "class_1": [200, 244, 420], "xxx": [200, 244, 396, 420, 436], "png": [200, 244, 420], "xxy": [200, 244, 420], "xxz": [200, 244, 420], "class_n": [200, 244, 420], "123": [200, 244, 420, 470], "nsdf3": [200, 244, 420], "asd932_": [200, 244, 420], "categori": [200, 244, 267, 320, 418, 420, 446], "mxnetimagefold": [200, 244], "tensorflowtfrecorddataset": [200, 244], "tensorflowimagerecord": [200, 244], "imagenet": [200, 203, 211, 244, 247, 254, 398, 422, 436, 445, 460, 469, 470, 473, 474], "000": [200, 244, 400, 420], "001": [200, 244, 420, 425, 468, 473], "099": [200, 244, 420], "tensorflowvocrecord": [200, 244], "pascal": [200, 244], "voc": [200, 244, 272, 325], "2012": [200, 244], "00000": [200, 244], "00004": [200, 244], "00001": [200, 244], "00003": [200, 244], "dummydataset": [201, 202, 245, 246], "127": [201, 202, 245, 246, 420, 463, 468], "float32": [201, 202, 215, 245, 246, 257, 268, 321, 401, 418, 420, 436, 463, 468, 470], "rang": [201, 202, 215, 245, 246, 257, 378, 380, 400, 401, 403, 420, 422, 423, 424, 425, 436, 459, 460, 463, 465, 468, 470], "stand_norm": [201, 202, 245, 246, 420], "dummy_v2": [202, 246, 420], "sparse_dummy_v2": [202, 246, 420], "label_shap": [202, 246, 420], "sparsedummydataset": [202, 246], "dense_shap": [202, 246, 420], "sparse_ratio": [202, 246, 420], "imagenetraw": [203, 247, 420], "data_path": [203, 247, 420], "image_list": [203, 247, 420], "img1": [203, 247, 420], "img2": [203, 247, 420], "imgx": [203, 247, 420], "val_map": [203, 247, 420], "txt": [203, 247, 420, 422, 433], "pytorchimagenetraw": [203, 247], "mxnetimagenetraw": [203, 247], "tensorflowimagenetraw": [203, 247], "inteltensorflow": [203, 205, 247, 249, 433], "tensorflowimagenetdataset": [203, 247], "onnxrtimagenetdataset": [203, 247], "bert_dataset": [204, 209, 248, 253, 264, 317], "coco_dataset": [204, 209, 248, 253, 264, 317], "dummy_dataset": [204, 209, 248, 253, 264, 317], "dummy_dataset_v2": [204, 209, 248, 253, 264, 317], "imagenet_dataset": [204, 209, 248, 253, 264, 317], "style_transfer_dataset": [204, 209, 248, 253, 264, 317], "styletransferdataset": [205, 249], "content_fold": [205, 249, 420], "style_fold": [205, 249, 420], "crop_ratio": [205, 249, 420], "resize_shap": [205, 249, 420], "256": [205, 211, 249, 254, 420, 425, 436, 470], "image_format": [205, 249, 420], "holder": [205, 249, 420], "labelbalancecocorecordfilt": [206, 250], "balanc": [206, 250, 465, 468], "labelbalancecocorawfilt": [206, 250], "tensorflowfilt": [207, 251], "onnxrtqlfilt": [207, 251], "onnxrtitfilt": [207, 251], "pytorchfilt": [207, 251], "mxnetfilt": [207, 251], "filter_registri": [207, 251], "filter_typ": [207, 251], "__call__": [207, 251], "coco_filt": [208, 209, 252, 253, 264, 317], "imagenet_transform": [209, 212, 253, 255, 264, 317], "parsedecodecocotransform": 210, "decod": [210, 211, 254, 265, 318, 435, 470], "quantizedinput": [211, 254, 470], "labelshift": [211, 254, 470], "label_shift": [211, 254, 470], "parsedecodeimagenet": [211, 254, 470], "proto": [211, 215, 254, 257, 470], "parsedecodeimagenettransform": [211, 254], "tensorflowtransposelastchannel": 211, "tensorflowshiftrescal": 211, "rescal": [211, 215, 257, 470], "tensorflowresizecropimagenettransform": [211, 254], "random_crop": [211, 254, 470], "resize_sid": [211, 254, 470], "resize_method": [211, 254], "bilinear": [211, 215, 254, 257, 470], "random_flip_left_right": [211, 254, 470], "mean_valu": [211, 254, 470], "channels_last": [211, 254, 439], "subpixel": [211, 254], "rgb": [211, 254], "seri": [211, 254, 400, 433, 436, 470], "applic": [211, 254, 403, 427, 439, 456, 461, 465, 468, 469, 470, 472], "crop": [211, 215, 254, 257, 420, 470], "flip": [211, 215, 254, 257, 470], "left": [211, 215, 254, 257, 450, 456, 468, 470], "right": [211, 254, 268, 321, 395, 397, 456, 468, 470], "std": [211, 215, 254, 257, 436, 470], "bilinearimagenettransform": [211, 254], "central_fract": [211, 254, 470], "875": [211, 254, 470], "fraction": [211, 254, 470], "onnxbilinearimagenettransform": [211, 254], "onnxresizecropimagenettransform": [211, 254], "std_valu": [211, 254], "229": [211, 254, 436], "225": [211, 254, 436], "resizewithaspectratio": [211, 254], "87": [211, 254, 474], "inter_pol": [211, 254], "cv2": [211, 254], "inter_area": [211, 254], "aspect": [211, 215, 254, 257, 470], "postprocess_cl": [213, 223, 436], "user_postprocess": [213, 223], "convert_to_unicod": [214, 256], "unicod": [214, 256], "assum": [214, 256, 268, 279, 321, 401, 429, 456], "utf": [214, 256], "load_vocab": [214, 256], "vocab_fil": [214, 215, 256, 257, 470], "convert_by_vocab": [214, 256], "vocab": [214, 256], "whitespace_token": [214, 256], "whitespac": [214, 256, 270, 323], "clean": [214, 256, 396, 436], "piec": [214, 256, 265, 318, 435, 465], "fulltoken": [214, 256], "tokenzi": [214, 256], "basictoken": [214, 256], "punctuat": [214, 256, 265, 270, 318, 323], "lower": [214, 215, 256, 257, 270, 323, 364, 424, 460, 461, 463, 468, 470, 471], "wordpiecetoken": [214, 256], "unk_token": [214, 256], "unk": [214, 256], "max_input_chars_per_word": [214, 256], "200": [214, 256, 397, 471], "wordpiec": [214, 215, 256, 257, 470], "concat_gener": [215, 257], "inc": [215, 257, 395, 400, 402, 439, 446, 456, 461, 462, 466, 471], "tensorflowtransform": [215, 257], "mxnettransform": [215, 257], "pytorchtransform": [215, 257], "onnxrtqltransform": [215, 257], "onnxrtittransform": [215, 257], "transform_registri": [215, 257], "transform_typ": [215, 257], "basetransform": [215, 257], "tensorflowwrapfunct": [215, 257], "transform_func": [215, 257], "pytorchmxnettransform": [215, 257], "get_torchvision_map": [215, 257], "torchvis": [215, 257, 426, 430, 439, 445], "composetransform": [215, 257], "transform_list": [215, 257, 470], "compos": [215, 257, 383, 470], "croptoboundingbox": [215, 257, 470], "offset_height": [215, 257, 470], "offset_width": [215, 257, 470], "target_height": [215, 257, 470], "target_width": [215, 257, 470], "box": [215, 257, 268, 272, 321, 325, 397, 435, 439, 450, 456, 469, 470, 471], "coordin": [215, 257, 304, 363, 470, 471], "top": [215, 257, 263, 272, 287, 292, 300, 325, 435, 456, 470], "corner": [215, 257, 401, 403, 470], "horizont": [215, 257, 470], "mxnetcroptoboundingbox": [215, 257], "onnxrtcroptoboundingbox": [215, 257], "tensorflowcroptoboundingbox": [215, 257], "resizewithratio": [215, 257, 470], "min_dim": [215, 257, 470], "800": [215, 257, 470], "max_dim": [215, 257, 470], "1365": [215, 257, 470], "constant_valu": [215, 257], "longest": [215, 257, 470], "side": [215, 257, 420, 450, 470], "exce": [215, 257, 470], "tensorflowresizewithratio": [215, 257], "perm": [215, 257, 470], "permut": [215, 257, 470], "tensorflowtranspos": [215, 257], "mxnettranspos": [215, 257], "pytorchtranspos": [215, 257], "randomverticalflip": [215, 257, 470], "randomli": [215, 257, 280, 304, 363, 398, 468, 470, 471], "tensorflowrandomverticalflip": [215, 257], "randomhorizontalflip": [215, 257, 436, 470], "tensorflowrandomhorizontalflip": [215, 257], "toarrai": [215, 257, 470], "pil": [215, 257, 470], "casttftransform": [215, 257], "castonnxtransform": [215, 257], "castpytorchtransform": [215, 257], "centercroptftransform": [215, 257], "center": [215, 257, 399, 400, 433, 470, 471], "paddedcentercroptransform": [215, 257], "crop_pad": [215, 257], "resizetftransform": [215, 257], "bicub": [215, 257, 470], "resizepytorchtransform": [215, 257], "randomcroptftransform": [215, 257], "randomresizedcroppytorchtransform": [215, 257], "08": [215, 257, 470, 474], "randomresizedcropmxnettransform": [215, 257], "randomresizedcroptftransform": [215, 257], "normalizetftransform": [215, 257], "deviat": [215, 257, 422, 470], "broadcast": [215, 257, 425, 470], "rescalekeraspretraintransform": [215, 257], "rescaletftransform": [215, 257], "rescaletransform": [215, 257], "alignimagechanneltransform": [215, 257], "dim": [215, 257, 468, 470], "align": [215, 257, 395, 470], "w": [215, 257, 460, 468, 470], "must": [215, 257, 268, 321, 396, 397, 402, 418, 419, 433, 463, 470], "pytorchalignimagechannel": [215, 257], "tondarraytransform": [215, 257], "resizemxnettransform": [215, 257], "resizetransform": [215, 257], "cropresizetftransform": [215, 257], "boundari": [215, 257, 470], "area": [215, 257, 268, 321, 435, 470], "pytorchcropresizetransform": [215, 257], "mxnetcropresizetransform": [215, 257], "cropresizetransform": [215, 257], "centercroptransform": [215, 257], "mxnetnormalizetransform": [215, 257], "pytorchnormalizetransform": [215, 257], "normalizetransform": [215, 257], "randomcroptransform": [215, 257], "randomresizedcroptransform": [215, 257], "get_final_text": [215, 257], "pred_text": [215, 257], "orig_text": [215, 257], "project": [215, 257, 394, 395, 396, 461, 467, 471, 475], "squadexampl": [215, 257], "qas_id": [215, 257], "question_text": [215, 257], "doc_token": [215, 257], "orig_answer_text": [215, 257], "start_posit": [215, 257], "end_posit": [215, 257], "is_imposs": [215, 257], "simpl": [215, 257, 433, 436, 467, 468, 471], "answer": [215, 257, 269, 270, 322, 323, 395, 460, 470, 474], "posit": [215, 257, 395, 435, 439], "unique_id": [215, 257], "example_index": [215, 257], "doc_span_index": [215, 257], "token_to_orig_map": [215, 257], "token_is_max_context": [215, 257], "input_mask": [215, 257, 436], "segment_id": [215, 257, 436], "read_squad_exampl": [215, 257], "input_fil": [215, 257], "doc_strid": [215, 257, 470], "max_query_length": [215, 257, 470], "output_fn": [215, 257], "inputbatch": [215, 257], "collecttransform": [215, 257], "10833": [215, 257], "tfsquadv1posttransform": [215, 257], "n_best_siz": [215, 257, 470], "20": [215, 257, 468, 470, 473, 474], "384": [215, 257, 470], "64": [215, 257, 398, 468, 470, 474], "max_answer_length": [215, 257, 470], "30": [215, 257, 426, 430, 432, 468, 470, 474], "nbest_predict": [215, 257, 470], "question": [215, 257, 269, 270, 322, 323, 395, 396, 401, 433, 439, 460, 468, 470, 474], "anoth": [215, 257, 265, 274, 318, 391, 422, 423, 449, 453, 470, 471], "long": [215, 257, 428, 470], "document": [215, 257, 378, 396, 402, 403, 408, 425, 437, 441, 451, 454, 455, 466, 470, 472], "chunk": [215, 257, 470], "tfmodelzoocollecttransform": [215, 257], "tfsquadv1modelzooposttransform": [215, 257], "squadv1": [215, 257, 470], "see": [215, 257, 265, 318, 395, 397, 399, 434, 436, 449, 450, 453, 456, 457, 465, 468, 469, 471], "parsedecodevoctransform": [215, 257], "conf_fname_or_obj": [216, 225, 258, 263, 273, 274, 275, 276, 278, 287, 292, 300], "thei": [216, 378, 395, 423, 429, 436, 444, 458], "possibl": [216, 422, 459, 460, 464, 471], "unnecessari": [216, 436], "tensorflowcrossentropyloss": 217, "pytorchcrossentropyloss": 217, "tensorflowsparsecategoricalcrossentropi": 217, "sparsecategoricalcrossentropyloss": 217, "setter": 218, "calib_dataload": [218, 301, 359, 397, 400, 419, 420, 422, 430, 431, 435, 436, 463, 464], "reason": [218, 395, 402, 419, 465, 469, 471], "know": [218, 425, 466], "known": [218, 304, 363, 436, 469, 471], "open": [219, 264, 317, 383, 393, 395, 400, 427, 428, 436, 451, 454, 457, 461], "metric_cl": [220, 325, 359, 436], "user_metr": [220, 325, 359], "alwai": [220, 268, 321, 325, 359, 422, 435, 436], "recommend": [220, 325, 401, 420, 429, 447, 450, 455, 457, 460, 462, 471], "set_backend": 221, "tensorflowoptim": 222, "pytorchoptim": 222, "optimizer_registri": 222, "optimizer_typ": 222, "cross": [222, 272, 325, 431, 471], "tensorflowsgd": 222, "tensorflowadamw": 222, "tensorflow_addon": 222, "adamw": 222, "tensorflowadam": 222, "adam": [222, 473], "pytorchsgd": 222, "record_output": 224, "output_process": 224, "get_activ": 224, "f": [227, 423, 425, 463, 465, 468], "pickle_modul": 227, "pickle_protocol": 227, "_use_new_zipfile_seri": 227, "prepare_prun": [227, 460], "opt": [227, 400, 444, 468, 471], "tensorflowimagefold": 244, "qlinear2qdq": [259, 264, 317], "qlinearop": [260, 422, 432, 447, 463, 474], "check_model": 260, "modelproto": [260, 326, 438], "onnx_qlinear_to_qdq": 260, "input_name_to_nod": 260, "destin": [260, 274], "tf_to_fp32_onnx": 261, "tf_to_int8_onnx": 261, "int8_model": [261, 262, 401], "get_node_map": 262, "fp32_onnx_path": 262, "module_node_map": 262, "get_quantizable_onnx_op": 262, "quantize_nod": 262, "dynamic_quant_export": 262, "pt_fp32_model": 262, "pt_int8_model": 262, "weight_typ": 262, "s8": 262, "static_quant_export": 262, "_quantiz": 262, "torch_to_fp32_onnx": 262, "do_constant_fold": 262, "verbos": [262, 304, 363], "torch_to_int8_onnx": 262, "achiev": [263, 300, 427, 436, 459, 460, 461, 463, 469, 471], "across": [263, 273, 300, 326, 421, 436, 460, 468, 471], "variou": [263, 273, 300, 326, 403, 432, 439, 460, 462], "dl": [263, 273, 287, 292, 300, 326, 422, 431, 443, 456, 461, 474], "bring": [263, 300, 450, 468], "unifi": [263, 300, 401, 402, 403, 419, 431, 432, 435, 436, 438], "vari": [263, 287, 292, 300, 460, 468, 474], "roc": [263, 272, 287, 292, 300, 325], "flexibl": [263, 287, 292, 300, 423, 460], "via": [263, 287, 292, 300, 395, 425, 432, 436, 439, 456, 460], "popular": [264, 317, 393, 400, 401, 402, 423, 426, 427, 430, 436, 460, 463, 465, 471, 472], "compress": [264, 287, 292, 317, 336, 380, 393, 400, 408, 423, 432, 436, 456, 458, 459, 460, 461, 463, 465, 468, 472, 474], "techniqu": [264, 317, 393, 400, 432, 436, 439, 459, 460, 461, 462, 463, 472, 473, 474], "bleu": [264, 266, 271, 317, 319, 324, 435, 460], "bleu_util": [264, 271, 317, 324], "coco_label_map": [264, 271, 317, 324], "coco_tool": [264, 271, 317, 324], "evaluate_squad": [264, 271, 317, 324], "f1": [264, 269, 271, 272, 317, 322, 324, 325, 425, 435, 436, 467, 474], "basic_na": [264, 277, 317], "nas_util": [264, 277, 317], "pruner_legaci": [264, 317], "gradient_sensit": [264, 283, 317], "group_lasso": [264, 283, 317], "pruning_recip": [264, 317], "tile_pattern": [264, 288, 289], "pytorch_prun": [264, 317], "logger": [264, 293, 317, 381, 384, 391], "prune_util": [264, 293, 317], "tuning_sampl": [264, 306, 312, 317, 367, 373], "tuning_spac": [264, 306, 312, 313, 315, 317, 367, 373, 374, 376], "tuning_struct": [264, 306, 312, 313, 314, 317, 367, 373, 374, 375], "auto_mixed_precis": [264, 306, 317, 367], "graph_optim": [264, 317], "mixed_precis": [264, 317, 326, 436], "model_convers": [264, 317], "pruning_v2": [264, 317], "unicoderegex": [265, 318], "hoc": [265, 318], "hack": [265, 318], "recogn": [265, 318, 471], "nondigit_punct_r": [265, 318], "compil": [265, 318, 436], "express": [265, 318, 395], "preced": [265, 318, 468], "digit": [265, 318, 391, 461], "punct_nondigit_r": [265, 318], "symbol_r": [265, 318], "bleu_token": [265, 318], "mose": [265, 318, 465], "smt": [265, 318], "mosesdecod": [265, 318], "mteval": [265, 318], "v14": [265, 318], "pl": [265, 318], "l954": [265, 318], "l983": [265, 318], "bilingu": [265, 318], "understudi": [265, 318], "qualiti": [265, 318], "machin": [265, 318, 427, 433, 442, 456, 461, 468, 469], "translat": [265, 266, 318, 319, 460, 471], "natur": [265, 318, 427], "approxim": [265, 266, 318, 319, 402, 435], "glue": [265, 272, 318, 325, 420, 435, 436, 445], "word": [265, 318, 435, 460, 465, 474], "ngram": [265, 318, 435], "breviti": [265, 266, 318, 319, 435], "penalti": [265, 266, 318, 319, 435], "doe": [265, 318, 377, 419, 420, 435, 436, 466, 470], "beam": [265, 318, 435], "tensor2tensor": [266, 319], "bleu_hook": [266, 319], "compute_bleu": [266, 319], "reference_corpu": [266, 319], "translation_corpu": [266, 319], "max_ord": [266, 319], "use_bp": [266, 319], "against": [266, 319], "gram": [266, 319], "bleu_scor": [266, 319], "third": [268, 321, 434], "parti": [268, 321, 434, 463], "pycocotool": [268, 321, 428, 433], "noth": [268, 321, 471], "thu": [268, 321, 436, 460, 463], "cannot": [268, 321, 397, 428, 469], "jonathanhuang": [268, 321], "image_id": [268, 321, 435], "encod": [268, 321, 470], "invok": [268, 321, 402], "groundtruth_dict": [268, 321], "exportgroundtruthtococo": [268, 321], "groundtruth_boxes_list": [268, 321], "groundtruth_classes_list": [268, 321], "max_num_class": [268, 321], "output_path": [268, 321], "detections_list": [268, 321], "exportdetectionstococo": [268, 321], "detection_boxes_list": [268, 321], "detection_scores_list": [268, 321], "detection_classes_list": [268, 321], "cocowrapp": [268, 321], "loadannot": [268, 321], "cocoevalwrapp": [268, 321], "agnostic_mod": [268, 321], "computemetr": [268, 321], "detection_typ": [268, 321], "bbox": [268, 321, 397, 435], "hold": [268, 304, 321, 363, 420], "iou_typ": [268, 321], "iou_thr": [268, 272, 321, 325, 435], "map_point": [268, 272, 321, 325, 435], "cocoev": [268, 321], "mscoco": [268, 321], "Then": [268, 321, 402, 422, 449, 451, 453, 454, 468, 471], "exportsingleimagegroundtruthtococo": [268, 321], "next_annotation_id": [268, 321], "category_id_set": [268, 321], "groundtruth_box": [268, 321], "groundtruth_class": [268, 321], "groundtruth_mask": [268, 321], "groundtruth_is_crowd": [268, 321], "ingest": [268, 321], "here": [268, 321, 378, 402, 420, 425, 426, 427, 429, 430, 435, 444, 451, 454, 456, 463, 466, 467, 474], "ones": [268, 321, 460], "exportsingleimagedetectionstococo": [268, 321], "uniqu": [268, 301, 321, 463], "assign": [268, 321, 391, 425, 462, 471], "num_gt_box": [268, 321], "num_detect": [268, 272, 321, 325, 435, 436, 473], "image_height": [268, 321], "image_width": [268, 321], "detection_mask": [268, 321], "crowd": [268, 321], "insid": [268, 321, 423, 424, 457, 460, 471], "exportsingleimagedetectionboxestococo": [268, 321], "detection_box": [268, 321, 436, 473], "detection_scor": [268, 321, 436, 473], "detection_class": [268, 321, 436, 473], "exporsingleimagedetectionboxestococo": [268, 321], "exportsingleimagedetectionmaskstococo": [268, 321], "allenai": [269, 270, 322, 323], "bi": [269, 270, 322, 323], "att": [269, 270, 322, 323], "flow": [269, 270, 322, 323, 397, 398, 436], "f1_score": [269, 270, 322, 323], "ground_truth": [269, 270, 322, 323], "ground": [269, 270, 322, 323], "truth": [269, 270, 322, 323], "metric_max_over_ground_truth": [269, 270, 322, 323], "metric_fn": [269, 270, 322, 323], "exact_match_scor": [269, 322], "exact": [269, 322], "averag": [269, 270, 272, 322, 323, 325, 435, 436, 471], "articl": [269, 270, 322, 323], "paragraph": [269, 270, 322, 323], "qa": [269, 270, 322, 323], "cantain": [269, 270, 322, 323], "normalize_answ": [270, 323], "extra": [270, 323, 436], "newlin": [270, 323, 391], "tab": [270, 323, 456, 469], "harmon": [270, 272, 323, 325], "recal": [270, 272, 323, 325], "answer_start": [270, 323], "177": [270, 323], "denver": [270, 323], "bronco": [270, 323], "nfl": [270, 323], "team": [270, 323, 395, 464], "afc": [270, 323], "super": [270, 323, 398], "bowl": [270, 323], "50": [270, 323, 398, 402, 468, 474], "56be4db0acb8001400a502ec": [270, 323], "form": [270, 323, 422, 423, 456], "percentag": [270, 323, 473], "tensorflowmetr": [272, 325], "maintain": [272, 325, 395, 396, 400, 438, 439, 451, 454, 465, 466], "pytorchmetr": [272, 325], "mxnetmetr": [272, 325], "onnxrtqlmetr": [272, 325], "onnxrtitmetr": [272, 325], "metric_registri": [272, 325], "metric_typ": [272, 325], "decorator_metr": [272, 325], "basemetr": [272, 325, 359], "single_output": [272, 325], "hvd": [272, 325, 425], "wrappytorchmetr": [272, 325], "wrapmxnetmetr": [272, 325], "wraponnxrtmetr": [272, 325], "proport": [272, 325], "were": [272, 325, 442, 460], "pred_list": [272, 325], "pytorchloss": [272, 325], "mae": [272, 325, 435], "compare_label": [272, 325, 359, 435], "actual": [272, 325, 425, 468], "rmse": [272, 325, 435, 471], "squar": [272, 307, 325, 368, 422, 435, 468, 471], "tensorflowtopk": [272, 325], "k": [272, 325, 359, 435], "among": [272, 325, 450, 468], "outcom": [272, 325], "num_correct": [272, 325], "num_sampl": [272, 325], "generaltopk": [272, 325], "cocomapv2": [272, 325, 435], "anno_path": [272, 325, 435], "map_kei": [272, 325], "detectionboxes_precis": [272, 325], "output_index_map": [272, 325, 435], "tensorflowmap": [272, 325], "tensorflowcocomap": [272, 325], "tensorflowvocmap": [272, 325], "squadf1": [272, 325, 435], "miou": [272, 325], "num_class": [272, 325], "21": [272, 325, 444, 445, 461, 468, 474], "iou": [272, 325], "intersect": [272, 325, 401, 435], "union": [272, 325, 380, 435], "onnxrtglu": [272, 325], "dlrm": [272, 325], "modelconvers": 274, "typic": [274, 301, 398, 400, 424, 426, 430, 460, 474], "basicna": 275, "model_build": [275, 278], "conf_fnam": 275, "nasbas": [278, 398], "nas_registri": 279, "nas_method": 279, "create_search_space_pool": 279, "idx": [279, 420], "enumer": [279, 380, 401, 423, 424, 425, 436, 459, 460, 469], "find_pareto_front": 279, "pareto": [279, 398], "front": [279, 398], "n_point": 279, "n_metric": 279, "n_pareto_point": 279, "gridsearch": 280, "grid": [280, 398], "whole": [280, 403, 463, 474], "randomsearch": 280, "bayesianoptimizationsearch": 280, "gradientsensitivityprun": 281, "pytorchmodel": [281, 282, 284, 285, 286, 335], "overwritten": [281, 282, 284, 285, 286, 444], "grouplassoprun": 282, "legaci": 283, "basicmagnitudeprun": 284, "lock": [285, 286, 432, 459, 460], "pruner_registri": 286, "clase": 286, "pruningconf": [287, 292], "tfpruningcallback": [287, 292], "input_model": [287, 292, 438, 469], "pure": [287, 292, 460], "pattern_registri": 290, "pattern_typ": 290, "patternbas": 290, "mask_shap": [290, 291], "is_contigu": 290, "tile": 291, "tilepatternbas": 291, "tilepattern_1x1": 291, "1x1": [291, 423, 436, 460], "tilepattern_2x2": 291, "2x2": [291, 468], "tilepattern_1x16": 291, "1x16": 291, "tilepattern_4x1": 291, "tilepattern_1x2": 291, "1x2": [291, 468], "reset_non_value_to_default": 296, "obejct": 296, "parse_not_to_prun": 296, "update_frequency_on_step": [297, 462], "max_sparsity_ratio_per_lay": [297, 462], "magnitudeprun": 297, "snipprun": 297, "snipmomentumprun": 297, "moreoev": 297, "least": [298, 436, 460, 471], "templat": [298, 436, 460], "tree": [298, 314, 375], "huggingface_model": 298, "eager": [298, 358, 425, 432, 463, 464, 469], "config_file_path": 298, "pruner_info": 298, "quantconf": 300, "server": [301, 456], "seper": 301, "opt_model": [301, 436], "fulli": [301, 436, 463, 468], "train_func": [301, 380, 425, 436, 463], "automixedprecisiontunestrategi": [302, 361], "basictunestrategi": [303, 362], "stage": [303, 308, 360, 362, 369, 423, 460, 469, 471], "polici": [303, 307, 360, 362, 368, 395, 400, 473, 475], "bayesiantunestrategi": [304, 363], "acq_max": [304, 363], "ac": [304, 363], "gp": [304, 363], "y_max": [304, 363], "n_warmup": [304, 363], "10000": [304, 363, 460], "n_iter": [304, 363], "acquisit": [304, 363], "gaussian": [304, 363, 471], "relev": [304, 363, 402, 403], "limit": [304, 363, 391, 400, 422, 423, 465, 466, 469], "acq": [304, 363], "randomst": [304, 363], "scipi": [304, 363], "x_max": [304, 363], "targetspac": [304, 363], "pbound": [304, 363], "9527": [304, 363, 436, 473], "allow": [304, 363, 423, 425, 435, 436, 437, 462, 468, 471, 473], "bayesianoptim": [304, 363], "exhaustivetunestrategi": [305, 365], "msetunestrategi": [307, 368], "mse_v2tunestrategi": [308, 369], "revert": [308, 316, 369, 377, 471], "randomtunestrategi": [309, 370], "strategy_registri": [310, 371, 471], "tunestrategi": [310, 371, 471], "tuningsamplerregistri": [313, 374], "tuningsampl": [313, 374], "tuningord": [313, 374], "Not": [313, 314, 374, 375, 391, 398], "tuningspac": [313, 314, 374, 375], "tuning_order_lst": [313, 374], "initial_op_tuning_cfg": [313, 374], "modelwisetuningsampl": [313, 374], "tuning_items_prior": [313, 374], "op_dtype_dict": [313, 374], "optuningconfig": [313, 314, 315, 374, 375, 376], "optypewisetuningsampl": [313, 374], "opwisetuningsampl": [313, 374], "fallbacktuningsampl": [313, 374], "op_dtyp": [313, 374], "accumul": [313, 374, 471], "skip_first": [313, 374], "smoothquantsampl": 313, "tuningitem": [314, 375], "item_typ": [314, 375], "pattern_to_intern": [314, 375], "default_dtyp": [314, 375], "pattern_to_path": [314, 375], "quant_mode_from_pattern": [314, 375], "internal_pattern": [314, 375], "initial_tuning_cfg_with_quant_mod": [314, 375], "op_name_typ": [314, 375], "step1": [314, 375], "step2": [314, 375], "complet": [314, 375, 401, 402, 463, 471, 473, 474], "step3": [314, 375], "step4": [314, 375], "step5": [314, 375], "op_quant_mod": [315, 376], "ordereddefaultdict": [316, 377], "extract_data_typ": [316, 377], "data_typ": [316, 377], "sign": [316, 377, 396, 403, 463, 467], "reverted_data_typ": [316, 377], "signed_flag": [316, 377], "get_adaptor_nam": [316, 377], "experiment": [317, 352, 357, 398, 420, 424, 425, 427, 436, 460, 462, 466, 470], "base_model": [317, 328], "keras_model": [317, 328], "mxnet_model": [317, 328], "nets_factori": [317, 328], "onnx_model": [317, 328, 352], "tensorflow_model": [317, 328, 357], "torch_model": [317, 328], "collect_layer_histogram": [317, 384], "create_obj_from_config": [317, 384], "kl_diverg": [317, 384], "load_huggingfac": [317, 384, 436], "neural_insights_util": [317, 384], "weights_detail": [317, 384], "sub_class": [325, 359], "register_customer_metr": 325, "tell": [325, 359, 462], "topk": [325, 359, 425, 435, 436, 463], "matrix": [325, 359, 400, 447, 472], "frozen": [326, 334, 359, 438], "savedmodel": [326, 334, 359, 474], "chould": 326, "onnx_ml_pb2": [326, 438], "hybirdblock": [326, 359], "paramt": [326, 380], "basemodel": 327, "plai": [327, 461, 465, 468], "role": [327, 465, 468], "kerasmodel": 329, "get_model_fwk_nam": 330, "fwk": 330, "mxnetmodel": 331, "net": 332, "factori": [332, 339, 341, 346, 349, 351, 356], "tfslimnetsfactori": 332, "onnxmodel": [333, 352], "get_model_typ": 334, "validate_graph_nod": 334, "validate_and_inference_input_output": 334, "output_tensor_nam": 334, "graph_sess": 334, "graph_def_sess": 334, "frozen_pb_sess": 334, "load_saved_model": 334, "saved_model_tag": 334, "signatur": 334, "saved_model_dir": 334, "tag": [334, 468, 469], "metagraphdef": 334, "keras_sess": 334, "slim_sess": 334, "checkpoint_sess": 334, "estimator_sess": 334, "saved_model_sess": 334, "tensorflowbasemodel": [334, 357], "tensorflowsavedmodelmodel": 334, "tensorflowqatmodel": 334, "tensorflowcheckpointmodel": 334, "checkpoint": [334, 390, 438], "tensorflowmodel": 334, "pytorchbasemodel": 335, "pytorchfxmodel": 335, "ipexmodel": 335, "driven": [336, 400, 436, 456, 458, 469], "objective_registri": 336, "objective_custom_registri": 336, "obj_cl": 336, "eural_compressor": 336, "objective_cl": 336, "user_object": 336, "__class__": 336, "__name__": 336, "objective_cfg": 336, "usr_cfg": 336, "user_obj_cfg": 336, "easili": [336, 401, 440, 444, 456, 458, 468], "peak": [336, 458], "multiobject": 336, "metric_criterion": 336, "metric_weight": 336, "obj_criterion": 336, "obj_weight": 336, "is_measur": 336, "parserfactori": 338, "onnxrtparserfactori": 340, "onnxprofilingpars": 342, "respons": [342, 343, 347, 463], "profilingpars": 343, "profilingresult": 344, "total_execution_tim": 344, "accelerator_execution_tim": 344, "cpu_execution_tim": 344, "op_run": 344, "op_defin": 344, "tensorflowparserfactori": 345, "tensorflowprofilingpars": 347, "profilerfactori": [348, 350, 355], "create_onnx_config": 353, "ort": 353, "sessionopt": 353, "delete_assign": 358, "create_tf_config": 358, "tf_modul": 358, "configproto": 358, "set_eager_execut": 358, "entir": [359, 380, 397, 402, 403, 460, 468], "autotunestrategi": 360, "conservativetunestrategi": 364, "o0": [364, 471], "who": [364, 395], "hawq_v2tunestrategi": 366, "made": [366, 401, 463, 466, 471], "impact": [366, 466, 471], "tunestrategymeta": 371, "metaclass": 371, "lowerbitssampl": 374, "blockfallbacktuningsampl": 374, "op_block_lst": 374, "target_dtyp": 374, "quantopt": 377, "quant_typ": 377, "quant_opt": 377, "preprocess_user_cfg": 377, "op_user_cfg": 377, "op_user_cfg_modifi": 377, "build_slave_faker_model": 377, "slave": [377, 471], "virtual": [377, 461], "fun": 378, "attribute1": 378, "module_debug_level1": 378, "debug": [378, 387, 422, 449, 453, 457, 471, 472], "function1": 378, "param1": 378, "param2": 378, "parameter1": 378, "parameter2": 378, "o": [378, 433, 441, 468], "function2": 378, "pep": 378, "484": 378, "output_model": [378, 436, 469], "function3": 378, "section": [378, 403, 422, 423, 424, 456, 460, 462, 473], "restructuredtext": 378, "liter": 378, "attributeerror": 378, "except": [378, 391], "generator1": 378, "example_gener": 378, "exampleclass": 378, "param3": 378, "public": [378, 395, 451, 454], "attr1": 378, "attr2": 378, "attr5": 378, "api_doc_exampl": 379, "loop": [380, 397, 398, 402, 403, 429, 467, 471], "compressionmanag": 380, "uesd": 380, "deal": 380, "pruningconfig": 380, "orchestr": [380, 400, 432, 472], "on_train_begin": [380, 397, 423, 424, 436, 459, 460, 463], "train_loop": [380, 436, 459], "on_epoch_begin": [380, 383, 423, 424, 436, 459], "on_step_begin": [380, 383, 423, 424, 436, 459, 460], "on_after_compute_loss": [380, 423, 424, 436, 459], "backward": [380, 423, 424, 425, 436, 459, 460, 463, 466], "on_before_optimizer_step": [380, 423, 424, 436, 459, 460], "on_step_end": [380, 383, 423, 424, 436, 459], "on_epoch_end": [380, 383, 423, 424, 436, 459], "on_train_end": [380, 423, 424, 436, 459, 460, 463], "path_to_sav": 380, "manag": [380, 383, 436, 439, 440, 450], "top1": [380, 435, 460, 463, 474], "callbacks_list": 380, "layerhistogramcollector": 381, "layer_tensor": 381, "include_lay": 381, "get_func_from_config": 383, "func_dict": 383, "get_preprocess": 383, "get_metr": 383, "get_postprocess": 383, "get_algorithm": 383, "algo": 383, "create_dataset": 383, "cfg_preprocess": 383, "cfg_filter": 383, "create_dataload": 383, "dataloader_cfg": 383, "create_eval_func": 383, "postprocess_cfg": 383, "fp32_baselin": [383, 401], "baselin": [383, 467, 469], "create_train_func": 383, "train_cfg": 383, "Their": 383, "auxiliari": 384, "pretrain": [386, 439, 445], "optimizedmodel": 386, "from_pretrain": [386, 436], "save_for_huggingface_upstream": [386, 436], "output_dir": [386, 436, 444, 445], "msg": 387, "fatal": 387, "warn": 387, "warin": 387, "alia": [387, 391, 441, 446], "insight": [388, 400, 422, 461, 466, 471, 472], "register_neural_insights_workload": 388, "workload_loc": [388, 391], "workload_mod": 388, "workload": [388, 391, 461], "uuid": 388, "update_neural_insights_workload": 388, "workload_uuid": 388, "update_neural_insights_workload_accuracy_data": 388, "baseline_accuraci": 388, "optimized_accuraci": 388, "is_int8_model": 390, "checkpoint_dir": 390, "history_cfg": 390, "best_configur": 390, "best_model_weight": 390, "pt": [390, 438, 461, 463, 464, 465], "snapshot": 390, "cfg_from_fil": 391, "yaml_fil": [391, 420, 425], "lazyimport": 391, "lazi": 391, "till": [391, 471], "decorat": 391, "time_limit": 391, "get_siz": 391, "seen": [391, 401], "recurs": 391, "compute_spars": 391, "fault_tolerant_fil": 391, "equal_dict": 391, "d2": 391, "compare_kei": 391, "ignore_kei": 391, "cpuinfo": 391, "dump_elapsed_tim": [391, 401], "customized_msg": 391, "elaps": 391, "combine_histogram": 391, "old_hist": 391, "old": [391, 436, 466], "get_tensor_histogram": 391, "get_all_fp32_data": 391, "get_tuning_histori": 391, "tuning_history_path": 391, "offlin": [391, 395, 436, 463, 468], "str2arrai": 391, "dequantize_weight": 391, "weight_tensor": 391, "min_filter_tensor": 391, "max_filter_tensor": 391, "scale_info": 391, "captureoutputtofil": 391, "tmp_file_path": 391, "stream": [391, 474], "sy": [391, 442], "stderr": 391, "captur": 391, "statist": [391, 392], "header": [391, 428], "field_nam": 391, "output_handl": 391, "printer": 391, "global_st": 391, "load_data_from_pkl": 391, "pkl": 391, "dump_data_to_loc": 391, "show_memory_info": 391, "hint": 391, "dump_class_attr": 391, "compare_object": 391, "obj1": 391, "obj2": 391, "ignore_attr": 391, "comparison": [391, 466, 469], "alias_param": 391, "param_nam": 391, "param_alia": 391, "alias": 391, "print_tabl": 391, "column_map": 391, "table_entri": 391, "titl": [391, 434, 457, 471], "insert_newlin": 391, "prettyt": 391, "column": [391, 468], "func": [391, 402, 463, 473], "handler": [391, 471], "row": [391, 422, 468], "decim": 391, "get_tensors_info": 391, "get_weights_detail": 391, "weightdetail": 391, "dump_tabl": 391, "filepath": 391, "file_typ": 391, "csv": [391, 398], "dump_table_to_csv": 391, "get_number_of_socket": 391, "platform": [391, 400, 432, 439, 447, 461, 463], "opentri": 391, "activation_min": 391, "activation_max": 391, "print_op_list": 391, "get_op_list": 391, "minmax_file_path": 391, "input_model_tensor": 391, "optimized_model_tensor": 391, "activation_min_max": 391, "calculate_ms": 391, "mse_metric_gap": 391, "fp32_tensor": 391, "dequantize_tensor": 391, "euclidean": [391, 423], "distanc": [391, 423], "weightsdetail": 392, "input_tensor_data": 392, "optimized_tensor_data": 392, "weightsstatist": 392, "welcom": [394, 395, 396, 400, 475], "interest": [395, 400, 469], "foster": 395, "particip": 395, "commun": 395, "harass": 395, "experi": [395, 439, 467, 468, 471], "everyon": 395, "regardless": 395, "ag": 395, "bodi": 395, "ethnic": 395, "characterist": 395, "gender": 395, "educ": 395, "socio": 395, "econom": 395, "appear": [395, 450, 456], "race": 395, "religion": 395, "sexual": 395, "orient": 395, "behavior": [395, 396, 401, 402, 403, 429, 438, 469, 471, 473], "contribut": [395, 400, 460], "inclus": 395, "Being": 395, "respect": [395, 429, 460, 468, 473], "viewpoint": 395, "gracefulli": 395, "focus": [395, 401], "empathi": 395, "toward": [395, 423], "member": [395, 401], "unaccept": 395, "imageri": 395, "unwelcom": 395, "troll": 395, "insult": 395, "derogatori": 395, "comment": [395, 402, 420, 435, 436, 465, 470], "polit": 395, "attack": 395, "privat": 395, "publish": [395, 434, 437, 457, 468], "electron": 395, "explicit": 395, "permiss": 395, "inappropri": 395, "profession": 395, "clarifi": 395, "appropri": [395, 468], "fair": 395, "action": [395, 451, 454], "edit": 395, "reject": 395, "commit": [395, 396], "wiki": 395, "issu": [395, 396, 399, 433, 463, 469], "ban": 395, "temporarili": 395, "deem": 395, "threaten": 395, "offens": 395, "harm": 395, "mail": 395, "social": [395, 400, 461], "media": [395, 400, 461], "account": [395, 467, 471], "appoint": 395, "onlin": [395, 467], "event": [395, 469], "abus": 395, "report": [395, 396, 467], "contact": [395, 466, 467], "complaint": 395, "review": [395, 396], "investig": 395, "circumst": [395, 462], "oblig": 395, "confidenti": 395, "regard": [395, 464], "incid": 395, "separ": [395, 431, 434, 459, 462], "good": [395, 463, 471], "faith": 395, "face": [395, 400, 408, 439, 443, 461, 466, 474], "repercuss": 395, "leadership": 395, "faq": [395, 400], "page": [395, 396], "send": [396, 402], "view": [396, 400, 426, 447, 456, 466], "pylint": 396, "flake8": 396, "autopep8": 396, "cover": [396, 427, 431, 461], "would": [396, 436, 460, 463, 468], "adopt": [396, 439, 460, 461, 468], "certif": 396, "agre": 396, "j": [396, 400, 468, 474], "bug": 396, "jira": 396, "ticket": 396, "potenti": [396, 398, 422], "risk": 396, "pr": [396, 419, 435, 451, 454, 466], "reproduc": 396, "hardwar": [396, 400, 401, 423, 432, 436, 456, 460, 461, 462], "submit": [396, 461], "intend": 396, "safe": 396, "collabor": [396, 441, 447], "adher": 396, "toolkit": [397, 433, 439, 447, 461, 472], "tracer": 397, "resolv": [397, 399], "floatfunct": 397, "cat": [397, 427, 442], "done": [397, 423, 424, 440, 456, 460, 463], "10004": [397, 398, 401, 419, 423, 424, 429, 432, 437, 459, 462, 465, 473], "neural_compressor": [397, 398, 400, 403, 418, 419, 420, 422, 423, 424, 425, 427, 430, 431, 435, 436, 437, 438, 458, 459, 460, 462, 463, 464, 466, 467, 468, 470, 471, 473], "eval": [397, 419, 422, 439, 463, 469], "fail": [397, 419, 427], "conduct": [397, 436, 444, 456, 471, 472], "imper": 397, "therefor": [397, 436, 460, 463, 466, 468], "lot": [397, 468], "As": [397, 402, 419, 423, 435, 436, 450, 460, 465, 471], "failur": 397, "successfulli": [397, 425, 461], "suggest": [397, 467], "traceabl": 397, "proxi": 397, "tutori": [397, 447, 461, 472], "prototyp": 397, "html": [397, 400, 451, 454], "highlight": 397, "untrac": 397, "ssd": [397, 427, 474], "resnet34": [397, 474], "r34": 397, "bboxes_labels_scor": 397, "prob": 397, "45": [397, 468, 474], "max_output": 397, "zip": 397, "dbox": 397, "dlabel": 397, "dscore": 397, "decode_singl": 397, "autom": [398, 400, 439, 456, 457, 461, 468], "artifici": 398, "ann": 398, "par": 398, "outperform": 398, "hand": 398, "propos": [398, 401, 423, 437, 468], "lie": 398, "predictor": 398, "shown": [398, 419, 422, 423, 435, 436, 450, 458, 459, 460, 468, 471], "figur": [398, 449, 450, 453], "popul": 398, "inner": 398, "evolutionari": 398, "cycl": 398, "until": [398, 402, 471], "conclud": 398, "met": [398, 429, 463, 469], "yet": [398, 451, 454, 457], "simplest": [398, 442], "launcher": [398, 400, 423, 424, 447, 472], "agent": 398, "nsga2": 398, "supernet": 398, "ofa_mbv3_d234_e346_k357_w1": 398, "acc": [398, 460, 469, 474], "mac": [398, 457], "num_ev": 398, "250": [398, 460], "results_csv_path": 398, "search_result": 398, "dataset_path": 398, "ilsvrc2012": 398, "aim": [398, 400, 439, 460, 468, 471, 472], "mobilenetv3": 398, "lt": [398, 420, 474], "wmt": 398, "en": 398, "de": 398, "guidelin": [399, 400], "mainstream": [400, 472], "learn": [400, 401, 402, 419, 420, 427, 431, 432, 433, 436, 437, 439, 441, 444, 445, 447, 450, 451, 454, 456, 460, 461, 463, 468, 469, 471, 472], "runtim": [400, 401, 402, 404, 419, 422, 426, 429, 432, 437, 441, 446, 447, 462, 466], "workflow": [400, 402, 403, 422, 423, 427, 433, 437, 451, 454, 469, 472], "particular": [400, 460], "wide": [400, 426, 437, 460, 463, 474], "xeon": [400, 433, 434, 437, 461, 463, 464, 474], "scalabl": [400, 433, 437, 461, 463, 464], "processor": [400, 437, 461, 463, 464], "flex": [400, 433], "amd": [400, 432, 433, 474], "arm": [400, 432, 433, 474], "nvidia": [400, 432, 433, 474], "bloom": [400, 468], "176b": [400, 468], "7b": [400, 468, 474], "stabl": [400, 433, 460, 461], "diffus": [400, 461], "gpt": [400, 460, 468, 474], "hub": [400, 426, 430, 447], "hug": [400, 461], "vision": [400, 427, 443, 468], "coder": [400, 432, 440, 441, 444, 447, 450, 461], "cloud": [400, 461], "marketplac": [400, 457, 461], "googl": [400, 437, 461], "amazon": [400, 439, 447], "web": [400, 469], "servic": [400, 456, 461], "azur": [400, 461], "softwar": [400, 434, 460, 461, 466], "alibaba": [400, 446, 453, 454, 461], "tencent": [400, 461], "taco": [400, 461], "ai": [400, 439, 461, 464, 472], "ecosystem": [400, 461], "lightn": [400, 446], "pip": [400, 422, 425, 428, 430, 433, 441, 444, 449, 451, 453, 454, 466], "wget": [400, 422, 428, 430], "storag": [400, 430, 435, 468], "googleapi": [400, 430], "v1_6": [400, 430], "mobilenet_v1_1": [400, 430], "0_224_frozen": [400, 430], "overview": [400, 471], "jupyterlab": [400, 439, 445, 447, 449, 453, 472], "studio": [400, 447, 456, 472], "topic": 400, "innov": [400, 447, 461], "blog": [400, 461], "msft": [400, 461], "oliv": [400, 461], "friendli": [400, 429, 436, 461, 468, 472, 473], "toolchain": [400, 428, 461], "june": [400, 461], "2023": [400, 465, 468, 474], "neurip": [400, 461], "oct": [400, 461], "quala": [400, 461], "minilm": [400, 461, 474], "releas": [400, 433, 445, 447, 449, 453, 455, 475], "legal": [400, 475], "secur": [400, 461, 475], "idea": [400, 460, 468, 471], "feel": 400, "bridg": [401, 402, 432], "vanilla": [401, 402, 432], "abcadaptor": 401, "__init__": [401, 419, 420, 435, 471], "query_fw_cap": [401, 403], "query_fused_pattern": 401, "he": 401, "besid": [401, 423, 465], "describ": [401, 403, 422, 429, 469], "past": [401, 465], "mainten": 401, "difficult": [401, 468], "abil": [401, 402, 420, 429, 468], "modif": [401, 429, 444], "fragment": 401, "scenario": [401, 418, 423, 436, 460, 465], "granular": [401, 402, 403, 429, 432, 442, 463, 468, 473], "semant": [401, 429], "mla": [401, 437, 463], "becom": [401, 427, 460, 465], "explor": 401, "inspect_tensor": 401, "op_list": [401, 469], "iteration_list": 401, "inspect_typ": 401, "save_to_disk": 401, "quantization_cfg": 401, "set_tensor": 401, "tensor_dict": 401, "diagnosis_help": 401, "fw": 402, "outlin": [402, 403], "instruct": [402, 403, 423, 433, 437, 451, 454, 461, 462, 463], "extend": [402, 403], "accommod": [402, 403], "incorpor": [402, 403, 424, 471], "give": [402, 456, 471], "diagram": [402, 403, 422, 471], "illustr": [402, 403, 424, 471], "sequencediagram": [402, 403], "autonumb": [402, 403], "query_framework_cap": 402, "opwis": 402, "optypewis": 402, "travers": [402, 403, 471], "\u2776": 402, "\u2777": 402, "\u2778": 402, "\u2779": 402, "\u277a": 402, "\u277b": 402, "previou": [402, 403, 436, 460, 466, 468, 469, 471, 472], "\u277c": 402, "These": [402, 432], "chapter": 402, "confirm": 402, "chosen": 402, "framework_yaml": 402, "int8_conv_config": 402, "node_op": 402, "optype_wise_": 402, "per_tensor": [402, 403, 429, 463, 473], "exmapl": 402, "tuning_cfg_to_fw": 402, "Its": 402, "calib_iter": 402, "dispatch": [402, 432], "is_perchannel": 402, "is_asymmetr": 402, "weight_bit": 402, "convert_bf16": 402, "calib": 402, "larger": [402, 460, 465, 468], "somewhat": 402, "distort": 402, "line": [402, 425, 432, 439, 444, 445, 469], "At": [402, 471], "explain": [403, 422, 468], "let": [403, 429, 444, 460, 462, 473], "overal": [403, 473], "drive": 403, "uint4": 403, "asymmetr": [403, 463, 471], "kullback": [403, 423], "leibler": [403, 423], "pytorch_cpu": 403, "1_11_capabl": 403, "cap_s8_1_11": 403, "conv1d": 403, "cap_s8_1_11_conv1d": 403, "per_channel_symmetr": 403, "addition": [403, 425, 471], "per_tensor_symmetr": 403, "One": [403, 420, 425, 432, 460, 461, 471], "due": [403, 427, 460, 463, 468, 469], "nativ": 403, "simul": 403, "with_arg": 403, "qscheme": 403, "torch_dtyp": 403, "quant_min": 403, "quant_max": 403, "linux": [418, 428, 450, 456], "x86_64": 418, "aarch64": 418, "encount": 419, "consum": 419, "previous": 419, "lack": [419, 428], "faster": [419, 421, 427, 461, 471, 474], "treat": 419, "Of": 419, "getitem": 419, "fn": 419, "evenli": 419, "divid": [419, 468, 471], "discard": 419, "throw": 419, "awai": 419, "draw": [419, 467, 471], "worker": [419, 436, 463], "subprocess": 419, "pin": [419, 449, 453], "reshuffl": 419, "manner": [419, 423, 438], "newdataload": 419, "customis": [419, 420, 435], "ensp": [420, 470], "imagerecord": [420, 425, 473], "image_nam": 420, "cocorecord": 420, "gt": [420, 468, 470], "int64": 420, "offer": 420, "style_transf": 420, "content": 420, "tfrecorddataset": 420, "labelbal": 420, "300": 420, "16": [420, 468, 474], "helloworld": [420, 437, 470], "aid": 421, "deploy": [421, 439, 456, 461, 468], "infrastructur": 421, "gap": [422, 438], "diagnos": 422, "gui": [422, 432, 460], "termin": [422, 449, 450, 453], "repeat": [422, 471], "durat": [422, 467], "git": [422, 428, 433], "clone": [422, 433, 449, 453], "cd": [422, 425, 433], "setup": [422, 429, 433, 451, 454, 460], "ilsvr2012": 422, "caff": 422, "berkeleyvis": 422, "caffe_ilsvrc12": 422, "xvzf": 422, "image_recognit": [422, 469], "resnet50_torchvis": 422, "ptq_static": 422, "resnet50_v1": [422, 425, 436], "dataset_loc": [422, 469], "label_path": 422, "quantiti": 422, "vec": 422, "mu": 422, "frac": [422, 468], "sigma": 422, "var": 422, "happen": 422, "dispers": 422, "trust": 422, "rule": [422, 439, 460], "v0": [422, 469], "cg": [422, 469], "conv0": [422, 469], "expens": [423, 436, 471], "deploi": [423, 436, 465, 471], "power": [423, 436, 450, 461], "mobil": [423, 436, 474], "produc": 423, "logit": 423, "softmax": 423, "l": [423, 469, 471], "kd": 423, "patient": 423, "compact": [423, 436, 442, 460], "agnost": 423, "resourc": [423, 471], "convolut": [423, 461], "ia": 423, "attach": [423, 436, 468], "shallow": 423, "deepest": 423, "deeper": 423, "paper": [423, 460, 465, 468], "10006": [423, 424], "student_output": [423, 424], "student_loss": [423, 424], "training_func_for_nc": [423, 424], "distil_loss_conf": 423, "accordingli": [423, 447], "promis": [424, 436, 460], "huge": [424, 460], "heavi": 424, "light": 424, "booster": 424, "degrad": [424, 460, 471], "novel": [424, 439, 450, 456], "place": [424, 433, 460, 469], "comb": 424, "distillation_criterion": [424, 436, 459], "q_conf": 424, "horovod": 425, "instal": [425, 428, 430, 439, 441, 444, 447, 451, 454, 456, 457, 475], "builtin": 425, "program": [425, 434, 439, 456], "enable_eager_execut": 425, "yaml_file_path": 425, "pre_process": 425, "simpli": [425, 438, 439, 441, 444, 456], "evaluation_result": 425, "evaluation_time_cost": 425, "partit": [425, 460], "distributedsampl": 425, "train_sampl": 425, "train_dataset": [425, 463], "num_replica": 425, "rank": 425, "train_load": 425, "train_kwarg": 425, "adadelta": 425, "distributedoptim": 425, "named_paramet": 425, "broadcast_paramet": 425, "root_rank": 425, "broadcast_optimizer_st": 425, "set_epoch": 425, "batch_idx": 425, "zero_grad": [425, 436, 460], "nll_loss": 425, "log_interv": 425, "0f": 425, "tloss": 425, "6f": 425, "dry_run": 425, "test_func": 425, "host": 425, "num_of_process": 425, "002": 425, "ssh": [425, 456], "prompt": 425, "readm": 425, "exactli": [425, 440], "recognit": [425, 427, 460, 469], "resizecropimagenet": [425, 470], "realiz": [425, 458, 464, 467], "tow": 425, "node1": 425, "node2": 425, "TO": [425, 441], "your_node1_nam": 425, "your_node2_nam": 425, "resnet50_fp32_pretrained_model": 425, "nc_resnet50_v1": 425, "resnet": [425, 474], "varieti": [426, 462, 471], "demonstr": [426, 439, 469], "10k": [426, 430], "speedup": [426, 432, 463], "2x": [426, 432], "vnni": [426, 432, 462, 463], "exchang": 427, "hope": 427, "inc_model": [427, 438], "fp32_onnx_config": 427, "verifi": 427, "vgg16": [427, 474], "mobilenet": [427, 467, 474], "rcnn": 427, "torchscript": [427, 468], "unsupport": [427, 436, 460], "add_relu": 427, "conv1d_relu": 427, "conv2d_relu": 427, "group_norm": 427, "hardswish": 427, "instance_norm": 427, "layer_norm": 427, "leaky_relu": 427, "sigmoid": 427, "bare": 428, "metal": 428, "sudo": [428, 442], "apt": [428, 433, 442, 450], "python3": 428, "dev": [428, 449, 453], "distutil": 428, "essenti": 428, "libgl1": 428, "mesa": 428, "glx": 428, "libglib2": 428, "ln": 428, "sf": 428, "usr": 428, "incompat": 428, "88": [428, 467, 474], "80": [428, 468, 469, 474], "pyobject": 428, "reinstal": 428, "importerror": 428, "libgl": 428, "No": [428, 436, 461], "yum": [428, 433], "opencv": [428, 450], "conda": [428, 433, 442, 450, 466], "13": [428, 433, 466, 468, 474], "pend": 428, "sqlalchemi": 428, "27": [428, 474], "alemb": 428, "forg": [428, 433], "quick": [429, 437, 472, 473], "dive": [429, 472], "unless": 429, "purpos": [429, 437, 456, 462, 463], "syntax": 429, "go": [429, 451, 454, 462, 470], "up1": 429, "up2": 429, "valid_mixed_precis": 429, "addn": 429, "grappler_optim": 429, "constfold": 429, "arithmet": 429, "debug_stripp": 429, "major": [431, 463, 468], "concept": [431, 467, 472], "rather": 431, "custom_metr": 431, "refin": [431, 460], "broad": [432, 445, 472], "420": 432, "geomean": 432, "snippet": 432, "upload": [432, 451, 454], "click": [432, 439, 440, 447, 450, 456, 461, 469], "button": [432, 450, 456], "qintegerop": [432, 463], "plan": 432, "oneapi": [433, 461, 472], "analyt": [433, 461, 472], "success": 433, "11": [433, 435, 437, 468, 471, 474], "frequent": 433, "ask": 433, "pypi": [433, 451, 454], "nightli": 433, "consolid": 433, "latest": [433, 461, 466], "eas": [433, 441, 461], "along": [433, 460], "streamlin": [433, 461], "scienc": 433, "websit": 433, "anaconda": 433, "suit": [433, 457, 469], "esri": 433, "formerli": 433, "skylak": 433, "cascad": 433, "lake": [433, 437, 461], "cooper": [433, 437, 461], "ic": [433, 461], "sapphir": 433, "rapid": 433, "hbm": 433, "arctic": 433, "sound": 433, "pont": 433, "vecchio": 433, "cento": [433, 474], "ubuntu": 433, "22": [433, 474], "04": [433, 474], "fortensorflow": 433, "forpytorch": 433, "12": 433, "tf_enable_onednn_opt": 433, "onednn": [433, 437, 463], "newer": 433, "copyright": 434, "subject": 434, "accompani": [434, 471], "research": [434, 468], "wish": 434, "bibtex": 434, "misc": 434, "author": 434, "feng": 434, "tian": 434, "hanwen": 434, "haihao": [434, 460], "shen": [434, 460], "suyu": 434, "chen": 434, "howpublish": 434, "year": 434, "logo": 434, "atom": 434, "phi": 434, "pentium": 434, "vtune": 434, "corpor": 434, "subsidiari": 434, "brand": 434, "claim": 434, "popularli": 435, "industri": [435, 461], "label_map": 435, "decis": 435, "ap": 435, "curv": 435, "turn": [435, 450], "target_boxes_num": 435, "str_label": 435, "int_label": 435, "inturn": 435, "cocomap": 435, "vocmap": 435, "categor": 435, "multiclass": 435, "multilabel": 435, "newmetr": 435, "reset": 435, "reflect": [435, 470], "new_metr": 435, "deliv": [436, 461, 466], "conveni": 436, "upgrad": 436, "veri": [436, 457, 463, 471, 472], "speed": [436, 447, 460, 461, 463, 471], "fundament": 436, "comprehens": [436, 472], "kind": 436, "resort": 436, "automodelforsequenceclassif": 436, "autotoken": 436, "val_dataset": [436, 463], "val_dataload": [436, 463], "ping_memori": [436, 463], "formul": 436, "effort": 436, "written": 436, "onnxrt_integ": [436, 473], "onnxrt_qlinear": [436, 473], "image_tensor": [436, 473], "post_training_dynamic_qu": [436, 462, 471], "1000": [436, 473], "2000": 436, "sampling_s": [436, 473], "model_wis": [436, 473], "op_dict": 436, "op_wis": [436, 469, 473], "sigopt_api_token": [436, 467, 471], "sigopt_project_id": [436, 467, 471], "sigopt_experiment_nam": [436, 467, 471], "demo": 436, "600": 436, "training_arg": 436, "emul": [436, 463], "trainer": [436, 447], "briefli": [436, 468], "maxim": [436, 460, 471], "still": [436, 461, 463, 464], "pruning_func": 436, "num_train_epoch": [436, 460], "train_dataload": [436, 460, 463], "n_gpu": 436, "gradient_accumulation_step": 436, "clip_grad_norm_": 436, "max_grad_norm": 436, "rate": [436, 460, 463], "start_epoch": [436, 462, 473], "end_epoch": [436, 462, 473], "97": [436, 468, 474], "newli": [436, 460], "on_after_optimizer_step": [436, 460], "layer3": [436, 460], "lr_schedul": [436, 460], "weight_decai": [436, 473], "0004": 436, "nesterov": [436, 473], "randomresizedcrop": [436, 470], "totensor": [436, 470], "485": [436, 474], "456": [436, 474], "406": 436, "nepoch": 436, "cnt": 436, "loss_sum": 436, "iter_bar": 436, "tqdm": 436, "desc": 436, "teacher_logit": 436, "train_fun": 436, "training_func": 436, "recent": [436, 437], "growth": [436, 437, 460], "complex": [436, 437, 460], "significantli": [436, 437, 460, 471], "bandwidth": [436, 437, 465], "exit_polici": [436, 473], "determinist": 436, "arbitrari": [436, 459], "meaning": [436, 459], "reli": [436, 468], "prune_conf": 436, "quantization_aware_training_conf": 436, "aforement": 436, "inset": 436, "p_conf": [436, 459], "ssd_mobilenet_v1": 436, "benchmarkconf": 436, "half": [437, 447], "sixteen": 437, "launch": [437, 457], "3rd": [437, 461, 463, 464], "gen": [437, 461, 463, 464], "codenam": 437, "boost": [437, 440, 456, 460, 461], "x86": 437, "avx512": [437, 463], "vcvtne2ps2bf16": 437, "vcvtneps2bf16": 437, "vdpbf16p": 437, "fbgemm": [437, 463], "tensorrtexecutionprovid": [437, 463], "cudaexecutionprovid": [437, 463], "cuda": [437, 439, 441, 463], "avx512_bf16": 437, "plu": 437, "resnet18": [437, 441, 474], "persist": 438, "brought": [438, 440, 447, 463], "tf2": 438, "h5": 438, "hybridblock": 438, "0000": 438, "saved_result": [438, 465], "simplifi": [439, 450, 456, 460, 461], "acquir": 439, "analysi": [439, 456, 460, 467], "heurist": [439, 456], "great": 439, "facilit": 439, "enhanc": [439, 461, 464], "autocast": 439, "my_model": 439, "no_grad": 439, "memory_format": 439, "112": [439, 474], "rand": [439, 468], "plugin": [439, 457], "aw": [439, 447, 461, 474], "sagemak": [439, 447], "inlin": [439, 444, 447], "neural_cod": [439, 441, 443, 444, 445, 447], "bench": 439, "superbench": 439, "enjoi": [440, 444, 447], "rebuild": [440, 449, 453], "reload": [440, 457], "modern": [441, 465], "democrat": [441, 461], "programm": [441, 447, 456], "nano_bf16_channels_last": 441, "nano_bf16_ipex_channels_last": 441, "nano_bf16_ipex": 441, "nano_bf16": 441, "nano_fp32_channels_last": 441, "nano_fp32_ipex_channels_last": 441, "nano_fp32_ipex": 441, "nano_gpu_to_cpu": 441, "nano_int8": 441, "nano_jit_bf16_channels_last": 441, "nano_jit_bf16_ipex_channels_last": 441, "nano_jit_bf16_ipex": 441, "nano_jit_bf16": 441, "nano_jit_fp32_channels_last": 441, "nano_jit_fp32_ipex_channels_last": 441, "nano_jit_fp32_ipex": 441, "nano_jit_fp32": 441, "nano_onnxruntime_fp32": 441, "nano_onnxruntime_int8_qlinear": 441, "openvino": 441, "nano_openvino_fp32": 441, "nano_openvino_int8": 441, "bc": [442, 450], "conda_prefix": 442, "echo": 442, "tradit": [442, 460], "libjemalloc": 442, "libiomp5": 442, "home": 442, "lib": 442, "ld_preload": 442, "malloc_conf": 442, "oversize_threshold": 442, "background_thread": 442, "metadata_thp": 442, "dirty_decay_m": 442, "9000000000": 442, "muzzy_decay_m": 442, "kmp_affin": 442, "kmp_blocktim": 442, "dnnl_primitive_cache_capac": 442, "cpufreq": 442, "scaling_governor": 442, "powersav": 442, "tee": 442, "pytorch_jit_script": [443, 446], "pytorch_channels_last": [443, 446], "run_bench": 443, "patch": [443, 456], "patch_path": 443, "your_patch_path": 443, "sweep": 443, "sweep_object": 443, "bench_config": 443, "bench_featur": 443, "sai": 444, "run_glu": [444, 445], "requisit": 444, "task_nam": [444, 445], "do_ev": [444, 445], "remain": 444, "itself": 444, "run_glue_optim": 444, "static_ipex": 444, "auto_qu": 445, "v4": [445, 474], "albert": [445, 474], "sst2": 445, "alexnet": [445, 474], "pytorch_amp": 446, "optimize_for_infer": 446, "pytorch_jit_trac": 446, "pytorch_jit_script_ofi": 446, "pytorch_jit_trace_ofi": 446, "torchdynamo": 446, "pytorch_torchdynamo_jit_script": 446, "pytorch_torchdynamo_jit_trac": 446, "pytorch_torchdynamo_jit_script_ofi": 446, "pytorch_torchdynamo_jit_trace_ofi": 446, "pytorch_inc_bf16": 446, "pytorch_inc_static_quant_fx": 446, "pytorch_inc_static_quant_ipex": 446, "pytorch_inc_dynamic_qu": 446, "pytorch_ipex_fp32": 446, "pytorch_ipex_bf16": 446, "pytorch_ipex_int8_static_qu": 446, "pytorch_ipex_int8_dynamic_qu": 446, "blade": 446, "disc": 446, "pytorch_aliblad": 446, "pytorch_lightning_bf16_cpu": 446, "tensorflow_amp": 446, "keras_amp": 446, "tensorflow_inc": 446, "keras_inc": 446, "onnx_inc_static_quant_qlinear": 446, "onnx_inc_static_quant_qdq": 446, "onnx_inc_dynamic_qu": 446, "optimum": [446, 447], "pytorch_inc_huggingface_optimum_stat": 446, "pytorch_inc_huggingface_optimum_dynam": 446, "intel_extension_for_transform": 446, "bigdl": [446, 447], "nano": [446, 447], "nano_": 446, "inc_auto": 446, "delight": 447, "announc": 447, "v": [447, 456, 460, 471, 473], "500": 447, "jupyt": [447, 449, 450, 453], "isa": 447, "adjust": [447, 463, 468], "xpu": 447, "delta": 447, "acc_delta": 447, "int8_acc": 447, "fp32_acc": 447, "ext": [449, 451, 453, 454, 455], "lab": [449, 450, 451, 453, 454], "nodej": [449, 453], "jlpm": [449, 453], "yarn": [449, 453], "npm": [449, 450, 453], "lieu": [449, 453], "labextens": [449, 450, 453], "typescript": [449, 453], "watch": [449, 453], "immedi": [449, 453, 460], "refresh": [449, 453], "browser": [449, 453], "wait": [449, 453, 456], "rebuilt": [449, 453], "easier": [449, 453, 456, 461], "symlink": [449, 453], "down": 450, "finish": 450, "enter": [450, 456], "blank": 450, "cell": 450, "gain": [450, 459, 461], "mkl": 450, "jemalloc": 450, "pip3": 450, "headless": 450, "pyproject": [451, 454], "toml": [451, 454], "twine": [451, 454], "whl": [451, 454], "dist": [451, 454], "sdist": [451, 454], "bdist_wheel": [451, 454], "deprec": [451, 454, 466, 470], "frontend": [451, 454], "login": [451, 454, 467], "repositori": [451, 454], "cut": [451, 454], "fork": [451, 454], "admin_github_token": [451, 454], "pypi_token": [451, 454], "npm_token": [451, 454], "secret": [451, 454], "panel": [451, 454, 456], "draft": [451, 454], "changelog": [451, 454, 455], "pkg": [451, 454], "bot": [451, 454], "pick": [451, 454, 457], "feedstock": [451, 454], "hatch": 454, "notabl": 455, "vscode": [455, 457], "daili": 456, "advantag": [456, 460, 462, 471], "remot": 456, "re": [456, 465], "market": 456, "uninstal": 456, "fill": [456, 467, 470, 471], "upper": 456, "sidebar": 456, "hover": 456, "track": [456, 467], "argpars": 456, "pop": 456, "diff": 456, "manifest": 457, "declar": 457, "palett": 457, "registercommand": 457, "amodio": 457, "tsl": 457, "matcher": 457, "dbaeumer": 457, "eslint": 457, "press": 457, "f5": 457, "ctrl": 457, "hello": 457, "world": 457, "breakpoint": 457, "consol": 457, "relaunch": 457, "toolbar": 457, "node_modul": 457, "viewlet": 457, "dropdown": 457, "runner": 457, "startup": 457, "bundl": 457, "multi_object": 458, "benefit": 459, "instanti": 459, "neuron": 460, "art": 460, "grown": 460, "unpreced": 460, "increasingli": 460, "crucial": 460, "stand": [460, 471], "delet": 460, "commonli": 460, "shrink": 460, "contextu": 460, "howev": [460, 465, 468], "scene": 460, "haven": 460, "color": 460, "lowest": [460, 471], "formula": [460, 468], "emsp": 460, "downstream": 460, "finetun": [460, 474], "prone": 460, "co": 460, "discourag": 460, "push": [460, 465, 468], "penal": 460, "parameter": 460, "exemplifi": 460, "complement": 460, "fortieth": 460, "miss": [460, 463], "pruner2": 460, "mention": [460, 465], "readi": 460, "hesit": 460, "sst": [460, 474], "25": [460, 468, 474], "63": [460, 468, 474], "24": [460, 468, 471, 474], "35": [460, 474], "flan": 460, "t5": 460, "english": 460, "romanian": 460, "404": [460, 474], "381": 460, "yolov5": 460, "75": [460, 468, 474], "2x1": [460, 474], "801": 460, "7895": 460, "signific": [460, 461, 468], "reduct": [460, 473], "namhoon": 460, "lee": 460, "thalaiyasingam": 460, "ajanthan": 460, "philip": 460, "torr": 460, "2019": 460, "zafrir": 460, "ofir": 460, "ariel": 460, "larei": 460, "boudoukh": 460, "mosh": 460, "wasserblat": 460, "preprint": [460, 465, 468], "2111": 460, "05754": 460, "2021": 460, "medium": 461, "juli": 461, "chatbot": 461, "netflix": 461, "apr": 461, "mlperf": [461, 474], "5x": 461, "heterogen": 461, "mar": 461, "busi": 461, "jan": 461, "amx": 461, "4th": [461, 463], "mleffici": 461, "dec": 461, "wechat": 461, "deepen": 461, "foundat": 461, "intellig": 461, "vmware": 461, "applianc": 461, "bitnami": 461, "nov": 461, "sota": 461, "few": [461, 471], "plug": 461, "twitter": 461, "linkedin": 461, "zone": 461, "land": 461, "gcp": 461, "pat": 461, "keynot": 461, "intelon": 461, "sep": 461, "chines": 461, "aug": 461, "purif": 461, "sacrif": 461, "jun": 461, "partner": 461, "feb": 461, "joint": 461, "bilibili": 461, "gestalt": 461, "ml": 461, "doubl": 461, "reconstruct": 461, "abound": 461, "lpot": [461, 466], "nextplatform": 461, "cern": 461, "gan": 461, "3dgan": 461, "iml": 461, "workshop": 461, "asplo": 461, "18": [461, 474], "highli": 461, "intelcaff": 461, "aris": 462, "henc": 462, "onnxrt_qoper": 462, "quant_aware_train": 462, "weight_compress": [462, 473], "initial_spars": [462, 473], "prune_typ": [462, 473], "basic_magnitud": [462, 473], "update_frequ": 462, "prune_domain": 462, "tile_pattern_1x1": 462, "invent": 463, "int4": 463, "cost": [463, 465], "On": [463, 474], "theoret": [463, 465], "affin": 463, "zeropoint": 463, "255": [463, 468], "overflow": 463, "solv": [463, 466], "unseen": 463, "enough": 463, "peopl": 463, "mimic": 463, "fact": 463, "ultim": 463, "pain": 463, "lossi": 463, "chart": [463, 467, 469], "understand": [463, 469, 472], "philosophi": 463, "request": 463, "neither": 463, "nor": 463, "val_load": 463, "avg": 463, "themselv": 463, "ON": 464, "forc": 464, "postposttrainingquantconfig": 464, "bf16wrapper": 464, "retrac": 464, "llm": [465, 468], "preval": 465, "grow": 465, "demand": 465, "w8a8": 465, "trade": 465, "bottleneck": 465, "roughli": 465, "speak": 465, "capac": [465, 467], "flop": 465, "famou": 465, "approx": 465, "bmm": 465, "100x": 465, "straightforward": [465, 468], "excel": 465, "gptq": 465, "stai": [465, 468], "89": [465, 468, 474], "wip": 465, "gptq_arg": 465, "percdamp": 465, "awq_arg": 465, "xiao": [465, 468], "guangxuan": [465, 468], "2211": [465, 468], "10438": [465, 468], "wei": [465, 468], "xiui": [465, 468], "suppress": [465, 468], "2209": [465, 468], "13325": [465, 468], "lin": 465, "ji": 465, "2306": 465, "00978": 465, "frantar": 465, "elia": 465, "2210": 465, "17323": 465, "site": 466, "assist": 466, "sed": 466, "your_script": 466, "backbon": 467, "interact": 467, "sigopt_experiment_id": 467, "nc": [467, 471], "certain": 467, "suffici": 467, "ordinari": 467, "receiv": 467, "latenc": [467, 471], "8266": 467, "8372": 467, "2132": 467, "83": [467, 468, 474], "7495": 467, "8299": 467, "8294": 467, "85": [467, 468, 474], "0837": 467, "8291": 467, "4469": 467, "gigant": 468, "systemat": 468, "quantif": 468, "migrat": [468, 472], "difficulti": 468, "mathemat": 468, "allevi": 468, "coarsest": 468, "finer": [468, 471], "matric": 468, "similarli": 468, "finest": 468, "consumpt": 468, "why": [468, 469], "suppos": 468, "6839": 468, "4741": 468, "7451": 468, "9301": 468, "1742": 468, "6835": 468, "q_min": 468, "q_max": 468, "q_x": 468, "clamp_": 468, "round_": 468, "w_q": 468, "00296431384049356": 468, "59": [468, 474], "172": 468, "192": 468, "w_dq": 468, "1220": 468, "0500": 468, "1430": 468, "2570": 468, "1890": 468, "mseloss": 468, "1983354538679123": 468, "6848": 468, "4743": 468, "7440": 468, "9308": 468, "1749": 468, "385297635664756e": 468, "07": [468, 473, 474], "affect": 468, "quantize_per_channel": 468, "x_tmp": 468, "detach": 468, "keepdim": 468, "dequantize_per_channel": 468, "0029": [468, 474], "0036": 468, "162": [468, 474], "48": [468, 474], "72": [468, 474], "93": [468, 474], "207": 468, "139": 468, "6837": 468, "4734": 468, "1751": 468, "6821": 468, "637690492221736e": 468, "6376e": 468, "3852e": 468, "cdot": 468, "quantize_per_tensor_absmax": 468, "n_bit": 468, "div_": 468, "0806": 468, "7589": 468, "6038": 468, "3815": 468, "5040": 468, "7174": 468, "5444": 468, "5826": 468, "7772": 468, "5555": 468, "3740": 468, "3253": 468, "0698": 468, "1381": 468, "5972": 468, "0086": 468, "0737": 468, "8298": 468, "6883": 468, "2991": 468, "1601": 468, "6506": 468, "8246": 468, "3924": 468, "3845": 468, "8768": 468, "w_scale": 468, "x_q": 468, "x_scale": 468, "84": [468, 474], "120": 468, "0059755356051027775": 468, "119": 468, "57": [468, 474], "91": [468, 474], "006533813662827015": 468, "y_q": 468, "17509": 468, "7608": 468, "4055": 468, "16599": 468, "21020": 468, "10016": 468, "9860": 468, "22444": 468, "y_dq": 468, "6836": 468, "2970": 468, "1583": 468, "6481": 468, "8207": 468, "3911": 468, "3850": 468, "8763": 468, "though": 468, "prove": 468, "simplic": 468, "middl": 468, "denot": 468, "fp1": 468, "fp2": 468, "subsect": [468, 473], "even": 468, "intuit": 468, "x1": [468, 471], "x2": [468, 471], "herebi": 468, "recalcul": 468, "sq": 468, "overhead": 468, "hardtanh": 468, "t5norm": 468, "llamanorm": 468, "groupnorm": 468, "lambada": 468, "sweet": 468, "spot": 468, "region": 468, "bigscienc": 468, "560m": 468, "65": [468, 474], "44": [468, 474], "66": [468, 474], "76": [468, 474], "1b7": 468, "71": [468, 474], "43": [468, 474], "67": [468, 474], "78": [468, 470, 474], "56": [468, 474], "58": [468, 474], "55": [468, 474], "3b": 468, "73": [468, 474], "69": [468, 474], "74": [468, 474], "7b1": 468, "77": [468, 474], "46": [468, 474], "17": [468, 474], "82": [468, 474], "52": [468, 474], "facebook": 468, "125m": 468, "41": [468, 474], "70": [468, 474], "94": [468, 470, 474], "79": [468, 469, 474], "60": [468, 474], "81": [468, 474], "26": [468, 474], "39": [468, 474], "68": [468, 470, 474], "eleutherai": [468, 474], "6b": [468, 474], "29": [468, 474], "96": [468, 474], "jason": 468, "emerg": 468, "transact": 468, "yvinec": 468, "edouard": 468, "proceed": 468, "cvf": 468, "winter": 468, "discov": 469, "valuabl": 469, "instrument": 469, "writer": 469, "_pre_eval_hook": 469, "_post_eval_hook": 469, "submodul": 469, "whitelist": 469, "_recordingobserv": 469, "output_tensors_dict": 469, "current_it": 469, "get_tensor_valu": 469, "_observer_forward_hook": 469, "activation_post_process": 469, "_add_observer_": 469, "named_children": 469, "leaf": 469, "add_modul": 469, "register_forward_hook": 469, "dump_tim": 469, "summarywrit": 469, "_acc": 469, "tune_": 469, "add_graph": 469, "get_observer_dict": 469, "observer_dict": 469, "is_quant": 469, "add_histogram": 469, "shell": 469, "bind_al": 469, "logdir_spec": 469, "tune_0_acc0": 469, "tune_1": 469, "tune_1_acc0": 469, "four": 469, "baseline_acc_0": 469, "776": 469, "tune_1_acc_0": 469, "095": 469, "runs_v3": 469, "run_tuning_dump_tensor": 469, "sh": 469, "inceptionv3": 469, "skip": [469, 471], "bash": 469, "run_tun": 469, "topologi": 469, "inception_v3": 469, "inceptionv3_fp32_pretrained_model": 469, "nc_inceptionv3": 469, "inceptionv3_dump_tensor": 469, "poor": 469, "eightbit": 469, "disappear": 469, "centercrop": 470, "randomcrop": 470, "cropres": 470, "decodeimag": 470, "jpeg": 470, "encodejp": 470, "alignimagechannel": 470, "116": 470, "103": 470, "017": 470, "bilinearimagenet": [470, 473], "topilimag": 470, "padding_mod": 470, "border": 470, "pixel": 470, "edg": 470, "colorjitt": 470, "bright": 470, "satur": 470, "hue": 470, "jitter": 470, "tondarrai": 470, "quickli": [471, 472], "human": 471, "concret": 471, "aggress": 471, "classic": 471, "flowchart": 471, "htmllabel": 471, "td": 471, "classdef": 471, "itemstyl": 471, "cce5ff": 471, "stroke": 471, "99ccff": 471, "s1": 471, "s2": 471, "s3": 471, "s4": 471, "s5": 471, "s6": 471, "s7": 471, "nbsp": 471, "subgraphstyl": 471, "ffffff": 471, "attempt": 471, "post_training_auto_qu": 471, "trial": 471, "increment": 471, "primari": 471, "ii": 471, "highest": 471, "spent": 471, "hawq_v2_loss": 471, "model_loss": 471, "black": 471, "come": 471, "compli": 471, "posterior": 471, "focu": 471, "short": 471, "never": 471, "loglevel": 471, "endlessli": 471, "perspect": 471, "smbo": 471, "appl": 471, "surrog": 471, "densiti": 471, "parzen": 471, "greatest": 471, "hour": 471, "dai": 471, "next_tune_cfg": 471, "overridden": 471, "cluster": 471, "seamlessli": 471, "mpi": 471, "replic": 471, "replica": 471, "fed": 471, "synchron": 471, "mpirun": 471, "number_of_process": 471, "run_cmd": 471, "abctunestrategi": 471, "familiar": 472, "notebook": 472, "introduct": 472, "organ": 473, "logic": 473, "mobilenet_v1": 473, "hyper": 473, "40": [473, 474], "06": [473, 474], "beta_1": 473, "beta_2": 473, "epsilon": 473, "sparsecategoricalcrossentropi": 473, "sum_over_batch_s": 473, "from_logit": 473, "54": [473, 474], "19": [473, 474], "1x": 474, "platinum": 474, "8480": 474, "8ghz": 474, "ht": 474, "turbo": 474, "256gb": 474, "16x16gb": 474, "ddr5": 474, "4800": 474, "mt": 474, "bio": 474, "3a14": 474, "tel2p1": 474, "microcod": 474, "0x2b0001b0": 474, "gcc": 474, "20210514": 474, "red": 474, "hat": 474, "visit": 474, "1s4c14ins1bsthroughput": 474, "sec": 474, "2721": 474, "638": 474, "26x": 474, "23": 474, "31": 474, "2123": 474, "552": 474, "84x": 474, "resnet101": 474, "37": 474, "1477": 474, "432": 474, "42x": 474, "incept": 474, "3267": 474, "92": 474, "1266": 474, "03": 474, "58x": 474, "38": 474, "2399": 474, "1098": 474, "18x": 474, "v3": 474, "1593": 474, "508": 474, "13x": 474, "1032": 474, "249": 474, "14x": 474, "34": 474, "427": 474, "185": 474, "30x": 474, "5503": 474, "1791": 474, "62": 474, "07x": 474, "3639": 474, "1864": 474, "95x": 474, "47": 474, "1538": 474, "236": 474, "51x": 474, "vgg19": 474, "1368": 474, "196": 474, "resnetv2": 474, "1105": 474, "657": 474, "68x": 474, "716": 474, "49": 474, "369": 474, "94x": 474, "152": 474, "269": 474, "89x": 474, "densenet": 474, "121": 474, "617": 474, "498": 474, "24x": 474, "161": 474, "372": 474, "242": 474, "54x": 474, "169": 474, "496": 474, "411": 474, "21x": 474, "efficientnet": 474, "b0": 474, "748": 474, "709": 474, "05x": 474, "00": 474, "134": 474, "34x": 474, "1273": 474, "671": 474, "90x": 474, "136": 474, "53": 474, "1235": 474, "477": 474, "09": 474, "179": 474, "85x": 474, "cnn": 474, "79x": 474, "83x": 474, "156": 474, "67x": 474, "23x": 474, "173": 474, "00x": 474, "yolov3": 474, "211": 474, "41x": 474, "82x": 474, "61": 474, "49x": 474, "86": 474, "424": 474, "174": 474, "44x": 474, "29x": 474, "55612": 474, "43479": 474, "28x": 474, "1s56c1ins1bsthroughput": 474, "65x": 474, "gpt2": 474, "2716": 474, "569": 474, "77x": 474, "2683": 474, "476": 474, "64x": 474, "2349": 474, "1035": 474, "27x": 474, "930": 474, "763": 474, "262": 474, "91x": 474, "4003": 474, "1677": 474, "39x": 474, "2766": 474, "36": 474, "2643": 474, "1495": 474, "238": 474, "1372": 474, "199": 474, "88x": 474, "1457": 474, "630": 474, "31x": 474, "842": 474, "338": 474, "645": 474, "231": 474, "938": 474, "707": 474, "33x": 474, "1533": 474, "1258": 474, "22x": 474, "981": 474, "647": 474, "52x": 474, "850": 474, "444": 474, "37x": 474, "543": 474, "74x": 474, "93x": 474, "947": 474, "233": 474, "788": 474, "462": 474, "71x": 474, "15x": 474, "51958": 474, "39974": 474, "1631": 474, "662": 474, "46x": 474, "1162": 474, "330": 474, "968": 474, "334": 474, "resnest50": 474, "394": 474, "resnext101_32x8d": 474, "558": 474, "108": 474, "efficientnet_b0": 474, "703": 474, "656": 474, "efficientnet_b3": 474, "510": 474, "391": 474, "efficientnet_b7": 474, "150": 474, "55x": 474, "peleenet": 474, "857": 474, "585": 474, "yolo": 474, "160": 474, "66x": 474, "141": 474, "407": 474, "camembert": 474, "402": 474, "32x": 474, "343": 474, "804": 474, "352": 474, "17x": 474, "302": 474, "183": 474, "382": 474, "19x": 474, "35x": 474, "51": 474, "414": 474, "stsb": 474, "413": 474, "410": 474, "138": 474, "69x": 474, "385": 474, "76x": 474, "126": 474, "wikitext": 474, "reform": 474, "crime": 474, "punish": 474, "449": 474, "364": 474, "lvwerra": 474, "pegasu": 474, "samsum": 474, "openai": 474, "whisper": 474, "abeja": 474, "neox": 474, "japanes": 474, "1723": 474, "654": 474, "63x": 474, "1141": 474, "306": 474, "73x": 474, "106": 474, "1379": 474, "729": 474, "389": 474, "25x": 474, "1980": 474, "672": 474, "5032": 474, "1500": 474, "resnext101_32x16d_wsl": 474, "533": 474, "36x": 474, "556": 474, "149": 474, "1412": 474, "710": 474, "99x": 474, "1564": 474, "712": 474, "20x": 474, "1377": 474, "719": 474, "1446": 474, "06x": 474, "1579": 474, "747": 474, "11x": 474, "1508": 474, "749": 474, "01x": 474, "6950": 474, "4214": 474, "6881": 474, "4192": 474, "6563": 474, "3804": 474, "6631": 474, "3922": 474, "423": 474, "158": 474, "571": 474, "53x": 474, "598": 474, "163": 474, "594": 474, "164": 474, "62x": 474, "5473": 474, "2567": 474, "5455": 474, "2563": 474, "shufflenet": 474, "6818": 474, "3839": 474, "78x": 474, "5750": 474, "3861": 474, "googlenet": 474, "1783": 474, "1095": 474, "1755": 474, "1071": 474, "squeezenet": 474, "9918": 474, "5639": 474, "9423": 474, "5501": 474, "caffenet": 474, "3363": 474, "1015": 474, "3276": 474, "798": 474, "10x": 474, "2104": 474, "985": 474, "2054": 474, "745": 474, "zfnet": 474, "864": 474, "866": 474, "455": 474, "1802": 474, "1170": 474, "1813": 474, "1164": 474, "56x": 474, "2615": 474, "1349": 474, "2343": 474, "1322": 474, "499": 474, "1288": 474, "878": 474, "47x": 474, "1173": 474, "851": 474, "38x": 474, "1114": 474, "825": 474, "1056": 474, "792": 474, "669": 474, "140": 474, "110": 474, "yolov4": 474, "12x": 474, "duc": 474, "tini": 474, "1163": 474, "993": 474, "ultra": 474, "8501": 474, "1922": 474, "emot": 474, "ferplu": 474, "3552": 474, "3114": 474, "arcfac": 474, "246": 474, "399": 474, "226": 474, "392": 474, "223": 474, "integerop": 474, "474": 474, "222": 474, "557": 474, "963": 474, "529": 474, "603": 474, "398": 474, "187": 474, "96x": 474, "144": 474, "124": 474, "bidaf": 474, "2757": 474, "2279": 474, "lm": 474, "357": 474, "472": 474, "365": 474, "214": 474, "70x": 474, "489": 474, "212": 474, "213": 474, "61x": 474, "270": 474, "215": 474, "491": 474, "l12": 474, "h384": 474, "1051": 474, "583": 474, "80x": 474, "1076": 474, "589": 474, "896": 474, "396": 474, "753": 474, "274": 474, "210": 474, "271": 474, "l6": 474, "1124": 474, "2010": 474, "1127": 474, "401": 474, "494": 474, "electra": 474, "discrimin": 474, "1804": 474, "1154": 474, "1961": 474, "1158": 474, "mini": 474, "4986": 474, "3444": 474, "45x": 474, "5603": 474, "3320": 474, "bart": 474, "deberta": 474, "147": 474, "170": 474, "16x": 474, "spanbert": 474, "multilingu": 474, "159": 474, "distilgpt2": 474, "layoutlm": 474, "funsd": 474, "50x": 474, "layoutlmv3": 474, "fcn": 474, "taskdataset": 474, "accuracyspars": 474, "ratiospars": 474, "commentsbalancedor": 474, "unbalanc": 474, "answeringsquad": 474, "87f1": 474, "momentumunbalanc": 474, "momentumbalanc": 474, "90f1": 474, "59f1": 474, "23f1": 474, "classificationmrpc": 474, "52f1": 474, "26f1": 474, "classificationsst": 474, "61accuraci": 474, "recognitionimagenet": 474, "95top1": 474, "v5s6": 474, "detectioncoco": 474, "ap0": 474, "6ap0": 474, "393": 474, "584": 474, "34f1": 474, "lassounbalanc": 474, "classificationmnli": 474, "mm": 474, "allbalanc": 474, "32accuraci": 474, "sensitivitybalanc": 474, "classificationqqp": 474, "classificationqnli": 474, "54accuraci": 474, "em": 474, "mobilenetv2": 474, "7965": 474, "wideresnet40": 474, "9522": 474, "8178": 474, "0213": 474, "8235": 474, "027": 474, "5494": 474, "7153": 474, "5540": 474, "0046": 474, "5523": 474, "vgg": 474, "bn": 474, "7022": 474, "7415": 474, "7025": 474, "0003": 474, "6739": 474, "7399": 474, "6845": 474, "0106": 474, "blendcnn": 474, "7034": 474, "8382": 474, "bilstm": 474, "8314": 474, "9403": 474, "9048": 474, "0734": 474, "7323": 474, "8256": 474, "8084": 474, "8814": 474, "7442": 474, "8371": 474, "0119": 474, "0115": 474, "tinybert": 474, "8018": 474, "8044": 474, "8363": 474, "8411": 474, "8025": 474, "8074": 474, "0007": 474, "0030": 474, "8626": 474, "8213": 474, "9091": 474, "8782": 474, "8684": 474, "8259": 474, "0058": 474, "distilroberta": 474, "6057": 474, "6455": 474, "6187": 474, "0130": 474, "c6i": 474, "2xlarg": 474, "c6a": 474, "c6g": 474, "a100cuda": 474, "executionprovid": 474}, "objects": {"": [[0, 0, 0, "-", "block_mask"], [317, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[2, 0, 0, "-", "adaptor"], [160, 0, 0, "-", "algorithm"], [163, 0, 0, "-", "benchmark"], [167, 0, 0, "-", "compression"], [181, 0, 0, "-", "conf"], [183, 0, 0, "-", "config"], [184, 0, 0, "-", "contrib"], [209, 0, 0, "-", "data"], [264, 0, 0, "-", "experimental"], [324, 0, 0, "-", "metric"], [326, 0, 0, "-", "mix_precision"], [328, 0, 0, "-", "model"], [336, 0, 0, "-", "objective"], [337, 0, 0, "-", "profiling"], [359, 0, 0, "-", "quantization"], [367, 0, 0, "-", "strategy"], [379, 0, 0, "-", "template"], [380, 0, 0, "-", "training"], [384, 0, 0, "-", "utils"], [393, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[1, 0, 0, "-", "adaptor"], [3, 0, 0, "-", "keras"], [7, 0, 0, "-", "keras_utils"], [11, 0, 0, "-", "mxnet"], [12, 0, 0, "-", "mxnet_utils"], [14, 0, 0, "-", "onnxrt"], [17, 0, 0, "-", "ox_utils"], [44, 0, 0, "-", "pytorch"], [45, 0, 0, "-", "query"], [46, 0, 0, "-", "tensorflow"], [110, 0, 0, "-", "tf_utils"], [150, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[1, 1, 1, "", "Adaptor"], [1, 2, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.keras": [[3, 1, 1, "", "KerasAdaptor"], [3, 1, 1, "", "KerasQuery"]], "neural_compressor.adaptor.keras_utils": [[4, 0, 0, "-", "conv2d"], [5, 0, 0, "-", "dense"], [6, 0, 0, "-", "depthwise_conv2d"], [8, 0, 0, "-", "pool2d"], [9, 0, 0, "-", "quantizer"], [10, 0, 0, "-", "separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, 1, 1, "", "MXNetQuery"], [11, 1, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet_utils": [[13, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, 1, 1, "", "CalibCollector"], [13, 1, 1, "", "CalibData"], [13, 1, 1, "", "CollectorBase"], [13, 1, 1, "", "DataIterLoader"], [13, 1, 1, "", "DataLoaderWrap"], [13, 1, 1, "", "NameCollector"], [13, 1, 1, "", "OpType"], [13, 1, 1, "", "TensorCollector"], [13, 2, 1, "", "amp_convert"], [13, 2, 1, "", "calib_model"], [13, 2, 1, "", "check_mx_version"], [13, 2, 1, "", "combine_capabilities"], [13, 2, 1, "", "create_data_example"], [13, 2, 1, "", "distribute_calib_tensors"], [13, 2, 1, "", "ensure_list"], [13, 2, 1, "", "fuse"], [13, 2, 1, "", "get_framework_name"], [13, 2, 1, "", "is_model_quantized"], [13, 2, 1, "", "isiterable"], [13, 2, 1, "", "make_module"], [13, 2, 1, "", "make_nc_model"], [13, 2, 1, "", "make_symbol_block"], [13, 2, 1, "", "ndarray_to_device"], [13, 2, 1, "", "parse_tune_config"], [13, 2, 1, "", "prepare_dataloader"], [13, 2, 1, "", "prepare_model"], [13, 2, 1, "", "prepare_model_data"], [13, 2, 1, "", "quantize_sym_model"], [13, 2, 1, "", "query_quantizable_nodes"], [13, 2, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[14, 1, 1, "", "ONNXRTQuery"], [14, 1, 1, "", "ONNXRT_IntegerOpsAdaptor"], [14, 1, 1, "", "ONNXRT_QDQAdaptor"], [14, 1, 1, "", "ONNXRT_QLinearOpsAdaptor"], [14, 1, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.ox_utils": [[15, 0, 0, "-", "calibration"], [16, 0, 0, "-", "calibrator"], [29, 0, 0, "-", "operators"], [41, 0, 0, "-", "quantizer"], [42, 0, 0, "-", "smooth_quant"], [43, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, 1, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, 1, 1, "", "CalibratorBase"], [16, 1, 1, "", "HistogramCollector"], [16, 1, 1, "", "KLCalibrator"], [16, 1, 1, "", "MinMaxCalibrator"], [16, 1, 1, "", "PercentileCalibrator"], [16, 2, 1, "", "calib_registry"], [16, 2, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[18, 0, 0, "-", "activation"], [19, 0, 0, "-", "argmax"], [20, 0, 0, "-", "attention"], [21, 0, 0, "-", "binary_op"], [22, 0, 0, "-", "concat"], [23, 0, 0, "-", "conv"], [24, 0, 0, "-", "direct_q8"], [25, 0, 0, "-", "embed_layernorm"], [26, 0, 0, "-", "gather"], [27, 0, 0, "-", "gavgpool"], [28, 0, 0, "-", "gemm"], [30, 0, 0, "-", "lstm"], [31, 0, 0, "-", "matmul"], [32, 0, 0, "-", "maxpool"], [33, 0, 0, "-", "norm"], [34, 0, 0, "-", "ops"], [35, 0, 0, "-", "pad"], [36, 0, 0, "-", "pooling"], [37, 0, 0, "-", "reduce"], [38, 0, 0, "-", "resize"], [39, 0, 0, "-", "split"], [40, 0, 0, "-", "unary_op"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, 1, 1, "", "ActivationOperator"], [18, 1, 1, "", "Float16ActivationOperator"], [18, 1, 1, "", "QActivationOperator"], [18, 1, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, 1, 1, "", "ArgMaxOperator"], [19, 1, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, 1, 1, "", "AttentionOperator"], [20, 1, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, 1, 1, "", "BinaryOperator"], [21, 1, 1, "", "Float16BinaryOperator"], [21, 1, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, 1, 1, "", "ConcatOperator"], [22, 1, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, 1, 1, "", "ConvOperator"], [23, 1, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, 1, 1, "", "Direct8BitOperator"], [24, 1, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, 1, 1, "", "EmbedLayerNormalizationOperator"], [25, 1, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, 1, 1, "", "GatherOperator"], [26, 1, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, 1, 1, "", "GlobalAveragePoolOperator"], [27, 1, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, 1, 1, "", "GemmOperator"], [28, 1, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, 1, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, 1, 1, "", "FusedMatMulOperator"], [31, 1, 1, "", "MatMulOperator"], [31, 1, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, 1, 1, "", "MaxPoolOperator"], [32, 1, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, 1, 1, "", "BatchNormalizationOperator"], [33, 1, 1, "", "NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, 1, 1, "", "Operator"], [34, 1, 1, "", "QOperator"], [34, 2, 1, "", "op_registry"], [34, 2, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, 1, 1, "", "PadOperator"], [35, 1, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, 1, 1, "", "PoolOperator"], [36, 1, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, 1, 1, "", "ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, 1, 1, "", "QResizeOperator"], [38, 1, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, 1, 1, "", "QSplitOperator"], [39, 1, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, 1, 1, "", "UnaryOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, 1, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, 1, 1, "", "ORTSmoothQuant"], [42, 2, 1, "", "get_quant_dequant_output"], [42, 2, 1, "", "make_sub_graph"], [42, 2, 1, "", "quant_dequant_data"]], "neural_compressor.adaptor.ox_utils.util": [[43, 1, 1, "", "QuantFormat"], [43, 1, 1, "", "QuantType"], [43, 1, 1, "", "QuantizationMode"], [43, 1, 1, "", "QuantizedInitializer"], [43, 1, 1, "", "QuantizedValue"], [43, 1, 1, "", "QuantizedValueType"], [43, 1, 1, "", "ValueInfo"], [43, 2, 1, "", "attribute_to_kwarg"], [43, 2, 1, "", "calculate_scale_zp"], [43, 2, 1, "", "cast_tensor"], [43, 2, 1, "", "collate_preds"], [43, 2, 1, "", "dequantize_data"], [43, 2, 1, "", "dequantize_data_with_scale_zero"], [43, 2, 1, "", "dtype_to_name"], [43, 2, 1, "", "find_by_name"], [43, 2, 1, "", "float_to_bfloat16"], [43, 2, 1, "", "float_to_float16"], [43, 2, 1, "", "is_B_transposed"], [43, 2, 1, "", "make_dquant_node"], [43, 2, 1, "", "make_quant_node"], [43, 2, 1, "", "quantize_data"], [43, 2, 1, "", "quantize_data_per_channel"], [43, 2, 1, "", "quantize_data_with_scale_zero"], [43, 2, 1, "", "quantize_nparray"], [43, 2, 1, "", "remove_init_from_model_input"], [43, 2, 1, "", "split_shared_bias"], [43, 2, 1, "", "to_numpy"], [43, 2, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.pytorch": [[44, 1, 1, "", "PyTorchAdaptor"], [44, 1, 1, "", "PyTorchWeightOnlyAdaptor"], [44, 1, 1, "", "PyTorch_FXAdaptor"], [44, 1, 1, "", "PyTorch_IPEXAdaptor"], [44, 1, 1, "", "TemplateAdaptor"], [44, 2, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.query": [[45, 1, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.tensorflow": [[46, 1, 1, "", "TensorFlowAdaptor"], [46, 1, 1, "", "TensorflowQuery"], [46, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[47, 0, 0, "-", "graph_converter"], [48, 0, 0, "-", "graph_converter_without_calib"], [86, 0, 0, "-", "graph_rewriter"], [109, 0, 0, "-", "graph_util"], [111, 0, 0, "-", "quantize_graph"], [138, 0, 0, "-", "quantize_graph_common"], [139, 0, 0, "-", "smooth_quant_calibration"], [140, 0, 0, "-", "smooth_quant_scaler"], [141, 0, 0, "-", "tf2onnx_converter"], [144, 0, 0, "-", "transform_graph"], [147, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, 1, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[50, 0, 0, "-", "bf16"], [75, 0, 0, "-", "generic"], [85, 0, 0, "-", "graph_base"], [94, 0, 0, "-", "int8"], [100, 0, 0, "-", "onnx"], [105, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[49, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, 1, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[51, 0, 0, "-", "convert_add_to_biasadd"], [52, 0, 0, "-", "convert_layout"], [53, 0, 0, "-", "convert_leakyrelu"], [54, 0, 0, "-", "convert_nan_to_random"], [55, 0, 0, "-", "convert_placeholder_to_const"], [56, 0, 0, "-", "dequantize_cast_optimizer"], [57, 0, 0, "-", "dilated_contraction"], [58, 0, 0, "-", "dummy_biasadd"], [59, 0, 0, "-", "expanddims_optimizer"], [60, 0, 0, "-", "fetch_weight_from_reshape"], [61, 0, 0, "-", "fold_batch_norm"], [62, 0, 0, "-", "fold_constant"], [63, 0, 0, "-", "fuse_biasadd_add"], [64, 0, 0, "-", "fuse_column_wise_mul"], [65, 0, 0, "-", "fuse_conv_with_math"], [66, 0, 0, "-", "fuse_decomposed_bn"], [67, 0, 0, "-", "fuse_decomposed_in"], [68, 0, 0, "-", "fuse_gelu"], [69, 0, 0, "-", "fuse_layer_norm"], [70, 0, 0, "-", "fuse_pad_with_conv"], [71, 0, 0, "-", "fuse_pad_with_fp32_conv"], [72, 0, 0, "-", "fuse_reshape_transpose"], [73, 0, 0, "-", "graph_cse_optimizer"], [74, 0, 0, "-", "grappler_pass"], [76, 0, 0, "-", "insert_print_node"], [77, 0, 0, "-", "move_squeeze_after_relu"], [78, 0, 0, "-", "pre_optimize"], [79, 0, 0, "-", "remove_training_nodes"], [80, 0, 0, "-", "rename_batch_norm"], [81, 0, 0, "-", "split_shared_input"], [82, 0, 0, "-", "strip_equivalent_nodes"], [83, 0, 0, "-", "strip_unused_nodes"], [84, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, 1, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, 1, 1, "", "FuseDecomposedBNOptimizer"], [66, 2, 1, "", "bypass_reshape"], [66, 2, 1, "", "get_const_dim_count"], [66, 2, 1, "", "node_from_map"], [66, 2, 1, "", "node_name_from_input"], [66, 2, 1, "", "valid_reshape_inputs"], [66, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, 1, 1, "", "FuseDecomposedINOptimizer"], [67, 2, 1, "", "bypass_reshape"], [67, 2, 1, "", "get_const_dim_count"], [67, 2, 1, "", "node_from_map"], [67, 2, 1, "", "node_name_from_input"], [67, 2, 1, "", "valid_reshape_inputs"], [67, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, 1, 1, "", "FuseLayerNormOptimizer"], [69, 2, 1, "", "node_from_map"], [69, 2, 1, "", "node_name_from_input"], [69, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, 1, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[87, 0, 0, "-", "freeze_fake_quant"], [88, 0, 0, "-", "freeze_value"], [89, 0, 0, "-", "freeze_value_without_calib"], [90, 0, 0, "-", "fuse_conv_redundant_dequantize"], [91, 0, 0, "-", "fuse_conv_requantize"], [92, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [93, 0, 0, "-", "fuse_matmul_requantize"], [95, 0, 0, "-", "meta_op_optimizer"], [96, 0, 0, "-", "post_hostconst_converter"], [97, 0, 0, "-", "post_quantized_op_cse"], [98, 0, 0, "-", "rnn_convert"], [99, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [93, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [93, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [93, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, 0, 0, "-", "onnx_graph"], [102, 0, 0, "-", "onnx_node"], [103, 0, 0, "-", "onnx_schema"], [104, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, 1, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, 1, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, 1, 1, "", "OnnxOpSchema"], [103, 2, 1, "", "get_max_supported_opset_version"], [103, 2, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, 1, 1, "", "SeqType"], [104, 2, 1, "", "add_port_to_name"], [104, 2, 1, "", "are_shapes_equal"], [104, 2, 1, "", "assert_error"], [104, 2, 1, "", "compute_const_folding_using_tf"], [104, 2, 1, "", "convert_tensorflow_tensor_to_onnx"], [104, 2, 1, "", "find_opset"], [104, 2, 1, "", "get_index_from_strided_slice_of_shape"], [104, 2, 1, "", "get_subgraphs_from_onnx"], [104, 2, 1, "", "get_tensorflow_node_attr"], [104, 2, 1, "", "get_tensorflow_node_shape_attr"], [104, 2, 1, "", "get_tensorflow_tensor_data"], [104, 2, 1, "", "get_tensorflow_tensor_shape"], [104, 2, 1, "", "infer_onnx_shape_dtype"], [104, 2, 1, "", "initialize_name_counter"], [104, 2, 1, "", "is_list_or_tuple"], [104, 2, 1, "", "is_onnx_domain"], [104, 2, 1, "", "make_onnx_inputs_outputs"], [104, 2, 1, "", "make_onnx_shape"], [104, 2, 1, "", "map_numpy_to_onnx_dtype"], [104, 2, 1, "", "map_onnx_to_numpy_type"], [104, 2, 1, "", "map_tensorflow_dtype"], [104, 2, 1, "", "read_tensorflow_node_attrs"], [104, 2, 1, "", "save_protobuf"], [104, 2, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, 0, 0, "-", "insert_qdq_pattern"], [107, 0, 0, "-", "merge_duplicated_qdq"], [108, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, 1, 1, "", "GraphAnalyzer"], [109, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[113, 0, 0, "-", "qat"], [129, 0, 0, "-", "qdq"], [131, 0, 0, "-", "quantize_graph_base"], [132, 0, 0, "-", "quantize_graph_bn"], [133, 0, 0, "-", "quantize_graph_concatv2"], [134, 0, 0, "-", "quantize_graph_conv"], [135, 0, 0, "-", "quantize_graph_for_intel_cpu"], [136, 0, 0, "-", "quantize_graph_matmul"], [137, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[112, 0, 0, "-", "fake_quantize"], [114, 0, 0, "-", "quantize_config"], [115, 0, 0, "-", "quantize_helper"], [116, 0, 0, "-", "quantize_layers"], [121, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, 1, 1, "", "FakeQuantize"], [112, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, 1, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, 2, 1, "", "init_quantize_config"], [115, 2, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, 0, 0, "-", "optimize_layer"], [118, 0, 0, "-", "quantize_layer_add"], [119, 0, 0, "-", "quantize_layer_base"], [120, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, 1, 1, "", "QuantizeWrapper"], [121, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[122, 0, 0, "-", "fuse_qdq_bn"], [123, 0, 0, "-", "fuse_qdq_concatv2"], [124, 0, 0, "-", "fuse_qdq_conv"], [125, 0, 0, "-", "fuse_qdq_deconv"], [126, 0, 0, "-", "fuse_qdq_in"], [127, 0, 0, "-", "fuse_qdq_matmul"], [128, 0, 0, "-", "fuse_qdq_pooling"], [130, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, 1, 1, "", "QuantizeGraphBase"], [131, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[139, 1, 1, "", "SmoothQuantCalibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[140, 1, 1, "", "SmoothQuantScaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[141, 1, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[142, 0, 0, "-", "bias_correction"], [143, 0, 0, "-", "graph_transform_base"], [145, 0, 0, "-", "insert_logging"], [146, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[142, 1, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[143, 1, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[145, 1, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[146, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[147, 2, 1, "", "collate_tf_preds"], [147, 2, 1, "", "disable_random"], [147, 2, 1, "", "fix_ref_type_of_graph_def"], [147, 2, 1, "", "generate_feed_dict"], [147, 2, 1, "", "get_estimator_graph"], [147, 2, 1, "", "get_graph_def"], [147, 2, 1, "", "get_input_output_node_names"], [147, 2, 1, "", "get_model_input_shape"], [147, 2, 1, "", "get_tensor_by_name"], [147, 2, 1, "", "get_tensor_val_from_graph_node"], [147, 2, 1, "", "get_weight_from_input_tensor"], [147, 2, 1, "", "int8_node_name_reverse"], [147, 2, 1, "", "is_ckpt_format"], [147, 2, 1, "", "is_saved_model_format"], [147, 2, 1, "", "iterator_sess_run"], [147, 2, 1, "", "read_graph"], [147, 2, 1, "", "strip_equivalent_nodes"], [147, 2, 1, "", "strip_unused_nodes"], [147, 2, 1, "", "tf_diagnosis_helper"], [147, 2, 1, "", "version1_eq_version2"], [147, 2, 1, "", "version1_gt_version2"], [147, 2, 1, "", "version1_gte_version2"], [147, 2, 1, "", "version1_lt_version2"], [147, 2, 1, "", "version1_lte_version2"], [147, 2, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[148, 0, 0, "-", "bf16_convert"], [149, 0, 0, "-", "hawq_metric"], [151, 0, 0, "-", "mixed_precision"], [152, 0, 0, "-", "model_wrapper"], [153, 0, 0, "-", "pattern_detector"], [154, 0, 0, "-", "smooth_quant"], [155, 0, 0, "-", "symbolic_trace"], [156, 0, 0, "-", "util"], [157, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[148, 1, 1, "", "BF16ModuleWrapper"], [148, 2, 1, "", "Convert"], [148, 2, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[149, 1, 1, "", "HessianTrace"], [149, 1, 1, "", "Node_collector"], [149, 2, 1, "", "compare_weights"], [149, 2, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[151, 2, 1, "", "ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[153, 1, 1, "", "TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[154, 1, 1, "", "GraphTrace"], [154, 1, 1, "", "TorchSmoothQuant"], [154, 2, 1, "", "get_module"], [154, 2, 1, "", "set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[155, 2, 1, "", "symbolic_trace"], [155, 2, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.util": [[156, 2, 1, "", "append_attr"], [156, 2, 1, "", "auto_copy"], [156, 2, 1, "", "calculate_quant_min_max"], [156, 2, 1, "", "check_cfg_and_qconfig"], [156, 2, 1, "", "collate_torch_preds"], [156, 2, 1, "", "collect_weight_info"], [156, 2, 1, "", "fetch_module"], [156, 2, 1, "", "generate_activation_observer"], [156, 2, 1, "", "get_depth"], [156, 2, 1, "", "get_dict_at_depth"], [156, 2, 1, "", "get_element_under_depth"], [156, 2, 1, "", "get_embedding_contiguous"], [156, 2, 1, "", "get_example_input"], [156, 2, 1, "", "get_fallback_order"], [156, 2, 1, "", "get_mse_order_per_fp32"], [156, 2, 1, "", "get_mse_order_per_int8"], [156, 2, 1, "", "get_op_type_by_name"], [156, 2, 1, "", "get_quantizable_ops_from_cfgs"], [156, 2, 1, "", "get_torch_version"], [156, 2, 1, "", "input2tuple"], [156, 2, 1, "", "is_fused_module"], [156, 2, 1, "", "match_datatype_pattern"], [156, 2, 1, "", "paser_cfgs"], [156, 2, 1, "", "set_module"], [156, 2, 1, "", "simple_inference"], [156, 2, 1, "", "update_sq_scale"]], "neural_compressor.adaptor.torch_utils.weight_only": [[157, 2, 1, "", "awq_quantize"], [157, 2, 1, "", "get_module_input_output"], [157, 2, 1, "", "qdq_weight_actor"], [157, 2, 1, "", "qdq_weight_asym"], [157, 2, 1, "", "qdq_weight_sym"], [157, 2, 1, "", "quant_weight"], [157, 2, 1, "", "rtn_quantize"]], "neural_compressor.algorithm": [[158, 0, 0, "-", "algorithm"], [159, 0, 0, "-", "fast_bias_correction"], [161, 0, 0, "-", "smooth_quant"], [162, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[158, 1, 1, "", "ALGORITHMS"], [158, 1, 1, "", "Algorithm"], [158, 1, 1, "", "AlgorithmScheduler"], [158, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[159, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[161, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[162, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[163, 2, 1, "", "benchmark_with_raw_cmd"], [163, 2, 1, "", "call_one"], [163, 2, 1, "", "config_instance"], [163, 2, 1, "", "fit"], [163, 2, 1, "", "generate_prefix"], [163, 2, 1, "", "get_architecture"], [163, 2, 1, "", "get_bounded_threads"], [163, 2, 1, "", "get_core_ids"], [163, 2, 1, "", "get_physical_ids"], [163, 2, 1, "", "get_threads"], [163, 2, 1, "", "get_threads_per_core"], [163, 2, 1, "", "profile"], [163, 2, 1, "", "run_instance"], [163, 2, 1, "", "set_all_env_var"], [163, 2, 1, "", "set_env_var"], [163, 2, 1, "", "summary_benchmark"]], "neural_compressor.compression": [[164, 0, 0, "-", "callbacks"], [166, 0, 0, "-", "distillation"], [169, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[164, 1, 1, "", "BaseCallbacks"], [164, 1, 1, "", "DistillationCallbacks"], [164, 1, 1, "", "PruningCallbacks"], [164, 1, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[164, 3, 1, "", "_epoch_ran"], [164, 3, 1, "", "best_model"], [164, 3, 1, "", "best_score"], [164, 3, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[165, 0, 0, "-", "criterions"]], "neural_compressor.compression.distillation.criterions": [[165, 1, 1, "", "Criterions"], [165, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [165, 1, 1, "", "KnowledgeDistillationFramework"], [165, 1, 1, "", "KnowledgeDistillationLoss"], [165, 1, 1, "", "PyTorchCriterions"], [165, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [165, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [165, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [165, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [165, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [165, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [165, 1, 1, "", "SelfKnowledgeDistillationLoss"], [165, 1, 1, "", "TensorflowCriterions"], [165, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [165, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [165, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [165, 2, 1, "", "criterion_registry"]], "neural_compressor.compression.pruner": [[168, 0, 0, "-", "criteria"], [171, 0, 0, "-", "model_slim"], [174, 0, 0, "-", "patterns"], [175, 0, 0, "-", "pruners"], [176, 0, 0, "-", "regs"], [177, 0, 0, "-", "schedulers"], [178, 0, 0, "-", "utils"]], "neural_compressor.compression.pruner.criteria": [[168, 1, 1, "", "GradientCriterion"], [168, 1, 1, "", "MagnitudeCriterion"], [168, 1, 1, "", "PruningCriterion"], [168, 1, 1, "", "RetrainFreeCriterion"], [168, 1, 1, "", "SnipCriterion"], [168, 1, 1, "", "SnipMomentumBlockCriterion"], [168, 1, 1, "", "SnipMomentumCriterion"], [168, 2, 1, "", "get_criterion"], [168, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[168, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[168, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[168, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[168, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[168, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion": [[168, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[168, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.model_slim": [[170, 0, 0, "-", "auto_slim"], [172, 0, 0, "-", "pattern_analyzer"], [173, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[170, 2, 1, "", "generate_ffn2_pruning_config"], [170, 2, 1, "", "generate_mha_pruning_config"], [170, 2, 1, "", "model_slim"], [170, 2, 1, "", "model_slim_ffn2"], [170, 2, 1, "", "model_slim_mha"], [170, 2, 1, "", "parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[172, 1, 1, "", "ClassifierHeadSearcher"], [172, 1, 1, "", "ClassifierHeadSearcherTF"], [172, 1, 1, "", "JitBasicSearcher"], [172, 1, 1, "", "Linear2LinearSearcher"], [172, 1, 1, "", "RecipeSearcher"], [172, 1, 1, "", "SelfMHASearcher"], [172, 2, 1, "", "get_attributes"], [172, 2, 1, "", "get_common_module"], [172, 2, 1, "", "print_iterables"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher": [[172, 3, 1, "", "device"], [172, 3, 1, "", "flatten_static_graph"], [172, 3, 1, "", "model"], [172, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF": [[172, 3, 1, "", "device"], [172, 3, 1, "", "flatten_static_graph"], [172, 3, 1, "", "model"], [172, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[172, 3, 1, "", "device"], [172, 3, 1, "", "flatten_static_graph"], [172, 3, 1, "", "model"], [172, 3, 1, "", "searching_results"], [172, 3, 1, "", "static_graph"], [172, 3, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[172, 3, 1, "", "current_pattern"], [172, 3, 1, "", "device"], [172, 3, 1, "", "flatten_static_graph"], [172, 3, 1, "", "model"], [172, 3, 1, "", "searching_results"], [172, 3, 1, "", "static_graph"], [172, 3, 1, "", "target_layers"], [172, 3, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[172, 3, 1, "", "model"], [172, 3, 1, "", "recipe"], [172, 3, 1, "", "searching_results"], [172, 3, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[172, 3, 1, "", "device"], [172, 3, 1, "", "flatten_static_graph"], [172, 3, 1, "", "model"], [172, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[173, 1, 1, "", "LinearCompression"], [173, 1, 1, "", "LinearCompressionIterator"], [173, 1, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[173, 3, 1, "", "device"], [173, 3, 1, "", "layer_1"], [173, 3, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[173, 3, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[174, 1, 1, "", "BasePattern"], [174, 1, 1, "", "PatternMHA"], [174, 1, 1, "", "PatternNInM"], [174, 1, 1, "", "PatternNxM"], [174, 2, 1, "", "get_pattern"], [174, 2, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.BasePattern": [[174, 3, 1, "", "config"], [174, 3, 1, "", "invalid_layers"], [174, 3, 1, "", "is_global"], [174, 3, 1, "", "keep_mask_layers"], [174, 3, 1, "", "max_sparsity_ratio_per_op"], [174, 3, 1, "", "min_sparsity_ratio_per_op"], [174, 3, 1, "", "modules"], [174, 3, 1, "", "pattern"], [174, 3, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.PatternMHA": [[174, 3, 1, "", "M"], [174, 3, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.PatternNInM": [[174, 3, 1, "", "M"], [174, 3, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.PatternNxM": [[174, 3, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[175, 1, 1, "", "BasePruner"], [175, 1, 1, "", "BasicPruner"], [175, 1, 1, "", "BlockMaskPruner"], [175, 1, 1, "", "MultiheadAttentionPruner"], [175, 1, 1, "", "PatternLockPruner"], [175, 1, 1, "", "ProgressivePruner"], [175, 1, 1, "", "RetrainFreePruner"], [175, 2, 1, "", "get_pruner"], [175, 2, 1, "", "parse_valid_pruner_types"], [175, 2, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.BasePruner": [[175, 3, 1, "", "config"], [175, 3, 1, "", "current_sparsity_ratio"], [175, 3, 1, "", "end_step"], [175, 3, 1, "", "global_step"], [175, 3, 1, "", "masks"], [175, 3, 1, "", "max_sparsity_ratio_per_op"], [175, 3, 1, "", "modules"], [175, 3, 1, "", "pattern"], [175, 3, 1, "", "pruning_frequency"], [175, 3, 1, "", "scheduler"], [175, 3, 1, "", "scores"], [175, 3, 1, "", "start_step"], [175, 3, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.BasicPruner": [[175, 3, 1, "", "criterion"], [175, 3, 1, "", "pattern"], [175, 3, 1, "", "reg"], [175, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.BlockMaskPruner": [[175, 3, 1, "", "criterion"], [175, 3, 1, "", "pattern"], [175, 3, 1, "", "reg"], [175, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.MultiheadAttentionPruner": [[175, 3, 1, "", "head_masks"], [175, 3, 1, "", "linear_layers"], [175, 3, 1, "", "mha_compressions"], [175, 3, 1, "", "mha_scores"]], "neural_compressor.compression.pruner.pruners.RetrainFreePruner": [[175, 3, 1, "", "criterion"], [175, 3, 1, "", "pattern"], [175, 3, 1, "", "reg"], [175, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.regs": [[176, 1, 1, "", "BaseReg"], [176, 1, 1, "", "GroupLasso"], [176, 2, 1, "", "get_reg"], [176, 2, 1, "", "get_reg_type"], [176, 2, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[176, 3, 1, "", "alpha"], [176, 3, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[177, 1, 1, "", "IterativeScheduler"], [177, 1, 1, "", "OneshotScheduler"], [177, 1, 1, "", "PruningScheduler"], [177, 2, 1, "", "get_scheduler"], [177, 2, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[177, 3, 1, "", "config"]], "neural_compressor.compression.pruner.utils": [[178, 2, 1, "", "check_config"], [178, 2, 1, "", "check_key_validity"], [178, 2, 1, "", "generate_pruner_config"], [178, 2, 1, "", "get_sparsity_ratio"], [178, 2, 1, "", "get_sparsity_ratio_tf"], [178, 2, 1, "", "parse_last_linear"], [178, 2, 1, "", "parse_last_linear_tf"], [178, 2, 1, "", "parse_to_prune"], [178, 2, 1, "", "parse_to_prune_tf"], [178, 2, 1, "", "process_and_check_config"], [178, 2, 1, "", "process_config"], [178, 2, 1, "", "process_weight_config"], [178, 2, 1, "", "process_yaml_config"], [178, 2, 1, "", "reset_none_to_default"], [178, 2, 1, "", "update_params"]], "neural_compressor.conf": [[179, 0, 0, "-", "config"], [180, 0, 0, "-", "dotdict"], [182, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[179, 1, 1, "", "Benchmark_Conf"], [179, 1, 1, "", "Conf"], [179, 1, 1, "", "Distillation_Conf"], [179, 1, 1, "", "Graph_Optimization_Conf"], [179, 1, 1, "", "MixedPrecision_Conf"], [179, 1, 1, "", "NASConfig"], [179, 1, 1, "", "PrunerV2"], [179, 1, 1, "", "Pruning_Conf"], [179, 1, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[180, 1, 1, "", "DotDict"], [180, 2, 1, "", "deep_get"], [180, 2, 1, "", "deep_set"]], "neural_compressor.conf.pythonic_config": [[182, 1, 1, "", "AccuracyCriterion"], [182, 1, 1, "", "BenchmarkConfig"], [182, 1, 1, "", "DistillationConfig"], [182, 1, 1, "", "KnowledgeDistillationLossConfig"], [182, 1, 1, "", "Options"], [182, 1, 1, "", "QuantizationConfig"], [182, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.config": [[183, 1, 1, "", "AccuracyCriterion"], [183, 1, 1, "", "BenchmarkConfig"], [183, 1, 1, "", "DistillationConfig"], [183, 1, 1, "", "DotDict"], [183, 1, 1, "", "ExportConfig"], [183, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [183, 1, 1, "", "Keras"], [183, 1, 1, "", "KnowledgeDistillationLossConfig"], [183, 1, 1, "", "MXNet"], [183, 1, 1, "", "MixedPrecisionConfig"], [183, 1, 1, "", "NASConfig"], [183, 1, 1, "", "ONNX"], [183, 1, 1, "", "ONNXQlinear2QDQConfig"], [183, 1, 1, "", "Options"], [183, 1, 1, "", "PostTrainingQuantConfig"], [183, 1, 1, "", "PyTorch"], [183, 1, 1, "", "QuantizationAwareTrainingConfig"], [183, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [183, 1, 1, "", "TF2ONNXConfig"], [183, 1, 1, "", "TensorFlow"], [183, 1, 1, "", "Torch2ONNXConfig"], [183, 1, 1, "", "TuningCriterion"], [183, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[185, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[186, 0, 0, "-", "sigopt"], [187, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[186, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[187, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[192, 0, 0, "-", "dataloaders"], [204, 0, 0, "-", "datasets"], [208, 0, 0, "-", "filters"], [212, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[188, 0, 0, "-", "base_dataloader"], [189, 0, 0, "-", "dataloader"], [190, 0, 0, "-", "default_dataloader"], [191, 0, 0, "-", "fetcher"], [193, 0, 0, "-", "mxnet_dataloader"], [194, 0, 0, "-", "onnxrt_dataloader"], [195, 0, 0, "-", "pytorch_dataloader"], [196, 0, 0, "-", "sampler"], [197, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[188, 1, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[189, 1, 1, "", "DataLoader"], [189, 2, 1, "", "check_dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[190, 1, 1, "", "DefaultDataLoader"], [190, 2, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[191, 1, 1, "", "Fetcher"], [191, 1, 1, "", "IndexFetcher"], [191, 1, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[193, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[194, 1, 1, "", "ONNXRTBertDataLoader"], [194, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[195, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[196, 1, 1, "", "BatchSampler"], [196, 1, 1, "", "IterableSampler"], [196, 1, 1, "", "Sampler"], [196, 1, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[197, 1, 1, "", "TFDataDataLoader"], [197, 1, 1, "", "TensorflowBertDataLoader"], [197, 1, 1, "", "TensorflowDataLoader"], [197, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[198, 0, 0, "-", "bert_dataset"], [199, 0, 0, "-", "coco_dataset"], [200, 0, 0, "-", "dataset"], [201, 0, 0, "-", "dummy_dataset"], [202, 0, 0, "-", "dummy_dataset_v2"], [203, 0, 0, "-", "imagenet_dataset"], [205, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[198, 1, 1, "", "InputFeatures"], [198, 1, 1, "", "ONNXRTBertDataset"], [198, 1, 1, "", "ParseDecodeBert"], [198, 1, 1, "", "PytorchBertDataset"], [198, 1, 1, "", "TensorflowBertDataset"], [198, 1, 1, "", "TensorflowModelZooBertDataset"], [198, 2, 1, "", "convert_examples_to_features"], [198, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[199, 1, 1, "", "COCONpy"], [199, 1, 1, "", "COCORaw"], [199, 1, 1, "", "COCORecordDataset"], [199, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[200, 1, 1, "", "CIFAR10"], [200, 1, 1, "", "CIFAR100"], [200, 1, 1, "", "Dataset"], [200, 1, 1, "", "Datasets"], [200, 1, 1, "", "FashionMNIST"], [200, 1, 1, "", "ImageFolder"], [200, 1, 1, "", "IterableDataset"], [200, 1, 1, "", "MNIST"], [200, 1, 1, "", "MXNetCIFAR10"], [200, 1, 1, "", "MXNetCIFAR100"], [200, 1, 1, "", "MXNetDatasets"], [200, 1, 1, "", "MXNetFashionMNIST"], [200, 1, 1, "", "MXNetImageFolder"], [200, 1, 1, "", "MXNetMNIST"], [200, 1, 1, "", "ONNXRTITDatasets"], [200, 1, 1, "", "ONNXRTQLDatasets"], [200, 1, 1, "", "PyTorchDatasets"], [200, 1, 1, "", "PytorchCIFAR10"], [200, 1, 1, "", "PytorchCIFAR100"], [200, 1, 1, "", "PytorchFashionMNIST"], [200, 1, 1, "", "PytorchMNIST"], [200, 1, 1, "", "PytorchMxnetWrapDataset"], [200, 1, 1, "", "PytorchMxnetWrapFunction"], [200, 1, 1, "", "Tensorflow"], [200, 1, 1, "", "TensorflowCIFAR10"], [200, 1, 1, "", "TensorflowCIFAR100"], [200, 1, 1, "", "TensorflowDatasets"], [200, 1, 1, "", "TensorflowFashionMNIST"], [200, 1, 1, "", "TensorflowImageRecord"], [200, 1, 1, "", "TensorflowMNIST"], [200, 1, 1, "", "TensorflowTFRecordDataset"], [200, 1, 1, "", "TensorflowVOCRecord"], [200, 2, 1, "", "calculate_md5"], [200, 2, 1, "", "check_integrity"], [200, 2, 1, "", "dataset_registry"], [200, 2, 1, "", "download_url"], [200, 4, 1, "", "framework_datasets"], [200, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[201, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[202, 1, 1, "", "DummyDataset"], [202, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[203, 1, 1, "", "ImagenetRaw"], [203, 1, 1, "", "MXNetImagenetRaw"], [203, 1, 1, "", "ONNXRTImagenetDataset"], [203, 1, 1, "", "PytorchImagenetRaw"], [203, 1, 1, "", "TensorflowImagenetDataset"], [203, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[205, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[206, 0, 0, "-", "coco_filter"], [207, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[206, 1, 1, "", "LabelBalanceCOCORawFilter"], [206, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[207, 1, 1, "", "FILTERS"], [207, 1, 1, "", "Filter"], [207, 1, 1, "", "MXNetFilters"], [207, 1, 1, "", "ONNXRTITFilters"], [207, 1, 1, "", "ONNXRTQLFilters"], [207, 1, 1, "", "PyTorchFilters"], [207, 1, 1, "", "TensorflowFilters"], [207, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[210, 0, 0, "-", "coco_transform"], [211, 0, 0, "-", "imagenet_transform"], [213, 0, 0, "-", "postprocess"], [214, 0, 0, "-", "tokenization"], [215, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.coco_transform": [[210, 1, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[211, 1, 1, "", "BilinearImagenetTransform"], [211, 1, 1, "", "LabelShift"], [211, 1, 1, "", "ONNXResizeCropImagenetTransform"], [211, 1, 1, "", "OnnxBilinearImagenetTransform"], [211, 1, 1, "", "ParseDecodeImagenet"], [211, 1, 1, "", "ParseDecodeImagenetTransform"], [211, 1, 1, "", "QuantizedInput"], [211, 1, 1, "", "ResizeWithAspectRatio"], [211, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [211, 1, 1, "", "TensorflowShiftRescale"], [211, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[213, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[214, 1, 1, "", "BasicTokenizer"], [214, 1, 1, "", "FullTokenizer"], [214, 1, 1, "", "WordpieceTokenizer"], [214, 2, 1, "", "convert_by_vocab"], [214, 2, 1, "", "convert_to_unicode"], [214, 2, 1, "", "load_vocab"], [214, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[215, 1, 1, "", "AlignImageChannelTransform"], [215, 1, 1, "", "BaseTransform"], [215, 1, 1, "", "CastONNXTransform"], [215, 1, 1, "", "CastPyTorchTransform"], [215, 1, 1, "", "CastTFTransform"], [215, 1, 1, "", "CenterCropTFTransform"], [215, 1, 1, "", "CenterCropTransform"], [215, 1, 1, "", "CollectTransform"], [215, 1, 1, "", "ComposeTransform"], [215, 1, 1, "", "CropResizeTFTransform"], [215, 1, 1, "", "CropResizeTransform"], [215, 1, 1, "", "CropToBoundingBox"], [215, 1, 1, "", "InputFeatures"], [215, 1, 1, "", "MXNetCropResizeTransform"], [215, 1, 1, "", "MXNetCropToBoundingBox"], [215, 1, 1, "", "MXNetNormalizeTransform"], [215, 1, 1, "", "MXNetTransforms"], [215, 1, 1, "", "MXNetTranspose"], [215, 1, 1, "", "NormalizeTFTransform"], [215, 1, 1, "", "NormalizeTransform"], [215, 1, 1, "", "ONNXRTCropToBoundingBox"], [215, 1, 1, "", "ONNXRTITTransforms"], [215, 1, 1, "", "ONNXRTQLTransforms"], [215, 1, 1, "", "PaddedCenterCropTransform"], [215, 1, 1, "", "ParseDecodeVocTransform"], [215, 1, 1, "", "PyTorchAlignImageChannel"], [215, 1, 1, "", "PyTorchCropResizeTransform"], [215, 1, 1, "", "PyTorchNormalizeTransform"], [215, 1, 1, "", "PyTorchTransforms"], [215, 1, 1, "", "PyTorchTranspose"], [215, 1, 1, "", "PytorchMxnetTransform"], [215, 1, 1, "", "PytorchMxnetWrapFunction"], [215, 1, 1, "", "RandomCropTFTransform"], [215, 1, 1, "", "RandomCropTransform"], [215, 1, 1, "", "RandomHorizontalFlip"], [215, 1, 1, "", "RandomResizedCropMXNetTransform"], [215, 1, 1, "", "RandomResizedCropPytorchTransform"], [215, 1, 1, "", "RandomResizedCropTFTransform"], [215, 1, 1, "", "RandomResizedCropTransform"], [215, 1, 1, "", "RandomVerticalFlip"], [215, 1, 1, "", "RescaleKerasPretrainTransform"], [215, 1, 1, "", "RescaleTFTransform"], [215, 1, 1, "", "RescaleTransform"], [215, 1, 1, "", "ResizeMXNetTransform"], [215, 1, 1, "", "ResizePytorchTransform"], [215, 1, 1, "", "ResizeTFTransform"], [215, 1, 1, "", "ResizeTransform"], [215, 1, 1, "", "ResizeWithRatio"], [215, 1, 1, "", "SquadExample"], [215, 1, 1, "", "TFModelZooCollectTransform"], [215, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [215, 1, 1, "", "TFSquadV1PostTransform"], [215, 1, 1, "", "TRANSFORMS"], [215, 1, 1, "", "TensorflowCropToBoundingBox"], [215, 1, 1, "", "TensorflowRandomHorizontalFlip"], [215, 1, 1, "", "TensorflowRandomVerticalFlip"], [215, 1, 1, "", "TensorflowResizeWithRatio"], [215, 1, 1, "", "TensorflowTransform"], [215, 1, 1, "", "TensorflowTransforms"], [215, 1, 1, "", "TensorflowTranspose"], [215, 1, 1, "", "TensorflowWrapFunction"], [215, 1, 1, "", "ToArray"], [215, 1, 1, "", "ToNDArrayTransform"], [215, 1, 1, "", "Transforms"], [215, 1, 1, "", "Transpose"], [215, 2, 1, "", "convert_examples_to_features"], [215, 2, 1, "", "get_final_text"], [215, 2, 1, "", "get_torchvision_map"], [215, 2, 1, "", "read_squad_examples"], [215, 2, 1, "", "transform_registry"]], "neural_compressor.experimental": [[216, 0, 0, "-", "benchmark"], [219, 0, 0, "-", "common"], [225, 0, 0, "-", "component"], [226, 0, 0, "-", "compression"], [228, 0, 0, "-", "contrib"], [253, 0, 0, "-", "data"], [258, 0, 0, "-", "distillation"], [259, 0, 0, "-", "export"], [263, 0, 0, "-", "graph_optimization"], [271, 0, 0, "-", "metric"], [273, 0, 0, "-", "mixed_precision"], [274, 0, 0, "-", "model_conversion"], [277, 0, 0, "-", "nas"], [283, 0, 0, "-", "pruner_legacy"], [287, 0, 0, "-", "pruning"], [288, 0, 0, "-", "pruning_recipes"], [292, 0, 0, "-", "pruning_v2"], [293, 0, 0, "-", "pytorch_pruner"], [300, 0, 0, "-", "quantization"], [301, 0, 0, "-", "scheduler"], [306, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[216, 1, 1, "", "Benchmark"], [216, 2, 1, "", "get_architecture"], [216, 2, 1, "", "get_bounded_threads"], [216, 2, 1, "", "get_core_ids"], [216, 2, 1, "", "get_physical_ids"], [216, 2, 1, "", "get_threads"], [216, 2, 1, "", "get_threads_per_core"], [216, 2, 1, "", "set_all_env_var"], [216, 2, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[217, 0, 0, "-", "criterion"], [218, 0, 0, "-", "dataloader"], [220, 0, 0, "-", "metric"], [221, 0, 0, "-", "model"], [222, 0, 0, "-", "optimizer"], [223, 0, 0, "-", "postprocess"], [224, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[217, 1, 1, "", "Criterions"], [217, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [217, 1, 1, "", "KnowledgeDistillationFramework"], [217, 1, 1, "", "KnowledgeDistillationLoss"], [217, 1, 1, "", "PyTorchCriterions"], [217, 1, 1, "", "PyTorchCrossEntropyLoss"], [217, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [217, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [217, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [217, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [217, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [217, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [217, 1, 1, "", "SelfKnowledgeDistillationLoss"], [217, 1, 1, "", "TensorFlowCrossEntropyLoss"], [217, 1, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [217, 1, 1, "", "TensorflowCriterions"], [217, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [217, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [217, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [217, 2, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[218, 1, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[220, 1, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[221, 1, 1, "", "Model"], [221, 2, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[222, 1, 1, "", "Optimizers"], [222, 1, 1, "", "PyTorchOptimizers"], [222, 1, 1, "", "PyTorchSGD"], [222, 1, 1, "", "TensorFlowAdam"], [222, 1, 1, "", "TensorFlowAdamW"], [222, 1, 1, "", "TensorFlowSGD"], [222, 1, 1, "", "TensorflowOptimizers"], [222, 2, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[223, 1, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[224, 2, 1, "", "get_activation"], [224, 2, 1, "", "record_output"]], "neural_compressor.experimental.component": [[225, 1, 1, "", "Component"]], "neural_compressor.experimental.compression": [[227, 0, 0, "-", "pruning"]], "neural_compressor.experimental.compression.pruning": [[227, 2, 1, "", "prepare_pruning"], [227, 2, 1, "", "save"]], "neural_compressor.experimental.contrib": [[229, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[230, 0, 0, "-", "sigopt"], [231, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[230, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[231, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[236, 0, 0, "-", "dataloaders"], [248, 0, 0, "-", "datasets"], [252, 0, 0, "-", "filters"], [255, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[232, 0, 0, "-", "base_dataloader"], [233, 0, 0, "-", "dataloader"], [234, 0, 0, "-", "default_dataloader"], [235, 0, 0, "-", "fetcher"], [237, 0, 0, "-", "mxnet_dataloader"], [238, 0, 0, "-", "onnxrt_dataloader"], [239, 0, 0, "-", "pytorch_dataloader"], [240, 0, 0, "-", "sampler"], [241, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[232, 1, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[234, 1, 1, "", "DefaultDataLoader"], [234, 2, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[235, 1, 1, "", "Fetcher"], [235, 1, 1, "", "IndexFetcher"], [235, 1, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[237, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[238, 1, 1, "", "ONNXRTBertDataLoader"], [238, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[239, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[240, 1, 1, "", "BatchSampler"], [240, 1, 1, "", "IterableSampler"], [240, 1, 1, "", "Sampler"], [240, 1, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[241, 1, 1, "", "TFDataDataLoader"], [241, 1, 1, "", "TensorflowBertDataLoader"], [241, 1, 1, "", "TensorflowDataLoader"], [241, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[242, 0, 0, "-", "bert_dataset"], [243, 0, 0, "-", "coco_dataset"], [244, 0, 0, "-", "dataset"], [245, 0, 0, "-", "dummy_dataset"], [246, 0, 0, "-", "dummy_dataset_v2"], [247, 0, 0, "-", "imagenet_dataset"], [249, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[242, 1, 1, "", "InputFeatures"], [242, 1, 1, "", "ONNXRTBertDataset"], [242, 1, 1, "", "ParseDecodeBert"], [242, 1, 1, "", "PytorchBertDataset"], [242, 1, 1, "", "TensorflowBertDataset"], [242, 1, 1, "", "TensorflowModelZooBertDataset"], [242, 2, 1, "", "convert_examples_to_features"], [242, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[243, 1, 1, "", "COCONpy"], [243, 1, 1, "", "COCORaw"], [243, 1, 1, "", "COCORecordDataset"], [243, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[244, 1, 1, "", "CIFAR10"], [244, 1, 1, "", "CIFAR100"], [244, 1, 1, "", "Dataset"], [244, 1, 1, "", "Datasets"], [244, 1, 1, "", "FashionMNIST"], [244, 1, 1, "", "ImageFolder"], [244, 1, 1, "", "IterableDataset"], [244, 1, 1, "", "MNIST"], [244, 1, 1, "", "MXNetCIFAR10"], [244, 1, 1, "", "MXNetCIFAR100"], [244, 1, 1, "", "MXNetDatasets"], [244, 1, 1, "", "MXNetFashionMNIST"], [244, 1, 1, "", "MXNetImageFolder"], [244, 1, 1, "", "MXNetMNIST"], [244, 1, 1, "", "ONNXRTITDatasets"], [244, 1, 1, "", "ONNXRTQLDatasets"], [244, 1, 1, "", "PyTorchDatasets"], [244, 1, 1, "", "PytorchCIFAR10"], [244, 1, 1, "", "PytorchCIFAR100"], [244, 1, 1, "", "PytorchFashionMNIST"], [244, 1, 1, "", "PytorchMNIST"], [244, 1, 1, "", "PytorchMxnetWrapDataset"], [244, 1, 1, "", "PytorchMxnetWrapFunction"], [244, 1, 1, "", "TensorflowCIFAR10"], [244, 1, 1, "", "TensorflowCIFAR100"], [244, 1, 1, "", "TensorflowDatasets"], [244, 1, 1, "", "TensorflowFashionMNIST"], [244, 1, 1, "", "TensorflowImageFolder"], [244, 1, 1, "", "TensorflowImageRecord"], [244, 1, 1, "", "TensorflowMNIST"], [244, 1, 1, "", "TensorflowTFRecordDataset"], [244, 1, 1, "", "TensorflowVOCRecord"], [244, 2, 1, "", "calculate_md5"], [244, 2, 1, "", "check_integrity"], [244, 2, 1, "", "dataset_registry"], [244, 2, 1, "", "download_url"], [244, 4, 1, "", "framework_datasets"], [244, 2, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[245, 1, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[246, 1, 1, "", "DummyDataset"], [246, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[247, 1, 1, "", "ImagenetRaw"], [247, 1, 1, "", "MXNetImagenetRaw"], [247, 1, 1, "", "ONNXRTImagenetDataset"], [247, 1, 1, "", "PytorchImagenetRaw"], [247, 1, 1, "", "TensorflowImagenetDataset"], [247, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[249, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[250, 0, 0, "-", "coco_filter"], [251, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[250, 1, 1, "", "LabelBalanceCOCORawFilter"], [250, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[251, 1, 1, "", "FILTERS"], [251, 1, 1, "", "Filter"], [251, 1, 1, "", "MXNetFilters"], [251, 1, 1, "", "ONNXRTITFilters"], [251, 1, 1, "", "ONNXRTQLFilters"], [251, 1, 1, "", "PyTorchFilters"], [251, 1, 1, "", "TensorflowFilters"], [251, 2, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[254, 0, 0, "-", "imagenet_transform"], [256, 0, 0, "-", "tokenization"], [257, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[254, 1, 1, "", "BilinearImagenetTransform"], [254, 1, 1, "", "LabelShift"], [254, 1, 1, "", "ONNXResizeCropImagenetTransform"], [254, 1, 1, "", "OnnxBilinearImagenetTransform"], [254, 1, 1, "", "ParseDecodeImagenet"], [254, 1, 1, "", "ParseDecodeImagenetTransform"], [254, 1, 1, "", "QuantizedInput"], [254, 1, 1, "", "ResizeWithAspectRatio"], [254, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[256, 1, 1, "", "BasicTokenizer"], [256, 1, 1, "", "FullTokenizer"], [256, 1, 1, "", "WordpieceTokenizer"], [256, 2, 1, "", "convert_by_vocab"], [256, 2, 1, "", "convert_to_unicode"], [256, 2, 1, "", "load_vocab"], [256, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[257, 1, 1, "", "AlignImageChannelTransform"], [257, 1, 1, "", "BaseTransform"], [257, 1, 1, "", "CastONNXTransform"], [257, 1, 1, "", "CastPyTorchTransform"], [257, 1, 1, "", "CastTFTransform"], [257, 1, 1, "", "CenterCropTFTransform"], [257, 1, 1, "", "CenterCropTransform"], [257, 1, 1, "", "CollectTransform"], [257, 1, 1, "", "ComposeTransform"], [257, 1, 1, "", "CropResizeTFTransform"], [257, 1, 1, "", "CropResizeTransform"], [257, 1, 1, "", "CropToBoundingBox"], [257, 1, 1, "", "InputFeatures"], [257, 1, 1, "", "MXNetCropResizeTransform"], [257, 1, 1, "", "MXNetCropToBoundingBox"], [257, 1, 1, "", "MXNetNormalizeTransform"], [257, 1, 1, "", "MXNetTransforms"], [257, 1, 1, "", "MXNetTranspose"], [257, 1, 1, "", "NormalizeTFTransform"], [257, 1, 1, "", "NormalizeTransform"], [257, 1, 1, "", "ONNXRTCropToBoundingBox"], [257, 1, 1, "", "ONNXRTITTransforms"], [257, 1, 1, "", "ONNXRTQLTransforms"], [257, 1, 1, "", "PaddedCenterCropTransform"], [257, 1, 1, "", "ParseDecodeVocTransform"], [257, 1, 1, "", "PyTorchAlignImageChannel"], [257, 1, 1, "", "PyTorchCropResizeTransform"], [257, 1, 1, "", "PyTorchNormalizeTransform"], [257, 1, 1, "", "PyTorchTransforms"], [257, 1, 1, "", "PyTorchTranspose"], [257, 1, 1, "", "PytorchMxnetTransform"], [257, 1, 1, "", "PytorchMxnetWrapFunction"], [257, 1, 1, "", "RandomCropTFTransform"], [257, 1, 1, "", "RandomCropTransform"], [257, 1, 1, "", "RandomHorizontalFlip"], [257, 1, 1, "", "RandomResizedCropMXNetTransform"], [257, 1, 1, "", "RandomResizedCropPytorchTransform"], [257, 1, 1, "", "RandomResizedCropTFTransform"], [257, 1, 1, "", "RandomResizedCropTransform"], [257, 1, 1, "", "RandomVerticalFlip"], [257, 1, 1, "", "RescaleKerasPretrainTransform"], [257, 1, 1, "", "RescaleTFTransform"], [257, 1, 1, "", "RescaleTransform"], [257, 1, 1, "", "ResizeMXNetTransform"], [257, 1, 1, "", "ResizePytorchTransform"], [257, 1, 1, "", "ResizeTFTransform"], [257, 1, 1, "", "ResizeTransform"], [257, 1, 1, "", "ResizeWithRatio"], [257, 1, 1, "", "SquadExample"], [257, 1, 1, "", "TFModelZooCollectTransform"], [257, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [257, 1, 1, "", "TFSquadV1PostTransform"], [257, 1, 1, "", "TRANSFORMS"], [257, 1, 1, "", "TensorflowCropToBoundingBox"], [257, 1, 1, "", "TensorflowRandomHorizontalFlip"], [257, 1, 1, "", "TensorflowRandomVerticalFlip"], [257, 1, 1, "", "TensorflowResizeWithRatio"], [257, 1, 1, "", "TensorflowTransform"], [257, 1, 1, "", "TensorflowTransforms"], [257, 1, 1, "", "TensorflowTranspose"], [257, 1, 1, "", "TensorflowWrapFunction"], [257, 1, 1, "", "ToArray"], [257, 1, 1, "", "ToNDArrayTransform"], [257, 1, 1, "", "Transforms"], [257, 1, 1, "", "Transpose"], [257, 2, 1, "", "convert_examples_to_features"], [257, 2, 1, "", "get_final_text"], [257, 2, 1, "", "get_torchvision_map"], [257, 2, 1, "", "read_squad_examples"], [257, 2, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[258, 1, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[258, 3, 1, "", "_epoch_ran"], [258, 3, 1, "", "best_model"], [258, 3, 1, "", "best_score"], [258, 3, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[260, 0, 0, "-", "qlinear2qdq"], [261, 0, 0, "-", "tf2onnx"], [262, 0, 0, "-", "torch2onnx"]], "neural_compressor.experimental.export.qlinear2qdq": [[260, 2, 1, "", "check_model"], [260, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[261, 2, 1, "", "tf_to_fp32_onnx"], [261, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[262, 2, 1, "", "dynamic_quant_export"], [262, 2, 1, "", "get_node_mapping"], [262, 2, 1, "", "get_quantizable_onnx_ops"], [262, 2, 1, "", "static_quant_export"], [262, 2, 1, "", "torch_to_fp32_onnx"], [262, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.experimental.graph_optimization": [[263, 1, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[265, 0, 0, "-", "bleu"], [266, 0, 0, "-", "bleu_util"], [267, 0, 0, "-", "coco_label_map"], [268, 0, 0, "-", "coco_tools"], [269, 0, 0, "-", "evaluate_squad"], [270, 0, 0, "-", "f1"], [272, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[265, 1, 1, "", "BLEU"], [265, 1, 1, "", "UnicodeRegex"], [265, 2, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[265, 3, 1, "", "labels"], [265, 3, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[265, 3, 1, "", "nondigit_punct_re"], [265, 3, 1, "", "punct_nondigit_re"], [265, 3, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[266, 2, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[268, 1, 1, "", "COCOEvalWrapper"], [268, 1, 1, "", "COCOWrapper"], [268, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [268, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [268, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[268, 3, 1, "", "dataset"], [268, 3, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[269, 2, 1, "", "evaluate"], [269, 2, 1, "", "exact_match_score"], [269, 2, 1, "", "f1_score"], [269, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[270, 2, 1, "", "evaluate"], [270, 2, 1, "", "f1_score"], [270, 2, 1, "", "metric_max_over_ground_truths"], [270, 2, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[272, 1, 1, "", "Accuracy"], [272, 1, 1, "", "BaseMetric"], [272, 1, 1, "", "COCOmAPv2"], [272, 1, 1, "", "F1"], [272, 1, 1, "", "GeneralTopK"], [272, 1, 1, "", "Loss"], [272, 1, 1, "", "MAE"], [272, 1, 1, "", "METRICS"], [272, 1, 1, "", "MSE"], [272, 1, 1, "", "MXNetMetrics"], [272, 1, 1, "", "ONNXRTGLUE"], [272, 1, 1, "", "ONNXRTITMetrics"], [272, 1, 1, "", "ONNXRTQLMetrics"], [272, 1, 1, "", "PyTorchLoss"], [272, 1, 1, "", "PyTorchMetrics"], [272, 1, 1, "", "RMSE"], [272, 1, 1, "", "ROC"], [272, 1, 1, "", "SquadF1"], [272, 1, 1, "", "TensorflowCOCOMAP"], [272, 1, 1, "", "TensorflowMAP"], [272, 1, 1, "", "TensorflowMetrics"], [272, 1, 1, "", "TensorflowTopK"], [272, 1, 1, "", "TensorflowVOCMAP"], [272, 1, 1, "", "WrapMXNetMetric"], [272, 1, 1, "", "WrapONNXRTMetric"], [272, 1, 1, "", "WrapPyTorchMetric"], [272, 1, 1, "", "mIOU"], [272, 2, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[272, 3, 1, "", "label_list"], [272, 3, 1, "", "pred_list"], [272, 3, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[272, 3, 1, "", "k"], [272, 3, 1, "", "num_correct"], [272, 3, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[272, 3, 1, "", "sample"], [272, 3, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[272, 3, 1, "", "compare_label"], [272, 3, 1, "", "label_list"], [272, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[272, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[272, 3, 1, "", "compare_label"], [272, 3, 1, "", "label_list"], [272, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[272, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[272, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[272, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[272, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[272, 3, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[272, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[272, 3, 1, "", "k"], [272, 3, 1, "", "num_correct"], [272, 3, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[273, 1, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[274, 1, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[275, 0, 0, "-", "basic_nas"], [276, 0, 0, "-", "dynas"], [278, 0, 0, "-", "nas"], [279, 0, 0, "-", "nas_utils"], [280, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[275, 1, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[276, 1, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[278, 1, 1, "", "NAS"], [278, 1, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[279, 2, 1, "", "create_search_space_pool"], [279, 2, 1, "", "find_pareto_front"], [279, 2, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[280, 1, 1, "", "BayesianOptimizationSearcher"], [280, 1, 1, "", "GridSearcher"], [280, 1, 1, "", "RandomSearcher"], [280, 1, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[281, 0, 0, "-", "gradient_sensitivity"], [282, 0, 0, "-", "group_lasso"], [284, 0, 0, "-", "magnitude"], [285, 0, 0, "-", "pattern_lock"], [286, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[281, 1, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[282, 1, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[284, 1, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[285, 1, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[286, 1, 1, "", "Pruner"], [286, 2, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[287, 1, 1, "", "Pruning"], [287, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[287, 3, 1, "", "conf"], [287, 3, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[289, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[290, 0, 0, "-", "pattern"], [291, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[290, 1, 1, "", "PATTERNS"], [290, 1, 1, "", "PatternBase"], [290, 2, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[290, 3, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[291, 1, 1, "", "TilePatternBase"], [291, 1, 1, "", "TilePattern_1x1"], [291, 1, 1, "", "TilePattern_1x16"], [291, 1, 1, "", "TilePattern_1x2"], [291, 1, 1, "", "TilePattern_2x2"], [291, 1, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[292, 1, 1, "", "Pruning"], [292, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[292, 3, 1, "", "conf"], [292, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[294, 0, 0, "-", "logger"], [295, 0, 0, "-", "patterns"], [296, 0, 0, "-", "prune_utils"], [297, 0, 0, "-", "pruner"], [298, 0, 0, "-", "pruning"], [299, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[295, 1, 1, "", "Pattern"], [295, 1, 1, "", "PatternNInM"], [295, 1, 1, "", "PatternNxM"], [295, 2, 1, "", "get_pattern"], [295, 2, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[295, 3, 1, "", "is_global"], [295, 3, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[295, 3, 1, "", "M"], [295, 3, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[295, 3, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[296, 2, 1, "", "check_config"], [296, 2, 1, "", "parse_not_to_prune"], [296, 2, 1, "", "parse_to_prune"], [296, 2, 1, "", "process_and_check_config"], [296, 2, 1, "", "process_config"], [296, 2, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[297, 1, 1, "", "MagnitudePruner"], [297, 1, 1, "", "PatternLockPruner"], [297, 1, 1, "", "Pruner"], [297, 1, 1, "", "SnipMomentumPruner"], [297, 1, 1, "", "SnipPruner"], [297, 2, 1, "", "get_pruner"], [297, 2, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[297, 3, 1, "", "config"], [297, 3, 1, "", "current_sparsity_ratio"], [297, 3, 1, "", "end_step"], [297, 3, 1, "", "global_step"], [297, 3, 1, "", "masks"], [297, 3, 1, "", "max_sparsity_ratio_per_layer"], [297, 3, 1, "", "modules"], [297, 3, 1, "", "pattern"], [297, 3, 1, "", "scheduler"], [297, 3, 1, "", "scores"], [297, 3, 1, "", "start_step"], [297, 3, 1, "", "target_sparsity_ratio"], [297, 3, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[298, 1, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[298, 3, 1, "", "config_file_path"], [298, 3, 1, "", "model"], [298, 3, 1, "", "pruner_info"], [298, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[299, 1, 1, "", "IterativeScheduler"], [299, 1, 1, "", "OneshotScheduler"], [299, 1, 1, "", "Scheduler"], [299, 2, 1, "", "get_scheduler"], [299, 2, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[299, 3, 1, "", "config"]], "neural_compressor.experimental.quantization": [[300, 1, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[301, 1, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[302, 0, 0, "-", "auto_mixed_precision"], [303, 0, 0, "-", "basic"], [304, 0, 0, "-", "bayesian"], [305, 0, 0, "-", "exhaustive"], [307, 0, 0, "-", "mse"], [308, 0, 0, "-", "mse_v2"], [309, 0, 0, "-", "random"], [310, 0, 0, "-", "strategy"], [312, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[302, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[303, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[304, 1, 1, "", "BayesianOptimization"], [304, 1, 1, "", "BayesianTuneStrategy"], [304, 1, 1, "", "TargetSpace"], [304, 2, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[305, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[307, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[308, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[309, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[310, 1, 1, "", "TuneStrategy"], [310, 2, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[311, 0, 0, "-", "constant"], [313, 0, 0, "-", "tuning_sampler"], [314, 0, 0, "-", "tuning_space"], [315, 0, 0, "-", "tuning_structs"], [316, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[313, 1, 1, "", "FallbackTuningSampler"], [313, 1, 1, "", "ModelWiseTuningSampler"], [313, 1, 1, "", "OpTypeWiseTuningSampler"], [313, 1, 1, "", "OpWiseTuningSampler"], [313, 1, 1, "", "SmoothQuantSampler"], [313, 1, 1, "", "TuningOrder"], [313, 1, 1, "", "TuningSampler"], [313, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[314, 1, 1, "", "TuningItem"], [314, 1, 1, "", "TuningSpace"], [314, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [314, 2, 1, "", "pattern_to_internal"], [314, 2, 1, "", "pattern_to_path"], [314, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[315, 1, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[316, 1, 1, "", "OrderedDefaultDict"], [316, 2, 1, "", "extract_data_type"], [316, 2, 1, "", "get_adaptor_name"], [316, 2, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[318, 0, 0, "-", "bleu"], [319, 0, 0, "-", "bleu_util"], [320, 0, 0, "-", "coco_label_map"], [321, 0, 0, "-", "coco_tools"], [322, 0, 0, "-", "evaluate_squad"], [323, 0, 0, "-", "f1"], [325, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[318, 1, 1, "", "BLEU"], [318, 1, 1, "", "UnicodeRegex"], [318, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[318, 3, 1, "", "labels"], [318, 3, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[318, 3, 1, "", "nondigit_punct_re"], [318, 3, 1, "", "punct_nondigit_re"], [318, 3, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[319, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[321, 1, 1, "", "COCOEvalWrapper"], [321, 1, 1, "", "COCOWrapper"], [321, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [321, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [321, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[321, 3, 1, "", "dataset"], [321, 3, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[322, 2, 1, "", "evaluate"], [322, 2, 1, "", "exact_match_score"], [322, 2, 1, "", "f1_score"], [322, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[323, 2, 1, "", "evaluate"], [323, 2, 1, "", "f1_score"], [323, 2, 1, "", "metric_max_over_ground_truths"], [323, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[325, 1, 1, "", "Accuracy"], [325, 1, 1, "", "BaseMetric"], [325, 1, 1, "", "COCOmAPv2"], [325, 1, 1, "", "F1"], [325, 1, 1, "", "GeneralTopK"], [325, 1, 1, "", "Loss"], [325, 1, 1, "", "MAE"], [325, 1, 1, "", "METRICS"], [325, 1, 1, "", "MSE"], [325, 1, 1, "", "MXNetMetrics"], [325, 1, 1, "", "Metric"], [325, 1, 1, "", "ONNXRTGLUE"], [325, 1, 1, "", "ONNXRTITMetrics"], [325, 1, 1, "", "ONNXRTQLMetrics"], [325, 1, 1, "", "PyTorchLoss"], [325, 1, 1, "", "PyTorchMetrics"], [325, 1, 1, "", "RMSE"], [325, 1, 1, "", "ROC"], [325, 1, 1, "", "SquadF1"], [325, 1, 1, "", "TensorflowCOCOMAP"], [325, 1, 1, "", "TensorflowMAP"], [325, 1, 1, "", "TensorflowMetrics"], [325, 1, 1, "", "TensorflowTopK"], [325, 1, 1, "", "TensorflowVOCMAP"], [325, 1, 1, "", "WrapMXNetMetric"], [325, 1, 1, "", "WrapONNXRTMetric"], [325, 1, 1, "", "WrapPyTorchMetric"], [325, 1, 1, "", "mIOU"], [325, 2, 1, "", "metric_registry"], [325, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[325, 3, 1, "", "label_list"], [325, 3, 1, "", "pred_list"], [325, 3, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[325, 3, 1, "", "k"], [325, 3, 1, "", "num_correct"], [325, 3, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[325, 3, 1, "", "sample"], [325, 3, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[325, 3, 1, "", "compare_label"], [325, 3, 1, "", "label_list"], [325, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[325, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[325, 3, 1, "", "compare_label"], [325, 3, 1, "", "label_list"], [325, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[325, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[325, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[325, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[325, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[325, 3, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[325, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[325, 3, 1, "", "k"], [325, 3, 1, "", "num_correct"], [325, 3, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[326, 2, 1, "", "fit"]], "neural_compressor.model": [[327, 0, 0, "-", "base_model"], [329, 0, 0, "-", "keras_model"], [330, 0, 0, "-", "model"], [331, 0, 0, "-", "mxnet_model"], [332, 0, 0, "-", "nets_factory"], [333, 0, 0, "-", "onnx_model"], [334, 0, 0, "-", "tensorflow_model"], [335, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[327, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[329, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[330, 1, 1, "", "Model"], [330, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[331, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[332, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[333, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[334, 1, 1, "", "TensorflowBaseModel"], [334, 1, 1, "", "TensorflowCheckpointModel"], [334, 1, 1, "", "TensorflowModel"], [334, 1, 1, "", "TensorflowQATModel"], [334, 1, 1, "", "TensorflowSavedModelModel"], [334, 2, 1, "", "checkpoint_session"], [334, 2, 1, "", "estimator_session"], [334, 2, 1, "", "frozen_pb_session"], [334, 2, 1, "", "get_model_type"], [334, 2, 1, "", "graph_def_session"], [334, 2, 1, "", "graph_session"], [334, 2, 1, "", "keras_session"], [334, 2, 1, "", "load_saved_model"], [334, 2, 1, "", "saved_model_session"], [334, 2, 1, "", "slim_session"], [334, 2, 1, "", "validate_and_inference_input_output"], [334, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[335, 1, 1, "", "IPEXModel"], [335, 1, 1, "", "PyTorchBaseModel"], [335, 1, 1, "", "PyTorchFXModel"], [335, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[336, 1, 1, "", "Accuracy"], [336, 1, 1, "", "Footprint"], [336, 1, 1, "", "ModelSize"], [336, 1, 1, "", "MultiObjective"], [336, 1, 1, "", "Objective"], [336, 1, 1, "", "Performance"], [336, 2, 1, "", "objective_custom_registry"], [336, 2, 1, "", "objective_registry"]], "neural_compressor.profiling": [[339, 0, 0, "-", "parser"], [349, 0, 0, "-", "profiler"]], "neural_compressor.profiling.parser": [[338, 0, 0, "-", "factory"], [341, 0, 0, "-", "onnx_parser"], [343, 0, 0, "-", "parser"], [344, 0, 0, "-", "result"], [346, 0, 0, "-", "tensorflow_parser"]], "neural_compressor.profiling.parser.factory": [[338, 1, 1, "", "ParserFactory"]], "neural_compressor.profiling.parser.onnx_parser": [[340, 0, 0, "-", "factory"], [342, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[340, 1, 1, "", "OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[342, 1, 1, "", "OnnxProfilingParser"]], "neural_compressor.profiling.parser.parser": [[343, 1, 1, "", "ProfilingParser"]], "neural_compressor.profiling.parser.result": [[344, 1, 1, "", "ProfilingResult"]], "neural_compressor.profiling.parser.tensorflow_parser": [[345, 0, 0, "-", "factory"], [347, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[345, 1, 1, "", "TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[347, 1, 1, "", "TensorFlowProfilingParser"]], "neural_compressor.profiling.profiler": [[348, 0, 0, "-", "factory"], [351, 0, 0, "-", "onnxrt_profiler"], [354, 0, 0, "-", "profiler"], [356, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.profiling.profiler.factory": [[348, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[350, 0, 0, "-", "factory"], [352, 0, 0, "-", "profiler"], [353, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[350, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[352, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[353, 2, 1, "", "create_onnx_config"]], "neural_compressor.profiling.profiler.profiler": [[354, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[355, 0, 0, "-", "factory"], [357, 0, 0, "-", "profiler"], [358, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[355, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[357, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[358, 2, 1, "", "create_tf_config"], [358, 2, 1, "", "delete_assign"], [358, 2, 1, "", "set_eager_execution"]], "neural_compressor.quantization": [[359, 2, 1, "", "fit"]], "neural_compressor.strategy": [[360, 0, 0, "-", "auto"], [361, 0, 0, "-", "auto_mixed_precision"], [362, 0, 0, "-", "basic"], [363, 0, 0, "-", "bayesian"], [364, 0, 0, "-", "conservative"], [365, 0, 0, "-", "exhaustive"], [366, 0, 0, "-", "hawq_v2"], [368, 0, 0, "-", "mse"], [369, 0, 0, "-", "mse_v2"], [370, 0, 0, "-", "random"], [371, 0, 0, "-", "strategy"], [373, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[360, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[361, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[362, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[363, 1, 1, "", "BayesianOptimization"], [363, 1, 1, "", "BayesianTuneStrategy"], [363, 1, 1, "", "TargetSpace"], [363, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[364, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[365, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[366, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[368, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[369, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[370, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[371, 1, 1, "", "TuneStrategy"], [371, 1, 1, "", "TuneStrategyMeta"], [371, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[372, 0, 0, "-", "constant"], [374, 0, 0, "-", "tuning_sampler"], [375, 0, 0, "-", "tuning_space"], [376, 0, 0, "-", "tuning_structs"], [377, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[374, 1, 1, "", "BlockFallbackTuningSampler"], [374, 1, 1, "", "FallbackTuningSampler"], [374, 1, 1, "", "LowerBitsSampler"], [374, 1, 1, "", "ModelWiseTuningSampler"], [374, 1, 1, "", "OpTypeWiseTuningSampler"], [374, 1, 1, "", "OpWiseTuningSampler"], [374, 1, 1, "", "TuningOrder"], [374, 1, 1, "", "TuningSampler"], [374, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_space": [[375, 1, 1, "", "TuningItem"], [375, 1, 1, "", "TuningSpace"], [375, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [375, 2, 1, "", "pattern_to_internal"], [375, 2, 1, "", "pattern_to_path"], [375, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[376, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[377, 1, 1, "", "OrderedDefaultDict"], [377, 1, 1, "", "QuantOptions"], [377, 1, 1, "", "QuantType"], [377, 2, 1, "", "build_slave_faker_model"], [377, 2, 1, "", "extract_data_type"], [377, 2, 1, "", "get_adaptor_name"], [377, 2, 1, "", "preprocess_user_cfg"], [377, 2, 1, "", "reverted_data_type"]], "neural_compressor.template": [[378, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[378, 1, 1, "", "ExampleClass"], [378, 3, 1, "", "attribute1"], [378, 2, 1, "", "function1"], [378, 2, 1, "", "function2"], [378, 2, 1, "", "function3"], [378, 2, 1, "", "generator1"], [378, 4, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[378, 3, 1, "", "attr1"], [378, 3, 1, "", "attr2"], [378, 3, 1, "", "attr5"]], "neural_compressor.training": [[380, 1, 1, "", "CallBacks"], [380, 1, 1, "", "CompressionManager"], [380, 2, 1, "", "fit"], [380, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[381, 0, 0, "-", "collect_layer_histogram"], [382, 0, 0, "-", "constant"], [383, 0, 0, "-", "create_obj_from_config"], [385, 0, 0, "-", "kl_divergence"], [386, 0, 0, "-", "load_huggingface"], [387, 0, 0, "-", "logger"], [388, 0, 0, "-", "neural_insights_utils"], [389, 0, 0, "-", "options"], [390, 0, 0, "-", "pytorch"], [391, 0, 0, "-", "utility"], [392, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[381, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[383, 2, 1, "", "create_dataloader"], [383, 2, 1, "", "create_dataset"], [383, 2, 1, "", "create_eval_func"], [383, 2, 1, "", "create_train_func"], [383, 2, 1, "", "get_algorithm"], [383, 2, 1, "", "get_func_from_config"], [383, 2, 1, "", "get_metrics"], [383, 2, 1, "", "get_postprocess"], [383, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[385, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[386, 1, 1, "", "OptimizedModel"], [386, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[387, 1, 1, "", "Logger"], [387, 2, 1, "", "debug"], [387, 2, 1, "", "error"], [387, 2, 1, "", "fatal"], [387, 2, 1, "", "info"], [387, 2, 1, "", "log"], [387, 2, 1, "", "warn"], [387, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[388, 2, 1, "", "register_neural_insights_workload"], [388, 2, 1, "", "update_neural_insights_workload"], [388, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[389, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[390, 2, 1, "", "is_int8_model"], [390, 2, 1, "", "load"]], "neural_compressor.utils.utility": [[391, 1, 1, "", "CaptureOutputToFile"], [391, 1, 1, "", "CpuInfo"], [391, 2, 1, "", "Dequantize"], [391, 1, 1, "", "DotDict"], [391, 1, 1, "", "GLOBAL_STATE"], [391, 1, 1, "", "LazyImport"], [391, 1, 1, "", "MODE"], [391, 1, 1, "", "OpEntry"], [391, 1, 1, "", "Statistics"], [391, 2, 1, "", "alias_param"], [391, 2, 1, "", "calculate_mse"], [391, 2, 1, "", "combine_histogram"], [391, 2, 1, "", "compare_objects"], [391, 2, 1, "", "compute_sparsity"], [391, 2, 1, "", "dequantize_weight"], [391, 2, 1, "", "dump_class_attrs"], [391, 2, 1, "", "dump_data_to_local"], [391, 2, 1, "", "dump_elapsed_time"], [391, 2, 1, "", "dump_table"], [391, 2, 1, "", "dump_table_to_csv"], [391, 2, 1, "", "equal_dicts"], [391, 2, 1, "", "fault_tolerant_file"], [391, 2, 1, "", "get_all_fp32_data"], [391, 2, 1, "", "get_number_of_sockets"], [391, 2, 1, "", "get_op_list"], [391, 2, 1, "", "get_size"], [391, 2, 1, "", "get_tensor_histogram"], [391, 2, 1, "", "get_tensors_info"], [391, 2, 1, "", "get_tuning_history"], [391, 2, 1, "", "get_weights_details"], [391, 2, 1, "", "load_data_from_pkl"], [391, 2, 1, "", "mse_metric_gap"], [391, 2, 1, "", "print_op_list"], [391, 2, 1, "", "print_table"], [391, 2, 1, "", "recover"], [391, 2, 1, "", "set_random_seed"], [391, 2, 1, "", "set_resume_from"], [391, 2, 1, "", "set_tensorboard"], [391, 2, 1, "", "set_workspace"], [391, 2, 1, "", "show_memory_info"], [391, 2, 1, "", "singleton"], [391, 2, 1, "", "str2array"], [391, 2, 1, "", "time_limit"], [391, 2, 1, "", "version1_eq_version2"], [391, 2, 1, "", "version1_gt_version2"], [391, 2, 1, "", "version1_gte_version2"], [391, 2, 1, "", "version1_lt_version2"], [391, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[392, 1, 1, "", "WeightsDetails"], [392, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:attribute", "4": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "data", "Python data"]}, "titleterms": {"block_mask": 0, "neural_compressor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393], "adaptor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 401, 402, 404], "modul": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 151, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 210, 211, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 227, 230, 231, 232, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 254, 256, 257, 258, 260, 261, 262, 263, 265, 266, 268, 269, 270, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 285, 286, 287, 290, 291, 292, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 313, 314, 315, 316, 318, 319, 321, 322, 323, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 340, 342, 343, 344, 345, 347, 348, 350, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 374, 375, 376, 377, 378, 380, 381, 383, 385, 386, 387, 388, 389, 390, 391, 392], "content": [1, 2, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 340, 342, 343, 344, 345, 347, 348, 350, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 375, 376, 377, 378, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 400], "class": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 153, 154, 158, 159, 160, 161, 162, 164, 165, 168, 172, 173, 174, 175, 176, 177, 179, 180, 182, 183, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 230, 231, 232, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 263, 264, 265, 268, 271, 272, 273, 274, 275, 276, 278, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 313, 314, 315, 316, 318, 321, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 340, 342, 343, 344, 345, 347, 348, 350, 352, 354, 355, 357, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 374, 375, 376, 377, 378, 380, 381, 384, 385, 386, 387, 389, 391, 392, 401], "function": [1, 13, 16, 34, 42, 43, 44, 66, 67, 69, 103, 104, 115, 117, 147, 148, 149, 151, 154, 155, 156, 157, 158, 160, 163, 165, 168, 170, 172, 174, 175, 176, 177, 178, 180, 189, 190, 198, 200, 204, 207, 208, 209, 212, 214, 215, 216, 217, 219, 221, 222, 224, 227, 234, 242, 244, 248, 251, 252, 253, 255, 256, 257, 260, 261, 262, 265, 266, 268, 269, 270, 271, 272, 279, 286, 290, 295, 296, 297, 299, 304, 310, 314, 316, 318, 319, 321, 322, 323, 324, 325, 326, 330, 334, 336, 353, 358, 359, 363, 371, 375, 377, 378, 380, 383, 384, 386, 387, 388, 390, 391, 425], "subpackag": [2, 17, 86, 110, 111, 113, 167, 169, 184, 209, 228, 253, 264, 288, 306, 317, 367], "submodul": [2, 12, 17, 29, 50, 75, 86, 94, 100, 105, 110, 111, 113, 116, 129, 144, 150, 160, 166, 167, 169, 171, 181, 185, 192, 204, 208, 212, 219, 226, 229, 236, 248, 252, 255, 259, 264, 271, 277, 283, 289, 293, 306, 312, 317, 324, 328, 339, 341, 346, 349, 351, 356, 367, 373, 379, 384], "packag": [2, 29, 160, 192, 204, 208, 209, 212, 219, 236, 248, 252, 253, 255, 264, 271, 283, 288, 289, 306, 324, 328, 367, 384, 449, 451, 453, 454], "kera": 3, "keras_util": [4, 5, 6, 7, 8, 9, 10], "conv2d": 4, "dens": 5, "depthwise_conv2d": 6, "pool2d": 8, "quantiz": [9, 41, 300, 359, 397, 400, 402, 403, 415, 422, 424, 427, 430, 433, 436, 437, 445, 456, 462, 463, 464, 465, 468, 474], "separable_conv2d": 10, "mxnet": [11, 420, 435, 463, 470], "mxnet_util": [12, 13], "util": [13, 43, 147, 156, 178, 311, 312, 313, 314, 315, 316, 353, 358, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 406], "onnxrt": [14, 420, 435, 470], "ox_util": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], "calibr": [15, 16, 402], "oper": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 402, 403], "activ": 18, "argmax": 19, "attent": 20, "binary_op": 21, "concat": 22, "conv": 23, "direct_q8": 24, "embed_layernorm": 25, "gather": 26, "gavgpool": 27, "gemm": 28, "lstm": 30, "matmul": [31, 468], "maxpool": 32, "norm": 33, "op": [34, 427], "pad": 35, "pool": 36, "reduc": 37, "resiz": 38, "split": 39, "unary_op": 40, "smooth_quant": [42, 154, 161], "pytorch": [44, 390, 420, 425, 427, 435, 463, 464, 469, 470, 474], "queri": [45, 401], "tensorflow": [46, 420, 425, 427, 435, 463, 464, 469, 470, 474], "tf_util": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], "graph_convert": 47, "graph_converter_without_calib": 48, "graph_rewrit": [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "bf16": [49, 50, 437], "bf16_convert": [49, 148], "gener": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 402], "convert_add_to_biasadd": 51, "convert_layout": 52, "convert_leakyrelu": 53, "convert_nan_to_random": 54, "convert_placeholder_to_const": 55, "dequantize_cast_optim": 56, "dilated_contract": 57, "dummy_biasadd": 58, "expanddims_optim": 59, "fetch_weight_from_reshap": 60, "fold_batch_norm": 61, "fold_const": 62, "fuse_biasadd_add": 63, "fuse_column_wise_mul": 64, "fuse_conv_with_math": 65, "fuse_decomposed_bn": 66, "fuse_decomposed_in": 67, "fuse_gelu": 68, "fuse_layer_norm": 69, "fuse_pad_with_conv": 70, "fuse_pad_with_fp32_conv": 71, "fuse_reshape_transpos": 72, "graph_cse_optim": 73, "grappler_pass": 74, "insert_print_nod": 76, "move_squeeze_after_relu": 77, "pre_optim": 78, "remove_training_nod": 79, "rename_batch_norm": 80, "split_shared_input": 81, "strip_equivalent_nod": 82, "strip_unused_nod": 83, "switch_optim": 84, "graph_bas": 85, "int8": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 427, 474], "freeze_fake_qu": 87, "freeze_valu": 88, "freeze_value_without_calib": 89, "fuse_conv_redundant_dequant": 90, "fuse_conv_requant": 91, "fuse_matmul_redundant_dequant": 92, "fuse_matmul_requant": 93, "meta_op_optim": 95, "post_hostconst_convert": 96, "post_quantized_op_cs": 97, "rnn_convert": 98, "scale_propag": 99, "onnx": [100, 101, 102, 103, 104, 405, 433, 463, 474], "onnx_graph": 101, "onnx_nod": 102, "onnx_schema": 103, "tf2onnx_util": 104, "qdq": [105, 106, 107, 108, 122, 123, 124, 125, 126, 127, 128, 129, 130, 474], "insert_qdq_pattern": 106, "merge_duplicated_qdq": 107, "share_qdq_y_pattern": 108, "graph_util": 109, "quantize_graph": [111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137], "qat": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 474], "fake_quant": 112, "quantize_config": 114, "quantize_help": 115, "quantize_lay": [116, 117, 118, 119, 120], "optimize_lay": 117, "quantize_layer_add": 118, "quantize_layer_bas": 119, "quantize_layer_bn": 120, "quantize_wrapp": 121, "fuse_qdq_bn": 122, "fuse_qdq_concatv2": 123, "fuse_qdq_conv": 124, "fuse_qdq_deconv": 125, "fuse_qdq_in": 126, "fuse_qdq_matmul": 127, "fuse_qdq_pool": 128, "optimize_qdq": 130, "quantize_graph_bas": 131, "quantize_graph_bn": 132, "quantize_graph_concatv2": 133, "quantize_graph_conv": 134, "quantize_graph_for_intel_cpu": 135, "quantize_graph_matmul": 136, "quantize_graph_pool": 137, "quantize_graph_common": 138, "smooth_quant_calibr": 139, "smooth_quant_scal": 140, "tf2onnx_convert": 141, "transform_graph": [142, 143, 144, 145, 146], "bias_correct": 142, "graph_transform_bas": 143, "insert_log": 145, "rerange_quantized_concat": 146, "torch_util": [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 224], "hawq_metr": 149, "mixed_precis": [151, 273], "model_wrapp": 152, "pattern_detector": 153, "symbolic_trac": 155, "weight_onli": 157, "algorithm": [158, 159, 160, 161, 162, 468, 471], "fast_bias_correct": 159, "weight_correct": 162, "benchmark": [163, 216, 409, 418, 422, 436, 462], "compress": [164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 226, 227, 410], "callback": 164, "distil": [165, 166, 258, 423, 424, 436, 462, 474], "criterion": [165, 217], "pruner": [168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 286, 297], "criteria": [168, 460, 471], "model_slim": [170, 171, 172, 173], "auto_slim": 170, "pattern_analyz": 172, "weight_slim": 173, "pattern": [174, 289, 290, 291, 295, 460], "reg": 176, "schedul": [177, 299, 301, 460], "conf": [179, 180, 181, 182], "config": [179, 183, 411, 420, 458], "dotdict": 180, "pythonic_config": 182, "contrib": [184, 185, 186, 187, 228, 229, 230, 231], "strategi": [185, 186, 187, 229, 230, 231, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 416, 467, 471], "sigopt": [186, 230, 467, 471], "tpe": [187, 231, 471], "data": [188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 402, 403, 422, 426], "dataload": [188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 218, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 419, 420], "base_dataload": [188, 232], "default_dataload": [190, 234], "fetcher": [191, 235], "attribut": [192, 200, 209, 244, 253, 264, 288, 328, 378, 384, 395], "mxnet_dataload": [193, 237], "onnxrt_dataload": [194, 238], "pytorch_dataload": [195, 239], "sampler": [196, 240], "tensorflow_dataload": [197, 241], "dataset": [198, 199, 200, 201, 202, 203, 204, 205, 242, 243, 244, 245, 246, 247, 248, 249, 420, 422, 431], "bert_dataset": [198, 242], "coco_dataset": [199, 243], "dummy_dataset": [201, 245], "dummy_dataset_v2": [202, 246], "imagenet_dataset": [203, 247], "style_transfer_dataset": [205, 249], "filter": [206, 207, 208, 250, 251, 252], "coco_filt": [206, 250], "transform": [210, 211, 212, 213, 214, 215, 254, 255, 256, 257, 431, 470], "coco_transform": 210, "imagenet_transform": [211, 254], "postprocess": [213, 223], "token": [214, 256], "experiment": [216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316], "common": [217, 218, 219, 220, 221, 222, 223, 224, 397, 428], "metric": [220, 265, 266, 267, 268, 269, 270, 271, 272, 318, 319, 320, 321, 322, 323, 324, 325, 431, 435], "model": [221, 327, 328, 329, 330, 331, 332, 333, 334, 335, 402, 413, 427, 430, 433, 436, 438, 445, 460, 465, 468, 474], "optim": [222, 446, 456, 459, 472], "compon": 225, "prune": [227, 287, 298, 436, 460, 462, 474], "export": [259, 260, 261, 262, 427], "qlinear2qdq": 260, "tf2onnx": 261, "torch2onnx": 262, "graph_optim": 263, "bleu": [265, 318], "bleu_util": [266, 319], "coco_label_map": [267, 320], "coco_tool": [268, 321], "evaluate_squad": [269, 322], "f1": [270, 323], "model_convers": 274, "na": [275, 276, 277, 278, 279, 280, 398, 462], "basic_na": 275, "dyna": 276, "nas_util": 279, "search_algorithm": 280, "pruner_legaci": [281, 282, 283, 284, 285, 286], "gradient_sensit": 281, "group_lasso": 282, "magnitud": 284, "pattern_lock": 285, "pruning_recip": [288, 289, 290, 291], "tile_pattern": 291, "pruning_v2": 292, "pytorch_prun": [293, 294, 295, 296, 297, 298, 299], "logger": [294, 387], "prune_util": 296, "auto_mixed_precis": [302, 361], "basic": [303, 362, 398, 471], "bayesian": [304, 363, 471], "exhaust": [305, 365, 471], "mse": [307, 368, 471], "mse_v2": [308, 369, 471], "random": [309, 370, 471], "constant": [311, 372, 382], "tuning_sampl": [313, 374], "tuning_spac": [314, 375], "tuning_struct": [315, 376], "mix_precis": 326, "base_model": 327, "keras_model": 329, "mxnet_model": 331, "nets_factori": 332, "onnx_model": 333, "tensorflow_model": 334, "torch_model": 335, "object": [336, 414, 458], "profil": [337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 422], "parser": [338, 339, 340, 341, 342, 343, 344, 345, 346, 347], "factori": [338, 340, 345, 348, 350, 355], "onnx_pars": [340, 341, 342], "result": 344, "tensorflow_pars": [345, 346, 347], "onnxrt_profil": [350, 351, 352, 353], "tensorflow_profil": [355, 356, 357, 358], "auto": [360, 450, 456, 464, 468, 471], "conserv": [364, 471], "hawq_v2": [366, 471], "templat": [378, 379, 396], "api_doc_exampl": 378, "train": [380, 397, 417, 425, 436, 463], "collect_layer_histogram": 381, "create_obj_from_config": 383, "kl_diverg": 385, "load_huggingfac": 386, "neural_insights_util": 388, "option": [389, 425, 444], "weights_detail": 392, "version": 393, "intel": [394, 400, 419, 422, 432, 433, 435, 436, 442, 450, 456, 474, 475], "neural": [394, 397, 398, 400, 419, 422, 432, 433, 435, 436, 439, 443, 445, 450, 456, 460, 467, 472, 475], "compressor": [394, 397, 400, 419, 422, 432, 433, 435, 436, 450, 456, 467, 475], "document": [394, 400, 407, 475], "section": [394, 475], "contributor": [395, 396], "coven": [395, 396], "code": [395, 396, 398, 436, 457, 465, 472], "conduct": [395, 396], "our": [395, 468], "pledg": 395, "standard": 395, "respons": 395, "scope": [395, 460], "enforc": 395, "contribut": [396, 449, 453], "guidelin": 396, "pull": 396, "request": [396, 437], "checklist": 396, "support": [396, 397, 398, 401, 403, 418, 419, 420, 422, 423, 424, 425, 427, 429, 432, 433, 435, 437, 438, 440, 441, 445, 446, 458, 459, 460, 462, 463, 465, 468, 469, 470, 473], "fx": 397, "introduct": [397, 398, 401, 402, 403, 418, 419, 420, 422, 423, 424, 425, 427, 429, 432, 435, 437, 438, 456, 458, 459, 460, 462, 463, 465, 467, 468, 469, 470, 471, 473], "mode": [397, 474], "matrix": [397, 398, 401, 418, 419, 420, 422, 423, 424, 425, 427, 429, 432, 435, 437, 438, 441, 458, 459, 460, 462, 463, 465, 468, 469, 473], "get": [397, 398, 400, 401, 418, 419, 420, 422, 423, 424, 425, 429, 430, 435, 437, 439, 450, 457, 458, 459, 460, 462, 463, 469, 473], "start": [397, 398, 400, 401, 418, 419, 420, 422, 423, 424, 425, 429, 430, 435, 437, 439, 440, 444, 450, 458, 459, 460, 462, 463, 469, 473], "post": [397, 436, 463], "static": [397, 463], "dynam": [397, 398, 463], "awar": [397, 436, 463], "exampl": [397, 398, 401, 407, 418, 419, 420, 422, 423, 424, 425, 426, 427, 435, 436, 437, 438, 441, 445, 458, 459, 460, 463, 465, 468, 469, 474], "note": [397, 466], "detail": 397, "problem": 397, "architectur": [398, 421, 432, 433], "search": [398, 456], "api": [398, 400, 401, 402, 407, 408, 418, 419, 420, 423, 424, 425, 430, 431, 435, 437, 439, 443, 457, 458, 459, 460, 462, 472], "usag": [398, 445, 456, 469, 471], "1": [398, 425, 428, 431, 436, 456, 474], "python": [398, 400, 419, 430, 435, 439, 443, 444, 451, 454, 462, 472], "yaml": [398, 402, 420, 425, 429, 473], "2": [398, 425, 428, 431, 436, 456, 474], "onli": [398, 465], "advanc": [398, 472], "custom": [398, 419, 435, 471], "secur": [399, 425], "polici": [399, 471], "report": 399, "vulner": 399, "instal": [400, 422, 433, 440, 442, 449, 450, 453], "from": [400, 402, 433, 436], "pypi": [400, 445], "select": [400, 450], "public": [400, 461], "event": [400, 461], "addit": 400, "research": 400, "collabor": 400, "work": [401, 463], "flow": [401, 463], "background": [401, 456], "ad": 401, "new": [401, 403, 451, 454, 471], "backend": [401, 463], "capabl": [401, 465], "implement": [401, 402], "onnxrtadaptor": 401, "how": [402, 403, 422], "add": 402, "an": 402, "list": [402, 426, 470], "need": 402, "design": [402, 421, 471], "framework": [402, 419, 420, 427, 429, 438, 462, 465, 468], "query_fw_cap": 402, "accord": [402, 403], "tune_cfg": 402, "prepar": [402, 422, 467], "fp32": [402, 427], "graph": 402, "run": [402, 422, 457], "sampl": [402, 430], "iter": 402, "calcul": 402, "rang": 402, "type": [403, 460], "like": 403, "int4": 403, "few": 403, "line": 403, "chang": [403, 431, 455, 457, 466], "defin": [403, 425], "abil": 403, "specif": [403, 420], "invok": 403, "kernel": 403, "tune": [403, 463, 468, 471], "configur": [403, 425, 429, 462, 467, 473], "us": [403, 419, 435], "summari": 403, "runtim": [405, 433, 463, 474], "torch": [406, 474], "mix": [412, 436, 437, 464], "precis": [412, 436, 437, 464], "build": [419, 428, 435], "file": [420, 429, 473], "user": [420, 425, 431, 462, 465, 472, 473], "workflow": 421, "diagnosi": 422, "featur": [422, 425, 429, 432, 445, 446, 450, 462, 463, 469, 473], "modifi": 422, "script": 422, "see": 422, "do": [422, 439], "paramet": 422, "descript": 422, "suggest": 422, "fallback": 422, "set": [422, 442, 456], "knowledg": [423, 474], "intermedi": 423, "layer": [423, 468], "self": 423, "distribut": [425, 445, 471], "infer": 425, "evalu": 425, "pure": 425, "horovodrun": 425, "execut": 425, "releas": [426, 451, 454, 466], "appendix": 427, "frequent": 428, "ask": 428, "question": 428, "issu": [428, 466], "3": [428, 440, 456], "4": [428, 447, 456, 461], "quick": [430, 444], "valid": [430, 433, 468, 474], "incompat": [431, 466], "between": 431, "v1": 431, "face": 431, "built": [431, 433, 435], "infrastructur": 432, "linux": 433, "prerequisit": 433, "binari": 433, "sourc": 433, "ai": 433, "kit": 433, "window": 433, "system": 433, "requir": [433, 449, 453], "hardwar": [433, 437, 474], "environ": [433, 442], "cpu": [433, 442, 474], "base": [433, 472], "64": 433, "compat": 433, "processor": 433, "gpu": 433, "": [433, 457], "xe": 433, "multipl": [433, 458, 474], "vendor": 433, "through": [433, 474], "softwar": [433, 437], "legal": 434, "inform": 434, "licens": 434, "citat": 434, "trademark": 434, "migrat": 436, "x": 436, "orchestr": [436, 459], "fp16": 437, "dure": [437, 464], "accuraci": [437, 463, 471], "driven": 437, "coder": [439, 443, 445, 456, 472], "what": [439, 457], "we": 439, "offer": 439, "jupyt": [439, 440, 451, 454], "lab": [439, 440], "extens": [439, 449, 450, 453, 456, 457, 474], "launcher": [439, 444], "contact": 439, "aw": 440, "amazon": 440, "sagemak": 440, "For": 440, "studio": 440, "notebook": 440, "instanc": 440, "guid": [440, 472], "bigdl": 441, "nano": 441, "platform": [442, 467], "best": [442, 450], "perform": [442, 467], "mkl": 442, "openmp": 442, "jemalloc": 442, "numa": 442, "control": 442, "variabl": 442, "frequenc": 442, "govern": 442, "enabl": [443, 450, 456], "bench": 443, "superbench": 443, "argument": 444, "v0": 447, "highlight": 447, "other": 447, "changelog": [448, 452], "neural_compressor_ext_lab": [449, 451], "uninstal": [449, 453], "develop": [449, 453], "jupyterlab": 450, "Or": 450, "let": 450, "u": 450, "help": 450, "you": 450, "pre": 450, "requisit": 450, "make": [451, 454, 457], "manual": [451, 454], "npm": [451, 454], "autom": [451, 454], "publish": [451, 454], "conda": [451, 454], "forg": [451, 454], "neural_compressor_ext_lab_alibaba": [453, 454], "log": 455, "unreleas": 455, "vscode": 456, "open": 456, "icon": 456, "5": 456, "welcom": 457, "your": 457, "v": 457, "folder": 457, "setup": 457, "up": 457, "straight": 457, "awai": 457, "explor": 457, "test": 457, "go": 457, "further": 457, "singl": 458, "One": 459, "shot": 459, "network": 460, "sparsiti": 460, "decai": 460, "regular": 460, "spars": 460, "deploy": 460, "refer": [460, 463, 465, 468], "full": 461, "68": 461, "2023": 461, "15": [461, 474], "2022": 461, "34": 461, "2021": 461, "2018": 461, "2020": 461, "style": 462, "access": 462, "fundament": [463, 468], "scheme": 463, "ipex": 463, "approach": 463, "With": 463, "without": 463, "specifi": 463, "rule": 463, "recip": 463, "devic": 463, "turn": 464, "off": 464, "weight": 465, "known": 466, "benefit": 467, "comparison": 467, "differ": 467, "smooth": 468, "quant": 468, "per": 468, "tensor": 468, "channel": 468, "limit": 468, "smoothquant": 468, "enhanc": 468, "wise": 468, "alpha": 468, "engin": 468, "tensorboard": 469, "space": 471, "exit": 471, "process": 471, "overview": 472, "zero": 472, "topic": 472, "innov": 472, "product": 472, "12": 474, "0": 474, "ptq": 474}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"block_mask": [[0, "module-block_mask"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "Module Contents": [[1, "module-contents"], [3, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [112, "module-contents"], [114, "module-contents"], [115, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [130, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [151, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [168, "module-contents"], [170, "module-contents"], [172, "module-contents"], [173, "module-contents"], [174, "module-contents"], [175, "module-contents"], [176, "module-contents"], [177, "module-contents"], [178, "module-contents"], [179, "module-contents"], [180, "module-contents"], [182, "module-contents"], [183, "module-contents"], [186, "module-contents"], [187, "module-contents"], [188, "module-contents"], [189, "module-contents"], [190, "module-contents"], [191, "module-contents"], [193, "module-contents"], [194, "module-contents"], [195, "module-contents"], [196, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [205, "module-contents"], [206, "module-contents"], [207, "module-contents"], [210, "module-contents"], [211, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"], [218, "module-contents"], [220, "module-contents"], [221, "module-contents"], [222, "module-contents"], [223, "module-contents"], [224, "module-contents"], [225, "module-contents"], [227, "module-contents"], [230, "module-contents"], [231, "module-contents"], [232, "module-contents"], [234, "module-contents"], [235, "module-contents"], [237, "module-contents"], [238, "module-contents"], [239, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [244, "module-contents"], [245, "module-contents"], [246, "module-contents"], [247, "module-contents"], [249, "module-contents"], [250, "module-contents"], [251, "module-contents"], [254, "module-contents"], [256, "module-contents"], [257, "module-contents"], [258, "module-contents"], [260, "module-contents"], [261, "module-contents"], [262, "module-contents"], [263, "module-contents"], [265, "module-contents"], [266, "module-contents"], [268, "module-contents"], [269, "module-contents"], [270, "module-contents"], [272, "module-contents"], [273, "module-contents"], [274, "module-contents"], [275, "module-contents"], [276, "module-contents"], [278, "module-contents"], [279, "module-contents"], [280, "module-contents"], [281, "module-contents"], [282, "module-contents"], [284, "module-contents"], [285, "module-contents"], [286, "module-contents"], [287, "module-contents"], [290, "module-contents"], [291, "module-contents"], [292, "module-contents"], [295, "module-contents"], [296, "module-contents"], [297, "module-contents"], [298, "module-contents"], [299, "module-contents"], [300, "module-contents"], [301, "module-contents"], [302, "module-contents"], [303, "module-contents"], [304, "module-contents"], [305, "module-contents"], [307, "module-contents"], [308, "module-contents"], [309, "module-contents"], [310, "module-contents"], [313, "module-contents"], [314, "module-contents"], [315, "module-contents"], [316, "module-contents"], [318, "module-contents"], [319, "module-contents"], [321, "module-contents"], [322, "module-contents"], [323, "module-contents"], [325, "module-contents"], [326, "module-contents"], [327, "module-contents"], [329, "module-contents"], [330, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [336, "module-contents"], [338, "module-contents"], [340, "module-contents"], [342, "module-contents"], [343, "module-contents"], [344, "module-contents"], [345, "module-contents"], [347, "module-contents"], [348, "module-contents"], [350, "module-contents"], [352, "module-contents"], [353, "module-contents"], [354, "module-contents"], [355, "module-contents"], [357, "module-contents"], [358, "module-contents"], [359, "module-contents"], [360, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [365, "module-contents"], [366, "module-contents"], [368, "module-contents"], [369, "module-contents"], [370, "module-contents"], [371, "module-contents"], [374, "module-contents"], [375, "module-contents"], [376, "module-contents"], [377, "module-contents"], [378, "module-contents"], [380, "module-contents"], [381, "module-contents"], [383, "module-contents"], [385, "module-contents"], [386, "module-contents"], [387, "module-contents"], [388, "module-contents"], [389, "module-contents"], [390, "module-contents"], [391, "module-contents"], [392, "module-contents"]], "Classes": [[1, "classes"], [3, "classes"], [11, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [101, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [112, "classes"], [114, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [130, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [145, "classes"], [146, "classes"], [148, "classes"], [149, "classes"], [153, "classes"], [154, "classes"], [158, "classes"], [159, "classes"], [160, "classes"], [161, "classes"], [162, "classes"], [164, "classes"], [165, "classes"], [168, "classes"], [172, "classes"], [173, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [177, "classes"], [179, "classes"], [180, "classes"], [182, "classes"], [183, "classes"], [186, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [222, "classes"], [223, "classes"], [225, "classes"], [230, "classes"], [231, "classes"], [232, "classes"], [234, "classes"], [235, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [251, "classes"], [252, "classes"], [253, "classes"], [254, "classes"], [255, "classes"], [256, "classes"], [257, "classes"], [258, "classes"], [263, "classes"], [264, "classes"], [265, "classes"], [268, "classes"], [271, "classes"], [272, "classes"], [273, "classes"], [274, "classes"], [275, "classes"], [276, "classes"], [278, "classes"], [280, "classes"], [281, "classes"], [282, "classes"], [284, "classes"], [285, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [290, "classes"], [291, "classes"], [292, "classes"], [295, "classes"], [297, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [302, "classes"], [303, "classes"], [304, "classes"], [305, "classes"], [307, "classes"], [308, "classes"], [309, "classes"], [310, "classes"], [313, "classes"], [314, "classes"], [315, "classes"], [316, "classes"], [318, "classes"], [321, "classes"], [324, "classes"], [325, "classes"], [327, "classes"], [328, "classes"], [329, "classes"], [330, "classes"], [331, "classes"], [332, "classes"], [333, "classes"], [334, "classes"], [335, "classes"], [336, "classes"], [338, "classes"], [340, "classes"], [342, "classes"], [343, "classes"], [344, "classes"], [345, "classes"], [347, "classes"], [348, "classes"], [350, "classes"], [352, "classes"], [354, "classes"], [355, "classes"], [357, "classes"], [360, "classes"], [361, "classes"], [362, "classes"], [363, "classes"], [364, "classes"], [365, "classes"], [366, "classes"], [368, "classes"], [369, "classes"], [370, "classes"], [371, "classes"], [374, "classes"], [375, "classes"], [376, "classes"], [377, "classes"], [378, "classes"], [380, "classes"], [381, "classes"], [384, "classes"], [385, "classes"], [386, "classes"], [387, "classes"], [389, "classes"], [391, "classes"], [392, "classes"]], "Functions": [[1, "functions"], [13, "functions"], [16, "functions"], [34, "functions"], [42, "functions"], [43, "functions"], [44, "functions"], [66, "functions"], [67, "functions"], [69, "functions"], [103, "functions"], [104, "functions"], [115, "functions"], [117, "functions"], [147, "functions"], [148, "functions"], [149, "functions"], [151, "functions"], [154, "functions"], [155, "functions"], [156, "functions"], [157, "functions"], [158, "functions"], [160, "functions"], [163, "functions"], [165, "functions"], [168, "functions"], [170, "functions"], [172, "functions"], [174, "functions"], [175, "functions"], [176, "functions"], [177, "functions"], [178, "functions"], [180, "functions"], [189, "functions"], [190, "functions"], [198, "functions"], [200, "functions"], [204, "functions"], [207, "functions"], [208, "functions"], [209, "functions"], [212, "functions"], [214, "functions"], [215, "functions"], [216, "functions"], [217, "functions"], [219, "functions"], [221, "functions"], [222, "functions"], [224, "functions"], [227, "functions"], [234, "functions"], [242, "functions"], [244, "functions"], [248, "functions"], [251, "functions"], [252, "functions"], [253, "functions"], [255, "functions"], [256, "functions"], [257, "functions"], [260, "functions"], [261, "functions"], [262, "functions"], [265, "functions"], [266, "functions"], [268, "functions"], [269, "functions"], [270, "functions"], [271, "functions"], [272, "functions"], [279, "functions"], [286, "functions"], [290, "functions"], [295, "functions"], [296, "functions"], [297, "functions"], [299, "functions"], [304, "functions"], [310, "functions"], [314, "functions"], [316, "functions"], [318, "functions"], [319, "functions"], [321, "functions"], [322, "functions"], [323, "functions"], [324, "functions"], [325, "functions"], [326, "functions"], [330, "functions"], [334, "functions"], [336, "functions"], [353, "functions"], [358, "functions"], [359, "functions"], [363, "functions"], [371, "functions"], [375, "functions"], [377, "functions"], [378, "functions"], [380, "functions"], [383, "functions"], [384, "functions"], [386, "functions"], [387, "functions"], [388, "functions"], [390, "functions"], [391, "functions"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "Subpackages": [[2, "subpackages"], [17, "subpackages"], [86, "subpackages"], [110, "subpackages"], [111, "subpackages"], [113, "subpackages"], [167, "subpackages"], [169, "subpackages"], [184, "subpackages"], [209, "subpackages"], [228, "subpackages"], [253, "subpackages"], [264, "subpackages"], [288, "subpackages"], [306, "subpackages"], [317, "subpackages"], [367, "subpackages"]], "Submodules": [[2, "submodules"], [12, "submodules"], [17, "submodules"], [29, "submodules"], [50, "submodules"], [75, "submodules"], [86, "submodules"], [94, "submodules"], [100, "submodules"], [105, "submodules"], [110, "submodules"], [111, "submodules"], [113, "submodules"], [116, "submodules"], [129, "submodules"], [144, "submodules"], [150, "submodules"], [160, "submodules"], [166, "submodules"], [167, "submodules"], [169, "submodules"], [171, "submodules"], [181, "submodules"], [185, "submodules"], [192, "submodules"], [204, "submodules"], [208, "submodules"], [212, "submodules"], [219, "submodules"], [226, "submodules"], [229, "submodules"], [236, "submodules"], [248, "submodules"], [252, "submodules"], [255, "submodules"], [259, "submodules"], [264, "submodules"], [271, "submodules"], [277, "submodules"], [283, "submodules"], [289, "submodules"], [293, "submodules"], [306, "submodules"], [312, "submodules"], [317, "submodules"], [324, "submodules"], [328, "submodules"], [339, "submodules"], [341, "submodules"], [346, "submodules"], [349, "submodules"], [351, "submodules"], [356, "submodules"], [367, "submodules"], [373, "submodules"], [379, "submodules"], [384, "submodules"]], "Package Contents": [[2, "package-contents"], [29, "package-contents"], [160, "package-contents"], [192, "package-contents"], [204, "package-contents"], [208, "package-contents"], [209, "package-contents"], [212, "package-contents"], [219, "package-contents"], [236, "package-contents"], [248, "package-contents"], [252, "package-contents"], [253, "package-contents"], [255, "package-contents"], [264, "package-contents"], [271, "package-contents"], [283, "package-contents"], [288, "package-contents"], [289, "package-contents"], [306, "package-contents"], [324, "package-contents"], [328, "package-contents"], [367, "package-contents"], [384, "package-contents"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[44, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[45, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[46, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[110, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[139, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[141, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[142, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[147, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[148, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[149, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[150, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[151, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[152, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[153, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[154, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[155, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[156, "module-neural_compressor.adaptor.torch_utils.util"]], "}": [[156, "id3"]], "neural_compressor.adaptor.torch_utils.weight_only": [[157, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "neural_compressor.algorithm.algorithm": [[158, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[159, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[160, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[161, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[162, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[163, "module-neural_compressor.benchmark"]], "neural_compressor.compression.callbacks": [[164, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[165, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[166, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[167, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[168, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner": [[169, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[170, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "neural_compressor.compression.pruner.model_slim": [[171, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[172, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[173, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns": [[174, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.pruners": [[175, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.regs": [[176, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[177, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.utils": [[178, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.conf.config": [[179, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[180, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[181, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[182, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[183, "module-neural_compressor.config"]], "neural_compressor.contrib": [[184, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[185, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[186, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[187, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[188, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[189, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[190, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[191, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[192, "module-neural_compressor.data.dataloaders"]], "Attributes": [[192, "attributes"], [200, "attributes"], [209, "attributes"], [244, "attributes"], [253, "attributes"], [264, "attributes"], [288, "attributes"], [328, "attributes"], [378, "attributes"], [384, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[193, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[194, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[195, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[196, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[197, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[198, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[199, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[200, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[201, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[202, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[203, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[204, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[205, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[206, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[207, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[208, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[209, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[210, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[211, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[212, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[213, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[214, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[215, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[216, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[217, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[218, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[219, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[220, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[221, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[222, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[223, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[224, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[225, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[226, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[227, "module-neural_compressor.experimental.compression.pruning"]], "neural_compressor.experimental.contrib": [[228, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[229, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[230, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[231, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[232, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[233, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[234, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[235, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[236, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[237, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[238, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[239, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[240, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[241, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[242, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[243, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[244, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[245, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[246, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[247, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[248, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[249, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[250, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[251, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[252, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[253, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[254, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[255, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[256, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[257, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[258, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[259, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[260, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[261, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[262, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.graph_optimization": [[263, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[264, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[265, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[266, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[267, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[268, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[269, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[270, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[271, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[272, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[273, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[274, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[275, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[276, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[277, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[278, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[279, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[280, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[281, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[282, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[283, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[284, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[285, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[286, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[287, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[288, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[289, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[290, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[291, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[292, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[293, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[294, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[295, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[296, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[297, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[298, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[299, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[300, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[301, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[302, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[303, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[304, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[305, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[306, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.mse": [[307, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[308, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[309, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[310, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils.constant": [[311, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[312, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[313, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[314, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[315, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[316, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor": [[317, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[318, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[319, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[320, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[321, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[322, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[323, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[324, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[325, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[326, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[327, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[328, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[329, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[330, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[331, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[332, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[333, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[334, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[335, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[336, "module-neural_compressor.objective"]], "neural_compressor.profiling": [[337, "module-neural_compressor.profiling"]], "neural_compressor.profiling.parser.factory": [[338, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[339, "module-neural_compressor.profiling.parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[340, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[341, "module-neural_compressor.profiling.parser.onnx_parser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[342, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "neural_compressor.profiling.parser.parser": [[343, "module-neural_compressor.profiling.parser.parser"]], "neural_compressor.profiling.parser.result": [[344, "module-neural_compressor.profiling.parser.result"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[345, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[346, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[347, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "neural_compressor.profiling.profiler.factory": [[348, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[349, "module-neural_compressor.profiling.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[350, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[351, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[352, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[353, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "neural_compressor.profiling.profiler.profiler": [[354, "module-neural_compressor.profiling.profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[355, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[356, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[357, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[358, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "neural_compressor.quantization": [[359, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[360, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[361, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[362, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[363, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[364, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[365, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[366, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[367, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[368, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[369, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[370, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[371, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[372, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[373, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[374, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[375, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[376, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[377, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[378, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[379, "module-neural_compressor.template"]], "neural_compressor.training": [[380, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[381, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[382, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[383, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[384, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[385, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[386, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[387, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[388, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[389, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[390, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[391, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[392, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[393, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[394, "intel-neural-compressor-documentation"], [475, "intel-neural-compressor-documentation"]], "Sections": [[394, "sections"], [475, "sections"]], "Contributor Covenant Code of Conduct": [[395, "contributor-covenant-code-of-conduct"], [396, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[395, "our-pledge"]], "Our Standards": [[395, "our-standards"]], "Our Responsibilities": [[395, "our-responsibilities"]], "Scope": [[395, "scope"]], "Enforcement": [[395, "enforcement"]], "Attribution": [[395, "attribution"]], "Contribution Guidelines": [[396, "contribution-guidelines"]], "Pull Request Checklist": [[396, "pull-request-checklist"]], "Pull Request Template": [[396, "pull-request-template"]], "Support": [[396, "support"]], "FX": [[397, "fx"]], "Introduction": [[397, "introduction"], [398, "introduction"], [401, "introduction"], [402, "introduction"], [403, "introduction"], [418, "introduction"], [419, "introduction"], [420, "introduction"], [423, "introduction"], [424, "introduction"], [425, "introduction"], [427, "introduction"], [429, "introduction"], [432, "introduction"], [435, "introduction"], [437, "introduction"], [438, "introduction"], [458, "introduction"], [459, "introduction"], [460, "introduction"], [462, "introduction"], [465, "introduction"], [467, "introduction"], [468, "introduction"], [469, "introduction"], [470, "introduction"], [471, "introduction"], [473, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[397, "fx-mode-support-matrix-in-neural-compressor"]], "Get Started": [[397, "get-started"], [463, "get-started"]], "Post Training Static Quantization": [[397, "post-training-static-quantization"], [463, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[397, "post-training-dynamic-quantization"], [463, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[397, "quantization-aware-training"]], "Examples": [[397, "examples"], [398, "examples"], [418, "examples"], [419, "examples"], [420, "examples"], [423, "examples"], [424, "examples"], [425, "examples"], [426, "examples"], [427, "examples"], [436, "examples"], [437, "examples"], [438, "examples"], [459, "examples"], [460, "examples"], [463, "examples"], [465, "examples"], [469, "examples"]], "Note": [[397, "note"]], "Details": [[397, "details"]], "Common Problem": [[397, "common-problem"]], "Dynamic Quantization": [[397, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[397, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[398, "neural-architecture-search"]], "Basic NAS": [[398, "basic-nas"]], "Dynamic NAS": [[398, "dynamic-nas"]], "NAS Support Matrix": [[398, "nas-support-matrix"]], "Get Started with NAS API": [[398, "get-started-with-nas-api"]], "Basic Usage": [[398, "basic-usage"]], "1. Python code + YAML": [[398, "python-code-yaml"]], "2. Python code only": [[398, "python-code-only"]], "Advanced Usage (Custom NAS)": [[398, "advanced-usage-custom-nas"]], "Security Policy": [[399, "security-policy"]], "Report a Vulnerability": [[399, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[400, "intel-neural-compressor"], [456, "intel-neural-compressor"]], "Installation": [[400, "installation"], [433, "installation"], [450, "installation"]], "Install from pypi": [[400, "install-from-pypi"]], "Getting Started": [[400, "getting-started"], [430, "getting-started"]], "Quantization with Python API": [[400, "quantization-with-python-api"], [430, "quantization-with-python-api"]], "Documentation": [[400, "documentation"]], "Selected Publications/Events": [[400, "selected-publications-events"]], "Additional Content": [[400, "additional-content"]], "Research Collaborations": [[400, "research-collaborations"]], "Adaptor": [[401, "adaptor"], [404, "adaptor"]], "Adaptor Support Matrix": [[401, "adaptor-support-matrix"]], "Working Flow": [[401, "working-flow"], [463, "working-flow"]], "Get Started with Adaptor API": [[401, "get-started-with-adaptor-api"]], "Query API": [[401, "query-api"]], "Background": [[401, "background"]], "Query API Introduction": [[401, "query-api-introduction"]], "Example of Adding a New Backend Support": [[401, "example-of-adding-a-new-backend-support"]], "Capability": [[401, "capability"]], "Implement ONNXRTAdaptor Class": [[401, "implement-onnxrtadaptor-class"]], "How to Add An Adaptor": [[402, "how-to-add-an-adaptor"]], "API List that Need to Implement": [[402, "api-list-that-need-to-implement"]], "Design the framework YAML": [[402, "design-the-framework-yaml"]], "Add query_fw_capability to Adaptor": [[402, "add-query-fw-capability-to-adaptor"]], "Add quantize API according to tune_cfg": [[402, "add-quantize-api-according-to-tune-cfg"]], "Prepare calibration model from fp32 graph": [[402, "prepare-calibration-model-from-fp32-graph"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[402, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Calculate the data range and generate quantized model": [[402, "calculate-the-data-range-and-generate-quantized-model"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[403, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "Define the Quantization Ability of the Specific Operator": [[403, "define-the-quantization-ability-of-the-specific-operator"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[403, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Use the New Data Type": [[403, "use-the-new-data-type"]], "Summary": [[403, "summary"]], "ONNX Runtime": [[405, "onnx-runtime"]], "Torch Utils": [[406, "torch-utils"]], "API Document Example": [[407, "api-document-example"]], "APIs": [[408, "apis"]], "Benchmark": [[409, "benchmark"], [436, "benchmark"], [462, "benchmark"]], "Compression": [[410, "compression"]], "Config": [[411, "config"]], "Mix Precision": [[412, "mix-precision"], [436, "mix-precision"]], "Model": [[413, "model"], [438, "model"]], "Objective": [[414, "objective"], [458, "objective"]], "Quantization": [[415, "quantization"], [462, "quantization"], [463, "quantization"]], "Strategy": [[416, "strategy"]], "Training": [[417, "training"]], "Benchmarking": [[418, "benchmarking"]], "Benchmark Support Matrix": [[418, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[418, "get-started-with-benchmark-api"]], "DataLoader": [[419, "dataloader"]], "Supported Framework Dataloader Matrix": [[419, "supported-framework-dataloader-matrix"]], "Get Started with DataLoader": [[419, "get-started-with-dataloader"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[419, "use-intel-neural-compressor-dataloader-api"]], "Build Custom Dataloader with Python API": [[419, "build-custom-dataloader-with-python-api"]], "Dataset": [[420, "dataset"]], "Supported Framework Dataset Matrix": [[420, "supported-framework-dataset-matrix"]], "TensorFlow": [[420, "tensorflow"], [435, "tensorflow"], [470, "tensorflow"]], "PyTorch": [[420, "pytorch"], [435, "pytorch"], [464, "pytorch"]], "MXNet": [[420, "mxnet"], [435, "mxnet"], [470, "mxnet"]], "ONNXRT": [[420, "onnxrt"], [435, "onnxrt"], [470, "onnxrt"]], "Get start with Dataset API": [[420, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[420, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[420, "user-specific-dataset"]], "Design": [[421, "design"], [471, "design"], [471, "id1"], [471, "id3"], [471, "id5"], [471, "id7"], [471, "id9"], [471, "id11"], [471, "id13"], [471, "id15"], [471, "id17"], [471, "id19"], [471, "id21"]], "Architecture": [[421, "architecture"], [432, "architecture"]], "Workflow": [[421, "workflow"]], "Diagnosis": [[422, "diagnosis"]], "Diagnosis introduction": [[422, "diagnosis-introduction"]], "Supported feature matrix": [[422, "supported-feature-matrix"]], "Get started": [[422, "get-started"]], "Install Intel\u00ae Neural Compressor": [[422, "install-intel-neural-compressor"]], "Modify script": [[422, "modify-script"]], "Quantization diagnosis": [[422, "quantization-diagnosis"]], "Benchmark diagnosis": [[422, "benchmark-diagnosis"]], "Example": [[422, "example"], [435, "example"], [441, "example"], [445, "example"], [458, "example"], [468, "example"]], "Prepare dataset": [[422, "prepare-dataset"]], "Run quantization script": [[422, "run-quantization-script"]], "Run benchmark script": [[422, "run-benchmark-script"]], "See quantization data": [[422, "see-quantization-data"]], "How to do diagnosis": [[422, "how-to-do-diagnosis"]], "Parameter description": [[422, "parameter-description"]], "Diagnosis suggestions": [[422, "diagnosis-suggestions"]], "Fallback setting example": [[422, "fallback-setting-example"]], "See profiling data": [[422, "see-profiling-data"]], "Distillation": [[423, "distillation"], [436, "distillation"], [462, "distillation"]], "Knowledge Distillation": [[423, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[423, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[423, "self-distillation"]], "Distillation Support Matrix": [[423, "distillation-support-matrix"]], "Get Started with Distillation API": [[423, "get-started-with-distillation-api"]], "Distillation for Quantization": [[424, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[424, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[424, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[425, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[425, "supported-feature-matrix"], [429, "supported-feature-matrix"], [432, "supported-feature-matrix"], [462, "supported-feature-matrix"], [463, "supported-feature-matrix"], [469, "supported-feature-matrix"], [473, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[425, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[425, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[425, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[425, "horovodrun-execution"]], "Security": [[425, "security"]], "PyTorch Examples:": [[425, "pytorch-examples"]], "TensorFlow Examples:": [[425, "tensorflow-examples"]], "Example List": [[426, "example-list"]], "Release Data": [[426, "release-data"]], "Export": [[427, "export"]], "Supported Framework Model Matrix": [[427, "supported-framework-model-matrix"], [438, "supported-framework-model-matrix"], [465, "supported-framework-model-matrix"]], "PyTorch Model": [[427, "pytorch-model"]], "FP32 Model Export": [[427, "fp32-model-export"], [427, "id1"]], "INT8 Model Export": [[427, "int8-model-export"], [427, "id2"]], "Tensorflow Model": [[427, "tensorflow-model"]], "Appendix": [[427, "appendix"]], "Supported quantized ops": [[427, "supported-quantized-ops"]], "Frequently Asked Questions": [[428, "frequently-asked-questions"]], "Common Build Issues": [[428, "common-build-issues"]], "Issue 1:": [[428, "issue-1"]], "Issue 2:": [[428, "issue-2"]], "Issue 3:": [[428, "issue-3"]], "Issue 4:": [[428, "issue-4"]], "Framework YAML Configuration Files": [[429, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[429, "get-started-with-framework-yaml-files"]], "Quick Samples": [[430, "quick-samples"]], "Validated Models": [[430, "validated-models"], [468, "validated-models"], [474, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[431, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[431, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[431, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[432, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[433, "linux-installation"]], "Prerequisites": [[433, "prerequisites"], [433, "id1"]], "Install from Binary": [[433, "install-from-binary"], [433, "id2"]], "Install from Source": [[433, "install-from-source"], [433, "id3"]], "Install from AI Kit": [[433, "install-from-ai-kit"]], "Windows Installation": [[433, "windows-installation"]], "System Requirements": [[433, "system-requirements"]], "Validated Hardware Environment": [[433, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[433, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[433, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[433, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[433, "validated-software-environment"]], "Legal Information": [[434, "legal-information"]], "License": [[434, "license"]], "Citation": [[434, "citation"]], "Trademarks": [[434, "trademarks"]], "Metrics": [[435, "metrics"]], "Supported Built-in Metric Matrix": [[435, "supported-built-in-metric-matrix"]], "Get Started with Metric": [[435, "get-started-with-metric"]], "Use Intel\u00ae Neural Compressor Metric API": [[435, "use-intel-neural-compressor-metric-api"]], "Build Custom Metric with Python API": [[435, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[436, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[436, "model-quantization"]], "Post-training Quantization": [[436, "post-training-quantization"]], "Quantization Aware Training": [[436, "quantization-aware-training"], [463, "quantization-aware-training"], [463, "id1"]], "Pruning": [[436, "pruning"], [460, "pruning"], [462, "pruning"]], "Orchestration": [[436, "orchestration"]], "Mixed Precision": [[437, "mixed-precision"]], "Mixed Precision Support Matrix": [[437, "mixed-precision-support-matrix"]], "Hardware and Software requests for BF16": [[437, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[437, "hardware-and-software-requests-for-fp16"]], "During quantization mixed precision": [[437, "during-quantization-mixed-precision"]], "Accuracy-driven mixed precision": [[437, "accuracy-driven-mixed-precision"]], "Get Started with Mixed Precision API": [[437, "get-started-with-mixed-precision-api"]], "Neural Coder": [[439, "neural-coder"], [456, "neural-coder"], [456, "id1"]], "What do we offer?": [[439, "what-do-we-offer"]], "Getting Started!": [[439, "getting-started"], [450, "getting-started"]], "Jupyter Lab Extension": [[439, "jupyter-lab-extension"]], "Python Launcher": [[439, "python-launcher"], [444, "python-launcher"]], "Python API": [[439, "python-api"]], "Contact": [[439, "contact"]], "AWS Amazon SageMaker Support": [[440, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[440, "start-jupyter-lab-3"]], "For SageMaker Studio": [[440, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[440, "for-sagemaker-notebook-instance"]], "Installation Guide": [[440, "installation-guide"]], "BigDL Nano Support": [[441, "bigdl-nano-support"]], "Support Matrix": [[441, "support-matrix"]], "Intel CPU Platforms: Best Performance Setting": [[442, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[442, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[442, "install-numa-controller"]], "Environment Variables": [[442, "environment-variables"]], "Frequency Governers": [[442, "frequency-governers"]], "Neural Coder as Python API": [[443, "neural-coder-as-python-api"]], "Enable": [[443, "enable"]], "Bench": [[443, "bench"]], "SuperBench": [[443, "superbench"]], "Quick-Start": [[444, "quick-start"]], "Launcher Arguments (Optional)": [[444, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[445, "neural-coder-for-quantization"]], "Features Supported": [[445, "features-supported"]], "Models Supported": [[445, "models-supported"]], "Usage": [[445, "usage"], [469, "usage"], [469, "id1"], [471, "usage"], [471, "id2"], [471, "id4"], [471, "id6"], [471, "id8"], [471, "id10"], [471, "id12"], [471, "id14"], [471, "id16"], [471, "id18"], [471, "id20"], [471, "id22"]], "PyPI distribution:": [[445, "pypi-distribution"]], "Supported Optimization Features": [[446, "supported-optimization-features"]], "v0.4": [[447, "v0-4"]], "Highlights": [[447, "highlights"]], "Others": [[447, "others"]], "Changelog": [[448, "changelog"], [452, "changelog"]], "neural_compressor_ext_lab": [[449, "neural-compressor-ext-lab"]], "Requirements": [[449, "requirements"], [453, "requirements"]], "Install": [[449, "install"], [453, "install"]], "Uninstall": [[449, "uninstall"], [453, "uninstall"]], "Contributing": [[449, "contributing"], [453, "contributing"]], "Development install": [[449, "development-install"], [453, "development-install"]], "Development uninstall": [[449, "development-uninstall"], [453, "development-uninstall"]], "Packaging the extension": [[449, "packaging-the-extension"], [453, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[450, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[450, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[450, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[450, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[451, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[451, "manual-release"], [454, "manual-release"]], "Python package": [[451, "python-package"], [454, "python-package"]], "NPM package": [[451, "npm-package"], [454, "npm-package"]], "Automated releases with the Jupyter Releaser": [[451, "automated-releases-with-the-jupyter-releaser"], [454, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[451, "publishing-to-conda-forge"], [454, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[453, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[454, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[455, "change-log"]], "[Unreleased]": [[455, "unreleased"]], "Background Introduction": [[456, "background-introduction"]], "Neural Coder Extension in VSCode": [[456, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[456, "neural-coder-extension-usage"]], "1. Open": [[456, "open"]], "2. Search": [[456, "search"]], "3. Setting": [[456, "setting"]], "4. Icon": [[456, "icon"]], "5. optimization (quantization)": [[456, "optimization-quantization"]], "5.1 Enable": [[456, "enable"]], "5.2 Auto": [[456, "auto"]], "Welcome to your VS Code Extension": [[457, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[457, "what-s-in-the-folder"]], "Setup": [[457, "setup"]], "Get up and running straight away": [[457, "get-up-and-running-straight-away"]], "Make changes": [[457, "make-changes"]], "Explore the API": [[457, "explore-the-api"]], "Run tests": [[457, "run-tests"]], "Go further": [[457, "go-further"]], "Single Objective": [[458, "single-objective"]], "Multiple Objectives": [[458, "multiple-objectives"]], "Objective Support Matrix": [[458, "objective-support-matrix"]], "Get Started with Objective API": [[458, "get-started-with-objective-api"]], "Config Single Objective": [[458, "config-single-objective"]], "Config Multiple Objectives": [[458, "config-multiple-objectives"]], "Optimization Orchestration": [[459, "optimization-orchestration"]], "One-shot": [[459, "one-shot"]], "Orchestration Support Matrix": [[459, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[459, "get-started-with-orchestration-api"]], "Neural Network Pruning": [[460, "neural-network-pruning"]], "Pruning Patterns": [[460, "pruning-patterns"]], "Pruning Criteria": [[460, "pruning-criteria"]], "Pruning Types": [[460, "pruning-types"]], "Pruning Schedules": [[460, "pruning-schedules"]], "Pruning Scope": [[460, "pruning-scope"]], "Sparsity Decay Types": [[460, "sparsity-decay-types"]], "Regularization": [[460, "regularization"]], "Pruning Support Matrix": [[460, "pruning-support-matrix"]], "Get Started with Pruning API": [[460, "get-started-with-pruning-api"]], "Sparse Model Deployment": [[460, "sparse-model-deployment"]], "Reference": [[460, "reference"], [463, "reference"], [465, "reference"], [468, "reference"]], "Full Publications/Events (68)": [[461, "full-publications-events-68"]], "2023 (15)": [[461, "id1"]], "2022 (34)": [[461, "id2"]], "2021 (15)": [[461, "id3"]], "2018 - 2020 (4)": [[461, "id4"]], "Pythonic Style Access for Configurations": [[462, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[462, "pythonic-api-for-user-configurations"], [462, "id1"]], "Pythonic API for Framework Configurations": [[462, "pythonic-api-for-framework-configurations"], [462, "id2"]], "Get Started with Pythonic API for Configurations": [[462, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[462, "nas"]], "Quantization Introduction": [[463, "quantization-introduction"]], "Quantization Fundamentals": [[463, "quantization-fundamentals"], [468, "quantization-fundamentals"]], "Quantization Support Matrix": [[463, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[463, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[463, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[463, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[463, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[463, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[463, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[463, "with-or-without-accuracy-aware-tuning"]], "Post Training Quantization": [[463, "post-training-quantization"]], "Specify Quantization Rules": [[463, "specify-quantization-rules"]], "Specify Quantization Recipes": [[463, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[463, "specify-quantization-backend-and-device"]], "Turn OFF Auto Mixed Precision during Quantization": [[464, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[464, "tensorflow"]], "Weight Only Quantization": [[465, "weight-only-quantization"]], "Quantization Capability:": [[465, "quantization-capability"]], "User code:": [[465, "user-code"]], "Release": [[466, "release"]], "Release Notes": [[466, "release-notes"]], "Known Issues": [[466, "known-issues"]], "Incompatible Changes": [[466, "incompatible-changes"]], "SigOpt Strategy": [[467, "sigopt-strategy"]], "Preparation": [[467, "preparation"]], "SigOpt Platform": [[467, "sigopt-platform"]], "Neural Compressor Configuration": [[467, "neural-compressor-configuration"]], "Performance": [[467, "performance"]], "Benefit of SigOpt Strategy": [[467, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[467, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[468, "smooth-quant"]], "Per-tensor & Per-channel": [[468, "per-tensor-per-channel"]], "Per-tensor example": [[468, "per-tensor-example"]], "Per-channel example": [[468, "per-channel-example"]], "Matmul quantization example": [[468, "matmul-quantization-example"]], "Per-channel limitation": [[468, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[468, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[468, "smoothquant"]], "Our enhancement:": [[468, "our-enhancement"]], "Algorithm: Layer-wise Auto-tuning of $\\alpha$.": [[468, "algorithm-layer-wise-auto-tuning-of-alpha"]], "Engineering": [[468, "engineering"]], "Supported Framework Matrix": [[468, "supported-framework-matrix"]], "TensorBoard": [[469, "tensorboard"]], "Get Started with TensorBoard": [[469, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[469, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[469, "tensorflow-tensorboard"]], "PyTorch Examples": [[469, "pytorch-examples"]], "TensorFlow Examples": [[469, "tensorflow-examples"]], "Transform": [[470, "transform"]], "Transform Support List": [[470, "transform-support-list"]], "Pytorch": [[470, "pytorch"]], "Tuning Strategies": [[471, "tuning-strategies"]], "Strategy Design": [[471, "strategy-design"]], "Tuning Space": [[471, "tuning-space"]], "Exit Policy": [[471, "exit-policy"]], "Accuracy Criteria": [[471, "accuracy-criteria"]], "Tuning Process": [[471, "tuning-process"]], "Tuning Algorithms": [[471, "tuning-algorithms"]], "Auto": [[471, "auto"]], "Conservative Tuning": [[471, "conservative-tuning"]], "Basic": [[471, "basic"]], "MSE": [[471, "mse"]], "MSE_V2": [[471, "mse-v2"]], "HAWQ_V2": [[471, "hawq-v2"]], "Bayesian": [[471, "bayesian"]], "Exhaustive": [[471, "exhaustive"]], "Random": [[471, "random"]], "SigOpt": [[471, "sigopt"]], "TPE": [[471, "tpe"]], "Distributed Tuning": [[471, "distributed-tuning"]], "Customize a New Tuning Strategy": [[471, "customize-a-new-tuning-strategy"]], "User Guide": [[472, "user-guide"]], "Overview": [[472, "overview"]], "Python-based APIs": [[472, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[472, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[472, "advanced-topics"]], "Innovations for Productivity": [[472, "innovations-for-productivity"]], "User YAML Configuration Files": [[473, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[473, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[474, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.12.0": [[474, "tensorflow-models-with-intel-tensorflow-2-12-0"]], "TensorFlow Models with Intel\u00ae Extension for TensorFlow* 1.2.0": [[474, "tensorflow-models-with-intel-extension-for-tensorflow-1-2-0"]], "PyTorch Models with Torch 2.0.1+cpu in PTQ Mode": [[474, "pytorch-models-with-torch-2-0-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.0.1+cpu in QAT Mode": [[474, "pytorch-models-with-torch-2-0-1-cpu-in-qat-mode"]], "PyTorch Models with Intel\u00ae Extension for PyTorch* 2.0.1+cpu": [[474, "pytorch-models-with-intel-extension-for-pytorch-2-0-1-cpu"]], "ONNX Models with ONNX Runtime 1.15.0": [[474, "onnx-models-with-onnx-runtime-1-15-0"]], "Validated Pruning Examples": [[474, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[474, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[474, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"block_mask": [[0, "module-block_mask"]], "module": [[0, "module-block_mask"], [1, "module-neural_compressor.adaptor.adaptor"], [2, "module-neural_compressor.adaptor"], [3, "module-neural_compressor.adaptor.keras"], [4, "module-neural_compressor.adaptor.keras_utils.conv2d"], [5, "module-neural_compressor.adaptor.keras_utils.dense"], [6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"], [7, "module-neural_compressor.adaptor.keras_utils"], [8, "module-neural_compressor.adaptor.keras_utils.pool2d"], [9, "module-neural_compressor.adaptor.keras_utils.quantizer"], [10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"], [11, "module-neural_compressor.adaptor.mxnet"], [12, "module-neural_compressor.adaptor.mxnet_utils"], [13, "module-neural_compressor.adaptor.mxnet_utils.util"], [14, "module-neural_compressor.adaptor.onnxrt"], [15, "module-neural_compressor.adaptor.ox_utils.calibration"], [16, "module-neural_compressor.adaptor.ox_utils.calibrator"], [17, "module-neural_compressor.adaptor.ox_utils"], [18, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [20, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [22, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [23, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [26, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [29, "module-neural_compressor.adaptor.ox_utils.operators"], [30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [33, "module-neural_compressor.adaptor.ox_utils.operators.norm"], [34, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [35, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"], [38, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [39, "module-neural_compressor.adaptor.ox_utils.operators.split"], [40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"], [41, "module-neural_compressor.adaptor.ox_utils.quantizer"], [42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"], [43, "module-neural_compressor.adaptor.ox_utils.util"], [44, "module-neural_compressor.adaptor.pytorch"], [45, "module-neural_compressor.adaptor.query"], [46, "module-neural_compressor.adaptor.tensorflow"], [47, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [109, "module-neural_compressor.adaptor.tf_utils.graph_util"], [110, "module-neural_compressor.adaptor.tf_utils"], [111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [139, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"], [140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"], [141, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [142, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [143, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [144, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [145, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [146, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [147, "module-neural_compressor.adaptor.tf_utils.util"], [148, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [149, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [150, "module-neural_compressor.adaptor.torch_utils"], [151, "module-neural_compressor.adaptor.torch_utils.mixed_precision"], [152, "module-neural_compressor.adaptor.torch_utils.model_wrapper"], [153, "module-neural_compressor.adaptor.torch_utils.pattern_detector"], [154, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [155, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [156, "module-neural_compressor.adaptor.torch_utils.util"], [157, "module-neural_compressor.adaptor.torch_utils.weight_only"], [158, "module-neural_compressor.algorithm.algorithm"], [159, "module-neural_compressor.algorithm.fast_bias_correction"], [160, "module-neural_compressor.algorithm"], [161, "module-neural_compressor.algorithm.smooth_quant"], [162, "module-neural_compressor.algorithm.weight_correction"], [163, "module-neural_compressor.benchmark"], [164, "module-neural_compressor.compression.callbacks"], [165, "module-neural_compressor.compression.distillation.criterions"], [166, "module-neural_compressor.compression.distillation"], [167, "module-neural_compressor.compression"], [168, "module-neural_compressor.compression.pruner.criteria"], [169, "module-neural_compressor.compression.pruner"], [170, "module-neural_compressor.compression.pruner.model_slim.auto_slim"], [171, "module-neural_compressor.compression.pruner.model_slim"], [172, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"], [173, "module-neural_compressor.compression.pruner.model_slim.weight_slim"], [174, "module-neural_compressor.compression.pruner.patterns"], [175, "module-neural_compressor.compression.pruner.pruners"], [176, "module-neural_compressor.compression.pruner.regs"], [177, "module-neural_compressor.compression.pruner.schedulers"], [178, "module-neural_compressor.compression.pruner.utils"], [179, "module-neural_compressor.conf.config"], [180, "module-neural_compressor.conf.dotdict"], [181, "module-neural_compressor.conf"], [182, "module-neural_compressor.conf.pythonic_config"], [183, "module-neural_compressor.config"], [184, "module-neural_compressor.contrib"], [185, "module-neural_compressor.contrib.strategy"], [186, "module-neural_compressor.contrib.strategy.sigopt"], [187, "module-neural_compressor.contrib.strategy.tpe"], [188, "module-neural_compressor.data.dataloaders.base_dataloader"], [189, "module-neural_compressor.data.dataloaders.dataloader"], [190, "module-neural_compressor.data.dataloaders.default_dataloader"], [191, "module-neural_compressor.data.dataloaders.fetcher"], [192, "module-neural_compressor.data.dataloaders"], [193, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [194, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [195, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [196, "module-neural_compressor.data.dataloaders.sampler"], [197, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [198, "module-neural_compressor.data.datasets.bert_dataset"], [199, "module-neural_compressor.data.datasets.coco_dataset"], [200, "module-neural_compressor.data.datasets.dataset"], [201, "module-neural_compressor.data.datasets.dummy_dataset"], [202, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [203, "module-neural_compressor.data.datasets.imagenet_dataset"], [204, "module-neural_compressor.data.datasets"], [205, "module-neural_compressor.data.datasets.style_transfer_dataset"], [206, "module-neural_compressor.data.filters.coco_filter"], [207, "module-neural_compressor.data.filters.filter"], [208, "module-neural_compressor.data.filters"], [209, "module-neural_compressor.data"], [210, "module-neural_compressor.data.transforms.coco_transform"], [211, "module-neural_compressor.data.transforms.imagenet_transform"], [212, "module-neural_compressor.data.transforms"], [213, "module-neural_compressor.data.transforms.postprocess"], [214, "module-neural_compressor.data.transforms.tokenization"], [215, "module-neural_compressor.data.transforms.transform"], [216, "module-neural_compressor.experimental.benchmark"], [217, "module-neural_compressor.experimental.common.criterion"], [218, "module-neural_compressor.experimental.common.dataloader"], [219, "module-neural_compressor.experimental.common"], [220, "module-neural_compressor.experimental.common.metric"], [221, "module-neural_compressor.experimental.common.model"], [222, "module-neural_compressor.experimental.common.optimizer"], [223, "module-neural_compressor.experimental.common.postprocess"], [224, "module-neural_compressor.experimental.common.torch_utils"], [225, "module-neural_compressor.experimental.component"], [226, "module-neural_compressor.experimental.compression"], [227, "module-neural_compressor.experimental.compression.pruning"], [228, "module-neural_compressor.experimental.contrib"], [229, "module-neural_compressor.experimental.contrib.strategy"], [230, "module-neural_compressor.experimental.contrib.strategy.sigopt"], [231, "module-neural_compressor.experimental.contrib.strategy.tpe"], [232, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [233, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [234, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [235, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [236, "module-neural_compressor.experimental.data.dataloaders"], [237, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [238, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [239, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [240, "module-neural_compressor.experimental.data.dataloaders.sampler"], [241, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [242, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [243, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [244, "module-neural_compressor.experimental.data.datasets.dataset"], [245, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [246, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [247, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [248, "module-neural_compressor.experimental.data.datasets"], [249, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [250, "module-neural_compressor.experimental.data.filters.coco_filter"], [251, "module-neural_compressor.experimental.data.filters.filter"], [252, "module-neural_compressor.experimental.data.filters"], [253, "module-neural_compressor.experimental.data"], [254, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [255, "module-neural_compressor.experimental.data.transforms"], [256, "module-neural_compressor.experimental.data.transforms.tokenization"], [257, "module-neural_compressor.experimental.data.transforms.transform"], [258, "module-neural_compressor.experimental.distillation"], [259, "module-neural_compressor.experimental.export"], [260, "module-neural_compressor.experimental.export.qlinear2qdq"], [261, "module-neural_compressor.experimental.export.tf2onnx"], [262, "module-neural_compressor.experimental.export.torch2onnx"], [263, "module-neural_compressor.experimental.graph_optimization"], [264, "module-neural_compressor.experimental"], [265, "module-neural_compressor.experimental.metric.bleu"], [266, "module-neural_compressor.experimental.metric.bleu_util"], [267, "module-neural_compressor.experimental.metric.coco_label_map"], [268, "module-neural_compressor.experimental.metric.coco_tools"], [269, "module-neural_compressor.experimental.metric.evaluate_squad"], [270, "module-neural_compressor.experimental.metric.f1"], [271, "module-neural_compressor.experimental.metric"], [272, "module-neural_compressor.experimental.metric.metric"], [273, "module-neural_compressor.experimental.mixed_precision"], [274, "module-neural_compressor.experimental.model_conversion"], [275, "module-neural_compressor.experimental.nas.basic_nas"], [276, "module-neural_compressor.experimental.nas.dynas"], [277, "module-neural_compressor.experimental.nas"], [278, "module-neural_compressor.experimental.nas.nas"], [279, "module-neural_compressor.experimental.nas.nas_utils"], [280, "module-neural_compressor.experimental.nas.search_algorithms"], [281, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [282, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [283, "module-neural_compressor.experimental.pruner_legacy"], [284, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [285, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [286, "module-neural_compressor.experimental.pruner_legacy.pruner"], [287, "module-neural_compressor.experimental.pruning"], [288, "module-neural_compressor.experimental.pruning_recipes"], [289, "module-neural_compressor.experimental.pruning_recipes.patterns"], [290, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [291, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [292, "module-neural_compressor.experimental.pruning_v2"], [293, "module-neural_compressor.experimental.pytorch_pruner"], [294, "module-neural_compressor.experimental.pytorch_pruner.logger"], [295, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [296, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [297, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [298, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [299, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [300, "module-neural_compressor.experimental.quantization"], [301, "module-neural_compressor.experimental.scheduler"], [302, "module-neural_compressor.experimental.strategy.auto_mixed_precision"], [303, "module-neural_compressor.experimental.strategy.basic"], [304, "module-neural_compressor.experimental.strategy.bayesian"], [305, "module-neural_compressor.experimental.strategy.exhaustive"], [306, "module-neural_compressor.experimental.strategy"], [307, "module-neural_compressor.experimental.strategy.mse"], [308, "module-neural_compressor.experimental.strategy.mse_v2"], [309, "module-neural_compressor.experimental.strategy.random"], [310, "module-neural_compressor.experimental.strategy.strategy"], [311, "module-neural_compressor.experimental.strategy.utils.constant"], [312, "module-neural_compressor.experimental.strategy.utils"], [313, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"], [314, "module-neural_compressor.experimental.strategy.utils.tuning_space"], [315, "module-neural_compressor.experimental.strategy.utils.tuning_structs"], [316, "module-neural_compressor.experimental.strategy.utils.utility"], [317, "module-neural_compressor"], [318, "module-neural_compressor.metric.bleu"], [319, "module-neural_compressor.metric.bleu_util"], [320, "module-neural_compressor.metric.coco_label_map"], [321, "module-neural_compressor.metric.coco_tools"], [322, "module-neural_compressor.metric.evaluate_squad"], [323, "module-neural_compressor.metric.f1"], [324, "module-neural_compressor.metric"], [325, "module-neural_compressor.metric.metric"], [326, "module-neural_compressor.mix_precision"], [327, "module-neural_compressor.model.base_model"], [328, "module-neural_compressor.model"], [329, "module-neural_compressor.model.keras_model"], [330, "module-neural_compressor.model.model"], [331, "module-neural_compressor.model.mxnet_model"], [332, "module-neural_compressor.model.nets_factory"], [333, "module-neural_compressor.model.onnx_model"], [334, "module-neural_compressor.model.tensorflow_model"], [335, "module-neural_compressor.model.torch_model"], [336, "module-neural_compressor.objective"], [337, "module-neural_compressor.profiling"], [338, "module-neural_compressor.profiling.parser.factory"], [339, "module-neural_compressor.profiling.parser"], [340, "module-neural_compressor.profiling.parser.onnx_parser.factory"], [341, "module-neural_compressor.profiling.parser.onnx_parser"], [342, "module-neural_compressor.profiling.parser.onnx_parser.parser"], [343, "module-neural_compressor.profiling.parser.parser"], [344, "module-neural_compressor.profiling.parser.result"], [345, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"], [346, "module-neural_compressor.profiling.parser.tensorflow_parser"], [347, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"], [348, "module-neural_compressor.profiling.profiler.factory"], [349, "module-neural_compressor.profiling.profiler"], [350, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"], [351, "module-neural_compressor.profiling.profiler.onnxrt_profiler"], [352, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"], [353, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"], [354, "module-neural_compressor.profiling.profiler.profiler"], [355, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"], [356, "module-neural_compressor.profiling.profiler.tensorflow_profiler"], [357, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"], [358, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"], [359, "module-neural_compressor.quantization"], [360, "module-neural_compressor.strategy.auto"], [361, "module-neural_compressor.strategy.auto_mixed_precision"], [362, "module-neural_compressor.strategy.basic"], [363, "module-neural_compressor.strategy.bayesian"], [364, "module-neural_compressor.strategy.conservative"], [365, "module-neural_compressor.strategy.exhaustive"], [366, "module-neural_compressor.strategy.hawq_v2"], [367, "module-neural_compressor.strategy"], [368, "module-neural_compressor.strategy.mse"], [369, "module-neural_compressor.strategy.mse_v2"], [370, "module-neural_compressor.strategy.random"], [371, "module-neural_compressor.strategy.strategy"], [372, "module-neural_compressor.strategy.utils.constant"], [373, "module-neural_compressor.strategy.utils"], [374, "module-neural_compressor.strategy.utils.tuning_sampler"], [375, "module-neural_compressor.strategy.utils.tuning_space"], [376, "module-neural_compressor.strategy.utils.tuning_structs"], [377, "module-neural_compressor.strategy.utils.utility"], [378, "module-neural_compressor.template.api_doc_example"], [379, "module-neural_compressor.template"], [380, "module-neural_compressor.training"], [381, "module-neural_compressor.utils.collect_layer_histogram"], [382, "module-neural_compressor.utils.constant"], [383, "module-neural_compressor.utils.create_obj_from_config"], [384, "module-neural_compressor.utils"], [385, "module-neural_compressor.utils.kl_divergence"], [386, "module-neural_compressor.utils.load_huggingface"], [387, "module-neural_compressor.utils.logger"], [388, "module-neural_compressor.utils.neural_insights_utils"], [389, "module-neural_compressor.utils.options"], [390, "module-neural_compressor.utils.pytorch"], [391, "module-neural_compressor.utils.utility"], [392, "module-neural_compressor.utils.weights_details"], [393, "module-neural_compressor.version"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasQuery"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "mxnetquery (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MXNetQuery"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrtquery (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRTQuery"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase"]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector"]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator"]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator"]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator"]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "float16activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.Float16ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "float16binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.Float16BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[30, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "fusedmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.FusedMatMulOperator"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "batchnormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.BatchNormalizationOperator"]], "normalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "reduceoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "unaryoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[41, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "ortsmoothquant (class in neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.ORTSmoothQuant"]], "get_quant_dequant_output() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.get_quant_dequant_output"]], "make_sub_graph() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.make_sub_graph"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "quant_dequant_data() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.quant_dequant_data"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "to_numpy() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.to_numpy"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchweightonlyadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorchWeightOnlyAdaptor"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "neural_compressor.adaptor.pytorch": [[44, "module-neural_compressor.adaptor.pytorch"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[45, "neural_compressor.adaptor.query.QueryBackendCapability"]], "neural_compressor.adaptor.query": [[45, "module-neural_compressor.adaptor.query"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow": [[46, "module-neural_compressor.adaptor.tensorflow"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[47, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[48, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[49, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[109, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[109, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[110, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "smoothquantcalibration (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[139, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[139, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "smoothquantscaler (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[140, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScaler"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[141, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[141, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[142, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[142, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[143, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[145, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[146, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "get_weight_from_input_tensor() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_weight_from_input_tensor"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[147, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[148, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[148, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[148, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[148, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[149, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[149, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[149, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[149, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[149, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[150, "module-neural_compressor.adaptor.torch_utils"]], "ipex_mixed_precision() (in module neural_compressor.adaptor.torch_utils.mixed_precision)": [[151, "neural_compressor.adaptor.torch_utils.mixed_precision.ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[151, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[152, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.adaptor.torch_utils.pattern_detector)": [[153, "neural_compressor.adaptor.torch_utils.pattern_detector.TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[153, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "graphtrace (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[154, "neural_compressor.adaptor.torch_utils.smooth_quant.GraphTrace"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[154, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "get_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[154, "neural_compressor.adaptor.torch_utils.smooth_quant.get_module"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[154, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "set_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[154, "neural_compressor.adaptor.torch_utils.smooth_quant.set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[155, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[155, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[155, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "collect_weight_info() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.collect_weight_info"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.get_depth"]], "get_dict_at_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.get_dict_at_depth"]], "get_element_under_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.get_element_under_depth"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_op_type_by_name() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.get_op_type_by_name"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern"]], "neural_compressor.adaptor.torch_utils.util": [[156, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.util)": [[156, "neural_compressor.adaptor.torch_utils.util.update_sq_scale"]], "awq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[157, "neural_compressor.adaptor.torch_utils.weight_only.awq_quantize"]], "get_module_input_output() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[157, "neural_compressor.adaptor.torch_utils.weight_only.get_module_input_output"]], "neural_compressor.adaptor.torch_utils.weight_only": [[157, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "qdq_weight_actor() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[157, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_actor"]], "qdq_weight_asym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[157, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_asym"]], "qdq_weight_sym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[157, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_sym"]], "quant_weight() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[157, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight"]], "rtn_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[157, "neural_compressor.adaptor.torch_utils.weight_only.rtn_quantize"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[158, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[158, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[158, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[158, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[158, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[159, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[159, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[160, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[161, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[161, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[162, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[162, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[163, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[163, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[163, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[163, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[163, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[163, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[163, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[163, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[163, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[163, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[163, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[163, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[163, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[163, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[163, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[163, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[163, "neural_compressor.benchmark.summary_benchmark"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[164, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[164, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[164, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[164, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[164, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[164, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[164, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[164, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "neural_compressor.compression.callbacks": [[164, "module-neural_compressor.compression.callbacks"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[165, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[165, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[165, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[165, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[165, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[165, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[165, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[165, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[165, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[165, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[165, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[165, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[165, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[165, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[165, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[165, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[165, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "neural_compressor.compression.distillation.criterions": [[165, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[166, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[167, "module-neural_compressor.compression"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[168, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[168, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[168, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[168, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[168, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumblockcriterion (class in neural_compressor.compression.pruner.criteria)": [[168, "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[168, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[168, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[168, "module-neural_compressor.compression.pruner.criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[168, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[168, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[168, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[168, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[168, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[168, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumblockcriterion attribute)": [[168, "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[168, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.compression.pruner": [[169, "module-neural_compressor.compression.pruner"]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[170, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_ffn2_pruning_config"]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[170, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_mha_pruning_config"]], "model_slim() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[170, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim"]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[170, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_ffn2"]], "model_slim_mha() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[170, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_mha"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[170, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[170, "neural_compressor.compression.pruner.model_slim.auto_slim.parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim": [[171, "module-neural_compressor.compression.pruner.model_slim"]], "classifierheadsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher"]], "classifierheadsearchertf (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF"]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher"]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher"]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher"]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph"]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes"]], "get_common_module() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_common_module"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[172, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "print_iterables() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.print_iterables"]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut"]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[172, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets"]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[173, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression"]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[173, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator"]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[173, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils"]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[173, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device"]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[173, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1"]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[173, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2"]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[173, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[173, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "basepattern (class in neural_compressor.compression.pruner.patterns)": [[174, "neural_compressor.compression.pruner.patterns.BasePattern"]], "m (neural_compressor.compression.pruner.patterns.patternmha attribute)": [[174, "neural_compressor.compression.pruner.patterns.PatternMHA.M"]], "m (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[174, "neural_compressor.compression.pruner.patterns.PatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.patternmha attribute)": [[174, "neural_compressor.compression.pruner.patterns.PatternMHA.N"]], "n (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[174, "neural_compressor.compression.pruner.patterns.PatternNInM.N"]], "patternmha (class in neural_compressor.compression.pruner.patterns)": [[174, "neural_compressor.compression.pruner.patterns.PatternMHA"]], "patternninm (class in neural_compressor.compression.pruner.patterns)": [[174, "neural_compressor.compression.pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.compression.pruner.patterns)": [[174, "neural_compressor.compression.pruner.patterns.PatternNxM"]], "block_size (neural_compressor.compression.pruner.patterns.patternnxm attribute)": [[174, "neural_compressor.compression.pruner.patterns.PatternNxM.block_size"]], "config (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[174, "neural_compressor.compression.pruner.patterns.BasePattern.config"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[174, "neural_compressor.compression.pruner.patterns.get_pattern"]], "invalid_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[174, "neural_compressor.compression.pruner.patterns.BasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[174, "neural_compressor.compression.pruner.patterns.BasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[174, "neural_compressor.compression.pruner.patterns.BasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[174, "neural_compressor.compression.pruner.patterns.BasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[174, "neural_compressor.compression.pruner.patterns.BasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[174, "neural_compressor.compression.pruner.patterns.BasePattern.modules"]], "neural_compressor.compression.pruner.patterns": [[174, "module-neural_compressor.compression.pruner.patterns"]], "pattern (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[174, "neural_compressor.compression.pruner.patterns.BasePattern.pattern"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns)": [[174, "neural_compressor.compression.pruner.patterns.register_pattern"]], "target_sparsity (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[174, "neural_compressor.compression.pruner.patterns.BasePattern.target_sparsity"]], "basepruner (class in neural_compressor.compression.pruner.pruners)": [[175, "neural_compressor.compression.pruner.pruners.BasePruner"]], "basicpruner (class in neural_compressor.compression.pruner.pruners)": [[175, "neural_compressor.compression.pruner.pruners.BasicPruner"]], "blockmaskpruner (class in neural_compressor.compression.pruner.pruners)": [[175, "neural_compressor.compression.pruner.pruners.BlockMaskPruner"]], "multiheadattentionpruner (class in neural_compressor.compression.pruner.pruners)": [[175, "neural_compressor.compression.pruner.pruners.MultiheadAttentionPruner"]], "patternlockpruner (class in neural_compressor.compression.pruner.pruners)": [[175, "neural_compressor.compression.pruner.pruners.PatternLockPruner"]], "progressivepruner (class in neural_compressor.compression.pruner.pruners)": [[175, "neural_compressor.compression.pruner.pruners.ProgressivePruner"]], "retrainfreepruner (class in neural_compressor.compression.pruner.pruners)": [[175, "neural_compressor.compression.pruner.pruners.RetrainFreePruner"]], "config (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[175, "neural_compressor.compression.pruner.pruners.BasePruner.config"]], "criterion (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[175, "neural_compressor.compression.pruner.pruners.BasicPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[175, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[175, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.criterion"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[175, "neural_compressor.compression.pruner.pruners.BasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[175, "neural_compressor.compression.pruner.pruners.BasePruner.end_step"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[175, "neural_compressor.compression.pruner.pruners.get_pruner"]], "global_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[175, "neural_compressor.compression.pruner.pruners.BasePruner.global_step"]], "head_masks (neural_compressor.compression.pruner.pruners.multiheadattentionpruner attribute)": [[175, "neural_compressor.compression.pruner.pruners.MultiheadAttentionPruner.head_masks"]], "linear_layers (neural_compressor.compression.pruner.pruners.multiheadattentionpruner attribute)": [[175, "neural_compressor.compression.pruner.pruners.MultiheadAttentionPruner.linear_layers"]], "masks (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[175, "neural_compressor.compression.pruner.pruners.BasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[175, "neural_compressor.compression.pruner.pruners.BasePruner.max_sparsity_ratio_per_op"]], "mha_compressions (neural_compressor.compression.pruner.pruners.multiheadattentionpruner attribute)": [[175, "neural_compressor.compression.pruner.pruners.MultiheadAttentionPruner.mha_compressions"]], "mha_scores (neural_compressor.compression.pruner.pruners.multiheadattentionpruner attribute)": [[175, "neural_compressor.compression.pruner.pruners.MultiheadAttentionPruner.mha_scores"]], "modules (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[175, "neural_compressor.compression.pruner.pruners.BasePruner.modules"]], "neural_compressor.compression.pruner.pruners": [[175, "module-neural_compressor.compression.pruner.pruners"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[175, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pattern (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[175, "neural_compressor.compression.pruner.pruners.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[175, "neural_compressor.compression.pruner.pruners.BasicPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[175, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[175, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.pattern"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[175, "neural_compressor.compression.pruner.pruners.BasePruner.pruning_frequency"]], "reg (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[175, "neural_compressor.compression.pruner.pruners.BasicPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[175, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[175, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.reg"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners)": [[175, "neural_compressor.compression.pruner.pruners.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[175, "neural_compressor.compression.pruner.pruners.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[175, "neural_compressor.compression.pruner.pruners.BasicPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[175, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[175, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[175, "neural_compressor.compression.pruner.pruners.BasePruner.scores"]], "start_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[175, "neural_compressor.compression.pruner.pruners.BasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[175, "neural_compressor.compression.pruner.pruners.BasePruner.target_sparsity_ratio"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[176, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[176, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[176, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[176, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[176, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[176, "module-neural_compressor.compression.pruner.regs"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[176, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[176, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[177, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[177, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[177, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[177, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[177, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[177, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[177, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[178, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[178, "neural_compressor.compression.pruner.utils.check_key_validity"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[178, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[178, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "get_sparsity_ratio_tf() (in module neural_compressor.compression.pruner.utils)": [[178, "neural_compressor.compression.pruner.utils.get_sparsity_ratio_tf"]], "neural_compressor.compression.pruner.utils": [[178, "module-neural_compressor.compression.pruner.utils"]], "parse_last_linear() (in module neural_compressor.compression.pruner.utils)": [[178, "neural_compressor.compression.pruner.utils.parse_last_linear"]], "parse_last_linear_tf() (in module neural_compressor.compression.pruner.utils)": [[178, "neural_compressor.compression.pruner.utils.parse_last_linear_tf"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[178, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "parse_to_prune_tf() (in module neural_compressor.compression.pruner.utils)": [[178, "neural_compressor.compression.pruner.utils.parse_to_prune_tf"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[178, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[178, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[178, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[178, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[178, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[178, "neural_compressor.compression.pruner.utils.update_params"]], "benchmark_conf (class in neural_compressor.conf.config)": [[179, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[179, "neural_compressor.conf.config.Conf"]], "distillation_conf (class in neural_compressor.conf.config)": [[179, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[179, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[179, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[179, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[179, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[179, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[179, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[179, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[180, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[180, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[180, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[180, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[181, "module-neural_compressor.conf"]], "accuracycriterion (class in neural_compressor.conf.pythonic_config)": [[182, "neural_compressor.conf.pythonic_config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.conf.pythonic_config)": [[182, "neural_compressor.conf.pythonic_config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.conf.pythonic_config)": [[182, "neural_compressor.conf.pythonic_config.DistillationConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.conf.pythonic_config)": [[182, "neural_compressor.conf.pythonic_config.KnowledgeDistillationLossConfig"]], "options (class in neural_compressor.conf.pythonic_config)": [[182, "neural_compressor.conf.pythonic_config.Options"]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[182, "neural_compressor.conf.pythonic_config.QuantizationConfig"]], "weightpruningconfig (class in neural_compressor.conf.pythonic_config)": [[182, "neural_compressor.conf.pythonic_config.WeightPruningConfig"]], "neural_compressor.conf.pythonic_config": [[182, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[183, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[183, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[183, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[183, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[183, "neural_compressor.config.ExportConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[183, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[183, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[183, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[183, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[183, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[183, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[183, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[183, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[183, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[183, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[183, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[183, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[183, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[183, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[183, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[183, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[183, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[183, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[183, "module-neural_compressor.config"]], "neural_compressor.contrib": [[184, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[185, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[186, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[186, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[187, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[187, "module-neural_compressor.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[188, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader": [[188, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[189, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "check_dataloader() (in module neural_compressor.data.dataloaders.dataloader)": [[189, "neural_compressor.data.dataloaders.dataloader.check_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[189, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[190, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[190, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[190, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[191, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[191, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[191, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[191, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[192, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[193, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[193, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[194, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[194, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[194, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[195, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[195, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[196, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[196, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[196, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[196, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[196, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[197, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[197, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[197, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[197, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[197, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[198, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[198, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[198, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[198, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[198, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[198, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[198, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[198, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[198, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[199, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[199, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[199, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[199, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[199, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[200, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[201, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[201, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[202, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[202, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[202, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[203, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[203, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[203, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[203, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[203, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[203, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[203, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[204, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[205, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[205, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[206, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[206, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[206, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[207, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[207, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[207, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[207, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[207, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[207, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[207, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[207, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[207, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[208, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[209, "module-neural_compressor.data"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[210, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[210, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[211, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[211, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[211, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[211, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[211, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[211, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[211, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[211, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[211, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[211, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale"]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[211, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.imagenet_transform": [[211, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[212, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[213, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[213, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[214, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[214, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[214, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[214, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[214, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[214, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[214, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[214, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.TRANSFORMS"], [215, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[215, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[216, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[216, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[216, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[216, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[216, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[216, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[216, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[216, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[216, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[216, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[217, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[218, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[218, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[219, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[220, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[220, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[221, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[221, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[221, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[222, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[222, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[222, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[222, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[222, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[222, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[222, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[222, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[222, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[223, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[223, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[224, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[224, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[224, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[225, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[225, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[226, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[227, "module-neural_compressor.experimental.compression.pruning"]], "prepare_pruning() (in module neural_compressor.experimental.compression.pruning)": [[227, "neural_compressor.experimental.compression.pruning.prepare_pruning"]], "save() (in module neural_compressor.experimental.compression.pruning)": [[227, "neural_compressor.experimental.compression.pruning.save"]], "neural_compressor.experimental.contrib": [[228, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[229, "module-neural_compressor.experimental.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[230, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[230, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[231, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[231, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[232, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[232, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[233, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[234, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[234, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[234, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[235, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[235, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[235, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[235, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[236, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[237, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[237, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[238, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[238, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[238, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[239, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[239, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[240, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[240, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[240, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[240, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[240, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[241, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[241, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[241, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[241, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[241, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[242, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[242, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[242, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[242, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[242, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[242, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[242, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[242, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[242, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[243, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[243, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[243, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[243, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[243, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[244, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[244, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[245, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[245, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[246, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[246, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[246, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[247, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[247, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[247, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[247, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[247, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[247, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[247, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[248, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[249, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[249, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[250, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[250, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[250, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[251, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[251, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[251, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[251, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[251, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[251, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[251, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[251, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[251, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[252, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[253, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[254, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[254, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[254, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[254, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[254, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[254, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[254, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[254, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[254, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[254, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[255, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[256, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[256, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[256, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[256, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[256, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[256, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[256, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[256, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [257, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[257, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[257, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[258, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[258, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[258, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[258, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[258, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[258, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[259, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[260, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[260, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[260, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[261, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[261, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[261, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "dynamic_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[262, "neural_compressor.experimental.export.torch2onnx.dynamic_quant_export"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[262, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[262, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[262, "module-neural_compressor.experimental.export.torch2onnx"]], "static_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[262, "neural_compressor.experimental.export.torch2onnx.static_quant_export"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[262, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[262, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[263, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[263, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[264, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[265, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[265, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[265, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[265, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[265, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[265, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[265, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[265, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[265, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[266, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[266, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[267, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[268, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[268, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[268, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[268, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[268, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[268, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[268, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[268, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[269, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[269, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[269, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[269, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[269, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[270, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[270, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[270, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[270, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[270, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[271, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[272, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[272, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[272, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[272, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[272, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[272, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[272, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[272, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[272, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[272, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[272, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[272, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[272, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[272, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[272, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[272, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[272, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[272, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[272, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[272, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[272, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[272, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[272, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[272, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[272, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[272, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[273, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[273, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[274, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[274, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[275, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[275, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[276, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[276, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[277, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[278, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[278, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[278, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[279, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[279, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[279, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[279, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[280, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[280, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[280, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[280, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[280, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[281, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[281, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[282, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[282, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[283, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[284, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[284, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[285, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[285, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[286, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[286, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[286, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[287, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[287, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[287, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[287, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[287, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[288, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[289, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[290, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[290, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[290, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[290, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[290, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[291, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[291, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[291, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[291, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[291, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[291, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[291, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[292, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[292, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[292, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[292, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[292, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[293, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[294, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[295, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[296, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[296, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[296, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[296, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[296, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[296, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[296, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[297, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[298, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[298, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[298, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[298, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[298, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[298, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[299, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[299, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[299, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[299, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[299, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[299, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[300, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[300, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[301, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[301, "module-neural_compressor.experimental.scheduler"]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[302, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[302, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[303, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[303, "module-neural_compressor.experimental.strategy.basic"]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[304, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[304, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[304, "neural_compressor.experimental.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[304, "neural_compressor.experimental.strategy.bayesian.acq_max"]], "neural_compressor.experimental.strategy.bayesian": [[304, "module-neural_compressor.experimental.strategy.bayesian"]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[305, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.exhaustive": [[305, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[306, "module-neural_compressor.experimental.strategy"]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[307, "neural_compressor.experimental.strategy.mse.MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[307, "module-neural_compressor.experimental.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[308, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[308, "module-neural_compressor.experimental.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[309, "neural_compressor.experimental.strategy.random.RandomTuneStrategy"]], "neural_compressor.experimental.strategy.random": [[309, "module-neural_compressor.experimental.strategy.random"]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[310, "neural_compressor.experimental.strategy.strategy.TuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[310, "module-neural_compressor.experimental.strategy.strategy"]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[310, "neural_compressor.experimental.strategy.strategy.strategy_registry"]], "neural_compressor.experimental.strategy.utils.constant": [[311, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[312, "module-neural_compressor.experimental.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[313, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[313, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[313, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[313, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[313, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[313, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[313, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[313, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[313, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[314, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[314, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[314, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[314, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[314, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[314, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[314, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[315, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[315, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[316, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[316, "neural_compressor.experimental.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[316, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.experimental.strategy.utils.utility": [[316, "module-neural_compressor.experimental.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[316, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type"]], "neural_compressor": [[317, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[318, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[318, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[318, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[318, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[318, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[318, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[318, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[318, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[318, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[319, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[319, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[320, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[321, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[321, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[321, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[321, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[321, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[321, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[321, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[321, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[322, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[322, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[322, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[322, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[322, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[323, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[323, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[323, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[323, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[323, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[324, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[325, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[325, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[325, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[325, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[325, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[325, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[325, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[325, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[325, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[325, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[325, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[325, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[325, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[325, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[325, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[325, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[325, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[325, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[325, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[325, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[325, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[325, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[325, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[325, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[325, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[325, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[326, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[326, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[327, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[327, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[328, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[329, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[329, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[330, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[330, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[330, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[331, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[331, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[332, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[332, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[333, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[333, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[334, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[334, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[335, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[335, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[335, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[335, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[335, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[336, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[336, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[336, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[336, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[336, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[336, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[336, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[336, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[336, "neural_compressor.objective.objective_registry"]], "neural_compressor.profiling": [[337, "module-neural_compressor.profiling"]], "parserfactory (class in neural_compressor.profiling.parser.factory)": [[338, "neural_compressor.profiling.parser.factory.ParserFactory"]], "neural_compressor.profiling.parser.factory": [[338, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[339, "module-neural_compressor.profiling.parser"]], "onnxrtparserfactory (class in neural_compressor.profiling.parser.onnx_parser.factory)": [[340, "neural_compressor.profiling.parser.onnx_parser.factory.OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[340, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[341, "module-neural_compressor.profiling.parser.onnx_parser"]], "onnxprofilingparser (class in neural_compressor.profiling.parser.onnx_parser.parser)": [[342, "neural_compressor.profiling.parser.onnx_parser.parser.OnnxProfilingParser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[342, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "profilingparser (class in neural_compressor.profiling.parser.parser)": [[343, "neural_compressor.profiling.parser.parser.ProfilingParser"]], "neural_compressor.profiling.parser.parser": [[343, "module-neural_compressor.profiling.parser.parser"]], "profilingresult (class in neural_compressor.profiling.parser.result)": [[344, "neural_compressor.profiling.parser.result.ProfilingResult"]], "neural_compressor.profiling.parser.result": [[344, "module-neural_compressor.profiling.parser.result"]], "tensorflowparserfactory (class in neural_compressor.profiling.parser.tensorflow_parser.factory)": [[345, "neural_compressor.profiling.parser.tensorflow_parser.factory.TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[345, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[346, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "tensorflowprofilingparser (class in neural_compressor.profiling.parser.tensorflow_parser.parser)": [[347, "neural_compressor.profiling.parser.tensorflow_parser.parser.TensorFlowProfilingParser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[347, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "profilerfactory (class in neural_compressor.profiling.profiler.factory)": [[348, "neural_compressor.profiling.profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.factory": [[348, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[349, "module-neural_compressor.profiling.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.onnxrt_profiler.factory)": [[350, "neural_compressor.profiling.profiler.onnxrt_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[350, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[351, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "profiler (class in neural_compressor.profiling.profiler.onnxrt_profiler.profiler)": [[352, "neural_compressor.profiling.profiler.onnxrt_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[352, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "create_onnx_config() (in module neural_compressor.profiling.profiler.onnxrt_profiler.utils)": [[353, "neural_compressor.profiling.profiler.onnxrt_profiler.utils.create_onnx_config"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[353, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "profiler (class in neural_compressor.profiling.profiler.profiler)": [[354, "neural_compressor.profiling.profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.profiler": [[354, "module-neural_compressor.profiling.profiler.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.tensorflow_profiler.factory)": [[355, "neural_compressor.profiling.profiler.tensorflow_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[355, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[356, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "profiler (class in neural_compressor.profiling.profiler.tensorflow_profiler.profiler)": [[357, "neural_compressor.profiling.profiler.tensorflow_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[357, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "create_tf_config() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[358, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.create_tf_config"]], "delete_assign() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[358, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[358, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "set_eager_execution() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[358, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.set_eager_execution"]], "fit() (in module neural_compressor.quantization)": [[359, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[359, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[360, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[360, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[361, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[361, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[362, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[362, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[363, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[363, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[363, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[363, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[363, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[364, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[364, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[365, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[365, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[366, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[366, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[367, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[368, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[368, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[369, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[369, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[370, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[370, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[371, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[371, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[371, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[371, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[372, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[373, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[374, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[374, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[374, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[374, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[374, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[374, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[374, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[374, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.strategy.utils.tuning_sampler)": [[374, "neural_compressor.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_sampler": [[374, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[375, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[375, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[375, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[375, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[375, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[375, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[375, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[376, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[376, "module-neural_compressor.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[377, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[377, "neural_compressor.strategy.utils.utility.QuantOptions"]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[377, "neural_compressor.strategy.utils.utility.QuantType"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[377, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[377, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[377, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[377, "module-neural_compressor.strategy.utils.utility"]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[377, "neural_compressor.strategy.utils.utility.preprocess_user_cfg"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[377, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[378, "neural_compressor.template.api_doc_example.ExampleClass"]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[378, "neural_compressor.template.api_doc_example.ExampleClass.attr1"]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[378, "neural_compressor.template.api_doc_example.ExampleClass.attr2"]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[378, "neural_compressor.template.api_doc_example.ExampleClass.attr5"]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[378, "neural_compressor.template.api_doc_example.attribute1"]], "function1() (in module neural_compressor.template.api_doc_example)": [[378, "neural_compressor.template.api_doc_example.function1"]], "function2() (in module neural_compressor.template.api_doc_example)": [[378, "neural_compressor.template.api_doc_example.function2"]], "function3() (in module neural_compressor.template.api_doc_example)": [[378, "neural_compressor.template.api_doc_example.function3"]], "generator1() (in module neural_compressor.template.api_doc_example)": [[378, "neural_compressor.template.api_doc_example.generator1"]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[378, "neural_compressor.template.api_doc_example.module_debug_level1"]], "neural_compressor.template.api_doc_example": [[378, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[379, "module-neural_compressor.template"]], "callbacks (class in neural_compressor.training)": [[380, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[380, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[380, "neural_compressor.training.fit"]], "neural_compressor.training": [[380, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[380, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[381, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[381, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[382, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[383, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[383, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[383, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[383, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[383, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[383, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[383, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[383, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[383, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[383, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[384, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[385, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[385, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[386, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "neural_compressor.utils.load_huggingface": [[386, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[386, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[387, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[387, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[387, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[387, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[387, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[387, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[387, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[387, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[387, "neural_compressor.utils.logger.warning"]], "neural_compressor.utils.neural_insights_utils": [[388, "module-neural_compressor.utils.neural_insights_utils"]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[388, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload"]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[388, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload"]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[388, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[389, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[389, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[390, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[390, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[390, "module-neural_compressor.utils.pytorch"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.Dequantize"]], "dotdict (class in neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.calculate_mse"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.compute_sparsity"]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.dequantize_weight"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[391, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[391, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[392, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[392, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[392, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[393, "module-neural_compressor.version"]]}})