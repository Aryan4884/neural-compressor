Search.setIndex({"docnames": ["autoapi/644ec953a7dc_pruning_support/index", "autoapi/6ece06672ed3_v1_14/index", "autoapi/6f0d0f71d92e_v1_13/index", "autoapi/9e89549a08c8_v1_11/index", "autoapi/block_mask/index", "autoapi/env/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/compression/pruning/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/export/utils/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/template/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/index", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index", "autoapi/neural_compressor/ux/components/configuration_wizard/index", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index", "autoapi/neural_compressor/ux/components/db_manager/utils/index", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/factory/index", "autoapi/neural_compressor/ux/components/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index", "autoapi/neural_compressor/ux/components/file_browser/index", "autoapi/neural_compressor/ux/components/graph/attribute/index", "autoapi/neural_compressor/ux/components/graph/collapser/index", "autoapi/neural_compressor/ux/components/graph/edge/index", "autoapi/neural_compressor/ux/components/graph/graph/index", "autoapi/neural_compressor/ux/components/graph/graph_reader/index", "autoapi/neural_compressor/ux/components/graph/index", "autoapi/neural_compressor/ux/components/graph/node/index", "autoapi/neural_compressor/ux/components/graph/reader/index", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index", "autoapi/neural_compressor/ux/components/index", "autoapi/neural_compressor/ux/components/jobs_management/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index", "autoapi/neural_compressor/ux/components/jobs_management/request/index", "autoapi/neural_compressor/ux/components/manage_workspace/index", "autoapi/neural_compressor/ux/components/model/domain/index", "autoapi/neural_compressor/ux/components/model/index", "autoapi/neural_compressor/ux/components/model/model/index", "autoapi/neural_compressor/ux/components/model/model_type_getter/index", "autoapi/neural_compressor/ux/components/model/onnxrt/index", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index", "autoapi/neural_compressor/ux/components/model/pytorch/index", "autoapi/neural_compressor/ux/components/model/pytorch/model/index", "autoapi/neural_compressor/ux/components/model/repository/index", "autoapi/neural_compressor/ux/components/model/shape/index", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index", "autoapi/neural_compressor/ux/components/model/tensorflow/index", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index", "autoapi/neural_compressor/ux/components/model_zoo/index", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index", "autoapi/neural_compressor/ux/components/names_mapper/index", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index", "autoapi/neural_compressor/ux/components/optimization/factory/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/optimization/index", "autoapi/neural_compressor/ux/components/optimization/pruning/index", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index", "autoapi/neural_compressor/ux/components/optimization/tune/index", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index", "autoapi/neural_compressor/ux/components/profiling/factory/index", "autoapi/neural_compressor/ux/components/profiling/index", "autoapi/neural_compressor/ux/components/profiling/profile_model/index", "autoapi/neural_compressor/ux/components/profiling/profiler/index", "autoapi/neural_compressor/ux/components/profiling/profiling/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index", "autoapi/neural_compressor/ux/inc_bench/index", "autoapi/neural_compressor/ux/index", "autoapi/neural_compressor/ux/utils/consts/index", "autoapi/neural_compressor/ux/utils/environment/index", "autoapi/neural_compressor/ux/utils/exceptions/index", "autoapi/neural_compressor/ux/utils/executor/index", "autoapi/neural_compressor/ux/utils/expiring_dict/index", "autoapi/neural_compressor/ux/utils/github_info/index", "autoapi/neural_compressor/ux/utils/hw_info/index", "autoapi/neural_compressor/ux/utils/index", "autoapi/neural_compressor/ux/utils/json_serializer/index", "autoapi/neural_compressor/ux/utils/logger/index", "autoapi/neural_compressor/ux/utils/parser/index", "autoapi/neural_compressor/ux/utils/proc/index", "autoapi/neural_compressor/ux/utils/processes/index", "autoapi/neural_compressor/ux/utils/singleton/index", "autoapi/neural_compressor/ux/utils/status_updates/index", "autoapi/neural_compressor/ux/utils/templates/index", "autoapi/neural_compressor/ux/utils/templates/metric/index", "autoapi/neural_compressor/ux/utils/templates/workdir/index", "autoapi/neural_compressor/ux/utils/utils/index", "autoapi/neural_compressor/ux/utils/workload/config/index", "autoapi/neural_compressor/ux/utils/workload/dataloader/index", "autoapi/neural_compressor/ux/utils/workload/evaluation/index", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index", "autoapi/neural_compressor/ux/utils/workload/index", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index", "autoapi/neural_compressor/ux/utils/workload/model/index", "autoapi/neural_compressor/ux/utils/workload/pruning/index", "autoapi/neural_compressor/ux/utils/workload/quantization/index", "autoapi/neural_compressor/ux/utils/workload/tuning/index", "autoapi/neural_compressor/ux/utils/yaml_utils/index", "autoapi/neural_compressor/ux/web/communication/index", "autoapi/neural_compressor/ux/web/configuration/index", "autoapi/neural_compressor/ux/web/exceptions/index", "autoapi/neural_compressor/ux/web/index", "autoapi/neural_compressor/ux/web/router/index", "autoapi/neural_compressor/ux/web/server/index", "autoapi/neural_compressor/ux/web/service/benchmark/index", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index", "autoapi/neural_compressor/ux/web/service/index", "autoapi/neural_compressor/ux/web/service/model/index", "autoapi/neural_compressor/ux/web/service/optimization/index", "autoapi/neural_compressor/ux/web/service/profiling/index", "autoapi/neural_compressor/ux/web/service/request_data_processor/index", "autoapi/neural_compressor/ux/web/service/response_generator/index", "autoapi/neural_compressor/ux/web/service/workload/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/bench", "docs/source/benchmark", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/objective", "docs/source/orchestration", "docs/source/platform_configuration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_mixed_precision", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/644ec953a7dc_pruning_support/index.rst", "autoapi/6ece06672ed3_v1_14/index.rst", "autoapi/6f0d0f71d92e_v1_13/index.rst", "autoapi/9e89549a08c8_v1_11/index.rst", "autoapi/block_mask/index.rst", "autoapi/env/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/compression/pruning/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/export/utils/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/template/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index.rst", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/index.rst", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index.rst", "autoapi/neural_compressor/ux/components/db_manager/utils/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/factory/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index.rst", "autoapi/neural_compressor/ux/components/file_browser/index.rst", "autoapi/neural_compressor/ux/components/graph/attribute/index.rst", "autoapi/neural_compressor/ux/components/graph/collapser/index.rst", "autoapi/neural_compressor/ux/components/graph/edge/index.rst", "autoapi/neural_compressor/ux/components/graph/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/graph_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/node/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index.rst", "autoapi/neural_compressor/ux/components/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/request/index.rst", "autoapi/neural_compressor/ux/components/manage_workspace/index.rst", "autoapi/neural_compressor/ux/components/model/domain/index.rst", "autoapi/neural_compressor/ux/components/model/index.rst", "autoapi/neural_compressor/ux/components/model/model/index.rst", "autoapi/neural_compressor/ux/components/model/model_type_getter/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/model/index.rst", "autoapi/neural_compressor/ux/components/model/repository/index.rst", "autoapi/neural_compressor/ux/components/model/shape/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/factory/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/profile_model/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/ux/inc_bench/index.rst", "autoapi/neural_compressor/ux/index.rst", "autoapi/neural_compressor/ux/utils/consts/index.rst", "autoapi/neural_compressor/ux/utils/environment/index.rst", "autoapi/neural_compressor/ux/utils/exceptions/index.rst", "autoapi/neural_compressor/ux/utils/executor/index.rst", "autoapi/neural_compressor/ux/utils/expiring_dict/index.rst", "autoapi/neural_compressor/ux/utils/github_info/index.rst", "autoapi/neural_compressor/ux/utils/hw_info/index.rst", "autoapi/neural_compressor/ux/utils/index.rst", "autoapi/neural_compressor/ux/utils/json_serializer/index.rst", "autoapi/neural_compressor/ux/utils/logger/index.rst", "autoapi/neural_compressor/ux/utils/parser/index.rst", "autoapi/neural_compressor/ux/utils/proc/index.rst", "autoapi/neural_compressor/ux/utils/processes/index.rst", "autoapi/neural_compressor/ux/utils/singleton/index.rst", "autoapi/neural_compressor/ux/utils/status_updates/index.rst", "autoapi/neural_compressor/ux/utils/templates/index.rst", "autoapi/neural_compressor/ux/utils/templates/metric/index.rst", "autoapi/neural_compressor/ux/utils/templates/workdir/index.rst", "autoapi/neural_compressor/ux/utils/utils/index.rst", "autoapi/neural_compressor/ux/utils/workload/config/index.rst", "autoapi/neural_compressor/ux/utils/workload/dataloader/index.rst", "autoapi/neural_compressor/ux/utils/workload/evaluation/index.rst", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index.rst", "autoapi/neural_compressor/ux/utils/workload/index.rst", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index.rst", "autoapi/neural_compressor/ux/utils/workload/model/index.rst", "autoapi/neural_compressor/ux/utils/workload/pruning/index.rst", "autoapi/neural_compressor/ux/utils/workload/quantization/index.rst", "autoapi/neural_compressor/ux/utils/workload/tuning/index.rst", "autoapi/neural_compressor/ux/utils/yaml_utils/index.rst", "autoapi/neural_compressor/ux/web/communication/index.rst", "autoapi/neural_compressor/ux/web/configuration/index.rst", "autoapi/neural_compressor/ux/web/exceptions/index.rst", "autoapi/neural_compressor/ux/web/index.rst", "autoapi/neural_compressor/ux/web/router/index.rst", "autoapi/neural_compressor/ux/web/server/index.rst", "autoapi/neural_compressor/ux/web/service/benchmark/index.rst", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index.rst", "autoapi/neural_compressor/ux/web/service/index.rst", "autoapi/neural_compressor/ux/web/service/model/index.rst", "autoapi/neural_compressor/ux/web/service/optimization/index.rst", "autoapi/neural_compressor/ux/web/service/profiling/index.rst", "autoapi/neural_compressor/ux/web/service/request_data_processor/index.rst", "autoapi/neural_compressor/ux/web/service/response_generator/index.rst", "autoapi/neural_compressor/ux/web/service/workload/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/bench.md", "docs/source/benchmark.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/platform_configuration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_mixed_precision.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">644ec953a7dc_pruning_support</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6ece06672ed3_v1_14</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6f0d0f71d92e_v1_13</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">9e89549a08c8_v1_11</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">env</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.pattern_analyzer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.weight_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template.api_doc_example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.execute_benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.benchmark_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.graph_optimization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.mixed_precision_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.profiling_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.pruning_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.quantization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.configuration_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_boundary_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.params_feeder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.pruning_config_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain_flavour</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.framework</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.project</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.pruning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.examples_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.model_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.project_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.params_interfaces</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.attribute</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.collapser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.edge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.onnxrt_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.tensorflow_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_control_queue</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.request</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.manage_workspace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model_type_getter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.repository</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.shape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.frozen_pb</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.meta_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.saved_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.list_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.execute_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tune_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.execute_profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profile_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.inc_bench</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.consts</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.environment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.executor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.expiring_dict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.github_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.hw_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.json_serializer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.proc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.processes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.singleton</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.status_updates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.workdir</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.evaluation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.yaml_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.communication</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.router</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.server</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.history_snapshot_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.request_data_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.response_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Intel\u00ae Neural Compressor Bench", "Benchmarking", "DataLoader", "Dataset", "Design", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Objective", "Optimization Orchestration", "SYSTEM CONFIGURATION", "Pruning", "Full Publications/Events (59)", "Pythonic Style Access for Configurations", "Quantization", "Turn OFF Auto Mixed Precision during Quantization", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"pruning_support": 0, "revis": [0, 1, 2, 3], "id": [0, 1, 2, 3, 158, 208, 210, 246, 256, 258, 259, 260, 261, 294, 296, 297, 298, 299, 416, 566, 598, 602], "644ec953a7dc": 0, "6ece06672ed3": [0, 1], "creat": [0, 1, 2, 3, 5, 17, 20, 104, 177, 182, 192, 194, 212, 222, 232, 234, 259, 269, 270, 297, 329, 332, 337, 511, 528, 531, 534, 552, 569, 580, 582, 584, 585, 588, 595, 598, 600, 602], "date": [0, 1, 2, 3], "2022": [0, 1, 2, 3, 177, 533, 565, 599], "12": [0, 549, 561, 564, 605], "09": [0, 605], "17": [0, 599, 605], "22": [0, 3, 564, 605], "310141": 0, "v1": [1, 2, 3, 145, 204, 205, 244, 260, 261, 263, 298, 299, 301, 310, 556, 561, 566, 569, 592, 597, 598, 605], "14": [1, 2, 177, 251, 252, 558, 564, 599, 605], "6f0d0f71d92e": [1, 2], "08": [1, 209, 247, 601, 605], "31": [1, 605], "07": [1, 2, 599, 604, 605], "16": [1, 551, 552, 592, 599, 605], "24": [1, 599, 602, 605], "229939": 1, "update_dataload": 1, "db_session": [1, 398], "sqlalchemi": [1, 385, 398, 559, 564], "orm": [1, 385, 398], "session": [1, 145, 191, 231, 310, 398, 567, 600], "sourc": [1, 5, 6, 8, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 275, 276, 277, 278, 281, 282, 283, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 328, 329, 330, 331, 332, 334, 335, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 397, 398, 399, 400, 403, 404, 405, 407, 408, 410, 411, 412, 413, 414, 416, 418, 419, 425, 426, 428, 429, 431, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 454, 455, 457, 458, 460, 461, 463, 464, 466, 467, 468, 469, 470, 472, 473, 474, 475, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 530, 533, 565, 567, 580, 582, 584, 585, 587, 593], "updat": [1, 73, 150, 163, 168, 172, 252, 288, 313, 347, 398, 468, 495, 549, 558, 559, 566, 567, 573, 578, 581, 591, 592, 602, 603], "dataload": [1, 17, 19, 147, 150, 152, 158, 180, 181, 192, 203, 213, 232, 243, 248, 255, 278, 283, 292, 293, 313, 334, 337, 345, 372, 396, 398, 420, 461, 474, 480, 488, 499, 504, 530, 533, 534, 549, 554, 555, 556, 561, 562, 566, 567, 568, 590, 595, 596, 599, 600, 601, 604], "exist": [1, 52, 158, 174, 210, 310, 431, 499, 558, 566, 574, 592, 602], "databas": [1, 194, 234, 363, 366, 368, 371, 372, 373, 376, 377, 382, 386, 387, 391, 396], "update_transform": 1, "transform": [1, 43, 49, 140, 142, 143, 144, 169, 192, 193, 194, 195, 196, 197, 199, 201, 203, 232, 233, 234, 235, 236, 237, 239, 241, 243, 255, 293, 372, 396, 398, 420, 499, 501, 530, 531, 551, 552, 554, 555, 556, 557, 561, 567, 570, 575, 576, 577, 578, 592, 593, 596, 599, 600, 604, 605], "13": [2, 3, 313, 549, 564, 599], "9e89549a08c8": [2, 3], "29": [2, 599, 605], "41": [2, 599, 605], "291905": 2, "11": [3, 549, 564, 566, 568, 599, 602], "03": [3, 605], "34": [3, 605], "52": [3, 599, 605], "916541": 3, "block": [4, 163, 168, 169, 172, 286, 312, 332, 516, 563, 589, 592, 599], "mask": [4, 167, 168, 169, 192, 232, 259, 288, 297, 592, 605], "run_migrations_offlin": 5, "run": [5, 17, 145, 158, 169, 172, 177, 180, 181, 191, 208, 210, 231, 246, 287, 288, 302, 313, 317, 334, 446, 492, 514, 516, 529, 534, 549, 550, 556, 559, 560, 567, 568, 570, 572, 574, 575, 576, 578, 580, 581, 582, 584, 585, 587, 592, 593, 595, 597, 598, 600, 602, 604], "migrat": [5, 599, 603], "offlin": [5, 344, 528, 567, 595, 599], "mode": [5, 42, 43, 44, 109, 150, 201, 241, 259, 297, 310, 329, 344, 534, 549, 563, 564, 580, 584, 595, 596, 602], "thi": [5, 44, 85, 109, 131, 138, 140, 144, 147, 152, 157, 159, 166, 168, 169, 170, 171, 177, 180, 181, 191, 192, 193, 194, 195, 196, 197, 199, 209, 212, 218, 219, 231, 232, 233, 234, 235, 236, 237, 239, 247, 256, 259, 260, 261, 263, 272, 273, 275, 276, 277, 278, 283, 286, 288, 290, 291, 292, 294, 297, 298, 299, 301, 302, 312, 313, 317, 322, 332, 334, 343, 344, 528, 529, 530, 531, 534, 549, 551, 552, 554, 555, 556, 560, 563, 565, 566, 567, 568, 569, 570, 572, 573, 575, 576, 578, 580, 582, 584, 585, 586, 587, 588, 592, 595, 596, 597, 598, 599, 600, 601, 602, 603], "configur": [5, 15, 17, 18, 44, 117, 146, 152, 158, 172, 173, 177, 180, 181, 183, 194, 197, 210, 215, 234, 237, 248, 252, 254, 265, 266, 267, 269, 278, 283, 287, 291, 292, 293, 302, 312, 313, 322, 334, 336, 337, 342, 343, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 450, 480, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 514, 516, 530, 531, 534, 549, 552, 566, 567, 574, 588, 589, 592, 595, 597, 601, 602, 605], "context": [5, 17, 344, 594], "just": [5, 96, 182, 207, 209, 212, 214, 215, 217, 222, 247, 312, 531, 567, 577, 581, 587, 590, 595, 599, 601, 602], "url": [5, 194, 234, 565], "an": [5, 17, 66, 67, 69, 104, 140, 147, 152, 157, 169, 177, 185, 190, 194, 209, 213, 218, 225, 230, 234, 247, 255, 256, 260, 261, 269, 270, 292, 293, 294, 298, 299, 302, 313, 332, 334, 408, 526, 528, 530, 531, 533, 534, 551, 552, 553, 558, 566, 567, 568, 570, 574, 575, 578, 587, 589, 592, 593, 595, 598, 599, 600, 601, 602], "engin": 5, "though": [5, 599], "i": [5, 17, 43, 44, 47, 48, 52, 53, 56, 59, 63, 69, 81, 84, 104, 131, 140, 145, 147, 151, 152, 157, 158, 159, 163, 166, 167, 169, 170, 172, 176, 177, 180, 181, 182, 190, 191, 192, 193, 194, 195, 196, 199, 201, 205, 209, 210, 212, 216, 218, 219, 222, 230, 231, 232, 233, 234, 235, 236, 239, 241, 244, 247, 256, 259, 261, 263, 265, 270, 278, 283, 287, 288, 292, 294, 297, 299, 301, 302, 312, 313, 318, 323, 332, 334, 343, 344, 408, 447, 487, 491, 497, 499, 507, 514, 528, 529, 530, 531, 533, 534, 535, 537, 541, 544, 547, 549, 550, 551, 552, 554, 555, 556, 558, 560, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 578, 580, 581, 582, 584, 585, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605], "accept": [5, 177, 332, 528, 549, 550], "here": [5, 259, 297, 332, 549, 552, 556, 557, 558, 560, 561, 566, 575, 582, 585, 587, 592, 595, 597, 598, 605], "well": [5, 180, 181, 302, 313, 334, 531, 533, 552, 592, 595, 597, 599, 604], "By": [5, 166, 177, 256, 294, 533, 566, 569, 580, 581, 584, 593, 602], "skip": [5, 600, 602], "creation": [5, 360], "we": [5, 43, 66, 67, 69, 73, 85, 140, 150, 156, 157, 158, 166, 177, 191, 210, 212, 231, 256, 259, 294, 297, 320, 528, 530, 534, 551, 556, 558, 560, 566, 567, 574, 575, 578, 582, 585, 587, 588, 589, 590, 592, 594, 595, 598, 599, 600, 602, 603], "don": [5, 140, 157, 168, 176, 177, 530, 549, 592, 602], "t": [5, 66, 67, 69, 140, 157, 168, 176, 177, 209, 212, 247, 261, 299, 530, 534, 549, 554, 556, 567, 588, 592, 595, 602, 604], "even": [5, 549, 592, 599], "need": [5, 17, 43, 104, 108, 150, 158, 166, 177, 180, 181, 182, 190, 191, 194, 201, 209, 212, 214, 215, 222, 230, 231, 234, 241, 247, 292, 301, 302, 312, 313, 322, 334, 343, 344, 530, 534, 549, 551, 552, 554, 556, 563, 567, 568, 570, 572, 573, 576, 580, 581, 582, 584, 585, 587, 588, 592, 594, 595, 596, 597, 599, 601, 602, 604], "dbapi": 5, "avail": [5, 177, 306, 447, 535, 537, 541, 544, 547, 549, 557, 561, 563, 580, 584, 591, 592, 602, 605], "call": [5, 17, 150, 153, 166, 169, 259, 288, 297, 530, 531, 534, 549, 551, 562, 576, 578, 588, 592, 595, 599, 600, 601], "execut": [5, 43, 52, 169, 176, 177, 288, 292, 313, 314, 316, 334, 337, 343, 344, 346, 347, 450, 454, 458, 462, 463, 466, 469, 481, 484, 492, 493, 515, 549, 554, 555, 567, 568, 572, 573, 580, 581, 584, 587, 588, 590, 592, 595, 598, 602, 605], "emit": 5, "given": [5, 17, 20, 66, 67, 69, 103, 104, 115, 145, 152, 209, 247, 259, 297, 313, 408, 485, 499, 531, 592, 599, 601], "string": [5, 43, 44, 115, 145, 160, 166, 168, 169, 170, 171, 172, 173, 177, 194, 211, 216, 234, 248, 252, 254, 256, 259, 265, 266, 267, 269, 270, 278, 283, 286, 287, 288, 289, 290, 291, 294, 297, 306, 310, 337, 344, 357, 499, 566, 599, 601], "script": [5, 166, 256, 257, 260, 261, 294, 295, 298, 299, 346, 347, 433, 450, 454, 458, 460, 463, 466, 472, 556, 563, 570, 574, 577, 578, 581, 593], "output": [5, 43, 52, 56, 58, 73, 97, 104, 109, 145, 152, 166, 167, 168, 174, 176, 177, 180, 181, 214, 218, 251, 252, 256, 286, 294, 301, 302, 310, 313, 334, 340, 341, 344, 454, 458, 530, 534, 549, 554, 555, 556, 558, 560, 562, 566, 567, 569, 578, 587, 588, 590, 592, 594, 595, 599, 600, 601, 602, 604], "run_migrations_onlin": 5, "onlin": [5, 528, 598], "In": [5, 159, 168, 169, 170, 177, 191, 219, 231, 259, 286, 288, 297, 312, 528, 530, 531, 533, 534, 549, 551, 552, 554, 555, 556, 566, 567, 577, 580, 581, 584, 589, 590, 592, 595, 596, 598, 599, 600, 601, 602], "scenario": [5, 361, 534, 549, 550, 554, 567, 592], "associ": [5, 259, 297, 386, 387], "connect": [5, 163, 288, 385, 386, 388, 389, 390, 392, 393, 394, 395, 549, 587, 591, 592, 598], "adaptor_registri": [6, 534], "cl": [6, 153, 160, 168, 169, 170, 171, 194, 201, 209, 211, 216, 234, 241, 247, 270, 277, 281, 286, 288, 290, 312, 325, 344], "The": [6, 8, 15, 18, 20, 37, 43, 52, 73, 112, 118, 120, 145, 152, 153, 158, 159, 160, 163, 166, 168, 169, 170, 171, 172, 173, 174, 177, 180, 181, 182, 192, 193, 194, 195, 196, 200, 201, 209, 211, 214, 216, 219, 221, 222, 232, 233, 234, 235, 236, 240, 241, 247, 248, 254, 256, 257, 258, 260, 261, 263, 265, 266, 267, 269, 270, 272, 273, 275, 276, 277, 278, 281, 283, 286, 287, 288, 289, 290, 291, 294, 295, 296, 298, 299, 301, 302, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 329, 331, 332, 334, 335, 337, 339, 340, 343, 344, 364, 365, 367, 370, 374, 375, 378, 379, 381, 383, 384, 391, 396, 399, 401, 402, 403, 404, 405, 406, 407, 420, 427, 428, 480, 528, 530, 531, 534, 535, 537, 541, 544, 547, 549, 550, 551, 552, 554, 556, 558, 560, 562, 563, 564, 566, 567, 568, 569, 572, 573, 575, 578, 580, 581, 582, 584, 585, 587, 588, 589, 590, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605], "decor": [6, 20, 37, 66, 67, 69, 145, 153, 168, 169, 171, 209, 216, 247, 263, 270, 277, 281, 286, 288, 290, 301, 312, 325, 328, 344, 494, 530, 531, 534, 602], "us": [6, 17, 20, 37, 43, 47, 48, 69, 102, 104, 115, 147, 152, 158, 160, 163, 166, 167, 168, 169, 171, 174, 176, 177, 180, 181, 190, 191, 192, 193, 194, 195, 196, 199, 208, 209, 210, 211, 216, 230, 231, 232, 233, 234, 235, 236, 239, 246, 247, 251, 252, 254, 256, 257, 259, 263, 264, 265, 270, 277, 278, 281, 283, 286, 288, 289, 290, 291, 292, 294, 295, 297, 301, 312, 317, 320, 322, 325, 328, 329, 332, 335, 336, 337, 338, 344, 391, 396, 401, 402, 406, 408, 420, 427, 429, 454, 458, 499, 511, 528, 529, 530, 531, 534, 549, 550, 551, 552, 554, 555, 556, 558, 560, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 578, 580, 582, 584, 585, 587, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605], "regist": [6, 20, 37, 153, 160, 163, 168, 169, 170, 171, 194, 201, 209, 211, 216, 234, 241, 247, 263, 270, 277, 281, 286, 288, 290, 301, 312, 325, 328, 531, 534, 552, 556, 566, 567, 588, 589, 599, 602], "all": [6, 17, 20, 37, 44, 62, 96, 153, 155, 158, 159, 168, 169, 172, 177, 182, 183, 190, 194, 201, 209, 210, 216, 219, 221, 222, 230, 234, 241, 247, 252, 256, 259, 261, 263, 270, 277, 281, 282, 286, 292, 294, 297, 299, 301, 303, 312, 325, 328, 337, 344, 348, 360, 372, 396, 401, 402, 415, 417, 420, 421, 427, 446, 453, 455, 459, 460, 462, 465, 471, 476, 480, 493, 516, 528, 533, 534, 549, 551, 552, 556, 560, 564, 567, 570, 578, 581, 582, 585, 586, 587, 588, 590, 591, 592, 593, 595, 596, 599, 601, 602], "subclass": [6, 20, 37, 153, 168, 169, 171, 187, 191, 194, 201, 209, 216, 227, 231, 234, 241, 247, 263, 270, 277, 281, 286, 288, 290, 301, 312, 325, 328, 534], "paramet": [6, 15, 17, 18, 20, 43, 44, 66, 67, 69, 85, 104, 115, 131, 145, 146, 147, 150, 151, 152, 153, 158, 159, 160, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 180, 181, 191, 192, 194, 201, 205, 209, 211, 216, 221, 231, 232, 234, 241, 244, 247, 248, 250, 251, 252, 253, 254, 256, 257, 259, 260, 261, 263, 265, 266, 267, 269, 270, 271, 272, 273, 275, 276, 277, 278, 281, 283, 286, 287, 288, 289, 290, 291, 294, 295, 297, 298, 299, 301, 302, 306, 310, 312, 313, 317, 325, 329, 331, 332, 334, 337, 341, 343, 344, 361, 386, 387, 397, 408, 479, 499, 501, 511, 530, 549, 551, 552, 554, 556, 563, 566, 567, 581, 587, 588, 592, 595, 598, 599, 601, 602, 604], "framework_specific_info": [6, 8, 15, 18, 44, 46, 534], "base": [6, 15, 17, 20, 37, 44, 45, 46, 85, 104, 115, 119, 121, 131, 141, 147, 152, 153, 159, 163, 177, 182, 185, 190, 192, 194, 201, 209, 219, 222, 225, 230, 232, 234, 241, 247, 263, 269, 271, 277, 278, 281, 283, 288, 301, 303, 310, 311, 312, 322, 325, 329, 359, 499, 531, 533, 534, 552, 555, 556, 560, 567, 575, 576, 578, 587, 591, 592, 595, 598, 600, 602, 605], "framework": [6, 8, 15, 17, 18, 44, 158, 160, 169, 178, 179, 183, 184, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 206, 209, 211, 212, 216, 223, 224, 226, 228, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 243, 245, 247, 254, 263, 264, 291, 301, 302, 303, 304, 306, 323, 329, 337, 346, 372, 396, 398, 420, 447, 454, 458, 463, 466, 481, 487, 499, 533, 534, 549, 556, 557, 561, 562, 563, 564, 566, 567, 568, 592, 593, 595, 600, 601, 602, 603, 604], "layer": [6, 8, 15, 18, 43, 44, 45, 46, 115, 116, 117, 118, 120, 121, 150, 156, 160, 166, 167, 168, 172, 177, 211, 218, 286, 287, 335, 337, 344, 511, 534, 555, 563, 592, 597], "mxnet_util": 7, "util": [7, 16, 21, 104, 109, 110, 138, 139, 146, 147, 148, 151, 162, 164, 177, 218, 249, 255, 257, 287, 293, 295, 321, 359, 396, 420, 427, 437, 471, 476, 480, 535, 556, 567, 570, 595, 602, 603], "ox_util": 7, "oper": [7, 21, 43, 103, 109, 145, 166, 167, 168, 177, 205, 244, 286, 511, 530, 549, 550, 551, 558, 587, 595, 599, 601, 602], "activ": [7, 21, 33, 152, 176, 177, 218, 252, 329, 404, 534, 549, 555, 560, 567, 588, 591, 594, 595, 599, 600, 604], "argmax": [7, 21, 33], "attent": [7, 21, 33, 166, 172, 177, 192, 232, 528, 554], "binary_op": [7, 21, 33], "concat": [7, 21, 33, 144], "conv": [7, 21, 33, 57, 61, 65, 70, 71, 72, 91, 108, 156, 176, 177, 530, 567, 592, 594, 595, 602], "direct_q8": [7, 21, 33], "embed_layernorm": [7, 21, 33], "gather": [7, 17, 21, 33, 177, 286, 487], "gavgpool": [7, 21, 33], "gemm": [7, 21, 33, 176, 177, 592], "lstm": [7, 21, 33], "matmul": [7, 21, 33, 51, 58, 64, 72, 93, 108, 127, 136, 168, 176, 177, 252, 286, 558, 560, 602], "maxpool": [7, 21, 33, 128, 137, 560], "op": [7, 17, 21, 33, 43, 44, 51, 56, 64, 65, 66, 67, 68, 69, 70, 71, 73, 77, 80, 84, 87, 90, 91, 92, 93, 95, 104, 106, 108, 122, 123, 124, 130, 132, 133, 134, 135, 140, 143, 145, 146, 147, 151, 152, 156, 166, 176, 177, 252, 318, 320, 322, 329, 330, 339, 404, 405, 515, 534, 549, 560, 567, 568, 592, 595, 596, 597, 599, 600, 602, 604], "pad": [7, 21, 33, 70, 71, 192, 209, 232, 247, 552, 601], "pool": [7, 21, 33], "resiz": [7, 21, 33, 192, 193, 205, 209, 232, 233, 244, 247, 551, 552, 601], "split": [7, 21, 33, 43, 81, 208, 209, 246, 247, 530, 599, 601], "calibr": [7, 15, 17, 18, 21, 43, 48, 88, 89, 152, 158, 176, 177, 180, 181, 254, 291, 302, 313, 339, 508, 534, 551, 552, 562, 563, 595, 602, 604], "quantiz": [7, 15, 17, 18, 20, 21, 43, 47, 48, 87, 91, 93, 95, 98, 106, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 150, 152, 156, 158, 159, 176, 177, 180, 181, 205, 212, 219, 244, 252, 253, 254, 255, 265, 292, 293, 302, 318, 320, 322, 334, 335, 339, 343, 344, 480, 488, 504, 534, 539, 549, 551, 552, 556, 557, 558, 560, 562, 563, 566, 568, 569, 570, 575, 577, 578, 581, 590, 593, 597, 600, 601, 602, 603, 604], "tf_util": 7, "graph_rewrit": [7, 110], "bf16": [7, 56, 86, 110, 146, 176, 177, 329, 534, 560, 567, 568, 572, 577, 581, 587, 596, 602], "gener": [7, 17, 47, 48, 86, 110, 121, 145, 150, 152, 166, 172, 180, 181, 182, 191, 194, 195, 196, 197, 209, 222, 231, 234, 235, 236, 237, 247, 252, 256, 264, 294, 302, 313, 317, 332, 334, 346, 349, 350, 351, 352, 353, 354, 355, 356, 397, 466, 472, 473, 483, 524, 530, 534, 549, 551, 554, 566, 567, 568, 570, 575, 580, 582, 584, 585, 587, 589, 591, 592, 593, 595, 596, 599, 600, 601, 602], "int8": [7, 22, 23, 43, 86, 110, 122, 123, 124, 130, 132, 133, 134, 135, 140, 145, 157, 158, 176, 177, 205, 244, 250, 251, 252, 329, 331, 343, 530, 534, 549, 550, 552, 555, 560, 567, 572, 575, 577, 578, 581, 587, 594, 595, 596, 597, 598, 599, 600, 601, 604], "onnx": [7, 18, 19, 20, 33, 42, 43, 86, 110, 139, 156, 176, 177, 188, 228, 250, 251, 252, 253, 302, 309, 342, 347, 450, 533, 534, 535, 551, 557, 558, 560, 561, 563, 569, 572, 577, 578, 593, 594, 602], "qdq": [7, 86, 110, 111, 112, 139, 152, 176, 177, 250, 251, 252, 534, 558, 563, 577, 578, 595], "graph_bas": [7, 86, 110], "quantize_graph": [7, 110], "qat": [7, 110, 111, 151, 177, 252, 265, 310, 555, 556, 558, 563, 567, 595], "quantize_graph_bas": [7, 110, 111], "quantize_graph_bn": [7, 110, 111], "quantize_graph_concatv2": [7, 110, 111], "quantize_graph_conv": [7, 110, 111], "quantize_graph_for_intel_cpu": [7, 110, 111], "quantize_graph_matmul": [7, 110, 111], "quantize_graph_pool": [7, 110, 111], "transform_graph": [7, 110], "bias_correct": [7, 110, 142], "graph_transform_bas": [7, 110, 142], "insert_log": [7, 110, 142], "rerange_quantized_concat": [7, 110, 142], "graph_convert": [7, 110], "graph_converter_without_calib": [7, 110], "graph_util": [7, 110], "quantize_graph_common": [7, 110], "tf2onnx_convert": [7, 110], "torch_util": [7, 213, 255, 293, 599], "bf16_convert": [7, 50, 86, 110, 148], "hawq_metr": [7, 148], "model_wrapp": [7, 19, 148], "symbolic_trac": [7, 148], "tensorflow": [7, 50, 52, 74, 75, 76, 86, 94, 100, 101, 102, 103, 104, 105, 109, 110, 111, 113, 116, 129, 139, 142, 145, 176, 177, 191, 192, 193, 194, 197, 199, 201, 209, 211, 216, 231, 232, 233, 234, 237, 239, 241, 247, 251, 252, 253, 254, 257, 259, 263, 264, 265, 291, 295, 297, 301, 302, 310, 313, 323, 344, 406, 407, 419, 420, 427, 476, 477, 478, 480, 531, 533, 534, 549, 551, 554, 555, 557, 558, 560, 561, 563, 564, 567, 569, 577, 578, 593, 594, 598, 602, 604], "kerasadaptor": 8, "mxnetadaptor": 15, "do": [15, 18, 159, 176, 177, 191, 192, 231, 232, 248, 252, 256, 259, 289, 294, 297, 343, 528, 549, 552, 556, 560, 563, 564, 566, 567, 582, 585, 592, 596, 597, 602], "inspect": [15, 18, 549, 597, 600], "tensor": [15, 17, 18, 19, 20, 43, 69, 104, 145, 147, 152, 163, 168, 169, 170, 177, 209, 247, 250, 252, 286, 288, 310, 322, 344, 530, 552, 592, 595, 597, 600, 601, 602], "dict": [15, 17, 18, 43, 44, 115, 145, 146, 147, 150, 152, 153, 158, 163, 166, 167, 168, 169, 170, 171, 172, 174, 177, 180, 181, 191, 210, 216, 231, 250, 252, 258, 259, 260, 261, 263, 266, 269, 270, 271, 278, 281, 283, 286, 287, 288, 289, 290, 296, 297, 298, 299, 301, 302, 310, 313, 317, 318, 322, 328, 331, 332, 334, 335, 337, 343, 344, 345, 347, 350, 358, 359, 361, 366, 368, 369, 371, 373, 376, 377, 382, 386, 387, 398, 404, 408, 416, 425, 443, 444, 445, 447, 450, 452, 457, 461, 464, 467, 468, 469, 472, 474, 477, 484, 485, 487, 489, 495, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 511, 515, 516, 530, 566, 592, 594, 595, 599, 600, 602], "specif": [15, 18, 44, 45, 103, 115, 172, 176, 177, 192, 193, 194, 195, 199, 201, 216, 232, 233, 234, 235, 239, 241, 265, 272, 273, 275, 276, 277, 386, 387, 528, 531, 534, 549, 554, 560, 562, 566, 567, 568, 569, 570, 574, 575, 577, 581, 587, 589, 592, 594, 602, 604], "mxnetqueri": 15, "local_config_fil": [15, 44, 46], "defin": [15, 44, 45, 85, 147, 149, 166, 168, 169, 170, 171, 177, 180, 181, 266, 267, 269, 270, 271, 278, 283, 286, 287, 288, 290, 302, 313, 334, 343, 422, 423, 424, 511, 528, 531, 534, 549, 551, 552, 554, 555, 560, 563, 566, 567, 588, 590, 592, 595, 598, 599, 600, 602, 604], "queri": [15, 17, 44, 46, 145, 166, 177, 329, 385, 386, 388, 389, 390, 392, 393, 394, 395, 595], "interfac": [15, 44, 45, 85, 112, 173, 254, 278, 283, 291, 292, 337, 345, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 461, 467, 474, 486, 563, 567, 578, 591, 595, 597], "each": [15, 43, 44, 45, 147, 177, 190, 194, 197, 205, 209, 230, 234, 237, 244, 247, 257, 259, 260, 261, 295, 297, 298, 299, 322, 529, 534, 549, 552, 554, 555, 560, 567, 568, 572, 578, 581, 587, 589, 592, 598, 599, 600, 601, 602, 603], "adapt": [15, 44, 45, 528, 533, 552, 578, 593], "should": [15, 44, 45, 53, 114, 115, 166, 169, 177, 180, 181, 190, 192, 194, 209, 214, 230, 232, 234, 247, 252, 257, 295, 301, 302, 313, 332, 334, 344, 408, 530, 531, 534, 549, 552, 554, 556, 566, 567, 568, 573, 582, 585, 587, 589, 595, 601, 602, 604], "implement": [15, 44, 45, 109, 140, 144, 180, 181, 187, 190, 191, 192, 194, 227, 230, 231, 232, 234, 256, 294, 302, 312, 313, 320, 334, 551, 552, 567, 578, 588, 592, 595, 597, 600, 602, 604], "inherit": [15, 44, 45, 159, 160, 169, 171, 176, 189, 209, 211, 219, 229, 247, 288, 290, 531, 534, 552], "backend": [15, 19, 44, 45, 156, 176, 177, 178, 179, 183, 184, 188, 192, 193, 195, 196, 197, 198, 199, 203, 206, 209, 215, 216, 223, 224, 226, 228, 232, 233, 235, 236, 237, 238, 239, 243, 245, 247, 264, 302, 303, 304, 306, 323, 530, 556, 562, 563, 567, 568, 576, 594, 601, 604], "own": [15, 44, 45, 73, 190, 209, 230, 247, 312, 531, 549, 551, 552, 563, 566, 589, 598, 603], "mxnet": [16, 17, 20, 187, 191, 194, 197, 201, 209, 227, 231, 234, 237, 241, 247, 254, 263, 291, 301, 302, 307, 313, 533, 534, 551, 557, 560, 563, 564, 567, 568, 569, 594, 602, 604], "init": [16, 21, 155, 161, 164, 165, 552, 566], "optyp": [17, 176, 177, 250], "enum": 17, "type": [17, 20, 43, 44, 73, 95, 104, 115, 121, 131, 145, 146, 147, 152, 153, 160, 166, 167, 168, 169, 170, 171, 172, 174, 176, 177, 190, 192, 194, 201, 209, 211, 216, 230, 232, 234, 241, 247, 252, 253, 256, 257, 259, 263, 270, 277, 281, 286, 288, 290, 294, 295, 297, 301, 310, 312, 317, 318, 325, 329, 331, 332, 343, 357, 362, 386, 387, 429, 487, 495, 529, 534, 549, 552, 556, 560, 563, 567, 568, 588, 595, 598, 601, 602, 604], "isiter": 17, "obj": [17, 104, 172, 191, 221, 231, 248, 254, 265, 266, 267, 269, 278, 283, 287, 291, 302, 312, 313, 334, 337, 344], "bool": [17, 145, 151, 152, 168, 177, 192, 194, 205, 209, 232, 234, 244, 247, 252, 257, 263, 286, 295, 301, 328, 332, 343, 344, 408, 416, 435, 447, 450, 484, 487, 499, 518, 552, 566, 594, 601], "check": [17, 66, 67, 104, 145, 152, 172, 194, 234, 250, 287, 343, 344, 447, 450, 487, 499, 529, 533, 549, 556, 564, 571, 573, 575, 582, 585, 586, 597], "whether": [17, 104, 115, 145, 168, 176, 177, 190, 192, 205, 209, 230, 232, 244, 247, 257, 259, 263, 286, 295, 297, 301, 337, 343, 344, 450, 534, 552, 566, 595, 601], "object": [17, 43, 44, 73, 85, 104, 115, 131, 146, 147, 151, 152, 158, 159, 163, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 180, 181, 182, 192, 193, 194, 209, 210, 212, 221, 222, 232, 233, 234, 247, 248, 252, 254, 259, 267, 269, 272, 273, 275, 276, 277, 278, 283, 286, 287, 288, 289, 290, 291, 293, 297, 302, 310, 311, 313, 317, 334, 337, 343, 344, 424, 499, 511, 512, 516, 530, 531, 539, 549, 550, 551, 552, 559, 566, 567, 569, 590, 592, 594, 595, 601, 602, 603, 605], "iter": [17, 19, 104, 145, 158, 167, 169, 171, 177, 180, 181, 185, 190, 194, 195, 212, 225, 230, 234, 235, 288, 290, 302, 313, 334, 337, 530, 531, 534, 550, 552, 567, 592, 594, 595, 600, 602, 604], "return": [17, 20, 43, 44, 52, 66, 67, 69, 73, 104, 115, 145, 146, 147, 151, 152, 153, 158, 160, 166, 168, 169, 170, 171, 172, 174, 180, 181, 194, 201, 205, 209, 210, 211, 216, 221, 234, 241, 244, 247, 252, 253, 256, 257, 259, 260, 261, 263, 269, 270, 277, 281, 286, 287, 288, 290, 294, 295, 297, 298, 299, 301, 302, 306, 310, 312, 313, 317, 325, 329, 331, 332, 334, 337, 343, 344, 408, 487, 499, 530, 531, 552, 556, 566, 569, 589, 592, 595, 599, 600, 602], "true": [17, 84, 112, 143, 145, 158, 176, 177, 190, 192, 194, 195, 208, 209, 210, 230, 232, 234, 235, 246, 247, 252, 257, 263, 281, 295, 301, 312, 328, 332, 337, 343, 484, 487, 499, 552, 556, 560, 566, 567, 570, 573, 574, 594, 595, 599, 600, 601, 602, 604], "els": [17, 145, 177, 190, 230, 312, 499, 575, 600], "fals": [17, 19, 42, 46, 47, 48, 70, 71, 88, 91, 98, 101, 102, 104, 112, 130, 135, 140, 143, 144, 145, 151, 152, 158, 160, 176, 177, 182, 184, 192, 194, 205, 209, 210, 211, 212, 218, 222, 224, 232, 234, 244, 247, 259, 263, 297, 301, 312, 332, 337, 416, 435, 487, 499, 518, 534, 552, 560, 566, 567, 580, 584, 594, 595, 599, 600, 601, 604], "boolean": [17, 499], "ensure_list": 17, "x": [17, 53, 73, 167, 191, 209, 231, 247, 317, 332, 556, 558, 568, 569, 592, 595, 599, 600, 601, 603], "ensur": [17, 209, 247, 317, 549, 556, 558, 595, 601], "list": [17, 43, 52, 104, 145, 146, 147, 152, 158, 166, 167, 168, 176, 177, 180, 181, 185, 192, 205, 209, 210, 225, 232, 244, 247, 251, 252, 256, 257, 259, 260, 261, 263, 270, 278, 283, 286, 289, 294, 295, 297, 298, 299, 301, 302, 310, 313, 328, 332, 334, 335, 357, 359, 361, 366, 368, 369, 371, 373, 376, 377, 382, 386, 387, 398, 408, 411, 416, 442, 447, 450, 454, 458, 484, 491, 492, 493, 499, 511, 518, 530, 533, 534, 552, 560, 564, 567, 570, 575, 577, 580, 581, 584, 589, 592, 594, 595, 596, 599, 600, 602], "input": [17, 19, 43, 44, 52, 59, 63, 66, 67, 69, 70, 71, 73, 81, 82, 84, 85, 104, 108, 109, 115, 121, 145, 146, 150, 151, 152, 156, 166, 167, 176, 177, 180, 181, 192, 193, 194, 196, 205, 208, 209, 214, 232, 233, 234, 236, 244, 246, 247, 250, 251, 252, 301, 302, 306, 310, 313, 334, 343, 344, 346, 442, 454, 458, 463, 466, 472, 531, 534, 549, 550, 551, 552, 554, 555, 556, 558, 560, 562, 566, 567, 569, 570, 575, 592, 594, 595, 599, 600, 601, 604], "check_mx_vers": 17, "version": [17, 52, 103, 152, 166, 177, 251, 252, 293, 447, 487, 499, 528, 530, 534, 549, 560, 564, 565, 567, 580, 582, 584, 585, 591, 593, 602, 603], "str": [17, 146, 147, 150, 151, 152, 153, 160, 166, 177, 192, 193, 194, 201, 205, 209, 211, 215, 216, 232, 233, 234, 241, 244, 247, 251, 252, 253, 256, 257, 259, 261, 263, 270, 281, 294, 295, 297, 299, 301, 328, 331, 332, 337, 344, 346, 347, 350, 357, 358, 359, 361, 363, 386, 387, 398, 404, 405, 408, 410, 411, 416, 425, 426, 428, 429, 431, 433, 435, 436, 439, 440, 441, 443, 444, 445, 447, 450, 454, 458, 463, 466, 468, 469, 472, 473, 484, 487, 492, 495, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 511, 515, 516, 552, 566, 594, 600, 601], "mx": 17, "__version__": 17, "combine_cap": 17, "current": [17, 43, 69, 103, 150, 163, 166, 168, 169, 177, 265, 272, 273, 275, 276, 277, 286, 288, 317, 323, 530, 531, 534, 549, 556, 560, 564, 566, 567, 570, 574, 587, 589, 592, 595, 599, 602], "new": [17, 20, 145, 150, 158, 182, 194, 209, 210, 222, 234, 247, 287, 312, 511, 529, 556, 567, 568, 581, 587, 588, 592, 593, 595, 597, 598, 601, 603, 604], "combin": [17, 152, 176, 177, 180, 181, 205, 219, 244, 302, 313, 334, 344, 530, 534, 563, 567, 590, 593, 595, 596, 601, 602], "capabl": [17, 46, 329, 550, 560, 567, 568, 578, 594, 595, 602, 604], "contain": [17, 66, 67, 69, 73, 138, 145, 147, 150, 158, 159, 166, 168, 169, 171, 172, 177, 180, 181, 192, 193, 194, 232, 233, 234, 248, 252, 254, 259, 260, 261, 265, 278, 281, 283, 286, 287, 288, 289, 290, 291, 297, 298, 299, 302, 313, 334, 337, 343, 348, 352, 360, 366, 368, 369, 371, 372, 373, 376, 377, 380, 382, 391, 396, 401, 402, 406, 409, 415, 420, 421, 427, 446, 453, 455, 456, 459, 460, 462, 465, 471, 476, 480, 552, 554, 563, 566, 588, 592, 600, 602, 603], "make_nc_model": 17, "target": [17, 43, 101, 166, 171, 172, 177, 287, 290, 317, 412, 552, 556, 567, 592, 600, 601, 602, 604], "sym_model": 17, "ctx": 17, "input_desc": 17, "convert": [17, 43, 47, 48, 49, 51, 52, 53, 54, 55, 65, 73, 85, 98, 99, 101, 102, 103, 104, 130, 135, 139, 146, 152, 166, 176, 177, 192, 205, 208, 209, 232, 244, 246, 247, 251, 259, 265, 287, 297, 329, 332, 530, 567, 568, 572, 595, 596, 599, 601, 602], "symbol": [17, 146, 151, 152, 256, 294, 302, 313, 530, 569], "model": [17, 19, 20, 33, 42, 43, 44, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 115, 117, 139, 145, 146, 147, 150, 151, 152, 156, 158, 159, 166, 169, 171, 172, 176, 177, 180, 181, 188, 191, 192, 194, 209, 210, 213, 214, 221, 228, 231, 232, 234, 247, 248, 250, 251, 252, 253, 254, 255, 263, 264, 265, 266, 269, 272, 273, 275, 276, 277, 278, 283, 287, 288, 289, 290, 291, 292, 293, 301, 302, 312, 313, 314, 317, 318, 322, 325, 332, 334, 340, 343, 344, 346, 347, 348, 372, 388, 390, 392, 396, 397, 408, 413, 414, 415, 418, 419, 420, 444, 445, 447, 450, 453, 454, 455, 456, 458, 459, 460, 465, 466, 471, 476, 480, 481, 488, 499, 504, 514, 515, 519, 526, 530, 531, 533, 534, 539, 550, 551, 552, 554, 555, 556, 557, 562, 563, 565, 566, 568, 570, 575, 577, 578, 581, 587, 589, 590, 591, 593, 595, 597, 598, 600, 601, 602, 603, 604], "neural": [17, 147, 158, 159, 168, 176, 177, 204, 205, 206, 209, 210, 213, 216, 219, 244, 245, 247, 249, 255, 262, 263, 265, 278, 283, 286, 289, 291, 292, 293, 300, 301, 302, 306, 313, 320, 321, 327, 334, 479, 486, 499, 526, 529, 534, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 565, 566, 568, 569, 571, 572, 575, 577, 578, 580, 582, 584, 585, 586, 589, 590, 593, 595, 597, 600, 601, 602, 604, 605], "compressor": [17, 158, 159, 168, 176, 177, 204, 205, 206, 209, 210, 213, 216, 219, 244, 245, 247, 249, 255, 262, 263, 265, 286, 289, 291, 292, 293, 300, 301, 302, 306, 313, 321, 327, 334, 479, 486, 499, 526, 529, 531, 534, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 565, 566, 568, 569, 570, 571, 575, 577, 578, 580, 582, 584, 585, 586, 589, 590, 592, 593, 595, 597, 600, 601, 602, 603, 604, 605], "tupl": [17, 104, 152, 177, 180, 181, 205, 209, 244, 247, 252, 302, 313, 328, 334, 499, 552, 566, 567, 595, 601], "symnet": 17, "arg": [17, 52, 104, 192, 193, 194, 232, 233, 234, 286, 317, 332, 340, 341, 349, 351, 353, 354, 355, 356, 366, 368, 369, 371, 373, 376, 377, 382, 551, 552, 556, 567, 576, 595, 600, 601], "aux": 17, "data": [17, 43, 54, 104, 145, 147, 150, 152, 156, 166, 176, 177, 180, 181, 210, 212, 252, 253, 255, 293, 302, 313, 317, 329, 331, 334, 337, 344, 347, 350, 358, 359, 361, 385, 397, 408, 424, 425, 435, 443, 444, 445, 447, 450, 467, 469, 484, 497, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 511, 515, 523, 533, 534, 549, 551, 552, 556, 560, 561, 564, 566, 567, 568, 595, 596, 597, 598, 599, 600, 601, 602], "descript": [17, 131, 252, 253, 332, 529, 530], "ncmodel": 17, "fuse": [17, 57, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 90, 91, 92, 93, 95, 130, 135, 151, 152, 156, 530, 599, 600], "suppli": 17, "get_framework_nam": 17, "get": [17, 43, 44, 66, 67, 69, 103, 104, 145, 150, 152, 158, 163, 166, 168, 169, 170, 171, 172, 174, 177, 185, 209, 210, 216, 218, 225, 247, 252, 253, 286, 288, 290, 310, 322, 329, 331, 337, 344, 358, 359, 361, 398, 408, 425, 429, 442, 447, 450, 468, 479, 487, 495, 499, 515, 516, 549, 559, 563, 564, 567, 573, 599, 602, 603, 606], "name": [17, 43, 44, 52, 66, 67, 69, 103, 104, 109, 115, 145, 146, 147, 150, 151, 152, 153, 158, 163, 166, 168, 169, 170, 171, 174, 176, 177, 192, 193, 194, 197, 201, 207, 209, 210, 214, 217, 218, 232, 233, 234, 237, 241, 247, 250, 251, 252, 258, 263, 281, 286, 288, 290, 296, 301, 306, 310, 312, 329, 331, 335, 337, 344, 408, 410, 447, 448, 449, 450, 487, 499, 501, 530, 549, 552, 556, 560, 565, 566, 567, 569, 573, 580, 584, 588, 591, 592, 595, 597, 598, 600, 602, 604, 605], "prepare_model_data": 17, "nc_model": [17, 278, 283, 334], "data_x": 17, "prepar": [17, 152, 479, 530, 533, 552, 556, 561, 595], "loader": [17, 180, 181, 302, 313, 334, 340, 595], "dataloaderwrap": 17, "prepare_model": 17, "create_data_exampl": 17, "exampl": [17, 147, 152, 158, 166, 167, 176, 177, 192, 193, 194, 205, 209, 232, 233, 234, 244, 247, 259, 260, 261, 263, 289, 297, 298, 299, 301, 302, 312, 313, 332, 334, 372, 390, 396, 420, 444, 445, 446, 447, 499, 528, 529, 533, 539, 549, 562, 563, 570, 573, 574, 575, 578, 596, 597, 601, 602, 603, 606], "prepare_dataload": 17, "io": 17, "ndarray_to_devic": 17, "ndarrai": [17, 66, 67, 69, 209, 247, 335, 559, 601], "devic": [17, 78, 88, 89, 90, 91, 92, 93, 96, 106, 130, 135, 144, 166, 167, 176, 177, 554, 567, 568, 570, 573, 578, 587, 592, 594], "is_model_quant": 17, "query_quantizable_nod": 17, "node": [17, 43, 49, 52, 53, 54, 55, 59, 61, 63, 66, 67, 69, 73, 76, 79, 81, 82, 83, 97, 101, 102, 104, 109, 131, 145, 250, 252, 310, 410, 412, 415, 420, 478, 480, 534, 549, 556, 600, 602], "map": [17, 43, 104, 177, 209, 247, 250, 252, 254, 258, 260, 261, 263, 278, 283, 288, 291, 296, 298, 299, 301, 449, 552, 556, 566, 567, 580, 584, 592, 595], "quantize_sym_model": 17, "qconfig": [17, 600], "accord": [17, 121, 152, 158, 177, 192, 193, 194, 209, 232, 233, 234, 247, 320, 322, 329, 337, 531, 534, 552, 556, 592, 596, 599, 601, 602], "run_forward": 17, "b_filter": 17, "collector": [17, 147, 335], "none": [17, 42, 43, 44, 46, 47, 48, 62, 88, 101, 103, 104, 109, 115, 139, 145, 147, 150, 152, 158, 159, 160, 172, 173, 174, 176, 177, 180, 181, 182, 184, 190, 192, 193, 194, 195, 196, 197, 199, 205, 209, 210, 211, 212, 219, 221, 222, 224, 230, 232, 233, 234, 235, 236, 237, 239, 244, 247, 248, 251, 252, 254, 259, 263, 264, 265, 266, 269, 278, 283, 287, 291, 297, 301, 302, 312, 313, 314, 317, 318, 322, 325, 329, 332, 334, 335, 337, 343, 344, 346, 347, 358, 359, 363, 366, 368, 369, 371, 373, 376, 377, 382, 385, 386, 387, 398, 435, 447, 454, 458, 463, 466, 467, 469, 479, 484, 485, 487, 490, 492, 499, 505, 507, 508, 509, 516, 534, 552, 566, 595, 600, 601, 602], "pre_batch": 17, "post_batch": 17, "forward": [17, 533, 567, 592, 594, 595, 599, 600], "propag": [17, 99], "filter": [17, 192, 193, 194, 195, 196, 197, 199, 203, 232, 233, 234, 235, 236, 237, 239, 243, 255, 293, 344, 408, 501, 551, 552, 563, 592, 600], "which": [17, 54, 82, 109, 147, 150, 163, 166, 167, 168, 169, 171, 176, 177, 192, 193, 194, 205, 210, 232, 233, 234, 244, 256, 261, 270, 272, 273, 275, 276, 277, 281, 286, 287, 288, 290, 294, 299, 306, 312, 313, 317, 344, 497, 528, 530, 531, 534, 549, 551, 552, 554, 556, 559, 560, 563, 566, 567, 568, 569, 571, 575, 578, 581, 587, 588, 590, 592, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604], "batch": [17, 152, 182, 184, 185, 190, 191, 212, 222, 224, 225, 230, 231, 334, 549, 551, 554, 555, 567, 590, 592, 601, 602, 605], "infer": [17, 104, 166, 254, 291, 310, 312, 313, 334, 533, 534, 554, 555, 567, 568, 587, 589, 592, 593, 595, 599, 600, 602], "collect": [17, 20, 43, 207, 209, 212, 214, 215, 217, 247, 261, 263, 299, 301, 335, 344, 450, 487, 499, 558, 595, 600, 602], "inform": [17, 43, 147, 163, 166, 168, 169, 170, 171, 172, 177, 180, 181, 212, 214, 215, 286, 288, 289, 290, 292, 301, 361, 486, 487, 493, 528, 529, 532, 533, 534, 535, 537, 541, 544, 547, 554, 558, 560, 567, 569, 582, 585, 588, 592, 596, 597, 600, 604, 605, 606], "dure": [17, 168, 171, 177, 286, 290, 312, 567, 568, 569, 589, 590, 592, 595, 600, 604], "prior": [17, 87, 602], "after": [17, 43, 77, 152, 168, 169, 177, 192, 205, 209, 212, 232, 244, 247, 252, 288, 318, 332, 485, 531, 549, 551, 552, 554, 555, 558, 563, 566, 567, 580, 581, 584, 588, 589, 590, 592, 595, 596, 598, 599, 600, 601, 602], "count": [17, 531, 552], "int": [17, 20, 43, 104, 145, 152, 169, 177, 191, 192, 193, 205, 209, 231, 232, 233, 244, 247, 251, 252, 257, 259, 263, 270, 295, 297, 301, 332, 344, 363, 398, 442, 485, 487, 490, 499, 507, 552, 566, 567, 594, 601], "make_symbol_block": 17, "gluon": [17, 302, 313, 569], "symbolblock": 17, "make_modul": 17, "parse_tune_config": 17, "tune_cfg": [17, 145, 146, 152, 534, 602], "quantizable_nod": 17, "strategi": [17, 152, 169, 176, 177, 178, 194, 234, 293, 481, 499, 509, 533, 534, 539, 556, 563, 567, 575, 587, 593, 594, 595, 596, 597, 603, 604], "config": [17, 114, 115, 117, 121, 152, 158, 163, 168, 169, 170, 171, 172, 176, 180, 181, 192, 221, 232, 272, 273, 275, 276, 277, 278, 283, 286, 287, 288, 289, 290, 293, 302, 329, 330, 332, 334, 337, 343, 344, 346, 359, 398, 443, 454, 458, 463, 466, 480, 488, 499, 502, 504, 510, 531, 533, 539, 549, 550, 554, 555, 556, 558, 561, 563, 567, 568, 569, 590, 592, 594, 595, 596, 598, 600, 602], "tune": [17, 44, 158, 176, 177, 180, 181, 192, 194, 232, 234, 254, 291, 302, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 328, 329, 330, 331, 334, 344, 383, 384, 397, 420, 450, 455, 468, 480, 488, 504, 534, 549, 551, 552, 556, 563, 565, 567, 568, 587, 589, 592, 593, 596, 597, 598, 600, 604], "from": [17, 43, 44, 60, 66, 67, 69, 104, 145, 150, 152, 158, 159, 160, 163, 168, 169, 170, 171, 172, 177, 180, 181, 182, 185, 189, 192, 193, 194, 195, 196, 197, 199, 204, 205, 211, 212, 215, 222, 225, 229, 232, 233, 234, 235, 236, 237, 239, 244, 248, 250, 251, 252, 253, 256, 259, 260, 261, 265, 270, 286, 287, 288, 290, 294, 297, 298, 299, 302, 310, 312, 313, 329, 331, 332, 337, 343, 344, 397, 408, 431, 443, 444, 445, 447, 472, 492, 497, 499, 516, 528, 530, 531, 534, 550, 551, 552, 554, 555, 556, 557, 558, 559, 561, 563, 566, 568, 569, 570, 574, 575, 576, 578, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603], "distribute_calib_tensor": 17, "calib_tensor": 17, "calib_cfg": 17, "tensor_to_nod": 17, "distribut": [17, 20, 140, 157, 176, 177, 182, 184, 185, 190, 212, 222, 224, 225, 230, 339, 487, 533, 554, 564, 582, 585, 593, 595, 597, 599, 603, 605], "depend": [17, 180, 181, 210, 302, 313, 334, 529, 549, 559, 560, 594, 595, 602], "algorithm": [17, 150, 152, 173, 256, 263, 271, 293, 294, 301, 337, 339, 531, 534, 554, 555, 560, 563, 576, 581, 592, 595, 600, 604], "set": [17, 43, 56, 95, 104, 114, 145, 150, 152, 158, 166, 172, 174, 176, 177, 180, 181, 182, 192, 194, 197, 209, 210, 215, 216, 222, 232, 234, 237, 247, 252, 259, 265, 278, 283, 287, 292, 297, 302, 310, 313, 332, 334, 344, 346, 386, 387, 408, 454, 458, 466, 511, 516, 528, 531, 549, 550, 552, 554, 556, 560, 562, 563, 564, 566, 567, 568, 570, 572, 574, 588, 592, 594, 595, 598, 599, 602, 604], "kl": [17, 20, 177, 335, 339, 560, 567, 602, 604], "minmax": [17, 20, 560, 595, 604], "calib_model": 17, "qsym_model": 17, "calib_data": 17, "calibdata": 17, "threshold": [17, 154, 335, 339, 566], "amp_convert": 17, "amp_cfg": 17, "support": [17, 43, 96, 103, 150, 156, 160, 168, 169, 176, 177, 180, 181, 191, 192, 194, 201, 205, 209, 211, 212, 213, 216, 221, 231, 232, 234, 241, 244, 247, 255, 263, 265, 270, 286, 288, 292, 293, 301, 302, 306, 312, 313, 323, 329, 332, 334, 337, 339, 447, 481, 499, 526, 533, 549, 567, 570, 575, 578, 581, 587, 593, 596, 598, 599, 602, 603], "amp": [17, 570, 577, 591], "wrap": [17, 104, 115, 160, 211, 259, 297, 357, 530, 556, 582, 585], "dataiterload": 17, "data_it": 17, "collectorbas": 17, "calibcollector": 17, "include_tensors_kl": 17, "include_tensors_minmax": 17, "num_bin": [17, 20, 335], "8001": [17, 335], "tensorcollector": 17, "include_nod": 17, "qtensor_to_tensor": 17, "build": [17, 114, 153, 154, 156, 157, 167, 252, 253, 266, 269, 305, 307, 309, 310, 311, 408, 468, 499, 516, 534, 549, 564, 569, 580, 582, 584, 585, 588, 593, 598, 602], "up": [17, 99, 209, 247, 287, 385, 549, 556, 557, 560, 563, 578, 582, 585, 587, 593, 594, 595, 598, 601, 602, 604], "namecollector": 17, "cache_kl": 17, "cache_minmax": 17, "tensors_kl": 17, "tensors_minmax": 17, "onnxruntimeadaptor": 18, "rt": 18, "onnxrt_qlinearopsadaptor": [18, 534], "onnxrt_integeropsadaptor": 18, "onnxrt_qdqadaptor": 18, "onnxrtaug": 19, "dump_op_typ": 19, "black_nod": 19, "white_nod": 19, "cpuexecutionprovid": [19, 595], "reduce_rang": [19, 42, 176, 177, 594], "augment": 19, "dump": [19, 252, 344, 595, 600], "calib_registri": 20, "calib_method": 20, "calibratorbas": 20, "minmaxcalibr": 20, "percentilecalibr": 20, "2048": [20, 344], "percentil": 20, "99": [20, 599, 605], "999": [20, 604, 605], "option": [20, 104, 168, 177, 180, 181, 192, 209, 232, 247, 251, 252, 259, 265, 286, 292, 293, 297, 302, 313, 329, 332, 334, 338, 344, 552, 560, 564, 567, 581, 595, 598, 601, 602, 604], "number": [20, 66, 67, 104, 152, 167, 168, 169, 176, 177, 190, 193, 205, 209, 230, 233, 244, 247, 260, 261, 263, 286, 298, 299, 301, 317, 332, 337, 344, 431, 487, 549, 550, 552, 556, 566, 592, 595, 598, 601, 602], "bin": [20, 344, 559], "histogram": [20, 335, 344, 549, 600], "valu": [20, 43, 54, 66, 67, 69, 88, 89, 104, 140, 145, 152, 157, 158, 163, 166, 167, 172, 174, 176, 177, 180, 181, 192, 195, 196, 205, 209, 210, 232, 235, 236, 244, 247, 259, 263, 287, 297, 301, 302, 313, 317, 322, 329, 332, 334, 335, 337, 344, 357, 359, 361, 366, 368, 369, 371, 373, 376, 377, 382, 386, 387, 408, 410, 481, 485, 499, 507, 510, 530, 549, 552, 560, 566, 567, 573, 589, 592, 594, 595, 599, 601, 602, 604], "default": [20, 96, 145, 172, 174, 176, 177, 180, 181, 184, 192, 193, 194, 205, 209, 224, 232, 233, 234, 244, 247, 251, 252, 256, 265, 287, 294, 310, 331, 337, 344, 366, 368, 369, 371, 373, 376, 377, 382, 408, 425, 499, 530, 534, 549, 552, 558, 560, 563, 564, 566, 567, 568, 575, 578, 580, 584, 589, 592, 594, 595, 596, 598, 601, 602, 604], "float": [20, 43, 147, 168, 169, 170, 172, 177, 192, 205, 232, 244, 257, 259, 260, 261, 288, 295, 297, 298, 299, 332, 347, 405, 460, 485, 499, 507, 510, 552, 566, 594, 595, 599, 601], "A": [20, 43, 53, 73, 74, 102, 115, 145, 152, 159, 163, 166, 168, 169, 170, 171, 172, 177, 194, 209, 212, 214, 215, 221, 234, 247, 248, 256, 259, 260, 261, 263, 266, 269, 270, 271, 278, 281, 283, 286, 287, 288, 289, 290, 294, 297, 298, 299, 301, 302, 306, 310, 317, 334, 552, 557, 560, 566, 567, 569, 580, 581, 584, 587, 592, 593, 595, 599, 601, 602, 604], "between": [20, 140, 157, 169, 177, 209, 247, 260, 263, 298, 301, 511, 515, 530, 534, 554, 558, 563, 566, 567, 578, 595, 597, 598, 599, 601, 602], "0": [20, 43, 52, 89, 104, 145, 154, 156, 160, 169, 172, 176, 177, 182, 184, 192, 195, 196, 199, 205, 209, 211, 212, 222, 224, 232, 235, 236, 239, 244, 247, 252, 254, 263, 270, 278, 283, 291, 301, 312, 318, 332, 530, 549, 552, 554, 556, 558, 559, 560, 561, 564, 565, 566, 567, 568, 573, 575, 580, 584, 591, 592, 594, 595, 597, 598, 599, 600, 601, 602, 604], "100": [20, 158, 176, 177, 194, 234, 332, 550, 552, 556, 562, 567, 594, 595, 599, 601, 602, 604, 605], "klcalibr": 20, "128": [20, 192, 195, 196, 209, 232, 235, 236, 247, 552, 567, 595, 601], "num_quantized_bin": 20, "histogramcollector": 20, "collctor": 20, "smooth_distribut": 20, "p": [20, 549, 588], "ep": [20, 157, 568], "0001": [20, 177, 554, 567, 594], "smooth": [20, 43, 150, 156, 176, 177, 592], "discret": [20, 602], "mai": [20, 145, 272, 273, 275, 276, 277, 332, 528, 529, 549, 551, 559, 565, 568, 580, 584, 591, 593, 595, 602], "have": [20, 43, 73, 82, 145, 167, 168, 169, 190, 212, 230, 256, 259, 286, 288, 294, 297, 332, 528, 529, 549, 551, 552, 556, 560, 565, 566, 567, 568, 570, 587, 589, 592, 595, 599, 602], "been": [20, 168, 169, 256, 286, 288, 294, 529, 531, 549, 554, 567, 568, 587, 599], "normal": [20, 209, 247, 261, 299, 499, 567, 589, 599, 601], "1": [20, 43, 53, 73, 88, 104, 108, 112, 143, 145, 150, 152, 154, 156, 157, 158, 160, 169, 176, 177, 182, 184, 191, 192, 193, 195, 196, 199, 200, 205, 209, 210, 211, 212, 222, 224, 231, 232, 233, 235, 236, 239, 240, 244, 247, 254, 259, 260, 261, 263, 278, 283, 288, 291, 292, 297, 298, 299, 301, 312, 313, 332, 337, 347, 469, 528, 530, 533, 534, 551, 552, 554, 558, 560, 561, 564, 566, 568, 571, 573, 589, 590, 591, 592, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604], "replac": [20, 150, 261, 299, 499, 556, 567, 578, 597], "zero": [20, 43, 169, 172, 209, 247, 288, 344, 533, 592, 595, 599, 601, 602], "multipli": 20, "scale": [20, 43, 99, 140, 150, 156, 157, 205, 209, 244, 247, 252, 558, 595, 598, 599, 601, 602], "factor": [20, 591, 599, 605], "take": [20, 168, 177, 180, 181, 185, 209, 214, 225, 247, 286, 301, 302, 313, 317, 334, 528, 530, 531, 549, 551, 554, 560, 567, 587, 592, 595, 596, 601, 602, 604], "correspond": [20, 43, 147, 166, 177, 192, 232, 256, 259, 263, 294, 297, 301, 337, 534, 560, 567, 592, 594, 595, 598, 599, 602], "amount": 20, "off": [20, 66, 67, 69, 529], "non": [20, 287, 344, 530, 591, 592, 602], "ref": [20, 145], "http": [20, 147, 163, 168, 169, 192, 194, 232, 234, 256, 257, 259, 260, 261, 286, 288, 289, 294, 295, 297, 298, 299, 530, 533, 549, 552, 561, 564, 565, 567, 576, 582, 585, 597], "hanj": 20, "c": [20, 73, 194, 234, 549, 552, 559, 564, 602], "illinoi": 20, "edu": [20, 194, 234, 552], "cs412": 20, "bk3": 20, "diverg": [20, 335, 339, 554, 602], "pdf": 20, "github": [20, 147, 168, 192, 232, 256, 257, 260, 261, 286, 289, 294, 295, 298, 299, 443, 486, 529, 549, 552, 557, 561, 564, 565, 567, 576, 582, 585, 597], "com": [20, 147, 168, 192, 232, 256, 257, 260, 261, 286, 289, 294, 295, 298, 299, 528, 533, 549, 552, 561, 564, 565, 567, 570, 576, 597, 598, 605], "apach": [20, 565], "incub": 20, "blob": [20, 147, 168, 256, 257, 260, 261, 286, 294, 295, 298, 299, 567, 576], "master": [20, 168, 256, 257, 260, 261, 286, 289, 294, 295, 298, 299, 567, 602], "python": [20, 74, 145, 194, 213, 234, 255, 293, 332, 344, 447, 526, 529, 530, 549, 552, 556, 559, 564, 567, 572, 578, 581, 587, 593, 601], "contrib": [20, 293], "py": [20, 145, 147, 169, 177, 257, 259, 260, 261, 288, 295, 297, 298, 299, 332, 515, 530, 534, 549, 556, 564, 567, 572, 574, 575, 576, 582, 585, 595, 597, 600], "microsoft": [20, 534], "onnxruntim": [20, 176, 177, 188, 194, 201, 228, 234, 241, 264, 403, 407, 534, 561, 563, 564, 568, 594], "main": [20, 216, 289, 479, 516, 530, 556, 561, 567, 574, 576, 588, 592, 595], "tool": [20, 145, 251, 344, 533, 534, 567, 580, 584, 592, 593, 595], "arrai": [20, 43, 145, 209, 247, 259, 270, 297, 344, 601], "small": [20, 66, 67, 68, 320, 531, 549, 592, 602], "probabl": [20, 177, 339], "activationoper": 22, "onnx_quant": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41], "onnx_nod": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 86, 100, 110], "removableactivationoper": 22, "remov": [22, 43, 55, 56, 59, 73, 79, 82, 83, 84, 95, 97, 169, 252, 261, 299, 385, 431, 528, 529, 567, 580, 584, 592, 600], "qactivationoper": 22, "children": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41], "initi": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 43, 104, 115, 145, 160, 169, 180, 181, 189, 192, 211, 229, 232, 287, 288, 313, 329, 334, 386, 387, 479, 531, 549, 551, 552, 566, 586, 592, 595, 599, 602], "qoper": [22, 37, 176, 177], "format": [22, 43, 52, 145, 177, 192, 193, 194, 232, 233, 234, 252, 259, 265, 297, 329, 332, 450, 552, 556, 558, 566, 567, 568, 569, 570, 595], "argmaxoper": 23, "qargmaxoper": 23, "attentionoper": 24, "qattentionoper": 24, "qattent": 24, "binari": [25, 145, 263, 301, 559, 566, 582, 585], "binaryoper": 25, "qbinaryoper": 25, "qbinari": 25, "concatoper": 26, "qconcatoper": 26, "qconcat": 26, "convoper": 27, "qconvoper": 27, "qlinearconv": 27, "direct8bit": 28, "direct8bitoper": 28, "qdirectoper": 28, "qdirect": 28, "embedlayernorm": 29, "embedlayernormalizationoper": 29, "qembedlayernormalizationoper": 29, "qembedlayernorm": 29, "gatheroper": 30, "qgatheroper": 30, "qgather": 30, "globalaveragepool": 31, "globalaveragepooloper": 31, "qglobalaveragepooloper": 31, "qlinearglobalaveragepool": 31, "gemmoper": 32, "qgemmoper": 32, "qgemm": 32, "lstmoper": 34, "matmuloper": 35, "qmatmuloper": 35, "qlinearmatmul": 35, "maxpooloper": 36, "qmaxpooloper": 36, "qmaxpool": 36, "op_registri": 37, "op_typ": [37, 330], "qop_registri": 37, "padoper": 38, "qpadoper": 38, "qpad": 38, "averagepool": 39, "pooloper": 39, "qpooloper": 39, "qlinearaveragepool": 39, "resizeoper": 40, "qresizeoper": 40, "qresiz": 40, "splitoper": 41, "qsplitoper": 41, "qsplit": 41, "q_config": [42, 252, 534], "static": [42, 46, 150, 156, 166, 177, 253, 313, 329, 516, 534, 563, 567, 570, 575, 576, 577, 578, 581, 587, 599, 602, 605], "quantization_param": 42, "op_types_to_quant": 42, "fallback_list": 42, "fp32": [42, 78, 130, 135, 140, 152, 157, 176, 177, 180, 181, 251, 252, 263, 301, 318, 322, 329, 337, 343, 344, 533, 534, 549, 560, 561, 566, 567, 568, 577, 594, 595, 596, 597, 598, 599, 600, 602, 604, 605], "add_qdq_pair_to_weight": [42, 176, 177, 595], "optypes_to_exclude_output_qu": [42, 176, 177, 595], "dedicated_qdq_pair": [42, 176, 177, 595], "helper": [43, 44, 109, 115, 145, 152, 192, 193, 194, 208, 232, 233, 234, 246, 250, 251, 252, 310, 342, 493], "onnxrt": [43, 192, 194, 201, 209, 232, 234, 241, 247, 263, 301, 342, 402, 403, 418, 420, 427, 480, 534, 568], "dtype_to_nam": 43, "dtype_map": 43, "dtype": [43, 101, 104, 176, 177, 195, 196, 205, 209, 235, 236, 244, 247, 252, 253, 552, 558, 560, 570, 594, 595, 599, 600, 601, 604], "its": [43, 59, 95, 147, 166, 169, 177, 188, 194, 209, 228, 234, 247, 250, 257, 258, 288, 295, 296, 317, 528, 549, 552, 554, 565, 566, 568, 578, 580, 584, 587, 588, 591, 592, 598, 601, 602], "represent": [43, 364, 365, 367, 370, 374, 375, 378, 379, 381, 383, 384, 510, 528, 530, 555, 592, 595], "quanttyp": 43, "repres": [43, 168, 169, 170, 172, 194, 199, 234, 239, 259, 261, 263, 297, 299, 301, 366, 368, 369, 371, 373, 376, 377, 380, 382, 497, 528, 552, 558, 595, 602], "make_quant_nod": 43, "make": [43, 104, 140, 157, 168, 169, 171, 190, 230, 286, 288, 290, 344, 528, 529, 534, 549, 550, 551, 560, 566, 567, 575, 580, 584, 587, 595, 596, 598, 599, 602], "quantizelinear": [43, 558], "make_dquant_nod": 43, "axi": [43, 177], "dequantizelinear": [43, 558], "is_b_transpos": 43, "wheter": 43, "inuput": 43, "b": [43, 73, 192, 232, 252, 552, 566, 592, 599, 602], "transpos": [43, 72, 168, 209, 247, 251, 286, 601], "split_shared_bia": 43, "share": [43, 81, 97, 108, 559, 560, 599, 602], "float_to_float16": 43, "float16": [43, 552], "float_to_bfloat16": 43, "bfloat16": [43, 568, 570, 578, 596], "cast_tensor": 43, "tensorproto": [43, 104], "remove_init_from_model_input": 43, "collate_pr": 43, "result": [43, 145, 147, 152, 205, 209, 244, 247, 256, 259, 260, 261, 263, 294, 297, 298, 299, 301, 313, 320, 343, 347, 365, 379, 397, 528, 531, 533, 549, 551, 554, 556, 563, 565, 566, 567, 575, 576, 587, 588, 589, 592, 593, 595, 598, 599, 600, 601, 602, 603, 605], "quantize_data_with_scale_zero": 43, "qtype": [43, 534], "scheme": [43, 152, 516, 534, 551, 560, 578, 602, 604], "zero_point": [43, 252], "point": [43, 205, 244, 260, 261, 270, 298, 299, 317, 566, 587, 595, 599, 601, 602], "To": [43, 259, 297, 312, 529, 549, 552, 556, 558, 568, 571, 574, 580, 582, 584, 585, 594, 596, 597, 599, 602, 604], "pack": [43, 60], "weight": [43, 59, 60, 121, 140, 147, 150, 157, 163, 167, 168, 169, 170, 176, 177, 252, 286, 288, 320, 329, 344, 404, 534, 549, 555, 558, 560, 562, 566, 567, 589, 592, 594, 595, 599, 600, 602, 604], "comput": [43, 104, 147, 152, 256, 257, 260, 261, 263, 294, 295, 298, 299, 301, 344, 533, 555, 558, 566, 567, 568, 570, 581, 592, 593, 595, 599, 602], "linear": [43, 156, 166, 167, 168, 172, 177, 252, 286, 530, 554, 558, 567, 592, 599, 602], "when": [43, 52, 63, 69, 145, 167, 169, 172, 176, 177, 192, 193, 201, 209, 232, 233, 241, 247, 257, 287, 288, 295, 313, 334, 499, 516, 528, 531, 549, 551, 552, 567, 578, 580, 581, 584, 588, 592, 595, 599, 601, 602], "uint8": [43, 205, 244, 259, 297, 331, 534, 552, 560, 594, 595, 601, 604], "rmin": [43, 595], "rmax": [43, 595], "2": [43, 52, 73, 104, 108, 150, 154, 156, 158, 168, 169, 177, 193, 210, 233, 259, 261, 263, 288, 297, 299, 301, 312, 317, 332, 530, 534, 552, 554, 560, 561, 563, 564, 565, 566, 568, 589, 591, 592, 595, 597, 598, 599, 601, 602, 603], "m": [43, 147, 168, 177, 286, 554, 564, 570, 572, 575, 578, 582, 585, 605], "where": [43, 177, 259, 263, 297, 301, 554, 580, 584, 588, 592, 599, 600], "max": [43, 103, 140, 157, 176, 177, 209, 247, 260, 261, 298, 299, 317, 344, 533, 549, 564, 567, 592, 595, 599, 601, 602], "ab": [43, 163, 169, 288, 595, 599], "np": [43, 209, 247, 317, 556, 601], "sym": [43, 560, 595, 604], "asym": [43, 560, 604], "calculate_scale_zp": 43, "quantize_rang": 43, "calcul": [43, 59, 152, 163, 172, 177, 195, 196, 235, 236, 260, 261, 286, 288, 298, 299, 322, 335, 552, 566, 567, 578, 589, 592, 595, 598, 599, 602, 604], "quantize_data": 43, "add": [43, 51, 63, 108, 118, 145, 172, 176, 177, 192, 194, 216, 232, 234, 287, 329, 357, 397, 499, 529, 530, 549, 551, 552, 556, 558, 560, 566, 567, 568, 582, 585, 598, 600, 602], "necessari": [43, 528, 531, 569, 588, 598, 602], "intermedi": [43, 147, 160, 177, 211, 530, 563, 592, 595], "trasnform": 43, "full": [43, 192, 193, 194, 232, 233, 234, 344, 533, 549, 552, 559, 561, 564, 565, 588, 592], "equat": [43, 261, 263, 299, 301, 595, 599], "r": [43, 140, 157, 549, 564, 588, 591, 595, 605], "": [43, 104, 140, 145, 157, 166, 167, 168, 169, 173, 174, 177, 191, 194, 208, 209, 210, 212, 214, 221, 231, 234, 246, 247, 261, 286, 288, 299, 301, 302, 306, 313, 344, 485, 528, 531, 554, 556, 560, 563, 567, 568, 575, 578, 580, 584, 587, 590, 591, 592, 593, 594, 595, 597, 598, 599, 602, 604], "q": [43, 106, 108, 130, 599], "z": [43, 554, 599], "real": [43, 195, 212, 235, 556, 593, 595], "origin": [43, 150, 152, 166, 169, 172, 177, 192, 209, 210, 232, 247, 272, 273, 275, 276, 277, 287, 288, 318, 331, 344, 347, 529, 552, 575, 592, 595, 601, 602, 604], "quantize_data_per_channel": 43, "per": [43, 150, 156, 158, 177, 210, 339, 534, 549, 591, 596, 605], "channel": [43, 140, 150, 156, 157, 167, 168, 169, 177, 205, 209, 244, 247, 286, 534, 563, 564, 570, 572, 577, 592, 601, 605], "dequantize_data_with_scale_zero": 43, "tensor_valu": 43, "scale_valu": 43, "zo_valu": 43, "dequant": [43, 56, 87, 90, 91, 92, 93, 95, 147, 152, 344, 530, 599, 600], "sacal": 43, "dequantize_data": 43, "valueinfo": 43, "tensor_nam": [43, 145], "new_dtyp": 43, "cast": [43, 56, 558, 596, 601], "info": [43, 150, 152, 168, 172, 207, 212, 217, 252, 286, 306, 341, 344, 487, 499, 515, 530, 549, 558, 569], "quantizedvalu": 43, "new_quantized_nam": 43, "scale_nam": 43, "zero_point_nam": 43, "quantized_value_typ": 43, "quint8": 43, "linearli": 43, "intial": 43, "quantizediniti": 43, "quantized_data": 43, "quantizationmod": 43, "quantizedvaluetyp": 43, "quantformat": [43, 252], "quantize_nparrai": 43, "arr": [43, 344], "low": [43, 180, 181, 195, 196, 235, 236, 254, 264, 291, 302, 534, 550, 552, 556, 567, 568, 593, 595, 599, 602], "high": [43, 195, 196, 235, 236, 552, 564, 593, 602], "numpi": [43, 66, 67, 69, 104, 145, 209, 247, 253, 259, 270, 297, 559, 601], "attribute_to_kwarg": 43, "attribut": [43, 82, 103, 104, 152, 166, 174, 415, 416, 420, 480, 534, 551, 560, 562, 567, 594, 604], "kwarg": [43, 104, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 134, 136, 172, 177, 194, 207, 209, 214, 217, 234, 247, 301, 302, 303, 305, 307, 309, 310, 311, 313, 328, 330, 332, 334, 340, 341, 343, 344, 349, 351, 353, 354, 355, 356, 366, 368, 369, 371, 373, 376, 377, 382, 551], "make_nod": 43, "find_by_nam": 43, "item_list": 43, "find": [43, 66, 67, 69, 104, 145, 263, 270, 301, 317, 344, 515, 534, 549, 573, 580, 584, 587, 588, 592, 598, 600, 602], "item": [43, 172, 174, 177, 208, 246, 287, 329, 397, 485, 556, 599, 602], "get_smooth_scales_per_op": 43, "max_vals_per_channel": 43, "input_tensors_2_weight": 43, "input_tensors_2_weights_nod": 43, "alpha": [43, 156, 163, 170, 595], "same": [43, 82, 145, 167, 169, 177, 192, 209, 232, 247, 259, 297, 344, 534, 550, 551, 552, 554, 556, 560, 567, 571, 575, 580, 584, 591, 592, 594, 595, 599, 600, 601, 602], "one": [43, 108, 109, 114, 152, 167, 168, 169, 171, 209, 219, 247, 256, 259, 263, 265, 286, 289, 290, 294, 297, 301, 531, 534, 549, 554, 555, 556, 560, 561, 563, 564, 566, 567, 568, 570, 571, 575, 576, 578, 580, 581, 584, 587, 588, 589, 590, 592, 594, 595, 597, 599, 601, 602], "mul": [43, 53, 64, 65, 68, 156, 558, 599], "todo": [43, 192, 195, 232, 235, 259, 297, 329], "individu": [43, 168, 286, 528, 599], "save": [43, 104, 172, 177, 194, 221, 234, 251, 252, 292, 310, 313, 334, 335, 340, 344, 530, 534, 551, 562, 567, 568, 569, 571, 575, 580, 584, 590, 592, 595, 599], "paper": [43, 554, 592, 599], "onli": [43, 52, 62, 69, 85, 108, 114, 140, 150, 156, 157, 158, 167, 168, 169, 176, 177, 192, 210, 212, 216, 232, 265, 286, 288, 313, 323, 332, 499, 511, 533, 534, 550, 551, 554, 556, 558, 560, 567, 568, 575, 588, 592, 593, 594, 595, 599, 600, 602, 604], "get_smooth_scales_per_input": 43, "insert_smooth_mul_op_per_input": 43, "shape_info": 43, "insert": [43, 76, 104, 106, 108, 112, 143, 150, 156, 252, 530, 563, 567, 570, 592, 595, 596, 599, 600], "inupt": 43, "shape": [43, 104, 145, 168, 195, 196, 205, 209, 235, 236, 244, 247, 259, 297, 420, 427, 431, 442, 480, 533, 549, 552, 560, 561, 567, 599, 601], "ad": [43, 169, 192, 232, 256, 294, 317, 549, 568, 570, 575, 578, 582, 585, 592, 600], "new_init_tensor": 43, "new_added_mul_nod": 43, "adjust_weights_per_op": 43, "adjust": [43, 578, 595, 599], "ha": [43, 66, 67, 69, 73, 168, 169, 210, 256, 286, 288, 294, 332, 529, 531, 534, 549, 551, 558, 563, 567, 568, 573, 587, 594, 595, 596, 598, 599, 602], "whose": [43, 150, 156, 168, 287, 562, 592, 599, 602], "adjustd": 43, "adjust_weights_per_input": 43, "insert_smooth_mul_op_per_op": 43, "befor": [43, 106, 108, 156, 168, 169, 171, 177, 192, 232, 252, 286, 288, 290, 385, 529, 549, 552, 554, 555, 556, 559, 560, 564, 567, 582, 585, 592, 595, 598, 600, 602], "name_2_nod": 43, "kei": [43, 145, 147, 150, 166, 172, 174, 177, 270, 287, 310, 332, 335, 337, 344, 507, 533, 549, 558, 593, 600, 602], "trt_env_setup": 43, "environ": [43, 158, 210, 293, 447, 479, 480, 488, 528, 549, 550, 580, 584, 587, 602], "variabl": [43, 158, 170, 177, 194, 210, 234, 317, 549, 564, 592, 602], "tensorrt": [43, 595], "provid": [43, 101, 104, 109, 166, 180, 181, 209, 247, 254, 259, 278, 283, 291, 292, 297, 302, 313, 334, 338, 340, 408, 484, 493, 531, 533, 534, 549, 550, 551, 555, 556, 557, 558, 563, 564, 567, 568, 569, 570, 574, 578, 581, 587, 588, 592, 594, 595, 600, 602, 603, 604, 605], "get_ops_recurs": 44, "prefix": [44, 145, 146, 151, 570, 575, 600], "graph_info": 44, "templateadaptor": 44, "tampl": 44, "dictionari": [44, 66, 67, 69, 146, 147, 152, 174, 177, 208, 246, 259, 266, 269, 271, 297, 366, 368, 369, 371, 373, 376, 377, 382, 386, 387, 389], "yaml": [44, 172, 174, 180, 181, 192, 194, 210, 232, 234, 248, 254, 265, 266, 267, 269, 278, 283, 291, 292, 302, 343, 344, 352, 358, 359, 443, 499, 510, 534, 562, 566, 567, 589, 592, 594, 600, 601], "file": [44, 104, 145, 150, 155, 172, 173, 177, 180, 181, 192, 193, 194, 197, 208, 209, 215, 218, 232, 233, 234, 237, 246, 247, 248, 252, 254, 259, 265, 266, 267, 269, 278, 283, 287, 289, 291, 292, 297, 302, 312, 313, 343, 344, 352, 408, 454, 458, 468, 491, 499, 516, 531, 534, 549, 556, 559, 562, 565, 566, 567, 569, 573, 582, 585, 586, 587, 588, 589, 592, 594, 595, 600, 601], "pytorchadaptor": 44, "api": [44, 69, 74, 109, 220, 254, 259, 291, 297, 313, 328, 329, 332, 344, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 515, 516, 529, 530, 535, 537, 541, 544, 547, 558, 563, 567, 572, 576, 577, 578, 597, 598, 602, 606], "pytorch_ipexadaptor": 44, "intel": [44, 168, 213, 216, 249, 255, 262, 263, 286, 289, 293, 300, 301, 321, 327, 479, 526, 528, 529, 531, 532, 534, 551, 552, 553, 554, 555, 557, 558, 560, 561, 565, 568, 569, 570, 575, 577, 578, 589, 590, 591, 592, 593, 595, 596, 597, 600, 602, 603, 604], "extens": [44, 499, 531, 533, 534, 560, 563, 564, 567, 568, 569, 571, 576, 577, 578, 582, 585, 586, 592, 593, 602, 603, 604], "ipex": [44, 152, 176, 177, 563, 567, 572, 576, 577, 605], "pytorch_fxadaptor": 44, "fx": [44, 152, 176, 313, 323, 563, 576, 577, 593, 595, 596, 605], "graph": [44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 116, 129, 131, 135, 138, 139, 140, 142, 143, 144, 145, 166, 191, 231, 252, 254, 293, 303, 310, 420, 442, 453, 454, 459, 460, 478, 480, 503, 515, 530, 534, 552, 554, 556, 562, 566, 569, 570, 595, 596, 600], "pytorchqueri": 44, "querybackendcap": [45, 534], "tensorflowadaptor": 46, "stock": [46, 576], "spr": 46, "tensorflow_itexadaptor": 46, "itex": [46, 108, 176, 177, 251, 595], "tensorflowqueri": [46, 534], "performance_onli": [46, 47, 48, 106, 130, 135, 144, 176, 567], "itex_mod": [46, 47, 88, 106, 130, 135], "quant_mod": [46, 329], "graphconvert": 47, "qt_config": 47, "recip": [47, 166, 176, 177, 252, 254, 291, 558, 567, 602], "int8_sequ": 47, "fp32_op": [47, 49, 106], "bf16_op": [47, 49, 106, 596], "data_load": [47, 48, 534], "fake_qu": [47, 87, 106, 130, 135], "qdq_enabl": 47, "new_api": [47, 48, 70, 71, 76, 78, 91, 98, 130, 135, 140], "use_bf16": [47, 48, 176, 594], "without": [48, 89, 145, 169, 209, 247, 288, 331, 499, 528, 549, 551, 554, 556, 566, 567, 578, 592, 593, 594, 602, 603], "graphconverterwithoutcalib": 48, "recover_config": 48, "rewrit": [49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 105, 106, 107, 108, 221], "bf16convert": [49, 596], "biasadd": [51, 58, 63, 65, 108, 560], "convertaddtobiasaddoptim": 51, "conv2d": [51, 58, 59, 60, 64, 65, 70, 124, 134, 140, 560, 599, 600, 602], "addv2": [51, 68, 560], "layout": 52, "convertlayoutoptim": 52, "optim": [52, 73, 74, 78, 79, 115, 117, 166, 169, 173, 177, 213, 219, 221, 254, 255, 271, 291, 293, 317, 334, 335, 347, 372, 386, 387, 393, 396, 397, 399, 400, 401, 402, 403, 406, 407, 420, 480, 481, 491, 497, 503, 507, 514, 519, 531, 533, 550, 554, 555, 556, 560, 561, 563, 564, 567, 569, 570, 572, 574, 575, 578, 581, 591, 592, 593, 594, 595, 596, 598, 599, 600, 602, 604], "nchw": 52, "nhwc": 52, "It": [52, 168, 180, 181, 218, 261, 263, 270, 286, 291, 299, 301, 302, 313, 318, 322, 334, 534, 549, 554, 567, 573, 576, 581, 587, 588, 592, 595, 598, 602, 604], "4": [52, 158, 168, 177, 201, 204, 205, 209, 241, 244, 247, 256, 257, 259, 294, 295, 297, 332, 528, 534, 549, 550, 556, 557, 560, 563, 564, 566, 567, 575, 591, 592, 599, 601, 602, 605], "abov": [52, 534, 554, 592, 595, 599], "graph_def": [52, 145, 251, 302, 310, 313, 442, 478], "leakyrelu": [53, 599], "convertleakyreluoptim": 53, "below": [53, 65, 73, 176, 177, 292, 529, 530, 533, 534, 549, 551, 554, 556, 562, 566, 570, 572, 580, 581, 584, 587, 589, 590, 592, 594, 595, 598, 599, 600, 602, 603], "subgraph": [53, 65, 104, 151, 558], "maximum": [53, 168, 169, 177, 192, 209, 232, 247, 257, 288, 295, 317, 552, 567, 592, 595, 601], "note": [53, 168, 259, 297, 323, 531, 549, 556, 558, 560, 564, 567, 572, 575, 580, 584, 587, 592, 595, 599, 600, 602, 603, 604], "coeffici": [53, 592], "less": [53, 145, 177, 344, 550, 554, 567, 592], "than": [53, 145, 192, 209, 232, 247, 344, 531, 533, 550, 552, 562, 566, 589, 590, 592, 595, 598, 601], "convers": [53, 177, 265, 534, 567, 568, 595, 596, 599], "valid": [53, 66, 67, 104, 169, 172, 176, 177, 194, 234, 259, 287, 288, 297, 310, 447, 499, 516, 529, 531, 533, 534, 552, 554, 557, 560, 563, 565, 567, 578, 592, 595, 597], "nan": 54, "random": [54, 145, 177, 205, 209, 244, 247, 271, 293, 317, 321, 344, 529, 531, 567, 594, 601, 604], "convertnantorandom": 54, "const": [54, 55, 62, 63, 66, 67, 69, 81, 97, 293, 398, 480, 488], "consist": [54, 62, 529, 530, 549, 558, 599, 602], "placehold": [55, 190, 230], "convertplaceholdertoconst": 55, "train": [55, 79, 150, 156, 159, 167, 169, 177, 180, 181, 192, 194, 209, 219, 232, 234, 247, 248, 265, 288, 293, 313, 337, 507, 531, 533, 534, 539, 552, 554, 555, 558, 563, 568, 570, 576, 587, 590, 592, 593, 598, 599, 602, 604], "rerewrit": 56, "dequantizecastoptim": 56, "b16": 56, "dilat": 57, "contract": 57, "dilatedcontract": 57, "spacetobatchnd": 57, "batchtospacend": 57, "pattern": [57, 58, 60, 77, 95, 106, 107, 108, 130, 135, 152, 162, 164, 166, 167, 169, 170, 173, 177, 194, 234, 255, 276, 277, 279, 284, 288, 293, 329, 404, 515, 534, 552, 560, 563, 567, 588, 590, 594, 599, 605], "inject": [58, 567], "dummi": [58, 166, 195, 196, 235, 236, 253, 263, 301, 533, 549, 552, 561, 566, 567], "injectdummybiasaddoptim": 58, "fusion": [58, 60, 69, 77, 108, 125, 126, 127, 130, 131, 132, 136, 530, 534, 560], "expanddim": 59, "expanddimsoptim": 59, "next": [59, 185, 225, 332, 531, 549, 594, 602], "featch": 60, "reshap": [60, 66, 67, 72, 599], "fetchweightfromreshapeoptim": 60, "handl": [60, 145, 150, 156, 341, 516, 530, 532, 551, 599], "fold": [61, 62, 252, 560], "batchnorm": [61, 66, 120, 530, 599], "foldbatchnormnodesoptim": 61, "graphfoldconstantoptim": 62, "sequenc": [62, 104, 166, 167, 168, 177, 192, 208, 209, 232, 246, 247, 257, 261, 286, 295, 299, 534, 552, 560, 592, 601], "self": [62, 166, 177, 312, 534, 549, 551, 552, 563, 566, 598, 600, 602], "supported_op_typ": 62, "fusebiasaddandaddoptim": 63, "second": [63, 167, 176, 177, 192, 232, 318, 344, 408, 549, 567, 580, 584, 588, 599, 602, 604], "columnwis": 64, "fusecolumnwisemuloptim": 64, "depthwiseconv2dn": [64, 70, 124, 134, 560], "math": [65, 595], "fuseconvwithmathoptim": 65, "elimin": 65, "sub": [65, 166, 210, 252, 531, 599, 602], "realdiv": [65, 68], "decompos": [66, 67], "fusedecomposedbnoptim": 66, "input_graph_def": [66, 67, 69], "node_name_from_input": [66, 67, 69], "node_nam": [66, 67, 69, 145, 252, 310], "strip": [66, 67, 69, 82, 83, 145, 600], "port": [66, 67, 69, 516, 549], "other": [66, 67, 69, 150, 156, 191, 231, 261, 299, 310, 516, 528, 529, 530, 549, 560, 563, 564, 565, 567, 569, 589, 591, 592, 595, 599, 601, 602, 605], "underli": [66, 67, 69], "node_from_map": [66, 67, 69], "node_map": [66, 67, 69], "pull": [66, 67, 69], "def": [66, 67, 69, 180, 181, 313, 332, 334, 530, 534, 551, 552, 554, 555, 556, 566, 567, 595, 599, 600, 602], "entri": [66, 67, 69, 147, 216, 254, 292, 405, 408, 499, 565], "index": [66, 67, 69, 104, 177, 185, 190, 194, 225, 230, 234, 270, 344, 516, 552, 566, 588, 599], "everi": [66, 67, 69, 168, 169, 177, 286, 288, 534, 575, 580, 584, 592, 602], "identifi": [66, 67, 69, 259, 297, 310], "want": [66, 67, 69, 166, 176, 177, 190, 192, 230, 232, 288, 318, 334, 530, 534, 549, 552, 556, 564, 566, 567, 568, 575, 587, 588, 589, 598, 600, 602], "nodedef": [66, 67, 69], "rais": [66, 67, 69, 104, 168, 169, 172, 259, 286, 287, 288, 297, 302, 332, 499, 533, 592, 593], "valueerror": [66, 67, 69, 259, 297, 332, 559], "If": [66, 67, 69, 73, 158, 176, 177, 180, 181, 194, 209, 234, 247, 287, 302, 313, 332, 334, 529, 530, 549, 550, 552, 556, 558, 564, 565, 566, 567, 568, 573, 581, 582, 585, 587, 589, 595, 598, 599, 600, 601, 602], "isn": [66, 67, 69], "present": [66, 67, 69, 166, 549, 593, 599], "values_from_const": [66, 67, 69], "node_def": [66, 67, 69], "extract": [66, 67, 69, 166, 194, 234, 331, 499, 552], "access": [66, 67, 69, 174, 340, 344, 483, 499, 516, 549, 582, 585], "valid_reshape_input": [66, 67], "reshape_in0_ndef": [66, 67], "reshape_in1_ndef": [66, 67], "ar": [66, 67, 104, 168, 169, 177, 192, 209, 232, 247, 259, 263, 270, 286, 287, 288, 292, 297, 301, 314, 316, 317, 332, 337, 343, 344, 499, 528, 529, 530, 531, 533, 534, 549, 551, 552, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 573, 575, 578, 581, 587, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604], "bypass_reshap": [66, 67], "input_node_map": [66, 67], "input_nam": [66, 67, 101, 139, 177, 251, 252, 558], "get_const_dim_count": [66, 67], "dimens": [66, 67, 104, 184, 209, 224, 247, 552, 554, 592, 601], "instancenorm": [67, 599], "fusedecomposedinoptim": 67, "gelu": [68, 166], "fusegeluoptim": 68, "sqrt": 68, "erf": 68, "samll": 69, "layernorm": [69, 599], "fuselayernormoptim": 69, "remap": 69, "smaller": [69, 209, 247, 554, 567, 592, 601], "case": [69, 73, 158, 177, 191, 208, 209, 210, 231, 246, 247, 254, 278, 283, 291, 312, 499, 549, 551, 554, 555, 556, 560, 562, 566, 571, 575, 587, 588, 589, 592, 593, 595, 597, 601, 603, 604, 605], "fusedbatcnormv3": 69, "And": [69, 530, 550, 567, 573, 599], "further": [69, 177, 528, 568, 569, 570, 572, 581, 587], "restrict": [69, 177, 592, 598], "2d": [69, 599], "3d": [69, 593, 599], "kera": [69, 115, 194, 201, 216, 234, 241, 305, 310, 420, 427, 437, 556, 569, 577, 578, 605], "fusepadwithconv2doptim": 70, "excluded_op_nam": [70, 71, 173, 177, 567, 592], "cfg": [70, 71, 152, 173, 329, 337], "itex_qdq_mod": [70, 71], "conv3d": [70, 124], "fusepadwithfp32conv2doptim": 71, "fusetransposereshapeoptim": 72, "cse": [73, 97], "graphcseoptim": 73, "introduc": [73, 529, 534, 558, 560, 567, 592, 595, 597, 599, 603], "ident": [73, 79, 167, 528, 554], "three": [73, 172, 192, 232, 314, 316, 530, 534, 549, 551, 558, 564, 568, 581, 590, 595, 596, 598, 599, 600], "d": [73, 554, 562, 588, 605], "those": [73, 322, 344, 554, 555, 562, 567, 590, 592, 595, 602], "child": [73, 600], "b1": 73, "c1c2": 73, "d1": [73, 344], "c1": 73, "c2": 73, "memori": [73, 254, 278, 283, 291, 312, 344, 551, 555, 567, 568, 570, 589, 592, 595, 599, 602], "bound": [73, 209, 247, 259, 297, 317, 566, 601], "like": [73, 95, 97, 145, 166, 177, 180, 181, 182, 194, 222, 234, 254, 263, 288, 291, 292, 301, 310, 313, 334, 529, 530, 531, 534, 549, 554, 555, 563, 575, 590, 592, 595, 597, 599, 602], "relu": [73, 77, 108, 530, 560, 599, 600], "relu6": [73, 560], "graphdef": [73, 145, 310, 569], "grappler": [74, 560], "grappleroptim": 74, "input_output_nam": 74, "opt_cfg": 74, "wrapper": [74, 101, 102, 103, 104, 121, 146, 160, 191, 209, 211, 212, 214, 215, 221, 231, 247, 259, 263, 297, 301, 306, 310, 516, 596], "leverag": [74, 531, 533, 554, 558, 570, 587, 590, 595, 602], "built": [74, 178, 179, 183, 188, 192, 193, 198, 200, 202, 203, 205, 206, 209, 214, 216, 223, 226, 228, 232, 233, 238, 240, 242, 243, 244, 245, 247, 292, 301, 304, 312, 313, 334, 531, 534, 552, 556, 567, 580, 584, 589, 595, 601, 602, 604], "convert_add_to_biasadd": [75, 86, 110], "convert_layout": [75, 86, 110], "convert_leakyrelu": [75, 86, 110], "convert_nan_to_random": [75, 86, 110], "convert_placeholder_to_const": [75, 86, 110], "dequantize_cast_optim": [75, 86, 110], "dilated_contract": [75, 86, 110], "dummy_biasadd": [75, 86, 110], "expanddims_optim": [75, 86, 110], "fetch_weight_from_reshap": [75, 86, 110], "fold_batch_norm": [75, 86, 110], "fold_const": [75, 86, 110], "fuse_biasadd_add": [75, 86, 110], "fuse_column_wise_mul": [75, 86, 110], "fuse_conv_with_math": [75, 86, 110], "fuse_decomposed_bn": [75, 86, 110], "fuse_decomposed_in": [75, 86, 110], "fuse_gelu": [75, 86, 110], "fuse_layer_norm": [75, 86, 110], "fuse_pad_with_conv": [75, 86, 110], "fuse_pad_with_fp32_conv": [75, 86, 110], "fuse_reshape_transpos": [75, 86, 110], "graph_cse_optim": [75, 86, 110], "grappler_pass": [75, 86, 110], "insert_print_nod": [75, 86, 110], "move_squeeze_after_relu": [75, 86, 110], "pre_optim": [75, 86, 110], "remove_training_nod": [75, 86, 110], "rename_batch_norm": [75, 86, 110], "split_shared_input": [75, 86, 110], "strip_equivalent_nod": [75, 86, 110, 145], "strip_unused_nod": [75, 86, 110, 145], "switch_optim": [75, 86, 110], "print": [76, 147, 263, 301, 332, 549, 556, 566, 567, 592, 599, 602], "insertprintminmaxnod": 76, "pre_node_nam": 76, "post_node_nam": 76, "pass": [76, 145, 158, 344, 442, 511, 530, 534, 550, 552, 554, 555, 556, 558, 562, 566, 567, 588, 592, 594, 595, 596, 599, 604], "sampl": [76, 176, 177, 185, 190, 192, 193, 194, 205, 209, 225, 230, 232, 233, 234, 244, 247, 263, 270, 301, 317, 431, 531, 533, 552, 557, 563, 588, 595, 601, 602, 604, 605], "move": [77, 530, 594, 597], "squeez": [77, 530], "movesqueezeafterreluoptim": 77, "match": [77, 101, 166, 259, 260, 297, 298, 554, 588], "pre": [78, 115, 166, 180, 181, 192, 232, 302, 313, 334, 552, 554, 555, 567, 568, 575, 592, 593, 595, 600, 602], "entranc": [78, 183], "preoptim": 78, "removetrainingnodesoptim": 79, "protected_nod": 79, "types_to_splic": 79, "checknumer": 79, "stopgradi": 79, "renam": [80, 597], "fusedbatchnorm": 80, "fusedbatchnormv2": 80, "renamebatchnormoptim": 80, "splitsharedinputoptim": 81, "equival": [82, 599], "stripequivalentnodesoptim": 82, "output_node_nam": [82, 83, 130, 131, 135, 145], "unus": [83, 145], "stripunusednodesoptim": 83, "input_node_nam": [83, 130, 135, 145], "switch": [84, 570, 600], "switchoptim": 84, "condit": [84, 192, 193, 194, 209, 232, 233, 234, 247, 314, 316, 552, 565, 601, 602], "graphrewriterbas": 85, "abstract": [85, 159, 209, 247, 248, 254, 291, 428, 440, 491, 515, 534, 562], "freeze_fake_qu": [86, 94, 110], "freeze_valu": [86, 94, 110], "freeze_value_without_calib": [86, 94, 110], "fuse_conv_redundant_dequant": [86, 94, 110], "fuse_conv_requant": [86, 94, 110], "fuse_matmul_redundant_dequant": [86, 94, 110], "fuse_matmul_requant": [86, 94, 110], "meta_op_optim": [86, 94, 110], "post_hostconst_convert": [86, 94, 110], "post_quantized_op_cs": [86, 94, 110], "rnn_convert": [86, 94, 110], "scale_propag": [86, 94, 110], "onnx_graph": [86, 100, 110], "onnx_schema": [86, 100, 110], "tf2onnx_util": [86, 100, 110], "insert_qdq_pattern": [86, 105, 110], "merge_duplicated_qdq": [86, 105, 110], "share_qdq_y_pattern": [86, 105, 110], "freez": [87, 88, 89, 570, 592], "fakequ": 87, "freezefakequantopoptim": 87, "follow": [87, 109, 167, 194, 234, 256, 259, 294, 297, 528, 529, 530, 531, 534, 549, 551, 552, 554, 555, 556, 558, 560, 564, 565, 566, 567, 568, 569, 570, 571, 572, 580, 584, 590, 592, 594, 595, 599, 600, 602], "freezevaluetransform": 88, "max_min_data": [88, 89], "postfix": [88, 89], "tensor_data": [88, 344], "th": [88, 89], "gpu": [88, 89, 96, 176, 177, 533, 550, 563, 567, 568, 572, 578, 587, 594, 595], "freezevaluewithoutcalibtransform": 89, "95": [89, 263, 301, 566, 599, 605], "quantizedconv": [90, 91], "quantizeddeconv": 90, "redund": [90, 92], "fuseconvredundantdequantizetransform": 90, "cpu": [90, 91, 92, 93, 176, 177, 344, 533, 550, 563, 567, 568, 570, 572, 578, 587, 591, 593, 594, 596, 600], "_quantizedconv": 90, "_quantizeddeconv": 90, "successor": [90, 91, 92, 93], "requant": [91, 93, 600], "fuseconvrequantizetransform": 91, "quantizedmatmul": [92, 93], "fusematmulredundantdequantizetransform": 92, "_quantizedmatmul": [92, 93], "fusematmulrequantizedequantizetransform": 93, "quantizedmatmulwithbiasanddequant": 93, "fusematmulrequantizetransform": 93, "fusematmulrequantizedequantizenewapitransform": 93, "fusematmulrequantizenewapitransform": 93, "newapi": 93, "meta": [95, 593], "metainfochangingmemopoptim": 95, "metaop": 95, "With": [95, 312, 530, 533, 534, 551, 567, 575, 580, 584, 588, 589, 592, 593, 598, 599, 602, 605], "chang": [95, 140, 150, 157, 169, 171, 177, 288, 290, 320, 344, 359, 468, 490, 529, 551, 556, 559, 565, 566, 567, 570, 580, 581, 584, 587, 592, 600, 601, 602], "better": [95, 177, 180, 181, 270, 302, 313, 334, 555, 566, 568, 592, 593, 595, 598, 602], "perform": [95, 158, 170, 176, 177, 192, 204, 205, 210, 232, 244, 254, 278, 283, 291, 312, 318, 322, 491, 502, 530, 531, 534, 549, 550, 551, 552, 553, 555, 557, 558, 563, 564, 566, 567, 568, 569, 570, 572, 576, 578, 581, 587, 589, 590, 591, 592, 593, 594, 595, 596, 599, 600, 602, 604, 605], "post": [96, 97, 150, 156, 169, 177, 180, 181, 252, 313, 528, 533, 534, 555, 556, 563, 564, 570, 576, 587, 592, 593, 599, 600, 602], "hostconst": 96, "posthostconstconvert": 96, "postcseoptim": 97, "duplic": [97, 107, 317], "quantizev2": 97, "decreas": [97, 592], "size": [97, 168, 184, 185, 191, 194, 200, 205, 209, 224, 225, 231, 234, 240, 244, 247, 286, 312, 344, 499, 528, 549, 551, 552, 556, 559, 567, 587, 588, 589, 592, 599, 601, 604, 605], "rnn": 98, "quantizedrnnconvert": 98, "calibration_data": [98, 106], "rnn_detail": 98, "scalepropagationtransform": 99, "direct": [99, 168, 286, 449, 592], "export": [100, 177, 255, 259, 293, 297, 499, 533, 561, 573, 588, 600, 603], "onnxgraph": 101, "output_shap": 101, "opset": [101, 103, 104, 177, 251, 252], "extra_opset": 101, "output_nam": [101, 139, 177, 251, 252, 558], "is_subgraph": 101, "graph_nam": 101, "manipul": [101, 102], "onnxnod": 102, "skip_convers": 102, "schema": 103, "onnxopschema": 103, "domain": [103, 104, 176, 177, 372, 396, 420, 427, 480, 481, 483, 499, 511, 516, 549, 592, 602], "since_vers": 103, "get_schema": 103, "max_inclusive_opset_vers": 103, "within": [103, 169, 254, 259, 291, 297, 310, 528, 530, 568, 580, 584, 587, 593, 599], "get_max_supported_opset_vers": 103, "packag": [103, 352, 360, 366, 368, 369, 371, 372, 373, 376, 377, 380, 382, 391, 396, 401, 402, 406, 409, 415, 417, 420, 421, 427, 446, 448, 453, 456, 459, 460, 462, 465, 471, 476, 480, 514, 534, 549, 559, 564, 587, 588, 593, 597, 602], "set_nam": 104, "find_opset": 104, "assert_error": 104, "bool_val": 104, "error_msg": 104, "error": [104, 147, 263, 301, 322, 341, 483, 566, 571, 599, 602], "messag": [104, 143, 499, 511, 516, 602], "map_numpy_to_onnx_dtyp": 104, "np_dtype": 104, "map_onnx_to_numpy_typ": 104, "onnx_typ": 104, "add_port_to_nam": 104, "nr": 104, "get_tensorflow_node_attr": 104, "pars": [104, 152, 192, 193, 205, 209, 232, 233, 244, 247, 346, 357, 450, 454, 458, 463, 466, 472, 491, 499, 507, 601], "get_tensorflow_tensor_shap": 104, "get_tensorflow_node_shape_attr": 104, "attr": [104, 145, 166], "map_tensorflow_dtyp": 104, "get_tensorflow_tensor_data": 104, "convert_tensorflow_tensor_to_onnx": 104, "read_tensorflow_node_attr": 104, "read": [104, 145, 197, 209, 237, 247, 287, 552, 596, 598], "infer_onnx_shape_dtyp": 104, "opset_vers": [104, 139, 177, 251, 252, 558], "input_shap": [104, 196, 236, 551, 552], "input_dtyp": 104, "sometim": [104, 530, 592, 595], "so": [104, 209, 247, 530, 534, 559, 563, 566, 573, 575, 595, 596, 599, 600, 601, 603], "make_onnx_shap": 104, "seqtyp": 104, "tensor_dtyp": 104, "around": 104, "signifi": 104, "make_onnx_inputs_output": 104, "elem_typ": 104, "text": [104, 208, 209, 246, 247, 256, 261, 289, 294, 299, 558, 565, 576, 592, 593, 599, 601, 605], "datatyp": [104, 152, 596, 602], "save_protobuf": 104, "path": [104, 145, 150, 166, 172, 173, 192, 193, 194, 209, 232, 233, 234, 247, 248, 251, 252, 254, 265, 266, 267, 269, 278, 283, 287, 289, 291, 292, 302, 310, 313, 329, 334, 344, 408, 425, 428, 431, 433, 436, 439, 440, 441, 468, 499, 530, 531, 534, 549, 551, 552, 556, 562, 566, 567, 568, 569, 573, 576, 587, 590, 601, 604], "as_text": 104, "protobuf": 104, "is_onnx_domain": 104, "is_list_or_tupl": 104, "are_shapes_equ": 104, "src": [104, 588], "dest": 104, "equal": [104, 140, 145, 157, 332, 344, 566, 592], "get_subgraphs_from_onnx": 104, "model_proto": 104, "over": [104, 194, 234, 263, 301, 557, 561, 563, 566, 578, 587, 594, 599, 602], "df": 104, "initialize_name_count": 104, "avoid": [104, 192, 232, 530, 600], "conflict": [104, 559], "counter": 104, "make_nam": 104, "get_index_from_strided_slice_of_shap": 104, "outputs_to_valu": 104, "stride": [104, 209, 247, 601], "slice": 104, "compute_const_folding_using_tf": 104, "g": [104, 168, 177, 554, 557, 561, 570, 575, 592, 597, 599, 602], "const_node_valu": 104, "graph_output": 104, "constant": [104, 252, 293, 317, 321, 327, 338, 481, 551, 560, 601], "tf": [104, 115, 145, 191, 192, 193, 194, 209, 231, 232, 233, 234, 247, 308, 310, 347, 549, 556, 569, 593, 596, 601], "generategraphwithqdqpattern": 106, "op_wise_config": [106, 130, 135], "quantized_nod": 106, "dq": [106, 108, 130, 599], "pair": [106, 176, 177, 551, 567, 568], "merg": [107, 184, 224, 329, 582, 585, 600, 602], "mergeduplicatedqdqoptim": 107, "y": [108, 177, 209, 247, 317, 559, 573, 599, 601], "shareqdqforitexypatternoptim": 108, "enabl": [108, 147, 169, 176, 177, 288, 487, 549, 556, 564, 568, 570, 572, 575, 576, 578, 591, 592, 593, 602], "break": [108, 556, 567], "graphanalyz": 109, "extend_engin": 109, "analyz": [109, 166, 310, 592, 598, 599, 600], "under": [109, 177, 194, 234, 343, 531, 549, 552, 565, 566, 567, 570, 575, 576, 587, 590, 592, 599, 600, 602], "singleton": [109, 293, 344, 480, 488], "specifi": [109, 158, 176, 177, 180, 181, 209, 210, 247, 254, 259, 263, 266, 269, 278, 283, 291, 292, 297, 301, 302, 313, 332, 334, 343, 344, 361, 398, 450, 495, 499, 516, 549, 556, 560, 566, 567, 575, 589, 594, 601, 602, 604], "graphrewriterhelp": 109, "encapsul": [109, 180, 181, 302, 313, 334, 569], "quantize_lay": [110, 111, 113], "fake_quant": [110, 111, 113], "quantize_config": [110, 111, 113], "quantize_help": [110, 111, 113], "quantize_wrapp": [110, 111, 113], "fuse_qdq_bn": [110, 111, 129], "fuse_qdq_concatv2": [110, 111, 129], "fuse_qdq_conv": [110, 111, 129], "fuse_qdq_deconv": [110, 111, 129], "fuse_qdq_in": [110, 111, 129], "fuse_qdq_matmul": [110, 111, 129], "fuse_qdq_pool": [110, 111, 129], "optimize_qdq": [110, 111, 129], "optimize_lay": [111, 113, 116], "quantize_layer_add": [111, 113, 116], "quantize_layer_bas": [111, 113, 116], "quantize_layer_bn": [111, 113, 116], "fake": [112, 150, 156, 567, 595, 599], "fakequantizebas": 112, "abc": [112, 261, 299, 534, 600, 602], "appli": [112, 125, 126, 127, 130, 132, 136, 159, 169, 219, 257, 295, 528, 549, 567, 570, 572, 578, 587, 590, 592, 595, 596, 598, 599, 602, 603, 604], "fakequant": 112, "per_channel": [112, 560, 595, 604], "num_bit": [112, 152, 599], "8": [112, 177, 208, 246, 530, 560, 564, 592, 593, 599, 602, 605], "channel_axi": [112, 154, 157], "symmetr": [112, 595, 601, 602], "narrow_rang": 112, "quantizeconfig": [114, 115], "custom": [114, 158, 292, 312, 343, 550, 554, 555, 570, 592, 598], "There": [114, 292, 314, 316, 549, 554, 560, 563, 566, 567, 568, 570, 599, 602, 604], "instanc": [114, 115, 158, 177, 180, 181, 210, 260, 261, 263, 266, 269, 272, 273, 275, 276, 277, 298, 299, 301, 302, 313, 317, 331, 334, 528, 530, 534, 549, 550, 567, 572, 578, 604, 605], "global": [114, 168, 177, 272, 273, 275, 276, 277, 286, 344, 530, 567, 592, 594, 602], "class": [115, 149, 152, 270, 302, 313, 422, 423, 530, 531, 551, 552, 554, 566, 567, 578, 589, 590, 595, 597, 600, 602, 604], "init_quantize_config": 115, "quantize_recip": 115, "begin": [115, 169, 288, 554, 555, 567, 592, 602], "process": [115, 147, 168, 169, 171, 172, 177, 180, 181, 192, 193, 194, 205, 209, 210, 232, 233, 234, 244, 247, 252, 286, 288, 290, 293, 302, 313, 314, 316, 317, 334, 343, 344, 360, 443, 444, 447, 480, 488, 492, 531, 534, 549, 551, 552, 554, 555, 556, 558, 567, 571, 590, 592, 595, 599, 600, 601, 604], "model_nam": [115, 499], "special": [115, 166, 312, 530, 551, 566, 567, 589, 592, 603], "decid": [115, 176, 177, 257, 288, 295, 408, 534, 567, 595, 597, 602], "qat_clone_funct": 115, "leav": [115, 581], "quantizewrapp": [115, 121], "wrapped_lay": 115, "config_quantizable_lay": 117, "quantizelayeradd": 118, "quantizelay": 119, "quantizelayerbas": 119, "quantizelayerbatchnorm": 120, "quantizewrapperbas": 121, "fusedbatchnormv3": [122, 132], "fusenodestartwithfusedbatchnormv3": [122, 132], "_quantizedfusedbatchnorm": 122, "concatv2": [123, 133, 144, 560], "fusenodestartwithconcatv2": [123, 133], "quantizedconcatv2": [123, 133], "fusenodestartwithconv2d": [124, 134], "conv2dbackpropinput": 125, "conv3dbackpropinputv2": 125, "fusenodestartwithdeconv2d": 125, "fusedinstancenorm": 126, "fusenodestartwithfusedinstancenorm": 126, "batchmatmul": 127, "batchmatmulv2": 127, "fusenodestartwithmatmul": [127, 136], "avgpool": [128, 137, 560], "fusenodestartwithpool": [128, 137], "optimizeqdqgraph": 130, "input_graph": [130, 135, 140, 346, 454, 458, 463, 466, 473, 534], "op_wise_sequ": [130, 135], "quantizegraph": 131, "quantizegraphbas": 131, "quantizenodebas": 131, "quantizegraphforintel": 135, "common": [138, 177, 207, 255, 265, 269, 270, 271, 293, 337, 492, 493, 499, 528, 552, 555, 556, 558, 562, 564, 567, 595, 599], "herlper": 138, "quantizegraphhelp": 138, "sever": [138, 171, 209, 247, 290, 531, 549, 554, 555, 563, 567, 568, 580, 584, 592, 594, 599, 601, 602, 604], "staticmethod": 138, "function": [138, 177, 180, 181, 193, 233, 266, 269, 278, 283, 530, 531, 534, 549, 550, 551, 554, 555, 562, 563, 564, 566, 567, 568, 578, 588, 592, 595, 598, 599, 600, 602, 603], "tensorflowqdqtoonnxqdqconvert": 139, "shape_overrid": 139, "inputs_as_nchw": [139, 251], "default_opset_vers": 139, "bia": [140, 176, 177, 252, 600], "correct": [140, 157, 172, 176, 177, 259, 260, 261, 263, 287, 297, 298, 299, 301, 528, 549, 570], "biascorrect": 140, "fp32_graph": 140, "method": [140, 152, 170, 177, 185, 190, 191, 192, 194, 201, 209, 212, 225, 230, 231, 232, 234, 241, 247, 269, 270, 271, 329, 337, 338, 340, 341, 493, 511, 530, 531, 533, 552, 554, 555, 566, 567, 590, 592, 595, 596, 599, 601, 602], "weight_empir": 140, "Will": [140, 554, 563], "our": [140, 150, 177, 531, 533, 558, 567, 588, 592, 598, 603], "task": [140, 192, 199, 232, 239, 263, 301, 552, 554, 555, 558, 563, 566, 567, 592, 599], "close": [140, 157], "w_int8": [140, 157], "u": [140, 157, 533, 570], "w_fp32": [140, 157], "varianc": [140, 157], "ratio": [140, 157, 168, 169, 172, 177, 205, 209, 244, 247, 288, 552, 567, 592, 601, 605], "differ": [140, 153, 157, 160, 166, 167, 176, 177, 185, 194, 209, 211, 225, 234, 247, 254, 263, 269, 271, 280, 291, 301, 312, 339, 528, 530, 531, 549, 551, 552, 554, 556, 557, 558, 562, 563, 566, 567, 569, 580, 584, 589, 592, 595, 599, 600, 601, 602], "wise": [140, 157, 176, 177, 317, 318, 322, 499, 549, 563, 592, 600, 602, 604], "minim": [140, 157, 317, 554, 557, 566, 567, 580, 584, 592, 595, 602], "round": [140, 157, 595, 599], "scale_c": [140, 157], "shift": [140, 157, 205, 244, 588, 601], "notic": [140, 157, 210, 565, 597], "can": [140, 147, 150, 157, 166, 167, 168, 169, 171, 176, 177, 180, 181, 191, 194, 209, 210, 212, 231, 234, 247, 259, 261, 263, 286, 288, 290, 297, 299, 301, 302, 312, 313, 334, 450, 499, 530, 531, 533, 534, 549, 550, 551, 552, 554, 555, 556, 558, 560, 563, 564, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 578, 580, 581, 582, 584, 585, 587, 588, 589, 590, 591, 592, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605], "first": [140, 157, 167, 174, 176, 177, 192, 232, 259, 297, 318, 329, 408, 530, 531, 534, 549, 552, 558, 564, 568, 572, 581, 582, 585, 588, 594, 595, 596, 598, 599, 600, 602, 604], "empir": [140, 157], "solut": [140, 157, 533, 534, 559, 572, 576, 581, 593, 599, 602], "min": [140, 157, 344, 549, 592, 595, 599, 601, 602], "graphtransform": 141, "graphtransformbas": 141, "input_pb": [141, 143, 144], "log": [143, 341, 347, 450, 490, 491, 530, 549, 578, 598, 600, 602], "insertlog": 143, "node_name_list": 143, "show_nam": 143, "show_op": 143, "first_n": 143, "summar": [143, 554], "1024": [143, 194, 234, 573], "dump_fp32": 143, "rerang": 144, "rerangequantizedconcat": 144, "rerange_quant": 144, "version1_lt_version2": [145, 344], "version1": [145, 344], "version2": [145, 344], "version1_gt_version2": [145, 344], "greater": [145, 344], "version1_eq_version2": [145, 344], "version1_gte_version2": [145, 344], "version1_lte_version2": [145, 344], "disable_random": 145, "seed": [145, 177, 271, 344, 567, 604], "disabl": [145, 176, 177, 487, 516, 528, 587, 596], "read_graph": 145, "in_graph": 145, "in_graph_is_binari": 145, "write_graph": 145, "out_graph_def": 145, "out_graph_fil": 145, "write": [145, 201, 241, 344, 556, 562, 567, 570, 600], "is_ckpt_format": 145, "model_path": [145, 429, 499], "ckpt": [145, 302, 310, 313, 605], "folder": [145, 194, 199, 234, 239, 302, 313, 343, 552, 575, 580, 584, 600], "is_saved_model_format": 145, "saved_model": [145, 265, 420, 427, 437], "get_estimator_graph": 145, "estim": [145, 263, 301, 310, 602], "input_fn": [145, 310], "get_tensor_by_nam": 145, "try_cnt": 145, "3": [145, 169, 177, 194, 209, 234, 247, 259, 297, 332, 530, 531, 533, 549, 551, 552, 554, 556, 558, 560, 561, 564, 566, 567, 568, 570, 574, 578, 580, 584, 589, 592, 594, 598, 599, 601, 602, 605], "consid": [145, 263, 301, 528, 554, 588, 602], "import": [145, 158, 177, 265, 302, 312, 313, 332, 334, 344, 530, 531, 533, 550, 551, 552, 554, 555, 556, 558, 561, 566, 567, 568, 569, 570, 574, 576, 589, 590, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602], "scope": [145, 567], "more": [145, 150, 156, 168, 209, 247, 286, 531, 532, 533, 549, 552, 554, 556, 561, 563, 564, 566, 567, 568, 570, 578, 582, 585, 589, 590, 592, 596, 599, 602, 603, 605], "onc": [145, 171, 216, 290, 314, 316, 549, 551, 587, 592, 593, 602, 605], "both": [145, 177, 528, 531, 534, 555, 564, 567, 571, 592, 594, 595, 599, 602], "compat": [145, 310, 556, 569, 582, 585, 587, 597], "suffix": 145, "time": [145, 176, 177, 209, 247, 263, 301, 312, 317, 344, 485, 556, 559, 567, 575, 577, 580, 584, 587, 588, 589, 592, 593, 595, 598, 600, 601, 602], "got": [145, 559, 600], "iterator_sess_run": 145, "sess": [145, 310], "iter_op": 145, "feed_dict": [145, 191, 231], "output_tensor": [145, 310], "measur": [145, 210, 302, 339, 531, 534, 550, 554, 566, 567, 600, 602], "integr": [145, 160, 211, 534, 549, 567, 588], "makeiter": 145, "feed": [145, 191, 231, 554, 592], "end": [145, 169, 177, 192, 208, 209, 232, 246, 247, 288, 314, 316, 534, 554, 555, 560, 564, 567, 581, 589, 592, 600, 601, 602], "predict": [145, 209, 214, 247, 256, 260, 261, 263, 294, 298, 299, 301, 531, 554, 566, 578, 599, 600, 601], "pred": [145, 263, 301, 566], "collate_tf_pr": 145, "collat": [145, 152], "tbe": 145, "get_input_output_node_nam": 145, "fix_ref_type_of_graph_def": 145, "fix": [145, 169, 192, 232, 288, 529, 552, 574, 592, 599, 602], "strip_unused_lib": 145, "offici": [145, 256, 260, 261, 294, 298, 299, 528, 549, 566, 599], "r1": 145, "15": [145, 560, 605], "branch": [145, 549], "get_graph_def": 145, "auto_input_output": 145, "get_model_input_shap": 145, "inout": 145, "get_tensor_val_from_graph_nod": 145, "graph_node_name_map": 145, "val": [145, 172, 194, 197, 234, 237, 287, 567], "tensor_v": 145, "int8_node_name_revers": 145, "revers": [145, 549], "tf_diagnosis_help": 145, "fp32_model": [145, 147, 152, 252, 344, 534], "quan_model": 145, "save_path": [145, 251, 252, 534, 569], "diagnosi": [145, 293, 388, 397, 420, 480, 509, 515, 567], "generate_feed_dict": 145, "input_tensor": [145, 310], "torch": [146, 147, 148, 149, 150, 151, 152, 156, 166, 167, 168, 173, 176, 177, 221, 252, 302, 313, 343, 530, 533, 535, 554, 556, 558, 567, 568, 569, 570, 575, 578, 595, 599, 600], "bf16modulewrapp": 146, "bf16modul": 146, "mix": [146, 176, 177, 302, 315, 329, 456, 457, 458, 505, 533, 534, 539, 563, 570, 576, 577, 578, 603], "precis": [146, 176, 177, 180, 181, 254, 261, 263, 264, 291, 299, 301, 302, 312, 315, 318, 329, 372, 386, 387, 396, 420, 454, 456, 457, 458, 481, 505, 533, 534, 539, 549, 550, 555, 556, 560, 563, 570, 576, 577, 578, 593, 594, 595, 599, 602, 603], "mixed_precision_model": 146, "bf16_symbolic_trac": 146, "fx_sub_module_list": 146, "trace": [146, 147, 151, 152, 166, 176, 177, 252, 313, 320, 530, 577, 602], "_description_": 146, "hessian": [147, 320, 602], "awar": [147, 159, 177, 219, 265, 286, 320, 334, 534, 555, 556, 558, 563, 568, 587, 590, 602], "node_collector": 147, "hook": [147, 159, 218, 219, 278, 283, 337, 554, 555, 567, 592, 599, 600], "record": [147, 152, 160, 192, 193, 194, 200, 211, 218, 232, 233, 234, 240, 552, 598, 600, 602], "hessiantrac": 147, "q_model": [147, 177, 265, 313, 530, 533, 551, 552, 556, 558, 561, 562, 566, 567, 569, 595, 596], "criterion": [147, 159, 161, 162, 163, 168, 169, 177, 213, 216, 255, 293, 467, 507, 554, 555, 558, 567, 592, 595, 602, 604], "pleas": [147, 150, 156, 163, 168, 169, 176, 177, 192, 193, 194, 197, 232, 233, 234, 237, 286, 288, 289, 332, 530, 531, 532, 533, 534, 549, 550, 552, 555, 556, 564, 566, 568, 570, 571, 575, 578, 592, 595, 596, 597, 598, 599, 603], "refer": [147, 150, 156, 163, 168, 169, 172, 176, 177, 192, 232, 256, 257, 263, 286, 288, 289, 294, 295, 301, 332, 530, 534, 550, 551, 552, 555, 556, 562, 564, 565, 566, 567, 568, 570, 575, 578, 589, 594, 597, 601, 602], "yao": 147, "zhewei": 147, "et": [147, 599], "al": [147, 599], "pyhessian": 147, "network": [147, 163, 168, 288, 320, 531, 549, 554, 555, 558, 567, 591, 593, 595, 599, 602], "through": [147, 180, 181, 302, 313, 533, 550, 560, 562, 563, 566, 573, 589, 590, 592, 594, 595, 599], "len": [147, 177, 209, 247, 552, 556, 601], "2020": 147, "ieee": [147, 568, 599], "intern": [147, 329, 483, 551, 552, 592], "confer": [147, 592, 599], "big": 147, "dong": 147, "zhen": 147, "hawq": [147, 320, 602], "v2": [147, 320, 556, 564, 576, 597, 602, 605], "advanc": [147, 176, 177, 508, 528, 533, 539, 595, 604], "system": [147, 158, 210, 344, 487, 514, 515, 550, 573, 592], "33": [147, 605], "18518": 147, "18529": 147, "openvinotoolkit": 147, "nncf": 147, "develop": [147, 312, 499, 529, 530, 564, 567, 568, 570, 576, 587, 593, 596, 598], "hessian_trac": 147, "compare_weight": 147, "float_dict": 147, "ani": [147, 259, 261, 297, 299, 328, 332, 346, 347, 349, 351, 353, 354, 355, 356, 357, 358, 359, 361, 386, 387, 408, 410, 416, 425, 442, 445, 447, 450, 454, 458, 460, 463, 466, 469, 472, 478, 485, 487, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 515, 516, 528, 529, 533, 549, 551, 556, 570, 575, 588, 598], "quantized_dict": 147, "compar": [147, 263, 301, 549, 555, 566, 595, 598, 600, 602], "being": [147, 259, 297, 416], "two": [147, 158, 167, 168, 169, 171, 194, 199, 210, 234, 239, 259, 286, 290, 292, 297, 323, 344, 530, 531, 549, 552, 554, 556, 558, 560, 566, 567, 568, 592, 595, 596, 598, 602, 604], "wt_compare_dict": 147, "float_model": 147, "state_dict": [147, 556, 600], "qmodel": 147, "compute_error": 147, "state": [147, 167, 573, 592], "weight_dict": 147, "hawq_top": 147, "enable_act": 147, "modul": [148, 149, 268, 274, 284, 285, 488, 496, 504, 530, 549, 551, 554, 558, 563, 566, 567, 569, 592, 594, 596, 600, 603], "nn": [149, 150, 152, 166, 167, 177, 221, 252, 302, 313, 343, 530, 554, 558, 567, 569, 599, 600], "get_modul": 150, "set_modul": [150, 152], "new_modul": [150, 152], "torchsmoothqu": [150, 599], "traced_model": [150, 151], "detail": [150, 156, 166, 209, 247, 381, 383, 404, 467, 472, 486, 499, 528, 529, 533, 554, 560, 561, 562, 566, 567, 568, 570, 578, 587, 592, 597, 598, 600, 602, 603, 605], "smoothquant": [150, 156, 533, 593, 603], "accur": [150, 156, 599], "effici": [150, 156, 531, 551, 554, 570, 590, 593, 599, 602], "larg": [150, 156, 533, 551, 554, 567, 592, 593, 599, 605], "languag": [150, 156, 256, 294, 528, 533, 558, 592, 593, 599], "spiq": [150, 156, 599], "free": [150, 156, 167, 169, 180, 181, 313, 528, 533, 566, 576, 581, 589, 598, 599], "could": [150, 156, 168, 180, 181, 194, 234, 292, 302, 313, 334, 528, 530, 555, 567, 590, 592, 595, 599, 603], "absorb": [150, 156], "later": [150, 156, 600], "inplac": 150, "mean": [150, 168, 176, 177, 205, 209, 244, 247, 261, 263, 286, 299, 301, 322, 530, 551, 556, 560, 566, 567, 573, 592, 595, 599, 601, 602, 604], "you": [150, 176, 177, 190, 192, 230, 232, 288, 529, 530, 549, 552, 556, 558, 564, 565, 566, 570, 572, 573, 575, 580, 584, 587, 588, 592, 595, 597, 598, 599, 600, 603], "recov": [150, 344, 534, 555, 599], "graphtrac": 150, "update_sq_scal": 150, "ipex_config_path": 150, "smoothquant_scale_info": 150, "ipex_config": 150, "json": [150, 193, 209, 233, 247, 472, 499, 552, 569, 588, 601], "temporari": [150, 344, 528], "trace_and_fuse_sub_graph": 151, "is_qat": 151, "get_embedding_contigu": 152, "embed": 152, "contigu": [152, 592], "is_fused_modul": 152, "_propagate_qconfig_help": 152, "detect": [152, 166, 176, 177, 259, 263, 297, 301, 306, 499, 530, 549, 570, 577, 578, 592], "collate_torch_pr": 152, "fetch": [152, 155, 185, 225, 552], "collate_result": 152, "input2tupl": 152, "append_attr": 152, "fx_model": 152, "fx_white_list": 152, "append": [152, 292, 317, 530, 555, 567, 590], "graphmodul": [152, 530, 596], "addit": [152, 177, 334, 549, 554, 581, 597], "dir": [152, 192, 232, 343, 552, 559, 562], "generate_activation_observ": 152, "observ": [152, 598, 600, 602], "what": [152, 169, 190, 230, 334, 528, 549], "check_cfg_and_qconfig": 152, "op_infos_from_cfg": 152, "output_tensor_ids_op_nam": 152, "paser_cfg": 152, "ops_nam": 152, "get_quantizable_ops_from_cfg": 152, "input_tensor_ids_op_nam": 152, "auto_copi": 152, "fetch_modul": 152, "op_nam": [152, 173, 177, 330, 404, 405, 567, 592, 600], "simple_infer": 152, "get_example_input": 152, "dataset": [152, 180, 181, 182, 184, 185, 189, 190, 191, 203, 212, 222, 224, 225, 229, 230, 231, 243, 255, 259, 260, 261, 263, 292, 293, 297, 298, 299, 301, 302, 313, 334, 337, 372, 386, 396, 397, 408, 420, 499, 501, 531, 533, 534, 551, 556, 561, 566, 567, 575, 592, 595, 597, 599, 602, 604, 605], "example_inp": 152, "get_fallback_ord": 152, "confidence_batch": [152, 602], "fallback": [152, 320, 322, 323, 568, 596, 602], "requantize_cfg": 152, "fall": 152, "back": [152, 209, 215, 247, 587], "order": [152, 256, 257, 292, 294, 295, 317, 322, 329, 331, 530, 566, 592, 594, 599, 600, 602], "confid": 152, "ordered_op": 152, "get_mse_order_per_fp32": 152, "mse": [152, 177, 263, 293, 301, 321, 405, 549, 566, 594, 597], "influenc": [152, 592], "last": [152, 163, 176, 177, 549, 568, 570, 572, 577, 581, 595, 599], "quant": [152, 176, 177, 329, 530, 567, 595], "fallback_ord": 152, "get_mse_order_per_int8": 152, "example_input": [152, 176, 177, 252, 558], "get_torch_vers": 152, "match_datatype_pattern": 152, "calculate_quant_min_max": 152, "unsign": [152, 331], "qmin": 152, "qmax": 152, "algorithm_registri": 153, "algorithm_typ": 153, "locat": [153, 209, 247, 556, 573, 580, 584, 587, 595, 597, 601, 604], "registr": [153, 194, 201, 209, 234, 241, 247, 281], "algorithmschedul": 153, "conf": [153, 158, 159, 177, 180, 181, 210, 265, 272, 273, 275, 276, 277, 278, 283, 302, 312, 313, 314, 317, 318, 322, 325, 329, 332, 334, 510, 530, 531, 533, 550, 554, 561, 562, 567, 568, 569, 590, 595, 596, 598, 602], "control": [153, 177, 391, 396, 530, 549, 567, 592, 602], "phase": [153, 531, 567, 592, 595, 596, 602], "fastbiascorrect": [154, 157], "fast_bias_correct": [155, 176, 177, 293, 595], "smooth_quant": [155, 176, 177, 293, 595, 599], "weight_correct": [155, 176, 177, 293, 595], "5": [156, 160, 177, 196, 205, 211, 236, 244, 263, 301, 534, 549, 552, 560, 566, 567, 591, 592, 594, 595, 599, 601, 602, 604, 605], "For": [156, 166, 167, 168, 177, 194, 209, 234, 247, 260, 261, 263, 286, 289, 298, 299, 301, 302, 313, 528, 530, 532, 534, 549, 554, 555, 556, 558, 560, 563, 570, 572, 573, 575, 578, 592, 596, 599, 600, 602, 604, 605], "kernel": [156, 177, 487, 534, 591, 592, 602], "futur": [156, 180, 181, 212, 563, 567, 578, 603], "weightcorrect": 157, "1e": [157, 599, 604], "05": [157, 177, 263, 301, 566, 599, 605], "evalu": [158, 159, 168, 176, 180, 181, 192, 210, 232, 248, 256, 259, 260, 261, 263, 265, 294, 297, 298, 299, 301, 302, 312, 313, 334, 337, 480, 488, 504, 531, 534, 551, 552, 554, 555, 562, 563, 566, 567, 568, 570, 576, 578, 581, 587, 589, 592, 595, 598, 600, 602, 604], "set_env_var": [158, 210], "env_var": [158, 210], "overwrite_exist": [158, 210], "env": [158, 210, 559], "alreadi": [158, 194, 208, 210, 234, 246, 485, 534, 549, 552, 563, 582, 585, 602], "param": [158, 182, 210, 216, 222, 263, 301, 317, 398, 499, 534, 569, 602], "set_all_env_var": [158, 210], "physic": [158, 210, 528, 550], "core": [158, 177, 210, 549, 550, 565, 580, 584, 591, 605], "get_architectur": [158, 210], "architectur": [158, 210, 266, 269, 533, 549, 550, 554, 567, 592, 593, 603], "get_threads_per_cor": [158, 210], "thread": [158, 177, 210, 515, 549, 551, 591], "get_thread": [158, 210], "get_physical_id": [158, 210], "socket": [158, 210, 487, 516, 591, 605], "get_core_id": [158, 210], "get_bounded_thread": [158, 210], "core_id": [158, 210], "bind": [158, 210], "fit": [158, 168, 177, 302, 313, 317, 332, 334, 530, 533, 550, 551, 552, 556, 561, 562, 566, 567, 568, 569, 592, 595, 596], "b_dataload": [158, 177, 550, 567], "b_func": [158, 550], "benchmarkconfig": [158, 177, 550, 567], "accuraci": [158, 176, 177, 180, 181, 248, 254, 263, 278, 283, 291, 301, 302, 312, 313, 318, 332, 334, 467, 491, 502, 530, 533, 549, 551, 552, 555, 556, 557, 558, 566, 567, 568, 578, 587, 589, 590, 592, 593, 594, 597, 598, 599, 600, 604, 605], "goal": [158, 248, 254, 278, 283, 291, 302, 313, 551, 590, 595, 602], "prefer": [158, 254, 291, 302, 313, 592], "space": [158, 169, 176, 177, 180, 181, 254, 261, 266, 269, 270, 271, 291, 299, 302, 313, 317, 322, 329, 499, 528, 529, 531, 534, 592, 595, 604], "etc": [158, 159, 208, 246, 248, 254, 261, 278, 283, 291, 299, 302, 313, 343, 554, 563, 592, 598, 602], "user": [158, 166, 169, 172, 176, 177, 180, 181, 194, 197, 201, 209, 210, 216, 221, 234, 237, 241, 247, 254, 278, 283, 289, 291, 292, 302, 312, 313, 318, 334, 344, 483, 530, 531, 534, 539, 550, 554, 555, 558, 560, 563, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 578, 581, 587, 589, 590, 592, 593, 595, 596, 597, 599, 600, 601, 602, 606], "cores_per_inst": [158, 177, 550, 567, 594], "num_of_inst": [158, 177, 550, 567, 594], "7": [158, 176, 177, 312, 550, 559, 560, 564, 567, 592, 595, 597, 599, 602, 605], "pb": [158, 177, 302, 310, 313, 436, 439, 450, 533, 550, 556, 561, 567, 569, 600, 605], "eval_dataload": [158, 177, 180, 181, 292, 302, 313, 314, 317, 318, 322, 325, 334, 533, 550, 561, 562, 567, 595, 602], "compon": [159, 248, 255, 292, 293, 480, 515, 530, 556, 564, 565, 570, 587, 590, 591], "quantizationawaretrainingcallback": [159, 334], "pruningcallback": [159, 334], "distillationcallback": 159, "basecallback": 159, "design": [159, 191, 214, 219, 231, 301, 318, 531, 533, 567, 575, 578, 592, 595, 603], "mainli": [159, 171, 219, 290, 567, 592, 595], "prune": [159, 163, 164, 167, 168, 169, 170, 171, 172, 177, 219, 220, 255, 272, 273, 275, 276, 277, 281, 283, 284, 286, 287, 288, 290, 292, 293, 344, 355, 362, 381, 420, 455, 480, 488, 499, 504, 533, 556, 557, 560, 561, 563, 590, 593, 603, 604], "distil": [159, 162, 177, 211, 218, 219, 255, 293, 533, 557, 561, 563, 590, 603, 604], "deriv": [159, 163, 168, 169, 170, 171, 248, 286, 288, 290], "pipelin": [159, 248, 266, 267, 292, 555, 567, 590], "knowledg": [159, 160, 177, 211, 248, 555, 557, 561, 563, 567, 569, 604], "transfer": [159, 199, 239, 248, 552, 554, 555, 567, 599], "teacher": [159, 177, 248, 554, 555, 567, 605], "student": [159, 177, 192, 218, 232, 248, 552, 554, 555, 605], "distillation_conf": [159, 173, 248], "_epoch_ran": [159, 248], "integ": [159, 168, 169, 177, 248, 259, 263, 270, 286, 288, 297, 301, 332, 534, 595, 599, 602], "indic": [159, 166, 177, 185, 190, 192, 225, 230, 232, 248, 259, 270, 297, 530, 549, 559, 600], "how": [159, 163, 168, 169, 177, 209, 247, 248, 286, 529, 530, 532, 534, 549, 551, 552, 554, 555, 556, 562, 567, 581, 582, 585, 586, 587, 592, 595, 599, 601, 602, 603, 604], "much": [159, 163, 177, 209, 247, 248, 554, 581, 592, 599, 601], "epoch": [159, 169, 248, 288, 334, 554, 555, 556, 567, 590, 592, 604], "ran": [159, 248], "eval_frequ": [159, 248], "frequenc": [159, 169, 177, 248, 288, 567, 591, 592, 604], "term": [159, 169, 170, 248, 529, 554, 565, 566, 589, 590, 602], "best_scor": [159, 248], "best": [159, 209, 247, 248, 254, 291, 322, 528, 531, 564, 570, 576, 587, 589, 595, 601, 602], "metric": [159, 177, 180, 181, 213, 248, 254, 255, 270, 278, 283, 291, 292, 293, 302, 313, 334, 337, 372, 396, 420, 480, 488, 496, 499, 502, 531, 534, 549, 551, 552, 556, 567, 568, 595, 598, 600, 602, 603, 604, 605], "best_model": [159, 248], "found": [159, 248, 483, 499, 516, 533, 549, 554, 568, 575, 599, 602, 605], "critet": [160, 211], "includ": [160, 163, 166, 168, 170, 177, 192, 194, 201, 209, 211, 232, 234, 241, 247, 254, 264, 286, 291, 332, 528, 529, 534, 549, 552, 564, 565, 566, 567, 568, 570, 573, 576, 581, 592, 595, 596, 600, 602], "tensorflowknowledgedistillationloss": [160, 211], "pytorchknowledgedistillationloss": [160, 211, 567], "pytorchintermediatelayersknowledgedistillationloss": [160, 211], "tensorflowcriterion": [160, 211], "pytorchcriterion": [160, 211], "criterion_registri": [160, 211], "criterion_typ": [160, 211], "registry_criterion": [160, 211], "knowledgedistillationframework": [160, 211], "student_model": [160, 177, 211, 567], "teacher_model": [160, 177, 211, 554, 555, 567], "knowledgedistillationloss": [160, 211, 567, 604], "temperatur": [160, 177, 211, 567, 604], "loss_typ": [160, 177, 211, 567, 604], "ce": [160, 177, 211, 567, 604], "loss_weight": [160, 177, 211, 567, 604], "pytorchknowledgedistillationlosswrapp": [160, 211], "param_dict": [160, 211, 216], "tensorflowknowledgedistillationlosswrapp": [160, 211], "tensorflowknowledgedistillationlossextern": [160, 211], "intermediatelayersknowledgedistillationloss": [160, 211, 507], "layer_map": [160, 177, 211, 554], "add_origin_loss": [160, 177, 211], "pytorch": [160, 166, 168, 176, 191, 192, 194, 197, 201, 209, 211, 216, 218, 231, 232, 234, 237, 241, 247, 252, 253, 254, 263, 264, 284, 286, 289, 291, 293, 301, 302, 311, 313, 323, 338, 344, 347, 420, 427, 450, 460, 480, 530, 531, 533, 534, 551, 554, 555, 557, 558, 560, 563, 564, 567, 569, 570, 572, 575, 576, 577, 578, 587, 592, 593, 594, 597, 602, 604], "loss": [160, 177, 211, 254, 263, 278, 283, 291, 301, 334, 554, 555, 556, 557, 566, 567, 568, 578, 590, 592, 595, 599, 602, 604], "pytorchintermediatelayersknowledgedistillationlosswrapp": [160, 211], "selfknowledgedistillationloss": [160, 211, 507], "selfknowledg": [160, 211], "pytorchselfknowledgedistillationloss": [160, 211], "pytorchselfknowledgedistillationlosswrapp": [160, 211], "pruner": [162, 255, 272, 273, 274, 275, 276, 278, 283, 284, 286, 289, 293, 510, 567, 592, 604], "model_slim": [162, 164, 169], "pattern_analyz": [162, 164, 165], "weight_slim": [162, 164, 165], "criteria": [162, 164, 177, 254, 278, 283, 286, 288, 291, 530, 587, 599], "reg": [162, 164, 169], "schedul": [162, 164, 169, 170, 177, 255, 284, 288, 293, 567, 590], "callback": [162, 278, 283, 334, 337, 515, 530, 567, 590, 592, 595], "register_criterion": 163, "registri": [163, 168, 169, 170, 171, 286, 288, 290, 531], "get_criterion": 163, "pruningcriterion": 163, "about": [163, 486, 487, 493, 528, 549, 551, 567, 596, 602, 603, 605], "module_nam": [163, 169, 170, 288, 344, 499], "store": [163, 166, 169, 170, 177, 194, 234, 281, 288, 562], "score": [163, 168, 169, 177, 256, 257, 259, 260, 261, 263, 288, 294, 295, 297, 298, 299, 301, 320, 337, 530, 566, 589, 592, 598, 602], "magnitudecriterion": 163, "magnitud": [163, 177, 255, 263, 274, 293, 301, 563, 592], "criterion_class": 163, "determin": [163, 168, 169, 177, 339, 528, 530, 592, 595, 599], "gradientcriterion": 163, "gradient": [163, 272, 563, 567, 592, 605], "absolut": [163, 177, 263, 301, 566, 567, 591, 592, 595, 602], "snipcriterion": 163, "snip": [163, 177, 288, 563, 592, 605], "product": [163, 563, 568, 570, 571, 587, 591, 593, 595, 598, 602], "singl": [163, 171, 177, 185, 192, 209, 225, 232, 247, 259, 288, 290, 297, 380, 397, 416, 530, 552, 564, 592], "shot": [163, 169, 171, 219, 288, 290, 531, 563, 567, 592, 593], "sensit": [163, 272, 288, 563, 592], "arxiv": [163, 169, 288, 592, 599], "org": [163, 169, 259, 288, 297, 529, 530, 549, 564, 582, 585], "1810": [163, 288], "02340": [163, 288], "snipmomentumcriterion": 163, "snip_momentum": [163, 177, 567, 592], "momentum": [163, 288, 563, 567, 592, 604], "mechan": [163, 598, 603], "preserv": 163, "step": [163, 168, 169, 171, 177, 286, 288, 290, 334, 549, 554, 555, 556, 567, 582, 585, 587, 590, 592, 594, 596, 598, 599, 600, 602], "beta": 163, "snipmomentumblockcriterion": 163, "snip_momentum_block": 163, "retrainfreecriterion": 163, "retrain_fre": [163, 169], "slim": [165, 169, 172, 259, 297, 308, 310, 569, 592], "get_attribut": 166, "multi": [166, 172, 259, 297, 357, 531, 551, 552, 563, 567, 589, 595, 602], "level": [166, 318, 332, 341, 490, 528, 599, 602], "descent": 166, "recipesearch": 166, "searcher": [166, 271], "search": [166, 169, 173, 180, 181, 254, 256, 266, 269, 270, 271, 291, 294, 317, 386, 387, 533, 549, 561, 563, 566, 570, 571, 581, 593, 600, 602, 603], "root": [166, 192, 193, 194, 197, 232, 233, 234, 237, 263, 301, 516, 551, 552, 556, 566, 567, 604], "levelwis": 166, "wai": [166, 193, 194, 197, 233, 234, 237, 499, 531, 549, 551, 552, 566, 567, 570, 573, 588, 590, 592, 595, 599, 602, 604], "huggingfac": [166, 167, 192, 232, 340, 552, 557, 561, 575, 576, 577, 578, 599], "bert": [166, 177, 188, 191, 192, 209, 228, 231, 232, 247, 533, 552, 554, 566, 575, 601, 605], "obtain": [166, 169, 170, 172, 287, 530, 558, 592, 598, 599, 602], "recipe_sampl": 166, "bertattent": 166, "dens": [166, 171, 177, 290, 592, 605], "infom": [166, 212, 252], "basic": [166, 168, 176, 177, 208, 246, 266, 286, 293, 321, 325, 328, 334, 563, 564, 567, 594, 598], "searching_result": 166, "jitbasicsearch": 166, "jit": [166, 176, 570, 572, 577, 599, 600], "some": [166, 169, 177, 192, 232, 287, 499, 549, 552, 564, 566, 567, 568, 589, 592, 595, 596, 599, 600, 602], "them": [166, 192, 232, 530, 551, 558, 560, 562, 590, 592, 602], "automat": [166, 167, 169, 176, 177, 194, 197, 204, 205, 234, 237, 244, 254, 264, 291, 530, 533, 549, 550, 552, 563, 567, 568, 570, 572, 575, 576, 578, 580, 581, 582, 584, 585, 587, 590, 592, 595, 599, 601, 602], "static_graph": 166, "flatten_static_graph": 166, "target_lay": 166, "pathsearch": 166, "target_pattern": 166, "structur": [166, 167, 169, 177, 288, 330, 424, 563, 586, 588, 592, 595, 600, 603, 605], "link": [166, 177, 192, 232, 549, 552, 580, 584, 587, 605], "target_path": 166, "target_op": 166, "target_op_lut": 166, "lookup": 166, "tabl": [166, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 386, 387, 605], "code": [166, 180, 181, 210, 265, 289, 292, 313, 334, 409, 427, 530, 533, 534, 549, 551, 552, 554, 555, 556, 562, 563, 565, 566, 570, 572, 574, 575, 576, 578, 581, 587, 589, 590, 592, 593, 594, 595, 598, 599, 600, 601], "current_pattern": 166, "statu": [166, 495, 511, 528, 551, 589], "linear2linearsearch": 166, "consecut": [166, 167, 172], "selfmhasearch": 166, "head": [166, 167, 172, 592], "squeezer": 167, "postcompressionutil": 167, "librari": [167, 213, 255, 293, 526, 529, 533, 564, 567, 572, 581, 587, 593, 595], "relat": [167, 170, 248, 259, 278, 283, 286, 297, 337, 427, 430, 432, 437, 517, 520, 521, 522, 525, 570, 592, 604], "linearcompress": 167, "layer_1": 167, "layer_2": 167, "also": [167, 191, 194, 209, 231, 234, 247, 256, 294, 312, 313, 529, 531, 533, 534, 549, 551, 557, 561, 563, 566, 567, 570, 575, 580, 581, 584, 587, 588, 589, 592, 593, 595, 596, 599, 602], "while": [167, 169, 288, 317, 534, 549, 552, 557, 563, 568, 570, 575, 587, 594, 595, 599], "hidden": [167, 168, 286, 499, 534, 592], "act_fn": 167, "linearcompressioniter": 167, "linear_pattern": 167, "mhacompress": 167, "mha": 167, "head_num": 167, "head_siz": 167, "test": [167, 177, 209, 247, 529, 533, 549, 564, 605], "progress": [167, 194, 234, 581, 587, 592, 595], "register_pattern": [168, 286], "sure": [168, 169, 171, 286, 288, 290, 549, 550], "get_pattern": [168, 286], "assertionerror": [168, 169, 172, 286, 287, 288, 302], "basepattern": [168, 170], "unit": [168, 286, 499, 529], "e": [168, 177, 516, 528, 554, 557, 561, 570, 575, 576, 580, 584, 592, 599, 602], "4x1": [168, 177, 282, 567, 592, 605], "is_glob": [168, 286], "local": [168, 177, 286, 344, 359, 391, 396, 409, 429, 549, 580, 584, 592, 598], "contrast": [168, 286, 601], "keep_mask_lay": 168, "invalid_lay": 168, "max_sparsity_ratio_per_op": [168, 169, 173, 177, 567, 592], "sparsiti": [168, 169, 171, 172, 177, 288, 290, 344, 533, 552, 563, 567, 603, 605], "reach": [168, 171, 177, 290, 529, 533, 551, 592, 602], "min_sparsity_ratio_per_op": [168, 173, 177, 567, 592], "minimum": [168, 177, 567, 578, 592, 602], "target_spars": [168, 173, 177, 567, 592, 594, 604], "patternnxm": [168, 286], "nxm": [168, 169, 177, 282, 286, 592], "kept": [168, 286], "block_siz": [168, 286], "height": [168, 205, 209, 244, 247, 286, 556, 592, 601, 604], "width": [168, 205, 209, 244, 247, 286, 556, 592, 595, 601, 604], "vertic": [168, 209, 247, 286, 601], "becaus": [168, 209, 247, 286, 530, 592, 595, 599, 601, 602], "patternninm": [168, 286], "n": [168, 177, 193, 209, 233, 247, 257, 286, 295, 332, 487, 552, 554, 592, 595, 599, 601], "out": [168, 177, 192, 193, 194, 232, 233, 234, 254, 286, 291, 529, 530, 533, 552, 570, 575, 580, 581, 582, 584, 585, 587, 592, 594, 595], "continu": [168, 259, 286, 297, 531, 567, 588, 592], "doc": [168, 176, 177, 286, 328, 329, 332, 344, 566, 567, 582, 585], "md": [168, 176, 177, 286, 556, 595], "element": [168, 172, 190, 230, 259, 286, 297, 344, 552, 563, 566, 592, 599], "register_prun": [169, 288], "parse_valid_pruner_typ": 169, "get_prun": [169, 288], "cuurent": [169, 288], "round_multipli": 169, "spars": [169, 288, 552, 593], "model_slim_ffn2": 169, "part": [169, 286, 288, 530, 564, 568, 582, 585, 592, 599, 603], "perman": [169, 528, 592], "acceler": [169, 554, 567, 570, 578, 587, 592, 593, 596, 599, 602], "directli": [169, 177, 191, 231, 259, 263, 287, 297, 301, 558, 566, 567, 574, 592, 594, 595, 600], "sprase": 169, "multipl": [169, 177, 178, 179, 183, 184, 192, 193, 195, 196, 197, 198, 199, 203, 206, 209, 216, 223, 224, 226, 232, 233, 235, 236, 237, 238, 239, 243, 245, 247, 264, 302, 303, 304, 306, 312, 550, 552, 558, 567, 590, 592, 598, 599, 602], "model_slim_mha": 169, "baseprun": 169, "current_sparsity_ratio": [169, 288], "global_step": [169, 288], "total": [169, 209, 247, 263, 288, 301, 552, 592, 601], "start_step": [169, 173, 177, 288, 567, 592, 594], "trigger": [169, 288, 529], "end_step": [169, 173, 177, 288, 567, 592, 594], "pruning_frequ": [169, 173, 177, 567, 592], "target_sparsity_ratio": [169, 288], "show": [169, 344, 528, 549, 554, 556, 567, 573, 588, 592, 599, 602, 603], "final": [169, 288, 567, 573, 589, 592, 595, 597, 602], "basicprun": 169, "arrang": [169, 193, 194, 197, 233, 234, 237, 552, 592], "proce": 169, "regul": 169, "patternlockprun": [169, 276, 288], "parent": [169, 171, 282, 288, 290, 600], "blockmaskprun": 169, "grad": 169, "retrainfreeprun": 169, "pruner_class": 169, "rearrang": 169, "fast": [169, 176, 177, 533, 593], "retrain": [169, 555, 592], "effect": [169, 533, 534, 592, 593], "2204": 169, "09656": 169, "progressiveprun": 169, "interpol": [169, 209, 247, 566, 592, 601], "fine": [169, 192, 232, 552, 573, 592, 593, 595], "grain": [169, 593, 602], "improv": [169, 529, 533, 567, 570, 587, 588, 592, 593, 595, 596, 602, 605], "interv": [169, 592], "regular": [170, 256, 287, 294], "register_reg": 170, "regulariz": 170, "get_reg_typ": 170, "get_reg": 170, "basereg": 170, "grouplasso": 170, "coeff": 170, "group": [170, 273, 416, 563, 592, 600, 601, 602, 605], "lasso": [170, 273, 563, 592], "select": [170, 177, 192, 232, 530, 531, 549, 563, 564, 587, 592, 595, 600, 602], "reg_term": 170, "coeffient": 170, "register_schedul": [171, 290], "get_schedul": [171, 290], "pruningschedul": 171, "gradual": [171, 290, 592], "oneshotschedul": [171, 290], "iterativeschedul": [171, 290], "get_sparsity_ratio": 172, "elementwise_over_matmul_gemm_conv": 172, "elementwise_over_al": 172, "blockwise_over_matmul_gemm_conv": 172, "check_config": [172, 287], "prune_config": [172, 287], "everyth": [172, 287, 575], "reset_none_to_default": 172, "undefin": [172, 287], "update_param": 172, "process_weight_config": 172, "global_config": [172, 272, 273, 275, 276, 277], "local_config": [172, 177, 272, 273, 275, 276, 277], "default_config": 172, "pruners_info": 172, "process_yaml_config": 172, "check_key_valid": 172, "template_config": 172, "user_config": 172, "process_and_check_config": [172, 287], "process_config": [172, 287], "parse_to_prun": [172, 287], "keep": [172, 287, 318, 530, 534, 586, 587, 597], "generate_pruner_config": 172, "dotdict": [172, 173, 312], "parse_auto_slim_config": 172, "ffn2_sparsiti": 172, "mha_spars": 172, "generate_ffn2_pruning_config": 172, "generate_mha_pruning_config": 172, "prunerv2": 173, "pruning_typ": [173, 177, 567, 592], "pruning_scop": [173, 177, 567, 592], "sparsity_decay_typ": [173, 177, 567, 592], "pruning_op_typ": [173, 177, 567, 592], "reg_typ": 173, "criterion_reduce_typ": 173, "resume_from_pruned_checkpoint": 173, "similiar": 173, "cfg_fname": 173, "parser": [173, 293, 357, 362, 480, 488, 518], "quantization_conf": 173, "pruning_conf": 173, "graph_optimization_conf": [173, 254], "mixedprecision_conf": 173, "benchmark_conf": 173, "nasconfig": [173, 267, 269, 531], "approach": [173, 176, 177, 266, 267, 269, 507, 530, 531, 533, 551, 552, 554, 563, 567, 575, 587, 593, 594, 602, 604], "search_spac": [173, 266, 269, 270, 271], "search_algorithm": [173, 255, 268, 293, 531], "na": [173, 255, 293, 306, 563], "procedur": [173, 531], "deep_get": [174, 312], "dot": [174, 499, 568, 595], "nest": 174, "eg": [174, 194, 234, 552, 594], "person": [174, 528, 593], "john": 174, "deep": [174, 533, 534, 551, 563, 564, 567, 568, 570, 572, 575, 576, 578, 581, 587, 593, 595, 602, 603, 605], "deep_set": [174, 312], "sex": [174, 528], "male": 174, "instead": [174, 191, 231, 344, 573, 575, 578, 592], "notat": 174, "quantizationconfig": 176, "post_training_static_qu": [176, 551, 552, 567, 594, 602], "calibration_sampling_s": [176, 177, 567], "op_type_dict": [176, 177, 594, 595, 602], "op_name_dict": [176, 177, 567, 595, 602], "strategy_kwarg": [176, 177, 598, 602], "timeout": [176, 177, 567, 594, 602, 604], "max_trial": [176, 177, 567, 602], "quant_level": [176, 177, 602], "auto": [176, 177, 293, 315, 321, 344, 530, 570, 573, 575, 577, 578, 592, 595], "accuracy_criterion": [176, 177, 312, 567, 589, 594, 602, 604], "use_distributed_tun": [176, 177, 602], "posttrainingquantconfig": [176, 177, 313, 530, 533, 551, 561, 567, 569, 595, 596, 598, 602], "quantizationawaretrainingconfig": [176, 177, 334, 530, 555, 567, 595, 596, 602], "requir": [176, 177, 292, 310, 346, 348, 360, 415, 421, 446, 453, 454, 455, 456, 458, 459, 460, 462, 465, 466, 471, 476, 480, 530, 534, 549, 550, 551, 555, 556, 560, 567, 568, 569, 571, 581, 587, 591, 592, 595, 597, 598, 600, 602, 604], "onnxrt_trt_ep": [176, 177, 595], "onnxrt_cuda_ep": [176, 177, 568, 595], "cv": [176, 177, 592], "object_detect": [176, 177, 259, 297], "nlp": [176, 177, 289, 575, 592, 595], "recommendation_system": [176, 177], "adaptor": [176, 177, 331, 337, 533, 563, 596, 597, 599, 600, 603], "explicitli": [176, 177, 562], "overrid": [176, 177, 344], "quantiztaion": [176, 177], "smooth_quant_arg": [176, 177, 595], "gemm_to_matmul": [176, 177, 595], "graph_optimization_level": [176, 177, 594, 595], "disable_al": [176, 177, 594], "enable_bas": [176, 177], "enable_extend": [176, 177], "enable_al": [176, 177], "first_conv_or_matmul_quant": [176, 177, 595], "last_conv_or_matmul_quant": [176, 177, 595], "pre_post_process_quant": [176, 177, 595], "preprocess": [176, 177, 192, 209, 232, 247, 337, 556, 601], "postprocess": [176, 177, 203, 206, 209, 213, 247, 255, 293, 337, 502, 534, 567, 600, 601], "vaild": [176, 177], "dedic": [176, 177], "quant_format": [176, 177, 252, 558], "constraint": [176, 177, 254, 291, 567, 598, 602, 604], "reduc": [176, 177, 534, 555, 567, 568, 587, 588, 593, 595, 596, 599, 602, 604], "layer1": [176, 177, 567, 592, 595], "conv1": [176, 177, 595, 604], "tuning_strategi": [176, 177], "guarante": [176, 177, 567], "models": [176, 177, 312, 567, 589, 594], "footprint": [176, 177, 254, 278, 283, 291, 312, 555, 567, 589, 592, 594], "earli": [176, 177, 567, 595, 602, 604], "stop": [176, 177, 567, 602, 603, 604], "field": [176, 177, 194, 234, 259, 297, 530, 534, 549, 556, 567, 598, 602, 604], "exit": [176, 177, 314, 316, 549, 567, 568, 604], "bit": [176, 177, 555, 568, 593, 595, 599], "excluded_precis": [176, 177, 596], "exclud": [176, 177, 534, 568, 596], "empti": [176, 177, 573], "conserv": [176, 177, 293, 321], "random_se": [177, 317, 334, 567, 604], "1978": 177, "workspac": [177, 334, 343, 344, 425, 498, 509, 569], "default_workspac": 177, "resume_from": [177, 344], "tensorboard": [177, 334, 337, 344, 534, 567], "set_random_se": [177, 344], "set_workspac": [177, 344], "set_resume_from": [177, 344], "set_tensorboard": [177, 344], "directori": [177, 193, 194, 233, 234, 310, 340, 343, 344, 408, 499, 552, 556, 559, 580, 582, 584, 585, 600], "histori": [177, 343, 344, 384, 397, 450, 468, 518, 587, 602], "nc_workspac": 177, "datetim": 177, "now": [177, 209, 247, 530, 531, 552, 556, 578, 594, 601, 602], "strftime": 177, "d_": 177, "h": [177, 209, 247, 556, 601], "resum": [177, 180, 181, 314, 325, 334], "wa": [177, 534, 549, 567, 593, 602], "flag": [177, 257, 295, 334], "visual": [177, 533, 578, 587, 598, 600, 602, 603], "displai": [177, 328, 329, 344, 415, 587], "workspace_path": [177, 484, 499], "warmup": [177, 550, 567, 594], "inter_num_of_thread": [177, 567, 594], "intra_num_of_thread": [177, 567, 594], "benchmark": [177, 212, 255, 292, 293, 312, 344, 365, 372, 385, 396, 397, 420, 480, 481, 491, 497, 514, 519, 533, 539, 569, 570, 574, 578, 581, 587, 602, 603, 604, 605], "inter": [177, 190, 194, 230, 234], "intra": 177, "accuracycriterion": [177, 467, 567, 602], "higher_is_bett": [177, 566, 602, 604], "rel": [177, 312, 567, 594, 602, 604, 605], "tolerable_loss": [177, 567, 602], "01": [177, 567, 591, 594, 602, 604, 605], "higher": [177, 180, 181, 270, 302, 313, 334, 530, 554, 558, 566, 592, 595, 598], "tuningcriterion": [177, 567, 589, 598, 602], "optin": 177, "tuning_criterion": [177, 567, 589, 598, 602], "dynam": [177, 182, 222, 252, 329, 352, 534, 551, 554, 563, 567, 570, 575, 576, 577, 578, 581, 587, 593, 602, 605], "ptq": [177, 313, 530, 556, 563, 567, 595, 599, 600, 602], "tri": [177, 602], "meet": [177, 292, 314, 316, 530, 558, 589, 593, 594, 595, 600, 602], "bayesian": [177, 271, 293, 321, 531, 594], "mse_v2": [177, 293, 321], "hawq_v2": [177, 293, 321], "exhaust": [177, 271, 293, 321, 594], "docstr": [177, 332], "copi": [177, 287, 344], "deepcopi": 177, "model_origin": [177, 313, 596], "qat_op_name_dict": 177, "compression_manag": [177, 334, 530, 554, 555, 567, 590, 592, 595], "prepare_compress": [177, 334, 530, 554, 555, 567, 590, 592, 595], "weightpruningconfig": [177, 221, 567, 590, 592], "pruning_config": [177, 567, 592], "9": [177, 530, 564, 567, 592, 594, 599, 602, 604], "98": [177, 567, 592, 594, 605], "exp": [177, 567, 592], "90": [177, 604, 605], "magnitude_progress": 177, "snip_progress": 177, "snip_momentum_progress": [177, 592], "pattern_lock": [177, 255, 274, 293], "most": [177, 263, 301, 549, 567, 568, 592, 595, 599, 602], "feasibl": 177, "situat": [177, 556], "unstructur": [177, 282, 563, 592, 605], "8x1": 177, "channelx1": [177, 592], "1xchannel": [177, 592], "itrex": 177, "start": [177, 209, 247, 259, 297, 318, 564, 601, 602, 603, 606], "togeth": [177, 209, 247, 554, 564, 574, 593, 600, 601], "sort": [177, 322, 408, 602], "sinc": [177, 254, 256, 278, 283, 291, 294, 554, 558, 564, 566, 581, 587, 590], "lead": [177, 499, 554, 567, 568, 592, 599], "increas": [177, 553, 563, 570, 587, 602], "cube": [177, 592], "6": [177, 533, 549, 560, 592, 595, 599, 602, 605], "update_config": 177, "10": [177, 194, 234, 317, 533, 549, 550, 552, 564, 567, 592, 594, 601, 602, 605], "knowledgedistillationlossconfig": [177, 554, 555, 567, 590], "hyperparamet": [177, 598, 599, 602], "entropi": [177, 602], "length": [177, 192, 209, 232, 247, 259, 297, 533, 552, 566, 593, 595, 601], "groundtruth": [177, 259, 297], "label": [177, 180, 181, 192, 194, 195, 196, 197, 200, 205, 209, 214, 232, 234, 235, 236, 237, 240, 244, 247, 256, 258, 263, 294, 296, 301, 302, 313, 334, 416, 530, 551, 552, 566, 567, 595, 601], "tpye": 177, "sum": [177, 263, 301, 554], "distillationconfig": [177, 334, 554, 555, 567, 590], "criterion_conf": 177, "d_conf": [177, 555, 567, 590], "intermediatelayersknowledgedistillationlossconfig": [177, 554], "relationship": 177, "student_layer_nam": 177, "student_layer_output_process": 177, "teacher_layer_nam": 177, "teacher_layer_output_process": 177, "desir": [177, 205, 209, 244, 247, 601], "either": [177, 259, 297, 571, 575, 590, 594, 595], "serv": [177, 310, 516], "numer": [177, 263, 301, 568, 593, 595], "abbrevi": 177, "layer_nam": 177, "l1": 177, "selfknowledgedistillationlossconfig": [177, 554, 567], "student1_layer_name1": 177, "teacher_layer_name1": 177, "student2_layer_name1": 177, "student1_layer_name2": 177, "teacher_layer_name2": 177, "student2_layer_name2": 177, "soft": 177, "l2": [177, 592], "hard": [177, 551], "resblock": 177, "featur": [177, 192, 193, 205, 209, 232, 233, 244, 247, 529, 533, 550, 551, 553, 554, 567, 568, 569, 570, 574, 575, 578, 587, 592, 593, 597, 601], "deepst": 177, "fc": 177, "02": [177, 599, 605], "crossentropyloss": [177, 211, 554, 567], "sgd": [177, 216, 554, 567, 594, 604], "lr": [177, 554, 556, 567], "learning_r": [177, 567, 594, 604], "callabl": [177, 261, 299, 334, 495, 499, 515, 516], "altern": [177, 313], "distil_loss": [177, 567], "mixedprecisionconfig": [177, 302, 332, 567, 568], "mixedprecis": [177, 264, 457, 505, 567], "fp16": [177, 329, 568, 595], "won": [177, 595], "work": [177, 254, 291, 532, 551, 554, 582, 585, 592, 596, 597, 599, 600], "mix_precis": [177, 293, 332, 567, 568], "converted_model": [177, 302, 567, 568], "exportconfig": 177, "dynamic_ax": [177, 252, 558], "qlinear": [177, 194, 201, 234, 241, 263, 301, 534, 558, 577, 605], "ax": [177, 252], "onnxqlinear2qdqconfig": 177, "onnxqlinear2qdq": 177, "new_model": 177, "torch2onnxconfig": [177, 558], "qdq_op_fp32_bia": [177, 252, 558], "torch2onnx": [177, 249, 255, 293], "qdq_op_int32_bia": [177, 252, 558], "qdq_op_fp32_bias_qdq": [177, 252, 558], "resnet50": [177, 533, 556, 561, 570, 574, 592, 595, 598, 605], "int8_onnx_config": [177, 558], "randn": [177, 558], "224": [177, 205, 244, 533, 551, 552, 556, 558, 561, 567, 570, 601, 604, 605], "batch_siz": [177, 182, 184, 190, 191, 192, 193, 212, 222, 224, 230, 231, 232, 233, 252, 531, 551, 552, 556, 558, 562, 567, 570, 595], "tf2onnxconfig": 177, "tf2onnx": [177, 249, 255, 293], "keyword": 177, "argument": [177, 332, 346, 454, 458, 463, 466, 472, 531], "output_graph": [177, 454, 458, 463, 466], "sigopt": [178, 179, 293, 593], "tpe": [178, 179, 293], "sigopttunestrategi": 180, "q_dataload": [180, 181, 314, 317, 318, 322, 325, 562, 602], "q_func": [180, 181, 314, 317, 318, 322, 325, 534, 567, 602], "eval_func": [180, 181, 292, 302, 313, 314, 317, 318, 322, 325, 332, 334, 530, 551, 552, 554, 555, 556, 567, 595, 596, 602, 604], "q_hook": [180, 181, 314, 317, 318, 322, 325], "hpo": 180, "mandatori": [180, 181, 313, 567, 604], "yield": [180, 181, 190, 212, 230, 302, 313, 317, 332, 334, 551, 595, 602], "_": [180, 181, 313, 530, 531, 534, 549, 554, 556, 560, 566, 567, 568, 569, 570, 576, 580, 582, 584, 585, 589, 592, 595, 597, 598, 599, 600, 602, 604], "taken": [180, 181, 302, 313, 334, 595], "reserv": [180, 181], "abl": [180, 181, 302, 313, 334, 578, 587, 592, 595], "tuner": [180, 181, 254, 291, 302, 313, 334, 595], "scalar": [180, 181, 302, 313, 334, 566, 595], "pseudo": [180, 181, 313, 334, 600], "someth": [180, 181, 194, 234, 313, 334], "fefin": 181, "tpetunestrategi": 181, "basedatalod": [182, 222], "basedataload": [182, 187, 189, 222, 227, 229], "last_batch": [182, 184, 191, 212, 222, 224, 231], "rollov": [182, 184, 191, 212, 222, 224, 231], "collate_fn": [182, 184, 185, 212, 222, 224, 225, 552], "sampler": [182, 184, 186, 212, 222, 224, 226, 243, 255, 328, 556], "batch_sampl": [182, 184, 212, 222, 224], "num_work": [182, 184, 212, 222, 224, 567, 595], "pin_memori": [182, 184, 212, 222, 224], "shuffl": [182, 184, 212, 222, 224, 567, 595], "_generate_dataload": [182, 222], "default_col": [184, 224], "outer": [184, 224], "defaultdataload": [184, 191, 224, 231], "definit": [185, 190, 225, 230, 413, 426, 435, 484, 515], "style": [185, 199, 225, 239, 332, 529, 552, 562], "drop_last": [185, 190, 225, 230], "iterablefetch": [185, 225], "indexfetch": [185, 225], "base_dataload": [186, 226, 243, 255], "default_dataload": [186, 226, 243, 255], "fetcher": [186, 226, 243, 255], "mxnet_dataload": [186, 226, 243, 255], "onnxrt_dataload": [186, 226, 243, 255], "pytorch_dataload": [186, 226, 243, 255], "tensorflow_dataload": [186, 226, 243, 255], "mxnetdataload": [187, 227], "onnxrtbertdataload": [188, 228], "varient": [188, 228], "onnxrtdataload": [188, 228], "pytorchdataload": [189, 229], "data_sourc": [190, 230, 337], "__iter__": [190, 194, 230, 234, 551, 552, 567], "matter": [190, 230, 596], "iterablesampl": [190, 230], "squential": [190, 230], "your": [190, 192, 230, 232, 529, 549, 552, 556, 558, 564, 565, 567, 570, 573, 574, 575, 580, 581, 582, 584, 585, 587, 592, 598, 600, 602], "clear": [190, 230, 534, 560, 566, 567], "iterabledataset": [190, 194, 230, 234], "try": [190, 230, 530, 558, 592, 595, 599, 602], "indexdataset": [190, 230], "__getitem__": [190, 194, 209, 230, 234, 247, 552, 567], "__len__": [190, 194, 230, 234, 552], "retriev": [190, 230, 493], "act": [190, 230, 528], "sequentialsampl": [190, 230], "sequenti": [190, 230, 292, 314, 316, 602], "batchsampl": [190, 230], "tfdatadataload": [191, 231], "tensorflow1": [191, 231], "coupl": [191, 231], "satisfi": [191, 231, 564], "usag": [191, 231, 259, 265, 292, 297, 332, 499, 549, 552, 556, 557, 566, 570, 578, 589, 594, 601], "tf1": [191, 231, 569], "although": [191, 231, 598], "tensorflowbertdataload": [191, 231], "tensorflowmodelzoobertdataload": [191, 231], "zoo": [191, 209, 231, 247, 533, 557, 561, 605], "tensorflowdataload": [191, 231], "pytorchbertdataset": [192, 232], "model_typ": [192, 232, 429, 552], "construct": [192, 195, 196, 199, 207, 212, 214, 215, 217, 232, 235, 236, 239, 301, 306, 310, 337, 528, 552, 556, 592, 602], "tensordataset": [192, 232, 552], "repo": [192, 232, 527, 552, 557, 580, 582, 584, 585, 606], "easi": [192, 232, 291, 549, 551, 558, 567, 593, 595, 598], "load": [192, 208, 209, 232, 246, 247, 302, 310, 313, 343, 344, 472, 499, 551, 580, 584, 588, 594, 595, 599], "classifi": [192, 232, 263, 301, 552, 554, 592], "squad": [192, 209, 232, 247, 260, 261, 263, 298, 299, 301, 552, 566, 592, 601, 605], "distilbert": [192, 232, 533, 552, 593, 605], "xlnet": [192, 232, 552], "xlm": [192, 232, 552, 605], "101": [192, 232, 263, 301, 566, 599, 605], "2043": [192, 232], "2001": [192, 232], "onnxrtbertdataset": [192, 232], "data_dir": [192, 232, 552], "model_name_or_path": [192, 232, 552, 567, 575, 576], "max_seq_length": [192, 209, 232, 247, 552, 601], "do_lower_cas": [192, 208, 209, 232, 246, 247, 552, 601], "mrpc": [192, 232, 263, 301, 552, 566, 575, 592, 602, 605], "dynamic_length": [192, 232, 552], "shortcut": [192, 232, 552], "token": [192, 203, 206, 209, 232, 243, 245, 247, 255, 256, 257, 293, 294, 295, 340, 516, 549, 552, 566, 567, 598, 599, 601, 602], "longer": [192, 209, 232, 247, 552, 601], "truncat": [192, 209, 232, 247, 552, 601], "shorter": [192, 209, 232, 247, 552, 601], "lowercas": [192, 232, 552], "choic": [192, 232, 534, 549, 552, 566, 599], "qqp": [192, 232, 552, 566, 605], "qnli": [192, 232, 552, 566, 605], "rte": [192, 232, 552, 566, 605], "st": [192, 232, 552, 566], "cola": [192, 232, 552, 566, 605], "mnli": [192, 232, 552, 566, 605], "wnli": [192, 232, 552, 566, 605], "mobilebert": [192, 232, 552, 554, 605], "roberta": [192, 232, 552, 605], "uncas": [192, 209, 232, 247, 552, 601, 605], "load_and_cache_exampl": [192, 232], "cach": [192, 232, 429, 516, 559, 595], "convert_examples_to_featur": [192, 209, 232, 247], "max_length": [192, 232], "label_list": [192, 232, 263, 301], "output_mod": [192, 232], "classif": [192, 209, 232, 247, 263, 289, 301, 554, 558, 561, 566, 576, 592, 593], "pad_token": [192, 232], "pad_token_segment_id": [192, 232], "mask_padding_with_zero": [192, 232], "inputfeatur": [192, 209, 232, 247], "properti": [192, 232, 416, 565, 591], "input_id": [192, 209, 232, 247, 567], "vocabulari": [192, 208, 209, 232, 246, 247, 601], "attention_mask": [192, 232, 567], "usual": [192, 232, 554, 590, 595, 599], "NOT": [192, 232, 560, 564], "token_type_id": [192, 232, 567], "segment": [192, 232, 257, 259, 295, 297], "portion": [192, 232], "problem": [192, 232, 263, 301, 566, 568, 588], "regress": [192, 232], "seq_length": [192, 232], "tensorflowbertdataset": [192, 232], "label_fil": [192, 209, 232, 247, 552, 601], "tfrecord": [192, 193, 194, 232, 233, 234, 552], "guid": [192, 232, 530, 533, 552, 554, 564, 570, 578, 587, 606], "parsedecodebert": [192, 232], "tensorflowmodelzoobertdataset": [192, 193, 232, 233], "num_cor": [192, 193, 197, 232, 233, 237, 552], "28": [192, 193, 197, 232, 233, 237, 552, 605], "coco": [193, 200, 204, 233, 240, 259, 263, 297, 301, 566, 592], "parsedecodecoco": [193, 233], "cocorecorddataset": [193, 233], "interleav": [193, 233, 552], "parallel": [193, 233, 552, 567, 602], "cocoraw": [193, 233, 551, 552], "img_dir": [193, 233, 552], "val2017": [193, 233, 552], "anno_dir": [193, 233, 552], "annot": [193, 233, 259, 297, 332, 552, 566, 592], "instances_val2017": [193, 233, 552], "raw": [193, 197, 200, 233, 237, 240, 322, 561, 566, 602], "jpg": [193, 197, 199, 233, 237, 239, 552], "imag": [193, 194, 197, 199, 205, 209, 233, 234, 237, 239, 244, 247, 259, 297, 549, 552, 556, 558, 592, 594, 599, 600, 601, 605], "coconpi": [193, 233, 552], "npy_dir": [193, 233, 552], "npy": [193, 233, 552], "tensorflowdataset": [194, 234], "pytorchdataset": [194, 234], "mxnetdataset": [194, 234], "onnxrtqldataset": [194, 234], "onnxrtitdataset": [194, 234], "IT": [194, 201, 234, 241, 593], "pytorchmxnetwrapdataset": [194, 234], "datafunc": [194, 234], "pytorchmxnetwrapfunct": [194, 209, 234, 247], "framework_dataset": [194, 234], "convent": [194, 234, 259, 297, 554, 599], "imageclassifi": [194, 234], "choos": [194, 234, 549, 563, 564, 575, 597, 599, 602, 604], "tensorflow_itex": [194, 197, 199, 201, 234, 237, 239, 241, 594], "onnxrt_qdq": [194, 201, 234, 241, 594], "onnxrt_qlinearop": [194, 201, 209, 234, 241, 247, 594], "onnxrt_integerop": [194, 201, 209, 234, 241, 247, 594], "pytorch_ipex": [194, 201, 234, 241, 567, 594, 604], "pytorch_fx": [194, 201, 234, 241, 567, 594], "dataset_registri": [194, 234], "dataset_typ": [194, 234], "dataset_format": [194, 234], "data_format": [194, 205, 234, 244], "raw_imag": [194, 234], "overwrit": [194, 234, 580, 584], "download_url": [194, 234], "filenam": [194, 234, 344, 468, 492, 499, 552], "md5": [194, 234], "download": [194, 234, 420, 443, 444, 446, 447, 480, 549, 552, 564, 597], "address": [194, 234, 516, 528, 549, 568, 593], "gen_bar_updat": [194, 234], "bar": [194, 234, 533, 549, 587, 593], "check_integr": [194, 234], "fpath": [194, 234], "checksum": [194, 234], "calculate_md5": [194, 234], "chunk_siz": [194, 234], "cifar10": [194, 234, 552], "cifar100": [194, 234, 552], "otherwis": [194, 209, 234, 247, 528, 552, 582, 585, 594, 601], "www": [194, 234, 552, 605], "toronto": [194, 234, 552], "kriz": [194, 234, 552], "cifar": [194, 234, 552, 605], "tar": [194, 234, 552, 582, 585], "gz": [194, 234, 552, 582, 585], "manual": [194, 234, 552, 570, 576, 578, 581], "subset": [194, 197, 234, 237, 552], "internet": [194, 234, 549, 552], "put": [194, 234, 552, 554, 592], "again": [194, 234, 552, 596], "pytorchcifar10": [194, 234], "mxnetcifar10": [194, 234], "tensorflowcifar10": [194, 234], "pytorchcifar100": [194, 234], "mxnetcifar100": [194, 234], "tensorflowcifar100": [194, 234], "mnist": [194, 234, 552, 556], "modifi": [194, 221, 234, 478, 530, 549, 556, 560, 604], "nation": [194, 234, 528], "institut": [194, 234], "standard": [194, 209, 234, 247, 558, 566, 601, 602], "technologi": [194, 234, 567, 591], "fashionmnist": [194, 234, 552], "npz": [194, 234, 552], "idx1": [194, 234, 552], "ubyt": [194, 234, 552], "idx3": [194, 234, 552], "t10k": [194, 234, 552], "pytorchmnist": [194, 234], "mxnetmnist": [194, 234], "tensorflowmnist": [194, 234], "pytorchfashionmnist": [194, 234], "mxnetfashionmnist": [194, 234], "tensorflowfashionmnist": [194, 234], "imagefold": [194, 234, 552, 556, 567], "expect": [194, 234, 347, 469, 528, 529, 559, 587, 595, 602], "subfold": [194, 234], "belong": [194, 234, 252, 306, 595], "class_1": [194, 234, 552], "xxx": [194, 234, 529, 552, 567], "png": [194, 234, 552], "xxy": [194, 234, 552], "xxz": [194, 234, 552], "class_n": [194, 234, 552], "123": [194, 234, 552, 601], "nsdf3": [194, 234, 552], "asd932_": [194, 234, 552], "categori": [194, 234, 258, 296, 550, 552, 577], "mxnetimagefold": [194, 234], "tensorflowtfrecorddataset": [194, 234], "tensorflowimagerecord": [194, 234], "imagenet": [194, 197, 205, 234, 237, 244, 531, 549, 567, 576, 592, 600, 601, 604, 605], "000": [194, 234, 533, 552], "001": [194, 234, 552, 556, 599, 604], "099": [194, 234, 552], "tensorflowvocrecord": [194, 234], "pascal": [194, 234], "voc": [194, 234, 263, 301], "2012": [194, 234], "00000": [194, 234], "00004": [194, 234], "00001": [194, 234], "00003": [194, 234], "dummydataset": [195, 196, 235, 236], "127": [195, 196, 235, 236, 552, 595, 599], "float32": [195, 196, 209, 235, 236, 247, 259, 297, 534, 550, 552, 567, 595, 599, 601], "rang": [195, 196, 209, 235, 236, 247, 332, 334, 533, 534, 552, 554, 555, 556, 567, 590, 592, 595, 599, 601], "stand_norm": [195, 196, 235, 236, 552], "dummy_v2": [196, 236, 551, 552], "sparse_dummy_v2": [196, 236, 552], "label_shap": [196, 236, 552], "sparsedummydataset": [196, 236], "dense_shap": [196, 236, 552], "sparse_ratio": [196, 236, 552], "imagenetraw": [197, 237, 552], "data_path": [197, 237, 552], "image_list": [197, 237, 552], "img1": [197, 237, 552], "img2": [197, 237, 552], "imgx": [197, 237, 552], "val_map": [197, 237, 552], "txt": [197, 237, 549, 552, 564], "pytorchimagenetraw": [197, 237], "mxnetimagenetraw": [197, 237], "tensorflowimagenetraw": [197, 237], "inteltensorflow": [197, 199, 237, 239, 564], "tensorflowimagenetdataset": [197, 237], "onnxrtimagenetdataset": [197, 237], "bert_dataset": [198, 203, 238, 243, 255, 293], "coco_dataset": [198, 203, 238, 243, 255, 293], "dummy_dataset": [198, 203, 238, 243, 255, 293], "dummy_dataset_v2": [198, 203, 238, 243, 255, 293], "imagenet_dataset": [198, 203, 238, 243, 255, 293], "style_transfer_dataset": [198, 203, 238, 243, 255, 293], "styletransferdataset": [199, 239], "content_fold": [199, 239, 552], "style_fold": [199, 239, 552], "crop_ratio": [199, 239, 552], "resize_shap": [199, 239, 552], "256": [199, 205, 239, 244, 552, 556, 567, 601], "image_format": [199, 239, 552], "holder": [199, 239, 552], "labelbalancecocorecordfilt": [200, 240], "balanc": [200, 240, 591, 599], "labelbalancecocorawfilt": [200, 240], "tensorflowfilt": [201, 241], "onnxrtqlfilt": [201, 241], "onnxrtitfilt": [201, 241], "pytorchfilt": [201, 241], "mxnetfilt": [201, 241], "filter_registri": [201, 241], "filter_typ": [201, 241], "__call__": [201, 241], "coco_filt": [202, 203, 242, 243, 255, 293], "imagenet_transform": [203, 206, 243, 245, 255, 293], "parsedecodecocotransform": 204, "decod": [204, 205, 244, 256, 294, 566, 601], "quantizedinput": [205, 244, 601], "labelshift": [205, 244, 601], "label_shift": [205, 244, 601], "parsedecodeimagenet": [205, 244, 601], "proto": [205, 209, 244, 247, 601], "parsedecodeimagenettransform": [205, 244], "tensorflowresizecropimagenettransform": [205, 244], "random_crop": [205, 244, 601], "resize_sid": [205, 244, 601], "resize_method": [205, 244], "bilinear": [205, 209, 244, 247, 601], "random_flip_left_right": [205, 244, 601], "mean_valu": [205, 244, 601], "channels_last": [205, 244, 570], "subpixel": [205, 244], "rgb": [205, 244], "seri": [205, 244, 533, 564, 567, 601], "applic": [205, 244, 483, 514, 516, 549, 558, 570, 587, 593, 599, 600, 601], "crop": [205, 209, 244, 247, 552, 601], "flip": [205, 209, 244, 247, 601], "left": [205, 209, 244, 247, 549, 581, 587, 599, 601], "right": [205, 244, 259, 297, 528, 530, 549, 587, 599, 601], "std": [205, 209, 244, 247, 567, 601], "bilinearimagenettransform": [205, 244], "central_fract": [205, 244, 601], "875": [205, 244, 601], "fraction": [205, 244, 601], "onnxbilinearimagenettransform": [205, 244], "onnxresizecropimagenettransform": [205, 244], "std_valu": [205, 244], "229": [205, 244, 567, 605], "225": [205, 244, 567, 605], "resizewithaspectratio": [205, 244], "87": [205, 244, 605], "inter_pol": [205, 244], "cv2": [205, 244], "inter_area": [205, 244], "aspect": [205, 209, 244, 247, 601], "postprocess_cl": [207, 217, 567], "user_postprocess": [207, 217], "convert_to_unicod": [208, 246], "unicod": [208, 246], "assum": [208, 246, 259, 270, 297, 534, 560, 587], "utf": [208, 246], "load_vocab": [208, 246], "vocab_fil": [208, 209, 246, 247, 601], "convert_by_vocab": [208, 246], "vocab": [208, 246], "whitespace_token": [208, 246], "whitespac": [208, 246, 261, 299], "clean": [208, 246, 385, 529, 567], "piec": [208, 246, 256, 294, 558, 566], "fulltoken": [208, 246], "tokenzi": [208, 246], "basictoken": [208, 246], "punctuat": [208, 246, 256, 261, 294, 299], "lower": [208, 209, 246, 247, 261, 299, 318, 499, 555, 592, 593, 595, 599, 601, 602], "wordpiecetoken": [208, 246], "unk_token": [208, 246], "unk": [208, 246], "max_input_chars_per_word": [208, 246], "200": [208, 246, 530, 602], "wordpiec": [208, 209, 246, 247, 601], "concat_gener": [209, 247], "inc": [209, 247, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 528, 533, 570, 577, 587, 593, 594, 597], "tensorflowtransform": [209, 247], "mxnettransform": [209, 247], "pytorchtransform": [209, 247], "onnxrtqltransform": [209, 247], "onnxrtittransform": [209, 247], "transform_registri": [209, 247], "transform_typ": [209, 247], "basetransform": [209, 247], "tensorflowwrapfunct": [209, 247], "transform_func": [209, 247], "pytorchmxnettransform": [209, 247], "get_torchvision_map": [209, 247], "torchvis": [209, 247, 549, 557, 561, 570, 576], "composetransform": [209, 247], "transform_list": [209, 247, 601], "compos": [209, 247, 337, 601], "croptoboundingbox": [209, 247, 601], "offset_height": [209, 247, 601], "offset_width": [209, 247, 601], "target_height": [209, 247, 601], "target_width": [209, 247, 601], "box": [209, 247, 259, 263, 297, 301, 530, 549, 566, 570, 581, 587, 600, 601, 602], "coordin": [209, 247, 317, 601, 602], "top": [209, 247, 254, 263, 278, 283, 291, 301, 566, 587, 601], "corner": [209, 247, 534, 601], "horizont": [209, 247, 601], "mxnetcroptoboundingbox": [209, 247], "onnxrtcroptoboundingbox": [209, 247], "tensorflowcroptoboundingbox": [209, 247], "resizewithratio": [209, 247, 601], "min_dim": [209, 247, 601], "800": [209, 247, 601], "max_dim": [209, 247, 601], "1365": [209, 247, 601, 605], "constant_valu": [209, 247], "longest": [209, 247, 601], "side": [209, 247, 549, 552, 581, 599, 601], "doesn": [209, 247, 534, 556, 567, 588, 604], "exce": [209, 247, 601], "tensorflowresizewithratio": [209, 247], "perm": [209, 247, 601], "permut": [209, 247, 601], "tensorflowtranspos": [209, 247], "mxnettranspos": [209, 247], "pytorchtranspos": [209, 247], "randomverticalflip": [209, 247, 601], "randomli": [209, 247, 271, 317, 531, 599, 601, 602], "tensorflowrandomverticalflip": [209, 247], "randomhorizontalflip": [209, 247, 567, 601], "tensorflowrandomhorizontalflip": [209, 247], "toarrai": [209, 247, 601], "pil": [209, 247, 601], "casttftransform": [209, 247], "castonnxtransform": [209, 247], "castpytorchtransform": [209, 247], "centercroptftransform": [209, 247], "center": [209, 247, 532, 533, 564, 601, 602], "paddedcentercroptransform": [209, 247], "crop_pad": [209, 247], "resizetftransform": [209, 247], "nearest": [209, 247, 601], "bicub": [209, 247, 601], "resizepytorchtransform": [209, 247], "randomcroptftransform": [209, 247], "randomresizedcroppytorchtransform": [209, 247], "randomresizedcropmxnettransform": [209, 247], "randomresizedcroptftransform": [209, 247], "normalizetftransform": [209, 247], "rescal": [209, 247, 601], "deviat": [209, 247, 601], "broadcast": [209, 247, 556, 601], "rescalekeraspretraintransform": [209, 247], "rescaletftransform": [209, 247], "rescaletransform": [209, 247], "alignimagechanneltransform": [209, 247], "dim": [209, 247, 599, 601], "align": [209, 247, 528, 601], "w": [209, 247, 592, 599, 601], "must": [209, 247, 259, 297, 529, 530, 549, 550, 551, 564, 595, 601], "pytorchalignimagechannel": [209, 247], "tondarraytransform": [209, 247], "resizemxnettransform": [209, 247], "resizetransform": [209, 247], "cropresizetftransform": [209, 247], "boundari": [209, 247, 601], "area": [209, 247, 259, 297, 566, 601], "pytorchcropresizetransform": [209, 247], "mxnetcropresizetransform": [209, 247], "cropresizetransform": [209, 247], "centercroptransform": [209, 247], "mxnetnormalizetransform": [209, 247], "pytorchnormalizetransform": [209, 247], "normalizetransform": [209, 247], "randomcroptransform": [209, 247], "randomresizedcroptransform": [209, 247], "get_final_text": [209, 247], "pred_text": [209, 247], "orig_text": [209, 247], "project": [209, 247, 372, 395, 396, 420, 527, 528, 529, 593, 598, 602, 606], "squadexampl": [209, 247], "qas_id": [209, 247], "question_text": [209, 247], "doc_token": [209, 247], "orig_answer_text": [209, 247], "start_posit": [209, 247], "end_posit": [209, 247], "is_imposs": [209, 247], "simpl": [209, 247, 549, 564, 567, 598, 599, 602], "answer": [209, 247, 260, 261, 298, 299, 528, 592, 601, 605], "posit": [209, 247, 528, 549, 566, 570], "unique_id": [209, 247], "example_index": [209, 247], "doc_span_index": [209, 247], "token_to_orig_map": [209, 247], "token_is_max_context": [209, 247], "input_mask": [209, 247, 567], "segment_id": [209, 247, 567], "read_squad_exampl": [209, 247], "input_fil": [209, 247], "doc_strid": [209, 247, 601], "max_query_length": [209, 247, 601], "output_fn": [209, 247], "inputbatch": [209, 247], "collecttransform": [209, 247], "10833": [209, 247], "tfsquadv1posttransform": [209, 247], "n_best_siz": [209, 247, 601], "20": [209, 247, 591, 599, 601, 604, 605], "384": [209, 247, 601], "64": [209, 247, 531, 599, 601, 605], "max_answer_length": [209, 247, 601], "30": [209, 247, 557, 561, 563, 599, 601, 605], "nbest_predict": [209, 247, 601], "question": [209, 247, 260, 261, 298, 299, 528, 529, 534, 564, 570, 592, 599, 601, 605], "anoth": [209, 247, 256, 265, 294, 344, 554, 568, 580, 584, 601, 602], "long": [209, 247, 559, 601], "document": [209, 247, 332, 529, 539, 556, 568, 572, 582, 585, 586, 597, 601, 603], "chunk": [209, 247, 601], "tfmodelzoocollecttransform": [209, 247], "tfsquadv1modelzooposttransform": [209, 247], "squadv1": [209, 247, 601], "see": [209, 247, 256, 294, 528, 530, 532, 549, 565, 567, 580, 581, 584, 587, 588, 599, 600, 602, 605], "parsedecodevoctransform": [209, 247], "conf_fname_or_obj": [210, 219, 248, 254, 264, 265, 266, 267, 269, 278, 283, 291], "thei": [210, 332, 528, 554, 560, 566, 567, 568, 575, 589, 592], "command": [210, 334, 484, 492, 549, 556, 570, 572, 575, 580, 584, 588], "possibl": [210, 361, 549, 590, 592, 596, 602], "unnecessari": [210, 567], "tensorflowcrossentropyloss": 211, "pytorchcrossentropyloss": 211, "tensorflowsparsecategoricalcrossentropi": 211, "sparsecategoricalcrossentropyloss": 211, "setter": 212, "calib_dataload": [212, 292, 313, 530, 533, 551, 552, 561, 562, 566, 567, 595, 596], "reason": [212, 528, 551, 600, 602], "know": [212, 485, 556, 597], "known": [212, 317, 558, 567, 592, 600, 602], "open": [213, 255, 293, 337, 526, 528, 533, 549, 558, 559, 567, 582, 585, 588, 593], "metric_cl": [214, 301, 567], "user_metr": [214, 301], "alwai": [214, 259, 297, 301, 566, 567], "recommend": [214, 301, 534, 552, 558, 560, 578, 581, 586, 588, 592, 594, 602], "set_backend": 215, "tensorflowoptim": 216, "pytorchoptim": 216, "optimizer_registri": 216, "optimizer_typ": 216, "cross": [216, 263, 301, 562, 602], "tensorflowsgd": 216, "tensorflowadamw": 216, "tensorflow_addon": 216, "adamw": 216, "tensorflowadam": 216, "adam": [216, 604], "pytorchsgd": 216, "record_output": 218, "output_process": 218, "help": [218, 265, 361, 499, 569, 570, 576, 587, 602, 603], "get_activ": 218, "f": [221, 554, 556, 595, 599], "pickle_modul": 221, "pickle_protocol": 221, "_use_new_zipfile_seri": 221, "prepare_prun": 221, "opt": [221, 533, 575, 599], "tensorflowimagefold": 234, "qlinear2qdq": [249, 255, 293], "qlinearop": [250, 563, 578, 595], "check_model": 250, "modelproto": [250, 252, 302, 569], "onnx_qlinear_to_qdq": 250, "input_name_to_nod": 250, "destin": [250, 265], "tf_to_fp32_onnx": 251, "tf_to_int8_onnx": 251, "int8_model": [251, 252, 534], "update_weight_bia": 252, "fp32_onnx_path": [252, 253], "wegiht": 252, "set_data_typ": 252, "weight_typ": 252, "activation_typ": 252, "get_node_map": 252, "module_node_map": 252, "get_quantizable_onnx_op": 252, "quantize_nod": 252, "build_scale_map": 252, "int8_scale_info": 252, "scale_zp_dict": 252, "set_scale_info": 252, "int8_onnx_model": 252, "int8_onnx_path": 252, "recalculate_bia": 252, "recalcul": [252, 599], "remove_nodes_by_nam": 252, "sub_graph_with_int32_bia": 252, "a_info": 252, "b_info": 252, "bias_nam": 252, "int32": [252, 552], "nodeproto": 252, "_type_": 252, "qdq_fp32_bia": 252, "excut": 252, "qdq_int32_bia": 252, "qdq_fp32_bias_qdq": 252, "torch_to_fp32_onnx": 252, "do_constant_fold": 252, "verbos": [252, 317], "torch_to_int8_onnx": 252, "u8s8": 252, "optionl": 252, "onnx2numpy_dtyp": 253, "onnx_node_typ": 253, "dummydataread": 253, "dataread": 253, "achiev": [254, 291, 558, 566, 567, 590, 592, 593, 595, 600, 602], "across": [254, 264, 291, 302, 553, 567, 592, 599, 602], "variou": [254, 264, 291, 302, 563, 570, 594], "dl": [254, 264, 278, 283, 291, 302, 562, 574, 587, 593], "bring": [254, 291, 581, 595, 599], "unifi": [254, 291, 534, 551, 562, 563, 567, 569], "vari": [254, 278, 283, 291, 591, 599, 605], "roc": [254, 263, 278, 283, 291, 301], "flexibl": [254, 278, 283, 291, 554, 592], "via": [254, 278, 283, 291, 516, 528, 556, 563, 567, 570, 587, 592], "popular": [255, 293, 526, 533, 534, 554, 557, 558, 561, 567, 592, 595, 602, 603], "compress": [255, 278, 283, 293, 312, 334, 526, 533, 539, 554, 563, 567, 587, 589, 590, 592, 593, 595, 599, 603, 605], "techniqu": [255, 293, 526, 533, 563, 567, 570, 590, 592, 594, 595, 603, 604, 605], "bleu": [255, 257, 262, 293, 295, 300, 566], "bleu_util": [255, 262, 293, 300], "coco_label_map": [255, 262, 293, 300], "coco_tool": [255, 262, 293, 300], "evaluate_squad": [255, 262, 293, 300], "f1": [255, 260, 262, 263, 293, 298, 300, 301, 556, 566, 567, 598, 605], "basic_na": [255, 268, 293], "dyna": [255, 268, 293, 531, 563, 594], "nas_util": [255, 268, 293], "pruner_legaci": [255, 293], "gradient_sensit": [255, 274, 293], "group_lasso": [255, 274, 293], "pruning_recip": [255, 293], "tile_pattern": [255, 279, 280], "pytorch_prun": [255, 293], "logger": [255, 284, 293, 335, 338, 344, 480, 488], "prune_util": [255, 284, 293], "graph_optim": [255, 293, 420, 455, 459, 460, 480, 488, 504], "mixed_precis": [255, 293, 420, 455, 480, 488, 504, 567], "model_convers": [255, 293], "pruning_v2": [255, 293], "unicoderegex": [256, 294], "hoc": [256, 294], "hack": [256, 294], "recogn": [256, 294, 602], "nondigit_punct_r": [256, 294], "compil": [256, 294, 567, 591], "express": [256, 294, 528], "preced": [256, 294, 599], "digit": [256, 294, 593], "punct_nondigit_r": [256, 294], "symbol_r": [256, 294], "bleu_token": [256, 294], "mose": [256, 294], "smt": [256, 294], "mosesdecod": [256, 294], "mteval": [256, 294], "v14": [256, 294], "pl": [256, 294], "l954": [256, 294], "l983": [256, 294], "bilingu": [256, 294], "understudi": [256, 294], "qualiti": [256, 294], "machin": [256, 294, 359, 549, 558, 564, 573, 587, 593, 599, 600], "translat": [256, 257, 294, 295, 592, 602], "natur": [256, 294, 558], "approxim": [256, 257, 294, 295, 566], "glue": [256, 263, 294, 301, 552, 566, 567, 576], "word": [256, 294, 566, 592], "ngram": [256, 294, 566], "breviti": [256, 257, 294, 295, 566], "penalti": [256, 257, 294, 295, 566], "doe": [256, 294, 552, 566, 567, 597, 601], "beam": [256, 294, 566], "tensor2tensor": [257, 295], "bleu_hook": [257, 295], "compute_bleu": [257, 295], "reference_corpu": [257, 295], "translation_corpu": [257, 295], "max_ord": [257, 295], "use_bp": [257, 295], "against": [257, 295], "gram": [257, 295], "bleu_scor": [257, 295], "third": [259, 297, 549, 565], "parti": [259, 297, 565, 595], "pycocotool": [259, 297, 559, 564], "noth": [259, 297, 602], "thu": [259, 297, 567, 592, 595], "cannot": [259, 297, 487, 530, 558, 559, 568, 600], "jonathanhuang": [259, 297], "image_id": [259, 297, 566], "encod": [259, 297, 601], "invok": [259, 297], "groundtruth_dict": [259, 297], "exportgroundtruthtococo": [259, 297], "groundtruth_boxes_list": [259, 297], "groundtruth_classes_list": [259, 297], "max_num_class": [259, 297], "output_path": [259, 297], "detections_list": [259, 297], "exportdetectionstococo": [259, 297], "detection_boxes_list": [259, 297], "detection_scores_list": [259, 297], "detection_classes_list": [259, 297], "cocowrapp": [259, 297], "loadannot": [259, 297], "cocoevalwrapp": [259, 297], "agnostic_mod": [259, 297], "computemetr": [259, 297], "detection_typ": [259, 297], "bbox": [259, 297, 530, 566], "hold": [259, 297, 317, 552], "iou_typ": [259, 297], "iou_thr": [259, 263, 297, 301, 566], "map_point": [259, 263, 297, 301, 566], "cocoev": [259, 297], "mscoco": [259, 297], "Then": [259, 297, 549, 580, 582, 584, 585, 599, 602], "exportsingleimagegroundtruthtococo": [259, 297], "next_annotation_id": [259, 297], "category_id_set": [259, 297], "groundtruth_box": [259, 297], "groundtruth_class": [259, 297], "groundtruth_mask": [259, 297], "groundtruth_is_crowd": [259, 297], "ingest": [259, 297], "ones": [259, 297, 592], "exportsingleimagedetectionstococo": [259, 297], "uniqu": [259, 292, 297, 386, 387, 595], "assign": [259, 297, 344, 549, 556, 594], "drop": [259, 287, 297, 567, 568, 581, 592, 605], "num_gt_box": [259, 297], "num_detect": [259, 263, 297, 301, 566, 567, 604], "image_height": [259, 297], "image_width": [259, 297], "detection_mask": [259, 297], "crowd": [259, 297], "insid": [259, 297, 554, 555, 588, 592, 602], "exportsingleimagedetectionboxestococo": [259, 297], "detection_box": [259, 297, 567, 604], "detection_scor": [259, 297, 567, 604], "detection_class": [259, 297, 567, 604], "exporsingleimagedetectionboxestococo": [259, 297], "exportsingleimagedetectionmaskstococo": [259, 297], "allenai": [260, 261, 298, 299], "bi": [260, 261, 298, 299], "att": [260, 261, 298, 299], "flow": [260, 261, 298, 299, 530, 531, 567], "f1_score": [260, 261, 298, 299], "ground_truth": [260, 261, 298, 299], "ground": [260, 261, 298, 299], "truth": [260, 261, 298, 299], "metric_max_over_ground_truth": [260, 261, 298, 299], "metric_fn": [260, 261, 298, 299], "exact_match_scor": [260, 298], "exact": [260, 298], "averag": [260, 261, 263, 298, 299, 301, 566, 567, 602], "articl": [260, 261, 298, 299], "paragraph": [260, 261, 298, 299], "qa": [260, 261, 298, 299], "cantain": [260, 261, 298, 299], "normalize_answ": [261, 299], "extra": [261, 299, 567], "newlin": [261, 299], "tab": [261, 299, 397, 515, 587, 600], "harmon": [261, 263, 299, 301], "recal": [261, 263, 299, 301], "answer_start": [261, 299], "177": [261, 299], "denver": [261, 299], "bronco": [261, 299], "nfl": [261, 299], "team": [261, 299, 528, 596], "afc": [261, 299], "super": [261, 299, 531], "bowl": [261, 299], "50": [261, 299, 531, 599, 605], "56be4db0acb8001400a502ec": [261, 299], "form": [261, 299, 549, 554, 587], "percentag": [261, 299, 604], "tensorflowmetr": [263, 301], "maintain": [263, 301, 528, 529, 533, 569, 570, 582, 585, 592, 597], "pytorchmetr": [263, 301], "mxnetmetr": [263, 301], "onnxrtqlmetr": [263, 301], "onnxrtitmetr": [263, 301], "metric_registri": [263, 301], "metric_typ": [263, 301], "decorator_metr": [263, 301], "basemetr": [263, 301], "single_output": [263, 301], "hvd": [263, 301, 556], "wrappytorchmetr": [263, 301], "wrapmxnetmetr": [263, 301], "wraponnxrtmetr": [263, 301], "proport": [263, 301], "were": [263, 301, 573, 592], "pred_list": [263, 301], "pytorchloss": [263, 301], "mae": [263, 301, 566], "compare_label": [263, 301, 566], "actual": [263, 301, 556, 599], "rmse": [263, 301, 566, 602], "squar": [263, 301, 322, 566, 599, 602], "tensorflowtopk": [263, 301], "k": [263, 301, 566, 592], "among": [263, 301, 581, 599], "outcom": [263, 301], "num_correct": [263, 301], "num_sampl": [263, 301], "generaltopk": [263, 301], "cocomapv2": [263, 301, 566], "anno_path": [263, 301, 566], "map_kei": [263, 301], "detectionboxes_precis": [263, 301], "output_index_map": [263, 301, 566], "tensorflowmap": [263, 301], "tensorflowcocomap": [263, 301], "tensorflowvocmap": [263, 301], "squadf1": [263, 301, 566], "miou": [263, 301], "num_class": [263, 301], "21": [263, 301, 575, 576, 593, 599, 605], "iou": [263, 301], "intersect": [263, 301, 534, 566], "union": [263, 301, 334, 566], "onnxrtglu": [263, 301], "dlrm": [263, 301], "modelconvers": 265, "typic": [265, 292, 531, 533, 555, 557, 561, 592, 605], "basicna": 266, "model_build": [266, 269], "conf_fnam": 266, "nasbas": [269, 531], "nas_registri": 270, "nas_method": 270, "create_search_space_pool": 270, "idx": [270, 552], "enumer": [270, 334, 348, 449, 455, 481, 534, 554, 555, 556, 567, 590, 592, 600], "find_pareto_front": 270, "pareto": [270, 531], "front": [270, 531], "n_point": 270, "n_metric": 270, "n_pareto_point": 270, "gridsearch": 271, "grid": [271, 531], "whole": [271, 514, 549, 595], "randomsearch": 271, "42": [271, 591, 605], "bayesianoptimizationsearch": 271, "gradientsensitivityprun": 272, "pytorchmodel": [272, 273, 275, 276, 277, 311], "overwritten": [272, 273, 275, 276, 277, 575], "grouplassoprun": 273, "legaci": 274, "basicmagnitudeprun": 275, "lock": [276, 277, 563, 590, 592], "pruner_registri": 277, "clase": 277, "pruningconf": [278, 283], "tfpruningcallback": [278, 283], "input_model": [278, 283, 569, 600], "pure": [278, 283, 568, 592], "pattern_registri": 281, "pattern_typ": 281, "patternbas": 281, "mask_shap": [281, 282], "is_contigu": 281, "tile": 282, "tilepatternbas": 282, "tilepattern_1x1": 282, "1x1": [282, 554, 567, 592], "tilepattern_2x2": 282, "2x2": [282, 599], "tilepattern_1x16": 282, "1x16": 282, "tilepattern_4x1": 282, "tilepattern_1x2": 282, "1x2": [282, 599], "reset_non_value_to_default": 287, "obejct": 287, "parse_not_to_prun": 287, "update_frequency_on_step": [288, 594], "max_sparsity_ratio_per_lay": [288, 594], "magnitudeprun": 288, "snipprun": 288, "snipmomentumprun": 288, "moreoev": 288, "least": [289, 567, 592, 602], "templat": [289, 293, 480, 488, 549, 567, 592], "tree": [289, 329], "huggingface_model": 289, "eager": [289, 346, 454, 458, 466, 556, 563, 595, 596, 600, 605], "config_file_path": 289, "pruner_info": 289, "quantconf": [291, 302], "server": [292, 293, 420, 427, 479, 480, 487, 488, 496, 499, 510, 512, 514, 549, 587], "seper": 292, "opt_model": [292, 567], "fulli": [292, 567, 595, 599], "train_func": [292, 334, 556, 567, 595], "experiment": [293, 531, 552, 555, 556, 558, 567, 592, 594, 597, 601], "base_model": [293, 304], "keras_model": [293, 304], "mxnet_model": [293, 304], "nets_factori": [293, 304], "onnx_model": [293, 304], "tensorflow_model": [293, 304], "torch_model": [293, 304], "tuning_sampl": [293, 321, 327], "tuning_spac": [293, 321, 327, 328, 330], "tuning_struct": [293, 321, 327, 328, 329], "auto_mixed_precis": [293, 321], "collect_layer_histogram": [293, 338], "create_obj_from_config": [293, 338], "kl_diverg": [293, 338], "load_huggingfac": [293, 338, 567], "ux": 293, "config_gener": [293, 420, 480], "configuration_wizard": [293, 420, 480], "db_manag": [293, 420, 480], "file_brows": [293, 420, 480], "jobs_manag": [293, 420, 480], "model_zoo": [293, 420, 480], "names_mapp": [293, 420, 480], "profil": [293, 372, 379, 394, 396, 397, 420, 480, 481, 491, 514, 519], "manage_workspac": [293, 420, 480], "workload": [293, 359, 480, 488, 499, 514, 519, 520, 593], "except": [293, 332, 344, 480, 488, 499, 514], "executor": [293, 347, 480, 488], "expiring_dict": [293, 480, 488], "github_info": [293, 480, 488], "hw_info": [293, 480, 488], "json_seri": [293, 480, 488], "proc": [293, 480, 488], "status_upd": [293, 480, 488], "yaml_util": [293, 480, 488], "web": [293, 479, 480, 533, 549, 600], "servic": [293, 480, 513, 514, 533, 587, 591], "commun": [293, 480, 514, 516, 528, 549], "router": [293, 480, 514], "inc_bench": [293, 480, 549, 561], "eval_metr": [302, 313, 334, 595], "frozen": [302, 310, 313, 436, 439, 549, 569], "savedmodel": [302, 310, 313, 605], "chould": 302, "onnx_ml_pb2": [302, 569], "hybirdblock": [302, 313], "paramt": [302, 334], "_mixedprecis": 302, "basemodel": 303, "plai": [303, 592, 593, 599], "role": [303, 592, 599], "kerasmodel": [305, 438], "get_model_fwk_nam": 306, "fwk": 306, "mxnetmodel": 307, "net": 308, "factori": [308, 401, 420, 455, 471, 476, 480, 491, 495], "tfslimnetsfactori": 308, "onnxmodel": 309, "get_model_typ": [310, 429], "validate_graph_nod": 310, "validate_and_inference_input_output": 310, "input_tensor_nam": 310, "output_tensor_nam": 310, "graph_sess": 310, "graph_def_sess": 310, "frozen_pb_sess": 310, "load_saved_model": 310, "saved_model_tag": 310, "signatur": 310, "saved_model_dir": 310, "tag": [310, 499, 599, 600], "metagraphdef": 310, "keras_sess": 310, "slim_sess": 310, "checkpoint_sess": 310, "estimator_sess": 310, "saved_model_sess": 310, "tensorflowbasemodel": 310, "tensorflowsavedmodelmodel": 310, "tensorflowqatmodel": 310, "tensorflowcheckpointmodel": 310, "checkpoint": [310, 343, 569], "tensorflowmodel": [310, 440], "pytorchbasemodel": 311, "pytorchfxmodel": 311, "ipexmodel": 311, "driven": [312, 533, 567, 568, 587, 589, 600], "objective_registri": 312, "objective_custom_registri": 312, "obj_cl": 312, "eural_compressor": 312, "objective_cl": 312, "user_object": 312, "__class__": 312, "__name__": 312, "objective_cfg": 312, "usr_cfg": 312, "user_obj_cfg": 312, "easili": [312, 534, 571, 575, 587, 589, 592, 599], "peak": [312, 589], "multiobject": [312, 509], "metric_criterion": 312, "metric_weight": 312, "obj_criterion": 312, "obj_weight": 312, "is_measur": 312, "calib_func": [313, 596], "entir": [313, 334, 530, 592, 599], "autotunestrategi": 314, "stage": [314, 316, 323, 554, 600, 602], "polici": [314, 316, 322, 528, 533, 591, 604, 606], "automixedprecisiontunestrategi": 315, "basictunestrategi": 316, "bayesiantunestrategi": 317, "acq_max": 317, "ac": 317, "gp": 317, "y_max": 317, "n_warmup": 317, "10000": 317, "n_iter": 317, "acquisit": 317, "gaussian": [317, 602], "relev": 317, "limit": [317, 344, 533, 554, 592, 600], "acq": 317, "randomst": 317, "scipi": 317, "x_max": 317, "targetspac": 317, "pbound": 317, "9527": [317, 567, 604], "allow": [317, 516, 549, 554, 556, 566, 567, 568, 594, 602, 604], "bayesianoptim": 317, "conservativetunestrategi": 318, "o0": [318, 602], "who": [318, 528], "exhaustivetunestrategi": 319, "hawq_v2tunestrategi": 320, "made": [320, 534, 595, 597, 602], "impact": [320, 597, 602], "msetunestrategi": 322, "mse_v2tunestrategi": 323, "revert": [323, 331, 602], "randomtunestrategi": 324, "strategy_registri": [325, 602], "tunestrategi": [325, 602], "tuningsamplerregistri": 328, "tuningsampl": 328, "tuningord": 328, "Not": [328, 329, 344, 483, 531], "tuningspac": [328, 329], "tuning_order_lst": 328, "initial_op_tuning_cfg": 328, "modelwisetuningsampl": 328, "tuning_items_prior": 328, "op_dtype_dict": 328, "optuningconfig": [328, 329, 330], "optypewisetuningsampl": 328, "opwisetuningsampl": 328, "fallbacktuningsampl": 328, "op_dtyp": 328, "accumul": [328, 602], "skip_first": 328, "tuningitem": 329, "item_typ": 329, "get_op_mode_by_query_ord": 329, "query_ord": 329, "pattern_to_intern": 329, "default_dtyp": 329, "pattern_to_path": 329, "quant_mode_from_pattern": 329, "internal_pattern": 329, "initial_tuning_cfg_with_quant_mod": 329, "op_name_typ": 329, "step1": 329, "step2": 329, "complet": [329, 534, 549, 595, 602, 604, 605], "step3": 329, "step4": 329, "step5": 329, "op_quant_mod": 330, "ordereddefaultdict": 331, "extract_data_typ": 331, "data_typ": 331, "sign": [331, 529, 549, 595, 598], "reverted_data_typ": 331, "signed_flag": 331, "get_adaptor_nam": 331, "fun": 332, "attribute1": 332, "module_debug_level1": 332, "debug": [332, 341, 401, 402, 406, 549, 580, 584, 588, 602], "function1": 332, "param1": 332, "param2": 332, "parameter1": 332, "parameter2": 332, "o": [332, 408, 564, 572, 591, 599], "function2": 332, "pep": 332, "484": 332, "output_model": [332, 551, 567, 600], "function3": 332, "section": [332, 549, 554, 555, 587, 592, 594, 604], "restructuredtext": 332, "liter": 332, "attributeerror": 332, "generator1": 332, "example_gener": 332, "exampleclass": 332, "param3": 332, "public": [332, 528, 582, 585], "attr1": 332, "attr2": 332, "attr5": 332, "api_doc_exampl": 333, "loop": [334, 530, 531, 560, 598, 602], "compressionmanag": 334, "callbacks_list": 334, "uesd": 334, "deal": 334, "Such": 334, "distillationcallbback": 334, "on_train_begin": [334, 530, 554, 555, 567, 590, 592, 595], "train_loop": [334, 567, 590], "on_epoch_begin": [334, 337, 554, 555, 567, 590, 592], "on_step_begin": [334, 337, 554, 555, 567, 590, 592], "on_after_compute_loss": [334, 554, 555, 567, 590], "backward": [334, 554, 555, 556, 567, 590, 592, 595, 597], "on_before_optimizer_step": [334, 554, 555, 567, 590, 592], "on_step_end": [334, 337, 554, 555, 567, 590, 592], "on_epoch_end": [334, 337, 554, 555, 567, 590, 592], "on_train_end": [334, 554, 555, 567, 590, 592, 595], "path_to_sav": 334, "manag": [334, 337, 363, 398, 421, 482, 498, 561, 567, 570, 571, 581], "summari": [334, 549, 582, 585, 591, 600], "pruningconfig": 334, "orchestr": [334, 533, 563, 603], "layerhistogramcollector": 335, "layer_tensor": 335, "include_lay": 335, "get_func_from_config": 337, "func_dict": 337, "get_preprocess": 337, "get_metr": 337, "get_postprocess": 337, "get_algorithm": 337, "algo": 337, "create_dataset": 337, "cfg_preprocess": 337, "cfg_filter": 337, "create_dataload": 337, "dataloader_cfg": 337, "create_eval_func": 337, "postprocess_cfg": 337, "fp32_baselin": [337, 534], "baselin": [337, 598, 600], "create_train_func": 337, "train_cfg": 337, "Their": 337, "auxiliari": 338, "pretrain": [340, 570, 576], "optimizedmodel": 340, "from_pretrain": [340, 567], "save_for_huggingface_upstream": [340, 567], "output_dir": [340, 492, 567, 575, 576], "msg": 341, "fatal": 341, "warn": [341, 549], "warin": 341, "alia": [341, 572, 577], "is_int8_model": 343, "checkpoint_dir": 343, "history_cfg": 343, "best_configur": 343, "best_model_weight": 343, "pt": [343, 569, 593, 596], "snapshot": [343, 518], "cfg_from_fil": 344, "yaml_fil": [344, 552, 556, 566], "lazyimport": 344, "lazi": 344, "till": [344, 602], "decorat": 344, "time_limit": 344, "get_siz": [344, 499], "seen": [344, 534], "recurs": 344, "compute_spars": 344, "fault_tolerant_fil": 344, "equal_dict": 344, "d2": 344, "compare_kei": 344, "ignore_kei": 344, "ignor": [344, 552, 599], "cpuinfo": 344, "dump_elapsed_tim": [344, 534], "customized_msg": 344, "elaps": 344, "combine_histogram": 344, "old_hist": 344, "old": [344, 567, 597], "get_tensor_histogram": 344, "get_all_fp32_data": 344, "get_tuning_histori": 344, "tuning_history_path": [344, 468], "num": [344, 566], "str2arrai": 344, "dequantizeweight": 344, "weight_tensor": 344, "min_filter_tensor": 344, "max_filter_tensor": 344, "scale_info": 344, "captureoutputtofil": 344, "tmp_file_path": 344, "stream": 344, "sy": [344, 573], "stderr": 344, "captur": 344, "statist": 344, "header": [344, 559], "field_nam": 344, "output_handl": 344, "printer": 344, "global_st": 344, "load_data_from_pkl": 344, "pkl": 344, "dump_data_to_loc": 344, "show_memory_info": 344, "hint": 344, "project_data": [345, 452, 457, 461, 464, 467, 474], "benchmark_data": 345, "dataloaderinterfac": [345, 461, 474], "dataloader_data": [345, 461, 474], "parse_arg": [346, 454, 458, 463, 466, 472], "benchmark_mod": 346, "set_eager_execut": [346, 454, 458, 466], "request_id": [347, 450, 468, 469, 492], "asd": [347, 469], "benchmark_id": 347, "benchmark_result_upd": 347, "benchmark_result_update_pytorch_script": 347, "neural_coder_perform": 347, "neural_coder_tim": 347, "pytorch_script_bench_optim": 347, "command_line_of_script": 347, "pytorch_script_bench_original_model": 347, "execute_real_benchmark": 347, "project_detail": [347, 450, 469], "benchmark_detail": 347, "benchmark_model": [348, 420, 480], "execute_benchmark": [348, 420, 480], "benchmarkconfiggener": 349, "configgener": 350, "workload_directori": 350, "configuration_path": 350, "graphoptimizationconfiggener": 351, "benchmark_config_gener": [352, 420, 480], "graph_optimization_config_gener": [352, 420, 480], "mixed_precision_config_gener": [352, 420, 480], "profiling_config_gener": [352, 420, 480], "pruning_config_gener": [352, 420, 480], "quantization_config_gener": [352, 420, 480], "mixedprecisionconfiggener": 353, "profilingconfiggener": 354, "pruningconfiggener": 355, "quantizationconfiggener": 356, "configurationpars": 357, "parse_list_valu": 357, "required_typ": 357, "parse_multidim_list": 357, "dimension": 357, "normalize_string_list": 357, "string_list": 357, "bracket": 357, "miss": [357, 592, 595], "get_predefined_configur": 359, "update_config_to_machine_specif": 359, "configuration_pars": [360, 420, 480], "get_boundary_nod": [360, 420, 480], "get_configur": [360, 420, 480], "params_feed": [360, 420, 480], "pruning_config_pars": [360, 420, 480], "feeder": 361, "get_possible_valu": 361, "pruningconfigpars": 362, "bench": [363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 450, 479, 570], "dbmanag": 363, "database_loc": 363, "log_level": [363, 490], "benchmarkresult": 365, "fill_dictionari": [366, 368, 369, 371, 373, 376, 377, 382], "fill": [366, 368, 369, 371, 373, 376, 377, 382, 549, 587, 598, 601], "domainflavour": [369, 481], "db": [369, 397, 398], "benchmark_result": [372, 396, 420], "domain_flavour": [372, 396, 420, 426, 499], "optimization_typ": [372, 396, 420], "profiling_result": [372, 396, 420], "pruning_detail": [372, 396, 420], "tuning_detail": [372, 396, 420], "tuning_histori": [372, 396, 420, 455, 480], "optimizationtyp": [376, 481], "profilingresult": 379, "pruningdetail": 381, "tuningdetail": [383, 467], "tuninghistori": [384, 468], "benchmarkapiinterfac": 385, "before_delete_benchmark_entri": 385, "mapper": [385, 448, 449], "sqlite3": 385, "db_model": [385, 396, 420, 480], "datasetapiinterfac": 386, "set_database_vers": [386, 387], "version_num": [386, 387], "alembic_vers": [386, 387], "initialize_associ": [386, 387], "initialize_precision_optimization_types_associ": [386, 387], "search_in_list_of_dict_for_unique_valu": [386, 387], "list_of_dict": [386, 387], "search_in_list_of_dict": [386, 387], "diagnosisapiinterfac": 388, "dictionariesapiinterfac": 389, "dictonari": 389, "examplesapiinterfac": 390, "predefin": [390, 499], "benchmark_api_interfac": [391, 396, 420], "dataset_api_interfac": [391, 396, 420], "diagnosis_api_interfac": [391, 396, 420], "dictionaries_api_interfac": [391, 396, 420], "examples_api_interfac": [391, 396, 420], "model_api_interfac": [391, 396, 420], "optimization_api_interfac": [391, 396, 420], "profiling_api_interfac": [391, 396, 420], "project_api_interfac": [391, 396, 420], "modelapiinterfac": 392, "optimizationapiinterfac": 393, "profilingapiinterfac": 394, "projectapiinterfac": 395, "db_oper": [396, 420, 480], "params_interfac": [396, 420, 480], "modeladdparamsinterfac": 397, "datasetaddparamsinterfac": 397, "optimizationaddparamsinterfac": 397, "optimizationeditparamsinterfac": 397, "edit": [397, 528], "benchmarkaddparamsinterfac": 397, "benchmarkeditparamsinterfac": 397, "profilingaddparamsinterfac": 397, "profilingeditparamsinterfac": 397, "profilingresultaddparamsinterfac": 397, "tuninghistoryiteminterfac": 397, "tuninghistoryinterfac": 397, "diagnosisoptimizationparamsinterfac": 397, "update_dataloaders_param": 398, "framework_id": 398, "dataloaders_to_upd": 398, "framework_dataloaders_config": 398, "get_framework_dataloaders_config": 398, "get_framework_transforms_config": 398, "diagnosisfactori": 400, "onnx_diagnosi": [401, 420, 480], "onnxrt_diagnosi": [401, 402, 420], "tensorflow_diagnosi": [401, 420, 480], "op_detail": [401, 420, 480], "op_entri": [401, 420, 480], "onnxrtdiagnosi": 403, "opdetail": 404, "oppattern": 404, "pattern_data": 404, "opweight": 404, "weights_data": 404, "opactiv": 404, "op_activ": 404, "opentri": 405, "activation_min": 405, "activation_max": 405, "tensorflowdiagnosi": 407, "browser": [408, 549, 580, 584], "get_directory_entri": 408, "get_requested_path": 408, "request": [408, 420, 421, 422, 443, 444, 447, 468, 480, 511, 513, 516, 523, 549, 595], "get_non_hidden_directory_entri": 408, "create_dir_entri": 408, "direntri": 408, "create_file_entri": 408, "create_entri": 408, "is_directori": 408, "sort_entri": 408, "should_show_fil": 408, "should_show_only_model_fil": 408, "get_setting_valu": 408, "get_filter_valu": 408, "filter_requested_entri": 408, "filter_nam": 408, "is_directory_entri": 408, "is_model_or_directory_entri": 408, "shown": [408, 531, 549, 551, 554, 566, 567, 581, 589, 590, 599, 602], "is_dataset_or_directory_entri": 408, "brows": 409, "filesystem": [409, 499], "attribute_typ": 410, "expanded_group": 411, "reader": [414, 415, 420, 480], "graphread": 414, "onnxrt_read": [415, 417, 420], "tensorflow_read": [415, 417, 420], "collaps": [415, 420, 480, 549], "edg": [415, 420, 480, 601], "graph_read": [415, 420, 480], "highlight": [416, 530, 549], "groupnod": 416, "group_nam": 416, "onnxrtread": 418, "tensorflowread": 419, "jobs_control_queu": [420, 421, 480], "frozen_pb": [420, 427, 437], "meta_graph": [420, 427, 437], "model_type_gett": [420, 427, 480], "repositori": [420, 425, 427, 480, 486, 582, 585], "download_config": [420, 446, 480], "download_model": [420, 446, 480], "list_model": [420, 446, 480], "optimize_model": [420, 453, 455, 456, 459, 462], "neural_coder_optim": [420, 455, 480], "tune_model": [420, 455, 465], "execute_optim": [420, 455, 480], "tensorflow_profil": [420, 471, 480], "execute_profil": [420, 471, 480], "profile_model": [420, 471, 480], "job": [421, 495], "_jobscontrolqueu": 422, "queu": 422, "jobsmanag": 422, "_jobsmmanag": 423, "_job": 423, "get_default_path": 425, "getter": 429, "onnxrtmodel": 431, "remove_number_of_samples_from_shap": 431, "pytorchscriptmodel": 433, "modelrepositori": 434, "trust": [435, 549], "frozenpbmodel": 436, "metagraphmodel": 439, "metagraph": 439, "savedmodelmodel": 441, "get_input_shap": 442, "fix_dynamic_shap": 442, "get_available_model": 447, "check_vers": 447, "framework_vers": 447, "supported_vers": 447, "validate_model_list": 447, "model_list": 447, "get_framework_module_nam": 447, "framework_nam": [447, 487], "get_installed_framework": 447, "instal": [447, 556, 559, 561, 570, 572, 575, 578, 582, 585, 587, 588, 591, 606], "mappingdirect": 449, "namesmapp": 449, "execute_optimization_pytorch_script": 450, "optimization_id": 450, "execute_optimization_regular": 450, "parse_model_data_to_bench_nam": 450, "parse_log": 450, "optimization_detail": 450, "check_if_collect_tuning_histori": 450, "optimizationfactori": 451, "graphoptim": [452, 503], "optimization_data": [452, 457, 461, 464, 467], "dataset_data": [452, 457, 461, 464, 467], "optimize_graph": [454, 458], "optimize_graph_config": [454, 458], "optimize_pt_script": 460, "optimizationinterfac": 461, "optimization_workdir": 468, "watcher": 468, "send": [468, 511, 516, 529], "profiling_id": 469, "execute_real_profil": 469, "profiling_detail": 469, "profilerfactori": [470, 475], "load_profiling_detail": 472, "json_path": 472, "profiling_data": [474, 477], "delete_assign": 478, "wsgi": 479, "prepare_environ": 479, "app": [480, 514], "workdir": [480, 488, 496], "history_snapshot_pars": [480, 514, 519], "request_data_processor": [480, 514, 519], "response_gener": [480, 514, 519], "flavour": 481, "executionstatu": 481, "status": 481, "notfoundexcept": 483, "accessdeniedexcept": 483, "deni": 483, "clienterrorexcept": 483, "internalexcept": 483, "subject": [484, 511, 565], "send_respons": 484, "log_nam": 484, "additional_log_nam": [484, 492], "shell": [484, 492, 600], "expir": 485, "expiringdictitem": 485, "expires_at": 485, "expiringdict": 485, "initial_valu": 485, "ttl": 485, "120": [485, 599], "githubinfo": 486, "hw": 487, "hwinfo": 487, "respons": [487, 491, 498, 511, 516, 524, 595], "platform": [487, 533, 563, 570, 578, 593, 595, 605], "hardwar": [487, 529, 533, 534, 554, 563, 567, 568, 587, 591, 592, 593, 594], "get_number_of_socket": 487, "get_distribut": 487, "distibut": 487, "get_bios_vers": 487, "bio": [487, 591], "is_turbo_boost_en": 487, "turbo": [487, 591], "boost": [487, 568, 571, 587, 593], "get_kernel_vers": 487, "get_framework_info": 487, "get_framework_dependency_info": 487, "subdepend": 487, "jsonseri": 489, "serializ": 489, "change_log_level": 490, "optimizationpars": 491, "performancepars": 491, "accuracypars": 491, "benchmarkparserfactori": 491, "profilingpars": 491, "pid": 492, "ncprocess": 493, "aggreg": 493, "get_status_update_funct": 495, "job_typ": 495, "sent": 497, "deprec": [499, 582, 585, 601], "func": [499, 516, 595, 604], "signal": 499, "is_hidden": 499, "get_dataset_path": 499, "get_framework_from_path": 499, "get_file_extens": 499, "is_dataset_fil": 499, "get_predefined_config_path": 499, "normalize_domain": 499, "underscor": 499, "normalize_framework": 499, "normalize_str": 499, "string_to_norm": 499, "get_model_zoo_config_path": 499, "model_dict": 499, "get_model_zoo_model_path": 499, "check_modul": 499, "get_module_vers": 499, "mb": 499, "add_unit": 499, "load_model_config": 499, "load_dataloader_config": 499, "load_transforms_config": 499, "load_transforms_filter_config": 499, "meaning": [499, 567, 590], "load_precisions_config": 499, "load_pruning_details_config": 499, "get_default_pruning_config_path": 499, "load_model_wise_param": 499, "load_metrics_config": 499, "get_metrics_dict": 499, "load_help_nc_param": 499, "replace_with_valu": 499, "file_path": 499, "verify_file_path": 499, "determine_ip": 499, "ip": 499, "is_development_env": 499, "nc_mode": 499, "filter_transform": 499, "parse_bool_valu": 499, "release_tag": 499, "releas": [499, 533, 564, 576, 578, 580, 584, 586, 606], "get_shape_from_transform": 499, "shape_elements_ord": 499, "get_height_width_from_s": 499, "parse_to_string_list": 499, "parse_to_float_list": 499, "export_to_csv": 499, "csv": [499, 531, 549], "parse_vers": 499, "string_vers": 499, "are_archive_filenames_valid": 499, "archiv": 499, "malici": 499, "safe_extract_arch": 499, "zipfil": 499, "tarfil": 499, "destination_dir": 499, "member": [499, 528, 534], "safe": [499, 529], "labelbal": [501, 551, 552], "postprocessschema": 502, "sgdoptim": 507, "adamwoptim": 507, "adamoptim": 507, "crossentropylosscriterion": 507, "sparsecategoricalcrossentropycriterion": 507, "knowledgedistillationlosscriterion": 507, "weightcompressionapproach": 507, "parse_dict_value_to_float": 507, "parse_dict_value_to_int": 507, "wiseconfigdetail": 508, "wiseconfig": 508, "acccriterion": 509, "exitpolici": 509, "float_represent": 510, "dumper": 510, "pruner_represent": 510, "logic": [511, 604], "outsid": 511, "create_simple_respons": 511, "gui": [511, 516, 533, 549, 563, 564, 592, 603], "messagequeu": 511, "queue": [511, 516], "servicenotfoundexcept": 513, "unknown": 513, "connector": 515, "routingdefinit": 515, "rout": 515, "realtimeroutingdefinit": 515, "realtim": 515, "deferredroutingdefinit": 515, "separ": [515, 528, 549, 562, 565, 590, 594], "deferredsubprocessroutingdefinit": 515, "spawn": 515, "subprocess": 515, "get_model_graph": 515, "find_pattern_in_graph": 515, "get_system_info": 515, "endpoint": 516, "run_serv": 516, "webserv": 516, "get_tls_arg": 516, "tl": [516, 549], "block_ifram": 516, "werkzeug": 516, "ifram": 516, "csp": 516, "block_snif": 516, "mime": 516, "snif": 516, "require_api_token": 516, "author": [516, 565], "j": [516, 529, 533, 599, 605], "handle_api_cal": 516, "subpath": 516, "allow_api_cal": 516, "page_not_found": 516, "disable_cach": 516, "build_paramet": 516, "flask": [516, 549], "web_socket_publish": 516, "web_socket": 516, "flask_socketio": 516, "socketio": [516, 549], "benchmarkservic": 517, "historysnapshotpars": 518, "history_snapshot": 518, "provide_perform": 518, "modelservic": 520, "optimizationservic": 521, "profilingservic": 522, "processor": [523, 533, 568, 591, 593, 595, 596, 605], "requestdataprocessor": 523, "responsegener": 524, "workloadservic": 525, "welcom": [527, 528, 529, 533, 606], "interest": [528, 533, 600], "foster": 528, "particip": 528, "harass": 528, "experi": [528, 570, 598, 599, 602], "everyon": 528, "regardless": 528, "ag": 528, "bodi": 528, "ethnic": 528, "characterist": 528, "gender": 528, "educ": 528, "socio": 528, "econom": 528, "appear": [528, 549, 581, 587], "race": 528, "religion": 528, "sexual": 528, "orient": 528, "behavior": [528, 529, 534, 560, 569, 600, 602, 604], "contribut": [528, 533], "inclus": 528, "Being": 528, "respect": [528, 560, 592, 599, 604], "viewpoint": 528, "gracefulli": 528, "critic": 528, "focus": [528, 534], "empathi": 528, "toward": [528, 554], "unaccept": 528, "imageri": 528, "unwelcom": 528, "troll": 528, "insult": 528, "derogatori": 528, "comment": [528, 552, 566, 567, 601], "polit": 528, "attack": 528, "privat": 528, "publish": [528, 565, 568, 588, 599], "electron": 528, "explicit": 528, "permiss": 528, "inappropri": 528, "profession": 528, "clarifi": 528, "appropri": [528, 599], "fair": 528, "action": [528, 582, 585], "reject": 528, "commit": [528, 529], "wiki": 528, "issu": [528, 529, 532, 549, 564, 595, 600], "ban": 528, "temporarili": 528, "deem": 528, "threaten": 528, "offens": 528, "harm": 528, "mail": 528, "social": [528, 533, 593], "media": [528, 533, 593], "account": [528, 598, 602], "appoint": 528, "event": [528, 600], "abus": 528, "report": [528, 529, 549, 598], "contact": [528, 597, 598], "complaint": 528, "review": [528, 529], "investig": 528, "circumst": [528, 594], "oblig": 528, "confidenti": [528, 549], "regard": [528, 596], "incid": 528, "good": [528, 595, 602], "faith": 528, "face": [528, 533, 539, 570, 574, 593, 597], "repercuss": 528, "leadership": 528, "faq": [528, 533], "page": [528, 529, 533], "view": [529, 533, 549, 557, 578, 587, 597], "pylint": 529, "flake8": 529, "autopep8": 529, "cover": [529, 558, 562, 593], "would": [529, 567, 568, 592, 595, 599], "adopt": [529, 533, 570, 592, 593, 599], "certif": [529, 549], "agre": 529, "bug": 529, "jira": 529, "ticket": 529, "potenti": [529, 531], "risk": 529, "pr": [529, 566, 582, 585, 597], "reproduc": 529, "submit": [529, 593], "intend": 529, "collabor": [529, 572, 578], "adher": 529, "toolkit": [530, 533, 564, 570, 578, 593, 603], "tracer": 530, "resolv": [530, 532], "floatfunct": 530, "cat": [530, 573], "done": [530, 554, 555, 571, 587, 592, 595], "10004": [530, 531, 534, 551, 554, 555, 558, 560, 563, 568, 590, 594, 604], "neural_compressor": [530, 531, 533, 550, 551, 552, 554, 555, 556, 558, 561, 562, 566, 567, 568, 569, 589, 590, 592, 594, 595, 596, 597, 598, 599, 601, 602, 604], "eval": [530, 551, 570, 595, 600], "fail": 530, "conduct": [530, 567, 575, 587, 603], "imper": 530, "therefor": [530, 567, 592, 595, 597, 599], "lot": [530, 599], "As": [530, 549, 551, 554, 567, 581, 592, 602], "might": [530, 549, 602], "failur": 530, "successfulli": [530, 556, 593], "suggest": [530, 598], "traceabl": 530, "proxi": 530, "tutori": [530, 578, 593, 603], "prototyp": 530, "html": [530, 533, 582, 585], "untrac": 530, "ssd": [530, 605], "resnet34": [530, 605], "r34": 530, "bboxes_labels_scor": 530, "prob": 530, "45": [530, 599, 605], "max_output": 530, "zip": 530, "dbox": 530, "dlabel": 530, "dscore": 530, "decode_singl": 530, "autom": [531, 570, 587, 588, 599], "artifici": 531, "ann": 531, "par": 531, "outperform": 531, "hand": [531, 549], "propos": [531, 534, 554, 568, 592, 599], "lie": 531, "predictor": 531, "4x": [531, 595], "figur": [531, 580, 581, 584, 592], "popul": 531, "inner": 531, "evolutionari": 531, "cycl": 531, "until": [531, 602], "conclud": 531, "met": [531, 560, 568, 595, 600], "yet": [531, 549, 582, 585, 588], "simplest": [531, 573], "launcher": [531, 533, 554, 555, 578, 592, 603], "agent": 531, "nsga2": 531, "supernet": 531, "ofa_mbv3_d234_e346_k357_w1": 531, "acc": [531, 600, 605], "mac": [531, 588], "num_ev": 531, "250": 531, "results_csv_path": 531, "search_result": 531, "dataset_path": 531, "ilsvrc2012": 531, "aim": [531, 533, 570, 592, 599, 602, 603], "mobilenetv3": 531, "lt": [531, 552, 591, 605], "wmt": 531, "en": 531, "de": 531, "guidelin": [532, 533], "mainstream": [533, 603], "learn": [533, 534, 551, 552, 558, 562, 563, 564, 567, 568, 570, 572, 575, 576, 578, 581, 582, 585, 587, 592, 593, 595, 599, 600, 602, 603], "runtim": [533, 534, 535, 551, 557, 560, 563, 572, 577, 578, 594], "workflow": [533, 554, 564, 568, 582, 585, 600, 603], "particular": [533, 592], "wide": [533, 557, 568, 595, 605], "xeon": [533, 564, 565, 568, 591, 593, 595, 596, 605], "scalabl": [533, 564, 568, 591, 593, 595, 596, 605], "flex": [533, 564], "amd": [533, 563, 564, 605], "arm": [533, 563, 564, 605], "nvidia": [533, 563, 564, 592, 595, 605], "bloom": [533, 599], "176b": [533, 599], "7b": [533, 599], "stabl": [533, 549, 564, 593], "diffus": [533, 593, 605], "gpt": [533, 599, 605], "hub": [533, 557, 561, 578], "hug": [533, 593], "vision": [533, 558, 561, 574, 599], "coder": [533, 563, 571, 572, 575, 578, 581, 593], "cloud": [533, 593], "marketplac": [533, 588, 593], "googl": [533, 568, 593], "amazon": [533, 570, 578], "azur": [533, 593], "softwar": [533, 565, 568, 591, 592, 593, 597], "alibaba": [533, 577, 584, 585, 593], "tencent": [533, 593], "taco": [533, 593], "ai": [533, 570, 593, 596, 603], "ecosystem": [533, 593], "lightn": [533, 577], "pip": [533, 549, 556, 559, 561, 564, 572, 575, 580, 582, 584, 585, 597], "wget": [533, 559, 561], "storag": [533, 561, 566, 599], "googleapi": [533, 561], "v1_6": [533, 561], "mobilenet_v1_1": [533, 561], "0_224_frozen": [533, 561], "quick": [533, 560, 603, 604], "overview": 533, "notebook": [533, 603], "oneapi": [533, 564, 593, 603], "analyt": [533, 564, 593, 603], "jupyterlab": [533, 570, 576, 578, 580, 584, 603], "studio": [533, 578, 587, 603], "matrix": [533, 578, 599, 603], "topic": 533, "blog": [533, 593], "medium": [533, 593], "enhanc": [533, 570, 593, 596], "apr": [533, 593], "2023": [533, 599, 605], "still": [533, 567, 593, 595, 596], "mlperf": [533, 593, 605], "5x": [533, 593], "heterogen": [533, 593], "power": [533, 554, 567, 581, 591, 593], "mar": [533, 593], "busi": [533, 593], "jan": [533, 593], "neurip": [533, 593], "oct": [533, 593], "quala": [533, 593], "minilm": [533, 593, 605], "legal": [533, 606], "secur": [533, 591, 593, 606], "idea": [533, 592, 599, 602], "feel": 533, "look": [533, 534, 560, 566, 604], "bridg": [534, 563], "vanilla": [534, 563], "abcadaptor": 534, "__init__": [534, 551, 552, 566, 602], "query_fw_cap": 534, "query_fused_pattern": 534, "he": 534, "besid": [534, 554], "describ": [534, 549, 560, 600], "past": 534, "mainten": 534, "difficult": [534, 599], "abil": [534, 552, 560, 599], "modif": [534, 551, 560, 575], "fragment": 534, "granular": [534, 560, 563, 573, 592, 595, 599, 604], "semant": [534, 560], "mla": [534, 595], "becom": [534, 558], "explor": 534, "inspect_tensor": 534, "op_list": [534, 600], "iteration_list": 534, "inspect_typ": 534, "save_to_disk": 534, "quantization_cfg": 534, "set_tensor": 534, "tensor_dict": 534, "diagnosis_help": 534, "easier": [549, 580, 584, 587, 593], "nightli": [549, 564], "pypi": [549, 564, 582, 585], "conda": [549, 559, 564, 573, 581, 597], "forg": [549, 559, 564], "git": [549, 559, 564], "clone": [549, 564, 580, 584], "cd": [549, 556, 564], "setup": [549, 560, 564, 582, 585, 592], "instruct": [549, 554, 564, 568, 582, 585, 593, 594, 595], "ui": 549, "5000": 549, "338174d13706855fc6924cec7b3a8ae8": 549, "listen": 549, "firewal": 549, "8080": 549, "tf_enable_onednn_opt": [549, 564], "cert": 549, "path_to_cert": 549, "crt": 549, "path_to_private_kei": 549, "encrypt": 549, "insecur": 549, "expos": 549, "forfeit": 549, "client": 549, "extern": 549, "threat": 549, "button": [549, 563, 581, 587], "click": [549, 561, 563, 570, 571, 578, 581, 587, 593, 600], "pop": [549, 587], "recognit": [549, 556, 558, 592, 600], "few": [549, 593, 602], "finish": [549, 581], "chosen": 549, "synthet": 549, "plu": 549, "icon": 549, "unfold": 549, "On": [549, 595], "panel": [549, 582, 585, 587], "navig": 549, "previou": [549, 567, 592, 597, 599, 600, 602, 603], "trash": 549, "visibl": 549, "cursor": 549, "prompt": [549, 556], "confirm": 549, "bottom": 549, "pencil": 549, "light": [549, 555], "blue": 549, "color": 549, "That": 549, "row": [549, 592, 599], "arrow": 549, "line": [549, 556, 563, 570, 575, 576, 592, 600], "checkbox": 549, "column": [549, 592, 599], "chart": [549, 595, 598, 600], "offer": [549, 552], "conveni": [549, 567], "variat": 549, "pictur": 549, "yellow": 549, "remind": 549, "ofa": 549, "fvcore": 549, "autograd": 549, "pymoo": 549, "numba": 549, "ilsvrc": 549, "hour": [549, 602], "One": [549, 552, 556, 563, 592, 593, 602], "dialog": 549, "organ": [549, 604], "cryptographi": 549, "linux": [550, 559, 581, 587], "window": [550, 587, 588], "x86_64": 550, "aarch64": 550, "often": [551, 554, 590, 592], "encount": 551, "consum": 551, "previous": 551, "lack": [551, 559], "faster": [551, 553, 593, 602, 605], "treat": 551, "manner": [551, 554, 569], "300": [551, 552], "input_data": 551, "customis": [551, 552], "ensp": [552, 566, 601], "imagerecord": [552, 556, 604], "image_nam": 552, "cocorecord": 552, "gt": [552, 558, 601], "int64": 552, "style_transf": 552, "content": 552, "tfrecorddataset": 552, "helloworld": [552, 601], "aid": 553, "deploy": [553, 570, 587, 599], "infrastructur": 553, "expens": [554, 567, 602], "deploi": [554, 567, 602], "mobil": [554, 567, 605], "produc": 554, "logit": 554, "softmax": 554, "l": [554, 600, 602], "kd": 554, "distanc": 554, "euclidean": 554, "kullback": 554, "leibler": 554, "patient": 554, "compact": [554, 567, 573, 592], "agnost": 554, "resourc": [554, 592, 602], "convolut": [554, 592, 593], "ia": 554, "attach": [554, 567, 599], "shallow": 554, "depth": [554, 596], "deepest": 554, "deeper": 554, "10006": [554, 555], "student_output": [554, 555], "student_loss": [554, 555], "training_func_for_nc": [554, 555], "distil_loss_conf": 554, "accordingli": [554, 578], "promis": [555, 567, 592], "huge": 555, "heavi": 555, "booster": 555, "degrad": [555, 602], "incorpor": [555, 602], "novel": [555, 570, 581, 587], "place": [555, 564, 592, 600], "illustr": 555, "comb": 555, "distillation_criterion": [555, 567, 590], "q_conf": 555, "horovod": 556, "builtin": 556, "program": [556, 565, 568, 570, 587], "addition": [556, 602], "enable_eager_execut": 556, "yaml_file_path": 556, "pre_process": 556, "simpli": [556, 569, 570, 572, 575, 587], "evaluation_result": 556, "evaluation_time_cost": 556, "partit": 556, "distributedsampl": 556, "train_sampl": 556, "train_dataset": [556, 595], "num_replica": 556, "rank": 556, "train_load": 556, "train_kwarg": 556, "adadelta": 556, "distributedoptim": 556, "named_paramet": 556, "broadcast_paramet": 556, "root_rank": 556, "broadcast_optimizer_st": 556, "set_epoch": 556, "batch_idx": 556, "zero_grad": [556, 567, 592], "nll_loss": 556, "log_interv": 556, "0f": 556, "tloss": 556, "6f": 556, "dry_run": 556, "test_func": 556, "host": 556, "num_of_process": 556, "002": 556, "ssh": [556, 587], "readm": 556, "exactli": [556, 571], "resnet50_v1": [556, 567], "topk": [556, 566, 567, 595], "32": [556, 562, 591, 592, 599, 605], "resizecropimagenet": [556, 601], "realiz": [556, 566, 589, 596, 598], "tow": 556, "node1": 556, "node2": 556, "TO": [556, 572], "your_node1_nam": 556, "your_node2_nam": 556, "resnet50_fp32_pretrained_model": 556, "nc_resnet50_v1": 556, "resnet": [556, 561, 605], "varieti": [557, 594, 602], "demonstr": [557, 570, 592, 600], "10k": [557, 561], "speedup": [557, 563, 595], "2x": [557, 563, 591], "vnni": [557, 563, 594, 595], "exchang": 558, "howev": [558, 592, 599], "hope": 558, "briefli": [558, 567, 592, 599], "matur": 558, "major": [558, 562, 595, 599], "reus": 558, "inc_model": [558, 569], "fp32_onnx_config": 558, "verifi": 558, "gap": [558, 569], "matmulintegertofloat": 558, "matmulinteg": 558, "toolchain": 559, "bare": 559, "metal": 559, "sudo": [559, 573], "apt": [559, 564, 573, 581], "python3": 559, "dev": [559, 580, 584], "distutil": 559, "essenti": 559, "libgl1": 559, "mesa": 559, "glx": 559, "libglib2": 559, "numactl": [559, 573, 581], "ln": 559, "sf": 559, "usr": 559, "incompat": 559, "88": [559, 598, 605], "80": [559, 599, 600, 605], "pyobject": 559, "reinstal": 559, "importerror": 559, "libgl": 559, "No": [559, 567, 591, 593], "yum": [559, 564], "opencv": [559, 581], "pend": 559, "27": [559, 564, 605], "alemb": [559, 564], "friendli": [560, 567, 599, 604], "dive": [560, 603], "unless": 560, "purpos": [560, 568, 587, 594, 595], "let": [560, 575, 594, 604], "syntax": 560, "go": [560, 582, 585, 594, 601], "up1": 560, "up2": 560, "valid_mixed_precis": 560, "per_tensor": [560, 595, 604], "addn": 560, "grappler_optim": 560, "constfold": 560, "arithmet": 560, "debug_stripp": 560, "jupyt": [561, 578, 580, 581, 584], "lab": [561, 580, 581, 582, 584, 585], "concept": [562, 598, 603], "rather": 562, "custom_metr": 562, "refin": [562, 592], "These": 563, "broad": [563, 576, 603], "420": 563, "geomean": 563, "snippet": 563, "upload": [563, 582, 585], "dispatch": 563, "qintegerop": [563, 595], "plan": 563, "success": 564, "re": [564, 587], "uninstal": [564, 587], "frequent": 564, "ask": 564, "consolid": 564, "latest": [564, 593, 597], "eas": [564, 572, 593], "along": 564, "streamlin": 564, "scienc": 564, "mani": [564, 602, 604], "websit": 564, "anaconda": 564, "suit": [564, 588, 600], "esri": 564, "formerli": 564, "skylak": 564, "cascad": 564, "lake": [564, 568, 593], "cooper": [564, 568, 593], "ic": [564, 592, 593], "sapphir": 564, "rapid": 564, "hbm": 564, "arctic": 564, "sound": 564, "pont": 564, "vecchio": 564, "cento": 564, "ubuntu": [564, 591], "04": [564, 591, 605], "fortensorflow": 564, "forpytorch": 564, "onednn": [564, 595], "newer": 564, "copyright": 565, "accompani": 565, "research": [565, 599], "wish": 565, "bibtex": 565, "misc": 565, "feng": 565, "tian": 565, "hanwen": 565, "haihao": [565, 592], "shen": [565, 592], "suyu": 565, "chen": 565, "titl": [565, 588], "howpublish": 565, "year": 565, "logo": [565, 591], "atom": 565, "phi": 565, "pentium": 565, "vtune": 565, "corpor": [565, 591], "subsidiari": [565, 591], "brand": [565, 591], "claim": [565, 591], "popularli": 566, "industri": [566, 593], "label_map": 566, "decis": 566, "ap": 566, "curv": 566, "turn": [566, 581], "target_boxes_num": 566, "str_label": 566, "int_label": 566, "inturn": 566, "cocomap": 566, "vocmap": 566, "categor": 566, "multiclass": 566, "multilabel": 566, "multi_metr": 566, "newmetr": 566, "reset": 566, "reflect": [566, 591, 601], "deliv": [567, 593], "upgrad": 567, "veri": [567, 588, 595, 602], "speed": [567, 578, 592, 593, 595, 602], "fundament": 567, "comprehens": [567, 603], "kind": 567, "resort": 567, "automodelforsequenceclassif": 567, "autotoken": 567, "val_dataset": [567, 595], "val_dataload": [567, 595], "worker": [567, 595], "ping_memori": [567, 595], "formul": 567, "effort": 567, "written": 567, "onnxrt_integ": [567, 604], "onnxrt_qlinear": [567, 604], "unsupport": 567, "image_tensor": [567, 604], "post_training_dynamic_qu": [567, 594, 602], "1000": [567, 604], "2000": 567, "sampling_s": [567, 604], "model_wis": [567, 604], "op_dict": 567, "op_wis": [567, 600, 604], "sigopt_api_token": [567, 598, 602], "sigopt_project_id": [567, 598, 602], "sigopt_experiment_nam": [567, 598, 602], "demo": 567, "600": [567, 605], "training_arg": 567, "emul": [567, 595], "trainer": [567, 578], "similar": [567, 594, 599, 602, 604], "maxim": [567, 592, 602], "pruning_func": 567, "num_train_epoch": [567, 592], "train_dataload": [567, 592, 595], "n_gpu": 567, "gradient_accumulation_step": 567, "clip_grad_norm_": 567, "max_grad_norm": 567, "rate": [567, 592, 595], "start_epoch": [567, 594, 604], "end_epoch": [567, 594, 604], "97": [567, 599, 605], "newli": [567, 592], "on_after_optimizer_step": [567, 592], "layer3": [567, 592], "layer2": [567, 592, 595], "lr_schedul": [567, 592], "weight_decai": [567, 604], "0004": 567, "nesterov": [567, 604], "randomresizedcrop": [567, 601], "totensor": [567, 601], "485": 567, "456": 567, "406": 567, "nepoch": 567, "cnt": 567, "loss_sum": 567, "iter_bar": 567, "tqdm": 567, "desc": 567, "teacher_logit": 567, "train_fun": 567, "training_func": 567, "recent": [567, 568], "growth": [567, 568, 592], "complex": [567, 568, 592], "significantli": [567, 568, 592, 602], "bandwidth": [567, 568], "exit_polici": [567, 604], "determinist": 567, "arbitrari": [567, 590], "reli": [567, 599], "prune_conf": 567, "quantization_aware_training_conf": 567, "aforement": 567, "inset": 567, "p_conf": [567, 590], "ssd_mobilenet_v1": 567, "benchmarkconf": 567, "half": [568, 578], "sixteen": 568, "launch": [568, 588], "3rd": [568, 593, 595, 596], "gen": [568, 593, 596], "codenam": 568, "x86": 568, "avx512": [568, 595], "vcvtne2ps2bf16": 568, "vcvtneps2bf16": 568, "vdpbf16p": 568, "consequ": 568, "avx512_bf16": 568, "cuda": [568, 570, 572, 595], "persist": 569, "brought": [569, 571, 578, 595], "tf2": 569, "h5": 569, "hybridblock": 569, "0000": 569, "saved_result": 569, "simplifi": [570, 581, 587], "subsequ": [570, 587], "acquir": 570, "analysi": [570, 587, 598], "heurist": [570, 587], "rule": [570, 592], "great": 570, "facilit": 570, "autocast": 570, "simultan": [570, 590, 594], "my_model": 570, "no_grad": 570, "memory_format": 570, "112": [570, 605], "rand": [570, 599], "plugin": [570, 588], "aw": [570, 578, 593, 605], "sagemak": [570, 578], "inlin": [570, 575, 578], "neural_cod": [570, 572, 574, 575, 576, 578], "superbench": 570, "enjoi": [571, 575, 578], "caus": [571, 592], "rebuild": [571, 580, 584], "reload": [571, 588], "modern": 572, "democrat": [572, 593], "programm": [572, 578, 587], "nano_bf16_channels_last": 572, "resnet18": [572, 605], "nano_bf16_ipex_channels_last": 572, "nano_bf16_ipex": 572, "nano_bf16": 572, "nano_fp32_channels_last": 572, "nano_fp32_ipex_channels_last": 572, "nano_fp32_ipex": 572, "nano_gpu_to_cpu": 572, "nano_int8": 572, "nano_jit_bf16_channels_last": 572, "nano_jit_bf16_ipex_channels_last": 572, "nano_jit_bf16_ipex": 572, "nano_jit_bf16": 572, "nano_jit_fp32_channels_last": 572, "nano_jit_fp32_ipex_channels_last": 572, "nano_jit_fp32_ipex": 572, "nano_jit_fp32": 572, "nano_onnxruntime_fp32": 572, "nano_onnxruntime_int8_qlinear": 572, "openvino": 572, "nano_openvino_fp32": 572, "nano_openvino_int8": 572, "bc": [573, 581], "conda_prefix": 573, "echo": 573, "tradit": [573, 592], "libjemalloc": 573, "libiomp5": 573, "home": 573, "lib": 573, "ld_preload": 573, "malloc_conf": 573, "oversize_threshold": 573, "background_thread": 573, "metadata_thp": 573, "dirty_decay_m": 573, "9000000000": 573, "muzzy_decay_m": 573, "kmp_affin": 573, "kmp_blocktim": 573, "dnnl_primitive_cache_capac": 573, "cpufreq": 573, "scaling_governor": 573, "powersav": 573, "tee": 573, "pytorch_jit_script": [574, 577], "pytorch_channels_last": [574, 577], "run_bench": 574, "patch": [574, 587], "patch_path": 574, "your_patch_path": 574, "sweep": 574, "sweep_object": 574, "bench_config": 574, "bench_featur": 574, "sai": 575, "run_glu": [575, 576], "requisit": 575, "task_nam": [575, 576], "do_ev": [575, 576], "remain": 575, "itself": 575, "run_glue_optim": 575, "static_ipex": 575, "auto_qu": 576, "v4": [576, 605], "albert": [576, 605], "sst2": 576, "alexnet": [576, 605], "pytorch_amp": 577, "optimize_for_infer": 577, "pytorch_jit_trac": 577, "pytorch_jit_script_ofi": 577, "pytorch_jit_trace_ofi": 577, "torchdynamo": 577, "pytorch_torchdynamo_jit_script": 577, "pytorch_torchdynamo_jit_trac": 577, "pytorch_torchdynamo_jit_script_ofi": 577, "pytorch_torchdynamo_jit_trace_ofi": 577, "pytorch_inc_bf16": 577, "pytorch_inc_static_quant_fx": 577, "pytorch_inc_static_quant_ipex": 577, "pytorch_inc_dynamic_qu": 577, "pytorch_ipex_fp32": 577, "pytorch_ipex_bf16": 577, "pytorch_ipex_int8_static_qu": 577, "pytorch_ipex_int8_dynamic_qu": 577, "blade": 577, "disc": 577, "pytorch_aliblad": 577, "pytorch_lightning_bf16_cpu": 577, "tensorflow_amp": 577, "keras_amp": 577, "tensorflow_inc": 577, "keras_inc": 577, "onnx_inc_static_quant_qlinear": 577, "onnx_inc_static_quant_qdq": 577, "onnx_inc_dynamic_qu": 577, "optimum": [577, 578], "pytorch_inc_huggingface_optimum_stat": 577, "pytorch_inc_huggingface_optimum_dynam": 577, "intel_extension_for_transform": 577, "bigdl": [577, 578], "nano": [577, 578], "nano_": 577, "inc_auto": 577, "delight": 578, "announc": 578, "v": [578, 587, 602, 604], "500": 578, "innov": [578, 593, 603], "isa": 578, "xpu": 578, "delta": 578, "acc_delta": 578, "int8_acc": 578, "fp32_acc": 578, "ext": [580, 582, 584, 585, 586], "nodej": [580, 584], "jlpm": [580, 584], "pin": [580, 584], "yarn": [580, 584], "npm": [580, 581, 584], "lieu": [580, 584], "labextens": [580, 581, 584], "typescript": [580, 584], "watch": [580, 584], "termin": [580, 581, 584], "immedi": [580, 584, 592], "refresh": [580, 584], "wait": [580, 584, 587], "rebuilt": [580, 584], "symlink": [580, 584], "down": 581, "enter": [581, 587], "blank": 581, "cell": 581, "gain": [581, 590, 593], "mkl": 581, "jemalloc": 581, "pip3": 581, "headless": 581, "pyproject": [582, 585], "toml": [582, 585], "twine": [582, 585], "whl": [582, 585], "dist": [582, 585], "sdist": [582, 585], "bdist_wheel": [582, 585], "frontend": [582, 585], "login": [582, 585, 598], "cut": [582, 585], "fork": [582, 585], "admin_github_token": [582, 585], "pypi_token": [582, 585], "npm_token": [582, 585], "secret": [582, 585], "draft": [582, 585], "changelog": [582, 585, 586], "pkg": [582, 585], "bot": [582, 585], "pick": [582, 585, 588], "feedstock": [582, 585], "hatch": 585, "notabl": 586, "vscode": [586, 588], "daili": 587, "give": [587, 602], "advantag": [587, 592, 594, 602], "remot": 587, "market": 587, "upper": 587, "sidebar": 587, "hover": 587, "track": [587, 598], "argpars": 587, "diff": 587, "manifest": 588, "declar": 588, "palett": 588, "registercommand": 588, "amodio": 588, "tsl": 588, "matcher": 588, "dbaeumer": 588, "eslint": 588, "press": 588, "f5": 588, "ctrl": [588, 605], "cmd": 588, "hello": 588, "world": 588, "breakpoint": 588, "consol": 588, "relaunch": 588, "toolbar": 588, "node_modul": 588, "viewlet": 588, "dropdown": 588, "runner": 588, "startup": 588, "bundl": 588, "multi_object": 589, "benefit": [590, 592], "instanti": 590, "platinum": [591, 605], "8358": 591, "manufactur": 591, "m50cyp2sbstd": 591, "se5c620": 591, "86b": 591, "0005": 591, "2202160810": 591, "microcod": 591, "0xd000332": 591, "irq": 591, "60ghz": 591, "6chz": 591, "perf": 591, "512gb": 591, "16x32gb": 591, "ddr4": 591, "3200": 591, "mt": 591, "nic": 591, "1x": 591, "ethernet": 591, "100mb": 591, "i350": 591, "gigabit": 591, "drive": 591, "intel_ssdsckkb48": 591, "447": 591, "1g": 591, "publicli": 591, "degre": 591, "mark": 591, "trademark": 591, "art": 592, "increasingli": 592, "crucial": 592, "salient": 592, "nonzero": 592, "irregular": 592, "anywher": 592, "2in4": 592, "amper": 592, "delet": 592, "due": [592, 595, 599, 600], "oc": 592, "kh": 592, "kw": 592, "shrink": 592, "examin": 592, "lowest": [592, 602], "fastform": 592, "formula": [592, 599], "emsp": 592, "partial": [592, 595], "downstream": 592, "co": 592, "discourag": 592, "push": [592, 599], "penal": 592, "parameter": 592, "exemplifi": 592, "complement": 592, "pruner1": 592, "pruner2": 592, "mention": 592, "readi": 592, "hesit": 592, "sst": [592, 605], "flan": 592, "t5": 592, "english": 592, "romanian": 592, "yolov5": 592, "signific": [592, 593, 595, 599], "reduct": [592, 604], "namhoon": 592, "lee": 592, "thalaiyasingam": 592, "ajanthan": 592, "philip": 592, "torr": 592, "2019": 592, "zafrir": 592, "ofir": 592, "ariel": 592, "larei": 592, "boudoukh": 592, "mosh": 592, "wasserblat": 592, "preprint": [592, 599], "2111": 592, "05754": 592, "2021": 592, "amx": 593, "4th": 593, "mleffici": 593, "dec": 593, "wechat": 593, "deepen": 593, "foundat": 593, "intellig": 593, "vmware": 593, "virtual": 593, "applianc": 593, "bitnami": 593, "nov": 593, "sota": 593, "plug": 593, "twitter": 593, "linkedin": 593, "zone": 593, "land": 593, "gcp": 593, "pat": 593, "keynot": 593, "intelon": 593, "sep": 593, "chines": 593, "aug": 593, "purif": 593, "sacrif": 593, "jun": 593, "partner": 593, "feb": 593, "joint": 593, "msft": 593, "bilibili": 593, "gestalt": 593, "ml": 593, "doubl": 593, "reconstruct": 593, "abound": 593, "lpot": [593, 597], "nextplatform": 593, "cern": 593, "gan": 593, "3dgan": 593, "iml": 593, "workshop": 593, "asplo": 593, "18": [593, 605], "highli": 593, "intelcaff": 593, "aris": 594, "tell": 594, "henc": 594, "onnxrt_qoper": 594, "quant_aware_train": 594, "weight_compress": [594, 604], "initial_spars": [594, 604], "prune_typ": [594, 604], "basic_magnitud": [594, 604], "update_frequ": 594, "prune_domain": 594, "tile_pattern_1x1": 594, "invent": 595, "int4": 595, "cost": 595, "theoret": 595, "affin": 595, "zeropoint": 595, "asymmetr": [595, 602], "255": [595, 599], "overflow": 595, "solv": [595, 597], "fbgemm": 595, "unseen": 595, "enough": 595, "peopl": 595, "mimic": 595, "fact": 595, "ultim": 595, "pain": 595, "lossi": 595, "understand": [595, 600, 603], "philosophi": 595, "neither": 595, "nor": 595, "val_load": 595, "top1": [595, 605], "avg": 595, "themselv": 595, "tensorrtexecutionprovid": 595, "cudaexecutionprovid": 595, "ON": 596, "forc": 596, "postposttrainingquantconfig": 596, "bf16wrapper": 596, "retrac": 596, "site": 597, "assist": 597, "comparison": [597, 600], "sed": 597, "your_script": 597, "backbon": 598, "interact": 598, "sigopt_experiment_id": 598, "nc": [598, 602], "certain": 598, "suffici": 598, "ordinari": 598, "capac": 598, "receiv": 598, "latenc": [598, 602], "draw": [598, 602], "mobilenet": [598, 605], "durat": 598, "8266": 598, "8372": 598, "2132": 598, "83": [598, 599, 605], "7495": 598, "8299": 598, "8294": 598, "85": [598, 599, 605], "0837": 598, "8291": 598, "4469": 598, "llm": 599, "gigant": 599, "systemat": 599, "outlier": 599, "quantif": 599, "difficulti": 599, "mathemat": 599, "allevi": 599, "coarsest": 599, "finer": [599, 602], "matric": 599, "similarli": 599, "finest": 599, "consumpt": 599, "why": [599, 600], "suppos": 599, "6839": 599, "4741": 599, "7451": 599, "9301": 599, "1742": 599, "6835": 599, "frac": 599, "q_min": 599, "q_max": 599, "clip": 599, "zp": 599, "q_x": 599, "clamp_": 599, "round_": 599, "w_q": 599, "00296431384049356": 599, "59": [599, 605], "172": 599, "192": 599, "w_dq": 599, "1220": 599, "0500": 599, "1430": 599, "2570": 599, "1890": 599, "mseloss": 599, "1983354538679123": 599, "6848": 599, "4743": 599, "7440": 599, "9308": 599, "1749": 599, "385297635664756e": 599, "affect": 599, "quantize_per_channel": 599, "x_tmp": 599, "detach": 599, "keepdim": 599, "divid": [599, 602], "dequantize_per_channel": 599, "0029": [599, 605], "0036": 599, "162": [599, 605], "48": [599, 605], "72": [599, 605], "93": [599, 605], "207": [599, 605], "139": [599, 605], "6837": 599, "4734": 599, "1751": 599, "6821": 599, "637690492221736e": 599, "6376e": 599, "3852e": 599, "cdot": 599, "quantize_per_tensor_absmax": 599, "n_bit": 599, "div_": 599, "0806": 599, "7589": 599, "6038": 599, "3815": 599, "5040": 599, "7174": 599, "5444": 599, "5826": 599, "7772": 599, "5555": 599, "3740": 599, "3253": 599, "0698": 599, "1381": 599, "5972": 599, "0086": 599, "0737": 599, "8298": 599, "6883": 599, "2991": 599, "1601": 599, "6506": 599, "8246": 599, "3924": 599, "3845": 599, "8768": 599, "w_scale": 599, "x_q": 599, "x_scale": 599, "84": [599, 605], "0059755356051027775": 599, "89": [599, 605], "119": [599, 605], "57": [599, 605], "91": [599, 605], "006533813662827015": 599, "y_q": 599, "17509": 599, "7608": 599, "4055": 599, "16599": 599, "21020": 599, "10016": 599, "9860": 599, "22444": 599, "y_dq": 599, "6836": 599, "2970": 599, "1583": 599, "6481": 599, "8207": 599, "3911": 599, "3850": 599, "8763": 599, "prove": 599, "simplic": 599, "middl": 599, "denot": 599, "fp1": 599, "fp2": 599, "subsect": [599, 604], "explain": 599, "suppress": 599, "straightforward": 599, "intuit": 599, "x1": [599, 602], "x2": [599, 602], "larger": 599, "herebi": 599, "sq": 599, "torchscript": 599, "overhead": 599, "stai": 599, "hardtanh": 599, "t5norm": 599, "llamanorm": 599, "groupnorm": 599, "lambada": 599, "sweet": 599, "spot": 599, "region": 599, "bigscienc": 599, "560m": 599, "65": [599, 605], "63": [599, 605], "44": [599, 605], "66": [599, 605], "76": [599, 605], "1b7": 599, "71": [599, 605], "43": [599, 605], "67": [599, 605], "78": [599, 601, 605], "56": [599, 605], "58": [599, 605], "55": [599, 605], "3b": 599, "73": [599, 605], "69": [599, 605], "74": [599, 605], "7b1": 599, "77": [599, 605], "75": [599, 605], "46": [599, 605], "82": [599, 605], "facebook": 599, "125m": 599, "70": [599, 605], "94": [599, 601, 605], "79": [599, 600, 605], "60": [599, 605], "25": [599, 605], "81": [599, 605], "26": [599, 605], "39": [599, 605], "68": [599, 601, 605], "eleutherai": 599, "6b": 599, "96": [599, 605], "jason": 599, "wei": 599, "emerg": 599, "transact": 599, "yvinec": 599, "edouard": 599, "proceed": 599, "cvf": 599, "winter": 599, "xiui": 599, "2209": 599, "13325": 599, "xiao": 599, "guangxuan": 599, "2211": 599, "10438": 599, "discov": 600, "valuabl": 600, "instrument": 600, "writer": 600, "_pre_eval_hook": 600, "_post_eval_hook": 600, "submodul": 600, "whitelist": 600, "_recordingobserv": 600, "output_tensors_dict": 600, "current_it": 600, "get_tensor_valu": 600, "_observer_forward_hook": 600, "activation_post_process": 600, "_add_observer_": 600, "named_children": 600, "leaf": 600, "add_modul": 600, "register_forward_hook": 600, "dump_tim": 600, "summarywrit": 600, "_acc": 600, "tune_": 600, "add_graph": 600, "get_observer_dict": 600, "observer_dict": 600, "is_quant": 600, "add_histogram": 600, "bind_al": 600, "logdir_spec": 600, "tune_0_acc0": 600, "tune_1": 600, "tune_1_acc0": 600, "four": 600, "baseline_acc_0": 600, "776": 600, "tune_1_acc_0": 600, "095": 600, "runs_v3": 600, "image_recognit": 600, "run_tuning_dump_tensor": 600, "sh": 600, "inceptionv3": 600, "v0": 600, "cg": 600, "conv0": 600, "bash": 600, "run_tun": 600, "topologi": 600, "inception_v3": 600, "dataset_loc": 600, "inceptionv3_fp32_pretrained_model": 600, "nc_inceptionv3": 600, "inceptionv3_dump_tensor": 600, "poor": 600, "eightbit": 600, "disappear": 600, "centercrop": 601, "randomcrop": 601, "cropres": 601, "decodeimag": 601, "jpeg": 601, "encodejp": 601, "alignimagechannel": 601, "116": 601, "103": 601, "017": 601, "bilinearimagenet": [601, 604], "topilimag": 601, "padding_mod": 601, "border": 601, "pixel": 601, "colorjitt": 601, "bright": 601, "satur": 601, "hue": 601, "jitter": 601, "tondarrai": 601, "quickli": [602, 603], "travers": 602, "human": 602, "concret": 602, "insight": 602, "aggress": 602, "classic": 602, "six": 602, "At": 602, "ii": 602, "iii": 602, "post_training_auto_qu": 602, "iv": 602, "vi": 602, "increment": 602, "primari": 602, "highest": 602, "spent": 602, "hawq_v2_loss": 602, "model_loss": 602, "black": 602, "come": 602, "compli": 602, "posterior": 602, "focu": 602, "short": 602, "never": 602, "loglevel": 602, "endlessli": 602, "perspect": 602, "smbo": 602, "trial": 602, "appl": 602, "surrog": 602, "repeat": 602, "quantil": 602, "densiti": 602, "parzen": 602, "greatest": 602, "dai": 602, "next_tune_cfg": 602, "overridden": 602, "cluster": 602, "seamlessli": 602, "mpi": 602, "replic": 602, "replica": 602, "fed": 602, "handler": 602, "synchron": 602, "slave": 602, "abctunestrategi": 602, "familiar": 603, "mobilenet_v1": 604, "hyper": 604, "40": [604, 605], "06": [604, 605], "beta_1": 604, "beta_2": 604, "epsilon": 604, "sparsecategoricalcrossentropi": 604, "sum_over_batch_s": 604, "from_logit": 604, "54": [604, 605], "19": [604, 605], "overal": 604, "8380": 605, "visit": 605, "performancethroughput": 605, "sec": 605, "86": 605, "00": 605, "170": 605, "82x": 605, "92": 605, "85x": 605, "61": 605, "83x": 605, "densenet": 605, "121": 605, "274": 605, "148": 605, "161": 605, "132": 605, "35": 605, "39x": 605, "169": 605, "38": 605, "36": 605, "191": 605, "118": 605, "61x": 605, "cnn": 605, "incept": 605, "37": 605, "84x": 605, "resnet101": 605, "21x": 605, "70x": 605, "51": 605, "14x": 605, "955": 605, "328": 605, "91x": 605, "709": 605, "282": 605, "51x": 605, "v3": 605, "337": 605, "160": 605, "11x": 605, "438": 605, "204": 605, "223": 605, "105": 605, "12x": 605, "10x": 605, "47": 605, "1347": 605, "439": 605, "07x": 605, "1192": 605, "492": 605, "42x": 605, "412": 605, "376": 605, "662": 605, "397": 605, "66x": 605, "299": 605, "23": 605, "154": 605, "93x": 605, "476": 605, "227": 605, "fashion": 605, "2734": 605, "1299": 605, "498": 605, "178": 605, "79x": 605, "427": 605, "173": 605, "47x": 605, "resnetv2": 605, "194": 605, "146": 605, "33x": 605, "237": 605, "187": 605, "27x": 605, "152": 605, "155": 605, "38x": 605, "302": 605, "215": 605, "40x": 605, "346": 605, "312": 605, "277": 605, "60x": 605, "273": 605, "31x": 605, "18x": 605, "53x": 605, "24x": 605, "vgg16": 605, "219": 605, "vgg19": 605, "193": 605, "11506": 605, "9665": 605, "19x": 605, "xception": 605, "262": 605, "137": 605, "barthez": 605, "143": 605, "02x": 605, "20x": 605, "209": 605, "08x": 605, "221": 605, "stsb": 605, "218": 605, "16x": 605, "62": 605, "57x": 605, "55x": 605, "56x": 605, "53": 605, "89x": 605, "blendcnn": 605, "4885": 605, "3715": 605, "camembert": 605, "206": 605, "09x": 605, "deberta": 605, "125": 605, "366": 605, "197": 605, "399": 605, "flaubert": 605, "592": 605, "385": 605, "54x": 605, "wikitext": 605, "hubert": 605, "446": 605, "181": 605, "46x": 605, "layoutlm": 605, "longform": 605, "49": 605, "mbart": 605, "625": 605, "451": 605, "lvwerra": 605, "pegasu": 605, "samsum": 605, "peleenet": 605, "402": 605, "29x": 605, "pokemon": 605, "275": 605, "334": 605, "48x": 605, "reform": 605, "crime": 605, "punish": 605, "153": 605, "06x": 605, "657": 605, "327": 605, "01x": 605, "812": 605, "344": 605, "36x": 605, "360": 605, "23x": 605, "resnext101": 605, "32x8d": 605, "182": 605, "squeezebert": 605, "195": 605, "150": 605, "30x": 605, "75x": 605, "transfo": 605, "xl": 605, "41x": 605, "wave2vec2": 605, "22x": 605, "102": 605, "00x": 605, "115": 605, "17x": 605, "yolo": 605, "232": 605, "28x": 605, "664": 605, "329": 605, "832": 605, "338": 605, "433": 605, "164": 605, "63x": 605, "836": 605, "1396": 605, "463": 605, "90x": 605, "159": 605, "32x": 605, "968": 605, "473": 605, "05x": 605, "958": 605, "477": 605, "arcfac": 605, "126": 605, "78x": 605, "298": 605, "124": 605, "624": 605, "254": 605, "45x": 605, "caffenet": 605, "1432": 605, "540": 605, "65x": 605, "1460": 605, "357": 605, "265": 605, "35x": 605, "86x": 605, "524": 605, "duc": 605, "efficientnet": 605, "1211": 605, "758": 605, "856": 605, "762": 605, "emot": 605, "ferplu": 605, "925": 605, "694": 605, "fcn": 605, "25x": 605, "googlenet": 605, "771": 605, "571": 605, "763": 605, "579": 605, "hf": 605, "156": 605, "multilingu": 605, "99x": 605, "199": 605, "104": 605, "73x": 605, "449": 605, "74x": 605, "l12": 605, "h384": 605, "466": 605, "247": 605, "88x": 605, "l6": 605, "523": 605, "354": 605, "183": 605, "107": 605, "spanbert": 605, "208": 605, "795": 605, "780": 605, "591": 605, "515": 605, "15x": 605, "2370": 605, "1526": 605, "2216": 605, "1506": 605, "2078": 605, "1028": 605, "1762": 605, "76x": 605, "mobilenetv2": 605, "2615": 605, "1645": 605, "59x": 605, "2461": 605, "1674": 605, "766": 605, "431": 605, "77x": 605, "575": 605, "430": 605, "34x": 605, "747": 605, "564": 605, "594": 605, "590": 605, "643": 605, "253": 605, "shufflenet": 605, "2354": 605, "1461": 605, "1850": 605, "1368": 605, "squeezenet": 605, "2484": 605, "1912": 605, "2526": 605, "1911": 605, "710": 605, "549": 605, "622": 605, "497": 605, "652": 605, "507": 605, "573": 605, "470": 605, "527": 605, "396": 605, "68x": 605, "tini": 605, "647": 605, "514": 605, "26x": 605, "ultrafac": 605, "314": 605, "50x": 605, "304": 605, "316": 605, "315": 605, "zfnet": 605, "462": 605, "268": 605, "72x": 605, "465": 605, "62x": 605, "436": 605, "270": 605, "429": 605, "92x": 605, "94x": 605, "331": 605, "242": 605, "37x": 605, "98x": 605, "taskdataset": 605, "accuracyspars": 605, "ratiospars": 605, "commentsbalancedor": 605, "unbalanc": 605, "mini": 605, "answeringsquad": 605, "87f1": 605, "momentumunbalanc": 605, "momentumbalanc": 605, "90f1": 605, "59f1": 605, "23f1": 605, "classificationmrpc": 605, "52f1": 605, "26f1": 605, "classificationsst": 605, "61accuraci": 605, "recognitionimagenet": 605, "95top1": 605, "2x1": 605, "v5s6": 605, "detectioncoco": 605, "ap0": 605, "404": 605, "6ap0": 605, "393": 605, "584": 605, "34f1": 605, "lassounbalanc": 605, "classificationmnli": 605, "mm": 605, "allbalanc": 605, "32accuraci": 605, "sensitivitybalanc": 605, "classificationqqp": 605, "classificationqnli": 605, "54accuraci": 605, "em": 605, "7965": 605, "wideresnet40": 605, "9522": 605, "8178": 605, "0213": 605, "8235": 605, "027": 605, "5494": 605, "7153": 605, "5540": 605, "0046": 605, "5523": 605, "vgg": 605, "bn": 605, "7022": 605, "7415": 605, "7025": 605, "0003": 605, "wip": 605, "6739": 605, "7399": 605, "6845": 605, "0106": 605, "7034": 605, "8382": 605, "bilstm": 605, "8314": 605, "9403": 605, "9048": 605, "0734": 605, "7323": 605, "8256": 605, "8084": 605, "8814": 605, "7442": 605, "8371": 605, "0119": 605, "0115": 605, "tinybert": 605, "8018": 605, "8044": 605, "8363": 605, "8411": 605, "8025": 605, "8074": 605, "0007": 605, "0030": 605, "8626": 605, "8213": 605, "9091": 605, "8782": 605, "8684": 605, "8259": 605, "0058": 605, "distilroberta": 605, "6057": 605, "6455": 605, "6187": 605, "0130": 605, "c6i": 605, "2xlarg": 605, "c6a": 605, "c6g": 605, "a100cuda": 605, "executionprovid": 605}, "objects": {"": [[0, 0, 0, "-", "644ec953a7dc_pruning_support"], [1, 0, 0, "-", "6ece06672ed3_v1_14"], [2, 0, 0, "-", "6f0d0f71d92e_v1_13"], [3, 0, 0, "-", "9e89549a08c8_v1_11"], [4, 0, 0, "-", "block_mask"], [5, 0, 0, "-", "env"], [293, 0, 0, "-", "neural_compressor"]], "6ece06672ed3_v1_14": [[1, 1, 1, "ece06672ed3_v1_14.update_dataloaders", "update_dataloaders"], [1, 1, 1, "ece06672ed3_v1_14.update_transformations", "update_transformations"]], "env": [[5, 1, 1, "", "run_migrations_offline"], [5, 1, 1, "", "run_migrations_online"]], "neural_compressor": [[7, 0, 0, "-", "adaptor"], [155, 0, 0, "-", "algorithm"], [158, 0, 0, "-", "benchmark"], [162, 0, 0, "-", "compression"], [175, 0, 0, "-", "conf"], [177, 0, 0, "-", "config"], [178, 0, 0, "-", "contrib"], [203, 0, 0, "-", "data"], [255, 0, 0, "-", "experimental"], [300, 0, 0, "-", "metric"], [302, 0, 0, "-", "mix_precision"], [304, 0, 0, "-", "model"], [312, 0, 0, "-", "objective"], [313, 0, 0, "-", "quantization"], [321, 0, 0, "-", "strategy"], [333, 0, 0, "-", "template"], [334, 0, 0, "-", "training"], [338, 0, 0, "-", "utils"], [480, 0, 0, "-", "ux"], [526, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[6, 0, 0, "-", "adaptor"], [8, 0, 0, "-", "keras"], [12, 0, 0, "-", "keras_utils"], [15, 0, 0, "-", "mxnet"], [16, 0, 0, "-", "mxnet_utils"], [18, 0, 0, "-", "onnxrt"], [21, 0, 0, "-", "ox_utils"], [44, 0, 0, "-", "pytorch"], [45, 0, 0, "-", "query"], [46, 0, 0, "-", "tensorflow"], [110, 0, 0, "-", "tf_utils"], [148, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[6, 2, 1, "", "Adaptor"], [6, 1, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.keras": [[8, 2, 1, "", "KerasAdaptor"]], "neural_compressor.adaptor.keras_utils": [[9, 0, 0, "-", "conv2d"], [10, 0, 0, "-", "dense"], [11, 0, 0, "-", "depthwise_conv2d"], [13, 0, 0, "-", "quantizer"], [14, 0, 0, "-", "separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[15, 2, 1, "", "MXNetQuery"], [15, 2, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet_utils": [[17, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[17, 2, 1, "", "CalibCollector"], [17, 2, 1, "", "CalibData"], [17, 2, 1, "", "CollectorBase"], [17, 2, 1, "", "DataIterLoader"], [17, 2, 1, "", "DataLoaderWrap"], [17, 2, 1, "", "NameCollector"], [17, 2, 1, "", "OpType"], [17, 2, 1, "", "TensorCollector"], [17, 1, 1, "", "amp_convert"], [17, 1, 1, "", "calib_model"], [17, 1, 1, "", "check_mx_version"], [17, 1, 1, "", "combine_capabilities"], [17, 1, 1, "", "create_data_example"], [17, 1, 1, "", "distribute_calib_tensors"], [17, 1, 1, "", "ensure_list"], [17, 1, 1, "", "fuse"], [17, 1, 1, "", "get_framework_name"], [17, 1, 1, "", "is_model_quantized"], [17, 1, 1, "", "isiterable"], [17, 1, 1, "", "make_module"], [17, 1, 1, "", "make_nc_model"], [17, 1, 1, "", "make_symbol_block"], [17, 1, 1, "", "ndarray_to_device"], [17, 1, 1, "", "parse_tune_config"], [17, 1, 1, "", "prepare_dataloader"], [17, 1, 1, "", "prepare_model"], [17, 1, 1, "", "prepare_model_data"], [17, 1, 1, "", "quantize_sym_model"], [17, 1, 1, "", "query_quantizable_nodes"], [17, 1, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[18, 2, 1, "", "ONNXRT_IntegerOpsAdaptor"], [18, 2, 1, "", "ONNXRT_QDQAdaptor"], [18, 2, 1, "", "ONNXRT_QLinearOpsAdaptor"], [18, 2, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.ox_utils": [[19, 0, 0, "-", "calibration"], [20, 0, 0, "-", "calibrator"], [33, 0, 0, "-", "operators"], [42, 0, 0, "-", "quantizer"], [43, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[19, 2, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[20, 2, 1, "", "CalibratorBase"], [20, 2, 1, "", "HistogramCollector"], [20, 2, 1, "", "KLCalibrator"], [20, 2, 1, "", "MinMaxCalibrator"], [20, 2, 1, "", "PercentileCalibrator"], [20, 1, 1, "", "calib_registry"], [20, 1, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[22, 0, 0, "-", "activation"], [23, 0, 0, "-", "argmax"], [24, 0, 0, "-", "attention"], [25, 0, 0, "-", "binary_op"], [26, 0, 0, "-", "concat"], [27, 0, 0, "-", "conv"], [28, 0, 0, "-", "direct_q8"], [29, 0, 0, "-", "embed_layernorm"], [30, 0, 0, "-", "gather"], [31, 0, 0, "-", "gavgpool"], [32, 0, 0, "-", "gemm"], [34, 0, 0, "-", "lstm"], [35, 0, 0, "-", "matmul"], [36, 0, 0, "-", "maxpool"], [37, 0, 0, "-", "ops"], [38, 0, 0, "-", "pad"], [39, 0, 0, "-", "pooling"], [40, 0, 0, "-", "resize"], [41, 0, 0, "-", "split"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[22, 2, 1, "", "ActivationOperator"], [22, 2, 1, "", "QActivationOperator"], [22, 2, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[23, 2, 1, "", "ArgMaxOperator"], [23, 2, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[24, 2, 1, "", "AttentionOperator"], [24, 2, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[25, 2, 1, "", "BinaryOperator"], [25, 2, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[26, 2, 1, "", "ConcatOperator"], [26, 2, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[27, 2, 1, "", "ConvOperator"], [27, 2, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[28, 2, 1, "", "Direct8BitOperator"], [28, 2, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[29, 2, 1, "", "EmbedLayerNormalizationOperator"], [29, 2, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[30, 2, 1, "", "GatherOperator"], [30, 2, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[31, 2, 1, "", "GlobalAveragePoolOperator"], [31, 2, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[32, 2, 1, "", "GemmOperator"], [32, 2, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[34, 2, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[35, 2, 1, "", "MatMulOperator"], [35, 2, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[36, 2, 1, "", "MaxPoolOperator"], [36, 2, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[37, 2, 1, "", "Operator"], [37, 2, 1, "", "QOperator"], [37, 1, 1, "", "op_registry"], [37, 1, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[38, 2, 1, "", "PadOperator"], [38, 2, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[39, 2, 1, "", "PoolOperator"], [39, 2, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[40, 2, 1, "", "QResizeOperator"], [40, 2, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[41, 2, 1, "", "QSplitOperator"], [41, 2, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[42, 2, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[43, 2, 1, "", "QuantFormat"], [43, 2, 1, "", "QuantType"], [43, 2, 1, "", "QuantizationMode"], [43, 2, 1, "", "QuantizedInitializer"], [43, 2, 1, "", "QuantizedValue"], [43, 2, 1, "", "QuantizedValueType"], [43, 2, 1, "", "ValueInfo"], [43, 1, 1, "", "adjust_weights_per_input"], [43, 1, 1, "", "adjust_weights_per_op"], [43, 1, 1, "", "attribute_to_kwarg"], [43, 1, 1, "", "calculate_scale_zp"], [43, 1, 1, "", "cast_tensor"], [43, 1, 1, "", "collate_preds"], [43, 1, 1, "", "dequantize_data"], [43, 1, 1, "", "dequantize_data_with_scale_zero"], [43, 1, 1, "", "dtype_to_name"], [43, 1, 1, "", "find_by_name"], [43, 1, 1, "", "float_to_bfloat16"], [43, 1, 1, "", "float_to_float16"], [43, 1, 1, "", "get_smooth_scales_per_input"], [43, 1, 1, "", "get_smooth_scales_per_op"], [43, 1, 1, "", "insert_smooth_mul_op_per_input"], [43, 1, 1, "", "insert_smooth_mul_op_per_op"], [43, 1, 1, "", "is_B_transposed"], [43, 1, 1, "", "make_dquant_node"], [43, 1, 1, "", "make_quant_node"], [43, 1, 1, "", "quantize_data"], [43, 1, 1, "", "quantize_data_per_channel"], [43, 1, 1, "", "quantize_data_with_scale_zero"], [43, 1, 1, "", "quantize_nparray"], [43, 1, 1, "", "remove_init_from_model_input"], [43, 1, 1, "", "split_shared_bias"], [43, 1, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.pytorch": [[44, 2, 1, "", "PyTorchAdaptor"], [44, 2, 1, "", "PyTorchQuery"], [44, 2, 1, "", "PyTorch_FXAdaptor"], [44, 2, 1, "", "PyTorch_IPEXAdaptor"], [44, 2, 1, "", "TemplateAdaptor"], [44, 1, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.query": [[45, 2, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.tensorflow": [[46, 2, 1, "", "TensorFlowAdaptor"], [46, 2, 1, "", "TensorflowQuery"], [46, 2, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[47, 0, 0, "-", "graph_converter"], [48, 0, 0, "-", "graph_converter_without_calib"], [86, 0, 0, "-", "graph_rewriter"], [109, 0, 0, "-", "graph_util"], [111, 0, 0, "-", "quantize_graph"], [138, 0, 0, "-", "quantize_graph_common"], [139, 0, 0, "-", "tf2onnx_converter"], [142, 0, 0, "-", "transform_graph"], [145, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, 2, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, 2, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[50, 0, 0, "-", "bf16"], [75, 0, 0, "-", "generic"], [85, 0, 0, "-", "graph_base"], [94, 0, 0, "-", "int8"], [100, 0, 0, "-", "onnx"], [105, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[49, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, 2, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[51, 0, 0, "-", "convert_add_to_biasadd"], [52, 0, 0, "-", "convert_layout"], [53, 0, 0, "-", "convert_leakyrelu"], [54, 0, 0, "-", "convert_nan_to_random"], [55, 0, 0, "-", "convert_placeholder_to_const"], [56, 0, 0, "-", "dequantize_cast_optimizer"], [57, 0, 0, "-", "dilated_contraction"], [58, 0, 0, "-", "dummy_biasadd"], [59, 0, 0, "-", "expanddims_optimizer"], [60, 0, 0, "-", "fetch_weight_from_reshape"], [61, 0, 0, "-", "fold_batch_norm"], [62, 0, 0, "-", "fold_constant"], [63, 0, 0, "-", "fuse_biasadd_add"], [64, 0, 0, "-", "fuse_column_wise_mul"], [65, 0, 0, "-", "fuse_conv_with_math"], [66, 0, 0, "-", "fuse_decomposed_bn"], [67, 0, 0, "-", "fuse_decomposed_in"], [68, 0, 0, "-", "fuse_gelu"], [69, 0, 0, "-", "fuse_layer_norm"], [70, 0, 0, "-", "fuse_pad_with_conv"], [71, 0, 0, "-", "fuse_pad_with_fp32_conv"], [72, 0, 0, "-", "fuse_reshape_transpose"], [73, 0, 0, "-", "graph_cse_optimizer"], [74, 0, 0, "-", "grappler_pass"], [76, 0, 0, "-", "insert_print_node"], [77, 0, 0, "-", "move_squeeze_after_relu"], [78, 0, 0, "-", "pre_optimize"], [79, 0, 0, "-", "remove_training_nodes"], [80, 0, 0, "-", "rename_batch_norm"], [81, 0, 0, "-", "split_shared_input"], [82, 0, 0, "-", "strip_equivalent_nodes"], [83, 0, 0, "-", "strip_unused_nodes"], [84, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, 2, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, 2, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, 2, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, 2, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, 2, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, 2, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, 2, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, 2, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, 2, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, 2, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, 2, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, 2, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, 2, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, 2, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, 2, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, 2, 1, "", "FuseDecomposedBNOptimizer"], [66, 1, 1, "", "bypass_reshape"], [66, 1, 1, "", "get_const_dim_count"], [66, 1, 1, "", "node_from_map"], [66, 1, 1, "", "node_name_from_input"], [66, 1, 1, "", "valid_reshape_inputs"], [66, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, 2, 1, "", "FuseDecomposedINOptimizer"], [67, 1, 1, "", "bypass_reshape"], [67, 1, 1, "", "get_const_dim_count"], [67, 1, 1, "", "node_from_map"], [67, 1, 1, "", "node_name_from_input"], [67, 1, 1, "", "valid_reshape_inputs"], [67, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, 2, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, 2, 1, "", "FuseLayerNormOptimizer"], [69, 1, 1, "", "node_from_map"], [69, 1, 1, "", "node_name_from_input"], [69, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, 2, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, 2, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, 2, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, 2, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, 2, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, 2, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, 2, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, 2, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, 2, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, 2, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, 2, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, 2, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, 2, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, 2, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, 2, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[87, 0, 0, "-", "freeze_fake_quant"], [88, 0, 0, "-", "freeze_value"], [89, 0, 0, "-", "freeze_value_without_calib"], [90, 0, 0, "-", "fuse_conv_redundant_dequantize"], [91, 0, 0, "-", "fuse_conv_requantize"], [92, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [93, 0, 0, "-", "fuse_matmul_requantize"], [95, 0, 0, "-", "meta_op_optimizer"], [96, 0, 0, "-", "post_hostconst_converter"], [97, 0, 0, "-", "post_quantized_op_cse"], [98, 0, 0, "-", "rnn_convert"], [99, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, 2, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, 2, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, 2, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, 2, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, 2, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, 2, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, 2, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [93, 2, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [93, 2, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [93, 2, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, 2, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, 2, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, 2, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, 2, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, 2, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, 0, 0, "-", "onnx_graph"], [102, 0, 0, "-", "onnx_node"], [103, 0, 0, "-", "onnx_schema"], [104, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, 2, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, 2, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, 2, 1, "", "OnnxOpSchema"], [103, 1, 1, "", "get_max_supported_opset_version"], [103, 1, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, 2, 1, "", "SeqType"], [104, 1, 1, "", "add_port_to_name"], [104, 1, 1, "", "are_shapes_equal"], [104, 1, 1, "", "assert_error"], [104, 1, 1, "", "compute_const_folding_using_tf"], [104, 1, 1, "", "convert_tensorflow_tensor_to_onnx"], [104, 1, 1, "", "find_opset"], [104, 1, 1, "", "get_index_from_strided_slice_of_shape"], [104, 1, 1, "", "get_subgraphs_from_onnx"], [104, 1, 1, "", "get_tensorflow_node_attr"], [104, 1, 1, "", "get_tensorflow_node_shape_attr"], [104, 1, 1, "", "get_tensorflow_tensor_data"], [104, 1, 1, "", "get_tensorflow_tensor_shape"], [104, 1, 1, "", "infer_onnx_shape_dtype"], [104, 1, 1, "", "initialize_name_counter"], [104, 1, 1, "", "is_list_or_tuple"], [104, 1, 1, "", "is_onnx_domain"], [104, 1, 1, "", "make_onnx_inputs_outputs"], [104, 1, 1, "", "make_onnx_shape"], [104, 1, 1, "", "map_numpy_to_onnx_dtype"], [104, 1, 1, "", "map_onnx_to_numpy_type"], [104, 1, 1, "", "map_tensorflow_dtype"], [104, 1, 1, "", "read_tensorflow_node_attrs"], [104, 1, 1, "", "save_protobuf"], [104, 1, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, 0, 0, "-", "insert_qdq_pattern"], [107, 0, 0, "-", "merge_duplicated_qdq"], [108, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, 2, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, 2, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, 2, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, 2, 1, "", "GraphAnalyzer"], [109, 2, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[113, 0, 0, "-", "qat"], [129, 0, 0, "-", "qdq"], [131, 0, 0, "-", "quantize_graph_base"], [132, 0, 0, "-", "quantize_graph_bn"], [133, 0, 0, "-", "quantize_graph_concatv2"], [134, 0, 0, "-", "quantize_graph_conv"], [135, 0, 0, "-", "quantize_graph_for_intel_cpu"], [136, 0, 0, "-", "quantize_graph_matmul"], [137, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[112, 0, 0, "-", "fake_quantize"], [114, 0, 0, "-", "quantize_config"], [115, 0, 0, "-", "quantize_helper"], [116, 0, 0, "-", "quantize_layers"], [121, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, 2, 1, "", "FakeQuantize"], [112, 2, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, 2, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, 1, 1, "", "init_quantize_config"], [115, 1, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, 0, 0, "-", "optimize_layer"], [118, 0, 0, "-", "quantize_layer_add"], [119, 0, 0, "-", "quantize_layer_base"], [120, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, 1, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, 2, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, 2, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, 2, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, 2, 1, "", "QuantizeWrapper"], [121, 2, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[122, 0, 0, "-", "fuse_qdq_bn"], [123, 0, 0, "-", "fuse_qdq_concatv2"], [124, 0, 0, "-", "fuse_qdq_conv"], [125, 0, 0, "-", "fuse_qdq_deconv"], [126, 0, 0, "-", "fuse_qdq_in"], [127, 0, 0, "-", "fuse_qdq_matmul"], [128, 0, 0, "-", "fuse_qdq_pooling"], [130, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, 2, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, 2, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, 2, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, 2, 1, "", "QuantizeGraphBase"], [131, 2, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, 2, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, 2, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[139, 2, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[140, 0, 0, "-", "bias_correction"], [141, 0, 0, "-", "graph_transform_base"], [143, 0, 0, "-", "insert_logging"], [144, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[140, 2, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[141, 2, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[143, 2, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[144, 2, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[145, 1, 1, "", "collate_tf_preds"], [145, 1, 1, "", "disable_random"], [145, 1, 1, "", "fix_ref_type_of_graph_def"], [145, 1, 1, "", "generate_feed_dict"], [145, 1, 1, "", "get_estimator_graph"], [145, 1, 1, "", "get_graph_def"], [145, 1, 1, "", "get_input_output_node_names"], [145, 1, 1, "", "get_model_input_shape"], [145, 1, 1, "", "get_tensor_by_name"], [145, 1, 1, "", "get_tensor_val_from_graph_node"], [145, 1, 1, "", "int8_node_name_reverse"], [145, 1, 1, "", "is_ckpt_format"], [145, 1, 1, "", "is_saved_model_format"], [145, 1, 1, "", "iterator_sess_run"], [145, 1, 1, "", "read_graph"], [145, 1, 1, "", "strip_equivalent_nodes"], [145, 1, 1, "", "strip_unused_nodes"], [145, 1, 1, "", "tf_diagnosis_helper"], [145, 1, 1, "", "version1_eq_version2"], [145, 1, 1, "", "version1_gt_version2"], [145, 1, 1, "", "version1_gte_version2"], [145, 1, 1, "", "version1_lt_version2"], [145, 1, 1, "", "version1_lte_version2"], [145, 1, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[146, 0, 0, "-", "bf16_convert"], [147, 0, 0, "-", "hawq_metric"], [149, 0, 0, "-", "model_wrapper"], [150, 0, 0, "-", "smooth_quant"], [151, 0, 0, "-", "symbolic_trace"], [152, 0, 0, "-", "util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[146, 2, 1, "", "BF16ModuleWrapper"], [146, 1, 1, "", "Convert"], [146, 1, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[147, 2, 1, "", "HessianTrace"], [147, 2, 1, "", "Node_collector"], [147, 1, 1, "", "compare_weights"], [147, 1, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[150, 2, 1, "", "GraphTrace"], [150, 2, 1, "", "TorchSmoothQuant"], [150, 1, 1, "", "get_module"], [150, 1, 1, "", "set_module"], [150, 1, 1, "", "update_sq_scale"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[151, 1, 1, "", "symbolic_trace"], [151, 1, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.util": [[152, 1, 1, "", "append_attr"], [152, 1, 1, "", "auto_copy"], [152, 1, 1, "", "calculate_quant_min_max"], [152, 1, 1, "", "check_cfg_and_qconfig"], [152, 1, 1, "", "collate_torch_preds"], [152, 1, 1, "", "fetch_module"], [152, 1, 1, "", "generate_activation_observer"], [152, 1, 1, "", "get_embedding_contiguous"], [152, 1, 1, "", "get_example_input"], [152, 1, 1, "", "get_fallback_order"], [152, 1, 1, "", "get_mse_order_per_fp32"], [152, 1, 1, "", "get_mse_order_per_int8"], [152, 1, 1, "", "get_quantizable_ops_from_cfgs"], [152, 1, 1, "", "get_torch_version"], [152, 1, 1, "", "input2tuple"], [152, 1, 1, "", "is_fused_module"], [152, 1, 1, "", "match_datatype_pattern"], [152, 1, 1, "", "paser_cfgs"], [152, 1, 1, "", "set_module"], [152, 1, 1, "", "simple_inference"]], "neural_compressor.algorithm": [[153, 0, 0, "-", "algorithm"], [154, 0, 0, "-", "fast_bias_correction"], [156, 0, 0, "-", "smooth_quant"], [157, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[153, 2, 1, "", "ALGORITHMS"], [153, 2, 1, "", "Algorithm"], [153, 2, 1, "", "AlgorithmScheduler"], [153, 1, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[154, 2, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[156, 2, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[157, 2, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[158, 1, 1, "", "fit"], [158, 1, 1, "", "get_architecture"], [158, 1, 1, "", "get_bounded_threads"], [158, 1, 1, "", "get_core_ids"], [158, 1, 1, "", "get_physical_ids"], [158, 1, 1, "", "get_threads"], [158, 1, 1, "", "get_threads_per_core"], [158, 1, 1, "", "set_all_env_var"], [158, 1, 1, "", "set_env_var"]], "neural_compressor.compression": [[159, 0, 0, "-", "callbacks"], [161, 0, 0, "-", "distillation"], [164, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[159, 2, 1, "", "BaseCallbacks"], [159, 2, 1, "", "DistillationCallbacks"], [159, 2, 1, "", "PruningCallbacks"], [159, 2, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[159, 3, 1, "", "_epoch_ran"], [159, 3, 1, "", "best_model"], [159, 3, 1, "", "best_score"], [159, 3, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[160, 0, 0, "-", "criterions"]], "neural_compressor.compression.distillation.criterions": [[160, 2, 1, "", "Criterions"], [160, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [160, 2, 1, "", "KnowledgeDistillationFramework"], [160, 2, 1, "", "KnowledgeDistillationLoss"], [160, 2, 1, "", "PyTorchCriterions"], [160, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [160, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [160, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [160, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [160, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [160, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [160, 2, 1, "", "SelfKnowledgeDistillationLoss"], [160, 2, 1, "", "TensorflowCriterions"], [160, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [160, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [160, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [160, 1, 1, "", "criterion_registry"]], "neural_compressor.compression.pruner": [[163, 0, 0, "-", "criteria"], [165, 0, 0, "-", "model_slim"], [168, 0, 0, "-", "patterns"], [169, 0, 0, "-", "pruners"], [170, 0, 0, "-", "regs"], [171, 0, 0, "-", "schedulers"], [172, 0, 0, "-", "utils"]], "neural_compressor.compression.pruner.criteria": [[163, 2, 1, "", "GradientCriterion"], [163, 2, 1, "", "MagnitudeCriterion"], [163, 2, 1, "", "PruningCriterion"], [163, 2, 1, "", "RetrainFreeCriterion"], [163, 2, 1, "", "SnipCriterion"], [163, 2, 1, "", "SnipMomentumBlockCriterion"], [163, 2, 1, "", "SnipMomentumCriterion"], [163, 1, 1, "", "get_criterion"], [163, 1, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[163, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[163, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[163, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[163, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[163, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion": [[163, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[163, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.model_slim": [[166, 0, 0, "-", "pattern_analyzer"], [167, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[166, 2, 1, "", "JitBasicSearcher"], [166, 2, 1, "", "Linear2LinearSearcher"], [166, 2, 1, "", "PathSearcher"], [166, 2, 1, "", "RecipeSearcher"], [166, 2, 1, "", "SelfMHASearcher"], [166, 1, 1, "", "get_attributes"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[166, 3, 1, "", "device"], [166, 3, 1, "", "flatten_static_graph"], [166, 3, 1, "", "model"], [166, 3, 1, "", "searching_results"], [166, 3, 1, "", "static_graph"], [166, 3, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[166, 3, 1, "", "current_pattern"], [166, 3, 1, "", "device"], [166, 3, 1, "", "flatten_static_graph"], [166, 3, 1, "", "model"], [166, 3, 1, "", "searching_results"], [166, 3, 1, "", "static_graph"], [166, 3, 1, "", "target_layers"], [166, 3, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.PathSearcher": [[166, 3, 1, "", "current_pattern"], [166, 3, 1, "", "device"], [166, 3, 1, "", "flatten_static_graph"], [166, 3, 1, "", "model"], [166, 3, 1, "", "searching_results"], [166, 3, 1, "", "static_graph"], [166, 3, 1, "", "target_layers"], [166, 3, 1, "", "target_op"], [166, 3, 1, "", "target_op_lut"], [166, 3, 1, "", "target_path"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[166, 3, 1, "", "model"], [166, 3, 1, "", "recipe"], [166, 3, 1, "", "searching_results"], [166, 3, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[166, 3, 1, "", "device"], [166, 3, 1, "", "flatten_static_graph"], [166, 3, 1, "", "model"], [166, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[167, 2, 1, "", "LinearCompression"], [167, 2, 1, "", "LinearCompressionIterator"], [167, 2, 1, "", "MHACompression"], [167, 2, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[167, 3, 1, "", "device"], [167, 3, 1, "", "layer_1"], [167, 3, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[167, 3, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[168, 2, 1, "", "BasePattern"], [168, 2, 1, "", "PatternNInM"], [168, 2, 1, "", "PatternNxM"], [168, 1, 1, "", "get_pattern"], [168, 1, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.BasePattern": [[168, 3, 1, "", "config"], [168, 3, 1, "", "invalid_layers"], [168, 3, 1, "", "is_global"], [168, 3, 1, "", "keep_mask_layers"], [168, 3, 1, "", "max_sparsity_ratio_per_op"], [168, 3, 1, "", "min_sparsity_ratio_per_op"], [168, 3, 1, "", "modules"], [168, 3, 1, "", "pattern"], [168, 3, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.PatternNInM": [[168, 3, 1, "", "M"], [168, 3, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.PatternNxM": [[168, 3, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[169, 2, 1, "", "BasePruner"], [169, 2, 1, "", "BasicPruner"], [169, 2, 1, "", "BlockMaskPruner"], [169, 2, 1, "", "PatternLockPruner"], [169, 2, 1, "", "ProgressivePruner"], [169, 2, 1, "", "RetrainFreePruner"], [169, 1, 1, "", "get_pruner"], [169, 1, 1, "", "model_slim"], [169, 1, 1, "", "model_slim_ffn2"], [169, 1, 1, "", "model_slim_mha"], [169, 1, 1, "", "parse_valid_pruner_types"], [169, 1, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.BasePruner": [[169, 3, 1, "", "config"], [169, 3, 1, "", "current_sparsity_ratio"], [169, 3, 1, "", "end_step"], [169, 3, 1, "", "global_step"], [169, 3, 1, "", "masks"], [169, 3, 1, "", "max_sparsity_ratio_per_op"], [169, 3, 1, "", "modules"], [169, 3, 1, "", "pattern"], [169, 3, 1, "", "pruning_frequency"], [169, 3, 1, "", "scheduler"], [169, 3, 1, "", "scores"], [169, 3, 1, "", "start_step"], [169, 3, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.BasicPruner": [[169, 3, 1, "", "criterion"], [169, 3, 1, "", "pattern"], [169, 3, 1, "", "reg"], [169, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.BlockMaskPruner": [[169, 3, 1, "", "criterion"], [169, 3, 1, "", "pattern"], [169, 3, 1, "", "reg"], [169, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.RetrainFreePruner": [[169, 3, 1, "", "criterion"], [169, 3, 1, "", "pattern"], [169, 3, 1, "", "reg"], [169, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.regs": [[170, 2, 1, "", "BaseReg"], [170, 2, 1, "", "GroupLasso"], [170, 1, 1, "", "get_reg"], [170, 1, 1, "", "get_reg_type"], [170, 1, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[170, 3, 1, "", "alpha"], [170, 3, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[171, 2, 1, "", "IterativeScheduler"], [171, 2, 1, "", "OneshotScheduler"], [171, 2, 1, "", "PruningScheduler"], [171, 1, 1, "", "get_scheduler"], [171, 1, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[171, 3, 1, "", "config"]], "neural_compressor.compression.pruner.utils": [[172, 1, 1, "", "check_config"], [172, 1, 1, "", "check_key_validity"], [172, 1, 1, "", "generate_ffn2_pruning_config"], [172, 1, 1, "", "generate_mha_pruning_config"], [172, 1, 1, "", "generate_pruner_config"], [172, 1, 1, "", "get_sparsity_ratio"], [172, 1, 1, "", "parse_auto_slim_config"], [172, 1, 1, "", "parse_to_prune"], [172, 1, 1, "", "process_and_check_config"], [172, 1, 1, "", "process_config"], [172, 1, 1, "", "process_weight_config"], [172, 1, 1, "", "process_yaml_config"], [172, 1, 1, "", "reset_none_to_default"], [172, 1, 1, "", "update_params"]], "neural_compressor.conf": [[173, 0, 0, "-", "config"], [174, 0, 0, "-", "dotdict"], [176, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[173, 2, 1, "", "Benchmark_Conf"], [173, 2, 1, "", "Conf"], [173, 2, 1, "", "Distillation_Conf"], [173, 2, 1, "", "Graph_Optimization_Conf"], [173, 2, 1, "", "MixedPrecision_Conf"], [173, 2, 1, "", "NASConfig"], [173, 2, 1, "", "PrunerV2"], [173, 2, 1, "", "Pruning_Conf"], [173, 2, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[174, 2, 1, "", "DotDict"], [174, 1, 1, "", "deep_get"], [174, 1, 1, "", "deep_set"]], "neural_compressor.conf.pythonic_config": [[176, 2, 1, "", "QuantizationConfig"]], "neural_compressor.config": [[177, 2, 1, "", "AccuracyCriterion"], [177, 2, 1, "", "BenchmarkConfig"], [177, 2, 1, "", "DistillationConfig"], [177, 2, 1, "", "ExportConfig"], [177, 2, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [177, 2, 1, "", "KnowledgeDistillationLossConfig"], [177, 2, 1, "", "MixedPrecisionConfig"], [177, 2, 1, "", "ONNXQlinear2QDQConfig"], [177, 2, 1, "", "Options"], [177, 2, 1, "", "PostTrainingQuantConfig"], [177, 2, 1, "", "QuantizationAwareTrainingConfig"], [177, 2, 1, "", "SelfKnowledgeDistillationLossConfig"], [177, 2, 1, "", "TF2ONNXConfig"], [177, 2, 1, "", "Torch2ONNXConfig"], [177, 2, 1, "", "TuningCriterion"], [177, 2, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[179, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[180, 0, 0, "-", "sigopt"], [181, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[180, 2, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[181, 2, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[186, 0, 0, "-", "dataloaders"], [198, 0, 0, "-", "datasets"], [202, 0, 0, "-", "filters"], [206, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[182, 0, 0, "-", "base_dataloader"], [183, 0, 0, "-", "dataloader"], [184, 0, 0, "-", "default_dataloader"], [185, 0, 0, "-", "fetcher"], [187, 0, 0, "-", "mxnet_dataloader"], [188, 0, 0, "-", "onnxrt_dataloader"], [189, 0, 0, "-", "pytorch_dataloader"], [190, 0, 0, "-", "sampler"], [191, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[182, 2, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[183, 2, 1, "", "DataLoader"]], "neural_compressor.data.dataloaders.default_dataloader": [[184, 2, 1, "", "DefaultDataLoader"], [184, 1, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[185, 2, 1, "", "Fetcher"], [185, 2, 1, "", "IndexFetcher"], [185, 2, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[187, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[188, 2, 1, "", "ONNXRTBertDataLoader"], [188, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[189, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[190, 2, 1, "", "BatchSampler"], [190, 2, 1, "", "IterableSampler"], [190, 2, 1, "", "Sampler"], [190, 2, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[191, 2, 1, "", "TFDataDataLoader"], [191, 2, 1, "", "TensorflowBertDataLoader"], [191, 2, 1, "", "TensorflowDataLoader"], [191, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[192, 0, 0, "-", "bert_dataset"], [193, 0, 0, "-", "coco_dataset"], [194, 0, 0, "-", "dataset"], [195, 0, 0, "-", "dummy_dataset"], [196, 0, 0, "-", "dummy_dataset_v2"], [197, 0, 0, "-", "imagenet_dataset"], [199, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[192, 2, 1, "", "InputFeatures"], [192, 2, 1, "", "ONNXRTBertDataset"], [192, 2, 1, "", "ParseDecodeBert"], [192, 2, 1, "", "PytorchBertDataset"], [192, 2, 1, "", "TensorflowBertDataset"], [192, 2, 1, "", "TensorflowModelZooBertDataset"], [192, 1, 1, "", "convert_examples_to_features"], [192, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[193, 2, 1, "", "COCONpy"], [193, 2, 1, "", "COCORaw"], [193, 2, 1, "", "COCORecordDataset"], [193, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[194, 2, 1, "", "CIFAR10"], [194, 2, 1, "", "CIFAR100"], [194, 2, 1, "", "Dataset"], [194, 2, 1, "", "Datasets"], [194, 2, 1, "", "FashionMNIST"], [194, 2, 1, "", "ImageFolder"], [194, 2, 1, "", "IterableDataset"], [194, 2, 1, "", "MNIST"], [194, 2, 1, "", "MXNetCIFAR10"], [194, 2, 1, "", "MXNetCIFAR100"], [194, 2, 1, "", "MXNetDatasets"], [194, 2, 1, "", "MXNetFashionMNIST"], [194, 2, 1, "", "MXNetImageFolder"], [194, 2, 1, "", "MXNetMNIST"], [194, 2, 1, "", "ONNXRTITDatasets"], [194, 2, 1, "", "ONNXRTQLDatasets"], [194, 2, 1, "", "PyTorchDatasets"], [194, 2, 1, "", "PytorchCIFAR10"], [194, 2, 1, "", "PytorchCIFAR100"], [194, 2, 1, "", "PytorchFashionMNIST"], [194, 2, 1, "", "PytorchMNIST"], [194, 2, 1, "", "PytorchMxnetWrapDataset"], [194, 2, 1, "", "PytorchMxnetWrapFunction"], [194, 2, 1, "", "Tensorflow"], [194, 2, 1, "", "TensorflowCIFAR10"], [194, 2, 1, "", "TensorflowCIFAR100"], [194, 2, 1, "", "TensorflowDatasets"], [194, 2, 1, "", "TensorflowFashionMNIST"], [194, 2, 1, "", "TensorflowImageRecord"], [194, 2, 1, "", "TensorflowMNIST"], [194, 2, 1, "", "TensorflowTFRecordDataset"], [194, 2, 1, "", "TensorflowVOCRecord"], [194, 1, 1, "", "calculate_md5"], [194, 1, 1, "", "check_integrity"], [194, 1, 1, "", "dataset_registry"], [194, 1, 1, "", "download_url"], [194, 4, 1, "", "framework_datasets"], [194, 1, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[195, 2, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[196, 2, 1, "", "DummyDataset"], [196, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[197, 2, 1, "", "ImagenetRaw"], [197, 2, 1, "", "MXNetImagenetRaw"], [197, 2, 1, "", "ONNXRTImagenetDataset"], [197, 2, 1, "", "PytorchImagenetRaw"], [197, 2, 1, "", "TensorflowImagenetDataset"], [197, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[199, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[200, 0, 0, "-", "coco_filter"], [201, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[200, 2, 1, "", "LabelBalanceCOCORawFilter"], [200, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[201, 2, 1, "", "FILTERS"], [201, 2, 1, "", "Filter"], [201, 2, 1, "", "MXNetFilters"], [201, 2, 1, "", "ONNXRTITFilters"], [201, 2, 1, "", "ONNXRTQLFilters"], [201, 2, 1, "", "PyTorchFilters"], [201, 2, 1, "", "TensorflowFilters"], [201, 1, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[204, 0, 0, "-", "coco_transform"], [205, 0, 0, "-", "imagenet_transform"], [207, 0, 0, "-", "postprocess"], [208, 0, 0, "-", "tokenization"], [209, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.coco_transform": [[204, 2, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[205, 2, 1, "", "BilinearImagenetTransform"], [205, 2, 1, "", "LabelShift"], [205, 2, 1, "", "ONNXResizeCropImagenetTransform"], [205, 2, 1, "", "OnnxBilinearImagenetTransform"], [205, 2, 1, "", "ParseDecodeImagenet"], [205, 2, 1, "", "ParseDecodeImagenetTransform"], [205, 2, 1, "", "QuantizedInput"], [205, 2, 1, "", "ResizeWithAspectRatio"], [205, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.postprocess": [[207, 2, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[208, 2, 1, "", "BasicTokenizer"], [208, 2, 1, "", "FullTokenizer"], [208, 2, 1, "", "WordpieceTokenizer"], [208, 1, 1, "", "convert_by_vocab"], [208, 1, 1, "", "convert_to_unicode"], [208, 1, 1, "", "load_vocab"], [208, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[209, 2, 1, "", "AlignImageChannelTransform"], [209, 2, 1, "", "BaseTransform"], [209, 2, 1, "", "CastONNXTransform"], [209, 2, 1, "", "CastPyTorchTransform"], [209, 2, 1, "", "CastTFTransform"], [209, 2, 1, "", "CenterCropTFTransform"], [209, 2, 1, "", "CenterCropTransform"], [209, 2, 1, "", "CollectTransform"], [209, 2, 1, "", "ComposeTransform"], [209, 2, 1, "", "CropResizeTFTransform"], [209, 2, 1, "", "CropResizeTransform"], [209, 2, 1, "", "CropToBoundingBox"], [209, 2, 1, "", "InputFeatures"], [209, 2, 1, "", "MXNetCropResizeTransform"], [209, 2, 1, "", "MXNetCropToBoundingBox"], [209, 2, 1, "", "MXNetNormalizeTransform"], [209, 2, 1, "", "MXNetTransforms"], [209, 2, 1, "", "MXNetTranspose"], [209, 2, 1, "", "NormalizeTFTransform"], [209, 2, 1, "", "NormalizeTransform"], [209, 2, 1, "", "ONNXRTCropToBoundingBox"], [209, 2, 1, "", "ONNXRTITTransforms"], [209, 2, 1, "", "ONNXRTQLTransforms"], [209, 2, 1, "", "PaddedCenterCropTransform"], [209, 2, 1, "", "ParseDecodeVocTransform"], [209, 2, 1, "", "PyTorchAlignImageChannel"], [209, 2, 1, "", "PyTorchCropResizeTransform"], [209, 2, 1, "", "PyTorchNormalizeTransform"], [209, 2, 1, "", "PyTorchTransforms"], [209, 2, 1, "", "PyTorchTranspose"], [209, 2, 1, "", "PytorchMxnetTransform"], [209, 2, 1, "", "PytorchMxnetWrapFunction"], [209, 2, 1, "", "RandomCropTFTransform"], [209, 2, 1, "", "RandomCropTransform"], [209, 2, 1, "", "RandomHorizontalFlip"], [209, 2, 1, "", "RandomResizedCropMXNetTransform"], [209, 2, 1, "", "RandomResizedCropPytorchTransform"], [209, 2, 1, "", "RandomResizedCropTFTransform"], [209, 2, 1, "", "RandomResizedCropTransform"], [209, 2, 1, "", "RandomVerticalFlip"], [209, 2, 1, "", "RescaleKerasPretrainTransform"], [209, 2, 1, "", "RescaleTFTransform"], [209, 2, 1, "", "RescaleTransform"], [209, 2, 1, "", "ResizeMXNetTransform"], [209, 2, 1, "", "ResizePytorchTransform"], [209, 2, 1, "", "ResizeTFTransform"], [209, 2, 1, "", "ResizeTransform"], [209, 2, 1, "", "ResizeWithRatio"], [209, 2, 1, "", "SquadExample"], [209, 2, 1, "", "TFModelZooCollectTransform"], [209, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [209, 2, 1, "", "TFSquadV1PostTransform"], [209, 2, 1, "", "TRANSFORMS"], [209, 2, 1, "", "TensorflowCropToBoundingBox"], [209, 2, 1, "", "TensorflowRandomHorizontalFlip"], [209, 2, 1, "", "TensorflowRandomVerticalFlip"], [209, 2, 1, "", "TensorflowResizeWithRatio"], [209, 2, 1, "", "TensorflowTransform"], [209, 2, 1, "", "TensorflowTransforms"], [209, 2, 1, "", "TensorflowTranspose"], [209, 2, 1, "", "TensorflowWrapFunction"], [209, 2, 1, "", "ToArray"], [209, 2, 1, "", "ToNDArrayTransform"], [209, 2, 1, "", "Transforms"], [209, 2, 1, "", "Transpose"], [209, 1, 1, "", "convert_examples_to_features"], [209, 1, 1, "", "get_final_text"], [209, 1, 1, "", "get_torchvision_map"], [209, 1, 1, "", "read_squad_examples"], [209, 1, 1, "", "transform_registry"]], "neural_compressor.experimental": [[210, 0, 0, "-", "benchmark"], [213, 0, 0, "-", "common"], [219, 0, 0, "-", "component"], [220, 0, 0, "-", "compression"], [243, 0, 0, "-", "data"], [248, 0, 0, "-", "distillation"], [249, 0, 0, "-", "export"], [254, 0, 0, "-", "graph_optimization"], [262, 0, 0, "-", "metric"], [264, 0, 0, "-", "mixed_precision"], [265, 0, 0, "-", "model_conversion"], [268, 0, 0, "-", "nas"], [274, 0, 0, "-", "pruner_legacy"], [278, 0, 0, "-", "pruning"], [279, 0, 0, "-", "pruning_recipes"], [283, 0, 0, "-", "pruning_v2"], [284, 0, 0, "-", "pytorch_pruner"], [291, 0, 0, "-", "quantization"], [292, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.benchmark": [[210, 2, 1, "", "Benchmark"], [210, 1, 1, "", "get_architecture"], [210, 1, 1, "", "get_bounded_threads"], [210, 1, 1, "", "get_core_ids"], [210, 1, 1, "", "get_physical_ids"], [210, 1, 1, "", "get_threads"], [210, 1, 1, "", "get_threads_per_core"], [210, 1, 1, "", "set_all_env_var"], [210, 1, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[211, 0, 0, "-", "criterion"], [212, 0, 0, "-", "dataloader"], [214, 0, 0, "-", "metric"], [215, 0, 0, "-", "model"], [216, 0, 0, "-", "optimizer"], [217, 0, 0, "-", "postprocess"], [218, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[211, 2, 1, "", "Criterions"], [211, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [211, 2, 1, "", "KnowledgeDistillationFramework"], [211, 2, 1, "", "KnowledgeDistillationLoss"], [211, 2, 1, "", "PyTorchCriterions"], [211, 2, 1, "", "PyTorchCrossEntropyLoss"], [211, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [211, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [211, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [211, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [211, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [211, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [211, 2, 1, "", "SelfKnowledgeDistillationLoss"], [211, 2, 1, "", "TensorFlowCrossEntropyLoss"], [211, 2, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [211, 2, 1, "", "TensorflowCriterions"], [211, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [211, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [211, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [211, 1, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[212, 2, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[214, 2, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[215, 2, 1, "", "Model"], [215, 1, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[216, 2, 1, "", "Optimizers"], [216, 2, 1, "", "PyTorchOptimizers"], [216, 2, 1, "", "PyTorchSGD"], [216, 2, 1, "", "TensorFlowAdam"], [216, 2, 1, "", "TensorFlowAdamW"], [216, 2, 1, "", "TensorFlowSGD"], [216, 2, 1, "", "TensorflowOptimizers"], [216, 1, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[217, 2, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[218, 1, 1, "", "get_activation"], [218, 1, 1, "", "record_output"]], "neural_compressor.experimental.component": [[219, 2, 1, "", "Component"]], "neural_compressor.experimental.compression": [[221, 0, 0, "-", "pruning"]], "neural_compressor.experimental.compression.pruning": [[221, 1, 1, "", "prepare_pruning"], [221, 1, 1, "", "save"]], "neural_compressor.experimental.data": [[226, 0, 0, "-", "dataloaders"], [238, 0, 0, "-", "datasets"], [242, 0, 0, "-", "filters"], [245, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[222, 0, 0, "-", "base_dataloader"], [223, 0, 0, "-", "dataloader"], [224, 0, 0, "-", "default_dataloader"], [225, 0, 0, "-", "fetcher"], [227, 0, 0, "-", "mxnet_dataloader"], [228, 0, 0, "-", "onnxrt_dataloader"], [229, 0, 0, "-", "pytorch_dataloader"], [230, 0, 0, "-", "sampler"], [231, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[222, 2, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[224, 2, 1, "", "DefaultDataLoader"], [224, 1, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[225, 2, 1, "", "Fetcher"], [225, 2, 1, "", "IndexFetcher"], [225, 2, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[227, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[228, 2, 1, "", "ONNXRTBertDataLoader"], [228, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[229, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[230, 2, 1, "", "BatchSampler"], [230, 2, 1, "", "IterableSampler"], [230, 2, 1, "", "Sampler"], [230, 2, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[231, 2, 1, "", "TFDataDataLoader"], [231, 2, 1, "", "TensorflowBertDataLoader"], [231, 2, 1, "", "TensorflowDataLoader"], [231, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[232, 0, 0, "-", "bert_dataset"], [233, 0, 0, "-", "coco_dataset"], [234, 0, 0, "-", "dataset"], [235, 0, 0, "-", "dummy_dataset"], [236, 0, 0, "-", "dummy_dataset_v2"], [237, 0, 0, "-", "imagenet_dataset"], [239, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[232, 2, 1, "", "InputFeatures"], [232, 2, 1, "", "ONNXRTBertDataset"], [232, 2, 1, "", "ParseDecodeBert"], [232, 2, 1, "", "PytorchBertDataset"], [232, 2, 1, "", "TensorflowBertDataset"], [232, 2, 1, "", "TensorflowModelZooBertDataset"], [232, 1, 1, "", "convert_examples_to_features"], [232, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[233, 2, 1, "", "COCONpy"], [233, 2, 1, "", "COCORaw"], [233, 2, 1, "", "COCORecordDataset"], [233, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[234, 2, 1, "", "CIFAR10"], [234, 2, 1, "", "CIFAR100"], [234, 2, 1, "", "Dataset"], [234, 2, 1, "", "Datasets"], [234, 2, 1, "", "FashionMNIST"], [234, 2, 1, "", "ImageFolder"], [234, 2, 1, "", "IterableDataset"], [234, 2, 1, "", "MNIST"], [234, 2, 1, "", "MXNetCIFAR10"], [234, 2, 1, "", "MXNetCIFAR100"], [234, 2, 1, "", "MXNetDatasets"], [234, 2, 1, "", "MXNetFashionMNIST"], [234, 2, 1, "", "MXNetImageFolder"], [234, 2, 1, "", "MXNetMNIST"], [234, 2, 1, "", "ONNXRTITDatasets"], [234, 2, 1, "", "ONNXRTQLDatasets"], [234, 2, 1, "", "PyTorchDatasets"], [234, 2, 1, "", "PytorchCIFAR10"], [234, 2, 1, "", "PytorchCIFAR100"], [234, 2, 1, "", "PytorchFashionMNIST"], [234, 2, 1, "", "PytorchMNIST"], [234, 2, 1, "", "PytorchMxnetWrapDataset"], [234, 2, 1, "", "PytorchMxnetWrapFunction"], [234, 2, 1, "", "TensorflowCIFAR10"], [234, 2, 1, "", "TensorflowCIFAR100"], [234, 2, 1, "", "TensorflowDatasets"], [234, 2, 1, "", "TensorflowFashionMNIST"], [234, 2, 1, "", "TensorflowImageFolder"], [234, 2, 1, "", "TensorflowImageRecord"], [234, 2, 1, "", "TensorflowMNIST"], [234, 2, 1, "", "TensorflowTFRecordDataset"], [234, 2, 1, "", "TensorflowVOCRecord"], [234, 1, 1, "", "calculate_md5"], [234, 1, 1, "", "check_integrity"], [234, 1, 1, "", "dataset_registry"], [234, 1, 1, "", "download_url"], [234, 4, 1, "", "framework_datasets"], [234, 1, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[235, 2, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[236, 2, 1, "", "DummyDataset"], [236, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[237, 2, 1, "", "ImagenetRaw"], [237, 2, 1, "", "MXNetImagenetRaw"], [237, 2, 1, "", "ONNXRTImagenetDataset"], [237, 2, 1, "", "PytorchImagenetRaw"], [237, 2, 1, "", "TensorflowImagenetDataset"], [237, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[239, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[240, 0, 0, "-", "coco_filter"], [241, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[240, 2, 1, "", "LabelBalanceCOCORawFilter"], [240, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[241, 2, 1, "", "FILTERS"], [241, 2, 1, "", "Filter"], [241, 2, 1, "", "MXNetFilters"], [241, 2, 1, "", "ONNXRTITFilters"], [241, 2, 1, "", "ONNXRTQLFilters"], [241, 2, 1, "", "PyTorchFilters"], [241, 2, 1, "", "TensorflowFilters"], [241, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[244, 0, 0, "-", "imagenet_transform"], [246, 0, 0, "-", "tokenization"], [247, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[244, 2, 1, "", "BilinearImagenetTransform"], [244, 2, 1, "", "LabelShift"], [244, 2, 1, "", "ONNXResizeCropImagenetTransform"], [244, 2, 1, "", "OnnxBilinearImagenetTransform"], [244, 2, 1, "", "ParseDecodeImagenet"], [244, 2, 1, "", "ParseDecodeImagenetTransform"], [244, 2, 1, "", "QuantizedInput"], [244, 2, 1, "", "ResizeWithAspectRatio"], [244, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[246, 2, 1, "", "BasicTokenizer"], [246, 2, 1, "", "FullTokenizer"], [246, 2, 1, "", "WordpieceTokenizer"], [246, 1, 1, "", "convert_by_vocab"], [246, 1, 1, "", "convert_to_unicode"], [246, 1, 1, "", "load_vocab"], [246, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[247, 2, 1, "", "AlignImageChannelTransform"], [247, 2, 1, "", "BaseTransform"], [247, 2, 1, "", "CastONNXTransform"], [247, 2, 1, "", "CastPyTorchTransform"], [247, 2, 1, "", "CastTFTransform"], [247, 2, 1, "", "CenterCropTFTransform"], [247, 2, 1, "", "CenterCropTransform"], [247, 2, 1, "", "CollectTransform"], [247, 2, 1, "", "ComposeTransform"], [247, 2, 1, "", "CropResizeTFTransform"], [247, 2, 1, "", "CropResizeTransform"], [247, 2, 1, "", "CropToBoundingBox"], [247, 2, 1, "", "InputFeatures"], [247, 2, 1, "", "MXNetCropResizeTransform"], [247, 2, 1, "", "MXNetCropToBoundingBox"], [247, 2, 1, "", "MXNetNormalizeTransform"], [247, 2, 1, "", "MXNetTransforms"], [247, 2, 1, "", "MXNetTranspose"], [247, 2, 1, "", "NormalizeTFTransform"], [247, 2, 1, "", "NormalizeTransform"], [247, 2, 1, "", "ONNXRTCropToBoundingBox"], [247, 2, 1, "", "ONNXRTITTransforms"], [247, 2, 1, "", "ONNXRTQLTransforms"], [247, 2, 1, "", "PaddedCenterCropTransform"], [247, 2, 1, "", "ParseDecodeVocTransform"], [247, 2, 1, "", "PyTorchAlignImageChannel"], [247, 2, 1, "", "PyTorchCropResizeTransform"], [247, 2, 1, "", "PyTorchNormalizeTransform"], [247, 2, 1, "", "PyTorchTransforms"], [247, 2, 1, "", "PyTorchTranspose"], [247, 2, 1, "", "PytorchMxnetTransform"], [247, 2, 1, "", "PytorchMxnetWrapFunction"], [247, 2, 1, "", "RandomCropTFTransform"], [247, 2, 1, "", "RandomCropTransform"], [247, 2, 1, "", "RandomHorizontalFlip"], [247, 2, 1, "", "RandomResizedCropMXNetTransform"], [247, 2, 1, "", "RandomResizedCropPytorchTransform"], [247, 2, 1, "", "RandomResizedCropTFTransform"], [247, 2, 1, "", "RandomResizedCropTransform"], [247, 2, 1, "", "RandomVerticalFlip"], [247, 2, 1, "", "RescaleKerasPretrainTransform"], [247, 2, 1, "", "RescaleTFTransform"], [247, 2, 1, "", "RescaleTransform"], [247, 2, 1, "", "ResizeMXNetTransform"], [247, 2, 1, "", "ResizePytorchTransform"], [247, 2, 1, "", "ResizeTFTransform"], [247, 2, 1, "", "ResizeTransform"], [247, 2, 1, "", "ResizeWithRatio"], [247, 2, 1, "", "SquadExample"], [247, 2, 1, "", "TFModelZooCollectTransform"], [247, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [247, 2, 1, "", "TFSquadV1PostTransform"], [247, 2, 1, "", "TRANSFORMS"], [247, 2, 1, "", "TensorflowCropToBoundingBox"], [247, 2, 1, "", "TensorflowRandomHorizontalFlip"], [247, 2, 1, "", "TensorflowRandomVerticalFlip"], [247, 2, 1, "", "TensorflowResizeWithRatio"], [247, 2, 1, "", "TensorflowTransform"], [247, 2, 1, "", "TensorflowTransforms"], [247, 2, 1, "", "TensorflowTranspose"], [247, 2, 1, "", "TensorflowWrapFunction"], [247, 2, 1, "", "ToArray"], [247, 2, 1, "", "ToNDArrayTransform"], [247, 2, 1, "", "Transforms"], [247, 2, 1, "", "Transpose"], [247, 1, 1, "", "convert_examples_to_features"], [247, 1, 1, "", "get_final_text"], [247, 1, 1, "", "get_torchvision_map"], [247, 1, 1, "", "read_squad_examples"], [247, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[248, 2, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[248, 3, 1, "", "_epoch_ran"], [248, 3, 1, "", "best_model"], [248, 3, 1, "", "best_score"], [248, 3, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[250, 0, 0, "-", "qlinear2qdq"], [251, 0, 0, "-", "tf2onnx"], [252, 0, 0, "-", "torch2onnx"], [253, 0, 0, "-", "utils"]], "neural_compressor.experimental.export.qlinear2qdq": [[250, 1, 1, "", "check_model"], [250, 1, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[251, 1, 1, "", "tf_to_fp32_onnx"], [251, 1, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[252, 1, 1, "", "build_scale_mapping"], [252, 1, 1, "", "get_node_mapping"], [252, 1, 1, "", "get_quantizable_onnx_ops"], [252, 1, 1, "", "qdq_fp32_bias"], [252, 1, 1, "", "qdq_fp32_bias_qdq"], [252, 1, 1, "", "qdq_int32_bias"], [252, 1, 1, "", "recalculate_bias"], [252, 1, 1, "", "remove_nodes_by_name"], [252, 1, 1, "", "set_data_type"], [252, 1, 1, "", "set_scale_info"], [252, 1, 1, "", "sub_graph_with_int32_bias"], [252, 1, 1, "", "torch_to_fp32_onnx"], [252, 1, 1, "", "torch_to_int8_onnx"], [252, 1, 1, "", "update_weight_bias"]], "neural_compressor.experimental.export.utils": [[253, 2, 1, "", "DummyDataReader"], [253, 1, 1, "", "ONNX2Numpy_dtype"]], "neural_compressor.experimental.graph_optimization": [[254, 2, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[256, 0, 0, "-", "bleu"], [257, 0, 0, "-", "bleu_util"], [258, 0, 0, "-", "coco_label_map"], [259, 0, 0, "-", "coco_tools"], [260, 0, 0, "-", "evaluate_squad"], [261, 0, 0, "-", "f1"], [263, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[256, 2, 1, "", "BLEU"], [256, 2, 1, "", "UnicodeRegex"], [256, 1, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[256, 3, 1, "", "labels"], [256, 3, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[256, 3, 1, "", "nondigit_punct_re"], [256, 3, 1, "", "punct_nondigit_re"], [256, 3, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[257, 1, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[259, 2, 1, "", "COCOEvalWrapper"], [259, 2, 1, "", "COCOWrapper"], [259, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [259, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [259, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[259, 3, 1, "", "dataset"], [259, 3, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[260, 1, 1, "", "evaluate"], [260, 1, 1, "", "exact_match_score"], [260, 1, 1, "", "f1_score"], [260, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[261, 1, 1, "", "evaluate"], [261, 1, 1, "", "f1_score"], [261, 1, 1, "", "metric_max_over_ground_truths"], [261, 1, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[263, 2, 1, "", "Accuracy"], [263, 2, 1, "", "BaseMetric"], [263, 2, 1, "", "COCOmAPv2"], [263, 2, 1, "", "F1"], [263, 2, 1, "", "GeneralTopK"], [263, 2, 1, "", "Loss"], [263, 2, 1, "", "MAE"], [263, 2, 1, "", "METRICS"], [263, 2, 1, "", "MSE"], [263, 2, 1, "", "MXNetMetrics"], [263, 2, 1, "", "ONNXRTGLUE"], [263, 2, 1, "", "ONNXRTITMetrics"], [263, 2, 1, "", "ONNXRTQLMetrics"], [263, 2, 1, "", "PyTorchLoss"], [263, 2, 1, "", "PyTorchMetrics"], [263, 2, 1, "", "RMSE"], [263, 2, 1, "", "ROC"], [263, 2, 1, "", "SquadF1"], [263, 2, 1, "", "TensorflowCOCOMAP"], [263, 2, 1, "", "TensorflowMAP"], [263, 2, 1, "", "TensorflowMetrics"], [263, 2, 1, "", "TensorflowTopK"], [263, 2, 1, "", "TensorflowVOCMAP"], [263, 2, 1, "", "WrapMXNetMetric"], [263, 2, 1, "", "WrapONNXRTMetric"], [263, 2, 1, "", "WrapPyTorchMetric"], [263, 2, 1, "", "mIOU"], [263, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[263, 3, 1, "", "label_list"], [263, 3, 1, "", "pred_list"], [263, 3, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[263, 3, 1, "", "k"], [263, 3, 1, "", "num_correct"], [263, 3, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[263, 3, 1, "", "sample"], [263, 3, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[263, 3, 1, "", "compare_label"], [263, 3, 1, "", "label_list"], [263, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[263, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[263, 3, 1, "", "compare_label"], [263, 3, 1, "", "label_list"], [263, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[263, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[263, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[263, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[263, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[263, 3, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[263, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[263, 3, 1, "", "k"], [263, 3, 1, "", "num_correct"], [263, 3, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[264, 2, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[265, 2, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[266, 0, 0, "-", "basic_nas"], [267, 0, 0, "-", "dynas"], [269, 0, 0, "-", "nas"], [270, 0, 0, "-", "nas_utils"], [271, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[266, 2, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[267, 2, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[269, 2, 1, "", "NAS"], [269, 2, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[270, 1, 1, "", "create_search_space_pool"], [270, 1, 1, "", "find_pareto_front"], [270, 1, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[271, 2, 1, "", "BayesianOptimizationSearcher"], [271, 2, 1, "", "GridSearcher"], [271, 2, 1, "", "RandomSearcher"], [271, 2, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[272, 0, 0, "-", "gradient_sensitivity"], [273, 0, 0, "-", "group_lasso"], [275, 0, 0, "-", "magnitude"], [276, 0, 0, "-", "pattern_lock"], [277, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[272, 2, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[273, 2, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[275, 2, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[276, 2, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[277, 2, 1, "", "Pruner"], [277, 1, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[278, 2, 1, "", "Pruning"], [278, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[278, 3, 1, "", "conf"], [278, 3, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[280, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[281, 0, 0, "-", "pattern"], [282, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[281, 2, 1, "", "PATTERNS"], [281, 2, 1, "", "PatternBase"], [281, 1, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[281, 3, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[282, 2, 1, "", "TilePatternBase"], [282, 2, 1, "", "TilePattern_1x1"], [282, 2, 1, "", "TilePattern_1x16"], [282, 2, 1, "", "TilePattern_1x2"], [282, 2, 1, "", "TilePattern_2x2"], [282, 2, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[283, 2, 1, "", "Pruning"], [283, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[283, 3, 1, "", "conf"], [283, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[285, 0, 0, "-", "logger"], [286, 0, 0, "-", "patterns"], [287, 0, 0, "-", "prune_utils"], [288, 0, 0, "-", "pruner"], [289, 0, 0, "-", "pruning"], [290, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[286, 2, 1, "", "Pattern"], [286, 2, 1, "", "PatternNInM"], [286, 2, 1, "", "PatternNxM"], [286, 1, 1, "", "get_pattern"], [286, 1, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[286, 3, 1, "", "is_global"], [286, 3, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[286, 3, 1, "", "M"], [286, 3, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[286, 3, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[287, 1, 1, "", "check_config"], [287, 1, 1, "", "parse_not_to_prune"], [287, 1, 1, "", "parse_to_prune"], [287, 1, 1, "", "process_and_check_config"], [287, 1, 1, "", "process_config"], [287, 1, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[288, 2, 1, "", "MagnitudePruner"], [288, 2, 1, "", "PatternLockPruner"], [288, 2, 1, "", "Pruner"], [288, 2, 1, "", "SnipMomentumPruner"], [288, 2, 1, "", "SnipPruner"], [288, 1, 1, "", "get_pruner"], [288, 1, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[288, 3, 1, "", "config"], [288, 3, 1, "", "current_sparsity_ratio"], [288, 3, 1, "", "end_step"], [288, 3, 1, "", "global_step"], [288, 3, 1, "", "masks"], [288, 3, 1, "", "max_sparsity_ratio_per_layer"], [288, 3, 1, "", "modules"], [288, 3, 1, "", "pattern"], [288, 3, 1, "", "scheduler"], [288, 3, 1, "", "scores"], [288, 3, 1, "", "start_step"], [288, 3, 1, "", "target_sparsity_ratio"], [288, 3, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[289, 2, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[289, 3, 1, "", "config_file_path"], [289, 3, 1, "", "model"], [289, 3, 1, "", "pruner_info"], [289, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[290, 2, 1, "", "IterativeScheduler"], [290, 2, 1, "", "OneshotScheduler"], [290, 2, 1, "", "Scheduler"], [290, 1, 1, "", "get_scheduler"], [290, 1, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[290, 3, 1, "", "config"]], "neural_compressor.experimental.quantization": [[291, 2, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[292, 2, 1, "", "Scheduler"]], "neural_compressor.metric": [[294, 0, 0, "-", "bleu"], [295, 0, 0, "-", "bleu_util"], [296, 0, 0, "-", "coco_label_map"], [297, 0, 0, "-", "coco_tools"], [298, 0, 0, "-", "evaluate_squad"], [299, 0, 0, "-", "f1"], [301, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[294, 2, 1, "", "BLEU"], [294, 2, 1, "", "UnicodeRegex"], [294, 1, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[294, 3, 1, "", "labels"], [294, 3, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[294, 3, 1, "", "nondigit_punct_re"], [294, 3, 1, "", "punct_nondigit_re"], [294, 3, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[295, 1, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[297, 2, 1, "", "COCOEvalWrapper"], [297, 2, 1, "", "COCOWrapper"], [297, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [297, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [297, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[297, 3, 1, "", "dataset"], [297, 3, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[298, 1, 1, "", "evaluate"], [298, 1, 1, "", "exact_match_score"], [298, 1, 1, "", "f1_score"], [298, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[299, 1, 1, "", "evaluate"], [299, 1, 1, "", "f1_score"], [299, 1, 1, "", "metric_max_over_ground_truths"], [299, 1, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[301, 2, 1, "", "Accuracy"], [301, 2, 1, "", "BaseMetric"], [301, 2, 1, "", "COCOmAPv2"], [301, 2, 1, "", "F1"], [301, 2, 1, "", "GeneralTopK"], [301, 2, 1, "", "Loss"], [301, 2, 1, "", "MAE"], [301, 2, 1, "", "METRICS"], [301, 2, 1, "", "MSE"], [301, 2, 1, "", "MXNetMetrics"], [301, 2, 1, "", "Metric"], [301, 2, 1, "", "ONNXRTGLUE"], [301, 2, 1, "", "ONNXRTITMetrics"], [301, 2, 1, "", "ONNXRTQLMetrics"], [301, 2, 1, "", "PyTorchLoss"], [301, 2, 1, "", "PyTorchMetrics"], [301, 2, 1, "", "RMSE"], [301, 2, 1, "", "ROC"], [301, 2, 1, "", "SquadF1"], [301, 2, 1, "", "TensorflowCOCOMAP"], [301, 2, 1, "", "TensorflowMAP"], [301, 2, 1, "", "TensorflowMetrics"], [301, 2, 1, "", "TensorflowTopK"], [301, 2, 1, "", "TensorflowVOCMAP"], [301, 2, 1, "", "WrapMXNetMetric"], [301, 2, 1, "", "WrapONNXRTMetric"], [301, 2, 1, "", "WrapPyTorchMetric"], [301, 2, 1, "", "mIOU"], [301, 1, 1, "", "metric_registry"]], "neural_compressor.metric.metric.Accuracy": [[301, 3, 1, "", "label_list"], [301, 3, 1, "", "pred_list"], [301, 3, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[301, 3, 1, "", "k"], [301, 3, 1, "", "num_correct"], [301, 3, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[301, 3, 1, "", "sample"], [301, 3, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[301, 3, 1, "", "compare_label"], [301, 3, 1, "", "label_list"], [301, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[301, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[301, 3, 1, "", "compare_label"], [301, 3, 1, "", "label_list"], [301, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[301, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[301, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[301, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[301, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[301, 3, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[301, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[301, 3, 1, "", "k"], [301, 3, 1, "", "num_correct"], [301, 3, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[302, 1, 1, "", "fit"]], "neural_compressor.model": [[303, 0, 0, "-", "base_model"], [305, 0, 0, "-", "keras_model"], [306, 0, 0, "-", "model"], [307, 0, 0, "-", "mxnet_model"], [308, 0, 0, "-", "nets_factory"], [309, 0, 0, "-", "onnx_model"], [310, 0, 0, "-", "tensorflow_model"], [311, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[303, 2, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[305, 2, 1, "", "KerasModel"]], "neural_compressor.model.model": [[306, 2, 1, "", "Model"], [306, 1, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[307, 2, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[308, 2, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[309, 2, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[310, 2, 1, "", "TensorflowBaseModel"], [310, 2, 1, "", "TensorflowCheckpointModel"], [310, 2, 1, "", "TensorflowModel"], [310, 2, 1, "", "TensorflowQATModel"], [310, 2, 1, "", "TensorflowSavedModelModel"], [310, 1, 1, "", "checkpoint_session"], [310, 1, 1, "", "estimator_session"], [310, 1, 1, "", "frozen_pb_session"], [310, 1, 1, "", "get_model_type"], [310, 1, 1, "", "graph_def_session"], [310, 1, 1, "", "graph_session"], [310, 1, 1, "", "keras_session"], [310, 1, 1, "", "load_saved_model"], [310, 1, 1, "", "saved_model_session"], [310, 1, 1, "", "slim_session"], [310, 1, 1, "", "validate_and_inference_input_output"], [310, 1, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[311, 2, 1, "", "IPEXModel"], [311, 2, 1, "", "PyTorchBaseModel"], [311, 2, 1, "", "PyTorchFXModel"], [311, 2, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[312, 2, 1, "", "Accuracy"], [312, 2, 1, "", "Footprint"], [312, 2, 1, "", "ModelSize"], [312, 2, 1, "", "MultiObjective"], [312, 2, 1, "", "Objective"], [312, 2, 1, "", "Performance"], [312, 1, 1, "", "objective_custom_registry"], [312, 1, 1, "", "objective_registry"]], "neural_compressor.quantization": [[313, 1, 1, "", "fit"]], "neural_compressor.strategy": [[314, 0, 0, "-", "auto"], [315, 0, 0, "-", "auto_mixed_precision"], [316, 0, 0, "-", "basic"], [317, 0, 0, "-", "bayesian"], [318, 0, 0, "-", "conservative"], [319, 0, 0, "-", "exhaustive"], [320, 0, 0, "-", "hawq_v2"], [322, 0, 0, "-", "mse"], [323, 0, 0, "-", "mse_v2"], [324, 0, 0, "-", "random"], [325, 0, 0, "-", "strategy"], [327, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[314, 2, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[315, 2, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[316, 2, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[317, 2, 1, "", "BayesianOptimization"], [317, 2, 1, "", "BayesianTuneStrategy"], [317, 2, 1, "", "TargetSpace"], [317, 1, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[318, 2, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[319, 2, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[320, 2, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[322, 2, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[323, 2, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[324, 2, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[325, 2, 1, "", "TuneStrategy"], [325, 1, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[326, 0, 0, "-", "constant"], [328, 0, 0, "-", "tuning_sampler"], [329, 0, 0, "-", "tuning_space"], [330, 0, 0, "-", "tuning_structs"], [331, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[328, 2, 1, "", "FallbackTuningSampler"], [328, 2, 1, "", "ModelWiseTuningSampler"], [328, 2, 1, "", "OpTypeWiseTuningSampler"], [328, 2, 1, "", "OpWiseTuningSampler"], [328, 2, 1, "", "TuningOrder"], [328, 2, 1, "", "TuningSampler"], [328, 2, 1, "", "TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_space": [[329, 2, 1, "", "TuningItem"], [329, 2, 1, "", "TuningSpace"], [329, 1, 1, "", "get_op_mode_by_query_order"], [329, 1, 1, "", "initial_tuning_cfg_with_quant_mode"], [329, 1, 1, "", "pattern_to_internal"], [329, 1, 1, "", "pattern_to_path"], [329, 1, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[330, 2, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[331, 2, 1, "", "OrderedDefaultDict"], [331, 1, 1, "", "extract_data_type"], [331, 1, 1, "", "get_adaptor_name"], [331, 1, 1, "", "reverted_data_type"]], "neural_compressor.template": [[332, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[332, 2, 1, "", "ExampleClass"], [332, 3, 1, "", "attribute1"], [332, 1, 1, "", "function1"], [332, 1, 1, "", "function2"], [332, 1, 1, "", "function3"], [332, 1, 1, "", "generator1"], [332, 4, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[332, 3, 1, "", "attr1"], [332, 3, 1, "", "attr2"], [332, 3, 1, "", "attr5"]], "neural_compressor.training": [[334, 2, 1, "", "CallBacks"], [334, 2, 1, "", "CompressionManager"], [334, 1, 1, "", "fit"], [334, 1, 1, "", "prepare_compression"]], "neural_compressor.utils": [[335, 0, 0, "-", "collect_layer_histogram"], [336, 0, 0, "-", "constant"], [337, 0, 0, "-", "create_obj_from_config"], [339, 0, 0, "-", "kl_divergence"], [340, 0, 0, "-", "load_huggingface"], [341, 0, 0, "-", "logger"], [342, 0, 0, "-", "options"], [343, 0, 0, "-", "pytorch"], [344, 0, 0, "-", "utility"]], "neural_compressor.utils.collect_layer_histogram": [[335, 2, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[337, 1, 1, "", "create_dataloader"], [337, 1, 1, "", "create_dataset"], [337, 1, 1, "", "create_eval_func"], [337, 1, 1, "", "create_train_func"], [337, 1, 1, "", "get_algorithm"], [337, 1, 1, "", "get_func_from_config"], [337, 1, 1, "", "get_metrics"], [337, 1, 1, "", "get_postprocess"], [337, 1, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[339, 2, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[340, 2, 1, "", "OptimizedModel"], [340, 1, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[341, 2, 1, "", "Logger"], [341, 1, 1, "", "debug"], [341, 1, 1, "", "error"], [341, 1, 1, "", "fatal"], [341, 1, 1, "", "info"], [341, 1, 1, "", "log"], [341, 1, 1, "", "warn"], [341, 1, 1, "", "warning"]], "neural_compressor.utils.options": [[342, 2, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[343, 1, 1, "", "is_int8_model"], [343, 1, 1, "", "load"]], "neural_compressor.utils.utility": [[344, 2, 1, "", "CaptureOutputToFile"], [344, 2, 1, "", "CpuInfo"], [344, 1, 1, "", "Dequantize"], [344, 1, 1, "", "DequantizeWeight"], [344, 2, 1, "", "GLOBAL_STATE"], [344, 2, 1, "", "LazyImport"], [344, 2, 1, "", "MODE"], [344, 2, 1, "", "Statistics"], [344, 1, 1, "", "combine_histogram"], [344, 1, 1, "", "compute_sparsity"], [344, 1, 1, "", "dump_data_to_local"], [344, 1, 1, "", "dump_elapsed_time"], [344, 1, 1, "", "equal_dicts"], [344, 1, 1, "", "fault_tolerant_file"], [344, 1, 1, "", "get_all_fp32_data"], [344, 1, 1, "", "get_size"], [344, 1, 1, "", "get_tensor_histogram"], [344, 1, 1, "", "get_tuning_history"], [344, 1, 1, "", "load_data_from_pkl"], [344, 1, 1, "", "recover"], [344, 1, 1, "", "set_random_seed"], [344, 1, 1, "", "set_resume_from"], [344, 1, 1, "", "set_tensorboard"], [344, 1, 1, "", "set_workspace"], [344, 1, 1, "", "show_memory_info"], [344, 1, 1, "", "singleton"], [344, 1, 1, "", "str2array"], [344, 1, 1, "", "time_limit"], [344, 1, 1, "", "version1_eq_version2"], [344, 1, 1, "", "version1_gt_version2"], [344, 1, 1, "", "version1_gte_version2"], [344, 1, 1, "", "version1_lt_version2"], [344, 1, 1, "", "version1_lte_version2"]], "neural_compressor.ux": [[420, 0, 0, "-", "components"], [479, 0, 0, "-", "inc_bench"], [488, 0, 0, "-", "utils"], [514, 0, 0, "-", "web"]], "neural_compressor.ux.components": [[348, 0, 0, "-", "benchmark"], [352, 0, 0, "-", "config_generator"], [360, 0, 0, "-", "configuration_wizard"], [396, 0, 0, "-", "db_manager"], [401, 0, 0, "-", "diagnosis"], [409, 0, 0, "-", "file_browser"], [415, 0, 0, "-", "graph"], [421, 0, 0, "-", "jobs_management"], [425, 0, 0, "-", "manage_workspace"], [427, 0, 0, "-", "model"], [446, 0, 0, "-", "model_zoo"], [448, 0, 0, "-", "names_mapper"], [455, 0, 0, "-", "optimization"], [471, 0, 0, "-", "profiling"]], "neural_compressor.ux.components.benchmark": [[348, 2, 1, "", "Benchmarks"], [345, 0, 0, "-", "benchmark"], [346, 0, 0, "-", "benchmark_model"], [347, 0, 0, "-", "execute_benchmark"]], "neural_compressor.ux.components.benchmark.benchmark": [[345, 2, 1, "", "Benchmark"], [345, 2, 1, "", "DataloaderInterface"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[346, 1, 1, "", "benchmark_model"], [346, 1, 1, "", "parse_args"], [346, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[347, 1, 1, "", "benchmark_result_update"], [347, 1, 1, "", "benchmark_result_update_pytorch_script"], [347, 1, 1, "", "execute_benchmark"], [347, 1, 1, "", "execute_real_benchmark"], [347, 1, 1, "", "pytorch_script_bench_optimizations"], [347, 1, 1, "", "pytorch_script_bench_original_model"]], "neural_compressor.ux.components.config_generator": [[349, 0, 0, "-", "benchmark_config_generator"], [350, 0, 0, "-", "config_generator"], [351, 0, 0, "-", "graph_optimization_config_generator"], [353, 0, 0, "-", "mixed_precision_config_generator"], [354, 0, 0, "-", "profiling_config_generator"], [355, 0, 0, "-", "pruning_config_generator"], [356, 0, 0, "-", "quantization_config_generator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[349, 2, 1, "", "BenchmarkConfigGenerator"]], "neural_compressor.ux.components.config_generator.config_generator": [[350, 2, 1, "", "ConfigGenerator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[351, 2, 1, "", "GraphOptimizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[353, 2, 1, "", "MixedPrecisionConfigGenerator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[354, 2, 1, "", "ProfilingConfigGenerator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[355, 2, 1, "", "PruningConfigGenerator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[356, 2, 1, "", "QuantizationConfigGenerator"]], "neural_compressor.ux.components.configuration_wizard": [[357, 0, 0, "-", "configuration_parser"], [358, 0, 0, "-", "get_boundary_nodes"], [359, 0, 0, "-", "get_configuration"], [361, 0, 0, "-", "params_feeder"], [362, 0, 0, "-", "pruning_config_parser"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[357, 2, 1, "", "ConfigurationParser"], [357, 1, 1, "", "normalize_string_list"], [357, 1, 1, "", "parse_list_value"], [357, 1, 1, "", "parse_multidim_list"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[358, 1, 1, "", "get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[359, 1, 1, "", "get_predefined_configuration"], [359, 1, 1, "", "update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[361, 2, 1, "", "Feeder"], [361, 1, 1, "", "get_possible_values"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[362, 2, 1, "", "PruningConfigParser"]], "neural_compressor.ux.components.db_manager": [[363, 0, 0, "-", "db_manager"], [372, 0, 0, "-", "db_models"], [391, 0, 0, "-", "db_operations"], [397, 0, 0, "-", "params_interfaces"], [398, 0, 0, "-", "utils"]], "neural_compressor.ux.components.db_manager.db_manager": [[363, 2, 1, "", "DBManager"]], "neural_compressor.ux.components.db_manager.db_models": [[364, 0, 0, "-", "benchmark"], [365, 0, 0, "-", "benchmark_result"], [366, 0, 0, "-", "dataloader"], [367, 0, 0, "-", "dataset"], [368, 0, 0, "-", "domain"], [369, 0, 0, "-", "domain_flavour"], [370, 0, 0, "-", "example"], [371, 0, 0, "-", "framework"], [373, 0, 0, "-", "metric"], [374, 0, 0, "-", "model"], [375, 0, 0, "-", "optimization"], [376, 0, 0, "-", "optimization_type"], [377, 0, 0, "-", "precision"], [378, 0, 0, "-", "profiling"], [379, 0, 0, "-", "profiling_result"], [380, 0, 0, "-", "project"], [381, 0, 0, "-", "pruning_details"], [382, 0, 0, "-", "transform"], [383, 0, 0, "-", "tuning_details"], [384, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[364, 2, 1, "", "Benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[365, 2, 1, "", "BenchmarkResult"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[366, 2, 1, "", "Dataloader"], [366, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[367, 2, 1, "", "Dataset"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[368, 2, 1, "", "Domain"], [368, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[369, 2, 1, "", "DomainFlavour"], [369, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.example": [[370, 2, 1, "", "Example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[371, 2, 1, "", "Framework"], [371, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[373, 2, 1, "", "Metric"], [373, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.model": [[374, 2, 1, "", "Model"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[375, 2, 1, "", "Optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[376, 2, 1, "", "OptimizationType"], [376, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[377, 2, 1, "", "Precision"], [377, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[378, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[379, 2, 1, "", "ProfilingResult"]], "neural_compressor.ux.components.db_manager.db_models.project": [[380, 2, 1, "", "Project"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[381, 2, 1, "", "PruningDetails"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[382, 2, 1, "", "Transform"], [382, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[383, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[384, 2, 1, "", "TuningHistory"]], "neural_compressor.ux.components.db_manager.db_operations": [[385, 0, 0, "-", "benchmark_api_interface"], [386, 0, 0, "-", "dataset_api_interface"], [387, 0, 0, "-", "db_operations"], [388, 0, 0, "-", "diagnosis_api_interface"], [389, 0, 0, "-", "dictionaries_api_interface"], [390, 0, 0, "-", "examples_api_interface"], [392, 0, 0, "-", "model_api_interface"], [393, 0, 0, "-", "optimization_api_interface"], [394, 0, 0, "-", "profiling_api_interface"], [395, 0, 0, "-", "project_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[385, 2, 1, "", "BenchmarkAPIInterface"], [385, 1, 1, "", "before_delete_benchmark_entry"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[386, 2, 1, "", "DatasetAPIInterface"], [386, 1, 1, "", "initialize_associations"], [386, 1, 1, "", "initialize_precision_optimization_types_association"], [386, 1, 1, "", "search_in_list_of_dict"], [386, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [386, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[387, 1, 1, "", "initialize_associations"], [387, 1, 1, "", "initialize_precision_optimization_types_association"], [387, 1, 1, "", "search_in_list_of_dict"], [387, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [387, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[388, 2, 1, "", "DiagnosisAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[389, 2, 1, "", "DictionariesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[390, 2, 1, "", "ExamplesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[392, 2, 1, "", "ModelAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[393, 2, 1, "", "OptimizationAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[394, 2, 1, "", "ProfilingAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[395, 2, 1, "", "ProjectAPIInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[397, 2, 1, "", "BenchmarkAddParamsInterface"], [397, 2, 1, "", "BenchmarkEditParamsInterface"], [397, 2, 1, "", "DatasetAddParamsInterface"], [397, 2, 1, "", "DiagnosisOptimizationParamsInterface"], [397, 2, 1, "", "ModelAddParamsInterface"], [397, 2, 1, "", "OptimizationAddParamsInterface"], [397, 2, 1, "", "OptimizationEditParamsInterface"], [397, 2, 1, "", "ProfilingAddParamsInterface"], [397, 2, 1, "", "ProfilingEditParamsInterface"], [397, 2, 1, "", "ProfilingResultAddParamsInterface"], [397, 2, 1, "", "TuningHistoryInterface"], [397, 2, 1, "", "TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.utils": [[398, 1, 1, "", "get_framework_dataloaders_config"], [398, 1, 1, "", "get_framework_transforms_config"], [398, 1, 1, "", "update_dataloaders_params"]], "neural_compressor.ux.components.diagnosis": [[399, 0, 0, "-", "diagnosis"], [400, 0, 0, "-", "factory"], [402, 0, 0, "-", "onnx_diagnosis"], [404, 0, 0, "-", "op_details"], [405, 0, 0, "-", "op_entry"], [406, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[399, 2, 1, "", "Diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[400, 2, 1, "", "DiagnosisFactory"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[403, 0, 0, "-", "onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[403, 2, 1, "", "OnnxRtDiagnosis"]], "neural_compressor.ux.components.diagnosis.op_details": [[404, 2, 1, "", "OpActivation"], [404, 2, 1, "", "OpDetails"], [404, 2, 1, "", "OpPattern"], [404, 2, 1, "", "OpWeights"]], "neural_compressor.ux.components.diagnosis.op_entry": [[405, 2, 1, "", "OpEntry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[407, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[407, 2, 1, "", "TensorflowDiagnosis"]], "neural_compressor.ux.components.file_browser": [[408, 0, 0, "-", "file_browser"]], "neural_compressor.ux.components.file_browser.file_browser": [[408, 1, 1, "", "create_dir_entry"], [408, 1, 1, "", "create_entry"], [408, 1, 1, "", "create_file_entry"], [408, 1, 1, "", "filter_requested_entries"], [408, 1, 1, "", "get_directory_entries"], [408, 1, 1, "", "get_filter_value"], [408, 1, 1, "", "get_non_hidden_directory_entries"], [408, 1, 1, "", "get_requested_path"], [408, 1, 1, "", "get_setting_value"], [408, 1, 1, "", "is_dataset_or_directory_entry"], [408, 1, 1, "", "is_directory_entry"], [408, 1, 1, "", "is_model_or_directory_entry"], [408, 1, 1, "", "should_show_files"], [408, 1, 1, "", "should_show_only_model_files"], [408, 1, 1, "", "sort_entries"]], "neural_compressor.ux.components.graph": [[410, 0, 0, "-", "attribute"], [411, 0, 0, "-", "collapser"], [412, 0, 0, "-", "edge"], [413, 0, 0, "-", "graph"], [414, 0, 0, "-", "graph_reader"], [416, 0, 0, "-", "node"], [417, 0, 0, "-", "reader"]], "neural_compressor.ux.components.graph.attribute": [[410, 2, 1, "", "Attribute"]], "neural_compressor.ux.components.graph.collapser": [[411, 2, 1, "", "Collapser"]], "neural_compressor.ux.components.graph.edge": [[412, 2, 1, "", "Edge"]], "neural_compressor.ux.components.graph.graph": [[413, 2, 1, "", "Graph"]], "neural_compressor.ux.components.graph.graph_reader": [[414, 2, 1, "", "GraphReader"]], "neural_compressor.ux.components.graph.node": [[416, 2, 1, "", "GroupNode"], [416, 2, 1, "", "Node"]], "neural_compressor.ux.components.graph.reader": [[418, 0, 0, "-", "onnxrt_reader"], [419, 0, 0, "-", "tensorflow_reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[418, 2, 1, "", "OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[419, 2, 1, "", "TensorflowReader"]], "neural_compressor.ux.components.jobs_management": [[422, 0, 0, "-", "jobs_control_queue"], [423, 0, 0, "-", "jobs_manager"], [424, 0, 0, "-", "request"]], "neural_compressor.ux.components.manage_workspace": [[425, 1, 1, "", "get_default_path"]], "neural_compressor.ux.components.model": [[426, 0, 0, "-", "domain"], [428, 0, 0, "-", "model"], [429, 0, 0, "-", "model_type_getter"], [430, 0, 0, "-", "onnxrt"], [432, 0, 0, "-", "pytorch"], [434, 0, 0, "-", "repository"], [435, 0, 0, "-", "shape"], [437, 0, 0, "-", "tensorflow"]], "neural_compressor.ux.components.model.domain": [[426, 2, 1, "", "Domain"]], "neural_compressor.ux.components.model.model": [[428, 2, 1, "", "Model"]], "neural_compressor.ux.components.model.model_type_getter": [[429, 1, 1, "", "get_model_type"]], "neural_compressor.ux.components.model.onnxrt": [[431, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.onnxrt.model": [[431, 2, 1, "", "OnnxrtModel"], [431, 1, 1, "", "remove_number_of_samples_from_shape"]], "neural_compressor.ux.components.model.pytorch": [[433, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.pytorch.model": [[433, 2, 1, "", "PyTorchScriptModel"]], "neural_compressor.ux.components.model.repository": [[434, 2, 1, "", "ModelRepository"]], "neural_compressor.ux.components.model.shape": [[435, 2, 1, "", "Shape"]], "neural_compressor.ux.components.model.tensorflow": [[436, 0, 0, "-", "frozen_pb"], [438, 0, 0, "-", "keras"], [439, 0, 0, "-", "meta_graph"], [440, 0, 0, "-", "model"], [441, 0, 0, "-", "saved_model"], [442, 0, 0, "-", "utils"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[436, 2, 1, "", "FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.keras": [[438, 2, 1, "", "KerasModel"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[439, 2, 1, "", "MetaGraphModel"]], "neural_compressor.ux.components.model.tensorflow.model": [[440, 2, 1, "", "TensorflowModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[441, 2, 1, "", "SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.utils": [[442, 1, 1, "", "get_input_shape"]], "neural_compressor.ux.components.model_zoo": [[443, 0, 0, "-", "download_config"], [444, 0, 0, "-", "download_model"], [445, 0, 0, "-", "downloader"], [447, 0, 0, "-", "list_models"]], "neural_compressor.ux.components.model_zoo.download_config": [[443, 1, 1, "", "download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[444, 1, 1, "", "download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[445, 2, 1, "", "Downloader"]], "neural_compressor.ux.components.model_zoo.list_models": [[447, 1, 1, "", "check_version"], [447, 1, 1, "", "get_available_models"], [447, 1, 1, "", "get_framework_module_name"], [447, 1, 1, "", "get_installed_frameworks"], [447, 1, 1, "", "list_models"], [447, 1, 1, "", "validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[449, 0, 0, "-", "names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[449, 2, 1, "", "MappingDirection"], [449, 2, 1, "", "NamesMapper"]], "neural_compressor.ux.components.optimization": [[455, 2, 1, "", "Optimizations"], [450, 0, 0, "-", "execute_optimization"], [451, 0, 0, "-", "factory"], [453, 0, 0, "-", "graph_optimizer"], [456, 0, 0, "-", "mixed_precision"], [459, 0, 0, "-", "neural_coder_optimization"], [461, 0, 0, "-", "optimization"], [462, 0, 0, "-", "pruning"], [465, 0, 0, "-", "tune"], [468, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.optimization.execute_optimization": [[450, 1, 1, "", "check_if_collect_tuning_history"], [450, 1, 1, "", "execute_optimization"], [450, 1, 1, "", "execute_optimization_pytorch_script"], [450, 1, 1, "", "execute_optimization_regular"], [450, 1, 1, "", "parse_logs"], [450, 1, 1, "", "parse_model_data_to_bench_names"]], "neural_compressor.ux.components.optimization.factory": [[451, 2, 1, "", "OptimizationFactory"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[452, 0, 0, "-", "graph_optimization"], [454, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[452, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[454, 1, 1, "", "optimize_graph"], [454, 1, 1, "", "optimize_graph_config"], [454, 1, 1, "", "parse_args"], [454, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.mixed_precision": [[457, 0, 0, "-", "mixed_precision"], [458, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[457, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[458, 1, 1, "", "optimize_graph"], [458, 1, 1, "", "optimize_graph_config"], [458, 1, 1, "", "parse_args"], [458, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[460, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[460, 1, 1, "", "optimize_pt_script"]], "neural_compressor.ux.components.optimization.optimization": [[461, 2, 1, "", "DataloaderInterface"], [461, 2, 1, "", "Optimization"], [461, 2, 1, "", "OptimizationInterface"]], "neural_compressor.ux.components.optimization.pruning": [[463, 0, 0, "-", "optimize_model"], [464, 0, 0, "-", "pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[463, 1, 1, "", "optimize_model"], [463, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[464, 2, 1, "", "Pruning"]], "neural_compressor.ux.components.optimization.tune": [[466, 0, 0, "-", "tune_model"], [467, 0, 0, "-", "tuning"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[466, 1, 1, "", "parse_args"], [466, 1, 1, "", "set_eager_execution"], [466, 1, 1, "", "tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[467, 2, 1, "", "AccuracyCriterion"], [467, 2, 1, "", "Tuning"], [467, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.optimization.tuning_history": [[468, 2, 1, "", "TuningHistory"], [468, 2, 1, "", "Watcher"], [468, 1, 1, "", "tuning_history"], [468, 1, 1, "", "tuning_history_path"]], "neural_compressor.ux.components.profiling": [[469, 0, 0, "-", "execute_profiling"], [470, 0, 0, "-", "factory"], [472, 0, 0, "-", "profile_model"], [473, 0, 0, "-", "profiler"], [474, 0, 0, "-", "profiling"], [476, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.ux.components.profiling.execute_profiling": [[469, 1, 1, "", "execute_profiling"], [469, 1, 1, "", "execute_real_profiling"]], "neural_compressor.ux.components.profiling.factory": [[470, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.profile_model": [[472, 1, 1, "", "load_profiling_details"], [472, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.profiling.profiler": [[473, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.profiling": [[474, 2, 1, "", "DataloaderInterface"], [474, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[475, 0, 0, "-", "factory"], [477, 0, 0, "-", "profiler"], [478, 0, 0, "-", "utils"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[475, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[477, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[478, 1, 1, "", "delete_assign"]], "neural_compressor.ux.inc_bench": [[479, 1, 1, "", "main"], [479, 1, 1, "", "prepare_environment"]], "neural_compressor.ux.utils": [[481, 0, 0, "-", "consts"], [482, 0, 0, "-", "environment"], [483, 0, 0, "-", "exceptions"], [484, 0, 0, "-", "executor"], [485, 0, 0, "-", "expiring_dict"], [486, 0, 0, "-", "github_info"], [487, 0, 0, "-", "hw_info"], [489, 0, 0, "-", "json_serializer"], [490, 0, 0, "-", "logger"], [491, 0, 0, "-", "parser"], [492, 0, 0, "-", "proc"], [493, 0, 0, "-", "processes"], [494, 0, 0, "-", "singleton"], [495, 0, 0, "-", "status_updates"], [496, 0, 0, "-", "templates"], [499, 0, 0, "-", "utils"], [504, 0, 0, "-", "workload"], [510, 0, 0, "-", "yaml_utils"]], "neural_compressor.ux.utils.consts": [[481, 2, 1, "", "DomainFlavours"], [481, 2, 1, "", "Domains"], [481, 2, 1, "", "ExecutionStatus"], [481, 2, 1, "", "Frameworks"], [481, 2, 1, "", "OptimizationTypes"], [481, 2, 1, "", "Precisions"], [481, 2, 1, "", "Strategies"]], "neural_compressor.ux.utils.environment": [[482, 2, 1, "", "Environment"]], "neural_compressor.ux.utils.exceptions": [[483, 5, 1, "", "AccessDeniedException"], [483, 5, 1, "", "ClientErrorException"], [483, 5, 1, "", "InternalException"], [483, 5, 1, "", "NotFoundException"]], "neural_compressor.ux.utils.executor": [[484, 2, 1, "", "Executor"]], "neural_compressor.ux.utils.expiring_dict": [[485, 2, 1, "", "ExpiringDict"], [485, 2, 1, "", "ExpiringDictItem"]], "neural_compressor.ux.utils.github_info": [[486, 2, 1, "", "GithubInfo"]], "neural_compressor.ux.utils.hw_info": [[487, 2, 1, "", "HWInfo"], [487, 1, 1, "", "get_bios_version"], [487, 1, 1, "", "get_distribution"], [487, 1, 1, "", "get_framework_dependency_info"], [487, 1, 1, "", "get_framework_info"], [487, 1, 1, "", "get_kernel_version"], [487, 1, 1, "", "get_number_of_sockets"], [487, 1, 1, "", "is_turbo_boost_enabled"]], "neural_compressor.ux.utils.json_serializer": [[489, 2, 1, "", "JsonSerializer"]], "neural_compressor.ux.utils.logger": [[490, 1, 1, "", "change_log_level"]], "neural_compressor.ux.utils.parser": [[491, 2, 1, "", "AccuracyParser"], [491, 2, 1, "", "BenchmarkParserFactory"], [491, 2, 1, "", "OptimizationParser"], [491, 2, 1, "", "Parser"], [491, 2, 1, "", "PerformanceParser"], [491, 2, 1, "", "ProfilingParser"]], "neural_compressor.ux.utils.proc": [[492, 2, 1, "", "Proc"]], "neural_compressor.ux.utils.processes": [[493, 2, 1, "", "NCProcesses"]], "neural_compressor.ux.utils.singleton": [[494, 2, 1, "", "Singleton"]], "neural_compressor.ux.utils.status_updates": [[495, 1, 1, "", "get_status_update_function"]], "neural_compressor.ux.utils.templates": [[497, 0, 0, "-", "metric"], [498, 0, 0, "-", "workdir"]], "neural_compressor.ux.utils.templates.metric": [[497, 2, 1, "", "Metric"]], "neural_compressor.ux.utils.templates.workdir": [[498, 2, 1, "", "Workdir"]], "neural_compressor.ux.utils.utils": [[499, 1, 1, "", "are_archive_filenames_valid"], [499, 1, 1, "", "check_module"], [499, 1, 1, "", "deprecated"], [499, 1, 1, "", "determine_ip"], [499, 1, 1, "", "export_to_csv"], [499, 1, 1, "", "filter_transforms"], [499, 1, 1, "", "get_dataset_path"], [499, 1, 1, "", "get_default_pruning_config_path"], [499, 1, 1, "", "get_file_extension"], [499, 1, 1, "", "get_framework_from_path"], [499, 1, 1, "", "get_height_width_from_size"], [499, 1, 1, "", "get_metrics_dict"], [499, 1, 1, "", "get_model_zoo_config_path"], [499, 1, 1, "", "get_model_zoo_model_path"], [499, 1, 1, "", "get_module_version"], [499, 1, 1, "", "get_predefined_config_path"], [499, 1, 1, "", "get_shape_from_transforms"], [499, 1, 1, "", "get_size"], [499, 1, 1, "", "is_dataset_file"], [499, 1, 1, "", "is_development_env"], [499, 1, 1, "", "is_hidden"], [499, 1, 1, "", "load_dataloader_config"], [499, 1, 1, "", "load_help_nc_params"], [499, 1, 1, "", "load_metrics_config"], [499, 1, 1, "", "load_model_config"], [499, 1, 1, "", "load_model_wise_params"], [499, 1, 1, "", "load_precisions_config"], [499, 1, 1, "", "load_pruning_details_config"], [499, 1, 1, "", "load_transforms_config"], [499, 1, 1, "", "load_transforms_filter_config"], [499, 1, 1, "", "normalize_domain"], [499, 1, 1, "", "normalize_framework"], [499, 1, 1, "", "normalize_string"], [499, 1, 1, "", "parse_bool_value"], [499, 1, 1, "", "parse_to_float_list"], [499, 1, 1, "", "parse_to_string_list"], [499, 1, 1, "", "parse_version"], [499, 1, 1, "", "release_tag"], [499, 1, 1, "", "replace_with_values"], [499, 1, 1, "", "safe_extract_archive"], [499, 1, 1, "", "verify_file_path"]], "neural_compressor.ux.utils.workload": [[500, 0, 0, "-", "config"], [501, 0, 0, "-", "dataloader"], [502, 0, 0, "-", "evaluation"], [503, 0, 0, "-", "graph_optimization"], [505, 0, 0, "-", "mixed_precision"], [506, 0, 0, "-", "model"], [507, 0, 0, "-", "pruning"], [508, 0, 0, "-", "quantization"], [509, 0, 0, "-", "tuning"]], "neural_compressor.ux.utils.workload.config": [[500, 2, 1, "", "Config"]], "neural_compressor.ux.utils.workload.dataloader": [[501, 2, 1, "", "Dataloader"], [501, 2, 1, "", "Dataset"], [501, 2, 1, "", "Filter"], [501, 2, 1, "", "LabelBalance"], [501, 2, 1, "", "Transform"]], "neural_compressor.ux.utils.workload.evaluation": [[502, 2, 1, "", "Accuracy"], [502, 2, 1, "", "Configs"], [502, 2, 1, "", "Evaluation"], [502, 2, 1, "", "Metric"], [502, 2, 1, "", "Performance"], [502, 2, 1, "", "Postprocess"], [502, 2, 1, "", "PostprocessSchema"]], "neural_compressor.ux.utils.workload.graph_optimization": [[503, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.utils.workload.mixed_precision": [[505, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.utils.workload.model": [[506, 2, 1, "", "Model"]], "neural_compressor.ux.utils.workload.pruning": [[507, 2, 1, "", "AdamOptimizer"], [507, 2, 1, "", "AdamWOptimizer"], [507, 2, 1, "", "Approach"], [507, 2, 1, "", "Criterion"], [507, 2, 1, "", "CrossEntropyLossCriterion"], [507, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [507, 2, 1, "", "KnowledgeDistillationLossCriterion"], [507, 2, 1, "", "Optimizer"], [507, 2, 1, "", "Pruning"], [507, 2, 1, "", "SGDOptimizer"], [507, 2, 1, "", "SelfKnowledgeDistillationLoss"], [507, 2, 1, "", "SparseCategoricalCrossentropyCriterion"], [507, 2, 1, "", "Train"], [507, 2, 1, "", "WeightCompressionApproach"], [507, 1, 1, "", "parse_dict_value_to_float"], [507, 1, 1, "", "parse_dict_value_to_int"]], "neural_compressor.ux.utils.workload.quantization": [[508, 2, 1, "", "Advance"], [508, 2, 1, "", "Calibration"], [508, 2, 1, "", "Quantization"], [508, 2, 1, "", "WiseConfig"], [508, 2, 1, "", "WiseConfigDetails"]], "neural_compressor.ux.utils.workload.tuning": [[509, 2, 1, "", "AccCriterion"], [509, 2, 1, "", "Diagnosis"], [509, 2, 1, "", "ExitPolicy"], [509, 2, 1, "", "MultiObjectives"], [509, 2, 1, "", "Strategy"], [509, 2, 1, "", "Tuning"], [509, 2, 1, "", "Workspace"]], "neural_compressor.ux.utils.yaml_utils": [[510, 1, 1, "", "float_representer"], [510, 1, 1, "", "pruner_representer"]], "neural_compressor.ux.web": [[511, 0, 0, "-", "communication"], [512, 0, 0, "-", "configuration"], [513, 0, 0, "-", "exceptions"], [515, 0, 0, "-", "router"], [516, 0, 0, "-", "server"], [519, 0, 0, "-", "service"]], "neural_compressor.ux.web.communication": [[511, 2, 1, "", "Message"], [511, 2, 1, "", "MessageQueue"], [511, 2, 1, "", "Request"], [511, 2, 1, "", "Response"], [511, 1, 1, "", "create_simple_response"]], "neural_compressor.ux.web.configuration": [[512, 2, 1, "", "Configuration"]], "neural_compressor.ux.web.exceptions": [[513, 5, 1, "", "ServiceNotFoundException"]], "neural_compressor.ux.web.router": [[515, 2, 1, "", "DeferredRoutingDefinition"], [515, 2, 1, "", "DeferredSubprocessRoutingDefinition"], [515, 2, 1, "", "RealtimeRoutingDefinition"], [515, 2, 1, "", "Router"], [515, 2, 1, "", "RoutingDefinition"], [515, 1, 1, "", "find_pattern_in_graph"], [515, 1, 1, "", "get_model_graph"], [515, 1, 1, "", "get_system_info"]], "neural_compressor.ux.web.server": [[516, 1, 1, "", "allow_api_call"], [516, 1, 1, "", "block_iframe"], [516, 1, 1, "", "block_sniffing"], [516, 1, 1, "", "build_parameters"], [516, 1, 1, "", "disable_cache"], [516, 1, 1, "", "get_tls_args"], [516, 1, 1, "", "handle_api_call"], [516, 1, 1, "", "page_not_found"], [516, 1, 1, "", "require_api_token"], [516, 1, 1, "", "root"], [516, 1, 1, "", "run_server"], [516, 1, 1, "", "web_socket_publisher"]], "neural_compressor.ux.web.service": [[517, 0, 0, "-", "benchmark"], [518, 0, 0, "-", "history_snapshot_parser"], [520, 0, 0, "-", "model"], [521, 0, 0, "-", "optimization"], [522, 0, 0, "-", "profiling"], [523, 0, 0, "-", "request_data_processor"], [524, 0, 0, "-", "response_generator"], [525, 0, 0, "-", "workload"]], "neural_compressor.ux.web.service.benchmark": [[517, 2, 1, "", "BenchmarkService"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[518, 2, 1, "", "HistorySnapshotParser"]], "neural_compressor.ux.web.service.model": [[520, 2, 1, "", "ModelService"]], "neural_compressor.ux.web.service.optimization": [[521, 2, 1, "", "OptimizationService"]], "neural_compressor.ux.web.service.profiling": [[522, 2, 1, "", "ProfilingService"]], "neural_compressor.ux.web.service.request_data_processor": [[523, 2, 1, "", "RequestDataProcessor"]], "neural_compressor.ux.web.service.response_generator": [[524, 2, 1, "", "ResponseGenerator"]], "neural_compressor.ux.web.service.workload": [[525, 2, 1, "", "WorkloadService"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:attribute", "4": "py:data", "5": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "data", "Python data"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"644ec953a7dc_pruning_support": 0, "6ece06672ed3_v1_14": 1, "modul": [1, 5, 6, 8, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 244, 246, 247, 248, 250, 251, 252, 253, 254, 256, 257, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 275, 276, 277, 278, 281, 282, 283, 286, 287, 288, 289, 290, 291, 292, 294, 295, 297, 298, 299, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 328, 329, 330, 331, 332, 334, 335, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 397, 398, 399, 400, 403, 404, 405, 407, 408, 410, 411, 412, 413, 414, 416, 418, 419, 425, 426, 428, 429, 431, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 454, 457, 458, 460, 461, 463, 464, 466, 467, 468, 469, 470, 472, 473, 474, 475, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525], "content": [1, 5, 6, 7, 8, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 287, 288, 289, 290, 291, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 397, 398, 399, 400, 403, 404, 405, 407, 408, 410, 411, 412, 413, 414, 416, 418, 419, 425, 426, 428, 429, 431, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 454, 455, 457, 458, 460, 461, 463, 464, 466, 467, 468, 469, 470, 472, 473, 474, 475, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 533, 549], "function": [1, 5, 6, 17, 20, 37, 43, 44, 66, 67, 69, 103, 104, 115, 117, 145, 146, 147, 150, 151, 152, 153, 155, 158, 160, 163, 166, 168, 169, 170, 171, 172, 174, 184, 192, 194, 198, 201, 202, 203, 206, 208, 209, 210, 211, 213, 215, 216, 218, 221, 224, 232, 234, 238, 241, 242, 243, 245, 246, 247, 250, 251, 252, 253, 256, 257, 259, 260, 261, 262, 263, 270, 277, 281, 286, 287, 288, 290, 294, 295, 297, 298, 299, 300, 301, 302, 306, 310, 312, 313, 317, 325, 329, 331, 332, 334, 337, 338, 340, 341, 343, 344, 346, 347, 357, 358, 359, 361, 366, 368, 369, 371, 373, 376, 377, 382, 385, 386, 387, 398, 408, 425, 429, 431, 442, 443, 444, 447, 450, 454, 458, 460, 463, 466, 468, 469, 472, 478, 479, 487, 490, 495, 499, 507, 510, 511, 515, 516, 556], "6f0d0f71d92e_v1_13": 2, "9e89549a08c8_v1_11": 3, "block_mask": 4, "env": 5, "neural_compressor": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526], "adaptor": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 534, 535], "class": [6, 8, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 150, 153, 154, 155, 156, 157, 159, 160, 163, 166, 167, 168, 169, 170, 171, 173, 174, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 222, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 253, 254, 255, 256, 259, 262, 263, 264, 265, 266, 267, 269, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 288, 289, 290, 291, 292, 294, 297, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 328, 329, 330, 331, 332, 334, 335, 338, 339, 340, 341, 342, 344, 345, 348, 349, 350, 351, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 392, 393, 394, 395, 397, 399, 400, 403, 404, 405, 407, 410, 411, 412, 413, 414, 416, 418, 419, 426, 428, 431, 433, 434, 435, 436, 438, 439, 440, 441, 445, 449, 451, 452, 455, 457, 461, 464, 467, 468, 470, 473, 474, 475, 477, 481, 482, 484, 485, 486, 487, 489, 491, 492, 493, 494, 497, 498, 500, 501, 502, 503, 505, 506, 507, 508, 509, 511, 512, 515, 517, 518, 520, 521, 522, 523, 524, 525, 534], "subpackag": [7, 21, 86, 110, 111, 113, 162, 164, 178, 203, 243, 255, 279, 293, 321, 396, 401, 415, 420, 427, 455, 471, 480, 488, 514], "submodul": [7, 16, 21, 33, 50, 75, 86, 94, 100, 105, 110, 111, 113, 116, 129, 142, 148, 155, 161, 162, 164, 165, 179, 186, 198, 202, 206, 213, 220, 226, 238, 242, 245, 249, 255, 262, 268, 274, 280, 284, 293, 300, 304, 321, 327, 333, 338, 348, 352, 360, 372, 391, 396, 401, 402, 406, 409, 415, 417, 420, 421, 427, 430, 432, 437, 446, 448, 453, 455, 456, 459, 462, 465, 471, 476, 480, 488, 496, 504, 514, 519], "packag": [7, 33, 155, 186, 198, 202, 203, 206, 213, 226, 238, 242, 243, 245, 255, 262, 274, 279, 280, 300, 304, 321, 338, 348, 455, 580, 582, 584, 585], "kera": [8, 438], "keras_util": [9, 10, 11, 12, 13, 14], "conv2d": 9, "dens": 10, "depthwise_conv2d": 11, "quantiz": [13, 42, 291, 313, 508, 530, 533, 546, 555, 561, 564, 567, 576, 587, 594, 595, 596, 599, 605], "separable_conv2d": 14, "mxnet": [15, 552, 566, 595, 601, 605], "mxnet_util": [16, 17], "util": [17, 43, 145, 152, 172, 253, 326, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 398, 442, 478, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 537], "onnxrt": [18, 430, 431, 552, 566, 601], "ox_util": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], "calibr": [19, 20], "oper": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], "activ": 22, "argmax": 23, "attent": 24, "binary_op": 25, "concat": 26, "conv": 27, "direct_q8": 28, "embed_layernorm": 29, "gather": 30, "gavgpool": 31, "gemm": 32, "lstm": 34, "matmul": [35, 599], "maxpool": 36, "op": 37, "pad": 38, "pool": 39, "resiz": 40, "split": 41, "pytorch": [44, 343, 432, 433, 552, 556, 566, 568, 595, 596, 600, 601, 605], "queri": [45, 534], "tensorflow": [46, 436, 437, 438, 439, 440, 441, 442, 552, 556, 566, 568, 595, 596, 600, 601, 605], "tf_util": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145], "graph_convert": 47, "graph_converter_without_calib": 48, "graph_rewrit": [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "bf16": [49, 50], "bf16_convert": [49, 146], "gener": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "convert_add_to_biasadd": 51, "convert_layout": 52, "convert_leakyrelu": 53, "convert_nan_to_random": 54, "convert_placeholder_to_const": 55, "dequantize_cast_optim": 56, "dilated_contract": 57, "dummy_biasadd": 58, "expanddims_optim": 59, "fetch_weight_from_reshap": 60, "fold_batch_norm": 61, "fold_const": 62, "fuse_biasadd_add": 63, "fuse_column_wise_mul": 64, "fuse_conv_with_math": 65, "fuse_decomposed_bn": 66, "fuse_decomposed_in": 67, "fuse_gelu": 68, "fuse_layer_norm": 69, "fuse_pad_with_conv": 70, "fuse_pad_with_fp32_conv": 71, "fuse_reshape_transpos": 72, "graph_cse_optim": 73, "grappler_pass": 74, "insert_print_nod": 76, "move_squeeze_after_relu": 77, "pre_optim": 78, "remove_training_nod": 79, "rename_batch_norm": 80, "split_shared_input": 81, "strip_equivalent_nod": 82, "strip_unused_nod": 83, "switch_optim": 84, "graph_bas": 85, "int8": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 558, 605], "freeze_fake_qu": 87, "freeze_valu": 88, "freeze_value_without_calib": 89, "fuse_conv_redundant_dequant": 90, "fuse_conv_requant": 91, "fuse_matmul_redundant_dequant": 92, "fuse_matmul_requant": 93, "meta_op_optim": 95, "post_hostconst_convert": 96, "post_quantized_op_cs": 97, "rnn_convert": 98, "scale_propag": 99, "onnx": [100, 101, 102, 103, 104, 536, 564, 568, 595, 605], "onnx_graph": 101, "onnx_nod": 102, "onnx_schema": 103, "tf2onnx_util": 104, "qdq": [105, 106, 107, 108, 122, 123, 124, 125, 126, 127, 128, 129, 130, 605], "insert_qdq_pattern": 106, "merge_duplicated_qdq": 107, "share_qdq_y_pattern": 108, "graph_util": 109, "quantize_graph": [111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137], "qat": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 605], "fake_quant": 112, "quantize_config": 114, "quantize_help": 115, "quantize_lay": [116, 117, 118, 119, 120], "optimize_lay": 117, "quantize_layer_add": 118, "quantize_layer_bas": 119, "quantize_layer_bn": 120, "quantize_wrapp": 121, "fuse_qdq_bn": 122, "fuse_qdq_concatv2": 123, "fuse_qdq_conv": 124, "fuse_qdq_deconv": 125, "fuse_qdq_in": 126, "fuse_qdq_matmul": 127, "fuse_qdq_pool": 128, "optimize_qdq": 130, "quantize_graph_bas": 131, "quantize_graph_bn": 132, "quantize_graph_concatv2": 133, "quantize_graph_conv": 134, "quantize_graph_for_intel_cpu": 135, "quantize_graph_matmul": 136, "quantize_graph_pool": 137, "quantize_graph_common": 138, "tf2onnx_convert": 139, "transform_graph": [140, 141, 142, 143, 144], "bias_correct": 140, "graph_transform_bas": 141, "insert_log": 143, "rerange_quantized_concat": 144, "torch_util": [146, 147, 148, 149, 150, 151, 152, 218], "hawq_metr": 147, "model_wrapp": 149, "smooth_quant": [150, 156], "symbolic_trac": 151, "algorithm": [153, 154, 155, 156, 157, 599, 602], "fast_bias_correct": 154, "weight_correct": 157, "benchmark": [158, 210, 345, 346, 347, 348, 364, 517, 540, 549, 550, 567, 594], "compress": [159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 220, 221, 541], "callback": 159, "distil": [160, 161, 248, 554, 555, 567, 594, 605], "criterion": [160, 211], "pruner": [163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 277, 288], "criteria": [163, 592, 602], "model_slim": [165, 166, 167], "pattern_analyz": 166, "weight_slim": 167, "pattern": [168, 280, 281, 282, 286, 592], "reg": 170, "schedul": [171, 290, 292, 592], "conf": [173, 174, 175, 176], "config": [173, 177, 500, 542, 551, 552, 589], "dotdict": 174, "pythonic_config": 176, "contrib": [178, 179, 180, 181], "strategi": [179, 180, 181, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 547, 598, 602], "sigopt": [180, 598, 602], "tpe": [181, 602], "data": [182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 557], "dataload": [182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 212, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 366, 501, 551, 552], "base_dataload": [182, 222], "default_dataload": [184, 224], "fetcher": [185, 225], "attribut": [186, 194, 203, 234, 243, 255, 279, 304, 332, 338, 410, 528], "mxnet_dataload": [187, 227], "onnxrt_dataload": [188, 228], "pytorch_dataload": [189, 229], "sampler": [190, 230], "tensorflow_dataload": [191, 231], "dataset": [192, 193, 194, 195, 196, 197, 198, 199, 232, 233, 234, 235, 236, 237, 238, 239, 367, 549, 552, 562], "bert_dataset": [192, 232], "coco_dataset": [193, 233], "dummy_dataset": [195, 235], "dummy_dataset_v2": [196, 236], "imagenet_dataset": [197, 237], "style_transfer_dataset": [199, 239], "filter": [200, 201, 202, 240, 241, 242], "coco_filt": [200, 240], "transform": [204, 205, 206, 207, 208, 209, 244, 245, 246, 247, 382, 562, 601], "coco_transform": 204, "imagenet_transform": [205, 244], "postprocess": [207, 217], "token": [208, 246], "experiment": [210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292], "common": [211, 212, 213, 214, 215, 216, 217, 218, 530, 559], "metric": [214, 256, 257, 258, 259, 260, 261, 262, 263, 294, 295, 296, 297, 298, 299, 300, 301, 373, 497, 562, 566], "model": [215, 303, 304, 305, 306, 307, 308, 309, 310, 311, 374, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 506, 520, 544, 549, 558, 561, 564, 567, 569, 576, 592, 599, 605], "optim": [216, 375, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 521, 549, 577, 587, 590, 603], "compon": [219, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "prune": [221, 278, 289, 462, 463, 464, 507, 549, 567, 592, 594, 605], "export": [249, 250, 251, 252, 253, 558], "qlinear2qdq": 250, "tf2onnx": 251, "torch2onnx": 252, "graph_optim": [254, 452, 453, 454, 503], "bleu": [256, 294], "bleu_util": [257, 295], "coco_label_map": [258, 296], "coco_tool": [259, 297], "evaluate_squad": [260, 298], "f1": [261, 299], "mixed_precis": [264, 456, 457, 458, 505], "model_convers": 265, "na": [266, 267, 268, 269, 270, 271, 531, 549, 594], "basic_na": 266, "dyna": 267, "nas_util": 270, "search_algorithm": 271, "pruner_legaci": [272, 273, 274, 275, 276, 277], "gradient_sensit": 272, "group_lasso": 273, "magnitud": 275, "pattern_lock": 276, "pruning_recip": [279, 280, 281, 282], "tile_pattern": 282, "pruning_v2": 283, "pytorch_prun": [284, 285, 286, 287, 288, 289, 290], "logger": [285, 341, 490], "prune_util": 287, "mix_precis": 302, "base_model": 303, "keras_model": 305, "mxnet_model": 307, "nets_factori": 308, "onnx_model": 309, "tensorflow_model": 310, "torch_model": 311, "object": [312, 545, 589], "auto": [314, 581, 587, 596, 599, 602], "auto_mixed_precis": 315, "basic": [316, 531, 602], "bayesian": [317, 602], "conserv": [318, 602], "exhaust": [319, 602], "hawq_v2": [320, 602], "mse": [322, 602], "mse_v2": [323, 602], "random": [324, 602], "constant": [326, 336], "tuning_sampl": 328, "tuning_spac": 329, "tuning_struct": 330, "templat": [332, 333, 496, 497, 498, 529], "api_doc_exampl": 332, "train": [334, 530, 548, 556, 567, 595], "collect_layer_histogram": 335, "create_obj_from_config": 337, "kl_diverg": 339, "load_huggingfac": 340, "option": [342, 549, 556, 575], "ux": [345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525], "benchmark_model": 346, "execute_benchmark": 347, "config_gener": [349, 350, 351, 352, 353, 354, 355, 356], "benchmark_config_gener": 349, "graph_optimization_config_gener": 351, "mixed_precision_config_gener": 353, "profiling_config_gener": 354, "pruning_config_gener": 355, "quantization_config_gener": 356, "configuration_wizard": [357, 358, 359, 360, 361, 362], "configuration_pars": 357, "get_boundary_nod": 358, "get_configur": 359, "params_feed": 361, "pruning_config_pars": 362, "db_manag": [363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398], "db_model": [364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384], "benchmark_result": 365, "domain": [368, 426], "domain_flavour": 369, "exampl": [370, 530, 531, 534, 538, 550, 551, 552, 554, 555, 556, 557, 558, 567, 568, 569, 572, 576, 589, 590, 592, 595, 599, 600, 605], "framework": [371, 551, 552, 558, 560, 569, 594], "optimization_typ": 376, "precis": [377, 543, 567, 568, 596], "profil": [378, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 522, 549], "profiling_result": 379, "project": [380, 549], "pruning_detail": 381, "tuning_detail": 383, "tuning_histori": [384, 468], "db_oper": [385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395], "benchmark_api_interfac": 385, "dataset_api_interfac": 386, "diagnosis_api_interfac": 388, "dictionaries_api_interfac": 389, "examples_api_interfac": 390, "model_api_interfac": 392, "optimization_api_interfac": 393, "profiling_api_interfac": 394, "project_api_interfac": 395, "params_interfac": 397, "diagnosi": [399, 400, 401, 402, 403, 404, 405, 406, 407, 549], "factori": [400, 451, 470, 475], "onnx_diagnosi": [402, 403], "onnxrt_diagnosi": 403, "op_detail": 404, "op_entri": 405, "tensorflow_diagnosi": [406, 407], "file_brows": [408, 409], "graph": [410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 549], "collaps": 411, "edg": 412, "graph_read": 414, "node": 416, "reader": [417, 418, 419], "onnxrt_read": 418, "tensorflow_read": 419, "jobs_manag": [421, 422, 423, 424], "jobs_control_queu": 422, "request": [424, 529], "manage_workspac": 425, "model_type_gett": 429, "repositori": 434, "shape": 435, "frozen_pb": 436, "meta_graph": 439, "saved_model": 441, "model_zoo": [443, 444, 445, 446, 447], "download_config": 443, "download_model": 444, "download": 445, "list_model": 447, "names_mapp": [448, 449], "execute_optim": 450, "optimize_model": [454, 458, 460, 463], "neural_coder_optim": [459, 460], "tune": [465, 466, 467, 509, 595, 599, 602], "tune_model": 466, "execute_profil": 469, "profile_model": 472, "tensorflow_profil": [475, 476, 477, 478], "inc_bench": 479, "const": 481, "environ": [482, 564, 573], "except": [483, 513], "executor": 484, "expiring_dict": 485, "github_info": 486, "hw_info": 487, "json_seri": 489, "parser": 491, "proc": 492, "process": [493, 602], "singleton": 494, "status_upd": 495, "workdir": 498, "workload": [500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 525], "evalu": [502, 556], "yaml_util": 510, "web": [511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525], "commun": 511, "configur": [512, 556, 560, 591, 594, 598, 604], "router": 515, "server": 516, "servic": [517, 518, 519, 520, 521, 522, 523, 524, 525], "history_snapshot_pars": 518, "request_data_processor": 523, "response_gener": 524, "version": 526, "intel": [527, 533, 549, 563, 564, 567, 573, 581, 587, 605, 606], "neural": [527, 530, 531, 533, 549, 563, 564, 567, 570, 574, 576, 581, 587, 592, 598, 603, 606], "compressor": [527, 530, 533, 549, 563, 564, 567, 581, 587, 598, 606], "document": [527, 533, 538, 606], "section": [527, 606], "contributor": [528, 529], "coven": [528, 529], "code": [528, 529, 531, 567, 588, 603], "conduct": [528, 529], "our": [528, 599], "pledg": 528, "standard": 528, "respons": 528, "scope": [528, 592], "enforc": 528, "contribut": [529, 580, 584], "guidelin": 529, "pull": 529, "checklist": 529, "support": [529, 530, 531, 534, 550, 551, 552, 554, 555, 556, 558, 560, 563, 564, 566, 568, 569, 571, 572, 576, 577, 589, 590, 592, 594, 595, 600, 601, 604], "fx": 530, "introduct": [530, 531, 534, 549, 550, 551, 552, 554, 555, 556, 558, 560, 563, 566, 568, 569, 587, 589, 590, 592, 594, 595, 598, 599, 600, 601, 602, 604], "mode": [530, 605], "matrix": [530, 531, 534, 550, 551, 552, 554, 555, 556, 558, 560, 563, 566, 568, 569, 572, 589, 590, 592, 594, 595, 600, 604], "get": [530, 531, 533, 534, 550, 551, 552, 554, 555, 556, 560, 561, 566, 568, 570, 581, 588, 589, 590, 592, 594, 595, 600, 604], "start": [530, 531, 533, 534, 549, 550, 551, 552, 554, 555, 556, 560, 561, 566, 568, 570, 571, 575, 581, 589, 590, 592, 594, 595, 600, 604], "post": [530, 567, 595], "static": [530, 595], "dynam": [530, 531, 595], "awar": [530, 567, 595], "note": [530, 597], "detail": [530, 549], "problem": 530, "architectur": [531, 553, 563, 564], "search": [531, 587], "api": [531, 533, 534, 538, 539, 550, 551, 552, 554, 555, 556, 561, 562, 566, 568, 570, 574, 588, 589, 590, 592, 594, 603], "usag": [531, 576, 587, 600, 602], "1": [531, 549, 556, 559, 562, 567, 587, 605], "python": [531, 533, 561, 566, 570, 574, 575, 582, 585, 594, 603], "yaml": [531, 551, 552, 556, 560, 604], "2": [531, 549, 556, 559, 562, 567, 587, 605], "onli": 531, "advanc": [531, 603], "custom": [531, 549, 566, 602], "secur": [532, 549, 556], "polici": [532, 602], "report": 532, "vulner": 532, "instal": [533, 549, 564, 571, 573, 580, 581, 584], "from": [533, 549, 564, 567], "pypi": [533, 576], "select": [533, 581], "public": [533, 593], "event": [533, 593], "addit": 533, "research": 533, "collabor": 533, "work": [534, 595], "flow": [534, 595], "background": [534, 587], "ad": 534, "new": [534, 549, 582, 585, 602], "backend": [534, 595], "capabl": 534, "implement": 534, "onnxrtadaptor": 534, "runtim": [536, 564, 568, 595, 605], "torch": [537, 605], "mix": [543, 567, 568, 596], "bench": [549, 574], "tabl": 549, "binari": [549, 564], "sourc": [549, 564], "home": 549, "screen": 549, "creat": [549, 551], "predefin": 549, "displai": 549, "list": [549, 557, 601], "remov": 549, "develop": [549, 580, 584], "tab": 549, "wizard": 549, "edit": 549, "entri": 549, "inform": [549, 565], "demo": 549, "system": [549, 564, 591], "file": [551, 552, 560, 604], "user": [551, 552, 556, 562, 594, 603, 604], "specif": [551, 552], "design": [553, 602], "workflow": 553, "knowledg": [554, 605], "intermedi": 554, "layer": [554, 599], "self": 554, "distribut": [556, 576, 602], "infer": 556, "featur": [556, 560, 563, 576, 577, 581, 594, 595, 600, 604], "pure": 556, "defin": 556, "horovodrun": 556, "execut": 556, "releas": [557, 582, 585, 597], "fp32": 558, "appendix": 558, "frequent": 559, "ask": 559, "question": 559, "build": [559, 566], "issu": [559, 597], "3": [559, 571, 587], "4": [559, 578, 587, 593], "quick": [561, 575], "sampl": 561, "jupyterlab": [561, 581], "extens": [561, 570, 580, 581, 584, 587, 588, 605], "gui": 561, "valid": [561, 564, 599, 605], "incompat": [562, 597], "chang": [562, 586, 588, 597], "between": 562, "v1": 562, "face": 562, "built": [562, 564, 566], "infrastructur": 563, "linux": 564, "prerequisit": 564, "ai": 564, "kit": 564, "window": 564, "requir": [564, 580, 584], "hardwar": [564, 605], "cpu": [564, 573, 605], "base": [564, 603], "64": 564, "compat": 564, "processor": 564, "gpu": 564, "": [564, 588], "xe": 564, "multipl": [564, 589, 605], "vendor": 564, "through": [564, 605], "softwar": 564, "legal": 565, "licens": 565, "citat": 565, "trademark": 565, "singl": [566, 589], "multi": 566, "migrat": 567, "x": 567, "orchestr": [567, 590], "coder": [570, 574, 576, 587, 603], "what": [570, 588], "do": 570, "we": 570, "offer": 570, "jupyt": [570, 571, 582, 585], "lab": [570, 571], "launcher": [570, 575], "contact": 570, "aw": 571, "amazon": 571, "sagemak": 571, "For": 571, "studio": 571, "notebook": 571, "instanc": 571, "guid": [571, 603], "bigdl": 572, "nano": 572, "platform": [573, 598], "best": [573, 581], "perform": [573, 598], "set": [573, 587], "mkl": 573, "openmp": 573, "jemalloc": 573, "numa": 573, "control": 573, "variabl": 573, "frequenc": 573, "govern": 573, "enabl": [574, 581, 587], "superbench": 574, "argument": 575, "v0": 578, "highlight": 578, "other": 578, "changelog": [579, 583], "neural_compressor_ext_lab": [580, 582], "uninstal": [580, 584], "Or": 581, "let": 581, "u": 581, "help": 581, "you": 581, "pre": 581, "requisit": 581, "make": [582, 585, 588], "manual": [582, 585], "npm": [582, 585], "autom": [582, 585], "publish": [582, 585], "conda": [582, 585], "forg": [582, 585], "neural_compressor_ext_lab_alibaba": [584, 585], "log": 586, "unreleas": 586, "vscode": 587, "open": 587, "icon": 587, "5": 587, "welcom": 588, "your": 588, "v": 588, "folder": 588, "setup": 588, "up": 588, "run": 588, "straight": 588, "awai": 588, "explor": 588, "test": 588, "go": 588, "further": 588, "One": 590, "shot": 590, "network": 592, "type": 592, "sparsiti": 592, "decai": 592, "regular": 592, "spars": 592, "deploy": 592, "refer": [592, 595, 599], "full": 593, "59": 593, "2023": 593, "6": 593, "2022": 593, "34": 593, "2021": 593, "15": 593, "2018": 593, "2020": 593, "style": 594, "access": 594, "fundament": [595, 599], "scheme": 595, "ipex": 595, "approach": 595, "With": 595, "without": 595, "accuraci": [595, 602], "specifi": 595, "rule": 595, "recip": 595, "turn": 596, "off": 596, "dure": 596, "known": 597, "prepar": 598, "benefit": 598, "comparison": 598, "differ": 598, "smooth": 599, "quant": 599, "per": 599, "tensor": 599, "channel": 599, "limit": 599, "smoothquant": 599, "enhanc": 599, "wise": 599, "alpha": 599, "engin": 599, "tensorboard": 600, "space": 602, "exit": 602, "overview": 603, "zero": 603, "topic": 603, "11": 605, "0": 605, "13": 605, "ptq": 605, "9": 605}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"644ec953a7dc_pruning_support": [[0, "module-644ec953a7dc_pruning_support"]], "6ece06672ed3_v1_14": [[1, "module-6ece06672ed3_v1_14"]], "Module Contents": [[1, "module-contents"], [5, "module-contents"], [6, "module-contents"], [8, "module-contents"], [15, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [112, "module-contents"], [114, "module-contents"], [115, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [130, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [150, "module-contents"], [151, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [163, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [174, "module-contents"], [176, "module-contents"], [177, "module-contents"], [180, "module-contents"], [181, "module-contents"], [182, "module-contents"], [183, "module-contents"], [184, "module-contents"], [185, "module-contents"], [187, "module-contents"], [188, "module-contents"], [189, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [194, "module-contents"], [195, "module-contents"], [196, "module-contents"], [197, "module-contents"], [199, "module-contents"], [200, "module-contents"], [201, "module-contents"], [204, "module-contents"], [205, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [210, "module-contents"], [211, "module-contents"], [212, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"], [218, "module-contents"], [219, "module-contents"], [221, "module-contents"], [222, "module-contents"], [224, "module-contents"], [225, "module-contents"], [227, "module-contents"], [228, "module-contents"], [229, "module-contents"], [230, "module-contents"], [231, "module-contents"], [232, "module-contents"], [233, "module-contents"], [234, "module-contents"], [235, "module-contents"], [236, "module-contents"], [237, "module-contents"], [239, "module-contents"], [240, "module-contents"], [241, "module-contents"], [244, "module-contents"], [246, "module-contents"], [247, "module-contents"], [248, "module-contents"], [250, "module-contents"], [251, "module-contents"], [252, "module-contents"], [253, "module-contents"], [254, "module-contents"], [256, "module-contents"], [257, "module-contents"], [259, "module-contents"], [260, "module-contents"], [261, "module-contents"], [263, "module-contents"], [264, "module-contents"], [265, "module-contents"], [266, "module-contents"], [267, "module-contents"], [269, "module-contents"], [270, "module-contents"], [271, "module-contents"], [272, "module-contents"], [273, "module-contents"], [275, "module-contents"], [276, "module-contents"], [277, "module-contents"], [278, "module-contents"], [281, "module-contents"], [282, "module-contents"], [283, "module-contents"], [286, "module-contents"], [287, "module-contents"], [288, "module-contents"], [289, "module-contents"], [290, "module-contents"], [291, "module-contents"], [292, "module-contents"], [294, "module-contents"], [295, "module-contents"], [297, "module-contents"], [298, "module-contents"], [299, "module-contents"], [301, "module-contents"], [302, "module-contents"], [303, "module-contents"], [305, "module-contents"], [306, "module-contents"], [307, "module-contents"], [308, "module-contents"], [309, "module-contents"], [310, "module-contents"], [311, "module-contents"], [312, "module-contents"], [313, "module-contents"], [314, "module-contents"], [315, "module-contents"], [316, "module-contents"], [317, "module-contents"], [318, "module-contents"], [319, "module-contents"], [320, "module-contents"], [322, "module-contents"], [323, "module-contents"], [324, "module-contents"], [325, "module-contents"], [328, "module-contents"], [329, "module-contents"], [330, "module-contents"], [331, "module-contents"], [332, "module-contents"], [334, "module-contents"], [335, "module-contents"], [337, "module-contents"], [339, "module-contents"], [340, "module-contents"], [341, "module-contents"], [342, "module-contents"], [343, "module-contents"], [344, "module-contents"], [345, "module-contents"], [346, "module-contents"], [347, "module-contents"], [349, "module-contents"], [350, "module-contents"], [351, "module-contents"], [353, "module-contents"], [354, "module-contents"], [355, "module-contents"], [356, "module-contents"], [357, "module-contents"], [358, "module-contents"], [359, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [365, "module-contents"], [366, "module-contents"], [367, "module-contents"], [368, "module-contents"], [369, "module-contents"], [370, "module-contents"], [371, "module-contents"], [373, "module-contents"], [374, "module-contents"], [375, "module-contents"], [376, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [381, "module-contents"], [382, "module-contents"], [383, "module-contents"], [384, "module-contents"], [385, "module-contents"], [386, "module-contents"], [387, "module-contents"], [388, "module-contents"], [389, "module-contents"], [390, "module-contents"], [392, "module-contents"], [393, "module-contents"], [394, "module-contents"], [395, "module-contents"], [397, "module-contents"], [398, "module-contents"], [399, "module-contents"], [400, "module-contents"], [403, "module-contents"], [404, "module-contents"], [405, "module-contents"], [407, "module-contents"], [408, "module-contents"], [410, "module-contents"], [411, "module-contents"], [412, "module-contents"], [413, "module-contents"], [414, "module-contents"], [416, "module-contents"], [418, "module-contents"], [419, "module-contents"], [425, "module-contents"], [426, "module-contents"], [428, "module-contents"], [429, "module-contents"], [431, "module-contents"], [433, "module-contents"], [434, "module-contents"], [435, "module-contents"], [436, "module-contents"], [438, "module-contents"], [439, "module-contents"], [440, "module-contents"], [441, "module-contents"], [442, "module-contents"], [443, "module-contents"], [444, "module-contents"], [445, "module-contents"], [447, "module-contents"], [449, "module-contents"], [450, "module-contents"], [451, "module-contents"], [452, "module-contents"], [454, "module-contents"], [457, "module-contents"], [458, "module-contents"], [460, "module-contents"], [461, "module-contents"], [463, "module-contents"], [464, "module-contents"], [466, "module-contents"], [467, "module-contents"], [468, "module-contents"], [469, "module-contents"], [470, "module-contents"], [472, "module-contents"], [473, "module-contents"], [474, "module-contents"], [475, "module-contents"], [477, "module-contents"], [478, "module-contents"], [479, "module-contents"], [481, "module-contents"], [482, "module-contents"], [483, "module-contents"], [484, "module-contents"], [485, "module-contents"], [486, "module-contents"], [487, "module-contents"], [489, "module-contents"], [490, "module-contents"], [491, "module-contents"], [492, "module-contents"], [493, "module-contents"], [494, "module-contents"], [495, "module-contents"], [497, "module-contents"], [498, "module-contents"], [499, "module-contents"], [500, "module-contents"], [501, "module-contents"], [502, "module-contents"], [503, "module-contents"], [505, "module-contents"], [506, "module-contents"], [507, "module-contents"], [508, "module-contents"], [509, "module-contents"], [510, "module-contents"], [511, "module-contents"], [512, "module-contents"], [513, "module-contents"], [515, "module-contents"], [516, "module-contents"], [517, "module-contents"], [518, "module-contents"], [520, "module-contents"], [521, "module-contents"], [522, "module-contents"], [523, "module-contents"], [524, "module-contents"], [525, "module-contents"]], "Functions": [[1, "functions"], [5, "functions"], [6, "functions"], [17, "functions"], [20, "functions"], [37, "functions"], [43, "functions"], [44, "functions"], [66, "functions"], [67, "functions"], [69, "functions"], [103, "functions"], [104, "functions"], [115, "functions"], [117, "functions"], [145, "functions"], [146, "functions"], [147, "functions"], [150, "functions"], [151, "functions"], [152, "functions"], [153, "functions"], [155, "functions"], [158, "functions"], [160, "functions"], [163, "functions"], [166, "functions"], [168, "functions"], [169, "functions"], [170, "functions"], [171, "functions"], [172, "functions"], [174, "functions"], [184, "functions"], [192, "functions"], [194, "functions"], [198, "functions"], [201, "functions"], [202, "functions"], [203, "functions"], [206, "functions"], [208, "functions"], [209, "functions"], [210, "functions"], [211, "functions"], [213, "functions"], [215, "functions"], [216, "functions"], [218, "functions"], [221, "functions"], [224, "functions"], [232, "functions"], [234, "functions"], [238, "functions"], [241, "functions"], [242, "functions"], [243, "functions"], [245, "functions"], [246, "functions"], [247, "functions"], [250, "functions"], [251, "functions"], [252, "functions"], [253, "functions"], [256, "functions"], [257, "functions"], [259, "functions"], [260, "functions"], [261, "functions"], [262, "functions"], [263, "functions"], [270, "functions"], [277, "functions"], [281, "functions"], [286, "functions"], [287, "functions"], [288, "functions"], [290, "functions"], [294, "functions"], [295, "functions"], [297, "functions"], [298, "functions"], [299, "functions"], [300, "functions"], [301, "functions"], [302, "functions"], [306, "functions"], [310, "functions"], [312, "functions"], [313, "functions"], [317, "functions"], [325, "functions"], [329, "functions"], [331, "functions"], [332, "functions"], [334, "functions"], [337, "functions"], [338, "functions"], [340, "functions"], [341, "functions"], [343, "functions"], [344, "functions"], [346, "functions"], [347, "functions"], [357, "functions"], [358, "functions"], [359, "functions"], [361, "functions"], [366, "functions"], [368, "functions"], [369, "functions"], [371, "functions"], [373, "functions"], [376, "functions"], [377, "functions"], [382, "functions"], [385, "functions"], [386, "functions"], [387, "functions"], [398, "functions"], [408, "functions"], [425, "functions"], [429, "functions"], [431, "functions"], [442, "functions"], [443, "functions"], [444, "functions"], [447, "functions"], [450, "functions"], [454, "functions"], [458, "functions"], [460, "functions"], [463, "functions"], [466, "functions"], [468, "functions"], [469, "functions"], [472, "functions"], [478, "functions"], [479, "functions"], [487, "functions"], [490, "functions"], [495, "functions"], [499, "functions"], [507, "functions"], [510, "functions"], [511, "functions"], [515, "functions"], [516, "functions"]], "6f0d0f71d92e_v1_13": [[2, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[3, "module-9e89549a08c8_v1_11"]], "block_mask": [[4, "module-block_mask"]], "env": [[5, "module-env"]], "neural_compressor.adaptor.adaptor": [[6, "module-neural_compressor.adaptor.adaptor"]], "Classes": [[6, "classes"], [8, "classes"], [15, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [101, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [112, "classes"], [114, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [130, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [143, "classes"], [144, "classes"], [146, "classes"], [147, "classes"], [150, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [159, "classes"], [160, "classes"], [163, "classes"], [166, "classes"], [167, "classes"], [168, "classes"], [169, "classes"], [170, "classes"], [171, "classes"], [173, "classes"], [174, "classes"], [176, "classes"], [177, "classes"], [180, "classes"], [181, "classes"], [182, "classes"], [183, "classes"], [184, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [219, "classes"], [222, "classes"], [224, "classes"], [225, "classes"], [227, "classes"], [228, "classes"], [229, "classes"], [230, "classes"], [231, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [253, "classes"], [254, "classes"], [255, "classes"], [256, "classes"], [259, "classes"], [262, "classes"], [263, "classes"], [264, "classes"], [265, "classes"], [266, "classes"], [267, "classes"], [269, "classes"], [271, "classes"], [272, "classes"], [273, "classes"], [275, "classes"], [276, "classes"], [277, "classes"], [278, "classes"], [279, "classes"], [280, "classes"], [281, "classes"], [282, "classes"], [283, "classes"], [286, "classes"], [288, "classes"], [289, "classes"], [290, "classes"], [291, "classes"], [292, "classes"], [294, "classes"], [297, "classes"], [300, "classes"], [301, "classes"], [303, "classes"], [304, "classes"], [305, "classes"], [306, "classes"], [307, "classes"], [308, "classes"], [309, "classes"], [310, "classes"], [311, "classes"], [312, "classes"], [314, "classes"], [315, "classes"], [316, "classes"], [317, "classes"], [318, "classes"], [319, "classes"], [320, "classes"], [322, "classes"], [323, "classes"], [324, "classes"], [325, "classes"], [328, "classes"], [329, "classes"], [330, "classes"], [331, "classes"], [332, "classes"], [334, "classes"], [335, "classes"], [338, "classes"], [339, "classes"], [340, "classes"], [341, "classes"], [342, "classes"], [344, "classes"], [345, "classes"], [348, "classes"], [349, "classes"], [350, "classes"], [351, "classes"], [353, "classes"], [354, "classes"], [355, "classes"], [356, "classes"], [357, "classes"], [361, "classes"], [362, "classes"], [363, "classes"], [364, "classes"], [365, "classes"], [366, "classes"], [367, "classes"], [368, "classes"], [369, "classes"], [370, "classes"], [371, "classes"], [373, "classes"], [374, "classes"], [375, "classes"], [376, "classes"], [377, "classes"], [378, "classes"], [379, "classes"], [380, "classes"], [381, "classes"], [382, "classes"], [383, "classes"], [384, "classes"], [385, "classes"], [386, "classes"], [388, "classes"], [389, "classes"], [390, "classes"], [392, "classes"], [393, "classes"], [394, "classes"], [395, "classes"], [397, "classes"], [399, "classes"], [400, "classes"], [403, "classes"], [404, "classes"], [405, "classes"], [407, "classes"], [410, "classes"], [411, "classes"], [412, "classes"], [413, "classes"], [414, "classes"], [416, "classes"], [418, "classes"], [419, "classes"], [426, "classes"], [428, "classes"], [431, "classes"], [433, "classes"], [434, "classes"], [435, "classes"], [436, "classes"], [438, "classes"], [439, "classes"], [440, "classes"], [441, "classes"], [445, "classes"], [449, "classes"], [451, "classes"], [452, "classes"], [455, "classes"], [457, "classes"], [461, "classes"], [464, "classes"], [467, "classes"], [468, "classes"], [470, "classes"], [473, "classes"], [474, "classes"], [475, "classes"], [477, "classes"], [481, "classes"], [482, "classes"], [484, "classes"], [485, "classes"], [486, "classes"], [487, "classes"], [489, "classes"], [491, "classes"], [492, "classes"], [493, "classes"], [494, "classes"], [497, "classes"], [498, "classes"], [500, "classes"], [501, "classes"], [502, "classes"], [503, "classes"], [505, "classes"], [506, "classes"], [507, "classes"], [508, "classes"], [509, "classes"], [511, "classes"], [512, "classes"], [515, "classes"], [517, "classes"], [518, "classes"], [520, "classes"], [521, "classes"], [522, "classes"], [523, "classes"], [524, "classes"], [525, "classes"]], "neural_compressor.adaptor": [[7, "module-neural_compressor.adaptor"]], "Subpackages": [[7, "subpackages"], [21, "subpackages"], [86, "subpackages"], [110, "subpackages"], [111, "subpackages"], [113, "subpackages"], [162, "subpackages"], [164, "subpackages"], [178, "subpackages"], [203, "subpackages"], [243, "subpackages"], [255, "subpackages"], [279, "subpackages"], [293, "subpackages"], [321, "subpackages"], [396, "subpackages"], [401, "subpackages"], [415, "subpackages"], [420, "subpackages"], [427, "subpackages"], [455, "subpackages"], [471, "subpackages"], [480, "subpackages"], [488, "subpackages"], [514, "subpackages"]], "Submodules": [[7, "submodules"], [16, "submodules"], [21, "submodules"], [33, "submodules"], [50, "submodules"], [75, "submodules"], [86, "submodules"], [94, "submodules"], [100, "submodules"], [105, "submodules"], [110, "submodules"], [111, "submodules"], [113, "submodules"], [116, "submodules"], [129, "submodules"], [142, "submodules"], [148, "submodules"], [155, "submodules"], [161, "submodules"], [162, "submodules"], [164, "submodules"], [165, "submodules"], [179, "submodules"], [186, "submodules"], [198, "submodules"], [202, "submodules"], [206, "submodules"], [213, "submodules"], [220, "submodules"], [226, "submodules"], [238, "submodules"], [242, "submodules"], [245, "submodules"], [249, "submodules"], [255, "submodules"], [262, "submodules"], [268, "submodules"], [274, "submodules"], [280, "submodules"], [284, "submodules"], [293, "submodules"], [300, "submodules"], [304, "submodules"], [321, "submodules"], [327, "submodules"], [333, "submodules"], [338, "submodules"], [348, "submodules"], [352, "submodules"], [360, "submodules"], [372, "submodules"], [391, "submodules"], [396, "submodules"], [401, "submodules"], [402, "submodules"], [406, "submodules"], [409, "submodules"], [415, "submodules"], [417, "submodules"], [420, "submodules"], [421, "submodules"], [427, "submodules"], [430, "submodules"], [432, "submodules"], [437, "submodules"], [446, "submodules"], [448, "submodules"], [453, "submodules"], [455, "submodules"], [456, "submodules"], [459, "submodules"], [462, "submodules"], [465, "submodules"], [471, "submodules"], [476, "submodules"], [480, "submodules"], [488, "submodules"], [496, "submodules"], [504, "submodules"], [514, "submodules"], [519, "submodules"]], "Package Contents": [[7, "package-contents"], [33, "package-contents"], [155, "package-contents"], [186, "package-contents"], [198, "package-contents"], [202, "package-contents"], [203, "package-contents"], [206, "package-contents"], [213, "package-contents"], [226, "package-contents"], [238, "package-contents"], [242, "package-contents"], [243, "package-contents"], [245, "package-contents"], [255, "package-contents"], [262, "package-contents"], [274, "package-contents"], [279, "package-contents"], [280, "package-contents"], [300, "package-contents"], [304, "package-contents"], [321, "package-contents"], [338, "package-contents"], [348, "package-contents"], [455, "package-contents"]], "neural_compressor.adaptor.keras": [[8, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[9, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[10, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[11, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[12, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[13, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[14, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[15, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[16, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[17, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[18, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[19, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[20, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils": [[21, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[22, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[23, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[24, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[25, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[26, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[27, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[28, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[29, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[30, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[31, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[32, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[33, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[34, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[35, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[36, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[37, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[38, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[39, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[40, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[41, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[42, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[44, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[45, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[46, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[110, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[139, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[140, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[141, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[142, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[145, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[146, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[147, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[148, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[149, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[150, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[151, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[152, "module-neural_compressor.adaptor.torch_utils.util"]], "neural_compressor.algorithm.algorithm": [[153, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[154, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[155, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[156, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[157, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[158, "module-neural_compressor.benchmark"]], "neural_compressor.compression.callbacks": [[159, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[160, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[161, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[162, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[163, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner": [[164, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.model_slim": [[165, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[166, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[167, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns": [[168, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.pruners": [[169, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.regs": [[170, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[171, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.utils": [[172, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.conf.config": [[173, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[174, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[175, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[176, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[177, "module-neural_compressor.config"]], "neural_compressor.contrib": [[178, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[179, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[180, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[181, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[182, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[183, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[184, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[185, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[186, "module-neural_compressor.data.dataloaders"]], "Attributes": [[186, "attributes"], [194, "attributes"], [203, "attributes"], [234, "attributes"], [243, "attributes"], [255, "attributes"], [279, "attributes"], [304, "attributes"], [332, "attributes"], [338, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[187, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[188, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[189, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[190, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[191, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[192, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[193, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[194, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[195, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[196, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[197, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[198, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[199, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[200, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[201, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[202, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[203, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[204, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[205, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[206, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[207, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[208, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[209, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[210, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[211, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[212, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[213, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[214, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[215, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[216, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[217, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[218, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[219, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[220, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[221, "module-neural_compressor.experimental.compression.pruning"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[222, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[223, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[224, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[225, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[226, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[227, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[228, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[229, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[230, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[231, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[232, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[233, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[234, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[235, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[236, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[237, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[238, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[239, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[240, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[241, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[242, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[243, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[244, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[245, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[246, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[247, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[248, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[249, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[250, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[251, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[252, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.export.utils": [[253, "module-neural_compressor.experimental.export.utils"]], "neural_compressor.experimental.graph_optimization": [[254, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[255, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[256, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[257, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[258, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[259, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[260, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[261, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[262, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[263, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[264, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[265, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[266, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[267, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[268, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[269, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[270, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[271, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[272, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[273, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[274, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[275, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[276, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[277, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[278, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[279, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[280, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[281, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[282, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[283, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[284, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[285, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[286, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[287, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[288, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[289, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[290, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[291, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[292, "module-neural_compressor.experimental.scheduler"]], "neural_compressor": [[293, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[294, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[295, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[296, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[297, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[298, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[299, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[300, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[301, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[302, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[303, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[304, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[305, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[306, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[307, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[308, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[309, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[310, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[311, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[312, "module-neural_compressor.objective"]], "neural_compressor.quantization": [[313, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[314, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[315, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[316, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[317, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[318, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[319, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[320, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[321, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[322, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[323, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[324, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[325, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[326, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[327, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[328, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[329, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[330, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[331, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[332, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[333, "module-neural_compressor.template"]], "neural_compressor.training": [[334, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[335, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[336, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[337, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[338, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[339, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[340, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[341, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[342, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[343, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[344, "module-neural_compressor.utils.utility"]], "neural_compressor.ux.components.benchmark.benchmark": [[345, "module-neural_compressor.ux.components.benchmark.benchmark"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[346, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[347, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "neural_compressor.ux.components.benchmark": [[348, "module-neural_compressor.ux.components.benchmark"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[349, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "neural_compressor.ux.components.config_generator.config_generator": [[350, "module-neural_compressor.ux.components.config_generator.config_generator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[351, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[352, "module-neural_compressor.ux.components.config_generator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[353, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[354, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[355, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[356, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[357, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[358, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[359, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "neural_compressor.ux.components.configuration_wizard": [[360, "module-neural_compressor.ux.components.configuration_wizard"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[361, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[362, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "neural_compressor.ux.components.db_manager.db_manager": [[363, "module-neural_compressor.ux.components.db_manager.db_manager"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[364, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[365, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[366, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[367, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[368, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[369, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "neural_compressor.ux.components.db_manager.db_models.example": [[370, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[371, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[372, "module-neural_compressor.ux.components.db_manager.db_models"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[373, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "neural_compressor.ux.components.db_manager.db_models.model": [[374, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[375, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[376, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[377, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[378, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[379, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "neural_compressor.ux.components.db_manager.db_models.project": [[380, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[381, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[382, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[383, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[384, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[385, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[386, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[387, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[388, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[389, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[390, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations": [[391, "module-neural_compressor.ux.components.db_manager.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[392, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[393, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[394, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[395, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "neural_compressor.ux.components.db_manager": [[396, "module-neural_compressor.ux.components.db_manager"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[397, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "neural_compressor.ux.components.db_manager.utils": [[398, "module-neural_compressor.ux.components.db_manager.utils"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[399, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[400, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[401, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[402, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[403, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.op_details": [[404, "module-neural_compressor.ux.components.diagnosis.op_details"]], "neural_compressor.ux.components.diagnosis.op_entry": [[405, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[406, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[407, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.file_browser.file_browser": [[408, "module-neural_compressor.ux.components.file_browser.file_browser"]], "neural_compressor.ux.components.file_browser": [[409, "module-neural_compressor.ux.components.file_browser"]], "neural_compressor.ux.components.graph.attribute": [[410, "module-neural_compressor.ux.components.graph.attribute"]], "neural_compressor.ux.components.graph.collapser": [[411, "module-neural_compressor.ux.components.graph.collapser"]], "neural_compressor.ux.components.graph.edge": [[412, "module-neural_compressor.ux.components.graph.edge"]], "neural_compressor.ux.components.graph.graph": [[413, "module-neural_compressor.ux.components.graph.graph"]], "neural_compressor.ux.components.graph.graph_reader": [[414, "module-neural_compressor.ux.components.graph.graph_reader"]], "neural_compressor.ux.components.graph": [[415, "module-neural_compressor.ux.components.graph"]], "neural_compressor.ux.components.graph.node": [[416, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[417, "module-neural_compressor.ux.components.graph.reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[418, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[419, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "neural_compressor.ux.components": [[420, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[421, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[422, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[423, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[424, "module-neural_compressor.ux.components.jobs_management.request"]], "neural_compressor.ux.components.manage_workspace": [[425, "module-neural_compressor.ux.components.manage_workspace"]], "neural_compressor.ux.components.model.domain": [[426, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[427, "module-neural_compressor.ux.components.model"]], "neural_compressor.ux.components.model.model": [[428, "module-neural_compressor.ux.components.model.model"]], "neural_compressor.ux.components.model.model_type_getter": [[429, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[430, "module-neural_compressor.ux.components.model.onnxrt"]], "neural_compressor.ux.components.model.onnxrt.model": [[431, "module-neural_compressor.ux.components.model.onnxrt.model"]], "neural_compressor.ux.components.model.pytorch": [[432, "module-neural_compressor.ux.components.model.pytorch"]], "neural_compressor.ux.components.model.pytorch.model": [[433, "module-neural_compressor.ux.components.model.pytorch.model"]], "neural_compressor.ux.components.model.repository": [[434, "module-neural_compressor.ux.components.model.repository"]], "neural_compressor.ux.components.model.shape": [[435, "module-neural_compressor.ux.components.model.shape"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[436, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "neural_compressor.ux.components.model.tensorflow": [[437, "module-neural_compressor.ux.components.model.tensorflow"]], "neural_compressor.ux.components.model.tensorflow.keras": [[438, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[439, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "neural_compressor.ux.components.model.tensorflow.model": [[440, "module-neural_compressor.ux.components.model.tensorflow.model"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[441, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "neural_compressor.ux.components.model.tensorflow.utils": [[442, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "neural_compressor.ux.components.model_zoo.download_config": [[443, "module-neural_compressor.ux.components.model_zoo.download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[444, "module-neural_compressor.ux.components.model_zoo.download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[445, "module-neural_compressor.ux.components.model_zoo.downloader"]], "neural_compressor.ux.components.model_zoo": [[446, "module-neural_compressor.ux.components.model_zoo"]], "neural_compressor.ux.components.model_zoo.list_models": [[447, "module-neural_compressor.ux.components.model_zoo.list_models"]], "neural_compressor.ux.components.names_mapper": [[448, "module-neural_compressor.ux.components.names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[449, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "neural_compressor.ux.components.optimization.execute_optimization": [[450, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "neural_compressor.ux.components.optimization.factory": [[451, "module-neural_compressor.ux.components.optimization.factory"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[452, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[453, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[454, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "neural_compressor.ux.components.optimization": [[455, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[456, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[457, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[458, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[459, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[460, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "neural_compressor.ux.components.optimization.optimization": [[461, "module-neural_compressor.ux.components.optimization.optimization"]], "neural_compressor.ux.components.optimization.pruning": [[462, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[463, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[464, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "neural_compressor.ux.components.optimization.tune": [[465, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[466, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[467, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "neural_compressor.ux.components.optimization.tuning_history": [[468, "module-neural_compressor.ux.components.optimization.tuning_history"]], "neural_compressor.ux.components.profiling.execute_profiling": [[469, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "neural_compressor.ux.components.profiling.factory": [[470, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[471, "module-neural_compressor.ux.components.profiling"]], "neural_compressor.ux.components.profiling.profile_model": [[472, "module-neural_compressor.ux.components.profiling.profile_model"]], "neural_compressor.ux.components.profiling.profiler": [[473, "module-neural_compressor.ux.components.profiling.profiler"]], "neural_compressor.ux.components.profiling.profiling": [[474, "module-neural_compressor.ux.components.profiling.profiling"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[475, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[476, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[477, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[478, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "neural_compressor.ux.inc_bench": [[479, "module-neural_compressor.ux.inc_bench"]], "neural_compressor.ux": [[480, "module-neural_compressor.ux"]], "neural_compressor.ux.utils.consts": [[481, "module-neural_compressor.ux.utils.consts"]], "neural_compressor.ux.utils.environment": [[482, "module-neural_compressor.ux.utils.environment"]], "neural_compressor.ux.utils.exceptions": [[483, "module-neural_compressor.ux.utils.exceptions"]], "neural_compressor.ux.utils.executor": [[484, "module-neural_compressor.ux.utils.executor"]], "neural_compressor.ux.utils.expiring_dict": [[485, "module-neural_compressor.ux.utils.expiring_dict"]], "neural_compressor.ux.utils.github_info": [[486, "module-neural_compressor.ux.utils.github_info"]], "neural_compressor.ux.utils.hw_info": [[487, "module-neural_compressor.ux.utils.hw_info"]], "neural_compressor.ux.utils": [[488, "module-neural_compressor.ux.utils"]], "neural_compressor.ux.utils.json_serializer": [[489, "module-neural_compressor.ux.utils.json_serializer"]], "neural_compressor.ux.utils.logger": [[490, "module-neural_compressor.ux.utils.logger"]], "neural_compressor.ux.utils.parser": [[491, "module-neural_compressor.ux.utils.parser"]], "neural_compressor.ux.utils.proc": [[492, "module-neural_compressor.ux.utils.proc"]], "neural_compressor.ux.utils.processes": [[493, "module-neural_compressor.ux.utils.processes"]], "neural_compressor.ux.utils.singleton": [[494, "module-neural_compressor.ux.utils.singleton"]], "neural_compressor.ux.utils.status_updates": [[495, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[496, "module-neural_compressor.ux.utils.templates"]], "neural_compressor.ux.utils.templates.metric": [[497, "module-neural_compressor.ux.utils.templates.metric"]], "neural_compressor.ux.utils.templates.workdir": [[498, "module-neural_compressor.ux.utils.templates.workdir"]], "neural_compressor.ux.utils.utils": [[499, "module-neural_compressor.ux.utils.utils"]], "neural_compressor.ux.utils.workload.config": [[500, "module-neural_compressor.ux.utils.workload.config"]], "neural_compressor.ux.utils.workload.dataloader": [[501, "module-neural_compressor.ux.utils.workload.dataloader"]], "neural_compressor.ux.utils.workload.evaluation": [[502, "module-neural_compressor.ux.utils.workload.evaluation"]], "neural_compressor.ux.utils.workload.graph_optimization": [[503, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "neural_compressor.ux.utils.workload": [[504, "module-neural_compressor.ux.utils.workload"]], "neural_compressor.ux.utils.workload.mixed_precision": [[505, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "neural_compressor.ux.utils.workload.model": [[506, "module-neural_compressor.ux.utils.workload.model"]], "neural_compressor.ux.utils.workload.pruning": [[507, "module-neural_compressor.ux.utils.workload.pruning"]], "neural_compressor.ux.utils.workload.quantization": [[508, "module-neural_compressor.ux.utils.workload.quantization"]], "neural_compressor.ux.utils.workload.tuning": [[509, "module-neural_compressor.ux.utils.workload.tuning"]], "neural_compressor.ux.utils.yaml_utils": [[510, "module-neural_compressor.ux.utils.yaml_utils"]], "neural_compressor.ux.web.communication": [[511, "module-neural_compressor.ux.web.communication"]], "neural_compressor.ux.web.configuration": [[512, "module-neural_compressor.ux.web.configuration"]], "neural_compressor.ux.web.exceptions": [[513, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[514, "module-neural_compressor.ux.web"]], "neural_compressor.ux.web.router": [[515, "module-neural_compressor.ux.web.router"]], "neural_compressor.ux.web.server": [[516, "module-neural_compressor.ux.web.server"]], "neural_compressor.ux.web.service.benchmark": [[517, "module-neural_compressor.ux.web.service.benchmark"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[518, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "neural_compressor.ux.web.service": [[519, "module-neural_compressor.ux.web.service"]], "neural_compressor.ux.web.service.model": [[520, "module-neural_compressor.ux.web.service.model"]], "neural_compressor.ux.web.service.optimization": [[521, "module-neural_compressor.ux.web.service.optimization"]], "neural_compressor.ux.web.service.profiling": [[522, "module-neural_compressor.ux.web.service.profiling"]], "neural_compressor.ux.web.service.request_data_processor": [[523, "module-neural_compressor.ux.web.service.request_data_processor"]], "neural_compressor.ux.web.service.response_generator": [[524, "module-neural_compressor.ux.web.service.response_generator"]], "neural_compressor.ux.web.service.workload": [[525, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[526, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[527, "intel-neural-compressor-documentation"], [606, "intel-neural-compressor-documentation"]], "Sections": [[527, "sections"], [606, "sections"]], "Contributor Covenant Code of Conduct": [[528, "contributor-covenant-code-of-conduct"], [529, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[528, "our-pledge"]], "Our Standards": [[528, "our-standards"]], "Our Responsibilities": [[528, "our-responsibilities"]], "Scope": [[528, "scope"]], "Enforcement": [[528, "enforcement"]], "Attribution": [[528, "attribution"]], "Contribution Guidelines": [[529, "contribution-guidelines"]], "Pull Request Checklist": [[529, "pull-request-checklist"]], "Pull Request Template": [[529, "pull-request-template"]], "Support": [[529, "support"]], "FX": [[530, "fx"]], "Introduction": [[530, "introduction"], [531, "introduction"], [534, "introduction"], [549, "introduction"], [550, "introduction"], [551, "introduction"], [552, "introduction"], [554, "introduction"], [555, "introduction"], [556, "introduction"], [558, "introduction"], [560, "introduction"], [563, "introduction"], [566, "introduction"], [568, "introduction"], [569, "introduction"], [589, "introduction"], [590, "introduction"], [592, "introduction"], [594, "introduction"], [598, "introduction"], [599, "introduction"], [600, "introduction"], [601, "introduction"], [602, "introduction"], [604, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[530, "fx-mode-support-matrix-in-neural-compressor"]], "Get Start": [[530, "get-start"]], "Post Training Static Quantization": [[530, "post-training-static-quantization"], [595, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[530, "post-training-dynamic-quantization"], [595, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[530, "quantization-aware-training"]], "Examples": [[530, "examples"], [531, "examples"], [550, "examples"], [551, "examples"], [552, "examples"], [554, "examples"], [555, "examples"], [556, "examples"], [557, "examples"], [558, "examples"], [567, "examples"], [568, "examples"], [569, "examples"], [590, "examples"], [592, "examples"], [595, "examples"], [600, "examples"]], "Note": [[530, "note"]], "Details": [[530, "details"]], "Common Problem": [[530, "common-problem"]], "Dynamic Quantization": [[530, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[530, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[531, "neural-architecture-search"]], "Basic NAS": [[531, "basic-nas"]], "Dynamic NAS": [[531, "dynamic-nas"]], "NAS Support Matrix": [[531, "nas-support-matrix"]], "Get Started with NAS API": [[531, "get-started-with-nas-api"]], "Basic Usage": [[531, "basic-usage"]], "1. Python code + YAML": [[531, "python-code-yaml"]], "2. Python code only": [[531, "python-code-only"]], "Advanced Usage (Custom NAS)": [[531, "advanced-usage-custom-nas"]], "Security Policy": [[532, "security-policy"]], "Report a Vulnerability": [[532, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[533, "intel-neural-compressor"], [587, "intel-neural-compressor"]], "Installation": [[533, "installation"], [564, "installation"], [581, "installation"]], "Install from pypi": [[533, "install-from-pypi"]], "Getting Started": [[533, "getting-started"], [561, "getting-started"]], "Quantization with Python API": [[533, "quantization-with-python-api"], [561, "quantization-with-python-api"]], "Documentation": [[533, "documentation"]], "Selected Publications/Events": [[533, "selected-publications-events"]], "Additional Content": [[533, "additional-content"]], "Research Collaborations": [[533, "research-collaborations"]], "Adaptor": [[534, "adaptor"], [535, "adaptor"]], "Adaptor Support Matrix": [[534, "adaptor-support-matrix"]], "Working Flow": [[534, "working-flow"], [595, "working-flow"]], "Get Start with Adaptor API": [[534, "get-start-with-adaptor-api"]], "Query API": [[534, "query-api"]], "Background": [[534, "background"]], "Query API Introduction": [[534, "query-api-introduction"]], "Example of Adding a New Backend Support": [[534, "example-of-adding-a-new-backend-support"]], "Capability": [[534, "capability"]], "Implement ONNXRTAdaptor Class": [[534, "implement-onnxrtadaptor-class"]], "ONNX Runtime": [[536, "onnx-runtime"], [568, "onnx-runtime"], [568, "id1"]], "Torch Utils": [[537, "torch-utils"]], "API Document Example": [[538, "api-document-example"]], "APIs": [[539, "apis"]], "Benchmark": [[540, "benchmark"], [567, "benchmark"], [594, "benchmark"]], "Compression": [[541, "compression"]], "Config": [[542, "config"]], "Mix Precision": [[543, "mix-precision"], [567, "mix-precision"]], "Model": [[544, "model"], [569, "model"]], "Objective": [[545, "objective"], [589, "objective"]], "Quantization": [[546, "quantization"], [594, "quantization"], [595, "quantization"]], "Strategy": [[547, "strategy"]], "Training": [[548, "training"]], "Intel\u00ae Neural Compressor Bench": [[549, "intel-neural-compressor-bench"]], "Table of Contents": [[549, "table-of-contents"]], "Install Intel\u00ae Neural Compressor with Bench": [[549, "install-intel-neural-compressor-with-bench"]], "Option 1: Install from Binary": [[549, "option-1-install-from-binary"]], "Option 2: Install from Source": [[549, "option-2-install-from-source"]], "Start the Intel\u00ae Neural Compressor Bench": [[549, "start-the-intel-neural-compressor-bench"]], "Home Screen": [[549, "home-screen"]], "Create New Project": [[549, "create-new-project"]], "Predefined Model": [[549, "predefined-model"]], "Custom Model": [[549, "custom-model"]], "Display Model Graph": [[549, "display-model-graph"]], "Project List": [[549, "project-list"]], "Remove Project": [[549, "remove-project"]], "Develop Project": [[549, "develop-project"]], "Optimization Tab": [[549, "optimization-tab"]], "Optimization Table": [[549, "optimization-table"]], "Optimization Wizard": [[549, "optimization-wizard"]], "Editing Optimization Entries": [[549, "editing-optimization-entries"]], "Optimization Details": [[549, "optimization-details"]], "Pruning": [[549, "pruning"], [567, "pruning"], [592, "pruning"], [594, "pruning"]], "Benchmark Tab": [[549, "benchmark-tab"]], "Benchmark Table": [[549, "benchmark-table"]], "Benchmark Wizard": [[549, "benchmark-wizard"]], "Editing Benchmark Entries": [[549, "editing-benchmark-entries"]], "Benchmark Details": [[549, "benchmark-details"]], "Profiling Tab": [[549, "profiling-tab"]], "Profiling Table": [[549, "profiling-table"]], "Profiling Wizard": [[549, "profiling-wizard"]], "Editing Profiling Entries": [[549, "editing-profiling-entries"]], "Profiling Details": [[549, "profiling-details"]], "Diagnosis Tab": [[549, "diagnosis-tab"]], "Dataset Tab": [[549, "dataset-tab"]], "Dataset List": [[549, "dataset-list"]], "Dataset Wizard": [[549, "dataset-wizard"]], "Dataset Details": [[549, "dataset-details"]], "Custom Dataset": [[549, "custom-dataset"]], "Project Information": [[549, "project-information"]], "NAS demo": [[549, "nas-demo"]], "System Information": [[549, "system-information"]], "Security": [[549, "security"], [556, "security"]], "Benchmarking": [[550, "benchmarking"]], "Benchmark Support Matrix": [[550, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[550, "get-started-with-benchmark-api"]], "DataLoader": [[551, "dataloader"]], "Supported Framework Dataloader Matrix": [[551, "supported-framework-dataloader-matrix"]], "Get Start with Dataloader API": [[551, "get-start-with-dataloader-api"]], "Config Dataloader in a Yaml File": [[551, "config-dataloader-in-a-yaml-file"]], "Create a User-specific Dataloader": [[551, "create-a-user-specific-dataloader"]], "Dataset": [[552, "dataset"]], "Supported Framework Dataset Matrix": [[552, "supported-framework-dataset-matrix"]], "TensorFlow": [[552, "tensorflow"], [566, "tensorflow"], [568, "tensorflow"], [601, "tensorflow"]], "PyTorch": [[552, "pytorch"], [566, "pytorch"], [568, "pytorch"], [596, "pytorch"]], "MXNet": [[552, "mxnet"], [566, "mxnet"], [601, "mxnet"]], "ONNXRT": [[552, "onnxrt"], [566, "onnxrt"], [601, "onnxrt"]], "Get start with Dataset API": [[552, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[552, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[552, "user-specific-dataset"]], "Design": [[553, "design"], [602, "design"], [602, "id1"], [602, "id3"], [602, "id5"], [602, "id7"], [602, "id9"], [602, "id11"], [602, "id13"], [602, "id15"], [602, "id17"], [602, "id19"], [602, "id21"]], "Architecture": [[553, "architecture"], [563, "architecture"]], "Workflow": [[553, "workflow"]], "Distillation": [[554, "distillation"], [567, "distillation"], [594, "distillation"]], "Knowledge Distillation": [[554, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[554, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[554, "self-distillation"]], "Distillation Support Matrix": [[554, "distillation-support-matrix"]], "Get Started with Distillation API": [[554, "get-started-with-distillation-api"]], "Distillation for Quantization": [[555, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[555, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[555, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[556, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[556, "supported-feature-matrix"], [560, "supported-feature-matrix"], [563, "supported-feature-matrix"], [594, "supported-feature-matrix"], [595, "supported-feature-matrix"], [600, "supported-feature-matrix"], [604, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[556, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[556, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[556, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[556, "horovodrun-execution"]], "PyTorch Examples:": [[556, "pytorch-examples"]], "TensorFlow Examples:": [[556, "tensorflow-examples"]], "Example List": [[557, "example-list"]], "Release Data": [[557, "release-data"]], "Export": [[558, "export"]], "Supported Framework Model Matrix": [[558, "supported-framework-model-matrix"], [569, "supported-framework-model-matrix"]], "FP32 Model Export": [[558, "fp32-model-export"]], "INT8 Model Export": [[558, "int8-model-export"]], "Appendix": [[558, "appendix"]], "Frequently Asked Questions": [[559, "frequently-asked-questions"]], "Common Build Issues": [[559, "common-build-issues"]], "Issue 1:": [[559, "issue-1"]], "Issue 2:": [[559, "issue-2"]], "Issue 3:": [[559, "issue-3"]], "Issue 4:": [[559, "issue-4"]], "Framework YAML Configuration Files": [[560, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[560, "get-started-with-framework-yaml-files"]], "Quick Samples": [[561, "quick-samples"]], "Quantization with JupyterLab Extension": [[561, "quantization-with-jupyterlab-extension"]], "Quantization with GUI": [[561, "quantization-with-gui"]], "Validated Models": [[561, "validated-models"], [599, "validated-models"], [605, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[562, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[562, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[562, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[563, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[564, "linux-installation"]], "Prerequisites": [[564, "prerequisites"], [564, "id1"]], "Install from Binary": [[564, "install-from-binary"], [564, "id2"]], "Install from Source": [[564, "install-from-source"], [564, "id3"]], "Install from AI Kit": [[564, "install-from-ai-kit"]], "Windows Installation": [[564, "windows-installation"]], "System Requirements": [[564, "system-requirements"]], "Validated Hardware Environment": [[564, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[564, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[564, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[564, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[564, "validated-software-environment"]], "Legal Information": [[565, "legal-information"]], "License": [[565, "license"]], "Citation": [[565, "citation"]], "Trademarks": [[565, "trademarks"]], "Metrics": [[566, "metrics"]], "Supported Built-in Metric Matrix": [[566, "supported-built-in-metric-matrix"]], "Get Start with Metrics": [[566, "get-start-with-metrics"]], "Support Single-metric and Multi-metrics": [[566, "support-single-metric-and-multi-metrics"]], "Build Custom Metric with Python API": [[566, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[567, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[567, "model-quantization"]], "Post-training Quantization": [[567, "post-training-quantization"]], "Quantization Aware Training": [[567, "quantization-aware-training"], [595, "quantization-aware-training"], [595, "id1"]], "Orchestration": [[567, "orchestration"]], "Mixed Precision": [[568, "mixed-precision"]], "Mixed Precision Support Matrix": [[568, "mixed-precision-support-matrix"]], "Get Started with Mixed Precision API": [[568, "get-started-with-mixed-precision-api"]], "Neural Coder": [[570, "neural-coder"], [587, "neural-coder"], [587, "id1"]], "What do we offer?": [[570, "what-do-we-offer"]], "Getting Started!": [[570, "getting-started"], [581, "getting-started"]], "Jupyter Lab Extension": [[570, "jupyter-lab-extension"]], "Python Launcher": [[570, "python-launcher"], [575, "python-launcher"]], "Python API": [[570, "python-api"]], "Contact": [[570, "contact"]], "AWS Amazon SageMaker Support": [[571, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[571, "start-jupyter-lab-3"]], "For SageMaker Studio": [[571, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[571, "for-sagemaker-notebook-instance"]], "Installation Guide": [[571, "installation-guide"]], "BigDL Nano Support": [[572, "bigdl-nano-support"]], "Example": [[572, "example"], [576, "example"], [589, "example"], [599, "example"]], "Support Matrix": [[572, "support-matrix"]], "Intel CPU Platforms: Best Performance Setting": [[573, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[573, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[573, "install-numa-controller"]], "Environment Variables": [[573, "environment-variables"]], "Frequency Governers": [[573, "frequency-governers"]], "Neural Coder as Python API": [[574, "neural-coder-as-python-api"]], "Enable": [[574, "enable"]], "Bench": [[574, "bench"]], "SuperBench": [[574, "superbench"]], "Quick-Start": [[575, "quick-start"]], "Launcher Arguments (Optional)": [[575, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[576, "neural-coder-for-quantization"]], "Features Supported": [[576, "features-supported"]], "Models Supported": [[576, "models-supported"]], "Usage": [[576, "usage"], [600, "usage"], [600, "id1"], [602, "usage"], [602, "id2"], [602, "id4"], [602, "id6"], [602, "id8"], [602, "id10"], [602, "id12"], [602, "id14"], [602, "id16"], [602, "id18"], [602, "id20"], [602, "id22"]], "PyPI distribution:": [[576, "pypi-distribution"]], "Supported Optimization Features": [[577, "supported-optimization-features"]], "v0.4": [[578, "v0-4"]], "Highlights": [[578, "highlights"]], "Others": [[578, "others"]], "Changelog": [[579, "changelog"], [583, "changelog"]], "neural_compressor_ext_lab": [[580, "neural-compressor-ext-lab"]], "Requirements": [[580, "requirements"], [584, "requirements"]], "Install": [[580, "install"], [584, "install"]], "Uninstall": [[580, "uninstall"], [584, "uninstall"]], "Contributing": [[580, "contributing"], [584, "contributing"]], "Development install": [[580, "development-install"], [584, "development-install"]], "Development uninstall": [[580, "development-uninstall"], [584, "development-uninstall"]], "Packaging the extension": [[580, "packaging-the-extension"], [584, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[581, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[581, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[581, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[581, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[582, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[582, "manual-release"], [585, "manual-release"]], "Python package": [[582, "python-package"], [585, "python-package"]], "NPM package": [[582, "npm-package"], [585, "npm-package"]], "Automated releases with the Jupyter Releaser": [[582, "automated-releases-with-the-jupyter-releaser"], [585, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[582, "publishing-to-conda-forge"], [585, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[584, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[585, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[586, "change-log"]], "[Unreleased]": [[586, "unreleased"]], "Background Introduction": [[587, "background-introduction"]], "Neural Coder Extension in VSCode": [[587, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[587, "neural-coder-extension-usage"]], "1. Open": [[587, "open"]], "2. Search": [[587, "search"]], "3. Setting": [[587, "setting"]], "4. Icon": [[587, "icon"]], "5. optimization (quantization)": [[587, "optimization-quantization"]], "5.1 Enable": [[587, "enable"]], "5.2 Auto": [[587, "auto"]], "Welcome to your VS Code Extension": [[588, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[588, "what-s-in-the-folder"]], "Setup": [[588, "setup"]], "Get up and running straight away": [[588, "get-up-and-running-straight-away"]], "Make changes": [[588, "make-changes"]], "Explore the API": [[588, "explore-the-api"]], "Run tests": [[588, "run-tests"]], "Go further": [[588, "go-further"]], "Single Objective": [[589, "single-objective"]], "Multiple Objectives": [[589, "multiple-objectives"]], "Objective Support Matrix": [[589, "objective-support-matrix"]], "Get Started with Objective API": [[589, "get-started-with-objective-api"]], "Config Single Objective": [[589, "config-single-objective"]], "Config Multiple Objectives": [[589, "config-multiple-objectives"]], "Optimization Orchestration": [[590, "optimization-orchestration"]], "One-shot": [[590, "one-shot"]], "Orchestration Support Matrix": [[590, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[590, "get-started-with-orchestration-api"]], "SYSTEM CONFIGURATION": [[591, "system-configuration"]], "Neural Network Pruning": [[592, "neural-network-pruning"]], "Pruning Patterns": [[592, "pruning-patterns"]], "Pruning Criteria": [[592, "pruning-criteria"]], "Pruning Schedule": [[592, "pruning-schedule"]], "Pruning Types": [[592, "pruning-types"]], "Pruning Scope": [[592, "pruning-scope"]], "Sparsity Decay Types": [[592, "sparsity-decay-types"]], "Regularization": [[592, "regularization"]], "Pruning Support Matrix": [[592, "pruning-support-matrix"]], "Get Started with Pruning API": [[592, "get-started-with-pruning-api"]], "Sparse Model Deployment": [[592, "sparse-model-deployment"]], "Reference": [[592, "reference"], [595, "reference"], [599, "reference"]], "Full Publications/Events (59)": [[593, "full-publications-events-59"]], "2023 (6)": [[593, "id1"]], "2022 (34)": [[593, "id2"]], "2021 (15)": [[593, "id3"]], "2018 - 2020 (4)": [[593, "id4"]], "Pythonic Style Access for Configurations": [[594, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[594, "pythonic-api-for-user-configurations"], [594, "id1"]], "Pythonic API for Framework Configurations": [[594, "pythonic-api-for-framework-configurations"], [594, "id2"]], "Get Started with Pythonic API for Configurations": [[594, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[594, "nas"]], "Quantization Introduction": [[595, "quantization-introduction"]], "Quantization Fundamentals": [[595, "quantization-fundamentals"], [599, "quantization-fundamentals"]], "Quantization Support Matrix": [[595, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[595, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[595, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[595, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[595, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[595, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[595, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[595, "with-or-without-accuracy-aware-tuning"]], "Get Started": [[595, "get-started"]], "Post Training Quantization": [[595, "post-training-quantization"]], "Specify Quantization Rules": [[595, "specify-quantization-rules"]], "Specify Quantization Recipes": [[595, "specify-quantization-recipes"]], "Specify Quantization Backend": [[595, "specify-quantization-backend"]], "Turn OFF Auto Mixed Precision during Quantization": [[596, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[596, "tensorflow"]], "Release": [[597, "release"]], "Release Notes": [[597, "release-notes"]], "Known Issues": [[597, "known-issues"]], "Incompatible Changes": [[597, "incompatible-changes"]], "SigOpt Strategy": [[598, "sigopt-strategy"]], "Preparation": [[598, "preparation"]], "SigOpt Platform": [[598, "sigopt-platform"]], "Neural Compressor Configuration": [[598, "neural-compressor-configuration"]], "Performance": [[598, "performance"]], "Benefit of SigOpt Strategy": [[598, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[598, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[599, "smooth-quant"]], "Per-tensor & Per-channel": [[599, "per-tensor-per-channel"]], "Per-tensor example": [[599, "per-tensor-example"]], "Per-channel example": [[599, "per-channel-example"]], "Matmul quantization example": [[599, "matmul-quantization-example"]], "Per-channel limitation": [[599, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[599, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[599, "smoothquant"]], "Our enhancement:": [[599, "our-enhancement"]], "Algorithm: Layer-wise Auto-tuning of $\\alpha$.": [[599, "algorithm-layer-wise-auto-tuning-of-alpha"]], "Engineering": [[599, "engineering"]], "TensorBoard": [[600, "tensorboard"]], "Get Started with TensorBoard": [[600, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[600, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[600, "tensorflow-tensorboard"]], "PyTorch Examples": [[600, "pytorch-examples"]], "TensorFlow Examples": [[600, "tensorflow-examples"]], "Transform": [[601, "transform"]], "Transform Support List": [[601, "transform-support-list"]], "Pytorch": [[601, "pytorch"]], "Tuning Strategies": [[602, "tuning-strategies"]], "Strategy Design": [[602, "strategy-design"]], "Tuning Space": [[602, "tuning-space"]], "Exit Policy": [[602, "exit-policy"]], "Accuracy Criteria": [[602, "accuracy-criteria"]], "Tuning Process": [[602, "tuning-process"]], "Tuning Algorithms": [[602, "tuning-algorithms"]], "Auto": [[602, "auto"]], "Conservative Tuning": [[602, "conservative-tuning"]], "Basic": [[602, "basic"]], "MSE": [[602, "mse"]], "MSE_V2": [[602, "mse-v2"]], "HAWQ_V2": [[602, "hawq-v2"]], "Bayesian": [[602, "bayesian"]], "Exhaustive": [[602, "exhaustive"]], "Random": [[602, "random"]], "SigOpt": [[602, "sigopt"]], "TPE": [[602, "tpe"]], "Distributed Tuning": [[602, "distributed-tuning"]], "Customize a New Tuning Strategy": [[602, "customize-a-new-tuning-strategy"]], "User Guide": [[603, "user-guide"]], "Overview": [[603, "overview"]], "Python-based APIs": [[603, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[603, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[603, "advanced-topics"]], "User YAML Configuration Files": [[604, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[604, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[605, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.11.0": [[605, "tensorflow-models-with-intel-tensorflow-2-11-0"]], "PyTorch Models with Torch 1.13.0+cpu in PTQ Mode": [[605, "pytorch-models-with-torch-1-13-0-cpu-in-ptq-mode"]], "PyTorch Models with Torch 1.13.0+cpu in QAT Mode": [[605, "pytorch-models-with-torch-1-13-0-cpu-in-qat-mode"]], "PyTorch Models with Torch and Intel\u00ae Extension for PyTorch* 1.13.0+cpu": [[605, "pytorch-models-with-torch-and-intel-extension-for-pytorch-1-13-0-cpu"]], "ONNX Models with ONNX Runtime 1.13.1": [[605, "onnx-models-with-onnx-runtime-1-13-1"]], "MXNet Models with MXNet 1.9.1": [[605, "mxnet-models-with-mxnet-1-9-1"]], "Validated Pruning Examples": [[605, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[605, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[605, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"644ec953a7dc_pruning_support": [[0, "module-644ec953a7dc_pruning_support"]], "module": [[0, "module-644ec953a7dc_pruning_support"], [1, "module-6ece06672ed3_v1_14"], [2, "module-6f0d0f71d92e_v1_13"], [3, "module-9e89549a08c8_v1_11"], [4, "module-block_mask"], [5, "module-env"], [6, "module-neural_compressor.adaptor.adaptor"], [7, "module-neural_compressor.adaptor"], [8, "module-neural_compressor.adaptor.keras"], [9, "module-neural_compressor.adaptor.keras_utils.conv2d"], [10, "module-neural_compressor.adaptor.keras_utils.dense"], [11, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"], [12, "module-neural_compressor.adaptor.keras_utils"], [13, "module-neural_compressor.adaptor.keras_utils.quantizer"], [14, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"], [15, "module-neural_compressor.adaptor.mxnet"], [16, "module-neural_compressor.adaptor.mxnet_utils"], [17, "module-neural_compressor.adaptor.mxnet_utils.util"], [18, "module-neural_compressor.adaptor.onnxrt"], [19, "module-neural_compressor.adaptor.ox_utils.calibration"], [20, "module-neural_compressor.adaptor.ox_utils.calibrator"], [21, "module-neural_compressor.adaptor.ox_utils"], [22, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [23, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [24, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [25, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [26, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [27, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [28, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [29, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [30, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [31, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [32, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [33, "module-neural_compressor.adaptor.ox_utils.operators"], [34, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [35, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [36, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [37, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [38, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [39, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [40, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [41, "module-neural_compressor.adaptor.ox_utils.operators.split"], [42, "module-neural_compressor.adaptor.ox_utils.quantizer"], [43, "module-neural_compressor.adaptor.ox_utils.util"], [44, "module-neural_compressor.adaptor.pytorch"], [45, "module-neural_compressor.adaptor.query"], [46, "module-neural_compressor.adaptor.tensorflow"], [47, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [109, "module-neural_compressor.adaptor.tf_utils.graph_util"], [110, "module-neural_compressor.adaptor.tf_utils"], [111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [139, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [140, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [141, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [142, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [143, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [144, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [145, "module-neural_compressor.adaptor.tf_utils.util"], [146, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [147, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [148, "module-neural_compressor.adaptor.torch_utils"], [149, "module-neural_compressor.adaptor.torch_utils.model_wrapper"], [150, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [151, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [152, "module-neural_compressor.adaptor.torch_utils.util"], [153, "module-neural_compressor.algorithm.algorithm"], [154, "module-neural_compressor.algorithm.fast_bias_correction"], [155, "module-neural_compressor.algorithm"], [156, "module-neural_compressor.algorithm.smooth_quant"], [157, "module-neural_compressor.algorithm.weight_correction"], [158, "module-neural_compressor.benchmark"], [159, "module-neural_compressor.compression.callbacks"], [160, "module-neural_compressor.compression.distillation.criterions"], [161, "module-neural_compressor.compression.distillation"], [162, "module-neural_compressor.compression"], [163, "module-neural_compressor.compression.pruner.criteria"], [164, "module-neural_compressor.compression.pruner"], [165, "module-neural_compressor.compression.pruner.model_slim"], [166, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"], [167, "module-neural_compressor.compression.pruner.model_slim.weight_slim"], [168, "module-neural_compressor.compression.pruner.patterns"], [169, "module-neural_compressor.compression.pruner.pruners"], [170, "module-neural_compressor.compression.pruner.regs"], [171, "module-neural_compressor.compression.pruner.schedulers"], [172, "module-neural_compressor.compression.pruner.utils"], [173, "module-neural_compressor.conf.config"], [174, "module-neural_compressor.conf.dotdict"], [175, "module-neural_compressor.conf"], [176, "module-neural_compressor.conf.pythonic_config"], [177, "module-neural_compressor.config"], [178, "module-neural_compressor.contrib"], [179, "module-neural_compressor.contrib.strategy"], [180, "module-neural_compressor.contrib.strategy.sigopt"], [181, "module-neural_compressor.contrib.strategy.tpe"], [182, "module-neural_compressor.data.dataloaders.base_dataloader"], [183, "module-neural_compressor.data.dataloaders.dataloader"], [184, "module-neural_compressor.data.dataloaders.default_dataloader"], [185, "module-neural_compressor.data.dataloaders.fetcher"], [186, "module-neural_compressor.data.dataloaders"], [187, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [188, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [189, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [190, "module-neural_compressor.data.dataloaders.sampler"], [191, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [192, "module-neural_compressor.data.datasets.bert_dataset"], [193, "module-neural_compressor.data.datasets.coco_dataset"], [194, "module-neural_compressor.data.datasets.dataset"], [195, "module-neural_compressor.data.datasets.dummy_dataset"], [196, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [197, "module-neural_compressor.data.datasets.imagenet_dataset"], [198, "module-neural_compressor.data.datasets"], [199, "module-neural_compressor.data.datasets.style_transfer_dataset"], [200, "module-neural_compressor.data.filters.coco_filter"], [201, "module-neural_compressor.data.filters.filter"], [202, "module-neural_compressor.data.filters"], [203, "module-neural_compressor.data"], [204, "module-neural_compressor.data.transforms.coco_transform"], [205, "module-neural_compressor.data.transforms.imagenet_transform"], [206, "module-neural_compressor.data.transforms"], [207, "module-neural_compressor.data.transforms.postprocess"], [208, "module-neural_compressor.data.transforms.tokenization"], [209, "module-neural_compressor.data.transforms.transform"], [210, "module-neural_compressor.experimental.benchmark"], [211, "module-neural_compressor.experimental.common.criterion"], [212, "module-neural_compressor.experimental.common.dataloader"], [213, "module-neural_compressor.experimental.common"], [214, "module-neural_compressor.experimental.common.metric"], [215, "module-neural_compressor.experimental.common.model"], [216, "module-neural_compressor.experimental.common.optimizer"], [217, "module-neural_compressor.experimental.common.postprocess"], [218, "module-neural_compressor.experimental.common.torch_utils"], [219, "module-neural_compressor.experimental.component"], [220, "module-neural_compressor.experimental.compression"], [221, "module-neural_compressor.experimental.compression.pruning"], [222, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [223, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [224, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [225, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [226, "module-neural_compressor.experimental.data.dataloaders"], [227, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [228, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [229, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [230, "module-neural_compressor.experimental.data.dataloaders.sampler"], [231, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [232, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [233, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [234, "module-neural_compressor.experimental.data.datasets.dataset"], [235, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [236, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [237, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [238, "module-neural_compressor.experimental.data.datasets"], [239, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [240, "module-neural_compressor.experimental.data.filters.coco_filter"], [241, "module-neural_compressor.experimental.data.filters.filter"], [242, "module-neural_compressor.experimental.data.filters"], [243, "module-neural_compressor.experimental.data"], [244, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [245, "module-neural_compressor.experimental.data.transforms"], [246, "module-neural_compressor.experimental.data.transforms.tokenization"], [247, "module-neural_compressor.experimental.data.transforms.transform"], [248, "module-neural_compressor.experimental.distillation"], [249, "module-neural_compressor.experimental.export"], [250, "module-neural_compressor.experimental.export.qlinear2qdq"], [251, "module-neural_compressor.experimental.export.tf2onnx"], [252, "module-neural_compressor.experimental.export.torch2onnx"], [253, "module-neural_compressor.experimental.export.utils"], [254, "module-neural_compressor.experimental.graph_optimization"], [255, "module-neural_compressor.experimental"], [256, "module-neural_compressor.experimental.metric.bleu"], [257, "module-neural_compressor.experimental.metric.bleu_util"], [258, "module-neural_compressor.experimental.metric.coco_label_map"], [259, "module-neural_compressor.experimental.metric.coco_tools"], [260, "module-neural_compressor.experimental.metric.evaluate_squad"], [261, "module-neural_compressor.experimental.metric.f1"], [262, "module-neural_compressor.experimental.metric"], [263, "module-neural_compressor.experimental.metric.metric"], [264, "module-neural_compressor.experimental.mixed_precision"], [265, "module-neural_compressor.experimental.model_conversion"], [266, "module-neural_compressor.experimental.nas.basic_nas"], [267, "module-neural_compressor.experimental.nas.dynas"], [268, "module-neural_compressor.experimental.nas"], [269, "module-neural_compressor.experimental.nas.nas"], [270, "module-neural_compressor.experimental.nas.nas_utils"], [271, "module-neural_compressor.experimental.nas.search_algorithms"], [272, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [273, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [274, "module-neural_compressor.experimental.pruner_legacy"], [275, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [276, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [277, "module-neural_compressor.experimental.pruner_legacy.pruner"], [278, "module-neural_compressor.experimental.pruning"], [279, "module-neural_compressor.experimental.pruning_recipes"], [280, "module-neural_compressor.experimental.pruning_recipes.patterns"], [281, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [282, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [283, "module-neural_compressor.experimental.pruning_v2"], [284, "module-neural_compressor.experimental.pytorch_pruner"], [285, "module-neural_compressor.experimental.pytorch_pruner.logger"], [286, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [287, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [288, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [289, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [290, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [291, "module-neural_compressor.experimental.quantization"], [292, "module-neural_compressor.experimental.scheduler"], [293, "module-neural_compressor"], [294, "module-neural_compressor.metric.bleu"], [295, "module-neural_compressor.metric.bleu_util"], [296, "module-neural_compressor.metric.coco_label_map"], [297, "module-neural_compressor.metric.coco_tools"], [298, "module-neural_compressor.metric.evaluate_squad"], [299, "module-neural_compressor.metric.f1"], [300, "module-neural_compressor.metric"], [301, "module-neural_compressor.metric.metric"], [302, "module-neural_compressor.mix_precision"], [303, "module-neural_compressor.model.base_model"], [304, "module-neural_compressor.model"], [305, "module-neural_compressor.model.keras_model"], [306, "module-neural_compressor.model.model"], [307, "module-neural_compressor.model.mxnet_model"], [308, "module-neural_compressor.model.nets_factory"], [309, "module-neural_compressor.model.onnx_model"], [310, "module-neural_compressor.model.tensorflow_model"], [311, "module-neural_compressor.model.torch_model"], [312, "module-neural_compressor.objective"], [313, "module-neural_compressor.quantization"], [314, "module-neural_compressor.strategy.auto"], [315, "module-neural_compressor.strategy.auto_mixed_precision"], [316, "module-neural_compressor.strategy.basic"], [317, "module-neural_compressor.strategy.bayesian"], [318, "module-neural_compressor.strategy.conservative"], [319, "module-neural_compressor.strategy.exhaustive"], [320, "module-neural_compressor.strategy.hawq_v2"], [321, "module-neural_compressor.strategy"], [322, "module-neural_compressor.strategy.mse"], [323, "module-neural_compressor.strategy.mse_v2"], [324, "module-neural_compressor.strategy.random"], [325, "module-neural_compressor.strategy.strategy"], [326, "module-neural_compressor.strategy.utils.constant"], [327, "module-neural_compressor.strategy.utils"], [328, "module-neural_compressor.strategy.utils.tuning_sampler"], [329, "module-neural_compressor.strategy.utils.tuning_space"], [330, "module-neural_compressor.strategy.utils.tuning_structs"], [331, "module-neural_compressor.strategy.utils.utility"], [332, "module-neural_compressor.template.api_doc_example"], [333, "module-neural_compressor.template"], [334, "module-neural_compressor.training"], [335, "module-neural_compressor.utils.collect_layer_histogram"], [336, "module-neural_compressor.utils.constant"], [337, "module-neural_compressor.utils.create_obj_from_config"], [338, "module-neural_compressor.utils"], [339, "module-neural_compressor.utils.kl_divergence"], [340, "module-neural_compressor.utils.load_huggingface"], [341, "module-neural_compressor.utils.logger"], [342, "module-neural_compressor.utils.options"], [343, "module-neural_compressor.utils.pytorch"], [344, "module-neural_compressor.utils.utility"], [345, "module-neural_compressor.ux.components.benchmark.benchmark"], [346, "module-neural_compressor.ux.components.benchmark.benchmark_model"], [347, "module-neural_compressor.ux.components.benchmark.execute_benchmark"], [348, "module-neural_compressor.ux.components.benchmark"], [349, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"], [350, "module-neural_compressor.ux.components.config_generator.config_generator"], [351, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"], [352, "module-neural_compressor.ux.components.config_generator"], [353, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"], [354, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"], [355, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"], [356, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"], [357, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"], [358, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"], [359, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"], [360, "module-neural_compressor.ux.components.configuration_wizard"], [361, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"], [362, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"], [363, "module-neural_compressor.ux.components.db_manager.db_manager"], [364, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"], [365, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"], [366, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"], [367, "module-neural_compressor.ux.components.db_manager.db_models.dataset"], [368, "module-neural_compressor.ux.components.db_manager.db_models.domain"], [369, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"], [370, "module-neural_compressor.ux.components.db_manager.db_models.example"], [371, "module-neural_compressor.ux.components.db_manager.db_models.framework"], [372, "module-neural_compressor.ux.components.db_manager.db_models"], [373, "module-neural_compressor.ux.components.db_manager.db_models.metric"], [374, "module-neural_compressor.ux.components.db_manager.db_models.model"], [375, "module-neural_compressor.ux.components.db_manager.db_models.optimization"], [376, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"], [377, "module-neural_compressor.ux.components.db_manager.db_models.precision"], [378, "module-neural_compressor.ux.components.db_manager.db_models.profiling"], [379, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"], [380, "module-neural_compressor.ux.components.db_manager.db_models.project"], [381, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"], [382, "module-neural_compressor.ux.components.db_manager.db_models.transform"], [383, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"], [384, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"], [385, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"], [386, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"], [387, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"], [388, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"], [389, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"], [390, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"], [391, "module-neural_compressor.ux.components.db_manager.db_operations"], [392, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"], [393, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"], [394, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"], [395, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"], [396, "module-neural_compressor.ux.components.db_manager"], [397, "module-neural_compressor.ux.components.db_manager.params_interfaces"], [398, "module-neural_compressor.ux.components.db_manager.utils"], [399, "module-neural_compressor.ux.components.diagnosis.diagnosis"], [400, "module-neural_compressor.ux.components.diagnosis.factory"], [401, "module-neural_compressor.ux.components.diagnosis"], [402, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"], [403, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"], [404, "module-neural_compressor.ux.components.diagnosis.op_details"], [405, "module-neural_compressor.ux.components.diagnosis.op_entry"], [406, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"], [407, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"], [408, "module-neural_compressor.ux.components.file_browser.file_browser"], [409, "module-neural_compressor.ux.components.file_browser"], [410, "module-neural_compressor.ux.components.graph.attribute"], [411, "module-neural_compressor.ux.components.graph.collapser"], [412, "module-neural_compressor.ux.components.graph.edge"], [413, "module-neural_compressor.ux.components.graph.graph"], [414, "module-neural_compressor.ux.components.graph.graph_reader"], [415, "module-neural_compressor.ux.components.graph"], [416, "module-neural_compressor.ux.components.graph.node"], [417, "module-neural_compressor.ux.components.graph.reader"], [418, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"], [419, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"], [420, "module-neural_compressor.ux.components"], [421, "module-neural_compressor.ux.components.jobs_management"], [422, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"], [423, "module-neural_compressor.ux.components.jobs_management.jobs_manager"], [424, "module-neural_compressor.ux.components.jobs_management.request"], [425, "module-neural_compressor.ux.components.manage_workspace"], [426, "module-neural_compressor.ux.components.model.domain"], [427, "module-neural_compressor.ux.components.model"], [428, "module-neural_compressor.ux.components.model.model"], [429, "module-neural_compressor.ux.components.model.model_type_getter"], [430, "module-neural_compressor.ux.components.model.onnxrt"], [431, "module-neural_compressor.ux.components.model.onnxrt.model"], [432, "module-neural_compressor.ux.components.model.pytorch"], [433, "module-neural_compressor.ux.components.model.pytorch.model"], [434, "module-neural_compressor.ux.components.model.repository"], [435, "module-neural_compressor.ux.components.model.shape"], [436, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"], [437, "module-neural_compressor.ux.components.model.tensorflow"], [438, "module-neural_compressor.ux.components.model.tensorflow.keras"], [439, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"], [440, "module-neural_compressor.ux.components.model.tensorflow.model"], [441, "module-neural_compressor.ux.components.model.tensorflow.saved_model"], [442, "module-neural_compressor.ux.components.model.tensorflow.utils"], [443, "module-neural_compressor.ux.components.model_zoo.download_config"], [444, "module-neural_compressor.ux.components.model_zoo.download_model"], [445, "module-neural_compressor.ux.components.model_zoo.downloader"], [446, "module-neural_compressor.ux.components.model_zoo"], [447, "module-neural_compressor.ux.components.model_zoo.list_models"], [448, "module-neural_compressor.ux.components.names_mapper"], [449, "module-neural_compressor.ux.components.names_mapper.names_mapper"], [450, "module-neural_compressor.ux.components.optimization.execute_optimization"], [451, "module-neural_compressor.ux.components.optimization.factory"], [452, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"], [453, "module-neural_compressor.ux.components.optimization.graph_optimizer"], [454, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"], [455, "module-neural_compressor.ux.components.optimization"], [456, "module-neural_compressor.ux.components.optimization.mixed_precision"], [457, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"], [458, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"], [459, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"], [460, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"], [461, "module-neural_compressor.ux.components.optimization.optimization"], [462, "module-neural_compressor.ux.components.optimization.pruning"], [463, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"], [464, "module-neural_compressor.ux.components.optimization.pruning.pruning"], [465, "module-neural_compressor.ux.components.optimization.tune"], [466, "module-neural_compressor.ux.components.optimization.tune.tune_model"], [467, "module-neural_compressor.ux.components.optimization.tune.tuning"], [468, "module-neural_compressor.ux.components.optimization.tuning_history"], [469, "module-neural_compressor.ux.components.profiling.execute_profiling"], [470, "module-neural_compressor.ux.components.profiling.factory"], [471, "module-neural_compressor.ux.components.profiling"], [472, "module-neural_compressor.ux.components.profiling.profile_model"], [473, "module-neural_compressor.ux.components.profiling.profiler"], [474, "module-neural_compressor.ux.components.profiling.profiling"], [475, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"], [476, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"], [477, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"], [478, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"], [479, "module-neural_compressor.ux.inc_bench"], [480, "module-neural_compressor.ux"], [481, "module-neural_compressor.ux.utils.consts"], [482, "module-neural_compressor.ux.utils.environment"], [483, "module-neural_compressor.ux.utils.exceptions"], [484, "module-neural_compressor.ux.utils.executor"], [485, "module-neural_compressor.ux.utils.expiring_dict"], [486, "module-neural_compressor.ux.utils.github_info"], [487, "module-neural_compressor.ux.utils.hw_info"], [488, "module-neural_compressor.ux.utils"], [489, "module-neural_compressor.ux.utils.json_serializer"], [490, "module-neural_compressor.ux.utils.logger"], [491, "module-neural_compressor.ux.utils.parser"], [492, "module-neural_compressor.ux.utils.proc"], [493, "module-neural_compressor.ux.utils.processes"], [494, "module-neural_compressor.ux.utils.singleton"], [495, "module-neural_compressor.ux.utils.status_updates"], [496, "module-neural_compressor.ux.utils.templates"], [497, "module-neural_compressor.ux.utils.templates.metric"], [498, "module-neural_compressor.ux.utils.templates.workdir"], [499, "module-neural_compressor.ux.utils.utils"], [500, "module-neural_compressor.ux.utils.workload.config"], [501, "module-neural_compressor.ux.utils.workload.dataloader"], [502, "module-neural_compressor.ux.utils.workload.evaluation"], [503, "module-neural_compressor.ux.utils.workload.graph_optimization"], [504, "module-neural_compressor.ux.utils.workload"], [505, "module-neural_compressor.ux.utils.workload.mixed_precision"], [506, "module-neural_compressor.ux.utils.workload.model"], [507, "module-neural_compressor.ux.utils.workload.pruning"], [508, "module-neural_compressor.ux.utils.workload.quantization"], [509, "module-neural_compressor.ux.utils.workload.tuning"], [510, "module-neural_compressor.ux.utils.yaml_utils"], [511, "module-neural_compressor.ux.web.communication"], [512, "module-neural_compressor.ux.web.configuration"], [513, "module-neural_compressor.ux.web.exceptions"], [514, "module-neural_compressor.ux.web"], [515, "module-neural_compressor.ux.web.router"], [516, "module-neural_compressor.ux.web.server"], [517, "module-neural_compressor.ux.web.service.benchmark"], [518, "module-neural_compressor.ux.web.service.history_snapshot_parser"], [519, "module-neural_compressor.ux.web.service"], [520, "module-neural_compressor.ux.web.service.model"], [521, "module-neural_compressor.ux.web.service.optimization"], [522, "module-neural_compressor.ux.web.service.profiling"], [523, "module-neural_compressor.ux.web.service.request_data_processor"], [524, "module-neural_compressor.ux.web.service.response_generator"], [525, "module-neural_compressor.ux.web.service.workload"], [526, "module-neural_compressor.version"]], "6ece06672ed3_v1_14": [[1, "module-6ece06672ed3_v1_14"]], "update_dataloaders() (in module 6ece06672ed3_v1_14)": [[1, "ece06672ed3_v1_14.update_dataloaders"]], "update_transformations() (in module 6ece06672ed3_v1_14)": [[1, "ece06672ed3_v1_14.update_transformations"]], "6f0d0f71d92e_v1_13": [[2, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[3, "module-9e89549a08c8_v1_11"]], "block_mask": [[4, "module-block_mask"]], "env": [[5, "module-env"]], "run_migrations_offline() (in module env)": [[5, "env.run_migrations_offline"]], "run_migrations_online() (in module env)": [[5, "env.run_migrations_online"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[6, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[6, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "neural_compressor.adaptor.adaptor": [[6, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[7, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor"]], "neural_compressor.adaptor.keras": [[8, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[9, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[10, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[11, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[12, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[13, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[14, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "mxnetquery (class in neural_compressor.adaptor.mxnet)": [[15, "neural_compressor.adaptor.mxnet.MXNetQuery"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[15, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "neural_compressor.adaptor.mxnet": [[15, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[16, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[17, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[18, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[18, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[18, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[18, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt": [[18, "module-neural_compressor.adaptor.onnxrt"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[19, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration": [[19, "module-neural_compressor.adaptor.ox_utils.calibration"]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[20, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase"]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[20, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector"]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[20, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator"]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[20, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator"]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[20, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator"]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[20, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry"]], "neural_compressor.adaptor.ox_utils.calibrator": [[20, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[20, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution"]], "neural_compressor.adaptor.ox_utils": [[21, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[22, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[22, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[22, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[22, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[23, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[23, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[23, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[24, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[24, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[24, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[25, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[25, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[25, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[26, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[26, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[26, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[27, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[27, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[27, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[28, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[28, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[28, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[29, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[29, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[29, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[30, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[30, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[30, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[31, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[31, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[31, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[32, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[32, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[32, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[33, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[34, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[34, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[35, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[35, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[35, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[36, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[36, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[36, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[37, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[37, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[37, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[37, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[37, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[38, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[38, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[38, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[39, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[39, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[39, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[40, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[40, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[40, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[41, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[41, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[41, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[42, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer": [[42, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "adjust_weights_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.adjust_weights_per_input"]], "adjust_weights_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.adjust_weights_per_op"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "get_smooth_scales_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.get_smooth_scales_per_input"]], "get_smooth_scales_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.get_smooth_scales_per_op"]], "insert_smooth_mul_op_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.insert_smooth_mul_op_per_input"]], "insert_smooth_mul_op_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.insert_smooth_mul_op_per_op"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchquery (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorchQuery"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "neural_compressor.adaptor.pytorch": [[44, "module-neural_compressor.adaptor.pytorch"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[45, "neural_compressor.adaptor.query.QueryBackendCapability"]], "neural_compressor.adaptor.query": [[45, "module-neural_compressor.adaptor.query"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow": [[46, "module-neural_compressor.adaptor.tensorflow"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[47, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[48, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[49, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[109, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[109, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[110, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[139, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[139, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[140, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[140, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[141, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[141, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[142, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[143, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[144, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[145, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[146, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[146, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[146, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[146, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[147, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[147, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[147, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[147, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[147, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[148, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[149, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "graphtrace (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[150, "neural_compressor.adaptor.torch_utils.smooth_quant.GraphTrace"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[150, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "get_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[150, "neural_compressor.adaptor.torch_utils.smooth_quant.get_module"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[150, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "set_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[150, "neural_compressor.adaptor.torch_utils.smooth_quant.set_module"]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[150, "neural_compressor.adaptor.torch_utils.smooth_quant.update_sq_scale"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[151, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[151, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[151, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern"]], "neural_compressor.adaptor.torch_utils.util": [[152, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[153, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[153, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[153, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[153, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[153, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[154, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[154, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[155, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[156, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[156, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[157, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[157, "module-neural_compressor.algorithm.weight_correction"]], "fit() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.fit"]], "get_architecture() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[158, "module-neural_compressor.benchmark"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.set_env_var"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[159, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[159, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[159, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[159, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[159, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[159, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[159, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[159, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "neural_compressor.compression.callbacks": [[159, "module-neural_compressor.compression.callbacks"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "neural_compressor.compression.distillation.criterions": [[160, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[161, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[162, "module-neural_compressor.compression"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[163, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[163, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[163, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[163, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[163, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumblockcriterion (class in neural_compressor.compression.pruner.criteria)": [[163, "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[163, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[163, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[163, "module-neural_compressor.compression.pruner.criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[163, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[163, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[163, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[163, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[163, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[163, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumblockcriterion attribute)": [[163, "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[163, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.compression.pruner": [[164, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.model_slim": [[165, "module-neural_compressor.compression.pruner.model_slim"]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher"]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher"]], "pathsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.PathSearcher"]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher"]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.pathsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.PathSearcher.current_pattern"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.pathsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.PathSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.pathsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.PathSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph"]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.pathsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.PathSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[166, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.pathsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.PathSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.pathsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.PathSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.pathsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.PathSearcher.target_layers"]], "target_op (neural_compressor.compression.pruner.model_slim.pattern_analyzer.pathsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.PathSearcher.target_op"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.pathsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.PathSearcher.target_op_lut"]], "target_path (neural_compressor.compression.pruner.model_slim.pattern_analyzer.pathsearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.PathSearcher.target_path"]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[166, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets"]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[167, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression"]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[167, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator"]], "mhacompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[167, "neural_compressor.compression.pruner.model_slim.weight_slim.MHACompression"]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[167, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils"]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[167, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device"]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[167, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1"]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[167, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2"]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[167, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[167, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "basepattern (class in neural_compressor.compression.pruner.patterns)": [[168, "neural_compressor.compression.pruner.patterns.BasePattern"]], "m (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[168, "neural_compressor.compression.pruner.patterns.PatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[168, "neural_compressor.compression.pruner.patterns.PatternNInM.N"]], "patternninm (class in neural_compressor.compression.pruner.patterns)": [[168, "neural_compressor.compression.pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.compression.pruner.patterns)": [[168, "neural_compressor.compression.pruner.patterns.PatternNxM"]], "block_size (neural_compressor.compression.pruner.patterns.patternnxm attribute)": [[168, "neural_compressor.compression.pruner.patterns.PatternNxM.block_size"]], "config (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[168, "neural_compressor.compression.pruner.patterns.BasePattern.config"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[168, "neural_compressor.compression.pruner.patterns.get_pattern"]], "invalid_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[168, "neural_compressor.compression.pruner.patterns.BasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[168, "neural_compressor.compression.pruner.patterns.BasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[168, "neural_compressor.compression.pruner.patterns.BasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[168, "neural_compressor.compression.pruner.patterns.BasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[168, "neural_compressor.compression.pruner.patterns.BasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[168, "neural_compressor.compression.pruner.patterns.BasePattern.modules"]], "neural_compressor.compression.pruner.patterns": [[168, "module-neural_compressor.compression.pruner.patterns"]], "pattern (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[168, "neural_compressor.compression.pruner.patterns.BasePattern.pattern"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns)": [[168, "neural_compressor.compression.pruner.patterns.register_pattern"]], "target_sparsity (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[168, "neural_compressor.compression.pruner.patterns.BasePattern.target_sparsity"]], "basepruner (class in neural_compressor.compression.pruner.pruners)": [[169, "neural_compressor.compression.pruner.pruners.BasePruner"]], "basicpruner (class in neural_compressor.compression.pruner.pruners)": [[169, "neural_compressor.compression.pruner.pruners.BasicPruner"]], "blockmaskpruner (class in neural_compressor.compression.pruner.pruners)": [[169, "neural_compressor.compression.pruner.pruners.BlockMaskPruner"]], "patternlockpruner (class in neural_compressor.compression.pruner.pruners)": [[169, "neural_compressor.compression.pruner.pruners.PatternLockPruner"]], "progressivepruner (class in neural_compressor.compression.pruner.pruners)": [[169, "neural_compressor.compression.pruner.pruners.ProgressivePruner"]], "retrainfreepruner (class in neural_compressor.compression.pruner.pruners)": [[169, "neural_compressor.compression.pruner.pruners.RetrainFreePruner"]], "config (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[169, "neural_compressor.compression.pruner.pruners.BasePruner.config"]], "criterion (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[169, "neural_compressor.compression.pruner.pruners.BasicPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[169, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[169, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.criterion"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[169, "neural_compressor.compression.pruner.pruners.BasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[169, "neural_compressor.compression.pruner.pruners.BasePruner.end_step"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[169, "neural_compressor.compression.pruner.pruners.get_pruner"]], "global_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[169, "neural_compressor.compression.pruner.pruners.BasePruner.global_step"]], "masks (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[169, "neural_compressor.compression.pruner.pruners.BasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[169, "neural_compressor.compression.pruner.pruners.BasePruner.max_sparsity_ratio_per_op"]], "model_slim() (in module neural_compressor.compression.pruner.pruners)": [[169, "neural_compressor.compression.pruner.pruners.model_slim"]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.pruners)": [[169, "neural_compressor.compression.pruner.pruners.model_slim_ffn2"]], "model_slim_mha() (in module neural_compressor.compression.pruner.pruners)": [[169, "neural_compressor.compression.pruner.pruners.model_slim_mha"]], "modules (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[169, "neural_compressor.compression.pruner.pruners.BasePruner.modules"]], "neural_compressor.compression.pruner.pruners": [[169, "module-neural_compressor.compression.pruner.pruners"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[169, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pattern (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[169, "neural_compressor.compression.pruner.pruners.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[169, "neural_compressor.compression.pruner.pruners.BasicPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[169, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[169, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.pattern"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[169, "neural_compressor.compression.pruner.pruners.BasePruner.pruning_frequency"]], "reg (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[169, "neural_compressor.compression.pruner.pruners.BasicPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[169, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[169, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.reg"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners)": [[169, "neural_compressor.compression.pruner.pruners.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[169, "neural_compressor.compression.pruner.pruners.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[169, "neural_compressor.compression.pruner.pruners.BasicPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[169, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[169, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[169, "neural_compressor.compression.pruner.pruners.BasePruner.scores"]], "start_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[169, "neural_compressor.compression.pruner.pruners.BasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[169, "neural_compressor.compression.pruner.pruners.BasePruner.target_sparsity_ratio"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[170, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[170, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[170, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[170, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[170, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[170, "module-neural_compressor.compression.pruner.regs"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[170, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[170, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[171, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[171, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[171, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[171, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[171, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[171, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[171, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[172, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[172, "neural_compressor.compression.pruner.utils.check_key_validity"]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.utils)": [[172, "neural_compressor.compression.pruner.utils.generate_ffn2_pruning_config"]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.utils)": [[172, "neural_compressor.compression.pruner.utils.generate_mha_pruning_config"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[172, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[172, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "neural_compressor.compression.pruner.utils": [[172, "module-neural_compressor.compression.pruner.utils"]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.utils)": [[172, "neural_compressor.compression.pruner.utils.parse_auto_slim_config"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[172, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[172, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[172, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[172, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[172, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[172, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[172, "neural_compressor.compression.pruner.utils.update_params"]], "benchmark_conf (class in neural_compressor.conf.config)": [[173, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[173, "neural_compressor.conf.config.Conf"]], "distillation_conf (class in neural_compressor.conf.config)": [[173, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[173, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[173, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[173, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[173, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[173, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[173, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[173, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[174, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[174, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[174, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[174, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[175, "module-neural_compressor.conf"]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[176, "neural_compressor.conf.pythonic_config.QuantizationConfig"]], "neural_compressor.conf.pythonic_config": [[176, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[177, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[177, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[177, "neural_compressor.config.DistillationConfig"]], "exportconfig (class in neural_compressor.config)": [[177, "neural_compressor.config.ExportConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[177, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[177, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mixedprecisionconfig (class in neural_compressor.config)": [[177, "neural_compressor.config.MixedPrecisionConfig"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[177, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[177, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[177, "neural_compressor.config.PostTrainingQuantConfig"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[177, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[177, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[177, "neural_compressor.config.TF2ONNXConfig"]], "torch2onnxconfig (class in neural_compressor.config)": [[177, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[177, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[177, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[177, "module-neural_compressor.config"]], "neural_compressor.contrib": [[178, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[179, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[180, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[180, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[181, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[181, "module-neural_compressor.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[182, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader": [[182, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[183, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[183, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[184, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[184, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[184, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[185, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[185, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[185, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[185, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[186, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[187, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[187, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[188, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[188, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[188, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[189, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[189, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[190, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[190, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[190, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[190, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[190, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[191, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[191, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[191, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[191, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[191, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[192, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[192, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[192, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[192, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[192, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[192, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[192, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[192, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[192, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[193, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[193, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[193, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[193, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[193, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[194, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[194, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[194, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[194, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[194, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[194, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[194, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[194, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[194, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[194, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[194, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[194, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[194, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[194, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[194, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[194, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[194, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[194, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[194, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[194, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[194, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[194, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[194, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[194, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[194, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[194, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[194, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[194, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[194, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[194, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[194, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[194, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[194, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[194, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[194, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[194, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[194, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[194, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[194, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[195, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[195, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[196, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[196, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[196, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[197, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[197, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[197, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[197, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[197, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[197, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[197, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[198, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[199, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[199, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[200, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[200, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[200, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[201, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[201, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[201, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[201, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[201, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[201, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[201, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[201, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[201, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[202, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[203, "module-neural_compressor.data"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[204, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[204, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[205, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[205, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[205, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[205, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[205, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[205, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[205, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[205, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[205, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[205, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[206, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[207, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[207, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[208, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[208, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[208, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[208, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[208, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[208, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[208, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[208, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.TRANSFORMS"], [209, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[209, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[209, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[210, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[210, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[210, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[210, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[210, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[210, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[210, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[210, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[210, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[210, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[211, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[211, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[211, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[211, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[211, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[211, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[211, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[211, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[211, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[211, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[211, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[211, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[211, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[211, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[211, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[211, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[211, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[211, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[211, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[211, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[211, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[212, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[212, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[213, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[214, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[214, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[215, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[215, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[215, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[216, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[216, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[216, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[216, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[216, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[216, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[216, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[216, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[216, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[217, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[217, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[218, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[218, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[218, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[219, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[219, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[220, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[221, "module-neural_compressor.experimental.compression.pruning"]], "prepare_pruning() (in module neural_compressor.experimental.compression.pruning)": [[221, "neural_compressor.experimental.compression.pruning.prepare_pruning"]], "save() (in module neural_compressor.experimental.compression.pruning)": [[221, "neural_compressor.experimental.compression.pruning.save"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[222, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[222, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[223, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[224, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[224, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[224, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[225, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[225, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[225, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[225, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[226, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[227, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[227, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[228, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[228, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[228, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[229, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[229, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[230, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[230, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[230, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[230, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[230, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[231, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[231, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[231, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[231, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[231, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[232, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[232, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[232, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[232, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[232, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[232, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[232, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[232, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[232, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[233, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[233, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[233, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[233, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[233, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[234, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[234, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[234, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[234, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[234, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[234, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[234, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[234, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[234, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[234, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[234, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[234, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[234, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[234, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[234, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[234, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[234, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[234, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[234, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[234, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[234, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[234, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[234, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[234, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[234, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[234, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[234, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[234, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[234, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[234, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[234, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[234, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[234, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[234, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[234, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[234, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[234, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[234, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[234, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[235, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[235, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[236, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[236, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[236, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[237, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[237, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[237, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[237, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[237, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[237, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[237, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[238, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[239, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[239, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[240, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[240, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[240, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[241, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[241, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[241, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[241, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[241, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[241, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[241, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[241, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[241, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[242, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[243, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[244, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[244, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[244, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[244, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[244, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[244, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[244, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[244, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[244, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[244, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[245, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[246, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[246, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[246, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[246, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[246, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[246, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[246, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[246, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [247, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[247, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[247, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[248, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[248, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[248, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[248, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[248, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[248, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[249, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[250, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[250, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[250, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[251, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[251, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[251, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "build_scale_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[252, "neural_compressor.experimental.export.torch2onnx.build_scale_mapping"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[252, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[252, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[252, "module-neural_compressor.experimental.export.torch2onnx"]], "qdq_fp32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[252, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias"]], "qdq_fp32_bias_qdq() (in module neural_compressor.experimental.export.torch2onnx)": [[252, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias_qdq"]], "qdq_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[252, "neural_compressor.experimental.export.torch2onnx.qdq_int32_bias"]], "recalculate_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[252, "neural_compressor.experimental.export.torch2onnx.recalculate_bias"]], "remove_nodes_by_name() (in module neural_compressor.experimental.export.torch2onnx)": [[252, "neural_compressor.experimental.export.torch2onnx.remove_nodes_by_name"]], "set_data_type() (in module neural_compressor.experimental.export.torch2onnx)": [[252, "neural_compressor.experimental.export.torch2onnx.set_data_type"]], "set_scale_info() (in module neural_compressor.experimental.export.torch2onnx)": [[252, "neural_compressor.experimental.export.torch2onnx.set_scale_info"]], "sub_graph_with_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[252, "neural_compressor.experimental.export.torch2onnx.sub_graph_with_int32_bias"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[252, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[252, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "update_weight_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[252, "neural_compressor.experimental.export.torch2onnx.update_weight_bias"]], "dummydatareader (class in neural_compressor.experimental.export.utils)": [[253, "neural_compressor.experimental.export.utils.DummyDataReader"]], "onnx2numpy_dtype() (in module neural_compressor.experimental.export.utils)": [[253, "neural_compressor.experimental.export.utils.ONNX2Numpy_dtype"]], "neural_compressor.experimental.export.utils": [[253, "module-neural_compressor.experimental.export.utils"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[254, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[254, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[255, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[256, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[256, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[256, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[256, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[256, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[256, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[256, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[256, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[256, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[257, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[257, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[258, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[259, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[259, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[259, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[259, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[259, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[259, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[259, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[259, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[260, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[260, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[260, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[260, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[260, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[261, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[261, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[261, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[261, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[261, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[262, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[263, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[263, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[263, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[263, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[263, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[263, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[263, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[263, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[263, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[263, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[263, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[263, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[263, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[263, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[263, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[263, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[263, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[263, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[263, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[263, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[263, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[263, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[263, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[263, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[263, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[263, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[264, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[264, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[265, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[265, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[266, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[266, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[267, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[267, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[268, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[269, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[269, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[269, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[270, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[270, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[270, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[270, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[271, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[271, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[271, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[271, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[271, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[272, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[272, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[273, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[273, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[274, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[275, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[275, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[276, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[276, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[277, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[277, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[277, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[278, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[278, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[278, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[278, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[278, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[279, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[280, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[281, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[281, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[281, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[281, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[281, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[282, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[282, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[282, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[282, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[282, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[282, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[282, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[283, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[283, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[283, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[283, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[283, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[284, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[285, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[286, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[286, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[286, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[286, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[286, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[286, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[286, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[286, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[286, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[286, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[286, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[287, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[287, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[287, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[287, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[287, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[287, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[287, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[288, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[289, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[289, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[289, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[289, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[289, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[289, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[290, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[290, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[290, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[290, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[290, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[290, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[291, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[291, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[292, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[292, "module-neural_compressor.experimental.scheduler"]], "neural_compressor": [[293, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[294, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[294, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[294, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[294, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[294, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[294, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[294, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[294, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[294, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[295, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[295, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[296, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[297, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[297, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[297, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[297, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[297, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[297, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[297, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[297, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[298, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[298, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[298, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[298, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[298, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[299, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[299, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[299, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[299, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[299, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[300, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[301, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[301, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[301, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[301, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[301, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[301, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[301, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[301, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[301, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[301, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[301, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[301, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[301, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[301, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[301, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[301, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[301, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[301, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[301, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[301, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[301, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[301, "neural_compressor.metric.metric.MSE.pred_list"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[301, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[301, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[301, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[302, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[302, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[303, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[303, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[304, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[305, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[305, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[306, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[306, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[306, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[307, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[307, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[308, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[308, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[309, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[309, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[310, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[310, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[310, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[310, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[310, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[310, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[310, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[310, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[310, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[310, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[310, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[310, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[310, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[310, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[310, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[310, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[310, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[310, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[311, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[311, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[311, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[311, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[311, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[312, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[312, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[312, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[312, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[312, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[312, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[312, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[312, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[312, "neural_compressor.objective.objective_registry"]], "fit() (in module neural_compressor.quantization)": [[313, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[313, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[314, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[314, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[315, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[315, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[316, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[316, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[317, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[317, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[317, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[317, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[317, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[318, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[318, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[319, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[319, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[320, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[320, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[321, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[322, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[322, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[323, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[323, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[324, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[324, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[325, "neural_compressor.strategy.strategy.TuneStrategy"]], "neural_compressor.strategy.strategy": [[325, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[325, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[326, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[327, "module-neural_compressor.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[328, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[328, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[328, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[328, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[328, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[328, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.strategy.utils.tuning_sampler)": [[328, "neural_compressor.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_sampler": [[328, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[329, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[329, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "get_op_mode_by_query_order() (in module neural_compressor.strategy.utils.tuning_space)": [[329, "neural_compressor.strategy.utils.tuning_space.get_op_mode_by_query_order"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[329, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[329, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[329, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[329, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[329, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[330, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[330, "module-neural_compressor.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[331, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[331, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[331, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[331, "module-neural_compressor.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[331, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[332, "neural_compressor.template.api_doc_example.ExampleClass"]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[332, "neural_compressor.template.api_doc_example.ExampleClass.attr1"]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[332, "neural_compressor.template.api_doc_example.ExampleClass.attr2"]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[332, "neural_compressor.template.api_doc_example.ExampleClass.attr5"]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[332, "neural_compressor.template.api_doc_example.attribute1"]], "function1() (in module neural_compressor.template.api_doc_example)": [[332, "neural_compressor.template.api_doc_example.function1"]], "function2() (in module neural_compressor.template.api_doc_example)": [[332, "neural_compressor.template.api_doc_example.function2"]], "function3() (in module neural_compressor.template.api_doc_example)": [[332, "neural_compressor.template.api_doc_example.function3"]], "generator1() (in module neural_compressor.template.api_doc_example)": [[332, "neural_compressor.template.api_doc_example.generator1"]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[332, "neural_compressor.template.api_doc_example.module_debug_level1"]], "neural_compressor.template.api_doc_example": [[332, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[333, "module-neural_compressor.template"]], "callbacks (class in neural_compressor.training)": [[334, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[334, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[334, "neural_compressor.training.fit"]], "neural_compressor.training": [[334, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[334, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[335, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[335, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[336, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[337, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[337, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[337, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[337, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[337, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[337, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[337, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[337, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[337, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[337, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[338, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[339, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[339, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[340, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "neural_compressor.utils.load_huggingface": [[340, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[340, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[341, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[341, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[341, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[341, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[341, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[341, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[341, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[341, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[341, "neural_compressor.utils.logger.warning"]], "neural_compressor.utils.options": [[342, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[342, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[343, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[343, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[343, "module-neural_compressor.utils.pytorch"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.Dequantize"]], "dequantizeweight() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.DequantizeWeight"]], "global_state (class in neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.MODE"]], "statistics (class in neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.Statistics"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.combine_histogram"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.compute_sparsity"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.dump_elapsed_time"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_size() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.get_tuning_history"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.load_data_from_pkl"]], "neural_compressor.utils.utility": [[344, "module-neural_compressor.utils.utility"]], "recover() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.version1_lte_version2"]], "benchmark (class in neural_compressor.ux.components.benchmark.benchmark)": [[345, "neural_compressor.ux.components.benchmark.benchmark.Benchmark"]], "dataloaderinterface (class in neural_compressor.ux.components.benchmark.benchmark)": [[345, "neural_compressor.ux.components.benchmark.benchmark.DataloaderInterface"]], "neural_compressor.ux.components.benchmark.benchmark": [[345, "module-neural_compressor.ux.components.benchmark.benchmark"]], "benchmark_model() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[346, "neural_compressor.ux.components.benchmark.benchmark_model.benchmark_model"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[346, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "parse_args() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[346, "neural_compressor.ux.components.benchmark.benchmark_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[346, "neural_compressor.ux.components.benchmark.benchmark_model.set_eager_execution"]], "benchmark_result_update() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[347, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update"]], "benchmark_result_update_pytorch_script() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[347, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update_pytorch_script"]], "execute_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[347, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_benchmark"]], "execute_real_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[347, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_real_benchmark"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[347, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "pytorch_script_bench_optimizations() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[347, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_optimizations"]], "pytorch_script_bench_original_model() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[347, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_original_model"]], "benchmarks (class in neural_compressor.ux.components.benchmark)": [[348, "neural_compressor.ux.components.benchmark.Benchmarks"]], "neural_compressor.ux.components.benchmark": [[348, "module-neural_compressor.ux.components.benchmark"]], "benchmarkconfiggenerator (class in neural_compressor.ux.components.config_generator.benchmark_config_generator)": [[349, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[349, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "configgenerator (class in neural_compressor.ux.components.config_generator.config_generator)": [[350, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator"]], "neural_compressor.ux.components.config_generator.config_generator": [[350, "module-neural_compressor.ux.components.config_generator.config_generator"]], "graphoptimizationconfiggenerator (class in neural_compressor.ux.components.config_generator.graph_optimization_config_generator)": [[351, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[351, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[352, "module-neural_compressor.ux.components.config_generator"]], "mixedprecisionconfiggenerator (class in neural_compressor.ux.components.config_generator.mixed_precision_config_generator)": [[353, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[353, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "profilingconfiggenerator (class in neural_compressor.ux.components.config_generator.profiling_config_generator)": [[354, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[354, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "pruningconfiggenerator (class in neural_compressor.ux.components.config_generator.pruning_config_generator)": [[355, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[355, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "quantizationconfiggenerator (class in neural_compressor.ux.components.config_generator.quantization_config_generator)": [[356, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[356, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "configurationparser (class in neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[357, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[357, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "normalize_string_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[357, "neural_compressor.ux.components.configuration_wizard.configuration_parser.normalize_string_list"]], "parse_list_value() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[357, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_list_value"]], "parse_multidim_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[357, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_multidim_list"]], "get_boundary_nodes() (in module neural_compressor.ux.components.configuration_wizard.get_boundary_nodes)": [[358, "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[358, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "get_predefined_configuration() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[359, "neural_compressor.ux.components.configuration_wizard.get_configuration.get_predefined_configuration"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[359, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "update_config_to_machine_specification() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[359, "neural_compressor.ux.components.configuration_wizard.get_configuration.update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard": [[360, "module-neural_compressor.ux.components.configuration_wizard"]], "feeder (class in neural_compressor.ux.components.configuration_wizard.params_feeder)": [[361, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder"]], "get_possible_values() (in module neural_compressor.ux.components.configuration_wizard.params_feeder)": [[361, "neural_compressor.ux.components.configuration_wizard.params_feeder.get_possible_values"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[361, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "pruningconfigparser (class in neural_compressor.ux.components.configuration_wizard.pruning_config_parser)": [[362, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[362, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "dbmanager (class in neural_compressor.ux.components.db_manager.db_manager)": [[363, "neural_compressor.ux.components.db_manager.db_manager.DBManager"]], "neural_compressor.ux.components.db_manager.db_manager": [[363, "module-neural_compressor.ux.components.db_manager.db_manager"]], "benchmark (class in neural_compressor.ux.components.db_manager.db_models.benchmark)": [[364, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[364, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "benchmarkresult (class in neural_compressor.ux.components.db_manager.db_models.benchmark_result)": [[365, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[365, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "dataloader (class in neural_compressor.ux.components.db_manager.db_models.dataloader)": [[366, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.dataloader)": [[366, "neural_compressor.ux.components.db_manager.db_models.dataloader.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[366, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "dataset (class in neural_compressor.ux.components.db_manager.db_models.dataset)": [[367, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[367, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "domain (class in neural_compressor.ux.components.db_manager.db_models.domain)": [[368, "neural_compressor.ux.components.db_manager.db_models.domain.Domain"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain)": [[368, "neural_compressor.ux.components.db_manager.db_models.domain.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[368, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "domainflavour (class in neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[369, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[369, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[369, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "example (class in neural_compressor.ux.components.db_manager.db_models.example)": [[370, "neural_compressor.ux.components.db_manager.db_models.example.Example"]], "neural_compressor.ux.components.db_manager.db_models.example": [[370, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "framework (class in neural_compressor.ux.components.db_manager.db_models.framework)": [[371, "neural_compressor.ux.components.db_manager.db_models.framework.Framework"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.framework)": [[371, "neural_compressor.ux.components.db_manager.db_models.framework.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[371, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[372, "module-neural_compressor.ux.components.db_manager.db_models"]], "metric (class in neural_compressor.ux.components.db_manager.db_models.metric)": [[373, "neural_compressor.ux.components.db_manager.db_models.metric.Metric"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.metric)": [[373, "neural_compressor.ux.components.db_manager.db_models.metric.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[373, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "model (class in neural_compressor.ux.components.db_manager.db_models.model)": [[374, "neural_compressor.ux.components.db_manager.db_models.model.Model"]], "neural_compressor.ux.components.db_manager.db_models.model": [[374, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "optimization (class in neural_compressor.ux.components.db_manager.db_models.optimization)": [[375, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[375, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "optimizationtype (class in neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[376, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[376, "neural_compressor.ux.components.db_manager.db_models.optimization_type.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[376, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "precision (class in neural_compressor.ux.components.db_manager.db_models.precision)": [[377, "neural_compressor.ux.components.db_manager.db_models.precision.Precision"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.precision)": [[377, "neural_compressor.ux.components.db_manager.db_models.precision.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[377, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "profiling (class in neural_compressor.ux.components.db_manager.db_models.profiling)": [[378, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[378, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "profilingresult (class in neural_compressor.ux.components.db_manager.db_models.profiling_result)": [[379, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[379, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "project (class in neural_compressor.ux.components.db_manager.db_models.project)": [[380, "neural_compressor.ux.components.db_manager.db_models.project.Project"]], "neural_compressor.ux.components.db_manager.db_models.project": [[380, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "pruningdetails (class in neural_compressor.ux.components.db_manager.db_models.pruning_details)": [[381, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[381, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "transform (class in neural_compressor.ux.components.db_manager.db_models.transform)": [[382, "neural_compressor.ux.components.db_manager.db_models.transform.Transform"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.transform)": [[382, "neural_compressor.ux.components.db_manager.db_models.transform.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[382, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "tuningdetails (class in neural_compressor.ux.components.db_manager.db_models.tuning_details)": [[383, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[383, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "tuninghistory (class in neural_compressor.ux.components.db_manager.db_models.tuning_history)": [[384, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[384, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[385, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface"]], "before_delete_benchmark_entry() (in module neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[385, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.before_delete_benchmark_entry"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[385, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[386, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[386, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[386, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_precision_optimization_types_association"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[386, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[386, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[386, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[386, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.set_database_version"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[387, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[387, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_precision_optimization_types_association"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[387, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[387, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[387, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[387, "neural_compressor.ux.components.db_manager.db_operations.db_operations.set_database_version"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface)": [[388, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[388, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface)": [[389, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[389, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.examples_api_interface)": [[390, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[390, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations": [[391, "module-neural_compressor.ux.components.db_manager.db_operations"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.model_api_interface)": [[392, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[392, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface)": [[393, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[393, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface)": [[394, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[394, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.project_api_interface)": [[395, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[395, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "neural_compressor.ux.components.db_manager": [[396, "module-neural_compressor.ux.components.db_manager"]], "benchmarkaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[397, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkAddParamsInterface"]], "benchmarkeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[397, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkEditParamsInterface"]], "datasetaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[397, "neural_compressor.ux.components.db_manager.params_interfaces.DatasetAddParamsInterface"]], "diagnosisoptimizationparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[397, "neural_compressor.ux.components.db_manager.params_interfaces.DiagnosisOptimizationParamsInterface"]], "modeladdparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[397, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface"]], "optimizationaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[397, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationAddParamsInterface"]], "optimizationeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[397, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationEditParamsInterface"]], "profilingaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[397, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingAddParamsInterface"]], "profilingeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[397, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingEditParamsInterface"]], "profilingresultaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[397, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingResultAddParamsInterface"]], "tuninghistoryinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[397, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface"]], "tuninghistoryiteminterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[397, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[397, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "get_framework_dataloaders_config() (in module neural_compressor.ux.components.db_manager.utils)": [[398, "neural_compressor.ux.components.db_manager.utils.get_framework_dataloaders_config"]], "get_framework_transforms_config() (in module neural_compressor.ux.components.db_manager.utils)": [[398, "neural_compressor.ux.components.db_manager.utils.get_framework_transforms_config"]], "neural_compressor.ux.components.db_manager.utils": [[398, "module-neural_compressor.ux.components.db_manager.utils"]], "update_dataloaders_params() (in module neural_compressor.ux.components.db_manager.utils)": [[398, "neural_compressor.ux.components.db_manager.utils.update_dataloaders_params"]], "diagnosis (class in neural_compressor.ux.components.diagnosis.diagnosis)": [[399, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[399, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "diagnosisfactory (class in neural_compressor.ux.components.diagnosis.factory)": [[400, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory"]], "neural_compressor.ux.components.diagnosis.factory": [[400, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[401, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[402, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "onnxrtdiagnosis (class in neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis)": [[403, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[403, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "opactivation (class in neural_compressor.ux.components.diagnosis.op_details)": [[404, "neural_compressor.ux.components.diagnosis.op_details.OpActivation"]], "opdetails (class in neural_compressor.ux.components.diagnosis.op_details)": [[404, "neural_compressor.ux.components.diagnosis.op_details.OpDetails"]], "oppattern (class in neural_compressor.ux.components.diagnosis.op_details)": [[404, "neural_compressor.ux.components.diagnosis.op_details.OpPattern"]], "opweights (class in neural_compressor.ux.components.diagnosis.op_details)": [[404, "neural_compressor.ux.components.diagnosis.op_details.OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details": [[404, "module-neural_compressor.ux.components.diagnosis.op_details"]], "opentry (class in neural_compressor.ux.components.diagnosis.op_entry)": [[405, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry": [[405, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[406, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "tensorflowdiagnosis (class in neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis)": [[407, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[407, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "create_dir_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[408, "neural_compressor.ux.components.file_browser.file_browser.create_dir_entry"]], "create_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[408, "neural_compressor.ux.components.file_browser.file_browser.create_entry"]], "create_file_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[408, "neural_compressor.ux.components.file_browser.file_browser.create_file_entry"]], "filter_requested_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[408, "neural_compressor.ux.components.file_browser.file_browser.filter_requested_entries"]], "get_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[408, "neural_compressor.ux.components.file_browser.file_browser.get_directory_entries"]], "get_filter_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[408, "neural_compressor.ux.components.file_browser.file_browser.get_filter_value"]], "get_non_hidden_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[408, "neural_compressor.ux.components.file_browser.file_browser.get_non_hidden_directory_entries"]], "get_requested_path() (in module neural_compressor.ux.components.file_browser.file_browser)": [[408, "neural_compressor.ux.components.file_browser.file_browser.get_requested_path"]], "get_setting_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[408, "neural_compressor.ux.components.file_browser.file_browser.get_setting_value"]], "is_dataset_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[408, "neural_compressor.ux.components.file_browser.file_browser.is_dataset_or_directory_entry"]], "is_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[408, "neural_compressor.ux.components.file_browser.file_browser.is_directory_entry"]], "is_model_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[408, "neural_compressor.ux.components.file_browser.file_browser.is_model_or_directory_entry"]], "neural_compressor.ux.components.file_browser.file_browser": [[408, "module-neural_compressor.ux.components.file_browser.file_browser"]], "should_show_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[408, "neural_compressor.ux.components.file_browser.file_browser.should_show_files"]], "should_show_only_model_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[408, "neural_compressor.ux.components.file_browser.file_browser.should_show_only_model_files"]], "sort_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[408, "neural_compressor.ux.components.file_browser.file_browser.sort_entries"]], "neural_compressor.ux.components.file_browser": [[409, "module-neural_compressor.ux.components.file_browser"]], "attribute (class in neural_compressor.ux.components.graph.attribute)": [[410, "neural_compressor.ux.components.graph.attribute.Attribute"]], "neural_compressor.ux.components.graph.attribute": [[410, "module-neural_compressor.ux.components.graph.attribute"]], "collapser (class in neural_compressor.ux.components.graph.collapser)": [[411, "neural_compressor.ux.components.graph.collapser.Collapser"]], "neural_compressor.ux.components.graph.collapser": [[411, "module-neural_compressor.ux.components.graph.collapser"]], "edge (class in neural_compressor.ux.components.graph.edge)": [[412, "neural_compressor.ux.components.graph.edge.Edge"]], "neural_compressor.ux.components.graph.edge": [[412, "module-neural_compressor.ux.components.graph.edge"]], "graph (class in neural_compressor.ux.components.graph.graph)": [[413, "neural_compressor.ux.components.graph.graph.Graph"]], "neural_compressor.ux.components.graph.graph": [[413, "module-neural_compressor.ux.components.graph.graph"]], "graphreader (class in neural_compressor.ux.components.graph.graph_reader)": [[414, "neural_compressor.ux.components.graph.graph_reader.GraphReader"]], "neural_compressor.ux.components.graph.graph_reader": [[414, "module-neural_compressor.ux.components.graph.graph_reader"]], "neural_compressor.ux.components.graph": [[415, "module-neural_compressor.ux.components.graph"]], "groupnode (class in neural_compressor.ux.components.graph.node)": [[416, "neural_compressor.ux.components.graph.node.GroupNode"]], "node (class in neural_compressor.ux.components.graph.node)": [[416, "neural_compressor.ux.components.graph.node.Node"]], "neural_compressor.ux.components.graph.node": [[416, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[417, "module-neural_compressor.ux.components.graph.reader"]], "onnxrtreader (class in neural_compressor.ux.components.graph.reader.onnxrt_reader)": [[418, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[418, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "tensorflowreader (class in neural_compressor.ux.components.graph.reader.tensorflow_reader)": [[419, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[419, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "neural_compressor.ux.components": [[420, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[421, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[422, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[423, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[424, "module-neural_compressor.ux.components.jobs_management.request"]], "get_default_path() (in module neural_compressor.ux.components.manage_workspace)": [[425, "neural_compressor.ux.components.manage_workspace.get_default_path"]], "neural_compressor.ux.components.manage_workspace": [[425, "module-neural_compressor.ux.components.manage_workspace"]], "domain (class in neural_compressor.ux.components.model.domain)": [[426, "neural_compressor.ux.components.model.domain.Domain"]], "neural_compressor.ux.components.model.domain": [[426, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[427, "module-neural_compressor.ux.components.model"]], "model (class in neural_compressor.ux.components.model.model)": [[428, "neural_compressor.ux.components.model.model.Model"]], "neural_compressor.ux.components.model.model": [[428, "module-neural_compressor.ux.components.model.model"]], "get_model_type() (in module neural_compressor.ux.components.model.model_type_getter)": [[429, "neural_compressor.ux.components.model.model_type_getter.get_model_type"]], "neural_compressor.ux.components.model.model_type_getter": [[429, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[430, "module-neural_compressor.ux.components.model.onnxrt"]], "onnxrtmodel (class in neural_compressor.ux.components.model.onnxrt.model)": [[431, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel"]], "neural_compressor.ux.components.model.onnxrt.model": [[431, "module-neural_compressor.ux.components.model.onnxrt.model"]], "remove_number_of_samples_from_shape() (in module neural_compressor.ux.components.model.onnxrt.model)": [[431, "neural_compressor.ux.components.model.onnxrt.model.remove_number_of_samples_from_shape"]], "neural_compressor.ux.components.model.pytorch": [[432, "module-neural_compressor.ux.components.model.pytorch"]], "pytorchscriptmodel (class in neural_compressor.ux.components.model.pytorch.model)": [[433, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel"]], "neural_compressor.ux.components.model.pytorch.model": [[433, "module-neural_compressor.ux.components.model.pytorch.model"]], "modelrepository (class in neural_compressor.ux.components.model.repository)": [[434, "neural_compressor.ux.components.model.repository.ModelRepository"]], "neural_compressor.ux.components.model.repository": [[434, "module-neural_compressor.ux.components.model.repository"]], "shape (class in neural_compressor.ux.components.model.shape)": [[435, "neural_compressor.ux.components.model.shape.Shape"]], "neural_compressor.ux.components.model.shape": [[435, "module-neural_compressor.ux.components.model.shape"]], "frozenpbmodel (class in neural_compressor.ux.components.model.tensorflow.frozen_pb)": [[436, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[436, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "neural_compressor.ux.components.model.tensorflow": [[437, "module-neural_compressor.ux.components.model.tensorflow"]], "kerasmodel (class in neural_compressor.ux.components.model.tensorflow.keras)": [[438, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel"]], "neural_compressor.ux.components.model.tensorflow.keras": [[438, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "metagraphmodel (class in neural_compressor.ux.components.model.tensorflow.meta_graph)": [[439, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[439, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "tensorflowmodel (class in neural_compressor.ux.components.model.tensorflow.model)": [[440, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel"]], "neural_compressor.ux.components.model.tensorflow.model": [[440, "module-neural_compressor.ux.components.model.tensorflow.model"]], "savedmodelmodel (class in neural_compressor.ux.components.model.tensorflow.saved_model)": [[441, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[441, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "get_input_shape() (in module neural_compressor.ux.components.model.tensorflow.utils)": [[442, "neural_compressor.ux.components.model.tensorflow.utils.get_input_shape"]], "neural_compressor.ux.components.model.tensorflow.utils": [[442, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "download_config() (in module neural_compressor.ux.components.model_zoo.download_config)": [[443, "neural_compressor.ux.components.model_zoo.download_config.download_config"]], "neural_compressor.ux.components.model_zoo.download_config": [[443, "module-neural_compressor.ux.components.model_zoo.download_config"]], "download_model() (in module neural_compressor.ux.components.model_zoo.download_model)": [[444, "neural_compressor.ux.components.model_zoo.download_model.download_model"]], "neural_compressor.ux.components.model_zoo.download_model": [[444, "module-neural_compressor.ux.components.model_zoo.download_model"]], "downloader (class in neural_compressor.ux.components.model_zoo.downloader)": [[445, "neural_compressor.ux.components.model_zoo.downloader.Downloader"]], "neural_compressor.ux.components.model_zoo.downloader": [[445, "module-neural_compressor.ux.components.model_zoo.downloader"]], "neural_compressor.ux.components.model_zoo": [[446, "module-neural_compressor.ux.components.model_zoo"]], "check_version() (in module neural_compressor.ux.components.model_zoo.list_models)": [[447, "neural_compressor.ux.components.model_zoo.list_models.check_version"]], "get_available_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[447, "neural_compressor.ux.components.model_zoo.list_models.get_available_models"]], "get_framework_module_name() (in module neural_compressor.ux.components.model_zoo.list_models)": [[447, "neural_compressor.ux.components.model_zoo.list_models.get_framework_module_name"]], "get_installed_frameworks() (in module neural_compressor.ux.components.model_zoo.list_models)": [[447, "neural_compressor.ux.components.model_zoo.list_models.get_installed_frameworks"]], "list_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[447, "neural_compressor.ux.components.model_zoo.list_models.list_models"]], "neural_compressor.ux.components.model_zoo.list_models": [[447, "module-neural_compressor.ux.components.model_zoo.list_models"]], "validate_model_list() (in module neural_compressor.ux.components.model_zoo.list_models)": [[447, "neural_compressor.ux.components.model_zoo.list_models.validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[448, "module-neural_compressor.ux.components.names_mapper"]], "mappingdirection (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[449, "neural_compressor.ux.components.names_mapper.names_mapper.MappingDirection"]], "namesmapper (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[449, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[449, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "check_if_collect_tuning_history() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[450, "neural_compressor.ux.components.optimization.execute_optimization.check_if_collect_tuning_history"]], "execute_optimization() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[450, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization"]], "execute_optimization_pytorch_script() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[450, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_pytorch_script"]], "execute_optimization_regular() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[450, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_regular"]], "neural_compressor.ux.components.optimization.execute_optimization": [[450, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "parse_logs() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[450, "neural_compressor.ux.components.optimization.execute_optimization.parse_logs"]], "parse_model_data_to_bench_names() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[450, "neural_compressor.ux.components.optimization.execute_optimization.parse_model_data_to_bench_names"]], "optimizationfactory (class in neural_compressor.ux.components.optimization.factory)": [[451, "neural_compressor.ux.components.optimization.factory.OptimizationFactory"]], "neural_compressor.ux.components.optimization.factory": [[451, "module-neural_compressor.ux.components.optimization.factory"]], "graphoptimization (class in neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization)": [[452, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[452, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[453, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[454, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[454, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[454, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[454, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[454, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.set_eager_execution"]], "optimizations (class in neural_compressor.ux.components.optimization)": [[455, "neural_compressor.ux.components.optimization.Optimizations"]], "neural_compressor.ux.components.optimization": [[455, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[456, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "mixedprecision (class in neural_compressor.ux.components.optimization.mixed_precision.mixed_precision)": [[457, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[457, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[458, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[458, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[458, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[458, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[458, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[459, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[460, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "optimize_pt_script() (in module neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model)": [[460, "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model.optimize_pt_script"]], "dataloaderinterface (class in neural_compressor.ux.components.optimization.optimization)": [[461, "neural_compressor.ux.components.optimization.optimization.DataloaderInterface"]], "optimization (class in neural_compressor.ux.components.optimization.optimization)": [[461, "neural_compressor.ux.components.optimization.optimization.Optimization"]], "optimizationinterface (class in neural_compressor.ux.components.optimization.optimization)": [[461, "neural_compressor.ux.components.optimization.optimization.OptimizationInterface"]], "neural_compressor.ux.components.optimization.optimization": [[461, "module-neural_compressor.ux.components.optimization.optimization"]], "neural_compressor.ux.components.optimization.pruning": [[462, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[463, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "optimize_model() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[463, "neural_compressor.ux.components.optimization.pruning.optimize_model.optimize_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[463, "neural_compressor.ux.components.optimization.pruning.optimize_model.parse_args"]], "pruning (class in neural_compressor.ux.components.optimization.pruning.pruning)": [[464, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[464, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "neural_compressor.ux.components.optimization.tune": [[465, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[466, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[466, "neural_compressor.ux.components.optimization.tune.tune_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[466, "neural_compressor.ux.components.optimization.tune.tune_model.set_eager_execution"]], "tune_model() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[466, "neural_compressor.ux.components.optimization.tune.tune_model.tune_model"]], "accuracycriterion (class in neural_compressor.ux.components.optimization.tune.tuning)": [[467, "neural_compressor.ux.components.optimization.tune.tuning.AccuracyCriterion"]], "tuning (class in neural_compressor.ux.components.optimization.tune.tuning)": [[467, "neural_compressor.ux.components.optimization.tune.tuning.Tuning"]], "tuningdetails (class in neural_compressor.ux.components.optimization.tune.tuning)": [[467, "neural_compressor.ux.components.optimization.tune.tuning.TuningDetails"]], "neural_compressor.ux.components.optimization.tune.tuning": [[467, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "tuninghistory (class in neural_compressor.ux.components.optimization.tuning_history)": [[468, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory"]], "watcher (class in neural_compressor.ux.components.optimization.tuning_history)": [[468, "neural_compressor.ux.components.optimization.tuning_history.Watcher"]], "neural_compressor.ux.components.optimization.tuning_history": [[468, "module-neural_compressor.ux.components.optimization.tuning_history"]], "tuning_history() (in module neural_compressor.ux.components.optimization.tuning_history)": [[468, "neural_compressor.ux.components.optimization.tuning_history.tuning_history"]], "tuning_history_path() (in module neural_compressor.ux.components.optimization.tuning_history)": [[468, "neural_compressor.ux.components.optimization.tuning_history.tuning_history_path"]], "execute_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[469, "neural_compressor.ux.components.profiling.execute_profiling.execute_profiling"]], "execute_real_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[469, "neural_compressor.ux.components.profiling.execute_profiling.execute_real_profiling"]], "neural_compressor.ux.components.profiling.execute_profiling": [[469, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "profilerfactory (class in neural_compressor.ux.components.profiling.factory)": [[470, "neural_compressor.ux.components.profiling.factory.ProfilerFactory"]], "neural_compressor.ux.components.profiling.factory": [[470, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[471, "module-neural_compressor.ux.components.profiling"]], "load_profiling_details() (in module neural_compressor.ux.components.profiling.profile_model)": [[472, "neural_compressor.ux.components.profiling.profile_model.load_profiling_details"]], "neural_compressor.ux.components.profiling.profile_model": [[472, "module-neural_compressor.ux.components.profiling.profile_model"]], "parse_args() (in module neural_compressor.ux.components.profiling.profile_model)": [[472, "neural_compressor.ux.components.profiling.profile_model.parse_args"]], "profiler (class in neural_compressor.ux.components.profiling.profiler)": [[473, "neural_compressor.ux.components.profiling.profiler.Profiler"]], "neural_compressor.ux.components.profiling.profiler": [[473, "module-neural_compressor.ux.components.profiling.profiler"]], "dataloaderinterface (class in neural_compressor.ux.components.profiling.profiling)": [[474, "neural_compressor.ux.components.profiling.profiling.DataloaderInterface"]], "profiling (class in neural_compressor.ux.components.profiling.profiling)": [[474, "neural_compressor.ux.components.profiling.profiling.Profiling"]], "neural_compressor.ux.components.profiling.profiling": [[474, "module-neural_compressor.ux.components.profiling.profiling"]], "profilerfactory (class in neural_compressor.ux.components.profiling.tensorflow_profiler.factory)": [[475, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[475, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[476, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "profiler (class in neural_compressor.ux.components.profiling.tensorflow_profiler.profiler)": [[477, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[477, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "delete_assign() (in module neural_compressor.ux.components.profiling.tensorflow_profiler.utils)": [[478, "neural_compressor.ux.components.profiling.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[478, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "main() (in module neural_compressor.ux.inc_bench)": [[479, "neural_compressor.ux.inc_bench.main"]], "neural_compressor.ux.inc_bench": [[479, "module-neural_compressor.ux.inc_bench"]], "prepare_environment() (in module neural_compressor.ux.inc_bench)": [[479, "neural_compressor.ux.inc_bench.prepare_environment"]], "neural_compressor.ux": [[480, "module-neural_compressor.ux"]], "domainflavours (class in neural_compressor.ux.utils.consts)": [[481, "neural_compressor.ux.utils.consts.DomainFlavours"]], "domains (class in neural_compressor.ux.utils.consts)": [[481, "neural_compressor.ux.utils.consts.Domains"]], "executionstatus (class in neural_compressor.ux.utils.consts)": [[481, "neural_compressor.ux.utils.consts.ExecutionStatus"]], "frameworks (class in neural_compressor.ux.utils.consts)": [[481, "neural_compressor.ux.utils.consts.Frameworks"]], "optimizationtypes (class in neural_compressor.ux.utils.consts)": [[481, "neural_compressor.ux.utils.consts.OptimizationTypes"]], "precisions (class in neural_compressor.ux.utils.consts)": [[481, "neural_compressor.ux.utils.consts.Precisions"]], "strategies (class in neural_compressor.ux.utils.consts)": [[481, "neural_compressor.ux.utils.consts.Strategies"]], "neural_compressor.ux.utils.consts": [[481, "module-neural_compressor.ux.utils.consts"]], "environment (class in neural_compressor.ux.utils.environment)": [[482, "neural_compressor.ux.utils.environment.Environment"]], "neural_compressor.ux.utils.environment": [[482, "module-neural_compressor.ux.utils.environment"]], "accessdeniedexception": [[483, "neural_compressor.ux.utils.exceptions.AccessDeniedException"]], "clienterrorexception": [[483, "neural_compressor.ux.utils.exceptions.ClientErrorException"]], "internalexception": [[483, "neural_compressor.ux.utils.exceptions.InternalException"]], "notfoundexception": [[483, "neural_compressor.ux.utils.exceptions.NotFoundException"]], "neural_compressor.ux.utils.exceptions": [[483, "module-neural_compressor.ux.utils.exceptions"]], "executor (class in neural_compressor.ux.utils.executor)": [[484, "neural_compressor.ux.utils.executor.Executor"]], "neural_compressor.ux.utils.executor": [[484, "module-neural_compressor.ux.utils.executor"]], "expiringdict (class in neural_compressor.ux.utils.expiring_dict)": [[485, "neural_compressor.ux.utils.expiring_dict.ExpiringDict"]], "expiringdictitem (class in neural_compressor.ux.utils.expiring_dict)": [[485, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem"]], "neural_compressor.ux.utils.expiring_dict": [[485, "module-neural_compressor.ux.utils.expiring_dict"]], "githubinfo (class in neural_compressor.ux.utils.github_info)": [[486, "neural_compressor.ux.utils.github_info.GithubInfo"]], "neural_compressor.ux.utils.github_info": [[486, "module-neural_compressor.ux.utils.github_info"]], "hwinfo (class in neural_compressor.ux.utils.hw_info)": [[487, "neural_compressor.ux.utils.hw_info.HWInfo"]], "get_bios_version() (in module neural_compressor.ux.utils.hw_info)": [[487, "neural_compressor.ux.utils.hw_info.get_bios_version"]], "get_distribution() (in module neural_compressor.ux.utils.hw_info)": [[487, "neural_compressor.ux.utils.hw_info.get_distribution"]], "get_framework_dependency_info() (in module neural_compressor.ux.utils.hw_info)": [[487, "neural_compressor.ux.utils.hw_info.get_framework_dependency_info"]], "get_framework_info() (in module neural_compressor.ux.utils.hw_info)": [[487, "neural_compressor.ux.utils.hw_info.get_framework_info"]], "get_kernel_version() (in module neural_compressor.ux.utils.hw_info)": [[487, "neural_compressor.ux.utils.hw_info.get_kernel_version"]], "get_number_of_sockets() (in module neural_compressor.ux.utils.hw_info)": [[487, "neural_compressor.ux.utils.hw_info.get_number_of_sockets"]], "is_turbo_boost_enabled() (in module neural_compressor.ux.utils.hw_info)": [[487, "neural_compressor.ux.utils.hw_info.is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info": [[487, "module-neural_compressor.ux.utils.hw_info"]], "neural_compressor.ux.utils": [[488, "module-neural_compressor.ux.utils"]], "jsonserializer (class in neural_compressor.ux.utils.json_serializer)": [[489, "neural_compressor.ux.utils.json_serializer.JsonSerializer"]], "neural_compressor.ux.utils.json_serializer": [[489, "module-neural_compressor.ux.utils.json_serializer"]], "change_log_level() (in module neural_compressor.ux.utils.logger)": [[490, "neural_compressor.ux.utils.logger.change_log_level"]], "neural_compressor.ux.utils.logger": [[490, "module-neural_compressor.ux.utils.logger"]], "accuracyparser (class in neural_compressor.ux.utils.parser)": [[491, "neural_compressor.ux.utils.parser.AccuracyParser"]], "benchmarkparserfactory (class in neural_compressor.ux.utils.parser)": [[491, "neural_compressor.ux.utils.parser.BenchmarkParserFactory"]], "optimizationparser (class in neural_compressor.ux.utils.parser)": [[491, "neural_compressor.ux.utils.parser.OptimizationParser"]], "parser (class in neural_compressor.ux.utils.parser)": [[491, "neural_compressor.ux.utils.parser.Parser"]], "performanceparser (class in neural_compressor.ux.utils.parser)": [[491, "neural_compressor.ux.utils.parser.PerformanceParser"]], "profilingparser (class in neural_compressor.ux.utils.parser)": [[491, "neural_compressor.ux.utils.parser.ProfilingParser"]], "neural_compressor.ux.utils.parser": [[491, "module-neural_compressor.ux.utils.parser"]], "proc (class in neural_compressor.ux.utils.proc)": [[492, "neural_compressor.ux.utils.proc.Proc"]], "neural_compressor.ux.utils.proc": [[492, "module-neural_compressor.ux.utils.proc"]], "ncprocesses (class in neural_compressor.ux.utils.processes)": [[493, "neural_compressor.ux.utils.processes.NCProcesses"]], "neural_compressor.ux.utils.processes": [[493, "module-neural_compressor.ux.utils.processes"]], "singleton (class in neural_compressor.ux.utils.singleton)": [[494, "neural_compressor.ux.utils.singleton.Singleton"]], "neural_compressor.ux.utils.singleton": [[494, "module-neural_compressor.ux.utils.singleton"]], "get_status_update_function() (in module neural_compressor.ux.utils.status_updates)": [[495, "neural_compressor.ux.utils.status_updates.get_status_update_function"]], "neural_compressor.ux.utils.status_updates": [[495, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[496, "module-neural_compressor.ux.utils.templates"]], "metric (class in neural_compressor.ux.utils.templates.metric)": [[497, "neural_compressor.ux.utils.templates.metric.Metric"]], "neural_compressor.ux.utils.templates.metric": [[497, "module-neural_compressor.ux.utils.templates.metric"]], "workdir (class in neural_compressor.ux.utils.templates.workdir)": [[498, "neural_compressor.ux.utils.templates.workdir.Workdir"]], "neural_compressor.ux.utils.templates.workdir": [[498, "module-neural_compressor.ux.utils.templates.workdir"]], "are_archive_filenames_valid() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.are_archive_filenames_valid"]], "check_module() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.check_module"]], "deprecated() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.deprecated"]], "determine_ip() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.determine_ip"]], "export_to_csv() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.export_to_csv"]], "filter_transforms() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.filter_transforms"]], "get_dataset_path() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.get_dataset_path"]], "get_default_pruning_config_path() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.get_default_pruning_config_path"]], "get_file_extension() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.get_file_extension"]], "get_framework_from_path() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.get_framework_from_path"]], "get_height_width_from_size() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.get_height_width_from_size"]], "get_metrics_dict() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.get_metrics_dict"]], "get_model_zoo_config_path() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.get_model_zoo_config_path"]], "get_model_zoo_model_path() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.get_model_zoo_model_path"]], "get_module_version() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.get_module_version"]], "get_predefined_config_path() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.get_predefined_config_path"]], "get_shape_from_transforms() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.get_shape_from_transforms"]], "get_size() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.get_size"]], "is_dataset_file() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.is_dataset_file"]], "is_development_env() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.is_development_env"]], "is_hidden() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.is_hidden"]], "load_dataloader_config() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.load_dataloader_config"]], "load_help_nc_params() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.load_help_nc_params"]], "load_metrics_config() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.load_metrics_config"]], "load_model_config() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.load_model_config"]], "load_model_wise_params() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.load_model_wise_params"]], "load_precisions_config() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.load_precisions_config"]], "load_pruning_details_config() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.load_pruning_details_config"]], "load_transforms_config() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.load_transforms_config"]], "load_transforms_filter_config() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.load_transforms_filter_config"]], "neural_compressor.ux.utils.utils": [[499, "module-neural_compressor.ux.utils.utils"]], "normalize_domain() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.normalize_domain"]], "normalize_framework() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.normalize_framework"]], "normalize_string() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.normalize_string"]], "parse_bool_value() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.parse_bool_value"]], "parse_to_float_list() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.parse_to_float_list"]], "parse_to_string_list() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.parse_to_string_list"]], "parse_version() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.parse_version"]], "release_tag() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.release_tag"]], "replace_with_values() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.replace_with_values"]], "safe_extract_archive() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.safe_extract_archive"]], "verify_file_path() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.verify_file_path"]], "config (class in neural_compressor.ux.utils.workload.config)": [[500, "neural_compressor.ux.utils.workload.config.Config"]], "neural_compressor.ux.utils.workload.config": [[500, "module-neural_compressor.ux.utils.workload.config"]], "dataloader (class in neural_compressor.ux.utils.workload.dataloader)": [[501, "neural_compressor.ux.utils.workload.dataloader.Dataloader"]], "dataset (class in neural_compressor.ux.utils.workload.dataloader)": [[501, "neural_compressor.ux.utils.workload.dataloader.Dataset"]], "filter (class in neural_compressor.ux.utils.workload.dataloader)": [[501, "neural_compressor.ux.utils.workload.dataloader.Filter"]], "labelbalance (class in neural_compressor.ux.utils.workload.dataloader)": [[501, "neural_compressor.ux.utils.workload.dataloader.LabelBalance"]], "transform (class in neural_compressor.ux.utils.workload.dataloader)": [[501, "neural_compressor.ux.utils.workload.dataloader.Transform"]], "neural_compressor.ux.utils.workload.dataloader": [[501, "module-neural_compressor.ux.utils.workload.dataloader"]], "accuracy (class in neural_compressor.ux.utils.workload.evaluation)": [[502, "neural_compressor.ux.utils.workload.evaluation.Accuracy"]], "configs (class in neural_compressor.ux.utils.workload.evaluation)": [[502, "neural_compressor.ux.utils.workload.evaluation.Configs"]], "evaluation (class in neural_compressor.ux.utils.workload.evaluation)": [[502, "neural_compressor.ux.utils.workload.evaluation.Evaluation"]], "metric (class in neural_compressor.ux.utils.workload.evaluation)": [[502, "neural_compressor.ux.utils.workload.evaluation.Metric"]], "performance (class in neural_compressor.ux.utils.workload.evaluation)": [[502, "neural_compressor.ux.utils.workload.evaluation.Performance"]], "postprocess (class in neural_compressor.ux.utils.workload.evaluation)": [[502, "neural_compressor.ux.utils.workload.evaluation.Postprocess"]], "postprocessschema (class in neural_compressor.ux.utils.workload.evaluation)": [[502, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema"]], "neural_compressor.ux.utils.workload.evaluation": [[502, "module-neural_compressor.ux.utils.workload.evaluation"]], "graphoptimization (class in neural_compressor.ux.utils.workload.graph_optimization)": [[503, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization": [[503, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "neural_compressor.ux.utils.workload": [[504, "module-neural_compressor.ux.utils.workload"]], "mixedprecision (class in neural_compressor.ux.utils.workload.mixed_precision)": [[505, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision": [[505, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "model (class in neural_compressor.ux.utils.workload.model)": [[506, "neural_compressor.ux.utils.workload.model.Model"]], "neural_compressor.ux.utils.workload.model": [[506, "module-neural_compressor.ux.utils.workload.model"]], "adamoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[507, "neural_compressor.ux.utils.workload.pruning.AdamOptimizer"]], "adamwoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[507, "neural_compressor.ux.utils.workload.pruning.AdamWOptimizer"]], "approach (class in neural_compressor.ux.utils.workload.pruning)": [[507, "neural_compressor.ux.utils.workload.pruning.Approach"]], "criterion (class in neural_compressor.ux.utils.workload.pruning)": [[507, "neural_compressor.ux.utils.workload.pruning.Criterion"]], "crossentropylosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[507, "neural_compressor.ux.utils.workload.pruning.CrossEntropyLossCriterion"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[507, "neural_compressor.ux.utils.workload.pruning.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationlosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[507, "neural_compressor.ux.utils.workload.pruning.KnowledgeDistillationLossCriterion"]], "optimizer (class in neural_compressor.ux.utils.workload.pruning)": [[507, "neural_compressor.ux.utils.workload.pruning.Optimizer"]], "pruning (class in neural_compressor.ux.utils.workload.pruning)": [[507, "neural_compressor.ux.utils.workload.pruning.Pruning"]], "sgdoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[507, "neural_compressor.ux.utils.workload.pruning.SGDOptimizer"]], "selfknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[507, "neural_compressor.ux.utils.workload.pruning.SelfKnowledgeDistillationLoss"]], "sparsecategoricalcrossentropycriterion (class in neural_compressor.ux.utils.workload.pruning)": [[507, "neural_compressor.ux.utils.workload.pruning.SparseCategoricalCrossentropyCriterion"]], "train (class in neural_compressor.ux.utils.workload.pruning)": [[507, "neural_compressor.ux.utils.workload.pruning.Train"]], "weightcompressionapproach (class in neural_compressor.ux.utils.workload.pruning)": [[507, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach"]], "neural_compressor.ux.utils.workload.pruning": [[507, "module-neural_compressor.ux.utils.workload.pruning"]], "parse_dict_value_to_float() (in module neural_compressor.ux.utils.workload.pruning)": [[507, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_float"]], "parse_dict_value_to_int() (in module neural_compressor.ux.utils.workload.pruning)": [[507, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_int"]], "advance (class in neural_compressor.ux.utils.workload.quantization)": [[508, "neural_compressor.ux.utils.workload.quantization.Advance"]], "calibration (class in neural_compressor.ux.utils.workload.quantization)": [[508, "neural_compressor.ux.utils.workload.quantization.Calibration"]], "quantization (class in neural_compressor.ux.utils.workload.quantization)": [[508, "neural_compressor.ux.utils.workload.quantization.Quantization"]], "wiseconfig (class in neural_compressor.ux.utils.workload.quantization)": [[508, "neural_compressor.ux.utils.workload.quantization.WiseConfig"]], "wiseconfigdetails (class in neural_compressor.ux.utils.workload.quantization)": [[508, "neural_compressor.ux.utils.workload.quantization.WiseConfigDetails"]], "neural_compressor.ux.utils.workload.quantization": [[508, "module-neural_compressor.ux.utils.workload.quantization"]], "acccriterion (class in neural_compressor.ux.utils.workload.tuning)": [[509, "neural_compressor.ux.utils.workload.tuning.AccCriterion"]], "diagnosis (class in neural_compressor.ux.utils.workload.tuning)": [[509, "neural_compressor.ux.utils.workload.tuning.Diagnosis"]], "exitpolicy (class in neural_compressor.ux.utils.workload.tuning)": [[509, "neural_compressor.ux.utils.workload.tuning.ExitPolicy"]], "multiobjectives (class in neural_compressor.ux.utils.workload.tuning)": [[509, "neural_compressor.ux.utils.workload.tuning.MultiObjectives"]], "strategy (class in neural_compressor.ux.utils.workload.tuning)": [[509, "neural_compressor.ux.utils.workload.tuning.Strategy"]], "tuning (class in neural_compressor.ux.utils.workload.tuning)": [[509, "neural_compressor.ux.utils.workload.tuning.Tuning"]], "workspace (class in neural_compressor.ux.utils.workload.tuning)": [[509, "neural_compressor.ux.utils.workload.tuning.Workspace"]], "neural_compressor.ux.utils.workload.tuning": [[509, "module-neural_compressor.ux.utils.workload.tuning"]], "float_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[510, "neural_compressor.ux.utils.yaml_utils.float_representer"]], "neural_compressor.ux.utils.yaml_utils": [[510, "module-neural_compressor.ux.utils.yaml_utils"]], "pruner_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[510, "neural_compressor.ux.utils.yaml_utils.pruner_representer"]], "message (class in neural_compressor.ux.web.communication)": [[511, "neural_compressor.ux.web.communication.Message"]], "messagequeue (class in neural_compressor.ux.web.communication)": [[511, "neural_compressor.ux.web.communication.MessageQueue"]], "request (class in neural_compressor.ux.web.communication)": [[511, "neural_compressor.ux.web.communication.Request"]], "response (class in neural_compressor.ux.web.communication)": [[511, "neural_compressor.ux.web.communication.Response"]], "create_simple_response() (in module neural_compressor.ux.web.communication)": [[511, "neural_compressor.ux.web.communication.create_simple_response"]], "neural_compressor.ux.web.communication": [[511, "module-neural_compressor.ux.web.communication"]], "configuration (class in neural_compressor.ux.web.configuration)": [[512, "neural_compressor.ux.web.configuration.Configuration"]], "neural_compressor.ux.web.configuration": [[512, "module-neural_compressor.ux.web.configuration"]], "servicenotfoundexception": [[513, "neural_compressor.ux.web.exceptions.ServiceNotFoundException"]], "neural_compressor.ux.web.exceptions": [[513, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[514, "module-neural_compressor.ux.web"]], "deferredroutingdefinition (class in neural_compressor.ux.web.router)": [[515, "neural_compressor.ux.web.router.DeferredRoutingDefinition"]], "deferredsubprocessroutingdefinition (class in neural_compressor.ux.web.router)": [[515, "neural_compressor.ux.web.router.DeferredSubprocessRoutingDefinition"]], "realtimeroutingdefinition (class in neural_compressor.ux.web.router)": [[515, "neural_compressor.ux.web.router.RealtimeRoutingDefinition"]], "router (class in neural_compressor.ux.web.router)": [[515, "neural_compressor.ux.web.router.Router"]], "routingdefinition (class in neural_compressor.ux.web.router)": [[515, "neural_compressor.ux.web.router.RoutingDefinition"]], "find_pattern_in_graph() (in module neural_compressor.ux.web.router)": [[515, "neural_compressor.ux.web.router.find_pattern_in_graph"]], "get_model_graph() (in module neural_compressor.ux.web.router)": [[515, "neural_compressor.ux.web.router.get_model_graph"]], "get_system_info() (in module neural_compressor.ux.web.router)": [[515, "neural_compressor.ux.web.router.get_system_info"]], "neural_compressor.ux.web.router": [[515, "module-neural_compressor.ux.web.router"]], "allow_api_call() (in module neural_compressor.ux.web.server)": [[516, "neural_compressor.ux.web.server.allow_api_call"]], "block_iframe() (in module neural_compressor.ux.web.server)": [[516, "neural_compressor.ux.web.server.block_iframe"]], "block_sniffing() (in module neural_compressor.ux.web.server)": [[516, "neural_compressor.ux.web.server.block_sniffing"]], "build_parameters() (in module neural_compressor.ux.web.server)": [[516, "neural_compressor.ux.web.server.build_parameters"]], "disable_cache() (in module neural_compressor.ux.web.server)": [[516, "neural_compressor.ux.web.server.disable_cache"]], "get_tls_args() (in module neural_compressor.ux.web.server)": [[516, "neural_compressor.ux.web.server.get_tls_args"]], "handle_api_call() (in module neural_compressor.ux.web.server)": [[516, "neural_compressor.ux.web.server.handle_api_call"]], "neural_compressor.ux.web.server": [[516, "module-neural_compressor.ux.web.server"]], "page_not_found() (in module neural_compressor.ux.web.server)": [[516, "neural_compressor.ux.web.server.page_not_found"]], "require_api_token() (in module neural_compressor.ux.web.server)": [[516, "neural_compressor.ux.web.server.require_api_token"]], "root() (in module neural_compressor.ux.web.server)": [[516, "neural_compressor.ux.web.server.root"]], "run_server() (in module neural_compressor.ux.web.server)": [[516, "neural_compressor.ux.web.server.run_server"]], "web_socket_publisher() (in module neural_compressor.ux.web.server)": [[516, "neural_compressor.ux.web.server.web_socket_publisher"]], "benchmarkservice (class in neural_compressor.ux.web.service.benchmark)": [[517, "neural_compressor.ux.web.service.benchmark.BenchmarkService"]], "neural_compressor.ux.web.service.benchmark": [[517, "module-neural_compressor.ux.web.service.benchmark"]], "historysnapshotparser (class in neural_compressor.ux.web.service.history_snapshot_parser)": [[518, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[518, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "neural_compressor.ux.web.service": [[519, "module-neural_compressor.ux.web.service"]], "modelservice (class in neural_compressor.ux.web.service.model)": [[520, "neural_compressor.ux.web.service.model.ModelService"]], "neural_compressor.ux.web.service.model": [[520, "module-neural_compressor.ux.web.service.model"]], "optimizationservice (class in neural_compressor.ux.web.service.optimization)": [[521, "neural_compressor.ux.web.service.optimization.OptimizationService"]], "neural_compressor.ux.web.service.optimization": [[521, "module-neural_compressor.ux.web.service.optimization"]], "profilingservice (class in neural_compressor.ux.web.service.profiling)": [[522, "neural_compressor.ux.web.service.profiling.ProfilingService"]], "neural_compressor.ux.web.service.profiling": [[522, "module-neural_compressor.ux.web.service.profiling"]], "requestdataprocessor (class in neural_compressor.ux.web.service.request_data_processor)": [[523, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor"]], "neural_compressor.ux.web.service.request_data_processor": [[523, "module-neural_compressor.ux.web.service.request_data_processor"]], "responsegenerator (class in neural_compressor.ux.web.service.response_generator)": [[524, "neural_compressor.ux.web.service.response_generator.ResponseGenerator"]], "neural_compressor.ux.web.service.response_generator": [[524, "module-neural_compressor.ux.web.service.response_generator"]], "workloadservice (class in neural_compressor.ux.web.service.workload)": [[525, "neural_compressor.ux.web.service.workload.WorkloadService"]], "neural_compressor.ux.web.service.workload": [[525, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[526, "module-neural_compressor.version"]]}})