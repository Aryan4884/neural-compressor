Search.setIndex({"docnames": ["autoapi/block_mask/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/teq/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/compression/pruning/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/profiling/parser/factory/index", "autoapi/neural_compressor/profiling/parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index", "autoapi/neural_compressor/profiling/parser/parser/index", "autoapi/neural_compressor/profiling/parser/result/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index", "autoapi/neural_compressor/profiling/profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index", "autoapi/neural_compressor/profiling/profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/template/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/diagnosis", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/block_mask/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/teq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/compression/pruning/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/profiling/parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/result/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index.rst", "autoapi/neural_compressor/profiling/profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index.rst", "autoapi/neural_compressor/profiling/profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/template/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/diagnosis.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.reduce</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.unary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_scaler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.pattern_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.teq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.auto_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.pattern_analyzer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.weight_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template.api_doc_example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.neural_insights_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.weights_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "DataLoader", "Dataset", "Design", "Diagnosis", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (68)", "Pythonic Style Access for Configurations", "Quantization", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"block": [0, 154, 159, 170, 176, 177, 180, 297, 338, 380, 434, 460, 462, 467, 470, 473], "mask": [0, 176, 177, 200, 244, 270, 299, 323, 462, 476], "adaptor_registri": [1, 403], "cl": [1, 160, 167, 176, 177, 178, 179, 202, 209, 217, 219, 224, 246, 253, 259, 281, 288, 292, 297, 299, 301, 312, 327, 338, 373, 393], "sourc": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 233, 234, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 256, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 286, 287, 288, 289, 292, 293, 294, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 340, 342, 344, 345, 346, 347, 349, 350, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 376, 377, 378, 379, 380, 382, 383, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 399, 402, 436, 438, 451, 453, 455, 456, 458, 463], "The": [1, 3, 11, 14, 16, 34, 52, 73, 112, 118, 120, 139, 147, 152, 158, 160, 165, 166, 167, 170, 174, 176, 177, 178, 179, 180, 181, 182, 184, 185, 188, 189, 190, 200, 201, 202, 203, 204, 208, 209, 217, 219, 222, 224, 227, 229, 232, 233, 234, 244, 245, 246, 247, 248, 252, 253, 259, 260, 265, 267, 268, 269, 271, 272, 274, 276, 277, 278, 280, 281, 283, 284, 286, 287, 288, 289, 292, 294, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 316, 318, 320, 321, 322, 324, 325, 327, 328, 336, 338, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 377, 379, 380, 382, 383, 385, 387, 388, 392, 393, 394, 397, 399, 400, 403, 404, 405, 406, 408, 412, 415, 418, 420, 421, 422, 424, 425, 427, 429, 431, 433, 434, 435, 437, 438, 439, 440, 443, 444, 446, 449, 451, 452, 453, 455, 456, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476], "decor": [1, 16, 34, 66, 67, 69, 147, 160, 176, 177, 179, 217, 224, 259, 274, 281, 288, 292, 297, 299, 301, 312, 315, 327, 338, 373, 376, 393, 399, 400, 403, 473], "us": [1, 13, 16, 34, 42, 43, 47, 48, 69, 102, 104, 115, 140, 150, 152, 158, 159, 165, 167, 170, 174, 176, 177, 179, 182, 184, 185, 188, 189, 198, 199, 200, 201, 202, 203, 204, 207, 216, 217, 218, 219, 224, 232, 233, 242, 243, 244, 245, 246, 247, 248, 251, 258, 259, 263, 264, 265, 267, 268, 270, 274, 275, 276, 281, 288, 289, 292, 294, 297, 299, 300, 301, 302, 303, 306, 309, 312, 315, 316, 320, 321, 323, 327, 338, 355, 360, 361, 365, 368, 370, 373, 376, 377, 379, 380, 383, 384, 385, 386, 393, 397, 398, 399, 400, 403, 404, 420, 422, 424, 425, 426, 427, 429, 431, 433, 435, 436, 438, 439, 440, 441, 442, 443, 445, 446, 449, 451, 453, 455, 456, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476], "regist": [1, 16, 34, 160, 167, 170, 176, 177, 178, 179, 202, 209, 217, 219, 224, 246, 253, 259, 274, 281, 288, 292, 297, 299, 301, 312, 315, 327, 338, 373, 376, 390, 400, 403, 422, 427, 437, 438, 459, 460, 470, 473], "all": [1, 13, 16, 34, 44, 62, 96, 149, 158, 159, 160, 162, 165, 166, 176, 177, 180, 184, 185, 190, 191, 198, 202, 209, 217, 218, 224, 227, 229, 234, 242, 246, 253, 259, 264, 267, 270, 272, 274, 281, 288, 292, 293, 297, 303, 312, 315, 320, 323, 325, 327, 329, 338, 373, 376, 379, 385, 393, 397, 402, 403, 404, 405, 421, 422, 427, 431, 435, 438, 441, 449, 452, 453, 456, 457, 458, 459, 461, 462, 463, 465, 466, 470, 472, 473], "subclass": [1, 16, 34, 160, 176, 177, 179, 195, 199, 202, 209, 217, 224, 239, 243, 246, 253, 259, 274, 281, 288, 292, 297, 299, 301, 312, 315, 327, 338, 373, 376, 403], "paramet": [1, 11, 13, 14, 16, 42, 43, 44, 66, 67, 69, 85, 104, 115, 131, 139, 140, 147, 148, 149, 150, 155, 156, 158, 159, 160, 165, 166, 167, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 188, 189, 199, 200, 202, 209, 213, 217, 219, 224, 229, 232, 233, 243, 244, 246, 253, 256, 259, 260, 262, 263, 264, 265, 267, 268, 270, 271, 272, 274, 276, 277, 278, 280, 281, 282, 283, 284, 286, 287, 288, 289, 292, 294, 297, 298, 299, 300, 301, 302, 306, 312, 316, 318, 320, 321, 323, 324, 325, 327, 328, 332, 336, 338, 355, 360, 361, 365, 373, 377, 379, 380, 382, 385, 389, 390, 392, 393, 399, 404, 421, 422, 425, 427, 434, 437, 438, 452, 458, 459, 462, 465, 467, 469, 470, 472, 473, 475], "framework_specific_info": [1, 3, 11, 14, 44, 46, 403], "base": [1, 3, 11, 13, 14, 16, 34, 45, 46, 85, 104, 115, 119, 121, 131, 143, 150, 154, 158, 160, 166, 170, 185, 190, 193, 198, 200, 202, 209, 217, 227, 234, 237, 242, 244, 246, 253, 259, 274, 280, 282, 288, 289, 292, 294, 299, 309, 312, 316, 327, 329, 336, 337, 338, 370, 373, 377, 400, 402, 403, 404, 405, 422, 426, 427, 431, 438, 439, 446, 447, 449, 458, 462, 465, 467, 469, 471, 473, 476], "framework": [1, 3, 11, 13, 14, 44, 165, 167, 170, 176, 177, 186, 187, 191, 192, 196, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 214, 217, 219, 220, 224, 230, 231, 235, 236, 238, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 257, 259, 265, 274, 275, 302, 310, 316, 327, 328, 329, 330, 332, 371, 377, 385, 402, 403, 405, 424, 427, 428, 432, 433, 434, 435, 437, 438, 439, 462, 463, 465, 468, 471, 472, 473, 474, 475, 476], "layer": [1, 3, 11, 14, 45, 46, 115, 116, 117, 118, 120, 121, 149, 155, 159, 163, 167, 172, 174, 175, 176, 177, 180, 184, 185, 219, 226, 297, 298, 383, 385, 393, 403, 404, 405, 426, 434, 462, 468], "mxnet_util": 2, "util": [2, 12, 17, 104, 109, 110, 138, 141, 148, 150, 151, 156, 169, 171, 184, 185, 226, 266, 268, 298, 308, 319, 321, 353, 358, 369, 404, 405, 406, 427, 438, 441, 465, 473, 474], "ox_util": 2, "oper": [2, 17, 43, 103, 109, 139, 147, 174, 175, 176, 184, 185, 213, 256, 297, 355, 360, 399, 420, 421, 424, 429, 458, 465, 467, 470, 472, 473], "activ": [2, 17, 29, 140, 158, 159, 184, 185, 226, 316, 377, 379, 403, 404, 405, 424, 426, 431, 438, 459, 464, 465, 467, 470, 471, 475], "argmax": [2, 17, 29], "attent": [2, 17, 29, 154, 172, 174, 177, 184, 185, 200, 244, 397, 425, 462], "binary_op": [2, 17, 29], "concat": [2, 17, 29, 146], "conv": [2, 17, 29, 57, 61, 65, 70, 71, 72, 91, 108, 163, 184, 185, 399, 404, 405, 438, 462, 464, 465, 473], "direct_q8": [2, 17, 29], "embed_layernorm": [2, 17, 29], "gather": [2, 13, 17, 29, 184, 185, 297], "gavgpool": [2, 17, 29], "gemm": [2, 17, 29, 184, 185], "lstm": [2, 17, 29], "matmul": [2, 17, 29, 51, 58, 64, 72, 93, 108, 127, 136, 176, 184, 185, 297, 431, 473], "maxpool": [2, 17, 29, 128, 137, 431], "norm": [2, 17, 29], "op": [2, 13, 17, 29, 44, 51, 56, 64, 65, 66, 67, 68, 69, 70, 71, 73, 77, 80, 84, 87, 90, 91, 92, 93, 95, 104, 106, 108, 122, 123, 124, 130, 132, 133, 134, 135, 140, 142, 145, 147, 148, 150, 156, 158, 163, 174, 184, 185, 264, 309, 316, 317, 355, 360, 366, 368, 370, 377, 378, 379, 387, 393, 403, 404, 405, 424, 431, 438, 439, 462, 465, 466, 468, 470, 471, 473, 475], "pad": [2, 17, 29, 70, 71, 200, 217, 244, 259, 422, 472], "pool": [2, 17, 29], "reduc": [2, 17, 29, 184, 185, 403, 426, 438, 439, 458, 459, 462, 463, 465, 466, 467, 470, 473, 475], "resiz": [2, 17, 29, 200, 201, 213, 217, 244, 245, 256, 259, 422, 472], "split": [2, 17, 29, 43, 81, 159, 216, 217, 258, 259, 399, 467, 470, 472], "unary_op": [2, 17, 29], "calibr": [2, 11, 13, 14, 17, 48, 88, 89, 139, 158, 159, 165, 184, 185, 188, 189, 232, 233, 265, 302, 361, 387, 403, 405, 422, 433, 434, 465, 473, 475], "quantiz": [2, 11, 13, 14, 16, 17, 42, 43, 47, 48, 87, 91, 93, 95, 98, 106, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 148, 149, 150, 152, 153, 155, 157, 158, 159, 163, 165, 166, 184, 185, 188, 189, 213, 220, 227, 232, 233, 256, 264, 265, 266, 276, 303, 309, 315, 319, 366, 368, 370, 379, 382, 383, 387, 392, 393, 403, 410, 421, 422, 427, 428, 431, 433, 434, 437, 440, 441, 446, 448, 449, 452, 461, 463, 468, 471, 472, 473, 474, 475], "smooth_quant": [2, 17, 162, 184, 185, 319, 465, 470], "tf_util": 2, "graph_rewrit": [2, 110], "bf16": [2, 56, 86, 110, 148, 184, 185, 316, 377, 403, 404, 431, 438, 443, 448, 452, 458, 466, 473, 476], "gener": [2, 13, 47, 48, 86, 110, 121, 147, 149, 158, 165, 174, 180, 188, 189, 190, 199, 202, 203, 204, 205, 217, 232, 233, 234, 243, 246, 247, 248, 249, 259, 267, 275, 306, 320, 328, 356, 361, 365, 380, 382, 399, 403, 405, 421, 425, 437, 438, 439, 441, 446, 451, 453, 455, 456, 458, 460, 462, 463, 465, 466, 467, 470, 471, 472, 473], "int8": [2, 18, 19, 43, 86, 110, 122, 123, 124, 130, 132, 133, 134, 135, 142, 147, 159, 164, 165, 184, 185, 213, 256, 262, 263, 264, 316, 318, 377, 379, 392, 393, 399, 403, 404, 405, 420, 422, 426, 431, 438, 439, 443, 446, 448, 449, 452, 458, 464, 465, 466, 468, 469, 470, 471, 472, 475], "onnx": [2, 14, 15, 16, 29, 41, 43, 86, 110, 141, 163, 184, 185, 196, 240, 262, 263, 264, 328, 335, 355, 391, 402, 403, 404, 406, 421, 424, 428, 429, 431, 432, 434, 439, 440, 443, 448, 449, 463, 464, 467, 468, 470, 473], "qdq": [2, 42, 86, 110, 111, 112, 141, 158, 159, 184, 185, 262, 263, 264, 403, 424, 429, 434, 448, 449, 465, 468, 470], "graph_bas": [2, 86, 110], "quantize_graph": [2, 110], "qat": [2, 110, 111, 156, 185, 276, 336, 426, 427, 434, 438, 465], "quantize_graph_bas": [2, 110, 111], "quantize_graph_bn": [2, 110, 111], "quantize_graph_concatv2": [2, 110, 111], "quantize_graph_conv": [2, 110, 111], "quantize_graph_for_intel_cpu": [2, 110, 111], "quantize_graph_matmul": [2, 110, 111], "quantize_graph_pool": [2, 110, 111], "transform_graph": [2, 110], "bias_correct": [2, 110, 144], "graph_transform_bas": [2, 110, 144], "insert_log": [2, 110, 144], "rerange_quantized_concat": [2, 110, 144], "graph_convert": [2, 110], "graph_converter_without_calib": [2, 110], "graph_util": [2, 110], "quantize_graph_common": [2, 110], "smooth_quant_calibr": [2, 110], "smooth_quant_scal": [2, 110], "tf2onnx_convert": [2, 110], "torch_util": [2, 221, 266, 319, 470], "bf16_convert": [2, 50, 86, 110, 151], "hawq_metr": [2, 151], "model_wrapp": [2, 15, 151], "pattern_detector": [2, 151], "symbolic_trac": [2, 151], "tensorflow": [2, 50, 52, 74, 75, 76, 86, 94, 100, 101, 102, 103, 104, 105, 109, 110, 111, 113, 116, 129, 139, 140, 141, 144, 147, 184, 185, 199, 200, 201, 202, 205, 207, 209, 217, 219, 224, 243, 244, 245, 246, 249, 251, 253, 259, 263, 264, 265, 268, 270, 274, 275, 276, 302, 310, 321, 323, 327, 328, 336, 354, 355, 359, 360, 361, 371, 393, 400, 402, 403, 404, 421, 424, 425, 426, 428, 431, 432, 434, 435, 438, 439, 440, 448, 449, 462, 463, 464, 469, 470, 473, 475], "kerasadaptor": 3, "kerasqueri": 3, "local_config_fil": [3, 11, 14, 46], "none": [3, 13, 14, 41, 43, 44, 46, 47, 48, 62, 88, 101, 103, 104, 109, 115, 141, 147, 149, 150, 152, 153, 155, 157, 158, 159, 165, 166, 167, 172, 174, 176, 180, 181, 182, 184, 185, 188, 189, 190, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 213, 217, 218, 219, 220, 227, 229, 232, 233, 234, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 256, 259, 260, 263, 264, 265, 270, 274, 275, 276, 277, 280, 289, 294, 298, 302, 306, 309, 311, 312, 316, 323, 327, 328, 338, 354, 359, 360, 361, 362, 365, 366, 370, 372, 373, 377, 380, 382, 383, 385, 390, 392, 393, 403, 404, 421, 422, 437, 465, 471, 472, 473], "defin": [3, 11, 14, 45, 85, 150, 153, 174, 176, 177, 178, 179, 184, 185, 188, 189, 232, 233, 277, 278, 280, 281, 282, 289, 294, 297, 298, 299, 301, 328, 361, 382, 392, 397, 400, 403, 404, 421, 422, 425, 426, 431, 434, 437, 438, 459, 461, 462, 465, 469, 470, 471, 473, 475], "queri": [3, 11, 13, 14, 46, 147, 158, 174, 177, 184, 185, 404, 405, 465], "interfac": [3, 11, 14, 45, 85, 112, 181, 265, 289, 294, 302, 303, 385, 434, 438, 449, 465, 468], "each": [3, 11, 14, 45, 140, 147, 150, 184, 185, 198, 202, 205, 213, 217, 242, 246, 249, 256, 259, 268, 270, 271, 272, 309, 321, 323, 324, 325, 370, 393, 398, 403, 404, 405, 422, 424, 425, 426, 431, 438, 443, 449, 452, 458, 460, 462, 469, 470, 471, 472, 473, 474], "adapt": [3, 11, 14, 45, 397, 402, 404, 422, 449, 463], "should": [3, 11, 14, 45, 53, 114, 115, 166, 172, 174, 177, 184, 185, 188, 189, 198, 200, 202, 217, 222, 232, 233, 242, 244, 246, 259, 264, 268, 321, 327, 328, 361, 380, 382, 393, 399, 400, 403, 404, 405, 422, 425, 427, 437, 438, 444, 453, 456, 458, 460, 462, 465, 472, 473, 475], "implement": [3, 11, 14, 45, 109, 142, 146, 188, 189, 195, 198, 199, 200, 202, 232, 233, 239, 242, 243, 244, 246, 267, 320, 328, 338, 361, 368, 382, 405, 421, 422, 437, 438, 449, 459, 462, 465, 468, 471, 473, 475], "inherit": [3, 11, 14, 45, 166, 167, 177, 179, 184, 197, 217, 219, 227, 241, 259, 299, 301, 400, 403, 404, 422], "specif": [3, 11, 14, 42, 45, 103, 115, 159, 165, 180, 184, 185, 200, 201, 202, 203, 207, 209, 224, 244, 245, 246, 247, 251, 253, 276, 283, 284, 286, 287, 288, 327, 361, 390, 397, 400, 403, 404, 421, 424, 425, 431, 433, 437, 438, 439, 440, 441, 445, 446, 448, 452, 458, 460, 462, 464, 473, 475], "backend": [3, 11, 14, 15, 41, 42, 45, 163, 184, 185, 186, 187, 191, 192, 196, 200, 201, 203, 204, 205, 206, 207, 211, 214, 217, 223, 224, 230, 231, 235, 236, 238, 240, 244, 245, 247, 248, 249, 250, 251, 255, 257, 259, 275, 310, 328, 329, 330, 332, 371, 399, 405, 424, 427, 433, 434, 438, 439, 447, 464, 472, 475], "own": [3, 11, 14, 45, 73, 198, 217, 242, 259, 338, 400, 404, 421, 422, 434, 437, 460, 467, 469, 474], "mxnetadaptor": 11, "do": [11, 14, 149, 166, 184, 185, 199, 200, 243, 244, 260, 264, 267, 270, 300, 320, 323, 392, 397, 404, 422, 427, 431, 434, 437, 438, 453, 456, 462, 466, 468, 470, 473], "inspect": [11, 14, 468, 471], "tensor": [11, 13, 14, 15, 16, 43, 69, 104, 147, 150, 158, 159, 170, 176, 177, 178, 185, 217, 259, 262, 264, 297, 299, 309, 336, 370, 393, 399, 405, 421, 422, 424, 462, 465, 468, 471, 472, 473], "dict": [11, 13, 14, 44, 115, 147, 148, 149, 150, 158, 159, 160, 165, 170, 174, 175, 176, 177, 178, 179, 180, 182, 184, 185, 188, 189, 199, 218, 224, 232, 233, 243, 262, 264, 269, 270, 271, 272, 274, 277, 280, 281, 282, 289, 292, 294, 297, 298, 299, 300, 301, 306, 309, 315, 318, 322, 323, 324, 325, 327, 328, 336, 361, 376, 379, 380, 382, 383, 385, 392, 393, 399, 404, 429, 437, 462, 464, 465, 470, 471, 473], "configur": [11, 13, 14, 44, 117, 148, 158, 165, 180, 181, 184, 185, 188, 189, 191, 202, 205, 218, 223, 232, 233, 246, 249, 260, 264, 265, 276, 277, 278, 280, 289, 294, 298, 302, 303, 309, 327, 328, 338, 361, 370, 379, 382, 384, 385, 391, 392, 399, 400, 403, 404, 422, 424, 438, 445, 459, 460, 462, 465, 468, 472, 473, 476], "mxnetqueri": 11, "mxnet": [12, 13, 16, 185, 195, 199, 202, 205, 209, 217, 239, 243, 246, 249, 253, 259, 265, 274, 302, 327, 328, 333, 361, 402, 403, 404, 421, 428, 431, 434, 435, 438, 439, 440, 464, 473, 475], "init": [12, 17, 42, 162, 168, 171, 173, 422, 437, 473], "optyp": [13, 184, 185, 262, 404], "enum": 13, "type": [13, 16, 42, 43, 44, 73, 95, 104, 115, 121, 131, 139, 147, 148, 149, 150, 158, 159, 160, 167, 174, 175, 176, 177, 178, 179, 180, 182, 184, 185, 198, 200, 202, 209, 217, 219, 224, 242, 244, 246, 253, 259, 264, 267, 268, 270, 274, 281, 288, 292, 297, 299, 301, 306, 312, 316, 318, 320, 321, 323, 327, 336, 338, 365, 366, 373, 377, 379, 380, 392, 393, 398, 403, 404, 422, 424, 427, 429, 431, 434, 438, 439, 459, 465, 469, 472, 473, 474, 475], "isiter": 13, "obj": [13, 104, 180, 199, 229, 243, 260, 265, 276, 277, 278, 280, 289, 294, 298, 302, 328, 338, 361, 382, 385, 393], "bool": [13, 42, 140, 147, 149, 156, 158, 159, 176, 184, 185, 200, 202, 213, 217, 244, 246, 256, 259, 264, 268, 274, 297, 315, 321, 327, 376, 380, 392, 393, 421, 422, 437, 464, 472], "check": [13, 66, 67, 104, 147, 158, 159, 180, 191, 202, 246, 262, 298, 392, 393, 398, 402, 424, 427, 435, 442, 444, 446, 453, 456, 457, 468], "whether": [13, 104, 115, 147, 149, 159, 176, 184, 185, 198, 200, 213, 217, 242, 244, 256, 259, 268, 270, 274, 297, 321, 323, 327, 385, 392, 393, 403, 422, 437, 465, 467, 470, 472], "object": [13, 42, 43, 44, 73, 85, 104, 115, 131, 148, 150, 156, 158, 165, 166, 170, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 188, 189, 190, 200, 201, 202, 217, 218, 220, 229, 232, 233, 234, 244, 245, 246, 259, 260, 265, 270, 278, 280, 283, 284, 286, 287, 288, 289, 294, 297, 298, 299, 300, 301, 302, 306, 319, 323, 327, 328, 336, 337, 355, 360, 361, 365, 379, 382, 385, 392, 393, 399, 400, 404, 410, 420, 421, 422, 430, 437, 438, 440, 461, 462, 464, 465, 472, 473, 474, 476], "i": [13, 43, 44, 47, 48, 52, 53, 56, 59, 63, 69, 81, 84, 104, 131, 142, 147, 149, 150, 152, 156, 158, 164, 165, 166, 170, 174, 175, 177, 178, 180, 184, 185, 188, 189, 190, 198, 199, 200, 201, 202, 203, 204, 207, 209, 213, 217, 218, 220, 224, 226, 227, 232, 233, 234, 242, 243, 244, 245, 246, 247, 248, 251, 253, 256, 259, 267, 270, 272, 274, 276, 281, 289, 294, 298, 299, 303, 310, 320, 323, 325, 327, 328, 338, 344, 345, 349, 361, 366, 371, 379, 380, 382, 392, 393, 397, 398, 399, 400, 402, 403, 404, 405, 406, 408, 412, 415, 418, 420, 421, 422, 424, 425, 426, 427, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 451, 452, 453, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476], "iter": [13, 15, 104, 139, 147, 159, 165, 175, 177, 179, 184, 185, 188, 189, 193, 198, 202, 203, 220, 232, 233, 237, 242, 246, 247, 299, 301, 328, 361, 382, 385, 399, 400, 403, 420, 421, 422, 438, 462, 464, 465, 471, 473, 475], "return": [13, 16, 44, 52, 66, 67, 69, 73, 104, 115, 147, 148, 149, 150, 156, 158, 159, 160, 165, 167, 174, 176, 177, 178, 179, 180, 182, 188, 189, 202, 209, 213, 217, 218, 219, 224, 229, 232, 233, 246, 253, 256, 259, 264, 267, 268, 270, 271, 272, 274, 280, 281, 288, 292, 297, 298, 299, 301, 306, 312, 316, 318, 320, 321, 323, 324, 325, 327, 328, 332, 336, 338, 355, 360, 361, 365, 373, 377, 379, 380, 382, 385, 390, 392, 393, 399, 400, 404, 405, 421, 422, 427, 437, 440, 460, 462, 465, 470, 471, 473], "true": [13, 84, 112, 145, 147, 159, 165, 184, 185, 198, 200, 202, 203, 216, 217, 218, 242, 244, 246, 247, 258, 259, 264, 268, 274, 292, 315, 321, 327, 338, 361, 376, 380, 385, 392, 393, 404, 421, 422, 424, 427, 431, 437, 438, 441, 444, 445, 464, 465, 467, 470, 471, 472, 473, 475], "els": [13, 147, 159, 185, 198, 242, 338, 390, 446, 471], "fals": [13, 14, 15, 41, 42, 46, 47, 48, 70, 71, 88, 91, 98, 101, 102, 104, 112, 130, 135, 142, 145, 146, 147, 156, 158, 159, 165, 167, 184, 185, 190, 192, 195, 196, 197, 199, 200, 202, 213, 217, 218, 219, 220, 226, 234, 236, 239, 240, 241, 243, 244, 246, 256, 259, 270, 274, 323, 327, 338, 361, 380, 385, 393, 403, 404, 421, 422, 431, 437, 438, 451, 455, 464, 465, 470, 471, 472, 473, 475], "boolean": 13, "ensure_list": 13, "x": [13, 53, 73, 149, 175, 184, 185, 199, 217, 243, 259, 306, 365, 380, 424, 427, 439, 440, 465, 470, 471, 472, 474], "ensur": [13, 217, 259, 306, 365, 427, 465, 472], "list": [13, 42, 43, 52, 104, 139, 147, 148, 149, 150, 154, 158, 165, 174, 175, 176, 177, 184, 185, 188, 189, 193, 200, 213, 217, 218, 232, 233, 237, 244, 256, 259, 263, 264, 267, 268, 270, 271, 272, 274, 281, 289, 294, 297, 300, 315, 320, 321, 323, 324, 325, 327, 328, 336, 344, 345, 349, 361, 376, 380, 382, 383, 393, 399, 402, 403, 422, 429, 431, 435, 438, 441, 446, 448, 451, 452, 455, 460, 462, 464, 465, 466, 470, 471, 473], "input": [13, 15, 42, 43, 44, 52, 59, 63, 66, 67, 69, 70, 71, 73, 81, 82, 84, 85, 104, 108, 109, 115, 121, 140, 147, 148, 153, 155, 156, 157, 158, 159, 163, 174, 175, 184, 185, 188, 189, 200, 201, 202, 204, 213, 216, 217, 222, 232, 233, 244, 245, 246, 248, 256, 258, 259, 262, 263, 264, 327, 328, 332, 336, 361, 382, 390, 392, 393, 400, 403, 404, 420, 421, 422, 424, 425, 426, 427, 429, 431, 433, 437, 438, 439, 440, 441, 446, 462, 464, 465, 467, 470, 471, 472, 475], "check_mx_vers": 13, "version": [13, 52, 103, 153, 158, 174, 185, 263, 264, 319, 397, 399, 403, 431, 435, 436, 438, 451, 453, 455, 456, 463, 470, 473, 474], "str": [13, 42, 139, 148, 150, 154, 155, 156, 158, 159, 160, 167, 174, 184, 185, 200, 201, 202, 209, 213, 217, 219, 223, 224, 244, 245, 246, 253, 256, 259, 263, 264, 267, 268, 270, 272, 274, 281, 292, 315, 318, 320, 321, 323, 325, 327, 346, 354, 356, 359, 360, 376, 379, 380, 385, 390, 393, 394, 421, 422, 437, 464, 471, 472], "mx": 13, "__version__": 13, "combine_cap": 13, "current": [13, 69, 103, 155, 170, 174, 176, 177, 184, 185, 276, 283, 284, 286, 287, 288, 297, 299, 306, 310, 365, 371, 393, 399, 400, 403, 405, 427, 431, 438, 441, 445, 458, 460, 462, 465, 470, 473], "new": [13, 16, 147, 155, 165, 190, 202, 217, 218, 234, 246, 259, 298, 338, 398, 404, 427, 438, 439, 452, 458, 459, 462, 463, 465, 467, 468, 469, 472, 474, 475], "combin": [13, 158, 184, 185, 188, 189, 213, 227, 232, 233, 256, 328, 361, 382, 393, 399, 403, 434, 438, 461, 463, 465, 466, 472, 473], "capabl": [13, 46, 316, 377, 404, 405, 420, 431, 438, 439, 449, 462, 464, 465, 473, 475], "contain": [13, 66, 67, 69, 73, 138, 147, 150, 158, 159, 165, 166, 174, 176, 177, 179, 180, 184, 185, 188, 189, 200, 201, 202, 232, 233, 244, 245, 246, 260, 264, 265, 270, 271, 272, 276, 289, 292, 294, 297, 298, 299, 300, 301, 302, 323, 324, 325, 328, 361, 382, 385, 392, 422, 425, 434, 437, 459, 462, 467, 471, 473, 474], "make_nc_model": 13, "target": [13, 42, 43, 101, 149, 174, 179, 180, 185, 298, 301, 306, 365, 422, 427, 438, 462, 471, 472, 473, 475], "sym_model": 13, "ctx": 13, "input_desc": 13, "convert": [13, 43, 47, 48, 49, 51, 52, 53, 54, 55, 65, 73, 85, 98, 99, 101, 102, 103, 104, 130, 135, 141, 148, 158, 174, 184, 185, 200, 213, 216, 217, 244, 256, 258, 259, 263, 270, 276, 298, 316, 323, 377, 380, 399, 404, 438, 439, 443, 465, 466, 470, 472, 473], "symbol": [13, 148, 156, 158, 267, 320, 328, 361, 399, 440], "model": [13, 15, 16, 29, 41, 42, 43, 44, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 115, 117, 139, 140, 141, 147, 148, 149, 150, 152, 154, 155, 156, 157, 158, 159, 163, 165, 166, 172, 174, 177, 179, 180, 184, 185, 188, 189, 196, 199, 200, 202, 217, 218, 221, 222, 229, 232, 233, 240, 243, 244, 246, 259, 260, 262, 263, 264, 265, 266, 274, 275, 276, 277, 280, 283, 284, 286, 287, 288, 289, 294, 298, 299, 300, 301, 302, 303, 306, 309, 311, 312, 319, 327, 328, 338, 354, 359, 360, 361, 362, 365, 366, 370, 372, 373, 379, 380, 382, 388, 390, 392, 393, 395, 399, 400, 402, 403, 405, 410, 420, 421, 422, 424, 425, 426, 427, 428, 433, 434, 436, 437, 439, 441, 446, 448, 449, 452, 458, 460, 461, 463, 465, 468, 469, 471, 472, 473, 474, 475], "an": [13, 66, 67, 69, 104, 140, 142, 150, 158, 164, 177, 184, 185, 193, 198, 202, 217, 221, 226, 237, 242, 246, 259, 266, 267, 271, 272, 280, 281, 303, 319, 320, 324, 325, 328, 355, 360, 361, 380, 382, 393, 395, 397, 399, 400, 402, 403, 405, 421, 422, 423, 424, 429, 437, 438, 439, 441, 445, 446, 449, 458, 460, 462, 463, 465, 469, 470, 471, 472, 473], "neural": [13, 150, 165, 166, 176, 184, 185, 212, 213, 214, 217, 218, 221, 224, 227, 256, 257, 259, 261, 266, 273, 274, 276, 289, 294, 297, 300, 302, 303, 308, 314, 319, 326, 327, 328, 332, 339, 361, 368, 369, 375, 390, 395, 398, 403, 404, 405, 420, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 436, 439, 440, 442, 443, 446, 448, 449, 451, 453, 455, 456, 457, 460, 461, 463, 465, 467, 468, 470, 471, 472, 473, 475, 476], "compressor": [13, 165, 166, 176, 184, 185, 212, 213, 214, 217, 218, 221, 224, 227, 256, 257, 259, 261, 266, 273, 274, 276, 297, 300, 302, 303, 308, 314, 319, 326, 327, 328, 332, 339, 361, 369, 375, 390, 395, 398, 400, 403, 404, 405, 420, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 436, 439, 440, 441, 442, 446, 448, 449, 451, 453, 455, 456, 457, 460, 461, 462, 463, 465, 467, 468, 470, 471, 472, 473, 474, 475, 476], "tupl": [13, 104, 147, 158, 185, 188, 189, 213, 217, 232, 233, 256, 259, 264, 315, 328, 361, 376, 382, 404, 422, 437, 438, 465, 472], "symnet": 13, "arg": [13, 52, 104, 200, 201, 202, 244, 245, 246, 297, 306, 365, 380, 388, 389, 422, 427, 438, 447, 465, 467, 470, 471, 472], "aux": 13, "data": [13, 42, 43, 54, 104, 139, 147, 150, 155, 158, 159, 163, 174, 184, 185, 188, 189, 218, 220, 232, 233, 264, 266, 306, 316, 318, 319, 328, 354, 359, 361, 365, 377, 379, 382, 385, 390, 393, 402, 403, 421, 422, 427, 431, 432, 435, 437, 438, 439, 465, 466, 468, 469, 470, 471, 472, 473, 474], "descript": [13, 131, 380, 398, 399, 404, 405, 421, 470], "ncmodel": 13, "fuse": [13, 57, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 90, 91, 92, 93, 95, 130, 135, 156, 158, 163, 399, 470, 471], "suppli": 13, "get_framework_nam": 13, "get": [13, 42, 44, 66, 67, 69, 103, 104, 147, 149, 155, 158, 159, 165, 170, 172, 174, 176, 177, 178, 179, 182, 185, 193, 217, 218, 224, 226, 237, 259, 264, 297, 299, 301, 309, 316, 318, 327, 336, 361, 370, 377, 379, 385, 393, 404, 430, 434, 435, 438, 444, 463, 467, 470, 473, 474, 477], "name": [13, 43, 44, 52, 66, 67, 69, 103, 104, 109, 115, 139, 147, 148, 149, 150, 155, 156, 158, 159, 160, 165, 170, 174, 176, 177, 178, 179, 182, 184, 185, 200, 201, 202, 205, 209, 215, 217, 218, 222, 225, 226, 244, 245, 246, 249, 253, 259, 262, 263, 264, 269, 274, 292, 297, 299, 301, 316, 318, 322, 327, 332, 336, 338, 361, 377, 379, 383, 385, 393, 399, 404, 405, 422, 424, 427, 429, 431, 436, 437, 438, 440, 444, 451, 455, 459, 462, 465, 468, 469, 471, 473, 475, 476], "context": [13, 393, 464, 467], "prepare_model_data": 13, "nc_model": [13, 289, 294], "data_x": 13, "prepar": [13, 158, 399, 402, 422, 427, 432, 465], "dataload": [13, 15, 42, 139, 140, 149, 150, 155, 158, 159, 165, 172, 174, 188, 189, 200, 211, 221, 232, 233, 244, 255, 260, 266, 289, 294, 303, 319, 354, 359, 361, 382, 385, 399, 402, 403, 404, 424, 425, 426, 427, 432, 433, 438, 439, 461, 465, 466, 470, 471, 472, 474, 475], "need": [13, 42, 104, 108, 155, 159, 165, 174, 185, 188, 189, 190, 198, 199, 202, 209, 217, 220, 222, 223, 232, 233, 234, 242, 243, 246, 253, 259, 264, 303, 309, 327, 328, 338, 361, 370, 382, 392, 393, 399, 403, 421, 422, 424, 425, 427, 434, 438, 441, 443, 444, 447, 451, 452, 453, 455, 456, 458, 459, 462, 464, 465, 466, 467, 468, 470, 472, 473, 475], "run": [13, 139, 147, 159, 165, 177, 180, 184, 185, 188, 189, 199, 216, 218, 232, 233, 243, 258, 298, 299, 306, 328, 361, 365, 382, 398, 403, 420, 427, 430, 431, 438, 441, 443, 445, 446, 447, 449, 451, 452, 453, 455, 456, 458, 463, 465, 468, 469, 471, 473, 475], "loader": [13, 139, 188, 189, 232, 233, 328, 361, 382, 388, 421, 465], "dataloaderwrap": 13, "prepare_model": 13, "create_data_exampl": 13, "creat": [13, 16, 104, 184, 185, 190, 200, 202, 220, 234, 244, 246, 270, 280, 281, 316, 323, 355, 360, 377, 379, 380, 385, 397, 400, 403, 422, 440, 451, 453, 455, 456, 459, 465, 469, 471, 473, 474], "exampl": [13, 150, 158, 159, 165, 174, 175, 184, 185, 200, 201, 202, 213, 217, 244, 245, 246, 256, 259, 270, 271, 272, 274, 300, 323, 324, 325, 327, 328, 338, 361, 379, 380, 382, 397, 398, 402, 404, 405, 410, 433, 434, 441, 444, 445, 446, 449, 466, 468, 472, 473, 474, 477], "prepare_dataload": 13, "io": 13, "ndarray_to_devic": 13, "ndarrai": [13, 42, 43, 66, 67, 69, 217, 259, 383, 430, 472], "devic": [13, 78, 88, 89, 90, 91, 92, 93, 96, 106, 130, 135, 146, 149, 159, 174, 175, 184, 185, 404, 421, 425, 438, 439, 441, 444, 449, 458, 464, 467], "is_model_quant": 13, "query_quantizable_nod": 13, "node": [13, 42, 43, 49, 52, 53, 54, 55, 59, 61, 63, 66, 67, 69, 73, 76, 79, 81, 82, 83, 97, 101, 102, 104, 109, 131, 139, 147, 174, 262, 264, 336, 360, 403, 404, 424, 427, 471, 473, 476], "given": [13, 16, 66, 67, 69, 103, 104, 115, 147, 158, 217, 259, 270, 323, 361, 400, 405, 462, 470, 472], "map": [13, 43, 104, 147, 185, 217, 259, 262, 264, 265, 269, 271, 272, 274, 289, 294, 299, 302, 322, 324, 325, 327, 422, 427, 437, 438, 451, 455, 462, 465, 467], "quantize_sym_model": 13, "qconfig": [13, 158, 467, 471], "accord": [13, 121, 158, 165, 184, 185, 200, 201, 202, 217, 244, 245, 246, 259, 309, 368, 370, 385, 400, 403, 422, 427, 462, 466, 470, 472, 473], "run_forward": 13, "b_filter": 13, "collector": [13, 150, 383], "pre_batch": 13, "post_batch": 13, "forward": [13, 402, 404, 438, 462, 464, 465, 467, 470, 471], "propag": [13, 99], "filter": [13, 200, 201, 202, 203, 204, 205, 207, 211, 244, 245, 246, 247, 248, 249, 251, 255, 266, 319, 393, 405, 422, 434, 462, 471], "which": [13, 42, 54, 82, 109, 149, 150, 155, 170, 174, 175, 176, 177, 179, 180, 184, 185, 200, 201, 202, 213, 218, 244, 245, 246, 256, 267, 272, 281, 283, 284, 286, 287, 288, 292, 297, 298, 299, 301, 306, 320, 325, 327, 332, 338, 361, 365, 393, 397, 399, 400, 403, 404, 405, 421, 422, 424, 425, 427, 430, 431, 434, 437, 438, 439, 440, 442, 446, 449, 452, 458, 459, 461, 462, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475], "batch": [13, 158, 190, 192, 193, 198, 199, 220, 234, 236, 237, 242, 243, 382, 421, 425, 426, 438, 461, 462, 472, 473, 476], "infer": [13, 104, 159, 174, 265, 302, 336, 338, 361, 382, 403, 404, 425, 426, 438, 439, 458, 460, 462, 463, 465, 467, 470, 471, 473], "collect": [13, 16, 43, 158, 215, 217, 220, 222, 223, 225, 259, 272, 274, 325, 327, 383, 393, 404, 465, 471, 473], "inform": [13, 150, 170, 174, 176, 177, 178, 179, 180, 185, 188, 189, 220, 222, 223, 232, 233, 297, 299, 300, 301, 303, 327, 393, 397, 398, 401, 402, 403, 404, 405, 406, 408, 412, 415, 418, 425, 431, 438, 440, 453, 456, 459, 462, 466, 468, 471, 475, 476, 477], "dure": [13, 139, 176, 179, 184, 185, 297, 301, 338, 393, 404, 424, 438, 440, 460, 461, 462, 465, 470, 471, 475], "call": [13, 42, 155, 160, 174, 177, 270, 299, 323, 399, 400, 403, 421, 433, 447, 449, 459, 465, 470, 471, 472], "prior": [13, 87, 473], "after": [13, 77, 158, 172, 176, 177, 184, 185, 200, 213, 217, 220, 244, 256, 259, 299, 366, 380, 393, 400, 404, 422, 424, 425, 426, 429, 434, 437, 438, 451, 452, 455, 459, 460, 461, 462, 465, 466, 469, 470, 471, 472, 473], "count": [13, 400, 422, 467], "int": [13, 16, 42, 43, 104, 139, 147, 154, 158, 159, 172, 184, 185, 199, 200, 201, 213, 217, 243, 244, 245, 256, 259, 263, 264, 268, 270, 274, 281, 321, 323, 327, 346, 355, 360, 379, 380, 393, 421, 422, 437, 438, 464, 472], "make_symbol_block": 13, "gluon": [13, 328, 361, 440], "symbolblock": 13, "make_modul": 13, "parse_tune_config": 13, "tune_cfg": [13, 147, 148, 158, 403, 405, 473], "quantizable_nod": 13, "strategi": [13, 158, 177, 184, 185, 186, 202, 230, 246, 266, 319, 402, 403, 404, 405, 410, 421, 427, 434, 438, 446, 458, 463, 464, 465, 466, 468, 474, 475], "config": [13, 114, 115, 117, 121, 158, 165, 170, 172, 176, 177, 178, 179, 180, 184, 188, 189, 200, 229, 232, 233, 244, 283, 284, 286, 287, 288, 289, 294, 297, 298, 299, 300, 301, 316, 317, 319, 328, 355, 360, 377, 378, 379, 380, 382, 385, 392, 393, 400, 402, 404, 405, 410, 420, 421, 424, 425, 426, 427, 429, 432, 434, 437, 438, 439, 440, 461, 462, 464, 465, 466, 467, 469, 471, 473], "tune": [13, 44, 165, 184, 185, 188, 189, 200, 202, 232, 233, 244, 246, 265, 302, 304, 305, 306, 307, 309, 310, 311, 312, 315, 316, 317, 318, 328, 338, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 376, 377, 378, 379, 382, 393, 403, 404, 421, 422, 424, 427, 434, 436, 438, 439, 458, 460, 462, 463, 466, 467, 468, 469, 471, 475], "from": [13, 43, 44, 60, 66, 67, 69, 104, 147, 155, 158, 165, 166, 167, 170, 176, 177, 178, 179, 180, 184, 185, 188, 189, 190, 193, 197, 200, 201, 202, 203, 204, 205, 207, 212, 213, 219, 220, 223, 232, 233, 234, 237, 241, 244, 245, 246, 247, 248, 249, 251, 256, 260, 262, 263, 264, 267, 270, 271, 272, 276, 281, 297, 298, 299, 301, 316, 318, 320, 323, 324, 325, 328, 336, 338, 361, 377, 379, 380, 382, 385, 392, 393, 397, 399, 400, 403, 405, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 432, 434, 437, 439, 440, 441, 445, 446, 447, 449, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474], "distribute_calib_tensor": 13, "calib_tensor": 13, "calib_cfg": 13, "tensor_to_nod": 13, "distribut": [13, 16, 142, 164, 184, 185, 190, 192, 193, 195, 196, 197, 198, 199, 220, 234, 236, 237, 239, 240, 241, 242, 243, 387, 402, 404, 421, 425, 435, 453, 456, 463, 465, 467, 468, 470, 474, 476], "depend": [13, 188, 189, 218, 232, 233, 328, 361, 382, 398, 430, 431, 464, 465, 473], "algorithm": [13, 149, 158, 181, 267, 274, 282, 319, 320, 327, 385, 387, 400, 403, 404, 405, 425, 426, 431, 434, 447, 452, 462, 465, 467, 471, 475], "set": [13, 43, 56, 95, 104, 114, 147, 155, 158, 165, 180, 182, 184, 185, 188, 189, 190, 200, 202, 205, 217, 218, 223, 224, 232, 233, 234, 244, 246, 249, 259, 270, 276, 289, 294, 298, 303, 323, 327, 328, 336, 360, 361, 380, 382, 390, 393, 397, 400, 404, 420, 421, 422, 425, 427, 429, 431, 433, 434, 435, 437, 438, 439, 441, 443, 445, 459, 462, 464, 465, 469, 470, 473, 475], "kl": [13, 16, 184, 185, 383, 387, 404, 405, 431, 438, 473, 475], "minmax": [13, 16, 404, 405, 431, 465, 475], "calib_model": 13, "qsym_model": 13, "calib_data": 13, "calibdata": 13, "threshold": [13, 161, 383, 387, 437], "amp_convert": 13, "amp_cfg": 13, "support": [13, 42, 43, 96, 103, 155, 163, 167, 176, 177, 184, 185, 188, 189, 199, 200, 202, 209, 213, 217, 219, 220, 221, 224, 229, 232, 233, 243, 244, 246, 253, 256, 259, 266, 274, 276, 281, 297, 299, 303, 310, 316, 319, 327, 328, 332, 338, 361, 371, 377, 380, 382, 385, 387, 393, 395, 402, 404, 438, 441, 446, 449, 452, 458, 463, 466, 469, 473, 474], "amp": [13, 441, 448], "wrap": [13, 104, 115, 167, 219, 270, 323, 399, 427, 453, 456], "dataiterload": 13, "data_it": [13, 174], "collectorbas": 13, "calibcollector": 13, "include_tensors_kl": 13, "include_tensors_minmax": 13, "num_bin": [13, 16, 383], "8001": [13, 383], "tensorcollector": 13, "include_nod": 13, "qtensor_to_tensor": 13, "build": [13, 42, 114, 160, 161, 163, 164, 177, 277, 280, 331, 333, 335, 336, 337, 403, 404, 405, 435, 440, 451, 453, 455, 456, 459, 463, 469, 473], "up": [13, 99, 177, 217, 259, 298, 427, 428, 431, 434, 449, 453, 456, 458, 463, 464, 465, 469, 472, 473, 475], "namecollector": 13, "cache_kl": 13, "cache_minmax": 13, "tensors_kl": 13, "tensors_minmax": 13, "onnxruntimeadaptor": 14, "rt": 14, "onnxrt_qlinearopsadaptor": [14, 403], "onnxrt_integeropsadaptor": 14, "onnxrt_qdqadaptor": 14, "onnxrtqueri": 14, "dynam": [14, 185, 190, 234, 264, 316, 377, 402, 403, 421, 425, 429, 434, 438, 441, 446, 447, 448, 449, 452, 458, 463, 473, 476], "static": [14, 41, 42, 46, 155, 163, 174, 185, 264, 316, 361, 377, 403, 404, 405, 424, 429, 434, 438, 441, 446, 447, 448, 449, 452, 458, 470, 473, 476], "format": [14, 18, 43, 52, 147, 184, 185, 200, 201, 202, 244, 245, 246, 264, 270, 276, 316, 323, 377, 380, 404, 405, 422, 427, 429, 437, 438, 439, 440, 441, 465, 468], "onnxrtaug": 15, "dump_op_typ": 15, "black_nod": [15, 139], "white_nod": 15, "cpuexecutionprovid": [15, 41, 42, 439, 465], "reduce_rang": [15, 41, 42, 184, 185, 405, 464], "augment": 15, "dump": [15, 158, 165, 264, 393, 465, 468, 471], "calib_registri": 16, "calib_method": 16, "calibratorbas": 16, "minmaxcalibr": 16, "percentilecalibr": 16, "2048": [16, 393], "percentil": [16, 139, 159], "99": [16, 470, 476], "999": [16, 475], "option": [16, 104, 159, 176, 184, 185, 188, 189, 200, 217, 232, 233, 244, 259, 263, 264, 270, 276, 297, 303, 316, 319, 323, 327, 328, 361, 377, 379, 380, 382, 386, 393, 404, 405, 421, 422, 431, 435, 438, 452, 462, 465, 467, 469, 472, 473, 475], "number": [16, 66, 67, 104, 139, 158, 159, 172, 176, 184, 185, 198, 201, 213, 217, 242, 245, 256, 259, 271, 272, 274, 297, 306, 324, 325, 327, 355, 360, 365, 380, 385, 393, 420, 421, 422, 427, 437, 462, 465, 467, 469, 472, 473], "bin": [16, 393, 430], "histogram": [16, 383, 393, 471], "valu": [16, 43, 54, 66, 67, 69, 88, 89, 104, 142, 147, 158, 164, 165, 170, 174, 175, 177, 180, 182, 184, 185, 188, 189, 200, 203, 204, 213, 217, 218, 232, 233, 244, 247, 248, 256, 259, 270, 274, 298, 306, 309, 316, 323, 327, 328, 361, 365, 370, 377, 379, 380, 382, 383, 385, 393, 399, 404, 405, 422, 424, 431, 437, 438, 439, 444, 460, 462, 464, 465, 467, 468, 470, 472, 473, 475], "default": [16, 96, 147, 159, 180, 182, 184, 185, 188, 189, 192, 200, 201, 202, 213, 217, 232, 233, 236, 244, 245, 246, 256, 259, 263, 264, 267, 276, 298, 318, 320, 327, 336, 379, 385, 393, 399, 403, 421, 422, 431, 434, 435, 437, 438, 439, 446, 449, 451, 455, 460, 462, 464, 465, 466, 467, 469, 470, 472, 473, 475], "float": [16, 43, 139, 140, 150, 159, 176, 177, 178, 180, 184, 185, 200, 213, 244, 256, 268, 270, 271, 272, 299, 321, 323, 324, 325, 380, 390, 393, 422, 437, 464, 465, 470, 472], "A": [16, 53, 73, 74, 102, 115, 139, 140, 147, 158, 159, 166, 170, 174, 176, 177, 178, 179, 180, 184, 185, 202, 217, 220, 222, 223, 229, 246, 259, 260, 267, 270, 271, 272, 274, 277, 280, 281, 282, 289, 292, 294, 297, 298, 299, 300, 301, 306, 320, 323, 324, 325, 327, 328, 332, 336, 365, 382, 393, 402, 404, 421, 422, 428, 431, 437, 438, 440, 451, 452, 455, 458, 462, 463, 465, 467, 470, 472, 473, 475], "between": [16, 42, 142, 164, 177, 184, 185, 217, 259, 271, 274, 324, 327, 355, 360, 393, 399, 403, 404, 405, 424, 425, 434, 437, 438, 449, 465, 468, 469, 470, 472, 473], "0": [16, 43, 52, 89, 104, 147, 158, 159, 161, 163, 167, 172, 184, 185, 190, 192, 195, 196, 197, 199, 200, 203, 204, 207, 213, 217, 219, 220, 234, 236, 239, 240, 241, 243, 244, 247, 248, 251, 256, 259, 264, 265, 274, 281, 289, 294, 302, 327, 338, 361, 366, 380, 399, 421, 422, 425, 427, 429, 430, 431, 435, 436, 437, 438, 439, 444, 446, 451, 455, 462, 464, 465, 467, 468, 469, 470, 471, 472, 473, 475], "100": [16, 165, 184, 185, 202, 246, 380, 420, 422, 427, 433, 438, 464, 465, 470, 472, 473, 475, 476], "klcalibr": 16, "128": [16, 158, 159, 200, 203, 204, 217, 244, 247, 248, 259, 422, 438, 465, 472], "num_quantized_bin": 16, "histogramcollector": 16, "collctor": 16, "smooth_distribut": 16, "p": [16, 459, 467], "ep": [16, 164, 439], "0001": [16, 184, 185, 425, 438, 464], "smooth": [16, 139, 140, 147, 155, 163, 184, 185, 315, 462], "discret": [16, 473], "mai": [16, 147, 283, 284, 286, 287, 288, 380, 397, 398, 404, 424, 429, 430, 436, 439, 451, 455, 463, 465, 473], "have": [16, 73, 82, 140, 147, 175, 176, 177, 198, 220, 242, 267, 270, 297, 299, 320, 323, 327, 361, 379, 380, 397, 398, 404, 405, 421, 422, 424, 427, 431, 436, 437, 438, 439, 441, 458, 460, 462, 465, 467, 470, 473, 474], "been": [16, 176, 177, 267, 297, 299, 320, 398, 400, 405, 425, 438, 439, 458, 467, 470], "normal": [16, 33, 217, 259, 272, 325, 438, 460, 467, 470, 472], "1": [16, 42, 43, 53, 73, 88, 104, 108, 112, 145, 147, 153, 155, 158, 159, 161, 163, 164, 165, 167, 177, 184, 185, 190, 192, 195, 196, 197, 199, 200, 201, 203, 204, 207, 208, 213, 217, 218, 219, 220, 234, 236, 239, 240, 241, 243, 244, 245, 247, 248, 251, 252, 256, 259, 265, 270, 271, 272, 274, 289, 294, 299, 302, 303, 323, 324, 325, 327, 338, 361, 379, 380, 385, 397, 399, 402, 403, 405, 421, 422, 424, 425, 429, 431, 432, 435, 437, 439, 442, 444, 460, 461, 462, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475], "replac": [16, 155, 159, 272, 325, 427, 438, 449, 468], "zero": [16, 43, 149, 177, 180, 217, 259, 299, 393, 402, 462, 465, 470, 472, 473], "multipli": 16, "scale": [16, 43, 99, 140, 142, 149, 153, 155, 157, 158, 159, 163, 164, 213, 217, 256, 259, 465, 467, 469, 470, 472, 473], "factor": [16, 140, 467, 470, 476], "take": [16, 176, 185, 188, 189, 193, 217, 222, 232, 233, 237, 259, 297, 306, 327, 328, 361, 365, 382, 397, 399, 400, 421, 424, 425, 431, 438, 458, 462, 465, 466, 472, 473, 475], "correspond": [16, 150, 174, 177, 184, 185, 200, 244, 267, 270, 274, 320, 323, 327, 385, 393, 403, 431, 438, 462, 464, 465, 469, 470, 473], "amount": 16, "off": [16, 66, 67, 69, 398, 467], "non": [16, 298, 393, 399, 424, 473], "ref": [16, 147], "http": [16, 149, 150, 170, 176, 177, 200, 202, 244, 246, 267, 268, 270, 271, 272, 297, 299, 300, 320, 321, 323, 324, 325, 327, 361, 399, 402, 422, 424, 432, 435, 436, 438, 447, 453, 456, 468], "hanj": 16, "c": [16, 73, 202, 246, 422, 430, 435, 467, 473], "illinoi": 16, "edu": [16, 202, 246, 422], "cs412": 16, "bk3": 16, "diverg": [16, 383, 387, 405, 425, 473], "pdf": 16, "github": [16, 150, 176, 200, 244, 267, 268, 271, 272, 297, 300, 320, 321, 324, 325, 327, 361, 398, 422, 424, 428, 435, 436, 438, 447, 453, 456, 468], "com": [16, 150, 176, 200, 244, 267, 268, 271, 272, 297, 300, 320, 321, 324, 325, 327, 361, 397, 402, 422, 424, 432, 435, 436, 438, 441, 447, 468, 469, 476], "apach": [16, 436], "incub": 16, "blob": [16, 150, 176, 267, 268, 271, 272, 297, 320, 321, 324, 325, 327, 361, 438, 447], "master": [16, 176, 267, 268, 271, 272, 297, 300, 320, 321, 324, 325, 327, 361, 438, 473], "python": [16, 74, 147, 202, 221, 246, 266, 319, 380, 393, 395, 398, 399, 422, 424, 427, 430, 435, 438, 443, 449, 452, 458, 463, 472], "contrib": [16, 266, 319], "py": [16, 147, 150, 165, 177, 184, 185, 268, 270, 271, 272, 299, 321, 323, 324, 325, 380, 399, 403, 424, 427, 435, 438, 443, 445, 446, 447, 453, 456, 465, 468, 471], "microsoft": [16, 403], "onnxruntim": [16, 184, 185, 196, 202, 209, 240, 246, 253, 275, 355, 403, 421, 434, 435, 439, 464], "main": [16, 149, 177, 224, 300, 399, 421, 424, 427, 438, 445, 447, 459, 462, 465, 467], "tool": [16, 147, 263, 393, 402, 403, 438, 451, 455, 462, 463, 465], "arrai": [16, 43, 147, 217, 259, 270, 281, 323, 393, 472], "small": [16, 66, 67, 68, 368, 400, 462, 467, 473, 476], "probabl": [16, 184, 185, 387, 467], "activationoper": 18, "onnx_quant": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "onnx_nod": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 86, 100, 110], "removableactivationoper": 18, "remov": [18, 43, 55, 56, 59, 73, 79, 82, 83, 84, 95, 97, 139, 172, 177, 272, 325, 397, 398, 438, 451, 455, 462, 471], "qactivationoper": 18, "children": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39], "initi": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 42, 43, 104, 115, 147, 167, 177, 188, 189, 197, 200, 219, 232, 233, 241, 244, 298, 299, 316, 361, 377, 382, 400, 405, 422, 437, 457, 462, 465, 470, 473], "qoper": [18, 34, 184, 185, 429], "float16activationoper": 18, "float16": [18, 21, 43, 422], "argmaxoper": 19, "qargmaxoper": 19, "attentionoper": 20, "qattentionoper": 20, "qattent": 20, "binari": [21, 147, 274, 327, 430, 437, 453, 456, 468], "binaryoper": 21, "qbinaryoper": 21, "qbinari": 21, "float16binaryoper": 21, "concatoper": 22, "qconcatoper": 22, "qconcat": 22, "convoper": 23, "qconvoper": 23, "qlinearconv": 23, "direct8bit": 24, "direct8bitoper": 24, "qdirectoper": 24, "qdirect": 24, "embedlayernorm": 25, "embedlayernormalizationoper": 25, "qembedlayernormalizationoper": 25, "qembedlayernorm": 25, "gatheroper": 26, "qgatheroper": 26, "qgather": 26, "globalaveragepool": 27, "globalaveragepooloper": 27, "qglobalaveragepooloper": 27, "qlinearglobalaveragepool": 27, "gemmoper": 28, "qgemmoper": 28, "qgemm": 28, "lstmoper": 30, "matmuloper": 31, "qmatmuloper": 31, "qlinearmatmul": 31, "fusedmatmuloper": 31, "fusedmatmul": 31, "maxpooloper": 32, "qmaxpooloper": 32, "qmaxpool": 32, "batchnormalizationoper": 33, "batchnorm": [33, 61, 66, 120, 399, 470], "normalizationoper": 33, "op_registri": 34, "op_typ": [34, 139, 147, 317, 378], "qop_registri": 34, "padoper": 35, "qpadoper": 35, "qpad": 35, "averagepool": 36, "pooloper": 36, "qpooloper": 36, "qlinearaveragepool": 36, "reduceoper": 37, "resizeoper": 38, "qresizeoper": 38, "qresiz": 38, "splitoper": 39, "qsplitoper": 39, "qsplit": 39, "unari": 40, "unaryoper": 40, "q_config": [41, 158, 264, 403], "mode": [41, 42, 43, 44, 109, 155, 209, 253, 270, 316, 323, 336, 377, 390, 393, 403, 404, 424, 434, 451, 455, 465, 466, 473], "quantization_param": 41, "op_types_to_quant": 41, "fallback_list": 41, "fp32": [41, 42, 78, 130, 135, 142, 158, 159, 164, 184, 185, 188, 189, 232, 233, 263, 264, 274, 309, 316, 327, 366, 370, 377, 385, 392, 393, 402, 403, 405, 424, 431, 432, 437, 438, 439, 448, 464, 465, 466, 468, 469, 470, 471, 473, 475, 476], "add_qdq_pair_to_weight": [41, 184, 185, 465], "optypes_to_exclude_output_qu": [41, 184, 185, 465], "dedicated_qdq_pair": [41, 184, 185, 465], "smoothquant": [42, 155, 158, 163, 402, 463, 467, 474], "onnxrt": [42, 43, 200, 202, 209, 217, 244, 246, 253, 259, 274, 327, 354, 391, 403, 424, 439, 465, 476], "get_quant_dequant_output": 42, "input_data": [42, 421], "output_data": 42, "loss": [42, 167, 184, 185, 219, 265, 274, 289, 294, 302, 327, 382, 424, 425, 426, 427, 428, 437, 438, 439, 449, 461, 462, 465, 467, 470, 473, 475], "output": [42, 43, 52, 56, 58, 73, 97, 104, 109, 147, 158, 159, 174, 175, 176, 182, 184, 185, 188, 189, 222, 226, 232, 233, 263, 264, 267, 297, 320, 327, 328, 336, 361, 382, 388, 389, 393, 399, 403, 404, 425, 426, 427, 429, 431, 433, 437, 438, 440, 449, 458, 459, 461, 462, 464, 465, 467, 468, 470, 471, 472, 473, 475], "numpi": [42, 43, 66, 67, 69, 104, 147, 217, 259, 270, 281, 323, 430, 472], "7": [42, 159, 165, 184, 185, 338, 405, 420, 430, 431, 435, 438, 462, 465, 468, 470, 473, 476], "bit": [42, 158, 159, 184, 185, 379, 405, 426, 439, 463, 465, 467, 470], "execut": [42, 43, 52, 149, 165, 177, 184, 185, 299, 303, 305, 360, 361, 362, 364, 382, 385, 392, 393, 424, 425, 426, 438, 439, 443, 444, 451, 452, 455, 458, 459, 461, 462, 465, 469, 473, 476], "provid": [42, 43, 101, 104, 109, 174, 188, 189, 217, 232, 233, 259, 265, 270, 289, 294, 302, 303, 323, 328, 361, 382, 386, 388, 400, 402, 403, 404, 405, 420, 421, 424, 426, 427, 428, 434, 435, 437, 438, 439, 440, 441, 445, 449, 452, 458, 459, 462, 464, 465, 471, 473, 474, 475, 476], "make_sub_graph": 42, "opset": [42, 101, 103, 104, 185, 263, 264, 429], "ir_vers": 42, "thi": [42, 44, 85, 109, 131, 138, 142, 146, 150, 158, 159, 164, 166, 172, 174, 176, 177, 178, 179, 184, 185, 188, 189, 199, 200, 201, 202, 203, 204, 205, 207, 217, 220, 226, 227, 232, 233, 243, 244, 245, 246, 247, 248, 249, 251, 259, 267, 270, 271, 272, 274, 283, 284, 286, 287, 288, 289, 294, 297, 299, 301, 302, 303, 306, 309, 320, 323, 324, 325, 327, 328, 338, 361, 365, 370, 379, 380, 382, 392, 393, 397, 398, 399, 400, 403, 404, 405, 421, 422, 425, 426, 427, 429, 430, 431, 434, 436, 437, 438, 439, 440, 441, 443, 444, 446, 447, 449, 451, 453, 455, 456, 457, 458, 459, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474], "quant_dequant_data": 42, "qtype": [42, 43, 403], "3": [42, 147, 177, 185, 202, 217, 246, 259, 270, 323, 380, 399, 400, 402, 421, 422, 425, 427, 429, 431, 432, 435, 437, 438, 439, 441, 445, 449, 451, 455, 460, 464, 465, 467, 468, 469, 470, 472, 473, 476], "scheme": [42, 43, 158, 159, 403, 404, 405, 421, 431, 449, 467, 473, 475], "sym": [42, 43, 159, 404, 405, 431, 465, 467, 475], "dequant": [42, 43, 56, 87, 90, 91, 92, 93, 95, 150, 158, 159, 393, 399, 404, 470, 471], "asym": [42, 43, 158, 159, 405, 431, 467, 475], "ortsmoothqu": 42, "fake": [42, 112, 153, 155, 159, 163, 379, 438, 465, 467, 470], "channel": [42, 43, 142, 155, 159, 163, 164, 172, 175, 176, 184, 185, 213, 217, 256, 259, 297, 403, 405, 434, 435, 441, 443, 448, 462, 467, 472, 476], "For": [42, 159, 163, 174, 175, 176, 185, 202, 217, 246, 259, 271, 272, 274, 297, 300, 324, 325, 327, 328, 361, 397, 399, 401, 403, 405, 425, 426, 427, 429, 431, 434, 441, 443, 444, 446, 449, 462, 466, 470, 471, 473, 475, 476], "more": [42, 147, 155, 163, 176, 217, 259, 297, 400, 401, 402, 404, 422, 425, 427, 429, 432, 434, 435, 438, 439, 441, 449, 453, 456, 460, 461, 462, 466, 467, 470, 473, 474, 476], "detail": [42, 155, 163, 174, 217, 259, 393, 394, 397, 398, 402, 404, 405, 425, 431, 432, 433, 437, 438, 439, 441, 449, 458, 462, 468, 469, 471, 473, 474], "pleas": [42, 149, 150, 155, 163, 170, 176, 177, 184, 185, 200, 201, 202, 205, 244, 245, 246, 249, 297, 299, 300, 327, 361, 380, 399, 400, 401, 402, 403, 420, 422, 426, 427, 429, 435, 437, 439, 441, 442, 446, 449, 462, 465, 466, 468, 469, 470, 474], "refer": [42, 149, 150, 155, 163, 170, 176, 177, 180, 184, 185, 200, 244, 267, 268, 274, 297, 299, 300, 320, 321, 327, 361, 380, 399, 403, 404, 420, 421, 422, 424, 426, 427, 429, 433, 435, 436, 437, 438, 439, 441, 446, 449, 460, 464, 468, 472, 473], "accur": [42, 149, 155, 163, 467, 470], "effici": [42, 155, 163, 400, 421, 425, 441, 461, 463, 467, 470, 473], "post": [42, 96, 97, 149, 155, 163, 177, 185, 188, 189, 232, 233, 361, 397, 402, 403, 404, 424, 426, 427, 429, 434, 435, 441, 447, 458, 462, 463, 467, 470, 471, 473], "train": [42, 55, 79, 149, 155, 163, 166, 177, 184, 185, 188, 189, 200, 202, 217, 227, 232, 233, 244, 246, 259, 260, 276, 299, 319, 361, 385, 400, 402, 403, 404, 410, 422, 424, 425, 426, 429, 434, 439, 441, 447, 458, 461, 462, 463, 467, 469, 470, 473, 475], "larg": [42, 155, 163, 402, 421, 425, 438, 462, 463, 467, 470, 476], "languag": [42, 155, 163, 267, 320, 397, 429, 462, 463, 467, 470], "2": [42, 43, 52, 73, 104, 108, 155, 159, 161, 163, 165, 176, 177, 184, 185, 201, 218, 245, 270, 272, 274, 299, 306, 323, 325, 327, 338, 365, 380, 399, 403, 421, 422, 424, 425, 431, 434, 435, 436, 437, 439, 460, 462, 465, 467, 468, 469, 470, 472, 473, 474], "spiq": [42, 155, 163, 470], "free": [42, 155, 163, 177, 188, 189, 232, 233, 361, 397, 402, 447, 452, 460, 469, 470], "per": [42, 43, 155, 159, 163, 165, 184, 185, 218, 387, 403, 405, 421, 466, 467, 476], "we": [42, 43, 66, 67, 69, 73, 85, 142, 155, 163, 164, 165, 174, 176, 177, 184, 185, 199, 218, 220, 243, 267, 270, 320, 323, 368, 397, 399, 403, 404, 405, 421, 424, 427, 429, 431, 437, 438, 445, 446, 449, 453, 456, 458, 459, 460, 461, 462, 464, 465, 467, 468, 469, 470, 471, 473, 474], "onli": [42, 52, 62, 69, 85, 108, 114, 142, 155, 157, 159, 163, 164, 165, 176, 177, 184, 185, 200, 218, 220, 224, 244, 264, 276, 297, 299, 310, 361, 371, 379, 380, 393, 402, 403, 404, 405, 420, 421, 424, 425, 427, 430, 431, 438, 439, 446, 459, 462, 463, 464, 465, 470, 471, 473, 474, 475], "inplac": [42, 155], "mean": [42, 155, 176, 177, 184, 185, 213, 217, 256, 259, 272, 274, 297, 309, 325, 327, 370, 399, 404, 405, 421, 424, 427, 431, 437, 438, 444, 462, 465, 470, 472, 473, 475], "weight": [42, 43, 59, 60, 121, 140, 142, 147, 150, 155, 157, 158, 159, 164, 170, 175, 176, 177, 178, 184, 185, 264, 297, 299, 316, 327, 361, 368, 377, 379, 393, 394, 402, 403, 404, 405, 424, 426, 431, 433, 438, 460, 462, 464, 465, 470, 471, 473, 474, 475], "chang": [42, 95, 142, 155, 164, 177, 179, 184, 185, 299, 301, 368, 393, 398, 404, 421, 427, 430, 436, 438, 441, 451, 452, 455, 458, 462, 471, 472, 473], "you": [42, 155, 184, 185, 198, 200, 242, 244, 299, 327, 361, 398, 399, 404, 421, 422, 424, 427, 435, 436, 437, 439, 441, 443, 444, 446, 451, 455, 458, 459, 462, 465, 468, 469, 470, 471, 474], "can": [42, 142, 150, 155, 164, 174, 175, 176, 177, 179, 184, 185, 188, 189, 199, 202, 217, 218, 220, 232, 233, 243, 246, 259, 270, 272, 274, 297, 299, 301, 323, 325, 327, 328, 338, 361, 382, 393, 399, 400, 402, 403, 404, 405, 420, 421, 422, 424, 425, 426, 427, 429, 431, 434, 435, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 449, 451, 452, 453, 455, 456, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476], "recov": [42, 155, 393, 403, 426, 470], "helper": [43, 44, 109, 115, 147, 158, 200, 201, 202, 216, 244, 245, 246, 258, 262, 263, 264, 336, 391], "dtype_to_nam": 43, "dtype_map": 43, "dtype": [43, 101, 104, 184, 185, 203, 204, 213, 217, 247, 248, 256, 259, 404, 405, 422, 424, 429, 431, 441, 464, 465, 470, 471, 472, 475], "its": [43, 59, 95, 147, 150, 174, 177, 185, 196, 202, 217, 240, 246, 259, 262, 268, 269, 299, 306, 321, 322, 365, 397, 422, 425, 436, 437, 439, 449, 451, 455, 458, 459, 462, 467, 469, 472, 473], "string": [43, 44, 115, 147, 149, 165, 167, 174, 176, 177, 178, 179, 180, 181, 184, 185, 202, 219, 224, 246, 260, 265, 267, 270, 276, 277, 278, 280, 281, 289, 294, 297, 298, 299, 300, 301, 302, 320, 323, 332, 336, 385, 390, 393, 437, 470, 472], "represent": [43, 397, 399, 426, 462, 465], "quanttyp": [43, 379], "repres": [43, 176, 177, 178, 180, 202, 207, 246, 251, 270, 272, 274, 323, 325, 327, 397, 405, 422, 429, 462, 465, 473], "make_quant_nod": 43, "make": [43, 104, 142, 164, 176, 177, 179, 198, 242, 297, 299, 301, 393, 397, 398, 403, 404, 420, 421, 431, 437, 438, 446, 451, 455, 458, 465, 466, 467, 469, 470, 473], "quantizelinear": 43, "make_dquant_nod": 43, "axi": [43, 185], "dequantizelinear": 43, "is_b_transpos": 43, "wheter": 43, "inuput": 43, "b": [43, 73, 200, 244, 422, 437, 462, 467, 470, 473], "transpos": [43, 72, 176, 213, 217, 259, 263, 297, 472], "split_shared_bia": 43, "share": [43, 81, 97, 108, 140, 159, 430, 431, 470, 473], "float_to_float16": 43, "float_to_bfloat16": 43, "bfloat16": [43, 439, 441, 449, 466], "cast_tensor": 43, "tensorproto": [43, 104], "remove_init_from_model_input": 43, "collate_pr": 43, "result": [43, 147, 150, 158, 213, 217, 256, 259, 267, 270, 271, 272, 274, 320, 323, 324, 325, 327, 341, 361, 368, 382, 392, 393, 397, 400, 402, 421, 424, 425, 427, 434, 436, 437, 438, 446, 447, 458, 459, 460, 462, 463, 465, 467, 469, 470, 471, 472, 473, 474, 476], "quantize_data_with_scale_zero": 43, "zero_point": 43, "point": [43, 213, 256, 271, 272, 281, 306, 324, 325, 365, 393, 437, 458, 465, 470, 472, 473], "To": [43, 270, 323, 338, 398, 404, 405, 422, 424, 427, 439, 442, 445, 451, 453, 455, 456, 464, 466, 467, 468, 470, 473, 475], "pack": [43, 60], "comput": [43, 104, 150, 158, 267, 268, 271, 272, 274, 320, 321, 324, 325, 327, 382, 393, 421, 426, 429, 437, 438, 439, 441, 452, 462, 463, 465, 467, 470, 473], "linear": [43, 149, 153, 157, 163, 172, 174, 175, 176, 177, 180, 184, 185, 297, 399, 425, 429, 438, 462, 470, 473], "transform": [43, 49, 142, 144, 145, 146, 149, 153, 154, 157, 177, 200, 201, 202, 203, 204, 205, 207, 209, 211, 244, 245, 246, 247, 248, 249, 251, 253, 255, 266, 319, 399, 400, 402, 422, 425, 426, 427, 428, 432, 438, 441, 446, 447, 448, 449, 462, 463, 466, 467, 470, 471, 473, 475, 476], "when": [43, 52, 63, 69, 147, 175, 177, 180, 184, 185, 200, 201, 209, 217, 244, 245, 253, 259, 268, 298, 299, 321, 361, 382, 397, 400, 404, 421, 422, 438, 449, 451, 452, 455, 459, 462, 465, 467, 470, 472, 473], "uint8": [43, 159, 213, 256, 270, 318, 323, 379, 403, 422, 431, 464, 465, 472, 475], "rmin": [43, 465], "rmax": [43, 465], "m": [43, 150, 176, 184, 185, 297, 425, 435, 441, 443, 446, 449, 453, 456, 462, 476], "where": [43, 184, 185, 270, 274, 323, 327, 379, 393, 405, 424, 425, 451, 455, 459, 470, 471], "max": [43, 103, 142, 159, 164, 184, 185, 217, 259, 271, 272, 306, 324, 325, 365, 393, 402, 424, 435, 438, 462, 465, 470, 472, 473], "ab": [43, 149, 159, 170, 177, 299, 465, 470], "np": [43, 217, 259, 306, 365, 427, 472, 473], "calculate_scale_zp": 43, "quantize_rang": 43, "calcul": [43, 59, 158, 170, 176, 180, 185, 203, 204, 247, 248, 271, 272, 297, 299, 309, 324, 325, 370, 383, 393, 422, 437, 438, 449, 460, 462, 465, 469, 470, 473, 475], "quantize_data": 43, "add": [43, 51, 63, 108, 118, 147, 180, 184, 185, 200, 202, 224, 244, 246, 298, 316, 377, 393, 398, 399, 405, 421, 422, 427, 429, 431, 437, 438, 453, 456, 469, 471, 473, 474], "necessari": [43, 397, 400, 404, 440, 459, 462, 469, 473], "intermedi": [43, 150, 167, 184, 185, 219, 399, 434, 465], "trasnform": 43, "full": [43, 200, 201, 202, 244, 245, 246, 393, 402, 422, 424, 430, 436, 459, 462, 468], "equat": [43, 272, 274, 325, 327, 465, 470], "r": [43, 142, 164, 424, 435, 459, 465, 476], "": [43, 104, 142, 147, 164, 174, 175, 176, 177, 181, 182, 184, 185, 199, 202, 216, 217, 218, 220, 222, 229, 243, 246, 258, 259, 272, 297, 299, 325, 327, 328, 332, 361, 390, 393, 397, 400, 404, 405, 424, 425, 427, 429, 431, 434, 438, 439, 446, 449, 451, 455, 458, 461, 462, 463, 464, 465, 467, 468, 469, 470, 473, 474, 475, 476], "q": [43, 106, 108, 130, 404, 467, 470], "z": [43, 425, 470], "real": [43, 203, 220, 247, 404, 427, 463, 465], "origin": [43, 155, 158, 174, 177, 180, 185, 200, 217, 218, 244, 259, 283, 284, 286, 287, 288, 298, 299, 318, 366, 379, 393, 398, 422, 446, 462, 465, 472, 473, 475], "quantize_data_per_channel": 43, "dequantize_data_with_scale_zero": 43, "tensor_valu": 43, "scale_valu": 43, "zo_valu": 43, "sacal": 43, "dequantize_data": 43, "valueinfo": 43, "tensor_nam": [43, 147], "new_dtyp": 43, "cast": [43, 56, 466, 472], "info": [43, 158, 159, 176, 180, 215, 220, 225, 297, 332, 389, 393, 399, 424, 440], "quantizedvalu": 43, "new_quantized_nam": 43, "scale_nam": 43, "zero_point_nam": 43, "quantized_value_typ": 43, "quint8": 43, "linearli": 43, "intial": 43, "quantizediniti": 43, "quantized_data": 43, "quantizationmod": 43, "quantizedvaluetyp": 43, "quantformat": 43, "quantize_nparrai": 43, "arr": [43, 393], "low": [43, 188, 189, 203, 204, 232, 233, 247, 248, 265, 275, 302, 328, 403, 404, 420, 422, 427, 438, 439, 463, 465, 467, 470, 473], "high": [43, 203, 204, 247, 248, 422, 424, 435, 463, 473], "attribute_to_kwarg": 43, "attribut": [43, 82, 103, 104, 147, 158, 174, 177, 182, 185, 393, 403, 421, 431, 433, 438, 464, 475], "kwarg": [43, 104, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 134, 136, 137, 159, 172, 184, 185, 202, 215, 217, 222, 225, 246, 259, 315, 317, 327, 328, 329, 331, 333, 335, 336, 337, 361, 376, 378, 380, 382, 388, 389, 392, 393, 421], "make_nod": 43, "find_by_nam": 43, "item_list": 43, "find": [43, 66, 67, 69, 104, 147, 274, 281, 306, 327, 365, 393, 403, 424, 444, 451, 455, 458, 459, 469, 471, 473], "item": [43, 180, 182, 184, 185, 216, 258, 298, 316, 377, 427, 462, 470, 473], "trt_env_setup": 43, "environ": [43, 165, 218, 397, 420, 451, 455, 458, 473], "variabl": [43, 165, 178, 184, 185, 202, 218, 246, 306, 365, 379, 435, 462, 473], "tensorrt": [43, 439, 465], "to_numpi": 43, "get_ops_recurs": 44, "prefix": [44, 147, 148, 156, 165, 441, 446, 471], "graph_info": 44, "templateadaptor": 44, "tampl": 44, "dictionari": [44, 66, 67, 69, 147, 148, 150, 158, 182, 184, 185, 216, 258, 270, 277, 280, 282, 323, 393], "yaml": [44, 180, 182, 185, 188, 189, 200, 202, 218, 232, 233, 244, 246, 260, 265, 276, 277, 278, 280, 289, 294, 302, 303, 392, 393, 403, 405, 433, 437, 438, 460, 464, 471, 472], "file": [44, 104, 147, 158, 162, 180, 181, 184, 185, 188, 189, 200, 201, 202, 205, 216, 217, 223, 226, 232, 233, 244, 245, 246, 249, 258, 259, 260, 265, 270, 276, 277, 278, 280, 289, 294, 298, 300, 302, 303, 323, 328, 338, 344, 345, 349, 361, 392, 393, 400, 403, 404, 405, 427, 430, 433, 436, 437, 438, 440, 444, 453, 456, 457, 458, 459, 460, 464, 465, 467, 471, 472], "pytorchadaptor": 44, "api": [44, 69, 74, 109, 149, 228, 265, 270, 302, 315, 316, 323, 327, 361, 376, 377, 380, 393, 398, 399, 406, 408, 412, 415, 418, 424, 429, 434, 438, 443, 447, 448, 449, 468, 469, 473, 477], "pytorch_ipexadaptor": 44, "intel": [44, 176, 221, 224, 261, 266, 273, 274, 297, 300, 308, 314, 319, 326, 327, 339, 361, 369, 375, 395, 397, 398, 400, 401, 403, 404, 405, 422, 423, 425, 426, 428, 429, 431, 432, 436, 439, 440, 441, 446, 448, 449, 460, 461, 462, 463, 465, 466, 468, 470, 471, 473, 474, 475], "extens": [44, 393, 400, 402, 403, 431, 434, 435, 438, 439, 440, 442, 447, 448, 449, 453, 456, 457, 462, 463, 465, 470, 473, 474, 475], "ipex": [44, 152, 158, 184, 185, 434, 438, 439, 443, 447, 448, 470], "pytorch_fxadaptor": 44, "fx": [44, 158, 184, 310, 371, 434, 439, 447, 448, 463, 465, 466], "graph": [44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 116, 129, 131, 135, 138, 141, 142, 144, 145, 146, 147, 174, 199, 243, 265, 329, 336, 360, 399, 403, 422, 425, 427, 433, 440, 441, 465, 466, 471], "pytorchweightonlyadaptor": 44, "querybackendcap": [45, 403, 404], "tensorflowadaptor": 46, "stock": [46, 447, 470], "spr": 46, "tensorflow_itexadaptor": 46, "itex": [46, 108, 184, 185, 263, 439, 465, 470], "tensorflowqueri": [46, 403], "performance_onli": [46, 47, 48, 106, 130, 135, 146, 184, 438], "itex_mod": [46, 47, 88, 106, 130, 135], "quant_mod": [46, 316, 377, 404, 405], "graphconvert": 47, "qt_config": 47, "recip": [47, 174, 184, 185, 265, 302, 438, 467, 470, 473], "int8_sequ": 47, "fp32_op": [47, 49, 106], "bf16_op": [47, 49, 106, 404, 466], "data_load": [47, 48, 403], "fake_qu": [47, 87, 106, 130, 135], "qdq_enabl": 47, "new_api": [47, 48, 70, 71, 76, 78, 91, 98, 130, 135, 142], "use_bf16": [47, 48, 184, 464], "without": [48, 89, 147, 177, 217, 259, 299, 318, 379, 397, 425, 427, 438, 449, 462, 463, 464, 473, 474], "graphconverterwithoutcalib": 48, "recover_config": 48, "rewrit": [49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 105, 106, 107, 108, 229], "bf16convert": [49, 466], "biasadd": [51, 58, 63, 65, 108, 431], "convertaddtobiasaddoptim": 51, "conv2d": [51, 58, 59, 60, 64, 65, 70, 124, 134, 142, 149, 404, 405, 424, 429, 431, 470, 471, 473], "addv2": [51, 68, 431], "layout": 52, "convertlayoutoptim": 52, "optim": [52, 73, 74, 78, 79, 115, 117, 174, 177, 181, 184, 185, 221, 227, 229, 265, 266, 282, 302, 306, 319, 365, 382, 383, 390, 393, 400, 402, 420, 424, 425, 426, 427, 431, 432, 434, 435, 438, 440, 441, 443, 445, 446, 449, 452, 462, 463, 464, 465, 466, 469, 470, 471, 473, 475], "nchw": [52, 213], "nhwc": [52, 213], "It": [52, 166, 176, 188, 189, 226, 232, 233, 272, 274, 281, 297, 302, 309, 325, 327, 328, 361, 366, 370, 382, 403, 404, 405, 424, 425, 438, 444, 447, 452, 458, 459, 462, 465, 468, 469, 473, 475], "exist": [52, 165, 182, 218, 336, 429, 437, 445, 473], "4": [52, 153, 158, 159, 165, 176, 177, 184, 185, 209, 212, 213, 217, 253, 256, 259, 267, 268, 270, 320, 321, 323, 379, 380, 397, 403, 405, 420, 427, 428, 431, 434, 435, 437, 438, 446, 462, 465, 467, 470, 472, 473, 476], "abov": [52, 403, 404, 405, 425, 462, 465, 470, 473], "graph_def": [52, 147, 263, 328, 336, 360, 361], "leakyrelu": [53, 470], "convertleakyreluoptim": 53, "below": [53, 65, 73, 184, 185, 303, 327, 361, 398, 399, 402, 403, 404, 405, 421, 424, 425, 427, 433, 437, 441, 443, 451, 452, 455, 458, 460, 461, 462, 464, 465, 467, 469, 470, 471, 473, 474], "subgraph": [53, 65, 104, 156, 473], "mul": [53, 64, 65, 68, 163, 429, 470], "maximum": [53, 176, 177, 184, 185, 200, 217, 244, 259, 268, 299, 306, 321, 365, 405, 422, 424, 438, 462, 465, 472], "note": [53, 176, 270, 310, 323, 371, 400, 404, 405, 421, 424, 427, 429, 431, 435, 438, 443, 446, 451, 455, 458, 462, 465, 467, 470, 471, 473, 474, 475], "coeffici": [53, 462], "less": [53, 147, 184, 185, 393, 420, 425, 438, 462], "than": [53, 147, 200, 217, 244, 259, 393, 400, 402, 420, 422, 433, 460, 461, 462, 465, 467, 469, 472, 473], "convers": [53, 185, 276, 403, 404, 438, 439, 465, 466, 470], "valid": [53, 66, 67, 104, 177, 180, 184, 185, 202, 246, 270, 298, 299, 323, 336, 398, 400, 402, 403, 422, 424, 425, 428, 431, 434, 436, 438, 449, 462, 465, 468], "nan": 54, "random": [54, 147, 184, 185, 213, 217, 256, 259, 266, 282, 306, 308, 319, 365, 369, 393, 398, 400, 438, 464, 472, 475], "convertnantorandom": 54, "const": [54, 55, 62, 63, 66, 67, 69, 81, 97], "consist": [54, 62, 398, 399, 470, 473], "placehold": [55, 198, 242], "convertplaceholdertoconst": 55, "rerewrit": 56, "dequantizecastoptim": 56, "b16": 56, "dilat": 57, "contract": 57, "dilatedcontract": 57, "spacetobatchnd": 57, "batchtospacend": 57, "pattern": [57, 58, 60, 77, 95, 106, 107, 108, 130, 135, 158, 169, 171, 174, 175, 177, 178, 181, 184, 185, 202, 246, 266, 287, 288, 290, 295, 299, 316, 319, 377, 403, 422, 431, 434, 438, 459, 461, 464, 470, 473, 476], "inject": [58, 438], "dummi": [58, 174, 203, 204, 247, 248, 274, 327, 402, 422, 432, 437, 438], "injectdummybiasaddoptim": 58, "fusion": [58, 60, 69, 77, 108, 125, 126, 127, 130, 131, 132, 136, 399, 403, 431], "expanddim": 59, "expanddimsoptim": 59, "next": [59, 193, 237, 380, 400, 404, 405, 421, 464, 467, 473], "featch": 60, "reshap": [60, 66, 67, 72, 470], "fetchweightfromreshapeoptim": 60, "handl": [60, 147, 155, 163, 389, 399, 401, 421, 470], "fold": [61, 62, 264, 431, 470], "foldbatchnormnodesoptim": 61, "graphfoldconstantoptim": 62, "sequenc": [62, 104, 175, 176, 184, 185, 200, 216, 217, 244, 258, 259, 268, 272, 297, 321, 325, 403, 422, 431, 462, 467, 472], "self": [62, 174, 184, 185, 338, 403, 404, 421, 422, 434, 437, 469, 471, 473], "supported_op_typ": 62, "fusebiasaddandaddoptim": 63, "second": [63, 175, 184, 185, 200, 244, 366, 393, 424, 438, 451, 455, 459, 467, 470, 473, 475], "columnwis": 64, "fusecolumnwisemuloptim": 64, "depthwiseconv2dn": [64, 70, 124, 134, 431], "math": [65, 465], "fuseconvwithmathoptim": 65, "elimin": 65, "sub": [65, 158, 165, 174, 218, 400, 473], "realdiv": [65, 68], "decompos": [66, 67], "fusedecomposedbnoptim": 66, "input_graph_def": [66, 67, 69], "node_name_from_input": [66, 67, 69], "node_nam": [66, 67, 69, 147, 336, 346, 404], "strip": [66, 67, 69, 82, 83, 147, 471], "port": [66, 67, 69], "other": [66, 67, 69, 155, 163, 199, 243, 272, 325, 336, 397, 398, 399, 404, 405, 424, 431, 434, 436, 438, 440, 460, 462, 465, 470, 472, 473, 476], "underli": [66, 67, 69], "node_from_map": [66, 67, 69], "node_map": [66, 67, 69], "pull": [66, 67, 69], "def": [66, 67, 69, 188, 189, 232, 233, 361, 380, 382, 399, 403, 421, 422, 425, 426, 427, 437, 438, 465, 470, 471, 473], "entri": [66, 67, 69, 150, 224, 265, 303, 393, 436], "index": [66, 67, 69, 104, 165, 185, 193, 198, 202, 237, 242, 246, 281, 393, 422, 437, 459, 470], "everi": [66, 67, 69, 176, 177, 184, 185, 297, 299, 403, 421, 446, 451, 455, 473], "identifi": [66, 67, 69, 270, 323, 336, 462], "want": [66, 67, 69, 174, 184, 185, 198, 200, 242, 244, 299, 366, 382, 399, 403, 421, 422, 427, 438, 446, 458, 459, 460, 469, 471, 473], "nodedef": [66, 67, 69], "rais": [66, 67, 69, 104, 176, 177, 180, 270, 297, 298, 299, 323, 328, 380, 402, 462, 463], "valueerror": [66, 67, 69, 270, 323, 380, 430], "If": [66, 67, 69, 73, 159, 165, 184, 185, 188, 189, 202, 217, 232, 233, 246, 259, 298, 328, 361, 380, 382, 398, 399, 404, 420, 421, 422, 427, 435, 436, 437, 438, 444, 452, 453, 456, 458, 460, 465, 469, 470, 471, 472, 473], "isn": [66, 67, 69], "t": [66, 67, 69, 142, 164, 176, 184, 185, 217, 220, 259, 272, 325, 399, 403, 424, 425, 427, 438, 439, 459, 462, 465, 473, 475], "present": [66, 67, 69, 424, 463, 470], "values_from_const": [66, 67, 69], "node_def": [66, 67, 69], "extract": [66, 67, 69, 147, 174, 202, 246, 318, 379, 422], "ha": [66, 67, 69, 73, 149, 176, 177, 218, 267, 297, 299, 320, 380, 398, 400, 403, 404, 405, 421, 429, 434, 438, 439, 444, 458, 462, 464, 465, 466, 469, 470, 473], "access": [66, 67, 69, 182, 185, 388, 393, 453, 456], "valid_reshape_input": [66, 67], "reshape_in0_ndef": [66, 67], "reshape_in1_ndef": [66, 67], "ar": [66, 67, 104, 158, 176, 177, 184, 185, 200, 217, 244, 259, 270, 274, 281, 297, 298, 299, 303, 305, 306, 323, 327, 362, 364, 365, 379, 380, 385, 392, 393, 397, 398, 399, 400, 403, 404, 421, 422, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 444, 446, 449, 452, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475], "bypass_reshap": [66, 67], "input_node_map": [66, 67], "input_nam": [66, 67, 101, 141, 185, 263, 264, 429], "get_const_dim_count": [66, 67], "dimens": [66, 67, 104, 192, 217, 236, 259, 422, 425, 472], "instancenorm": [67, 470], "fusedecomposedinoptim": 67, "gelu": 68, "fusegeluoptim": 68, "sqrt": [68, 424], "erf": 68, "samll": 69, "layernorm": [69, 470], "fuselayernormoptim": 69, "remap": 69, "smaller": [69, 217, 259, 425, 438, 462, 472], "case": [69, 73, 159, 165, 185, 199, 216, 217, 218, 243, 258, 259, 265, 289, 294, 302, 338, 405, 421, 425, 426, 427, 431, 433, 437, 442, 446, 458, 459, 460, 462, 463, 465, 467, 468, 472, 474, 475, 476], "fusedbatcnormv3": 69, "And": [69, 399, 420, 438, 444, 470], "further": [69, 185, 397, 439, 440, 441, 443, 452, 458, 465], "restrict": [69, 184, 185, 462, 469], "2d": [69, 470], "3d": [69, 463, 470], "kera": [69, 115, 174, 180, 185, 202, 209, 224, 246, 253, 331, 336, 404, 421, 427, 440, 448, 449], "fusepadwithconv2doptim": 70, "excluded_op_nam": [70, 71, 181, 184, 185, 438, 462], "cfg": [70, 71, 158, 181, 316, 377, 385, 404, 405], "itex_qdq_mod": [70, 71], "conv3d": [70, 124], "fusepadwithfp32conv2doptim": 71, "fusetransposereshapeoptim": 72, "cse": [73, 97], "graphcseoptim": 73, "introduc": [73, 398, 403, 404, 405, 431, 438, 465, 467, 468, 470, 474], "ident": [73, 79, 175, 397, 425], "three": [73, 180, 200, 244, 305, 362, 364, 399, 403, 404, 435, 439, 452, 461, 465, 466, 469, 470, 471], "d": [73, 158, 425, 433, 459, 476], "those": [73, 309, 370, 393, 424, 425, 426, 433, 438, 439, 461, 462, 465, 473], "child": [73, 149, 471], "b1": 73, "c1c2": 73, "d1": [73, 393], "c1": 73, "c2": 73, "memori": [73, 265, 289, 294, 302, 338, 393, 421, 426, 438, 439, 441, 460, 462, 465, 467, 470, 473, 476], "bound": [73, 165, 217, 259, 270, 306, 323, 365, 437, 472], "like": [73, 95, 97, 147, 174, 180, 185, 188, 189, 190, 202, 232, 233, 234, 246, 265, 274, 299, 302, 303, 327, 336, 361, 382, 398, 399, 400, 403, 404, 424, 425, 426, 434, 446, 461, 462, 465, 467, 468, 470, 473], "relu": [73, 77, 108, 399, 431, 470, 471], "relu6": [73, 431], "updat": [73, 158, 170, 176, 180, 299, 327, 361, 390, 430, 437, 438, 444, 449, 452, 462, 470, 473, 474], "graphdef": [73, 147, 336, 360, 440], "grappler": [74, 431], "grappleroptim": 74, "input_output_nam": 74, "opt_cfg": 74, "wrapper": [74, 101, 102, 103, 104, 121, 139, 148, 153, 157, 167, 199, 217, 219, 220, 222, 223, 229, 243, 259, 270, 274, 323, 327, 332, 336, 466], "leverag": [74, 400, 402, 425, 429, 441, 458, 461, 465, 467, 473], "built": [74, 186, 187, 191, 196, 200, 201, 206, 208, 210, 211, 213, 214, 217, 222, 224, 230, 231, 235, 238, 240, 244, 245, 250, 252, 254, 255, 256, 257, 259, 303, 327, 330, 338, 361, 382, 400, 403, 422, 427, 438, 451, 455, 460, 465, 472, 473, 475], "convert_add_to_biasadd": [75, 86, 110], "convert_layout": [75, 86, 110], "convert_leakyrelu": [75, 86, 110], "convert_nan_to_random": [75, 86, 110], "convert_placeholder_to_const": [75, 86, 110], "dequantize_cast_optim": [75, 86, 110], "dilated_contract": [75, 86, 110], "dummy_biasadd": [75, 86, 110], "expanddims_optim": [75, 86, 110], "fetch_weight_from_reshap": [75, 86, 110], "fold_batch_norm": [75, 86, 110], "fold_const": [75, 86, 110], "fuse_biasadd_add": [75, 86, 110], "fuse_column_wise_mul": [75, 86, 110], "fuse_conv_with_math": [75, 86, 110], "fuse_decomposed_bn": [75, 86, 110], "fuse_decomposed_in": [75, 86, 110], "fuse_gelu": [75, 86, 110], "fuse_layer_norm": [75, 86, 110], "fuse_pad_with_conv": [75, 86, 110], "fuse_pad_with_fp32_conv": [75, 86, 110], "fuse_reshape_transpos": [75, 86, 110], "graph_cse_optim": [75, 86, 110], "grappler_pass": [75, 86, 110], "insert_print_nod": [75, 86, 110], "move_squeeze_after_relu": [75, 86, 110], "pre_optim": [75, 86, 110], "remove_training_nod": [75, 86, 110], "rename_batch_norm": [75, 86, 110], "split_shared_input": [75, 86, 110], "strip_equivalent_nod": [75, 86, 110, 147], "strip_unused_nod": [75, 86, 110, 147], "switch_optim": [75, 86, 110], "insert": [76, 104, 106, 108, 112, 145, 155, 163, 399, 404, 421, 434, 438, 441, 462, 465, 466, 470, 471], "print": [76, 149, 150, 174, 274, 327, 380, 393, 427, 437, 438, 462, 470, 473], "insertprintminmaxnod": 76, "pre_node_nam": 76, "post_node_nam": 76, "pass": [76, 147, 165, 327, 361, 393, 399, 403, 420, 422, 425, 426, 427, 433, 437, 438, 459, 462, 464, 465, 466, 470, 475], "sampl": [76, 159, 184, 185, 193, 198, 200, 201, 202, 213, 217, 237, 242, 244, 245, 246, 256, 259, 274, 281, 306, 327, 365, 400, 421, 422, 428, 434, 459, 465, 472, 473, 475, 476], "move": [77, 399, 464, 467, 468], "squeez": [77, 399], "movesqueezeafterreluoptim": 77, "match": [77, 101, 174, 270, 271, 323, 324, 425, 459, 467], "pre": [78, 115, 174, 188, 189, 200, 232, 233, 244, 328, 361, 382, 422, 425, 426, 438, 446, 462, 463, 465, 467, 471, 473], "entranc": [78, 191], "preoptim": 78, "removetrainingnodesoptim": 79, "protected_nod": 79, "types_to_splic": 79, "checknumer": 79, "stopgradi": 79, "renam": [80, 468], "fusedbatchnorm": 80, "fusedbatchnormv2": 80, "renamebatchnormoptim": 80, "splitsharedinputoptim": 81, "equival": [82, 153, 157, 470], "stripequivalentnodesoptim": 82, "output_node_nam": [82, 83, 130, 131, 135, 147], "same": [82, 140, 147, 159, 177, 185, 200, 217, 244, 259, 270, 323, 393, 403, 405, 420, 421, 422, 425, 427, 431, 438, 442, 446, 451, 455, 462, 464, 465, 467, 470, 471, 472, 473], "unus": [83, 147], "stripunusednodesoptim": 83, "input_node_nam": [83, 130, 135, 147], "switch": [84, 441, 471], "switchoptim": 84, "condit": [84, 200, 201, 202, 217, 244, 245, 246, 259, 305, 362, 364, 422, 436, 472, 473], "graphrewriterbas": 85, "abstract": [85, 166, 217, 259, 260, 265, 302, 403, 405, 433], "freeze_fake_qu": [86, 94, 110], "freeze_valu": [86, 94, 110], "freeze_value_without_calib": [86, 94, 110], "fuse_conv_redundant_dequant": [86, 94, 110], "fuse_conv_requant": [86, 94, 110], "fuse_matmul_redundant_dequant": [86, 94, 110], "fuse_matmul_requant": [86, 94, 110], "meta_op_optim": [86, 94, 110], "post_hostconst_convert": [86, 94, 110], "post_quantized_op_cs": [86, 94, 110], "rnn_convert": [86, 94, 110], "scale_propag": [86, 94, 110], "onnx_graph": [86, 100, 110], "onnx_schema": [86, 100, 110], "tf2onnx_util": [86, 100, 110], "insert_qdq_pattern": [86, 105, 110], "merge_duplicated_qdq": [86, 105, 110], "share_qdq_y_pattern": [86, 105, 110], "freez": [87, 88, 89, 441, 462], "fakequ": 87, "freezefakequantopoptim": 87, "follow": [87, 109, 175, 202, 246, 267, 270, 320, 323, 397, 398, 399, 400, 403, 404, 405, 421, 422, 425, 426, 427, 431, 435, 436, 437, 438, 439, 440, 441, 442, 443, 451, 455, 461, 462, 464, 465, 470, 471, 473], "freezevaluetransform": 88, "max_min_data": [88, 89], "postfix": [88, 89], "tensor_data": [88, 393, 394], "th": [88, 89], "gpu": [88, 89, 96, 184, 185, 402, 420, 434, 438, 439, 443, 449, 458, 464, 465], "freezevaluewithoutcalibtransform": 89, "95": [89, 274, 327, 437, 470, 476], "quantizedconv": [90, 91], "quantizeddeconv": 90, "redund": [90, 92], "fuseconvredundantdequantizetransform": 90, "cpu": [90, 91, 92, 93, 184, 185, 393, 402, 404, 420, 434, 438, 439, 441, 443, 449, 458, 463, 464, 465, 466, 471], "_quantizedconv": 90, "_quantizeddeconv": 90, "successor": [90, 91, 92, 93], "requant": [91, 93, 471], "fuseconvrequantizetransform": 91, "quantizedmatmul": [92, 93], "fusematmulredundantdequantizetransform": 92, "_quantizedmatmul": [92, 93], "fusematmulrequantizedequantizetransform": 93, "quantizedmatmulwithbiasanddequant": 93, "fusematmulrequantizetransform": 93, "fusematmulrequantizedequantizenewapitransform": 93, "fusematmulrequantizenewapitransform": 93, "newapi": 93, "meta": [95, 463], "metainfochangingmemopoptim": 95, "metaop": 95, "With": [95, 338, 399, 403, 405, 421, 438, 446, 451, 455, 459, 460, 462, 463, 469, 470, 473, 476], "better": [95, 184, 185, 188, 189, 232, 233, 281, 328, 361, 382, 426, 437, 439, 462, 463, 465, 467, 469, 473], "perform": [95, 139, 165, 178, 184, 185, 200, 212, 213, 218, 244, 256, 265, 289, 294, 302, 309, 327, 338, 361, 366, 370, 399, 400, 403, 404, 420, 422, 423, 424, 426, 428, 429, 434, 435, 437, 438, 439, 440, 441, 443, 447, 449, 452, 458, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 473, 475, 476], "hostconst": 96, "posthostconstconvert": 96, "just": [96, 190, 215, 217, 220, 222, 223, 225, 234, 259, 338, 400, 438, 448, 452, 458, 461, 465, 470, 472, 473], "postcseoptim": 97, "duplic": [97, 107, 306, 365], "quantizev2": 97, "decreas": [97, 462], "size": [97, 159, 176, 192, 193, 199, 202, 208, 213, 217, 236, 237, 243, 246, 252, 256, 259, 297, 338, 393, 397, 404, 421, 422, 427, 430, 438, 458, 459, 460, 462, 467, 470, 472, 475, 476], "rnn": 98, "quantizedrnnconvert": 98, "calibration_data": [98, 106], "rnn_detail": 98, "scalepropagationtransform": 99, "direct": [99, 176, 297, 462], "export": [100, 185, 266, 270, 319, 323, 402, 432, 444, 459, 471, 474], "onnxgraph": 101, "output_shap": 101, "extra_opset": 101, "output_nam": [101, 141, 185, 263, 264, 429], "is_subgraph": 101, "graph_nam": 101, "manipul": [101, 102], "onnxnod": 102, "skip_convers": 102, "schema": [103, 159], "onnxopschema": 103, "domain": [103, 104, 184, 185, 462, 473], "since_vers": 103, "get_schema": 103, "max_inclusive_opset_vers": 103, "within": [103, 177, 265, 270, 302, 323, 336, 355, 360, 397, 399, 405, 439, 451, 455, 458, 463, 470, 473], "get_max_supported_opset_vers": 103, "packag": [103, 403, 430, 435, 458, 459, 463, 468, 473], "set_nam": 104, "find_opset": 104, "assert_error": 104, "bool_val": 104, "error_msg": 104, "error": [104, 150, 274, 309, 327, 370, 389, 424, 437, 442, 470, 473], "messag": [104, 145, 473], "map_numpy_to_onnx_dtyp": 104, "np_dtype": 104, "map_onnx_to_numpy_typ": 104, "onnx_typ": 104, "add_port_to_nam": 104, "nr": 104, "get_tensorflow_node_attr": 104, "pars": [104, 158, 200, 201, 213, 217, 244, 245, 256, 259, 344, 345, 349, 404, 405, 472], "get_tensorflow_tensor_shap": 104, "shape": [104, 147, 176, 203, 204, 213, 217, 247, 248, 256, 259, 270, 323, 402, 422, 431, 432, 438, 470, 472], "get_tensorflow_node_shape_attr": 104, "attr": [104, 147, 174], "map_tensorflow_dtyp": 104, "get_tensorflow_tensor_data": 104, "convert_tensorflow_tensor_to_onnx": 104, "read_tensorflow_node_attr": 104, "read": [104, 147, 205, 217, 249, 259, 298, 422, 466, 469], "infer_onnx_shape_dtyp": 104, "opset_vers": [104, 141, 185, 263, 264, 429], "input_shap": [104, 204, 248, 422], "input_dtyp": 104, "sometim": [104, 399, 424, 465], "so": [104, 217, 259, 379, 399, 403, 424, 430, 434, 439, 444, 446, 465, 466, 467, 470, 471, 472, 474], "make_onnx_shap": 104, "seqtyp": 104, "tensor_dtyp": 104, "around": 104, "signifi": 104, "make_onnx_inputs_output": 104, "elem_typ": 104, "text": [104, 216, 217, 258, 259, 267, 272, 300, 320, 325, 429, 436, 447, 462, 463, 467, 470, 472, 476], "datatyp": [104, 158, 466, 473, 476], "save_protobuf": 104, "path": [104, 147, 158, 174, 180, 181, 200, 201, 202, 217, 244, 245, 246, 259, 260, 263, 264, 265, 276, 277, 278, 280, 289, 294, 298, 300, 302, 303, 316, 328, 336, 360, 361, 377, 390, 393, 399, 400, 403, 422, 424, 427, 433, 437, 438, 439, 440, 444, 447, 458, 461, 472, 475], "as_text": 104, "save": [104, 180, 184, 185, 202, 229, 246, 263, 264, 303, 336, 361, 382, 383, 388, 393, 399, 403, 433, 438, 439, 440, 442, 446, 451, 455, 461, 465, 467, 470], "protobuf": 104, "is_onnx_domain": 104, "is_list_or_tupl": 104, "are_shapes_equ": 104, "src": [104, 459], "dest": 104, "equal": [104, 142, 147, 164, 380, 393, 462], "get_subgraphs_from_onnx": 104, "model_proto": 104, "over": [104, 202, 246, 274, 327, 404, 428, 432, 434, 437, 449, 458, 464, 470, 473], "df": 104, "initialize_name_count": 104, "avoid": [104, 159, 200, 244, 399, 467, 471], "conflict": [104, 430], "counter": 104, "make_nam": 104, "get_index_from_strided_slice_of_shap": 104, "outputs_to_valu": 104, "stride": [104, 217, 259, 472], "slice": 104, "compute_const_folding_using_tf": 104, "g": [104, 176, 184, 185, 425, 428, 432, 441, 446, 462, 467, 468, 470, 473], "const_node_valu": 104, "graph_output": 104, "constant": [104, 264, 266, 306, 308, 314, 319, 365, 369, 375, 386, 421, 431, 472], "tf": [104, 115, 147, 174, 180, 199, 200, 201, 202, 217, 243, 244, 245, 246, 259, 334, 336, 427, 440, 463, 466, 472], "generategraphwithqdqpattern": 106, "op_wise_config": [106, 130, 135, 404], "quantized_nod": 106, "dq": [106, 108, 130, 470], "pair": [106, 184, 185, 404, 421, 438, 439, 468], "befor": [106, 108, 149, 163, 176, 177, 179, 184, 185, 200, 244, 297, 299, 301, 398, 405, 421, 422, 425, 426, 427, 430, 431, 435, 438, 453, 456, 465, 469, 471, 473], "merg": [107, 192, 236, 316, 377, 453, 456, 471, 473], "mergeduplicatedqdqoptim": 107, "y": [108, 184, 185, 217, 259, 306, 365, 424, 430, 444, 470, 472], "shareqdqforitexypatternoptim": 108, "one": [108, 109, 114, 158, 159, 165, 176, 177, 179, 217, 227, 259, 267, 270, 274, 276, 297, 300, 301, 320, 323, 327, 400, 403, 425, 426, 427, 431, 434, 435, 437, 438, 439, 441, 442, 446, 447, 449, 451, 452, 455, 458, 459, 460, 461, 462, 464, 465, 467, 468, 470, 472, 473], "enabl": [108, 150, 159, 177, 184, 185, 299, 404, 405, 427, 435, 439, 441, 443, 446, 447, 449, 462, 463, 473], "break": [108, 427, 438], "graphanalyz": 109, "extend_engin": 109, "analyz": [109, 174, 336, 469, 470, 471], "under": [109, 184, 185, 202, 246, 392, 400, 422, 436, 437, 438, 441, 446, 447, 458, 461, 462, 470, 471, 473], "singleton": [109, 393], "specifi": [109, 158, 165, 184, 185, 188, 189, 217, 218, 232, 233, 259, 265, 270, 274, 277, 280, 289, 294, 302, 303, 323, 327, 328, 361, 380, 382, 392, 393, 404, 405, 427, 431, 437, 438, 446, 460, 464, 472, 473, 475], "graphrewriterhelp": 109, "encapsul": [109, 188, 189, 232, 233, 328, 361, 382, 440], "quantize_lay": [110, 111, 113], "fake_quant": [110, 111, 113], "quantize_config": [110, 111, 113, 404], "quantize_help": [110, 111, 113], "quantize_wrapp": [110, 111, 113], "fuse_qdq_bn": [110, 111, 129], "fuse_qdq_concatv2": [110, 111, 129], "fuse_qdq_conv": [110, 111, 129], "fuse_qdq_deconv": [110, 111, 129], "fuse_qdq_in": [110, 111, 129], "fuse_qdq_matmul": [110, 111, 129], "fuse_qdq_pool": [110, 111, 129], "optimize_qdq": [110, 111, 129], "optimize_lay": [111, 113, 116], "quantize_layer_add": [111, 113, 116], "quantize_layer_bas": [111, 113, 116], "quantize_layer_bn": [111, 113, 116], "fakequantizebas": 112, "abc": [112, 272, 325, 403, 471, 473], "appli": [112, 125, 126, 127, 130, 132, 136, 153, 157, 166, 177, 227, 268, 321, 397, 404, 405, 438, 441, 443, 449, 458, 461, 462, 465, 466, 469, 470, 473, 474, 475], "fakequant": 112, "per_channel": [112, 404, 405, 431, 465, 475], "num_bit": [112, 153, 158, 159, 470], "8": [112, 159, 184, 185, 216, 258, 399, 404, 431, 435, 462, 463, 467, 470, 473, 476], "channel_axi": [112, 161, 164], "symmetr": [112, 405, 465, 472, 473], "narrow_rang": 112, "quantizeconfig": [114, 115], "custom": [114, 159, 165, 303, 327, 338, 392, 420, 425, 426, 441, 462, 463, 467, 469], "There": [114, 303, 305, 362, 364, 424, 425, 431, 434, 438, 441, 467, 470, 473, 475], "instanc": [114, 115, 165, 184, 185, 188, 189, 218, 232, 233, 271, 272, 274, 277, 280, 283, 284, 286, 287, 288, 306, 318, 324, 325, 327, 328, 361, 365, 379, 382, 390, 393, 397, 399, 403, 420, 438, 443, 449, 473, 475, 476], "global": [114, 176, 184, 185, 283, 284, 286, 287, 288, 297, 379, 393, 399, 438, 462, 464, 473], "class": [115, 158, 281, 328, 361, 399, 400, 404, 421, 422, 425, 437, 438, 449, 460, 461, 465, 468, 471, 473, 475], "init_quantize_config": 115, "quantize_recip": 115, "begin": [115, 177, 299, 421, 425, 426, 438, 462, 473], "process": [115, 139, 150, 165, 176, 177, 179, 180, 184, 185, 188, 189, 200, 201, 202, 213, 217, 218, 232, 233, 244, 245, 246, 256, 259, 297, 299, 301, 305, 306, 328, 361, 362, 364, 365, 382, 392, 393, 400, 403, 404, 405, 421, 422, 425, 426, 427, 429, 438, 442, 461, 462, 465, 470, 471, 472, 475], "model_nam": [115, 184, 185], "special": [115, 174, 338, 399, 421, 437, 438, 460, 462, 474], "decid": [115, 184, 185, 268, 299, 321, 403, 404, 438, 465, 468, 473], "qat_clone_funct": 115, "leav": [115, 452], "quantizewrapp": [115, 121], "wrapped_lay": 115, "config_quantizable_lay": 117, "quantizelayeradd": 118, "quantizelay": 119, "quantizelayerbas": 119, "quantizelayerbatchnorm": 120, "quantizewrapperbas": 121, "fusedbatchnormv3": [122, 132], "fusenodestartwithfusedbatchnormv3": [122, 132], "_quantizedfusedbatchnorm": 122, "concatv2": [123, 133, 146, 431], "fusenodestartwithconcatv2": [123, 133], "quantizedconcatv2": [123, 133], "fusenodestartwithconv2d": [124, 134], "conv2dbackpropinput": 125, "conv3dbackpropinputv2": 125, "fusenodestartwithdeconv2d": 125, "fusedinstancenorm": 126, "fusenodestartwithfusedinstancenorm": 126, "batchmatmul": 127, "batchmatmulv2": 127, "fusenodestartwithmatmul": [127, 136], "avgpool": [128, 137, 431], "fusenodestartwithpool": [128, 137], "optimizeqdqgraph": 130, "input_graph": [130, 135, 142, 356, 360, 403], "op_wise_sequ": [130, 135], "quantizegraph": 131, "quantizegraphbas": 131, "quantizenodebas": 131, "quantizegraphforintel": 135, "common": [138, 185, 215, 266, 276, 280, 281, 282, 319, 385, 397, 422, 426, 427, 429, 433, 435, 438, 465, 470], "herlper": 138, "quantizegraphhelp": 138, "sever": [138, 179, 217, 259, 301, 400, 424, 425, 426, 434, 438, 439, 451, 455, 462, 464, 470, 472, 473, 475], "staticmethod": 138, "function": [138, 184, 185, 188, 189, 201, 232, 233, 245, 277, 280, 289, 294, 399, 400, 403, 404, 405, 420, 421, 425, 426, 429, 433, 434, 435, 437, 438, 439, 449, 459, 462, 465, 468, 469, 470, 471, 473, 474], "smoothquantcalibr": 139, "dataset": [139, 140, 158, 188, 189, 190, 192, 193, 195, 196, 197, 198, 199, 211, 220, 232, 233, 234, 236, 237, 239, 240, 241, 242, 243, 255, 266, 270, 271, 272, 274, 303, 319, 323, 324, 325, 327, 328, 361, 382, 385, 400, 402, 403, 404, 421, 427, 432, 437, 438, 446, 462, 465, 468, 470, 473, 475, 476], "outlier": [139, 404, 424, 467, 470], "ignor": [139, 393, 422, 467, 470], "smoothquantscal": 140, "alpha": [140, 153, 163, 170, 178, 465], "scales_per_op": 140, "method": [140, 142, 158, 159, 178, 184, 185, 193, 198, 199, 200, 202, 209, 217, 220, 237, 242, 243, 244, 246, 253, 259, 280, 281, 282, 316, 377, 379, 385, 386, 388, 389, 399, 400, 402, 421, 422, 424, 425, 426, 437, 438, 461, 462, 465, 466, 467, 470, 472, 473], "individu": [140, 176, 297, 355, 360, 397, 462, 470], "tensorflowqdqtoonnxqdqconvert": 141, "shape_overrid": 141, "inputs_as_nchw": [141, 263], "default_opset_vers": 141, "bia": [142, 184, 185, 471], "correct": [142, 164, 180, 184, 185, 270, 271, 272, 274, 298, 323, 324, 325, 327, 397, 441], "biascorrect": 142, "fp32_graph": 142, "weight_empir": 142, "Will": [142, 425, 434], "our": [142, 158, 184, 185, 400, 402, 429, 438, 459, 469, 474], "task": [142, 200, 207, 244, 251, 274, 327, 422, 425, 426, 429, 434, 437, 438, 462, 467, 470], "close": [142, 164], "w_int8": [142, 164], "u": [142, 164, 402, 441], "w_fp32": [142, 164], "varianc": [142, 164, 424], "ratio": [142, 164, 176, 177, 180, 184, 185, 213, 217, 256, 259, 299, 422, 438, 462, 472, 476], "differ": [142, 160, 164, 167, 177, 184, 185, 193, 202, 217, 219, 237, 246, 259, 265, 274, 280, 282, 291, 302, 327, 338, 387, 397, 399, 400, 404, 421, 422, 424, 425, 427, 428, 433, 434, 437, 438, 440, 451, 455, 460, 462, 465, 470, 471, 472, 473], "wise": [142, 159, 164, 184, 185, 306, 309, 365, 366, 370, 404, 434, 462, 471, 473, 475], "minim": [142, 164, 306, 365, 404, 405, 425, 428, 437, 438, 451, 455, 462, 465, 473], "round": [142, 159, 164, 465, 467, 470], "scale_c": [142, 164], "shift": [142, 164, 213, 256, 459, 472], "notic": [142, 164, 218, 436, 439, 468], "first": [142, 164, 175, 182, 184, 185, 200, 244, 270, 316, 323, 366, 377, 393, 399, 400, 403, 404, 405, 422, 424, 435, 439, 443, 452, 453, 456, 459, 464, 465, 466, 467, 469, 470, 471, 473, 475], "empir": [142, 164], "solut": [142, 164, 402, 403, 404, 430, 443, 447, 452, 463, 468, 470, 473, 474], "don": [142, 164, 176, 184, 185, 399, 462, 473], "min": [142, 159, 164, 393, 424, 462, 465, 470, 472, 473], "graphtransform": 143, "graphtransformbas": 143, "input_pb": [143, 145, 146], "log": [145, 165, 174, 344, 345, 349, 389, 399, 449, 469, 471, 473], "insertlog": 145, "node_name_list": 145, "show_nam": 145, "show_op": 145, "first_n": 145, "summar": [145, 425], "1024": [145, 202, 246, 444], "dump_fp32": 145, "rerang": 146, "rerangequantizedconcat": 146, "rerange_quant": 146, "version1_lt_version2": [147, 393], "version1": [147, 393], "version2": [147, 393], "version1_gt_version2": [147, 393], "greater": [147, 393, 462, 473], "version1_eq_version2": [147, 393], "version1_gte_version2": [147, 393], "version1_lte_version2": [147, 393], "disable_random": 147, "seed": [147, 184, 185, 282, 393, 438, 475], "disabl": [147, 184, 185, 397, 458, 466], "read_graph": 147, "in_graph": 147, "in_graph_is_binari": 147, "write_graph": 147, "out_graph_def": 147, "out_graph_fil": 147, "write": [147, 209, 253, 393, 427, 433, 438, 441, 471], "is_ckpt_format": 147, "model_path": [147, 424], "ckpt": [147, 328, 336, 361, 476], "folder": [147, 202, 207, 246, 251, 328, 361, 392, 422, 446, 451, 455, 467, 471], "is_saved_model_format": 147, "saved_model": [147, 276], "get_estimator_graph": 147, "estim": [147, 274, 327, 336, 473], "input_fn": [147, 336], "get_tensor_by_nam": 147, "try_cnt": 147, "consid": [147, 274, 327, 397, 425, 459, 473], "import": [147, 165, 184, 185, 276, 328, 338, 361, 380, 382, 393, 399, 400, 402, 405, 420, 421, 422, 424, 425, 426, 427, 429, 432, 437, 438, 439, 440, 441, 445, 447, 460, 461, 462, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474], "scope": [147, 404, 438], "onc": [147, 179, 224, 301, 305, 362, 364, 404, 405, 421, 458, 462, 463, 473, 476], "both": [147, 185, 397, 400, 403, 426, 438, 442, 462, 464, 465, 470, 473], "compat": [147, 336, 427, 440, 453, 456, 458, 468], "v1": [147, 212, 213, 256, 271, 272, 274, 324, 325, 327, 336, 427, 429, 430, 437, 440, 462, 468, 469, 476], "suffix": 147, "time": [147, 184, 185, 217, 259, 274, 306, 327, 338, 365, 393, 404, 421, 424, 427, 430, 438, 446, 448, 451, 455, 458, 459, 460, 462, 463, 465, 467, 469, 471, 472, 473], "got": [147, 404, 430, 471], "iterator_sess_run": 147, "sess": [147, 336], "iter_op": 147, "feed_dict": [147, 199, 243], "output_tensor": [147, 336], "measur": [147, 218, 328, 387, 400, 403, 420, 424, 425, 437, 438, 467, 471, 473, 476], "integr": [147, 167, 219, 403, 438, 459, 467], "session": [147, 199, 243, 336, 438, 471], "makeiter": 147, "feed": [147, 199, 243, 425, 462], "end": [147, 177, 184, 185, 200, 216, 217, 244, 258, 259, 299, 305, 362, 364, 403, 404, 405, 425, 426, 431, 435, 438, 452, 460, 462, 471, 472, 473], "predict": [147, 217, 222, 259, 267, 271, 272, 274, 320, 324, 325, 327, 361, 400, 425, 437, 449, 467, 470, 471, 472], "pred": [147, 274, 327, 437], "collate_tf_pr": 147, "collat": [147, 158, 421], "tbe": 147, "get_input_output_node_nam": 147, "fix_ref_type_of_graph_def": 147, "fix": [147, 177, 200, 244, 299, 398, 421, 422, 445, 462, 470, 473], "strip_unused_lib": 147, "offici": [147, 267, 271, 272, 320, 324, 325, 397, 470], "r1": 147, "15": [147, 431, 435], "branch": 147, "get_graph_def": 147, "auto_input_output": 147, "get_model_input_shap": 147, "inout": 147, "get_tensor_val_from_graph_nod": 147, "graph_node_name_map": 147, "kei": [147, 150, 155, 174, 177, 180, 182, 184, 185, 281, 298, 336, 380, 383, 385, 393, 402, 404, 463, 467, 471, 473], "val": [147, 180, 202, 205, 246, 249, 298, 424, 438], "tensor_v": 147, "int8_node_name_revers": 147, "revers": 147, "tf_diagnosis_help": 147, "fp32_model": [147, 150, 158, 264, 393, 403], "quan_model": 147, "save_path": [147, 263, 264, 403, 440], "diagnosi": [147, 184, 185, 438, 463, 468, 474], "generate_feed_dict": 147, "input_tensor": [147, 336], "get_weight_from_input_tensor": 147, "input_tensor_nam": [147, 336], "associ": [147, 270, 323], "quant": [147, 158, 159, 184, 185, 316, 377, 399, 438, 465], "search": [147, 149, 174, 177, 181, 188, 189, 232, 233, 265, 267, 277, 280, 281, 282, 302, 306, 320, 365, 402, 434, 437, 441, 442, 452, 463, 467, 471, 473, 474], "look": [147, 177, 402, 403, 405, 431, 437, 475], "sq_weight_tensor": 147, "sq_weights_nod": 147, "two": [147, 150, 165, 175, 176, 177, 179, 202, 207, 218, 246, 251, 270, 297, 301, 303, 310, 323, 371, 393, 399, 400, 421, 422, 425, 427, 429, 431, 438, 439, 465, 466, 467, 469, 473, 475], "torch": [148, 149, 150, 151, 153, 154, 155, 156, 158, 159, 163, 174, 175, 176, 177, 181, 184, 185, 229, 264, 328, 361, 392, 399, 402, 405, 406, 425, 427, 429, 438, 439, 440, 441, 446, 449, 465, 470, 471], "bf16modulewrapp": 148, "bf16modul": 148, "mix": [148, 152, 184, 185, 304, 316, 328, 363, 377, 402, 403, 410, 434, 441, 447, 448, 449, 474], "precis": [148, 152, 184, 185, 188, 189, 232, 233, 265, 272, 274, 275, 302, 304, 316, 325, 327, 328, 338, 363, 366, 377, 393, 402, 403, 404, 410, 420, 426, 427, 431, 434, 441, 447, 448, 449, 463, 464, 465, 470, 473, 474], "mixed_precision_model": 148, "bf16_symbolic_trac": 148, "fx_sub_module_list": 148, "trace": [148, 150, 156, 158, 174, 184, 185, 264, 368, 399, 448, 473], "_description_": 148, "is_leaf": 149, "judg": 149, "nn": [149, 153, 155, 158, 159, 174, 175, 177, 184, 185, 229, 264, 328, 361, 392, 399, 425, 438, 440, 470, 471], "trace_gptq_target_block": 149, "module_typ": 149, "modulelist": 149, "stack": 149, "structur": [149, 175, 177, 184, 185, 299, 317, 378, 434, 457, 459, 462, 465, 471, 474, 476], "critic": [149, 177, 397], "llm": [149, 467, 470], "gptq_related_block": 149, "embed": [149, 158, 462], "transfrom": 149, "transformers_pr": 149, "todo": [149, 200, 203, 244, 247, 270, 316, 323, 377], "transformers_nam": 149, "find_lay": 149, "conv1d": [149, 405], "find_layers_nam": 149, "log_quantizable_layers_per_transform": 149, "transformer_block": 149, "maxq": 149, "gptquantiz": 149, "weight_config": [149, 157, 159], "compress": [149, 266, 289, 294, 319, 338, 382, 395, 402, 410, 425, 434, 438, 458, 460, 461, 462, 463, 465, 467, 470, 474, 476], "pretrain": [149, 388, 441, 447], "url": [149, 202, 246, 436], "arxiv": [149, 170, 177, 299, 462, 467, 470], "org": [149, 170, 177, 270, 299, 323, 398, 399, 424, 435, 453, 456], "2210": [149, 467], "17323": [149, 467], "hessian": [150, 368, 473], "awar": [150, 159, 166, 185, 227, 276, 297, 368, 382, 402, 403, 404, 405, 426, 427, 429, 434, 458, 461, 463, 467, 473], "node_collector": 150, "hook": [150, 166, 177, 226, 227, 289, 294, 385, 425, 426, 438, 462, 470, 471], "record": [150, 158, 159, 167, 200, 201, 202, 208, 219, 226, 244, 245, 246, 252, 393, 422, 469, 471, 473], "hessiantrac": 150, "q_model": [150, 185, 276, 361, 399, 402, 421, 422, 424, 427, 429, 432, 433, 437, 438, 440, 465, 466, 467], "criterion": [150, 166, 168, 169, 170, 176, 177, 184, 185, 221, 224, 266, 319, 425, 426, 438, 462, 465, 473, 475], "yao": 150, "zhewei": 150, "et": [150, 467, 470], "al": [150, 467, 470], "pyhessian": 150, "network": [150, 170, 176, 299, 368, 400, 425, 426, 429, 438, 463, 465, 470, 473], "through": [150, 188, 189, 232, 233, 327, 328, 361, 402, 420, 431, 433, 434, 437, 444, 460, 461, 462, 464, 465, 470], "len": [150, 185, 217, 259, 422, 427, 472], "2020": 150, "ieee": [150, 439, 470], "intern": [150, 316, 377, 421, 422, 437, 462], "confer": [150, 462, 470], "big": [150, 424], "dong": 150, "zhen": 150, "hawq": [150, 368, 473], "v2": [150, 368, 421, 427, 429, 430, 435, 447, 468, 473, 474, 476], "advanc": [150, 184, 185, 397, 402, 404, 410, 465, 475], "system": [150, 165, 218, 393, 420, 444, 476], "33": [150, 476], "18518": 150, "18529": 150, "openvinotoolkit": 150, "nncf": 150, "develop": [150, 338, 398, 399, 435, 438, 439, 441, 447, 458, 462, 463, 466, 469], "hessian_trac": 150, "compare_weight": 150, "float_dict": 150, "ani": [150, 270, 272, 315, 323, 325, 355, 360, 376, 380, 390, 393, 397, 398, 402, 405, 427, 441, 446, 459, 462, 469], "quantized_dict": 150, "compar": [150, 274, 327, 393, 426, 437, 462, 465, 467, 469, 471, 473], "being": [150, 270, 323, 405], "wt_compare_dict": 150, "float_model": 150, "state_dict": [150, 427, 471], "qmodel": 150, "compute_error": 150, "state": [150, 175, 405, 444, 462], "weight_dict": 150, "hawq_top": 150, "enable_act": 150, "modul": [151, 279, 285, 295, 296, 399, 421, 425, 434, 437, 438, 440, 462, 464, 466, 471, 474], "ipex_mixed_precis": 152, "example_input": [152, 155, 157, 158, 159, 184, 185, 264, 429], "fakeaffinetensorquantfunct": 153, "affin": [153, 465], "teqlinearfakequ": 153, "orig_lay": 153, "group_siz": [153, 158, 159, 379, 467], "teqmullinear": 153, "input_scal": 153, "trainabl": [153, 157], "teq": 153, "detector": 154, "transformerbasedmodelblockpatterndetector": 154, "pattern_lst": 154, "block_pattern": 154, "detect": [154, 158, 174, 184, 185, 270, 274, 323, 327, 332, 399, 441, 448, 449, 462, 473], "ffn": [154, 177], "get_modul": 155, "set_modul": [155, 158], "new_modul": [155, 158], "torchsmoothqu": [155, 470], "q_func": [155, 188, 189, 232, 233, 306, 309, 311, 312, 362, 365, 366, 370, 372, 373, 403, 438, 473], "traced_model": [155, 156], "whose": [155, 163, 176, 298, 433, 470, 473], "could": [155, 163, 176, 188, 189, 202, 232, 233, 246, 303, 328, 361, 382, 397, 399, 426, 438, 461, 462, 465, 467, 470, 474], "absorb": [155, 159, 163], "later": [155, 163, 471], "graphtrac": 155, "trace_and_fuse_sub_graph": 156, "is_qat": 156, "tequant": 157, "get_embedding_contigu": 158, "contigu": 158, "is_fused_modul": 158, "_propagate_qconfig_help": 158, "collate_torch_pr": 158, "fetch": [158, 162, 193, 237, 404, 422], "collate_result": 158, "input2tupl": 158, "append_attr": 158, "fx_model": 158, "fx_white_list": 158, "append": [158, 303, 306, 365, 399, 426, 438, 461], "graphmodul": [158, 399, 466], "addit": [158, 185, 382, 404, 405, 425, 452, 468, 473], "dir": [158, 200, 244, 392, 422, 430, 433], "generate_activation_observ": 158, "observ": [158, 405, 469, 471, 473], "what": [158, 177, 198, 242, 327, 361, 382, 397, 402, 463], "check_cfg_and_qconfig": 158, "op_infos_from_cfg": 158, "output_tensor_ids_op_nam": 158, "paser_cfg": 158, "ops_nam": 158, "get_quantizable_ops_from_cfg": 158, "input_tensor_ids_op_nam": 158, "update_sq_scal": 158, "ipex_config_path": 158, "smoothquant_scale_info": 158, "ipex_config": 158, "json": [158, 201, 217, 245, 259, 422, 440, 459, 467, 472], "temporari": [158, 393, 397], "auto_copi": 158, "fetch_modul": 158, "op_nam": [158, 181, 184, 185, 317, 378, 393, 394, 404, 438, 462, 471], "simple_infer": 158, "get_example_input": 158, "example_inp": 158, "get_fallback_ord": 158, "confidence_batch": [158, 473], "fallback": [158, 185, 309, 310, 368, 370, 371, 429, 439, 466, 473], "requantize_cfg": 158, "fall": 158, "back": [158, 217, 223, 259, 424, 458], "order": [158, 267, 268, 303, 306, 309, 318, 320, 321, 365, 370, 379, 399, 424, 437, 464, 470, 471, 473], "confid": 158, "ordered_op": 158, "get_mse_order_per_fp32": 158, "mse": [158, 159, 184, 185, 266, 274, 308, 319, 327, 361, 369, 393, 424, 437, 464, 467, 468], "influenc": [158, 462], "last": [158, 170, 180, 184, 185, 421, 439, 441, 443, 448, 452, 465, 470], "fallback_ord": 158, "get_mse_order_per_int8": 158, "get_torch_vers": 158, "match_datatype_pattern": 158, "calculate_quant_min_max": 158, "unsign": [158, 318, 379, 405], "qmin": 158, "qmax": 158, "get_depth": 158, "depth": [158, 425, 466], "get_dict_at_depth": 158, "target_depth": 158, "nest": [158, 182], "get_element_under_depth": 158, "ops_lst": 158, "get_op_type_by_nam": 158, "quantizable_op": 158, "collect_weight_info": 158, "fc": [158, 185], "rtn": [158, 467], "param": [158, 165, 190, 218, 224, 234, 274, 306, 327, 365, 393, 403, 440, 473], "configu": 158, "_type_": 158, "qdq_weight_asym": 159, "quantil": [159, 473], "return_int": 159, "clip": [159, 467, 470], "choos": [159, 202, 246, 402, 434, 446, 463, 468, 470, 473, 475], "qdq_weight_sym": 159, "full_rang": 159, "rang": [159, 203, 204, 217, 247, 248, 259, 380, 382, 402, 403, 405, 422, 424, 425, 426, 427, 438, 461, 462, 465, 467, 470, 472], "amax": 159, "qdq_weight_actor": 159, "quant_weight": 159, "group": [159, 178, 284, 434, 462, 467, 471, 472, 473, 476], "how": [159, 166, 170, 176, 177, 184, 185, 217, 259, 260, 297, 398, 399, 401, 402, 403, 421, 422, 425, 426, 427, 433, 437, 438, 452, 453, 456, 457, 458, 462, 463, 465, 470, 472, 473, 474, 475], "mani": [159, 327, 361, 421, 435, 467, 473, 475], "element": [159, 176, 180, 198, 242, 270, 297, 323, 393, 422, 434, 437, 462, 467, 470], "zp": [159, 470], "rtn_quantiz": 159, "32": [159, 172, 379, 427, 433, 470, 476], "sym_full_rang": 159, "nearst": 159, "num": [159, 393, 421], "configir": 159, "fc2": 159, "int32": [159, 422], "gptq_quantiz": 159, "get_module_input_output": 159, "module_hook_config": 159, "calib_func": [159, 361, 466], "help": [159, 226, 276, 440, 441, 447, 458, 467, 473, 474], "module_name_list": 159, "requir": [159, 184, 185, 191, 303, 336, 360, 399, 403, 404, 420, 421, 424, 426, 427, 431, 438, 439, 440, 442, 452, 458, 462, 465, 467, 468, 469, 470, 471, 473, 475], "fc1": 159, "input_valu": 159, "output_valu": 159, "awq_quant": 159, "absorb_dict": 159, "n_sampl": 159, "auto_scal": [159, 467], "mse_rang": [159, 467], "n_block": [159, 467], "5": [159, 163, 167, 184, 185, 204, 213, 219, 248, 256, 274, 327, 361, 403, 422, 429, 431, 437, 438, 462, 464, 465, 467, 470, 472, 473, 475, 476], "awq": [159, 467], "absorb_lay": 159, "absorbed_lay": 159, "fc3": 159, "salient": [159, 462], "oom": 159, "teq_quant": 159, "algorithm_registri": 160, "algorithm_typ": 160, "locat": [160, 180, 217, 259, 427, 444, 451, 455, 458, 465, 468, 472, 475], "registr": [160, 202, 209, 217, 246, 253, 259, 292], "algorithmschedul": 160, "conf": [160, 165, 166, 185, 188, 189, 218, 232, 233, 276, 283, 284, 286, 287, 288, 289, 294, 306, 309, 311, 312, 316, 328, 338, 361, 362, 365, 366, 370, 372, 373, 377, 380, 382, 399, 400, 402, 405, 420, 425, 432, 433, 438, 439, 440, 461, 465, 466, 467, 469, 470, 473], "control": [160, 184, 185, 399, 438, 462, 473], "phase": [160, 400, 438, 462, 465, 466, 473], "fastbiascorrect": [161, 164], "fast_bias_correct": [162, 184, 185, 319, 465], "weight_correct": [162, 184, 185, 319, 465], "kernel": [163, 184, 185, 403, 404, 473], "futur": [163, 188, 189, 220, 232, 233, 434, 438, 449, 474], "weightcorrect": 164, "1e": [164, 470, 475], "05": [164, 185, 274, 327, 437, 470, 476], "evalu": [165, 166, 176, 184, 188, 189, 200, 218, 232, 233, 244, 260, 267, 270, 271, 272, 274, 276, 320, 323, 324, 325, 327, 328, 338, 361, 382, 385, 400, 403, 404, 422, 425, 426, 433, 434, 437, 438, 439, 441, 447, 449, 452, 458, 460, 462, 465, 469, 471, 473, 475], "set_env_var": [165, 218], "env_var": [165, 218], "overwrite_exist": [165, 218], "env": [165, 218, 430], "alreadi": [165, 202, 216, 218, 246, 258, 403, 422, 434, 453, 456, 473], "set_all_env_var": [165, 218], "physic": [165, 218, 397, 420], "core": [165, 184, 185, 218, 420, 436, 451, 455, 476], "get_architectur": [165, 218], "architectur": [165, 218, 277, 280, 402, 420, 425, 438, 462, 463, 467, 474], "get_threads_per_cor": [165, 218], "thread": [165, 184, 185, 218, 355, 360, 421], "get_thread": [165, 218], "get_physical_id": [165, 218], "socket": [165, 218, 393, 476], "get_core_id": [165, 218], "id": [165, 216, 218, 258, 267, 269, 270, 271, 272, 320, 322, 323, 324, 325, 437, 469, 473], "get_bounded_thread": [165, 218], "core_id": [165, 218], "bind": [165, 218], "run_inst": 165, "b_dataload": [165, 184, 185, 420, 438], "b_func": [165, 420], "benchmarkconfig": [165, 184, 185, 420, 424, 438], "accuraci": [165, 180, 184, 185, 188, 189, 232, 233, 260, 265, 274, 289, 294, 302, 327, 328, 338, 361, 366, 380, 382, 390, 399, 402, 404, 405, 421, 422, 424, 426, 427, 428, 429, 437, 438, 449, 458, 460, 461, 462, 463, 464, 467, 468, 469, 470, 471, 474, 475, 476], "goal": [165, 260, 265, 289, 294, 302, 328, 361, 404, 421, 461, 465, 473], "prefer": [165, 265, 302, 361, 462, 467], "space": [165, 177, 184, 185, 188, 189, 232, 233, 265, 272, 277, 280, 281, 282, 302, 306, 309, 316, 325, 328, 361, 365, 370, 377, 397, 398, 400, 403, 404, 405, 462, 465, 475], "etc": [165, 166, 216, 258, 260, 265, 272, 289, 294, 302, 325, 328, 361, 392, 425, 434, 462, 469, 473], "user": [165, 174, 177, 180, 184, 185, 188, 189, 202, 205, 209, 217, 218, 224, 229, 232, 233, 246, 249, 253, 259, 265, 289, 294, 300, 302, 303, 327, 328, 338, 361, 366, 379, 382, 393, 399, 400, 402, 403, 404, 405, 410, 420, 421, 425, 426, 429, 431, 434, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 449, 452, 458, 460, 461, 462, 463, 465, 466, 468, 470, 471, 472, 473, 477], "generate_prefix": 165, "core_list": 165, "command": [165, 218, 382, 424, 427, 441, 443, 446, 451, 455, 459], "numactl": [165, 430, 444, 452], "call_on": 165, "cmd": [165, 459], "log_fil": [165, 354, 359], "window": [165, 420, 458, 459], "config_inst": 165, "raw_cmd": 165, "multi": [165, 172, 174, 177, 270, 323, 327, 361, 400, 421, 422, 434, 438, 460, 462, 465, 473], "trigger": [165, 177, 299, 398], "raw": [165, 201, 205, 208, 245, 249, 252, 309, 370, 437, 473], "summary_benchmark": 165, "summari": [165, 382, 424, 453, 456, 471, 476], "profil": [165, 319], "benchmark_with_raw_cmd": 165, "commend": 165, "fit_with_raw_cmd": 165, "cores_per_inst": [165, 184, 185, 420, 438, 464], "num_of_inst": [165, 184, 185, 420, 438, 464], "test": [165, 184, 185, 217, 259, 398, 402, 424, 435, 476], "fit": [165, 176, 184, 185, 306, 328, 361, 365, 380, 382, 399, 402, 420, 421, 422, 424, 427, 432, 433, 437, 438, 439, 440, 462, 465, 466, 467], "pb": [165, 184, 185, 328, 336, 361, 402, 420, 427, 432, 438, 440, 471, 476], "eval_dataload": [165, 184, 185, 188, 189, 232, 233, 303, 306, 309, 311, 312, 328, 361, 362, 365, 366, 370, 372, 373, 382, 420, 433, 437, 438, 465, 473], "compon": [166, 260, 266, 303, 319, 399, 424, 427, 435, 436, 441, 458, 461], "quantizationawaretrainingcallback": 166, "pruningcallback": 166, "distillationcallback": 166, "basecallback": 166, "design": [166, 199, 222, 227, 243, 327, 366, 400, 402, 438, 446, 449, 462, 465, 474], "mainli": [166, 179, 227, 301, 438, 462, 465], "prune": [166, 170, 171, 172, 175, 176, 177, 178, 179, 180, 184, 185, 227, 228, 266, 283, 284, 286, 287, 288, 292, 294, 295, 297, 298, 299, 301, 303, 319, 393, 402, 427, 428, 431, 432, 434, 461, 463, 474, 475], "distil": [166, 169, 184, 185, 219, 226, 227, 266, 319, 402, 428, 432, 434, 461, 474, 475], "In": [166, 176, 177, 178, 185, 199, 227, 243, 270, 297, 299, 323, 338, 397, 399, 400, 402, 403, 404, 421, 422, 424, 425, 426, 427, 437, 438, 448, 451, 452, 455, 460, 461, 462, 465, 466, 467, 469, 470, 471, 472, 473, 474], "adaptor": [166, 184, 185, 318, 379, 385, 402, 405, 434, 466, 468, 470, 471, 474], "deriv": [166, 170, 176, 177, 178, 179, 260, 297, 299, 301], "pipelin": [166, 260, 277, 278, 303, 426, 438, 461], "knowledg": [166, 167, 184, 185, 219, 260, 426, 428, 432, 434, 438, 440, 475], "transfer": [166, 207, 251, 260, 422, 425, 426, 438, 470], "teacher": [166, 184, 185, 260, 425, 426, 438, 476], "student": [166, 184, 185, 200, 226, 244, 260, 422, 425, 426, 476], "distillation_conf": [166, 181, 260], "_epoch_ran": [166, 260], "integ": [166, 176, 177, 184, 185, 260, 270, 274, 281, 297, 299, 323, 327, 380, 403, 405, 465, 470, 473], "indic": [166, 184, 185, 193, 198, 200, 237, 242, 244, 260, 270, 281, 323, 399, 421, 430, 467, 471], "much": [166, 170, 184, 185, 217, 259, 260, 425, 452, 470, 472], "epoch": [166, 177, 260, 299, 382, 421, 425, 426, 427, 438, 461, 462, 475], "ran": [166, 260], "eval_frequ": [166, 260], "frequenc": [166, 177, 184, 185, 260, 299, 438, 462, 475], "term": [166, 177, 178, 260, 398, 425, 436, 437, 460, 461, 473], "best_scor": [166, 260], "best": [166, 217, 259, 260, 265, 302, 309, 370, 397, 400, 435, 441, 447, 458, 460, 465, 467, 472, 473], "metric": [166, 184, 185, 188, 189, 221, 232, 233, 260, 265, 266, 281, 289, 294, 302, 303, 319, 328, 361, 382, 385, 400, 403, 404, 422, 424, 427, 438, 439, 465, 469, 471, 473, 474, 475, 476], "best_model": [166, 260, 467], "found": [166, 260, 402, 425, 439, 446, 470, 473, 476], "critet": [167, 219], "includ": [167, 170, 174, 176, 178, 184, 185, 200, 202, 209, 217, 219, 244, 246, 253, 259, 265, 275, 297, 302, 380, 393, 397, 398, 403, 404, 405, 421, 422, 424, 435, 436, 437, 438, 441, 444, 447, 452, 462, 465, 466, 471, 473], "tensorflowknowledgedistillationloss": [167, 219], "pytorchknowledgedistillationloss": [167, 219, 438], "pytorchintermediatelayersknowledgedistillationloss": [167, 219], "tensorflowcriterion": [167, 219], "pytorchcriterion": [167, 219], "criterion_registri": [167, 219], "criterion_typ": [167, 219], "registry_criterion": [167, 219], "knowledgedistillationframework": [167, 219], "student_model": [167, 185, 219, 438], "teacher_model": [167, 184, 185, 219, 425, 426, 438], "knowledgedistillationloss": [167, 219, 438, 475], "temperatur": [167, 184, 185, 219, 438, 475], "loss_typ": [167, 184, 185, 219, 438, 475], "ce": [167, 184, 185, 219, 438, 475], "loss_weight": [167, 184, 185, 219, 438, 475], "pytorchknowledgedistillationlosswrapp": [167, 219], "param_dict": [167, 219, 224], "tensorflowknowledgedistillationlosswrapp": [167, 219], "tensorflowknowledgedistillationlossextern": [167, 219], "intermediatelayersknowledgedistillationloss": [167, 219], "layer_map": [167, 185, 219, 425], "add_origin_loss": [167, 185, 219], "pytorch": [167, 170, 174, 176, 177, 184, 185, 199, 200, 202, 205, 209, 217, 219, 224, 226, 243, 244, 246, 249, 253, 259, 264, 265, 274, 275, 295, 297, 300, 302, 310, 319, 327, 328, 337, 361, 371, 386, 393, 399, 400, 402, 403, 404, 405, 421, 425, 426, 428, 431, 434, 435, 438, 439, 440, 441, 443, 446, 447, 448, 449, 458, 462, 463, 464, 467, 468, 470, 473, 475], "pytorchintermediatelayersknowledgedistillationlosswrapp": [167, 219], "selfknowledgedistillationloss": [167, 219], "selfknowledg": [167, 219], "pytorchselfknowledgedistillationloss": [167, 219], "pytorchselfknowledgedistillationlosswrapp": [167, 219], "pruner": [169, 266, 283, 284, 285, 286, 287, 289, 294, 295, 297, 300, 319, 438, 462, 475], "model_slim": [169, 171, 177], "auto_slim": [169, 171, 173], "pattern_analyz": [169, 171, 173], "weight_slim": [169, 171, 173, 177], "criteria": [169, 171, 184, 185, 265, 289, 294, 297, 299, 302, 399, 458, 470], "reg": [169, 171, 177], "schedul": [169, 171, 177, 178, 184, 185, 266, 295, 299, 319, 438, 461], "callback": [169, 289, 294, 382, 385, 399, 438, 461, 462, 465], "register_criterion": 170, "registri": [170, 176, 177, 178, 179, 297, 299, 301, 400], "get_criterion": 170, "pruningcriterion": 170, "about": [170, 393, 397, 421, 438, 466, 473, 474, 476], "module_nam": [170, 177, 178, 299, 393], "store": [170, 174, 177, 178, 184, 185, 202, 246, 292, 299, 433], "score": [170, 176, 177, 184, 185, 267, 268, 270, 271, 272, 274, 299, 320, 321, 323, 324, 325, 327, 368, 385, 399, 437, 460, 462, 469, 473], "magnitudecriterion": 170, "magnitud": [170, 184, 185, 266, 274, 285, 319, 327, 434, 462], "criterion_class": 170, "determin": [170, 176, 177, 184, 185, 387, 397, 399, 462, 465, 470], "gradientcriterion": 170, "gradient": [170, 283, 434, 438, 462, 476], "absolut": [170, 184, 185, 274, 327, 437, 438, 462, 465, 473], "snipcriterion": 170, "snip": [170, 184, 185, 299, 434, 462, 476], "product": [170, 402, 434, 439, 441, 442, 458, 463, 465, 469, 473], "singl": [170, 179, 184, 185, 193, 200, 217, 237, 244, 259, 270, 299, 301, 323, 327, 361, 399, 422, 424, 435, 462], "shot": [170, 177, 179, 227, 299, 301, 400, 434, 438, 462, 463], "connect": [170, 299, 458, 462, 469], "sensit": [170, 283, 299, 434, 462], "1810": [170, 299], "02340": [170, 299], "snipmomentumcriterion": 170, "snip_momentum": [170, 184, 185, 438, 462], "momentum": [170, 299, 434, 438, 462, 475], "mechan": [170, 462, 469, 474], "preserv": 170, "step": [170, 176, 177, 179, 184, 185, 297, 299, 301, 382, 404, 405, 424, 425, 426, 427, 438, 453, 456, 458, 461, 462, 464, 466, 467, 469, 470, 471, 473], "beta": 170, "snipmomentumblockcriterion": 170, "snip_momentum_block": 170, "retrainfreecriterion": 170, "retrain_fre": [170, 177], "auto": [172, 174, 184, 185, 304, 319, 363, 369, 393, 399, 441, 444, 446, 448, 449, 462, 465, 467], "slim": [172, 173, 174, 270, 323, 334, 336, 440, 462], "round_multipli": 172, "spars": [172, 177, 299, 422, 463], "automat": [172, 174, 175, 184, 185, 202, 205, 212, 213, 246, 249, 256, 265, 275, 302, 399, 402, 420, 422, 434, 438, 439, 441, 443, 446, 447, 449, 451, 452, 453, 455, 456, 458, 461, 462, 465, 470, 472, 473], "model_slim_ffn2": 172, "some": [172, 174, 184, 185, 200, 244, 298, 404, 405, 422, 424, 429, 435, 437, 438, 460, 462, 465, 466, 467, 470, 471, 473, 474, 476], "part": [172, 177, 297, 299, 399, 435, 439, 453, 456, 462, 470, 474], "perman": [172, 397, 462], "obtain": [172, 174, 177, 178, 180, 298, 399, 404, 462, 469, 470, 473], "acceler": [172, 425, 438, 441, 449, 458, 462, 463, 466, 467, 470, 473], "directli": [172, 184, 185, 199, 243, 270, 274, 298, 323, 327, 437, 438, 445, 462, 464, 465, 471], "sprase": 172, "multipl": [172, 184, 185, 186, 187, 191, 192, 200, 201, 203, 204, 205, 206, 207, 211, 214, 217, 224, 230, 231, 235, 236, 238, 244, 245, 247, 248, 249, 250, 251, 255, 257, 259, 275, 328, 329, 330, 332, 338, 420, 422, 429, 438, 461, 462, 469, 470, 473], "model_slim_mha": 172, "parse_auto_slim_config": 172, "ffn2_sparsiti": 172, "mha_spars": 172, "generate_ffn2_pruning_config": 172, "consecut": [172, 174, 175, 462], "generate_mha_pruning_config": 172, "head": [172, 174, 176, 177, 180, 462, 476], "get_attribut": 174, "level": [174, 366, 380, 389, 397, 470, 473], "descent": 174, "get_common_modul": 174, "layer1": [174, 184, 185, 438, 462, 465], "layer2": [174, 438, 462, 465], "nearest": [174, 217, 259, 467, 472], "father": 174, "print_iter": 174, "recipesearch": 174, "searcher": [174, 282], "root": [174, 200, 201, 202, 205, 244, 245, 246, 249, 274, 327, 422, 427, 437, 438, 475], "levelwis": 174, "wai": [174, 201, 202, 205, 245, 246, 249, 400, 405, 421, 422, 424, 437, 438, 441, 444, 459, 461, 462, 465, 467, 470, 473, 475], "huggingfac": [174, 177, 200, 244, 388, 422, 428, 432, 446, 447, 448, 449, 470, 476], "bert": [174, 185, 196, 199, 200, 217, 240, 243, 244, 259, 402, 422, 425, 437, 439, 446, 462, 472, 476], "recipe_sampl": 174, "bertattent": 174, "dens": [174, 179, 184, 185, 301, 462, 476], "infom": [174, 220], "basic": [174, 176, 184, 185, 216, 258, 266, 277, 297, 308, 312, 315, 319, 369, 373, 376, 382, 434, 435, 438, 464, 469], "searching_result": 174, "jitbasicsearch": 174, "placeholder_shap": 174, "placeholder_dtyp": 174, "By": [174, 184, 185, 267, 320, 404, 405, 437, 440, 451, 452, 455, 463, 473], "jit": [174, 184, 441, 443, 448, 470, 471], "script": [174, 267, 268, 271, 272, 320, 321, 324, 325, 427, 434, 441, 445, 448, 449, 452, 463], "them": [174, 200, 244, 399, 405, 421, 424, 429, 431, 433, 461, 462, 467, 473], "static_graph": 174, "flatten_static_graph": 174, "target_lay": 174, "linear2linearsearch": 174, "target_op_lut": 174, "lookup": 174, "tabl": [174, 177, 393, 405, 424, 429, 476], "code": [174, 188, 189, 218, 232, 233, 276, 300, 303, 361, 382, 399, 402, 403, 404, 405, 422, 425, 426, 427, 433, 434, 436, 437, 441, 443, 445, 446, 447, 449, 452, 458, 460, 461, 462, 463, 464, 465, 469, 470, 471, 472], "current_pattern": 174, "statu": [174, 390, 397, 421, 460, 462], "selfmhasearch": 174, "classifierheadsearch": 174, "final": [174, 177, 180, 299, 404, 438, 444, 460, 462, 465, 468, 473], "classifi": [174, 180, 200, 244, 274, 327, 422, 425], "classifierheadsearchertf": 174, "squeezer": 175, "postcompressionutil": 175, "librari": [175, 221, 266, 319, 355, 395, 398, 402, 435, 438, 439, 443, 452, 458, 463, 465], "relat": [175, 178, 260, 270, 289, 294, 297, 323, 379, 385, 405, 441, 462, 475], "linearcompress": 175, "root_linear": 175, "target_linear": 175, "also": [175, 199, 202, 217, 243, 246, 259, 267, 320, 327, 338, 361, 398, 400, 403, 404, 405, 421, 424, 428, 432, 434, 437, 438, 441, 446, 451, 452, 455, 458, 459, 460, 462, 463, 465, 466, 470, 473], "while": [175, 177, 180, 299, 306, 365, 403, 404, 422, 428, 434, 439, 441, 446, 458, 464, 465, 467, 470], "hidden": [175, 176, 297, 403], "layer_1": 175, "act_fn": 175, "layer_2": 175, "linearcompressioniter": 175, "linear_pattern": 175, "register_pattern": [176, 297], "sure": [176, 177, 179, 297, 299, 301, 420], "get_pattern": [176, 297], "assertionerror": [176, 177, 180, 297, 298, 299, 328], "basepattern": [176, 178], "unit": [176, 297, 398, 462], "e": [176, 184, 185, 397, 425, 428, 432, 441, 446, 447, 451, 455, 462, 467, 470, 473], "4x1": [176, 184, 185, 293, 438, 462, 476], "is_glob": [176, 297], "local": [176, 184, 185, 297, 393, 451, 455, 462, 469], "contrast": [176, 297, 472], "keep_mask_lay": 176, "invalid_lay": 176, "max_sparsity_ratio_per_op": [176, 177, 181, 184, 185, 438, 462], "sparsiti": [176, 177, 179, 180, 184, 185, 299, 301, 393, 402, 422, 434, 438, 474, 476], "reach": [176, 179, 184, 185, 301, 398, 402, 421, 462, 473], "min_sparsity_ratio_per_op": [176, 181, 184, 185, 438, 462], "minimum": [176, 184, 185, 405, 424, 438, 449, 462, 473], "target_spars": [176, 181, 184, 185, 438, 462, 464, 475], "patternnxm": [176, 297], "nxm": [176, 177, 184, 185, 293, 297, 462], "kept": [176, 297], "block_siz": [176, 297], "height": [176, 213, 217, 256, 259, 297, 427, 472, 475], "width": [176, 213, 217, 256, 259, 297, 427, 462, 465, 472, 475], "vertic": [176, 217, 259, 297, 472], "becaus": [176, 177, 217, 259, 297, 399, 465, 470, 472, 473], "patternninm": [176, 297], "n": [176, 184, 185, 201, 217, 245, 259, 268, 297, 321, 380, 405, 422, 424, 425, 462, 465, 467, 470, 472], "out": [176, 184, 185, 200, 201, 202, 244, 245, 246, 265, 297, 302, 398, 399, 402, 422, 441, 446, 451, 452, 453, 455, 456, 458, 462, 464, 465, 467], "continu": [176, 270, 297, 323, 400, 438, 459, 462, 474], "doc": [176, 184, 185, 297, 315, 316, 327, 361, 376, 377, 380, 393, 437, 438, 453, 456], "md": [176, 184, 185, 297, 327, 361, 404, 427, 465], "patternmha": 176, "mha": [176, 177], "register_prun": [177, 299], "parse_valid_pruner_typ": 177, "get_prun": [177, 299], "cuurent": [177, 299], "baseprun": 177, "current_sparsity_ratio": [177, 299], "global_step": [177, 299], "total": [177, 217, 259, 274, 299, 327, 422, 424, 462, 472, 476], "start_step": [177, 181, 184, 185, 299, 438, 462, 464], "end_step": [177, 181, 184, 185, 299, 438, 462, 464], "pruning_frequ": [177, 181, 184, 185, 438, 462], "target_sparsity_ratio": [177, 299], "show": [177, 393, 397, 425, 427, 438, 444, 459, 470, 473, 474], "basicprun": 177, "arrang": [177, 201, 202, 205, 245, 246, 249, 422, 462], "proce": 177, "regul": 177, "patternlockprun": [177, 287, 299], "parent": [177, 179, 293, 299, 301, 471], "blockmaskprun": 177, "grad": 177, "retrainfreeprun": 177, "pruner_class": 177, "rearrang": 177, "fast": [177, 184, 185, 402, 463], "retrain": [177, 426, 462], "effect": [177, 403, 463], "2204": 177, "09656": 177, "progressiveprun": 177, "interpol": [177, 217, 259, 437, 462, 472], "fine": [177, 200, 244, 422, 444, 462, 463, 465], "grain": [177, 462, 463, 473], "improv": [177, 398, 438, 441, 458, 459, 462, 463, 465, 466, 467, 473, 474, 476], "ad": [177, 200, 244, 267, 306, 320, 365, 404, 405, 424, 439, 441, 446, 449, 453, 456, 462, 471], "interv": [177, 462], "multiheadattentionprun": 177, "mha_modul": 177, "partial": [177, 462, 465], "qkv": 177, "feedward": 177, "simultan": [177, 441, 461, 464], "qkv_name": 177, "query_layer_nam": 177, "key_layer_nam": 177, "value_layer_nam": 177, "ffn_name": 177, "attention_ffn_nam": 177, "mha_nam": 177, "keep": [177, 180, 298, 366, 399, 403, 457, 458, 468], "qkv_modul": 177, "ffn_modul": 177, "mha_compress": 177, "mhacompress": 177, "modifi": [177, 202, 229, 246, 360, 379, 399, 405, 427, 431, 462, 475], "linear_lay": 177, "independ": [177, 355, 360, 405], "length": [177, 184, 185, 200, 217, 244, 259, 270, 323, 402, 422, 437, 463, 465, 472], "4x": [177, 400, 465], "subsequ": [177, 404, 441, 458], "head_mask": 177, "mha_head_s": 177, "similar": [177, 438, 464, 470, 473, 475], "mha_scor": 177, "regular": [178, 267, 298, 320], "register_reg": 178, "regulariz": 178, "get_reg_typ": 178, "get_reg": 178, "basereg": 178, "grouplasso": 178, "coeff": 178, "lasso": [178, 284, 434, 462], "select": [178, 185, 200, 244, 399, 400, 434, 435, 458, 462, 465, 471, 473], "reg_term": 178, "coeffient": 178, "register_schedul": [179, 301], "get_schedul": [179, 301], "pruningschedul": 179, "gradual": [179, 301, 462], "oneshotschedul": [179, 301], "iterativeschedul": [179, 301], "get_sparsity_ratio": 180, "elementwise_over_matmul_gemm_conv": 180, "elementwise_over_al": 180, "blockwise_over_matmul_gemm_conv": 180, "get_sparsity_ratio_tf": 180, "check_config": [180, 298], "prune_config": [180, 298], "everyth": [180, 298, 446], "reset_none_to_default": 180, "undefin": [180, 298], "update_param": 180, "process_weight_config": 180, "global_config": [180, 283, 284, 286, 287, 288], "local_config": [180, 184, 185, 283, 284, 286, 287, 288], "default_config": 180, "pruners_info": 180, "process_yaml_config": 180, "check_key_valid": 180, "template_config": 180, "user_config": 180, "process_and_check_config": [180, 298], "process_config": [180, 298], "parse_last_linear": 180, "often": [180, 421, 425, 461, 462], "act": [180, 198, 242, 397], "might": [180, 399, 473], "caus": [180, 404, 421, 442, 462, 467], "drop": [180, 270, 298, 323, 438, 439, 452, 462, 467, 476], "parse_last_linear_tf": 180, "parse_to_prun": [180, 298], "parse_to_prune_tf": 180, "generate_pruner_config": 180, "dotdict": [180, 181, 185, 338, 393], "prunerv2": 181, "pruning_typ": [181, 184, 185, 438, 462], "pruning_scop": [181, 184, 185, 438, 462], "sparsity_decay_typ": [181, 184, 185, 438, 462], "pruning_op_typ": [181, 184, 185, 438, 462], "reg_typ": 181, "criterion_reduce_typ": 181, "resume_from_pruned_checkpoint": 181, "similiar": 181, "cfg_fname": 181, "parser": 181, "quantization_conf": 181, "pruning_conf": 181, "graph_optimization_conf": [181, 265], "mixedprecision_conf": 181, "benchmark_conf": 181, "nasconfig": [181, 185, 278, 280, 400], "approach": [181, 184, 185, 277, 278, 280, 399, 400, 422, 425, 434, 438, 446, 458, 463, 464, 467, 473, 475], "search_spac": [181, 185, 277, 280, 281, 282], "search_algorithm": [181, 185, 266, 279, 319, 400], "na": [181, 185, 266, 319, 332, 434, 476], "procedur": [181, 400, 462], "deep_get": [182, 338], "dot": [182, 439, 465], "eg": [182, 202, 246, 422, 464], "person": [182, 397, 463], "john": 182, "deep": [182, 402, 403, 404, 421, 434, 435, 438, 439, 441, 443, 446, 447, 449, 452, 458, 463, 465, 473, 474, 476], "deep_set": [182, 338], "sex": [182, 397], "male": 182, "instead": [182, 185, 199, 243, 393, 444, 446, 449, 462], "notat": [182, 185, 393], "pythonic_config": 183, "random_se": [184, 185, 306, 365, 438, 475], "1978": [184, 185], "workspac": [184, 185, 392, 393, 440], "default_workspac": [184, 185], "resume_from": [184, 185, 393], "tensorboard": [184, 185, 385, 393, 403, 438], "set_random_se": [184, 185, 393], "set_workspac": [184, 185, 393], "set_resume_from": [184, 185, 393], "set_tensorboard": [184, 185, 393], "directori": [184, 185, 201, 202, 245, 246, 336, 388, 390, 392, 393, 422, 427, 430, 451, 453, 455, 456, 471], "histori": [184, 185, 392, 393, 458, 473], "nc_workspac": [184, 185], "datetim": [184, 185], "now": [184, 185, 217, 259, 399, 400, 405, 422, 427, 449, 464, 472, 473], "strftime": [184, 185], "d_": [184, 185], "h": [184, 185, 217, 259, 427, 472], "resum": [184, 185, 188, 189, 232, 233, 311, 312, 362, 365, 366, 370, 372, 373], "wa": [184, 185, 403, 438, 463, 473], "flag": [184, 185, 268, 321, 424], "visual": [184, 185, 402, 449, 458, 469, 471, 473, 474], "displai": [184, 185, 315, 316, 376, 377, 393, 458], "2022": [184, 185, 402, 436, 467, 470, 476], "workspace_path": [184, 185], "accuracycriterion": [184, 185, 438, 473], "higher_is_bett": [184, 185, 327, 361, 473, 475], "rel": [184, 185, 338, 438, 464, 473, 475, 476], "tolerable_loss": [184, 185, 438, 473], "01": [184, 185, 438, 464, 467, 473, 475, 476], "higher": [184, 185, 188, 189, 232, 233, 281, 328, 361, 382, 399, 424, 425, 429, 437, 462, 465, 469], "accept": [184, 185, 380, 397, 420, 421], "accuracy_criterion": [184, 185, 338, 438, 460, 464, 473, 475], "avail": [184, 185, 332, 406, 408, 412, 415, 418, 428, 430, 432, 434, 451, 455, 462, 473, 476], "warmup": [184, 185, 420, 438, 464], "inter_num_of_thread": [184, 185, 355, 360, 438, 464], "intra_num_of_thread": [184, 185, 355, 360, 438, 464], "benchmark": [184, 185, 220, 266, 303, 319, 338, 393, 402, 410, 440, 441, 445, 449, 452, 458, 473, 474, 475, 476], "empti": [184, 185, 444], "onnxrt_trt_ep": [184, 185, 439, 465], "onnxrt_cuda_ep": [184, 185, 439, 465], "inter": [184, 185, 198, 202, 242, 246], "intra": [184, 185], "quantizationconfig": 184, "post_training_static_qu": [184, 422, 438, 464, 473], "calibration_sampling_s": [184, 185, 438], "op_type_dict": [184, 185, 405, 464, 465, 467, 473], "op_name_dict": [184, 185, 424, 438, 465, 473], "strategy_kwarg": [184, 185, 469, 473], "timeout": [184, 185, 438, 464, 473, 475], "max_trial": [184, 185, 438, 473], "quant_level": [184, 185, 473], "posttrainingquantconfig": [184, 185, 361, 399, 402, 405, 421, 424, 429, 432, 437, 438, 440, 465, 466, 467, 469, 470, 473], "quantizationawaretrainingconfig": [184, 185, 382, 399, 426, 429, 438, 465, 466, 473], "cv": [184, 185, 462], "object_detect": [184, 185, 270, 323], "nlp": [184, 185, 300, 446, 462, 465], "recommendation_system": [184, 185], "explicitli": [184, 185, 433, 462], "overrid": [184, 185, 393], "quantiztaion": [184, 185], "smooth_quant_arg": [184, 185, 465, 470], "gemm_to_matmul": [184, 185, 465], "graph_optimization_level": [184, 185, 464, 465], "disable_al": [184, 185, 464], "enable_bas": [184, 185], "enable_extend": [184, 185], "enable_al": [184, 185], "first_conv_or_matmul_quant": [184, 185, 465], "last_conv_or_matmul_quant": [184, 185, 465], "pre_post_process_quant": [184, 185, 465], "preprocess": [184, 185, 200, 217, 244, 259, 379, 385, 427, 472], "postprocess": [184, 185, 211, 214, 217, 221, 259, 266, 319, 327, 361, 385, 403, 438, 471, 472], "vaild": [184, 185], "dedic": [184, 185], "quant_format": [184, 185, 264, 429], "constraint": [184, 185, 265, 302, 438, 462, 469, 473, 475], "conv1": [184, 185, 465, 475], "tuning_strategi": [184, 185], "guarante": [184, 185, 438], "models": [184, 185, 338, 438, 460, 464], "footprint": [184, 185, 265, 289, 294, 302, 338, 426, 438, 460, 462, 464], "earli": [184, 185, 438, 465, 473, 475], "stop": [184, 185, 438, 473, 474, 475], "field": [184, 185, 202, 246, 270, 323, 399, 403, 405, 427, 438, 469, 473, 475], "exit": [184, 185, 305, 362, 364, 438, 475], "excluded_precis": [184, 185, 466], "exclud": [184, 185, 403, 466], "conserv": [184, 185, 319, 369], "use_distributed_tun": 184, "weightpruningconfig": [184, 185, 229, 438, 461, 462], "pruning_config": [184, 185, 438], "9": [184, 185, 399, 435, 438, 462, 464, 470, 473, 475, 476], "98": [184, 185, 438, 462, 464, 476], "exp": [184, 185, 438, 462], "link": [184, 185, 200, 244, 327, 361, 422, 429, 451, 455, 458, 476], "90": [184, 185, 475, 476], "magnitude_progress": [184, 185], "snip_progress": [184, 185], "snip_momentum_progress": [184, 185], "pattern_lock": [184, 185, 266, 285, 319], "most": [184, 185, 274, 327, 424, 438, 439, 462, 465, 467, 470, 473, 476], "feasibl": [184, 185], "situat": [184, 185, 427, 462], "unstructur": [184, 185, 293, 434, 462, 476], "8x1": [184, 185], "channelx1": [184, 185, 462], "1xchannel": [184, 185, 462], "itrex": [184, 185], "start": [184, 185, 217, 259, 270, 323, 366, 435, 463, 472, 473, 474, 477], "togeth": [184, 185, 217, 259, 425, 435, 445, 463, 471, 472], "sort": [184, 185, 309, 370, 424, 473], "sinc": [184, 185, 265, 267, 289, 294, 302, 320, 425, 429, 435, 437, 452, 458, 461, 467, 468], "lead": [184, 185, 425, 438, 439, 462, 467, 470], "increas": [184, 185, 423, 434, 441, 458, 473], "cube": [184, 185, 462], "6": [184, 185, 402, 431, 465, 470, 473, 476], "update_config": [184, 185], "10": [184, 185, 202, 246, 306, 365, 402, 420, 422, 429, 435, 438, 462, 464, 472, 473, 476], "knowledgedistillationlossconfig": [184, 185, 425, 426, 438, 461], "hyperparamet": [184, 185, 315, 469, 470, 473], "entropi": [184, 185, 473], "groundtruth": [184, 185, 270, 323], "label": [184, 185, 188, 189, 200, 202, 203, 204, 205, 208, 213, 217, 222, 232, 233, 244, 246, 247, 248, 249, 252, 256, 259, 267, 269, 274, 320, 322, 327, 328, 361, 382, 399, 421, 422, 424, 437, 438, 465, 472], "tpye": [184, 185], "sum": [184, 185, 274, 327, 424, 425], "distillationconfig": [184, 185, 382, 425, 426, 438, 461], "prepare_compress": [184, 185, 382, 399, 425, 426, 438, 461, 462, 465], "criterion_conf": [184, 185], "d_conf": [184, 185, 426, 438, 461], "compression_manag": [184, 185, 382, 399, 425, 426, 438, 461, 462, 465], "sgd": [184, 185, 224, 425, 438, 464, 475], "learning_r": [184, 185, 438, 464, 475], "callabl": [184, 185, 272, 325, 382, 421], "featur": [184, 185, 200, 201, 213, 217, 244, 245, 256, 259, 398, 402, 420, 421, 423, 425, 438, 439, 440, 441, 445, 446, 449, 458, 462, 463, 468, 472], "altern": [184, 185, 361], "distil_loss": [184, 185, 438], "crossentropyloss": [184, 185, 219, 425, 438], "lr": [184, 185, 425, 427, 438], "onnxrt_dnnl_ep": [185, 439, 465], "tuningcriterion": [185, 438, 460, 469, 473], "tuning_criterion": [185, 438, 460, 469, 473], "weight_onli": [185, 467], "ptq": [185, 361, 399, 424, 427, 434, 438, 465, 470, 471, 473], "tri": [185, 473], "meet": [185, 191, 303, 305, 362, 364, 399, 404, 460, 463, 464, 465, 467, 471, 473], "bayesian": [185, 266, 282, 308, 319, 369, 400, 464], "mse_v2": [185, 266, 308, 319, 369], "hawq_v2": [185, 319, 369], "exhaust": [185, 266, 282, 308, 319, 369, 464], "docstr": [185, 380], "copi": [185, 298, 393, 421], "deepcopi": 185, "model_origin": [185, 361, 466], "qat_op_name_dict": 185, "intermediatelayersknowledgedistillationlossconfig": [185, 425], "relationship": 185, "student_layer_nam": 185, "student_layer_output_process": 185, "teacher_layer_nam": 185, "teacher_layer_output_process": 185, "desir": [185, 213, 217, 256, 259, 404, 405, 472], "either": [185, 270, 323, 442, 446, 461, 464, 465], "serv": [185, 336], "numer": [185, 274, 327, 405, 439, 463, 465], "abbrevi": 185, "layer_nam": 185, "l1": 185, "selfknowledgedistillationlossconfig": [185, 425, 438], "student1_layer_name1": 185, "teacher_layer_name1": 185, "student2_layer_name1": 185, "student1_layer_name2": 185, "teacher_layer_name2": 185, "student2_layer_name2": 185, "soft": 185, "l2": [185, 462], "hard": [185, 421, 424], "resblock": 185, "deepst": 185, "02": [185, 470, 476], "mixedprecisionconfig": [185, 328, 380, 438, 439], "mixedprecis": [185, 275, 438], "fp16": [185, 316, 377, 465], "won": [185, 465], "work": [185, 265, 302, 401, 404, 421, 425, 453, 456, 462, 466, 467, 468, 470, 471], "mix_precis": [185, 319, 380, 438, 439], "converted_model": [185, 328, 438, 439], "exportconfig": 185, "14": [185, 263, 264, 429, 435, 470, 476], "dynamic_ax": [185, 264, 429], "qlinear": [185, 202, 209, 246, 253, 274, 327, 403, 448], "ax": [185, 264], "onnxqlinear2qdqconfig": 185, "onnxqlinear2qdq": 185, "torch2onnxconfig": [185, 429], "torch2onnx": [185, 261, 266, 319], "qdq_op_fp32_bia": 185, "qdq_op_int32_bia": 185, "qdq_op_fp32_bias_qdq": 185, "resnet50": [185, 402, 424, 427, 429, 439, 441, 445, 462, 465, 469, 476], "int8_onnx_config": [185, 429], "randn": [185, 429], "224": [185, 213, 256, 402, 422, 427, 429, 432, 438, 441, 472, 475], "batch_siz": [185, 190, 192, 195, 196, 197, 198, 199, 200, 201, 220, 234, 236, 239, 240, 241, 242, 243, 244, 245, 264, 400, 421, 422, 427, 429, 433, 438, 441, 465], "tf2onnxconfig": [185, 429], "tf2onnx": [185, 261, 266, 319], "keyword": 185, "argument": [185, 380, 400, 424, 467], "output_graph": 185, "42": [185, 282, 476], "dyna": [185, 266, 279, 319, 400, 434, 464], "sigopt": [186, 187, 230, 231, 266, 319, 463], "tpe": [186, 187, 230, 231, 266, 319], "sigopttunestrategi": [188, 232], "q_dataload": [188, 189, 232, 233, 306, 309, 311, 312, 362, 365, 366, 370, 372, 373, 433, 473], "eval_func": [188, 189, 232, 233, 303, 306, 309, 311, 312, 328, 361, 362, 365, 366, 370, 372, 373, 380, 382, 399, 421, 422, 424, 425, 426, 427, 438, 465, 466, 467, 473, 475], "eval_metr": [188, 189, 328, 361, 362, 365, 366, 370, 372, 373, 382, 437, 465], "q_hook": [188, 189, 232, 233, 306, 309, 311, 312, 362, 365, 366, 370, 372, 373], "hpo": [188, 232], "mandatori": [188, 189, 232, 233, 361, 438, 475], "yield": [188, 189, 198, 220, 232, 233, 242, 306, 328, 361, 365, 380, 382, 421, 465, 473], "_": [188, 189, 232, 233, 361, 399, 400, 403, 404, 421, 424, 425, 427, 429, 431, 438, 439, 440, 441, 447, 451, 453, 455, 456, 460, 462, 465, 467, 468, 469, 470, 471, 473, 475], "well": [188, 189, 232, 233, 328, 361, 382, 400, 402, 422, 462, 465, 468, 470, 475], "taken": [188, 189, 232, 233, 328, 361, 382, 465], "reserv": [188, 189, 232, 233], "abl": [188, 189, 232, 233, 328, 361, 382, 449, 458, 465], "tuner": [188, 189, 232, 233, 265, 302, 328, 361, 382, 465], "scalar": [188, 189, 232, 233, 328, 361, 382, 437, 465], "pseudo": [188, 189, 232, 233, 361, 382, 471], "someth": [188, 189, 202, 232, 233, 246, 361, 382], "fefin": [189, 233], "tpetunestrategi": [189, 233], "basedatalod": [190, 234], "basedataload": [190, 195, 197, 234, 239, 241], "last_batch": [190, 192, 195, 196, 197, 199, 220, 234, 236, 239, 240, 241, 243], "rollov": [190, 192, 195, 196, 197, 199, 220, 234, 236, 239, 240, 241, 243, 421], "collate_fn": [190, 192, 193, 195, 196, 197, 199, 220, 234, 236, 237, 239, 240, 241, 243, 422], "sampler": [190, 192, 194, 195, 196, 197, 199, 220, 234, 236, 238, 239, 240, 241, 243, 255, 266, 315, 376, 421, 427], "batch_sampl": [190, 192, 195, 196, 197, 199, 220, 234, 236, 239, 240, 241, 243], "num_work": [190, 192, 195, 196, 197, 199, 220, 234, 236, 239, 240, 241, 243, 438, 465], "pin_memori": [190, 192, 195, 196, 197, 199, 220, 234, 236, 239, 240, 241, 243], "shuffl": [190, 192, 195, 196, 197, 199, 220, 234, 236, 239, 240, 241, 243, 421, 438, 465], "_generate_dataload": [190, 234], "check_dataload": 191, "default_col": [192, 236], "outer": [192, 236], "defaultdataload": [192, 199, 236, 243], "definit": [193, 198, 237, 242], "style": [193, 207, 237, 251, 380, 398, 422, 433], "drop_last": [193, 198, 237, 242], "iterablefetch": [193, 237], "indexfetch": [193, 237], "base_dataload": [194, 238, 255, 266], "default_dataload": [194, 238, 255, 266], "fetcher": [194, 238, 255, 266], "mxnet_dataload": [194, 238, 255, 266], "onnxrt_dataload": [194, 238, 255, 266, 354], "pytorch_dataload": [194, 238, 255, 266], "tensorflow_dataload": [194, 238, 255, 266, 359], "mxnetdataload": [195, 239], "onnxrtbertdataload": [196, 240], "varient": [196, 240], "onnxrtdataload": [196, 240, 354], "pytorchdataload": [197, 241], "data_sourc": [198, 242, 385], "__iter__": [198, 202, 242, 246, 421, 422, 438], "matter": [198, 242, 466], "iterablesampl": [198, 242], "squential": [198, 242], "your": [198, 200, 242, 244, 398, 421, 422, 424, 427, 436, 438, 441, 444, 445, 446, 451, 452, 453, 455, 456, 458, 462, 463, 469, 471, 473, 474], "clear": [198, 242, 403, 431, 437, 438], "iterabledataset": [198, 202, 242, 246], "try": [198, 242, 399, 424, 462, 465, 470, 473], "indexdataset": [198, 242], "__getitem__": [198, 202, 217, 242, 246, 259, 422, 438], "__len__": [198, 202, 242, 246, 422], "retriev": [198, 242], "sequentialsampl": [198, 242], "sequenti": [198, 242, 303, 305, 362, 364, 473], "batchsampl": [198, 242], "tfdatadataload": [199, 243], "tensorflow1": [199, 243], "coupl": [199, 243], "satisfi": [199, 243, 424, 435], "usag": [199, 243, 270, 276, 303, 323, 380, 404, 422, 427, 428, 441, 449, 460, 464, 472], "tf1": [199, 243, 440], "although": [199, 243, 469], "tensorflowbertdataload": [199, 243], "tensorflowmodelzoobertdataload": [199, 243], "zoo": [199, 217, 243, 259, 402, 428, 432, 476], "tensorflowdataload": [199, 243, 359], "pytorchbertdataset": [200, 244], "model_typ": [200, 244, 393, 422], "construct": [200, 203, 204, 207, 215, 220, 222, 223, 225, 244, 247, 248, 251, 327, 332, 336, 379, 385, 397, 404, 405, 422, 427, 462, 473], "tensordataset": [200, 244, 422], "repo": [200, 244, 396, 422, 428, 451, 453, 455, 456, 477], "easi": [200, 244, 302, 429, 438, 463, 465, 469], "load": [200, 216, 217, 244, 258, 259, 328, 336, 361, 392, 393, 404, 421, 451, 455, 459, 464, 465, 470], "squad": [200, 217, 244, 259, 271, 272, 274, 324, 325, 327, 422, 437, 462, 472, 476], "distilbert": [200, 244, 402, 422, 439, 463, 476], "xlnet": [200, 244, 422, 476], "xlm": [200, 244, 422, 476], "101": [200, 244, 274, 327, 437, 470, 476], "2043": [200, 244], "2001": [200, 244], "onnxrtbertdataset": [200, 244], "data_dir": [200, 244, 422], "model_name_or_path": [200, 244, 422, 438, 446, 447], "max_seq_length": [200, 217, 244, 259, 422, 472], "do_lower_cas": [200, 216, 217, 244, 258, 259, 422, 472], "mrpc": [200, 244, 274, 327, 422, 437, 446, 462, 473, 476], "dynamic_length": [200, 244, 422], "shortcut": [200, 244, 422], "token": [200, 211, 214, 217, 244, 255, 257, 259, 266, 267, 268, 319, 320, 321, 388, 422, 437, 438, 467, 469, 470, 472, 473], "longer": [200, 217, 244, 259, 422, 472], "truncat": [200, 217, 244, 259, 422, 472], "shorter": [200, 217, 244, 259, 422, 472], "lowercas": [200, 244, 422], "choic": [200, 244, 403, 422, 437, 470], "qqp": [200, 244, 422, 437, 476], "qnli": [200, 244, 422, 437, 476], "rte": [200, 244, 422, 437, 476], "st": [200, 244, 422, 437], "cola": [200, 244, 422, 437, 476], "mnli": [200, 244, 422, 437, 476], "wnli": [200, 244, 422, 437], "mobilebert": [200, 244, 422, 425, 476], "roberta": [200, 244, 422, 476], "uncas": [200, 217, 244, 259, 422, 472, 476], "load_and_cache_exampl": [200, 244], "cach": [200, 244, 430, 465, 467], "convert_examples_to_featur": [200, 217, 244, 259], "max_length": [200, 244], "label_list": [200, 244, 274, 327], "output_mod": [200, 244], "classif": [200, 217, 244, 259, 274, 300, 327, 425, 429, 437, 447, 462, 463], "pad_token": [200, 244], "pad_token_segment_id": [200, 244], "mask_padding_with_zero": [200, 244], "inputfeatur": [200, 217, 244, 259], "properti": [200, 244, 379, 436], "input_id": [200, 217, 244, 259, 438], "vocabulari": [200, 216, 217, 244, 258, 259, 472], "attention_mask": [200, 244, 438], "usual": [200, 244, 404, 424, 425, 461, 462, 465, 470], "NOT": [200, 244, 431], "token_type_id": [200, 244, 438], "segment": [200, 244, 268, 270, 321, 323], "portion": [200, 244], "problem": [200, 244, 274, 327, 437, 439, 459], "regress": [200, 244, 424], "seq_length": [200, 244], "tensorflowbertdataset": [200, 244], "label_fil": [200, 217, 244, 259, 422, 472], "tfrecord": [200, 201, 202, 244, 245, 246, 422], "guid": [200, 244, 399, 402, 422, 425, 435, 441, 449, 458, 477], "parsedecodebert": [200, 244], "tensorflowmodelzoobertdataset": [200, 201, 244, 245], "num_cor": [200, 201, 205, 244, 245, 249, 422], "28": [200, 201, 205, 244, 245, 249, 422, 476], "coco": [201, 208, 212, 245, 252, 270, 274, 323, 327, 437, 462], "parsedecodecoco": [201, 245], "cocorecorddataset": [201, 245], "interleav": [201, 245, 422], "parallel": [201, 245, 355, 360, 422, 438, 473], "cocoraw": [201, 245, 422], "img_dir": [201, 245, 422], "val2017": [201, 245, 422], "anno_dir": [201, 245, 422], "annot": [201, 245, 270, 323, 380, 404, 405, 422, 437, 462, 473], "instances_val2017": [201, 245, 422], "jpg": [201, 205, 207, 245, 249, 251, 422], "imag": [201, 202, 205, 207, 213, 217, 245, 246, 249, 251, 256, 259, 270, 323, 422, 427, 429, 462, 464, 470, 471, 472, 476], "coconpi": [201, 245, 422], "npy_dir": [201, 245, 422], "npy": [201, 245, 422], "tensorflowdataset": [202, 246], "pytorchdataset": [202, 246], "mxnetdataset": [202, 246], "onnxrtqldataset": [202, 246], "onnxrtitdataset": [202, 246], "IT": [202, 209, 246, 253, 463], "pytorchmxnetwrapdataset": [202, 246], "datafunc": [202, 246], "pytorchmxnetwrapfunct": [202, 217, 246, 259], "framework_dataset": [202, 246], "convent": [202, 246, 270, 323, 425], "imageclassifi": [202, 246], "tensorflow_itex": [202, 205, 207, 209, 246, 249, 251, 253, 421, 464], "onnxrt_qdq": [202, 209, 246, 253, 464], "onnxrt_qlinearop": [202, 209, 217, 246, 253, 259, 464], "onnxrt_integerop": [202, 209, 217, 246, 253, 259, 464], "pytorch_ipex": [202, 209, 246, 253, 438, 464, 475], "pytorch_fx": [202, 209, 246, 253, 438, 464], "dataset_registri": [202, 246], "dataset_typ": [202, 246], "dataset_format": [202, 246], "data_format": [202, 213, 246, 256], "raw_imag": [202, 246], "overwrit": [202, 246, 451, 455], "download_url": [202, 246], "filenam": [202, 246, 393, 422], "md5": [202, 246], "download": [202, 246, 422, 424, 435, 468], "address": [202, 246, 397, 439, 463], "gen_bar_updat": [202, 246], "progress": [202, 246, 452, 458, 462, 465], "bar": [202, 246, 458, 463], "check_integr": [202, 246], "fpath": [202, 246], "checksum": [202, 246], "calculate_md5": [202, 246], "chunk_siz": [202, 246], "cifar10": [202, 246, 422], "cifar100": [202, 246, 422], "databas": [202, 246], "otherwis": [202, 217, 246, 259, 393, 397, 404, 422, 453, 456, 464, 472], "www": [202, 246, 422, 476], "toronto": [202, 246, 422], "kriz": [202, 246, 422], "cifar": [202, 246, 422, 476], "tar": [202, 246, 422, 424, 453, 456], "gz": [202, 246, 422, 424, 453, 456], "manual": [202, 246, 422, 441, 447, 449, 452], "subset": [202, 205, 246, 249, 422], "internet": [202, 246, 422], "put": [202, 246, 422, 425], "again": [202, 246, 422, 466], "pytorchcifar10": [202, 246], "mxnetcifar10": [202, 246], "tensorflowcifar10": [202, 246], "pytorchcifar100": [202, 246], "mxnetcifar100": [202, 246], "tensorflowcifar100": [202, 246], "mnist": [202, 246, 422, 427], "nation": [202, 246, 397], "institut": [202, 246], "standard": [202, 217, 246, 259, 404, 424, 429, 437, 472, 473], "technologi": [202, 246, 438], "fashionmnist": [202, 246, 422], "npz": [202, 246, 422], "idx1": [202, 246, 422], "ubyt": [202, 246, 422], "idx3": [202, 246, 422], "t10k": [202, 246, 422], "pytorchmnist": [202, 246], "mxnetmnist": [202, 246], "tensorflowmnist": [202, 246], "pytorchfashionmnist": [202, 246], "mxnetfashionmnist": [202, 246], "tensorflowfashionmnist": [202, 246], "imagefold": [202, 246, 422, 427, 438], "expect": [202, 246, 397, 398, 430, 458, 465, 467, 473], "subfold": [202, 246], "belong": [202, 246, 332, 465], "class_1": [202, 246, 422], "xxx": [202, 246, 398, 422, 438], "png": [202, 246, 422], "xxy": [202, 246, 422], "xxz": [202, 246, 422], "class_n": [202, 246, 422], "123": [202, 246, 422, 472], "nsdf3": [202, 246, 422], "asd932_": [202, 246, 422], "categori": [202, 246, 269, 322, 420, 422, 448], "mxnetimagefold": [202, 246], "tensorflowtfrecorddataset": [202, 246], "tensorflowimagerecord": [202, 246], "imagenet": [202, 205, 213, 246, 249, 256, 400, 424, 438, 447, 462, 471, 472, 475, 476], "000": [202, 246, 402, 422], "001": [202, 246, 422, 427, 470, 475], "099": [202, 246, 422], "tensorflowvocrecord": [202, 246], "pascal": [202, 246], "voc": [202, 246, 274, 327], "2012": [202, 246], "00000": [202, 246], "00004": [202, 246], "00001": [202, 246], "00003": [202, 246], "dummydataset": [203, 204, 247, 248], "127": [203, 204, 247, 248, 422, 465, 470], "float32": [203, 204, 217, 247, 248, 259, 270, 323, 403, 420, 422, 438, 465, 470, 472], "stand_norm": [203, 204, 247, 248, 422], "dummy_v2": [204, 248, 422], "sparse_dummy_v2": [204, 248, 422], "label_shap": [204, 248, 422], "sparsedummydataset": [204, 248], "dense_shap": [204, 248, 422], "sparse_ratio": [204, 248, 422], "imagenetraw": [205, 249, 422], "data_path": [205, 249, 422], "image_list": [205, 249, 422], "img1": [205, 249, 422], "img2": [205, 249, 422], "imgx": [205, 249, 422], "val_map": [205, 249, 422], "txt": [205, 249, 422, 424, 435], "pytorchimagenetraw": [205, 249], "mxnetimagenetraw": [205, 249], "tensorflowimagenetraw": [205, 249], "inteltensorflow": [205, 207, 249, 251, 435], "tensorflowimagenetdataset": [205, 249], "onnxrtimagenetdataset": [205, 249], "bert_dataset": [206, 211, 250, 255, 266, 319], "coco_dataset": [206, 211, 250, 255, 266, 319], "dummy_dataset": [206, 211, 250, 255, 266, 319], "dummy_dataset_v2": [206, 211, 250, 255, 266, 319], "imagenet_dataset": [206, 211, 250, 255, 266, 319], "style_transfer_dataset": [206, 211, 250, 255, 266, 319], "styletransferdataset": [207, 251], "content_fold": [207, 251, 422], "style_fold": [207, 251, 422], "crop_ratio": [207, 251, 422], "resize_shap": [207, 251, 422], "256": [207, 213, 251, 256, 422, 427, 438, 472], "image_format": [207, 251, 422], "holder": [207, 251, 422], "labelbalancecocorecordfilt": [208, 252], "balanc": [208, 252, 467, 470], "labelbalancecocorawfilt": [208, 252], "tensorflowfilt": [209, 253], "onnxrtqlfilt": [209, 253], "onnxrtitfilt": [209, 253], "pytorchfilt": [209, 253], "mxnetfilt": [209, 253], "filter_registri": [209, 253], "filter_typ": [209, 253], "__call__": [209, 253], "coco_filt": [210, 211, 254, 255, 266, 319], "imagenet_transform": [211, 214, 255, 257, 266, 319], "parsedecodecocotransform": 212, "decod": [212, 213, 256, 267, 320, 437, 472], "quantizedinput": [213, 256, 472], "labelshift": [213, 256, 472], "label_shift": [213, 256, 472], "parsedecodeimagenet": [213, 256, 472], "proto": [213, 217, 256, 259, 472], "parsedecodeimagenettransform": [213, 256], "tensorflowtransposelastchannel": 213, "tensorflowshiftrescal": 213, "rescal": [213, 217, 259, 472], "tensorflowresizecropimagenettransform": [213, 256], "random_crop": [213, 256, 472], "resize_sid": [213, 256, 472], "resize_method": [213, 256], "bilinear": [213, 217, 256, 259, 472], "random_flip_left_right": [213, 256, 472], "mean_valu": [213, 256, 472], "channels_last": [213, 256, 441], "subpixel": [213, 256], "rgb": [213, 256], "seri": [213, 256, 402, 435, 438, 472], "applic": [213, 256, 405, 429, 441, 458, 463, 467, 470, 471, 472, 474], "crop": [213, 217, 256, 259, 422, 472], "flip": [213, 217, 256, 259, 472], "left": [213, 217, 256, 259, 452, 458, 470, 472], "right": [213, 256, 270, 323, 397, 399, 458, 470, 472], "std": [213, 217, 256, 259, 438, 472], "bilinearimagenettransform": [213, 256], "central_fract": [213, 256, 472], "875": [213, 256, 472], "fraction": [213, 256, 472], "onnxbilinearimagenettransform": [213, 256], "onnxresizecropimagenettransform": [213, 256], "std_valu": [213, 256], "229": [213, 256, 438], "225": [213, 256, 438], "resizewithaspectratio": [213, 256], "87": [213, 256, 476], "inter_pol": [213, 256], "cv2": [213, 256], "inter_area": [213, 256], "aspect": [213, 217, 256, 259, 472], "postprocess_cl": [215, 225, 438], "user_postprocess": [215, 225], "convert_to_unicod": [216, 258], "unicod": [216, 258], "assum": [216, 258, 270, 281, 323, 403, 431, 458], "utf": [216, 258], "load_vocab": [216, 258], "vocab_fil": [216, 217, 258, 259, 472], "convert_by_vocab": [216, 258], "vocab": [216, 258], "whitespace_token": [216, 258], "whitespac": [216, 258, 272, 325], "clean": [216, 258, 398, 438], "piec": [216, 258, 267, 320, 437, 467], "fulltoken": [216, 258], "tokenzi": [216, 258], "basictoken": [216, 258], "punctuat": [216, 258, 267, 272, 320, 325], "lower": [216, 217, 258, 259, 272, 325, 366, 426, 462, 463, 465, 470, 472, 473], "wordpiecetoken": [216, 258], "unk_token": [216, 258], "unk": [216, 258], "max_input_chars_per_word": [216, 258], "200": [216, 258, 399, 473], "wordpiec": [216, 217, 258, 259, 472], "concat_gener": [217, 259], "inc": [217, 259, 397, 402, 404, 441, 448, 458, 463, 464, 468, 473], "tensorflowtransform": [217, 259], "mxnettransform": [217, 259], "pytorchtransform": [217, 259], "onnxrtqltransform": [217, 259], "onnxrtittransform": [217, 259], "transform_registri": [217, 259], "transform_typ": [217, 259], "basetransform": [217, 259], "tensorflowwrapfunct": [217, 259], "transform_func": [217, 259], "pytorchmxnettransform": [217, 259], "get_torchvision_map": [217, 259], "torchvis": [217, 259, 428, 432, 441, 447], "composetransform": [217, 259], "transform_list": [217, 259, 472], "compos": [217, 259, 385, 472], "croptoboundingbox": [217, 259, 472], "offset_height": [217, 259, 472], "offset_width": [217, 259, 472], "target_height": [217, 259, 472], "target_width": [217, 259, 472], "box": [217, 259, 270, 274, 323, 327, 399, 437, 441, 452, 458, 471, 472, 473], "coordin": [217, 259, 306, 365, 472, 473], "top": [217, 259, 265, 274, 289, 294, 302, 327, 437, 458, 472], "corner": [217, 259, 403, 405, 472], "horizont": [217, 259, 472], "mxnetcroptoboundingbox": [217, 259], "onnxrtcroptoboundingbox": [217, 259], "tensorflowcroptoboundingbox": [217, 259], "resizewithratio": [217, 259, 472], "min_dim": [217, 259, 472], "800": [217, 259, 472], "max_dim": [217, 259, 472], "1365": [217, 259, 472], "constant_valu": [217, 259], "longest": [217, 259, 472], "side": [217, 259, 422, 452, 472], "doesn": [217, 259, 403, 427, 438, 439, 459, 475], "exce": [217, 259, 472], "tensorflowresizewithratio": [217, 259], "perm": [217, 259, 472], "permut": [217, 259, 472], "tensorflowtranspos": [217, 259], "mxnettranspos": [217, 259], "pytorchtranspos": [217, 259], "randomverticalflip": [217, 259, 472], "randomli": [217, 259, 282, 306, 365, 400, 470, 472, 473], "tensorflowrandomverticalflip": [217, 259], "randomhorizontalflip": [217, 259, 438, 472], "tensorflowrandomhorizontalflip": [217, 259], "toarrai": [217, 259, 472], "pil": [217, 259, 472], "casttftransform": [217, 259], "castonnxtransform": [217, 259], "castpytorchtransform": [217, 259], "centercroptftransform": [217, 259], "center": [217, 259, 401, 402, 435, 472, 473], "paddedcentercroptransform": [217, 259], "crop_pad": [217, 259], "resizetftransform": [217, 259], "bicub": [217, 259, 472], "resizepytorchtransform": [217, 259], "randomcroptftransform": [217, 259], "randomresizedcroppytorchtransform": [217, 259], "08": [217, 259, 472, 476], "randomresizedcropmxnettransform": [217, 259], "randomresizedcroptftransform": [217, 259], "normalizetftransform": [217, 259], "deviat": [217, 259, 424, 472], "broadcast": [217, 259, 427, 472], "rescalekeraspretraintransform": [217, 259], "rescaletftransform": [217, 259], "rescaletransform": [217, 259], "alignimagechanneltransform": [217, 259], "dim": [217, 259, 470, 472], "align": [217, 259, 397, 472], "w": [217, 259, 462, 470, 472], "must": [217, 259, 270, 323, 398, 399, 404, 420, 421, 435, 465, 472], "pytorchalignimagechannel": [217, 259], "tondarraytransform": [217, 259], "resizemxnettransform": [217, 259], "resizetransform": [217, 259], "cropresizetftransform": [217, 259], "boundari": [217, 259, 472], "area": [217, 259, 270, 323, 437, 472], "pytorchcropresizetransform": [217, 259], "mxnetcropresizetransform": [217, 259], "cropresizetransform": [217, 259], "centercroptransform": [217, 259], "mxnetnormalizetransform": [217, 259], "pytorchnormalizetransform": [217, 259], "normalizetransform": [217, 259], "randomcroptransform": [217, 259], "randomresizedcroptransform": [217, 259], "get_final_text": [217, 259], "pred_text": [217, 259], "orig_text": [217, 259], "project": [217, 259, 396, 397, 398, 463, 469, 473, 477], "squadexampl": [217, 259], "qas_id": [217, 259], "question_text": [217, 259], "doc_token": [217, 259], "orig_answer_text": [217, 259], "start_posit": [217, 259], "end_posit": [217, 259], "is_imposs": [217, 259], "simpl": [217, 259, 435, 438, 469, 470, 473], "answer": [217, 259, 271, 272, 324, 325, 397, 462, 472, 476], "posit": [217, 259, 397, 437, 441], "unique_id": [217, 259], "example_index": [217, 259], "doc_span_index": [217, 259], "token_to_orig_map": [217, 259], "token_is_max_context": [217, 259], "input_mask": [217, 259, 438], "segment_id": [217, 259, 438], "read_squad_exampl": [217, 259], "input_fil": [217, 259], "doc_strid": [217, 259, 472], "max_query_length": [217, 259, 472], "output_fn": [217, 259], "inputbatch": [217, 259], "collecttransform": [217, 259], "10833": [217, 259], "tfsquadv1posttransform": [217, 259], "n_best_siz": [217, 259, 472], "20": [217, 259, 470, 472, 475, 476], "384": [217, 259, 472], "64": [217, 259, 400, 470, 472, 476], "max_answer_length": [217, 259, 472], "30": [217, 259, 428, 432, 434, 470, 472, 476], "nbest_predict": [217, 259, 472], "question": [217, 259, 271, 272, 324, 325, 397, 398, 403, 435, 441, 462, 470, 472, 476], "anoth": [217, 259, 267, 276, 320, 393, 424, 425, 451, 455, 472, 473], "long": [217, 259, 430, 472], "document": [217, 259, 380, 398, 404, 405, 410, 427, 439, 443, 453, 456, 457, 468, 472, 474], "chunk": [217, 259, 472], "tfmodelzoocollecttransform": [217, 259], "tfsquadv1modelzooposttransform": [217, 259], "squadv1": [217, 259, 472], "see": [217, 259, 267, 320, 397, 399, 401, 436, 438, 451, 452, 455, 458, 459, 467, 470, 471, 473], "parsedecodevoctransform": [217, 259], "conf_fname_or_obj": [218, 227, 260, 265, 275, 276, 277, 278, 280, 289, 294, 302], "thei": [218, 380, 397, 425, 431, 438, 446, 460], "possibl": [218, 424, 461, 462, 466, 473], "unnecessari": [218, 438], "tensorflowcrossentropyloss": 219, "pytorchcrossentropyloss": 219, "tensorflowsparsecategoricalcrossentropi": 219, "sparsecategoricalcrossentropyloss": 219, "setter": 220, "calib_dataload": [220, 303, 361, 399, 402, 421, 422, 424, 432, 433, 437, 438, 465, 466], "reason": [220, 397, 404, 421, 467, 471, 473], "know": [220, 427, 468], "known": [220, 306, 365, 438, 471, 473], "open": [221, 266, 319, 385, 395, 397, 402, 429, 430, 438, 453, 456, 459, 463], "metric_cl": [222, 327, 361, 438], "user_metr": [222, 327, 361], "alwai": [222, 270, 323, 327, 361, 424, 437, 438], "recommend": [222, 327, 403, 422, 431, 449, 452, 457, 459, 462, 464, 473], "set_backend": 223, "tensorflowoptim": 224, "pytorchoptim": 224, "optimizer_registri": 224, "optimizer_typ": 224, "cross": [224, 274, 327, 433, 473], "tensorflowsgd": 224, "tensorflowadamw": 224, "tensorflow_addon": 224, "adamw": 224, "tensorflowadam": 224, "adam": [224, 475], "pytorchsgd": 224, "record_output": 226, "output_process": 226, "get_activ": 226, "f": [229, 425, 427, 465, 467, 470], "pickle_modul": 229, "pickle_protocol": 229, "_use_new_zipfile_seri": 229, "prepare_prun": [229, 462], "opt": [229, 402, 446, 470, 473], "tensorflowimagefold": 246, "qlinear2qdq": [261, 266, 319], "qlinearop": [262, 424, 434, 449, 465, 476], "check_model": 262, "modelproto": [262, 328, 440], "onnx_qlinear_to_qdq": 262, "input_name_to_nod": 262, "destin": [262, 276], "tf_to_fp32_onnx": 263, "tf_to_int8_onnx": 263, "int8_model": [263, 264, 403], "get_node_map": 264, "fp32_onnx_path": 264, "module_node_map": 264, "get_quantizable_onnx_op": 264, "quantize_nod": 264, "dynamic_quant_export": 264, "pt_fp32_model": 264, "pt_int8_model": 264, "weight_typ": 264, "s8": 264, "static_quant_export": 264, "_quantiz": 264, "torch_to_fp32_onnx": 264, "do_constant_fold": 264, "verbos": [264, 306, 365], "torch_to_int8_onnx": 264, "achiev": [265, 302, 429, 438, 461, 462, 463, 465, 471, 473], "across": [265, 275, 302, 328, 423, 438, 462, 470, 473], "variou": [265, 275, 302, 328, 405, 434, 441, 462, 464], "dl": [265, 275, 289, 294, 302, 328, 424, 433, 445, 458, 463, 476], "bring": [265, 302, 452, 470], "unifi": [265, 302, 403, 404, 405, 421, 433, 434, 437, 438, 440], "vari": [265, 289, 294, 302, 462, 470, 476], "roc": [265, 274, 289, 294, 302, 327], "flexibl": [265, 289, 294, 302, 425, 462], "via": [265, 289, 294, 302, 397, 427, 434, 438, 441, 458, 462], "popular": [266, 319, 395, 402, 403, 404, 425, 428, 429, 432, 438, 462, 465, 467, 473, 474], "techniqu": [266, 319, 395, 402, 434, 438, 441, 461, 462, 463, 464, 465, 474, 475, 476], "bleu": [266, 268, 273, 319, 321, 326, 437, 462], "bleu_util": [266, 273, 319, 326], "coco_label_map": [266, 273, 319, 326], "coco_tool": [266, 273, 319, 326], "evaluate_squad": [266, 273, 319, 326], "f1": [266, 271, 273, 274, 319, 324, 326, 327, 427, 437, 438, 469, 476], "basic_na": [266, 279, 319], "nas_util": [266, 279, 319], "pruner_legaci": [266, 319], "gradient_sensit": [266, 285, 319], "group_lasso": [266, 285, 319], "pruning_recip": [266, 319], "tile_pattern": [266, 290, 291], "pytorch_prun": [266, 319], "logger": [266, 295, 319, 383, 386, 393], "prune_util": [266, 295, 319], "tuning_sampl": [266, 308, 314, 319, 369, 375], "tuning_spac": [266, 308, 314, 315, 317, 319, 369, 375, 376, 378], "tuning_struct": [266, 308, 314, 315, 316, 319, 369, 375, 376, 377], "auto_mixed_precis": [266, 308, 319, 369], "graph_optim": [266, 319], "mixed_precis": [266, 319, 328, 438], "model_convers": [266, 319], "pruning_v2": [266, 319], "unicoderegex": [267, 320], "hoc": [267, 320], "hack": [267, 320], "recogn": [267, 320, 473], "nondigit_punct_r": [267, 320], "compil": [267, 320, 438], "express": [267, 320, 397], "preced": [267, 320, 470], "digit": [267, 320, 393, 463], "punct_nondigit_r": [267, 320], "symbol_r": [267, 320], "bleu_token": [267, 320], "mose": [267, 320, 467], "smt": [267, 320], "mosesdecod": [267, 320], "mteval": [267, 320], "v14": [267, 320], "pl": [267, 320], "l954": [267, 320], "l983": [267, 320], "bilingu": [267, 320], "understudi": [267, 320], "qualiti": [267, 320], "machin": [267, 320, 429, 435, 444, 458, 463, 470, 471], "translat": [267, 268, 320, 321, 462, 473], "natur": [267, 320, 429], "approxim": [267, 268, 320, 321, 404, 437], "glue": [267, 274, 320, 327, 422, 437, 438, 447], "word": [267, 320, 437, 462, 467, 476], "ngram": [267, 320, 437], "breviti": [267, 268, 320, 321, 437], "penalti": [267, 268, 320, 321, 437], "doe": [267, 320, 379, 421, 422, 437, 438, 468, 472], "beam": [267, 320, 437], "tensor2tensor": [268, 321], "bleu_hook": [268, 321], "compute_bleu": [268, 321], "reference_corpu": [268, 321], "translation_corpu": [268, 321], "max_ord": [268, 321], "use_bp": [268, 321], "against": [268, 321], "gram": [268, 321], "bleu_scor": [268, 321], "third": [270, 323, 436], "parti": [270, 323, 436, 465], "pycocotool": [270, 323, 430, 435], "noth": [270, 323, 473], "thu": [270, 323, 438, 462, 465], "cannot": [270, 323, 399, 430, 471], "jonathanhuang": [270, 323], "image_id": [270, 323, 437], "encod": [270, 323, 472], "invok": [270, 323, 404], "groundtruth_dict": [270, 323], "exportgroundtruthtococo": [270, 323], "groundtruth_boxes_list": [270, 323], "groundtruth_classes_list": [270, 323], "max_num_class": [270, 323], "output_path": [270, 323], "detections_list": [270, 323], "exportdetectionstococo": [270, 323], "detection_boxes_list": [270, 323], "detection_scores_list": [270, 323], "detection_classes_list": [270, 323], "cocowrapp": [270, 323], "loadannot": [270, 323], "cocoevalwrapp": [270, 323], "agnostic_mod": [270, 323], "computemetr": [270, 323], "detection_typ": [270, 323], "bbox": [270, 323, 399, 437], "hold": [270, 306, 323, 365, 422], "iou_typ": [270, 323], "iou_thr": [270, 274, 323, 327, 437], "map_point": [270, 274, 323, 327, 437], "cocoev": [270, 323], "mscoco": [270, 323], "Then": [270, 323, 404, 424, 451, 453, 455, 456, 470, 473], "exportsingleimagegroundtruthtococo": [270, 323], "next_annotation_id": [270, 323], "category_id_set": [270, 323], "groundtruth_box": [270, 323], "groundtruth_class": [270, 323], "groundtruth_mask": [270, 323], "groundtruth_is_crowd": [270, 323], "ingest": [270, 323], "here": [270, 323, 380, 404, 422, 427, 428, 429, 431, 432, 437, 446, 453, 456, 458, 465, 468, 469, 476], "ones": [270, 323, 462], "exportsingleimagedetectionstococo": [270, 323], "uniqu": [270, 303, 323, 465], "assign": [270, 323, 393, 427, 464, 473], "num_gt_box": [270, 323], "num_detect": [270, 274, 323, 327, 437, 438, 475], "image_height": [270, 323], "image_width": [270, 323], "detection_mask": [270, 323], "crowd": [270, 323], "insid": [270, 323, 425, 426, 459, 462, 473], "exportsingleimagedetectionboxestococo": [270, 323], "detection_box": [270, 323, 438, 475], "detection_scor": [270, 323, 438, 475], "detection_class": [270, 323, 438, 475], "exporsingleimagedetectionboxestococo": [270, 323], "exportsingleimagedetectionmaskstococo": [270, 323], "allenai": [271, 272, 324, 325], "bi": [271, 272, 324, 325], "att": [271, 272, 324, 325], "flow": [271, 272, 324, 325, 399, 400, 438], "f1_score": [271, 272, 324, 325], "ground_truth": [271, 272, 324, 325], "ground": [271, 272, 324, 325], "truth": [271, 272, 324, 325], "metric_max_over_ground_truth": [271, 272, 324, 325], "metric_fn": [271, 272, 324, 325], "exact_match_scor": [271, 324], "exact": [271, 324], "averag": [271, 272, 274, 324, 325, 327, 437, 438, 473], "articl": [271, 272, 324, 325], "paragraph": [271, 272, 324, 325], "qa": [271, 272, 324, 325], "cantain": [271, 272, 324, 325], "normalize_answ": [272, 325], "extra": [272, 325, 438], "newlin": [272, 325, 393], "tab": [272, 325, 458, 471], "harmon": [272, 274, 325, 327], "recal": [272, 274, 325, 327], "answer_start": [272, 325], "177": [272, 325], "denver": [272, 325], "bronco": [272, 325], "nfl": [272, 325], "team": [272, 325, 397, 466], "afc": [272, 325], "super": [272, 325, 400], "bowl": [272, 325], "50": [272, 325, 400, 404, 470, 476], "56be4db0acb8001400a502ec": [272, 325], "form": [272, 325, 424, 425, 458], "percentag": [272, 325, 475], "tensorflowmetr": [274, 327], "maintain": [274, 327, 397, 398, 402, 440, 441, 453, 456, 467, 468], "pytorchmetr": [274, 327], "mxnetmetr": [274, 327], "onnxrtqlmetr": [274, 327], "onnxrtitmetr": [274, 327], "metric_registri": [274, 327], "metric_typ": [274, 327], "decorator_metr": [274, 327], "basemetr": [274, 327, 361], "single_output": [274, 327], "hvd": [274, 327, 427], "wrappytorchmetr": [274, 327], "wrapmxnetmetr": [274, 327], "wraponnxrtmetr": [274, 327], "proport": [274, 327], "were": [274, 327, 444, 462], "pred_list": [274, 327], "pytorchloss": [274, 327], "mae": [274, 327, 437], "compare_label": [274, 327, 361, 437], "actual": [274, 327, 427, 470], "rmse": [274, 327, 437, 473], "squar": [274, 309, 327, 370, 424, 437, 470, 473], "tensorflowtopk": [274, 327], "k": [274, 327, 361, 437], "among": [274, 327, 452, 470], "outcom": [274, 327], "num_correct": [274, 327], "num_sampl": [274, 327], "generaltopk": [274, 327], "cocomapv2": [274, 327, 437], "anno_path": [274, 327, 437], "map_kei": [274, 327], "detectionboxes_precis": [274, 327], "output_index_map": [274, 327, 437], "tensorflowmap": [274, 327], "tensorflowcocomap": [274, 327], "tensorflowvocmap": [274, 327], "squadf1": [274, 327, 437], "miou": [274, 327], "num_class": [274, 327], "21": [274, 327, 446, 447, 463, 470, 476], "iou": [274, 327], "intersect": [274, 327, 403, 437], "union": [274, 327, 382, 437], "onnxrtglu": [274, 327], "dlrm": [274, 327], "modelconvers": 276, "typic": [276, 303, 400, 402, 426, 428, 432, 462, 476], "basicna": 277, "model_build": [277, 280], "conf_fnam": 277, "nasbas": [280, 400], "nas_registri": 281, "nas_method": 281, "create_search_space_pool": 281, "idx": [281, 422], "enumer": [281, 382, 403, 425, 426, 427, 438, 461, 462, 471], "find_pareto_front": 281, "pareto": [281, 400], "front": [281, 400], "n_point": 281, "n_metric": 281, "n_pareto_point": 281, "gridsearch": 282, "grid": [282, 400], "whole": [282, 405, 465, 476], "randomsearch": 282, "bayesianoptimizationsearch": 282, "gradientsensitivityprun": 283, "pytorchmodel": [283, 284, 286, 287, 288, 337], "overwritten": [283, 284, 286, 287, 288, 446], "grouplassoprun": 284, "legaci": 285, "basicmagnitudeprun": 286, "lock": [287, 288, 434, 461, 462], "pruner_registri": 288, "clase": 288, "pruningconf": [289, 294], "tfpruningcallback": [289, 294], "input_model": [289, 294, 440, 471], "pure": [289, 294, 462], "pattern_registri": 292, "pattern_typ": 292, "patternbas": 292, "mask_shap": [292, 293], "is_contigu": 292, "tile": 293, "tilepatternbas": 293, "tilepattern_1x1": 293, "1x1": [293, 425, 438, 462], "tilepattern_2x2": 293, "2x2": [293, 470], "tilepattern_1x16": 293, "1x16": 293, "tilepattern_4x1": 293, "tilepattern_1x2": 293, "1x2": [293, 470], "reset_non_value_to_default": 298, "obejct": 298, "parse_not_to_prun": 298, "update_frequency_on_step": [299, 464], "max_sparsity_ratio_per_lay": [299, 464], "magnitudeprun": 299, "snipprun": 299, "snipmomentumprun": 299, "moreoev": 299, "least": [300, 438, 462, 473], "templat": [300, 438, 462], "tree": [300, 316, 377], "huggingface_model": 300, "eager": [300, 360, 427, 434, 465, 466, 471], "config_file_path": 300, "pruner_info": 300, "quantconf": 302, "server": [303, 458], "seper": 303, "opt_model": [303, 438], "fulli": [303, 438, 465, 470], "train_func": [303, 382, 427, 438, 465], "automixedprecisiontunestrategi": [304, 363], "basictunestrategi": [305, 364], "stage": [305, 310, 362, 364, 371, 425, 462, 471, 473], "polici": [305, 309, 362, 364, 370, 397, 402, 475, 477], "bayesiantunestrategi": [306, 365], "acq_max": [306, 365], "ac": [306, 365], "gp": [306, 365], "y_max": [306, 365], "n_warmup": [306, 365], "10000": [306, 365, 462], "n_iter": [306, 365], "acquisit": [306, 365], "gaussian": [306, 365, 473], "relev": [306, 365, 404, 405], "limit": [306, 365, 393, 402, 424, 425, 467, 468, 471], "acq": [306, 365], "randomst": [306, 365], "scipi": [306, 365], "x_max": [306, 365], "targetspac": [306, 365], "pbound": [306, 365], "9527": [306, 365, 438, 475], "allow": [306, 365, 425, 427, 437, 438, 439, 464, 470, 473, 475], "bayesianoptim": [306, 365], "exhaustivetunestrategi": [307, 367], "msetunestrategi": [309, 370], "mse_v2tunestrategi": [310, 371], "revert": [310, 318, 371, 379, 473], "randomtunestrategi": [311, 372], "strategy_registri": [312, 373, 473], "tunestrategi": [312, 373, 473], "tuningsamplerregistri": [315, 376], "tuningsampl": [315, 376], "tuningord": [315, 376], "Not": [315, 316, 376, 377, 393, 400], "tuningspac": [315, 316, 376, 377], "tuning_order_lst": [315, 376], "initial_op_tuning_cfg": [315, 376], "modelwisetuningsampl": [315, 376], "tuning_items_prior": [315, 376], "op_dtype_dict": [315, 376], "optuningconfig": [315, 316, 317, 376, 377, 378], "optypewisetuningsampl": [315, 376], "opwisetuningsampl": [315, 376], "fallbacktuningsampl": [315, 376], "op_dtyp": [315, 376], "accumul": [315, 376, 473], "skip_first": [315, 376], "smoothquantsampl": 315, "tuningitem": [316, 377], "item_typ": [316, 377], "pattern_to_intern": [316, 377], "default_dtyp": [316, 377], "pattern_to_path": [316, 377], "quant_mode_from_pattern": [316, 377], "internal_pattern": [316, 377], "initial_tuning_cfg_with_quant_mod": [316, 377], "op_name_typ": [316, 377], "step1": [316, 377], "step2": [316, 377], "complet": [316, 377, 403, 404, 465, 473, 475, 476], "step3": [316, 377], "step4": [316, 377], "step5": [316, 377], "op_quant_mod": [317, 378], "ordereddefaultdict": [318, 379], "extract_data_typ": [318, 379], "data_typ": [318, 379], "sign": [318, 379, 398, 405, 465, 469], "reverted_data_typ": [318, 379], "signed_flag": [318, 379], "get_adaptor_nam": [318, 379], "experiment": [319, 354, 359, 400, 422, 426, 427, 429, 438, 462, 464, 468, 472], "base_model": [319, 330], "keras_model": [319, 330], "mxnet_model": [319, 330], "nets_factori": [319, 330], "onnx_model": [319, 330, 354], "tensorflow_model": [319, 330, 359], "torch_model": [319, 330], "collect_layer_histogram": [319, 386], "create_obj_from_config": [319, 386], "kl_diverg": [319, 386], "load_huggingfac": [319, 386, 438], "neural_insights_util": [319, 386], "weights_detail": [319, 386], "sub_class": [327, 361], "register_customer_metr": 327, "tell": [327, 361, 464], "topk": [327, 361, 427, 437, 438, 465], "matrix": [327, 361, 402, 449, 474], "frozen": [328, 336, 361, 440], "savedmodel": [328, 336, 361, 476], "chould": 328, "onnx_ml_pb2": [328, 440], "hybirdblock": [328, 361], "paramt": [328, 382], "basemodel": 329, "plai": [329, 463, 467, 470], "role": [329, 467, 470], "kerasmodel": 331, "get_model_fwk_nam": 332, "fwk": 332, "mxnetmodel": 333, "net": 334, "factori": [334, 341, 343, 348, 351, 353, 358], "tfslimnetsfactori": 334, "onnxmodel": [335, 354], "get_model_typ": 336, "validate_graph_nod": 336, "validate_and_inference_input_output": 336, "output_tensor_nam": 336, "graph_sess": 336, "graph_def_sess": 336, "frozen_pb_sess": 336, "load_saved_model": 336, "saved_model_tag": 336, "signatur": 336, "saved_model_dir": 336, "tag": [336, 470, 471], "metagraphdef": 336, "keras_sess": 336, "slim_sess": 336, "checkpoint_sess": 336, "estimator_sess": 336, "saved_model_sess": 336, "tensorflowbasemodel": [336, 359], "tensorflowsavedmodelmodel": 336, "tensorflowqatmodel": 336, "tensorflowcheckpointmodel": 336, "checkpoint": [336, 392, 440], "tensorflowmodel": 336, "pytorchbasemodel": 337, "pytorchfxmodel": 337, "ipexmodel": 337, "driven": [338, 402, 438, 458, 460, 471], "objective_registri": 338, "objective_custom_registri": 338, "obj_cl": 338, "eural_compressor": 338, "objective_cl": 338, "user_object": 338, "__class__": 338, "__name__": 338, "objective_cfg": 338, "usr_cfg": 338, "user_obj_cfg": 338, "easili": [338, 403, 442, 446, 458, 460, 470], "peak": [338, 460], "multiobject": 338, "metric_criterion": 338, "metric_weight": 338, "obj_criterion": 338, "obj_weight": 338, "is_measur": 338, "parserfactori": 340, "onnxrtparserfactori": 342, "onnxprofilingpars": 344, "respons": [344, 345, 349, 465], "profilingpars": 345, "profilingresult": 346, "total_execution_tim": 346, "accelerator_execution_tim": 346, "cpu_execution_tim": 346, "op_run": 346, "op_defin": 346, "tensorflowparserfactori": 347, "tensorflowprofilingpars": 349, "profilerfactori": [350, 352, 357], "create_onnx_config": 355, "ort": 355, "sessionopt": 355, "delete_assign": 360, "create_tf_config": 360, "tf_modul": 360, "configproto": 360, "set_eager_execut": 360, "entir": [361, 382, 399, 404, 405, 462, 470], "autotunestrategi": 362, "conservativetunestrategi": 366, "o0": [366, 473], "who": [366, 397], "hawq_v2tunestrategi": 368, "made": [368, 403, 465, 468, 473], "impact": [368, 468, 473], "tunestrategymeta": 373, "metaclass": 373, "lowerbitssampl": 376, "blockfallbacktuningsampl": 376, "op_block_lst": 376, "target_dtyp": 376, "quantopt": 379, "quant_typ": 379, "quant_opt": 379, "preprocess_user_cfg": 379, "op_user_cfg": 379, "op_user_cfg_modifi": 379, "build_slave_faker_model": 379, "slave": [379, 473], "virtual": [379, 463], "fun": 380, "attribute1": 380, "module_debug_level1": 380, "debug": [380, 389, 424, 451, 455, 459, 473, 474], "function1": 380, "param1": 380, "param2": 380, "parameter1": 380, "parameter2": 380, "o": [380, 435, 443, 470], "function2": 380, "pep": 380, "484": 380, "output_model": [380, 438, 471], "function3": 380, "section": [380, 405, 424, 425, 426, 458, 462, 464, 475], "restructuredtext": 380, "liter": 380, "attributeerror": 380, "except": [380, 393], "generator1": 380, "example_gener": 380, "exampleclass": 380, "param3": 380, "public": [380, 397, 453, 456], "attr1": 380, "attr2": 380, "attr5": 380, "api_doc_exampl": 381, "loop": [382, 399, 400, 404, 405, 431, 469, 473], "compressionmanag": 382, "uesd": 382, "deal": 382, "pruningconfig": 382, "orchestr": [382, 402, 434, 474], "on_train_begin": [382, 399, 425, 426, 438, 461, 462, 465], "train_loop": [382, 438, 461], "on_epoch_begin": [382, 385, 425, 426, 438, 461], "on_step_begin": [382, 385, 425, 426, 438, 461, 462], "on_after_compute_loss": [382, 425, 426, 438, 461], "backward": [382, 425, 426, 427, 438, 461, 462, 465, 468], "on_before_optimizer_step": [382, 425, 426, 438, 461, 462], "on_step_end": [382, 385, 425, 426, 438, 461], "on_epoch_end": [382, 385, 425, 426, 438, 461], "on_train_end": [382, 425, 426, 438, 461, 462, 465], "path_to_sav": 382, "manag": [382, 385, 438, 441, 442, 452], "top1": [382, 437, 462, 465, 476], "callbacks_list": 382, "layerhistogramcollector": 383, "layer_tensor": 383, "include_lay": 383, "get_func_from_config": 385, "func_dict": 385, "get_preprocess": 385, "get_metr": 385, "get_postprocess": 385, "get_algorithm": 385, "algo": 385, "create_dataset": 385, "cfg_preprocess": 385, "cfg_filter": 385, "create_dataload": 385, "dataloader_cfg": 385, "create_eval_func": 385, "postprocess_cfg": 385, "fp32_baselin": [385, 403], "baselin": [385, 469, 471], "create_train_func": 385, "train_cfg": 385, "Their": 385, "auxiliari": 386, "optimizedmodel": 388, "from_pretrain": [388, 438], "save_for_huggingface_upstream": [388, 438], "output_dir": [388, 438, 446, 447], "msg": 389, "fatal": 389, "warn": 389, "warin": 389, "alia": [389, 393, 443, 448], "insight": [390, 402, 424, 463, 468, 473, 474], "register_neural_insights_workload": 390, "workload_loc": [390, 393], "workload_mod": 390, "workload": [390, 393, 463], "uuid": 390, "update_neural_insights_workload": 390, "workload_uuid": 390, "update_neural_insights_workload_accuracy_data": 390, "baseline_accuraci": 390, "optimized_accuraci": 390, "is_int8_model": 392, "checkpoint_dir": 392, "history_cfg": 392, "best_configur": 392, "best_model_weight": 392, "pt": [392, 440, 463, 465, 466, 467], "snapshot": 392, "cfg_from_fil": 393, "yaml_fil": [393, 422, 427], "lazyimport": 393, "lazi": 393, "till": [393, 473], "decorat": 393, "time_limit": 393, "get_siz": 393, "seen": [393, 403], "recurs": 393, "compute_spars": 393, "fault_tolerant_fil": 393, "equal_dict": 393, "d2": 393, "compare_kei": 393, "ignore_kei": 393, "cpuinfo": 393, "dump_elapsed_tim": [393, 403], "customized_msg": 393, "elaps": 393, "combine_histogram": 393, "old_hist": 393, "old": [393, 438, 468], "get_tensor_histogram": 393, "get_all_fp32_data": 393, "get_tuning_histori": 393, "tuning_history_path": 393, "offlin": [393, 397, 438, 465, 470], "str2arrai": 393, "dequantize_weight": 393, "weight_tensor": 393, "min_filter_tensor": 393, "max_filter_tensor": 393, "scale_info": 393, "captureoutputtofil": 393, "tmp_file_path": 393, "stream": [393, 476], "sy": [393, 444], "stderr": 393, "captur": 393, "statist": [393, 394], "header": [393, 430], "field_nam": 393, "output_handl": 393, "printer": 393, "global_st": 393, "load_data_from_pkl": 393, "pkl": 393, "dump_data_to_loc": 393, "show_memory_info": 393, "hint": 393, "dump_class_attr": 393, "compare_object": 393, "obj1": 393, "obj2": 393, "ignore_attr": 393, "comparison": [393, 468, 471], "alias_param": 393, "param_nam": 393, "param_alia": 393, "alias": 393, "print_tabl": 393, "column_map": 393, "table_entri": 393, "titl": [393, 436, 459, 473], "insert_newlin": 393, "prettyt": 393, "column": [393, 470], "func": [393, 404, 465, 475], "handler": [393, 473], "row": [393, 424, 470], "decim": 393, "get_tensors_info": 393, "get_weights_detail": 393, "weightdetail": 393, "dump_tabl": 393, "filepath": 393, "file_typ": 393, "csv": [393, 400], "dump_table_to_csv": 393, "get_number_of_socket": 393, "platform": [393, 402, 434, 441, 449, 463, 465], "opentri": 393, "activation_min": 393, "activation_max": 393, "print_op_list": 393, "get_op_list": 393, "minmax_file_path": 393, "input_model_tensor": 393, "optimized_model_tensor": 393, "activation_min_max": 393, "calculate_ms": 393, "mse_metric_gap": 393, "fp32_tensor": 393, "dequantize_tensor": 393, "euclidean": [393, 425], "distanc": [393, 425], "weightsdetail": 394, "input_tensor_data": 394, "optimized_tensor_data": 394, "weightsstatist": 394, "welcom": [396, 397, 398, 402, 477], "interest": [397, 402, 471], "foster": 397, "particip": 397, "commun": 397, "harass": 397, "experi": [397, 441, 469, 470, 473], "everyon": 397, "regardless": 397, "ag": 397, "bodi": 397, "ethnic": 397, "characterist": 397, "gender": 397, "educ": 397, "socio": 397, "econom": 397, "appear": [397, 452, 458], "race": 397, "religion": 397, "sexual": 397, "orient": 397, "behavior": [397, 398, 403, 404, 405, 431, 440, 471, 473, 475], "contribut": [397, 402, 462], "inclus": 397, "Being": 397, "respect": [397, 431, 462, 470, 475], "viewpoint": 397, "gracefulli": 397, "focus": [397, 403], "empathi": 397, "toward": [397, 425], "member": [397, 403], "unaccept": 397, "imageri": 397, "unwelcom": 397, "troll": 397, "insult": 397, "derogatori": 397, "comment": [397, 404, 422, 437, 438, 467, 472], "polit": 397, "attack": 397, "privat": 397, "publish": [397, 436, 439, 459, 470], "electron": 397, "explicit": 397, "permiss": 397, "inappropri": 397, "profession": 397, "clarifi": 397, "appropri": [397, 470], "fair": 397, "action": [397, 453, 456], "edit": 397, "reject": 397, "commit": [397, 398], "wiki": 397, "issu": [397, 398, 401, 435, 465, 471], "ban": 397, "temporarili": 397, "deem": 397, "threaten": 397, "offens": 397, "harm": 397, "mail": 397, "social": [397, 402, 463], "media": [397, 402, 463], "account": [397, 469, 473], "appoint": 397, "onlin": [397, 469], "event": [397, 471], "abus": 397, "report": [397, 398, 469], "contact": [397, 468, 469], "complaint": 397, "review": [397, 398], "investig": 397, "circumst": [397, 464], "oblig": 397, "confidenti": 397, "regard": [397, 466], "incid": 397, "separ": [397, 433, 436, 461, 464], "good": [397, 465, 473], "faith": 397, "face": [397, 402, 410, 441, 445, 463, 468, 476], "repercuss": 397, "leadership": 397, "faq": [397, 402], "page": [397, 398], "send": [398, 404], "view": [398, 402, 428, 449, 458, 468], "pylint": 398, "flake8": 398, "autopep8": 398, "cover": [398, 429, 433, 463], "would": [398, 438, 462, 465, 470], "adopt": [398, 441, 462, 463, 470], "certif": 398, "agre": 398, "j": [398, 402, 470, 476], "bug": 398, "jira": 398, "ticket": 398, "potenti": [398, 400, 424], "risk": 398, "pr": [398, 421, 437, 453, 456, 468], "reproduc": 398, "hardwar": [398, 402, 403, 425, 434, 438, 458, 462, 463, 464], "submit": [398, 463], "intend": 398, "safe": 398, "collabor": [398, 443, 449], "adher": 398, "toolkit": [399, 435, 441, 449, 463, 474], "tracer": 399, "resolv": [399, 401], "floatfunct": 399, "cat": [399, 429, 444], "done": [399, 425, 426, 442, 458, 462, 465], "10004": [399, 400, 403, 421, 425, 426, 431, 434, 439, 461, 464, 467, 475], "neural_compressor": [399, 400, 402, 405, 420, 421, 422, 424, 425, 426, 427, 429, 432, 433, 437, 438, 439, 440, 460, 461, 462, 464, 465, 466, 468, 469, 470, 472, 473, 475], "eval": [399, 421, 424, 441, 465, 471], "fail": [399, 421, 429], "conduct": [399, 438, 446, 458, 473, 474], "imper": 399, "therefor": [399, 438, 462, 465, 468, 470], "lot": [399, 470], "As": [399, 404, 421, 425, 437, 438, 452, 462, 467, 473], "failur": 399, "successfulli": [399, 427, 463], "suggest": [399, 469], "traceabl": 399, "proxi": 399, "tutori": [399, 449, 463, 474], "prototyp": 399, "html": [399, 402, 453, 456], "highlight": 399, "untrac": 399, "ssd": [399, 429, 476], "resnet34": [399, 476], "r34": 399, "bboxes_labels_scor": 399, "prob": 399, "45": [399, 470, 476], "max_output": 399, "zip": 399, "dbox": 399, "dlabel": 399, "dscore": 399, "decode_singl": 399, "autom": [400, 402, 441, 458, 459, 463, 470], "artifici": 400, "ann": 400, "par": 400, "outperform": 400, "hand": 400, "propos": [400, 403, 425, 439, 470], "lie": 400, "predictor": 400, "shown": [400, 421, 424, 425, 437, 438, 452, 460, 461, 462, 470, 473], "figur": [400, 451, 452, 455], "popul": 400, "inner": 400, "evolutionari": 400, "cycl": 400, "until": [400, 404, 473], "conclud": 400, "met": [400, 431, 465, 471], "yet": [400, 453, 456, 459], "simplest": [400, 444], "launcher": [400, 402, 425, 426, 449, 474], "agent": 400, "nsga2": 400, "supernet": 400, "ofa_mbv3_d234_e346_k357_w1": 400, "acc": [400, 462, 471, 476], "mac": [400, 459], "num_ev": 400, "250": [400, 462], "results_csv_path": 400, "search_result": 400, "dataset_path": 400, "ilsvrc2012": 400, "aim": [400, 402, 441, 462, 470, 473, 474], "mobilenetv3": 400, "lt": [400, 422, 476], "wmt": 400, "en": 400, "de": 400, "guidelin": [401, 402], "mainstream": [402, 474], "learn": [402, 403, 404, 421, 422, 429, 433, 434, 435, 438, 439, 441, 443, 446, 447, 449, 452, 453, 456, 458, 462, 463, 465, 470, 471, 473, 474], "runtim": [402, 403, 404, 406, 421, 424, 428, 431, 434, 439, 443, 448, 449, 464, 468], "workflow": [402, 404, 405, 424, 425, 429, 435, 439, 453, 456, 471, 474], "particular": [402, 462], "wide": [402, 428, 439, 462, 465, 476], "xeon": [402, 435, 436, 439, 463, 465, 466, 476], "scalabl": [402, 435, 439, 463, 465, 466], "processor": [402, 439, 463, 465, 466], "flex": [402, 435], "amd": [402, 434, 435, 476], "arm": [402, 434, 435, 476], "nvidia": [402, 434, 435, 476], "bloom": [402, 470], "176b": [402, 470], "7b": [402, 470, 476], "stabl": [402, 435, 462, 463], "diffus": [402, 463], "gpt": [402, 462, 470, 476], "hub": [402, 428, 432, 449], "hug": [402, 463], "vision": [402, 429, 445, 470], "coder": [402, 434, 442, 443, 446, 449, 452, 463], "cloud": [402, 463], "marketplac": [402, 459, 463], "googl": [402, 439, 463], "amazon": [402, 441, 449], "web": [402, 471], "servic": [402, 458, 463], "azur": [402, 463], "softwar": [402, 436, 462, 463, 468], "alibaba": [402, 448, 455, 456, 463], "tencent": [402, 463], "taco": [402, 463], "ai": [402, 441, 463, 466, 474], "ecosystem": [402, 463], "lightn": [402, 448], "pip": [402, 424, 427, 430, 432, 435, 443, 446, 451, 453, 455, 456, 468], "wget": [402, 424, 430, 432], "storag": [402, 432, 437, 470], "googleapi": [402, 432], "v1_6": [402, 432], "mobilenet_v1_1": [402, 432], "0_224_frozen": [402, 432], "overview": [402, 473], "jupyterlab": [402, 441, 447, 449, 451, 455, 474], "studio": [402, 449, 458, 474], "topic": 402, "innov": [402, 449, 463], "blog": [402, 463], "msft": [402, 463], "oliv": [402, 463], "friendli": [402, 431, 438, 463, 470, 474, 475], "toolchain": [402, 430, 463], "june": [402, 463], "2023": [402, 467, 470, 476], "neurip": [402, 463], "oct": [402, 463], "quala": [402, 463], "minilm": [402, 463, 476], "releas": [402, 435, 447, 449, 451, 455, 457, 477], "legal": [402, 477], "secur": [402, 463, 477], "idea": [402, 462, 470, 473], "feel": 402, "bridg": [403, 404, 434], "vanilla": [403, 404, 434], "abcadaptor": 403, "__init__": [403, 421, 422, 437, 473], "query_fw_cap": [403, 405], "query_fused_pattern": 403, "he": 403, "besid": [403, 425, 467], "describ": [403, 405, 424, 431, 471], "past": [403, 467], "mainten": 403, "difficult": [403, 470], "abil": [403, 404, 422, 431, 470], "modif": [403, 431, 446], "fragment": 403, "scenario": [403, 420, 425, 438, 462, 467], "granular": [403, 404, 405, 431, 434, 444, 465, 470, 475], "semant": [403, 431], "mla": [403, 439, 465], "becom": [403, 429, 462, 467], "explor": 403, "inspect_tensor": 403, "op_list": [403, 471], "iteration_list": 403, "inspect_typ": 403, "save_to_disk": 403, "quantization_cfg": 403, "set_tensor": 403, "tensor_dict": 403, "diagnosis_help": 403, "fw": 404, "outlin": [404, 405], "instruct": [404, 405, 425, 435, 439, 453, 456, 463, 464, 465], "extend": [404, 405], "accommod": [404, 405], "incorpor": [404, 405, 426, 473], "give": [404, 458, 473], "diagram": [404, 405, 424, 473], "illustr": [404, 405, 426, 473], "sequencediagram": [404, 405], "autonumb": [404, 405], "query_framework_cap": 404, "opwis": 404, "optypewis": 404, "travers": [404, 405, 473], "\u2776": 404, "\u2777": 404, "\u2778": 404, "\u2779": 404, "\u277a": 404, "\u277b": 404, "previou": [404, 405, 438, 462, 468, 470, 471, 473, 474], "\u277c": 404, "These": [404, 434], "chapter": 404, "confirm": 404, "chosen": 404, "framework_yaml": 404, "int8_conv_config": 404, "node_op": 404, "optype_wise_": 404, "per_tensor": [404, 405, 431, 465, 475], "exmapl": 404, "tuning_cfg_to_fw": 404, "Its": 404, "calib_iter": 404, "dispatch": [404, 434], "is_perchannel": 404, "is_asymmetr": 404, "weight_bit": 404, "convert_bf16": 404, "calib": 404, "larger": [404, 462, 467, 470], "somewhat": 404, "distort": 404, "line": [404, 427, 434, 441, 446, 447, 471], "At": [404, 473], "explain": [405, 424, 470], "let": [405, 431, 446, 462, 464, 475], "overal": [405, 475], "drive": 405, "uint4": 405, "asymmetr": [405, 465, 473], "kullback": [405, 425], "leibler": [405, 425], "pytorch_cpu": 405, "1_11_capabl": 405, "cap_s8_1_11": 405, "cap_s8_1_11_conv1d": 405, "per_channel_symmetr": 405, "addition": [405, 427, 473], "per_tensor_symmetr": 405, "One": [405, 422, 427, 434, 462, 463, 473], "due": [405, 429, 462, 465, 470, 471], "nativ": 405, "simul": 405, "with_arg": 405, "qscheme": 405, "torch_dtyp": 405, "quant_min": 405, "quant_max": 405, "linux": [420, 430, 452, 458], "x86_64": 420, "aarch64": 420, "encount": 421, "consum": 421, "previous": 421, "lack": [421, 430], "faster": [421, 423, 429, 463, 473, 476], "treat": 421, "Of": 421, "getitem": 421, "fn": 421, "evenli": 421, "divid": [421, 470, 473], "discard": 421, "throw": 421, "awai": 421, "draw": [421, 469, 473], "worker": [421, 438, 465], "subprocess": 421, "pin": [421, 451, 455], "reshuffl": 421, "manner": [421, 425, 440], "newdataload": 421, "customis": [421, 422, 437], "ensp": [422, 472], "imagerecord": [422, 427, 475], "image_nam": 422, "cocorecord": 422, "gt": [422, 470, 472], "int64": 422, "offer": 422, "style_transf": 422, "content": 422, "tfrecorddataset": 422, "labelbal": 422, "300": 422, "16": [422, 470, 476], "helloworld": [422, 439, 472], "aid": 423, "deploy": [423, 441, 458, 463, 470], "infrastructur": 423, "gap": [424, 440], "diagnos": 424, "gui": [424, 434, 462], "termin": [424, 451, 452, 455], "repeat": [424, 473], "durat": [424, 469], "git": [424, 430, 435], "clone": [424, 435, 451, 455], "cd": [424, 427, 435], "setup": [424, 431, 435, 453, 456, 462], "ilsvr2012": 424, "caff": 424, "berkeleyvis": 424, "caffe_ilsvrc12": 424, "xvzf": 424, "image_recognit": [424, 471], "resnet50_torchvis": 424, "ptq_static": 424, "resnet50_v1": [424, 427, 438], "dataset_loc": [424, 471], "label_path": 424, "quantiti": 424, "vec": 424, "mu": 424, "frac": [424, 470], "sigma": 424, "var": 424, "happen": 424, "dispers": 424, "trust": 424, "rule": [424, 441, 462], "v0": [424, 471], "cg": [424, 471], "conv0": [424, 471], "expens": [425, 438, 473], "deploi": [425, 438, 467, 473], "power": [425, 438, 452, 463], "mobil": [425, 438, 476], "produc": 425, "logit": 425, "softmax": 425, "l": [425, 471, 473], "kd": 425, "patient": 425, "compact": [425, 438, 444, 462], "agnost": 425, "resourc": [425, 473], "convolut": [425, 463], "ia": 425, "attach": [425, 438, 470], "shallow": 425, "deepest": 425, "deeper": 425, "paper": [425, 462, 467, 470], "10006": [425, 426], "student_output": [425, 426], "student_loss": [425, 426], "training_func_for_nc": [425, 426], "distil_loss_conf": 425, "accordingli": [425, 449], "promis": [426, 438, 462], "huge": [426, 462], "heavi": 426, "light": 426, "booster": 426, "degrad": [426, 462, 473], "novel": [426, 441, 452, 458], "place": [426, 435, 462, 471], "comb": 426, "distillation_criterion": [426, 438, 461], "q_conf": 426, "horovod": 427, "instal": [427, 430, 432, 441, 443, 446, 449, 453, 456, 458, 459, 477], "builtin": 427, "program": [427, 436, 441, 458], "enable_eager_execut": 427, "yaml_file_path": 427, "pre_process": 427, "simpli": [427, 440, 441, 443, 446, 458], "evaluation_result": 427, "evaluation_time_cost": 427, "partit": [427, 462], "distributedsampl": 427, "train_sampl": 427, "train_dataset": [427, 465], "num_replica": 427, "rank": 427, "train_load": 427, "train_kwarg": 427, "adadelta": 427, "distributedoptim": 427, "named_paramet": 427, "broadcast_paramet": 427, "root_rank": 427, "broadcast_optimizer_st": 427, "set_epoch": 427, "batch_idx": 427, "zero_grad": [427, 438, 462], "nll_loss": 427, "log_interv": 427, "0f": 427, "tloss": 427, "6f": 427, "dry_run": 427, "test_func": 427, "host": 427, "num_of_process": 427, "002": 427, "ssh": [427, 458], "prompt": 427, "readm": 427, "exactli": [427, 442], "recognit": [427, 429, 462, 471], "resizecropimagenet": [427, 472], "realiz": [427, 460, 466, 469], "tow": 427, "node1": 427, "node2": 427, "TO": [427, 443], "your_node1_nam": 427, "your_node2_nam": 427, "resnet50_fp32_pretrained_model": 427, "nc_resnet50_v1": 427, "resnet": [427, 476], "varieti": [428, 464, 473], "demonstr": [428, 441, 471], "10k": [428, 432], "speedup": [428, 434, 465], "2x": [428, 434], "vnni": [428, 434, 464, 465], "exchang": 429, "hope": 429, "inc_model": [429, 440], "fp32_onnx_config": 429, "verifi": 429, "vgg16": [429, 476], "mobilenet": [429, 469, 476], "rcnn": 429, "torchscript": [429, 470], "unsupport": [429, 438, 462], "add_relu": 429, "conv1d_relu": 429, "conv2d_relu": 429, "group_norm": 429, "hardswish": 429, "instance_norm": 429, "layer_norm": 429, "leaky_relu": 429, "sigmoid": 429, "bare": 430, "metal": 430, "sudo": [430, 444], "apt": [430, 435, 444, 452], "python3": 430, "dev": [430, 451, 455], "distutil": 430, "essenti": 430, "libgl1": 430, "mesa": 430, "glx": 430, "libglib2": 430, "ln": 430, "sf": 430, "usr": 430, "incompat": 430, "88": [430, 469, 476], "80": [430, 470, 471, 476], "pyobject": 430, "reinstal": 430, "importerror": 430, "libgl": 430, "No": [430, 438, 463], "yum": [430, 435], "opencv": [430, 452], "conda": [430, 435, 444, 452, 468], "13": [430, 435, 468, 470, 476], "pend": 430, "sqlalchemi": 430, "27": [430, 476], "alemb": 430, "forg": [430, 435], "quick": [431, 439, 474, 475], "dive": [431, 474], "unless": 431, "purpos": [431, 439, 458, 464, 465], "syntax": 431, "go": [431, 453, 456, 464, 472], "up1": 431, "up2": 431, "valid_mixed_precis": 431, "addn": 431, "grappler_optim": 431, "constfold": 431, "arithmet": 431, "debug_stripp": 431, "major": [433, 465, 470], "concept": [433, 469, 474], "rather": 433, "custom_metr": 433, "refin": [433, 462], "broad": [434, 447, 474], "420": 434, "geomean": 434, "snippet": 434, "upload": [434, 453, 456], "click": [434, 441, 442, 449, 452, 458, 463, 471], "button": [434, 452, 458], "qintegerop": [434, 465], "plan": 434, "oneapi": [435, 463, 474], "analyt": [435, 463, 474], "success": 435, "11": [435, 437, 439, 470, 473, 476], "frequent": 435, "ask": 435, "pypi": [435, 453, 456], "nightli": 435, "consolid": 435, "latest": [435, 463, 468], "eas": [435, 443, 463], "along": [435, 462], "streamlin": [435, 463], "scienc": 435, "websit": 435, "anaconda": 435, "suit": [435, 459, 471], "esri": 435, "formerli": 435, "skylak": 435, "cascad": 435, "lake": [435, 439, 463], "cooper": [435, 439, 463], "ic": [435, 463], "sapphir": 435, "rapid": 435, "hbm": 435, "arctic": 435, "sound": 435, "pont": 435, "vecchio": 435, "cento": [435, 476], "ubuntu": 435, "22": [435, 476], "04": [435, 476], "fortensorflow": 435, "forpytorch": 435, "12": 435, "tf_enable_onednn_opt": 435, "onednn": [435, 439, 465], "newer": 435, "copyright": 436, "subject": 436, "accompani": [436, 473], "research": [436, 470], "wish": 436, "bibtex": 436, "misc": 436, "author": 436, "feng": 436, "tian": 436, "hanwen": 436, "haihao": [436, 462], "shen": [436, 462], "suyu": 436, "chen": 436, "howpublish": 436, "year": 436, "logo": 436, "atom": 436, "phi": 436, "pentium": 436, "vtune": 436, "corpor": 436, "subsidiari": 436, "brand": 436, "claim": 436, "popularli": 437, "industri": [437, 463], "label_map": 437, "decis": 437, "ap": 437, "curv": 437, "turn": [437, 452], "target_boxes_num": 437, "str_label": 437, "int_label": 437, "inturn": 437, "cocomap": 437, "vocmap": 437, "categor": 437, "multiclass": 437, "multilabel": 437, "newmetr": 437, "reset": 437, "reflect": [437, 472], "new_metr": 437, "deliv": [438, 463, 468], "conveni": 438, "upgrad": 438, "veri": [438, 459, 465, 473, 474], "speed": [438, 449, 462, 463, 465, 473], "fundament": 438, "comprehens": [438, 474], "kind": 438, "resort": 438, "automodelforsequenceclassif": 438, "autotoken": 438, "val_dataset": [438, 465], "val_dataload": [438, 465], "ping_memori": [438, 465], "formul": 438, "effort": 438, "written": 438, "onnxrt_integ": [438, 475], "onnxrt_qlinear": [438, 475], "image_tensor": [438, 475], "post_training_dynamic_qu": [438, 464, 473], "1000": [438, 475], "2000": 438, "sampling_s": [438, 475], "model_wis": [438, 475], "op_dict": 438, "op_wis": [438, 471, 475], "sigopt_api_token": [438, 469, 473], "sigopt_project_id": [438, 469, 473], "sigopt_experiment_nam": [438, 469, 473], "demo": 438, "600": 438, "training_arg": 438, "emul": [438, 465], "trainer": [438, 449], "briefli": [438, 470], "maxim": [438, 462, 473], "still": [438, 463, 465, 466], "pruning_func": 438, "num_train_epoch": [438, 462], "train_dataload": [438, 462, 465], "n_gpu": 438, "gradient_accumulation_step": 438, "clip_grad_norm_": 438, "max_grad_norm": 438, "rate": [438, 462, 465], "start_epoch": [438, 464, 475], "end_epoch": [438, 464, 475], "97": [438, 470, 476], "newli": [438, 462], "on_after_optimizer_step": [438, 462], "layer3": [438, 462], "lr_schedul": [438, 462], "weight_decai": [438, 475], "0004": 438, "nesterov": [438, 475], "randomresizedcrop": [438, 472], "totensor": [438, 472], "485": [438, 476], "456": [438, 476], "406": 438, "nepoch": 438, "cnt": 438, "loss_sum": 438, "iter_bar": 438, "tqdm": 438, "desc": 438, "teacher_logit": 438, "train_fun": 438, "training_func": 438, "recent": [438, 439], "growth": [438, 439, 462], "complex": [438, 439, 462], "significantli": [438, 439, 462, 473], "bandwidth": [438, 439, 467], "exit_polici": [438, 475], "determinist": 438, "arbitrari": [438, 461], "meaning": [438, 461], "reli": [438, 470], "prune_conf": 438, "quantization_aware_training_conf": 438, "aforement": 438, "inset": 438, "p_conf": [438, 461], "ssd_mobilenet_v1": 438, "benchmarkconf": 438, "half": [439, 449], "sixteen": 439, "launch": [439, 459], "3rd": [439, 463, 465, 466], "gen": [439, 463, 465, 466], "codenam": 439, "boost": [439, 442, 458, 462, 463], "x86": 439, "avx512": [439, 465], "vcvtne2ps2bf16": 439, "vcvtneps2bf16": 439, "vdpbf16p": 439, "fbgemm": [439, 465], "tensorrtexecutionprovid": [439, 465], "cudaexecutionprovid": [439, 465], "cuda": [439, 441, 443, 465], "dnnlexecutionprovid": [439, 465], "avx512_bf16": 439, "plu": 439, "resnet18": [439, 443, 476], "persist": 440, "brought": [440, 442, 449, 465], "tf2": 440, "h5": 440, "hybridblock": 440, "0000": 440, "saved_result": [440, 467], "simplifi": [441, 452, 458, 462, 463], "acquir": 441, "analysi": [441, 458, 462, 469], "heurist": [441, 458], "great": 441, "facilit": 441, "enhanc": [441, 463, 466], "autocast": 441, "my_model": 441, "no_grad": 441, "memory_format": 441, "112": [441, 476], "rand": [441, 470], "plugin": [441, 459], "aw": [441, 449, 463, 476], "sagemak": [441, 449], "inlin": [441, 446, 449], "neural_cod": [441, 443, 445, 446, 447, 449], "bench": 441, "superbench": 441, "enjoi": [442, 446, 449], "rebuild": [442, 451, 455], "reload": [442, 459], "modern": [443, 467], "democrat": [443, 463], "programm": [443, 449, 458], "nano_bf16_channels_last": 443, "nano_bf16_ipex_channels_last": 443, "nano_bf16_ipex": 443, "nano_bf16": 443, "nano_fp32_channels_last": 443, "nano_fp32_ipex_channels_last": 443, "nano_fp32_ipex": 443, "nano_gpu_to_cpu": 443, "nano_int8": 443, "nano_jit_bf16_channels_last": 443, "nano_jit_bf16_ipex_channels_last": 443, "nano_jit_bf16_ipex": 443, "nano_jit_bf16": 443, "nano_jit_fp32_channels_last": 443, "nano_jit_fp32_ipex_channels_last": 443, "nano_jit_fp32_ipex": 443, "nano_jit_fp32": 443, "nano_onnxruntime_fp32": 443, "nano_onnxruntime_int8_qlinear": 443, "openvino": 443, "nano_openvino_fp32": 443, "nano_openvino_int8": 443, "bc": [444, 452], "conda_prefix": 444, "echo": 444, "tradit": [444, 462], "libjemalloc": 444, "libiomp5": 444, "home": 444, "lib": 444, "ld_preload": 444, "malloc_conf": 444, "oversize_threshold": 444, "background_thread": 444, "metadata_thp": 444, "dirty_decay_m": 444, "9000000000": 444, "muzzy_decay_m": 444, "kmp_affin": 444, "kmp_blocktim": 444, "dnnl_primitive_cache_capac": 444, "cpufreq": 444, "scaling_governor": 444, "powersav": 444, "tee": 444, "pytorch_jit_script": [445, 448], "pytorch_channels_last": [445, 448], "run_bench": 445, "patch": [445, 458], "patch_path": 445, "your_patch_path": 445, "sweep": 445, "sweep_object": 445, "bench_config": 445, "bench_featur": 445, "sai": 446, "run_glu": [446, 447], "requisit": 446, "task_nam": [446, 447], "do_ev": [446, 447], "remain": 446, "itself": 446, "run_glue_optim": 446, "static_ipex": 446, "auto_qu": 447, "v4": [447, 476], "albert": [447, 476], "sst2": 447, "alexnet": [447, 476], "pytorch_amp": 448, "optimize_for_infer": 448, "pytorch_jit_trac": 448, "pytorch_jit_script_ofi": 448, "pytorch_jit_trace_ofi": 448, "torchdynamo": 448, "pytorch_torchdynamo_jit_script": 448, "pytorch_torchdynamo_jit_trac": 448, "pytorch_torchdynamo_jit_script_ofi": 448, "pytorch_torchdynamo_jit_trace_ofi": 448, "pytorch_inc_bf16": 448, "pytorch_inc_static_quant_fx": 448, "pytorch_inc_static_quant_ipex": 448, "pytorch_inc_dynamic_qu": 448, "pytorch_ipex_fp32": 448, "pytorch_ipex_bf16": 448, "pytorch_ipex_int8_static_qu": 448, "pytorch_ipex_int8_dynamic_qu": 448, "blade": 448, "disc": 448, "pytorch_aliblad": 448, "pytorch_lightning_bf16_cpu": 448, "tensorflow_amp": 448, "keras_amp": 448, "tensorflow_inc": 448, "keras_inc": 448, "onnx_inc_static_quant_qlinear": 448, "onnx_inc_static_quant_qdq": 448, "onnx_inc_dynamic_qu": 448, "optimum": [448, 449], "pytorch_inc_huggingface_optimum_stat": 448, "pytorch_inc_huggingface_optimum_dynam": 448, "intel_extension_for_transform": 448, "bigdl": [448, 449], "nano": [448, 449], "nano_": 448, "inc_auto": 448, "delight": 449, "announc": 449, "v": [449, 458, 462, 473, 475], "500": 449, "jupyt": [449, 451, 452, 455], "isa": 449, "adjust": [449, 465, 470], "xpu": 449, "delta": 449, "acc_delta": 449, "int8_acc": 449, "fp32_acc": 449, "ext": [451, 453, 455, 456, 457], "lab": [451, 452, 453, 455, 456], "nodej": [451, 455], "jlpm": [451, 455], "yarn": [451, 455], "npm": [451, 452, 455], "lieu": [451, 455], "labextens": [451, 452, 455], "typescript": [451, 455], "watch": [451, 455], "immedi": [451, 455, 462], "refresh": [451, 455], "browser": [451, 455], "wait": [451, 455, 458], "rebuilt": [451, 455], "easier": [451, 455, 458, 463], "symlink": [451, 455], "down": 452, "finish": 452, "enter": [452, 458], "blank": 452, "cell": 452, "gain": [452, 461, 463], "mkl": 452, "jemalloc": 452, "pip3": 452, "headless": 452, "pyproject": [453, 456], "toml": [453, 456], "twine": [453, 456], "whl": [453, 456], "dist": [453, 456], "sdist": [453, 456], "bdist_wheel": [453, 456], "deprec": [453, 456, 468, 472], "frontend": [453, 456], "login": [453, 456, 469], "repositori": [453, 456], "cut": [453, 456], "fork": [453, 456], "admin_github_token": [453, 456], "pypi_token": [453, 456], "npm_token": [453, 456], "secret": [453, 456], "panel": [453, 456, 458], "draft": [453, 456], "changelog": [453, 456, 457], "pkg": [453, 456], "bot": [453, 456], "pick": [453, 456, 459], "feedstock": [453, 456], "hatch": 456, "notabl": 457, "vscode": [457, 459], "daili": 458, "advantag": [458, 462, 464, 473], "remot": 458, "re": [458, 467], "market": 458, "uninstal": 458, "fill": [458, 469, 472, 473], "upper": 458, "sidebar": 458, "hover": 458, "track": [458, 469], "argpars": 458, "pop": 458, "diff": 458, "manifest": 459, "declar": 459, "palett": 459, "registercommand": 459, "amodio": 459, "tsl": 459, "matcher": 459, "dbaeumer": 459, "eslint": 459, "press": 459, "f5": 459, "ctrl": 459, "hello": 459, "world": 459, "breakpoint": 459, "consol": 459, "relaunch": 459, "toolbar": 459, "node_modul": 459, "viewlet": 459, "dropdown": 459, "runner": 459, "startup": 459, "bundl": 459, "multi_object": 460, "benefit": 461, "instanti": 461, "neuron": 462, "art": 462, "grown": 462, "unpreced": 462, "increasingli": 462, "crucial": 462, "stand": [462, 473], "delet": 462, "commonli": 462, "shrink": 462, "contextu": 462, "howev": [462, 467, 470], "scene": 462, "haven": 462, "color": 462, "lowest": [462, 473], "formula": [462, 470], "emsp": 462, "downstream": 462, "finetun": [462, 476], "prone": 462, "co": 462, "discourag": 462, "push": [462, 467, 470], "penal": 462, "parameter": 462, "exemplifi": 462, "complement": 462, "fortieth": 462, "miss": [462, 465], "pruner2": 462, "mention": [462, 467], "readi": 462, "hesit": 462, "sst": [462, 476], "25": [462, 470, 476], "63": [462, 470, 476], "24": [462, 470, 473, 476], "35": [462, 476], "flan": 462, "t5": 462, "english": 462, "romanian": 462, "404": [462, 476], "381": 462, "yolov5": 462, "75": [462, 470, 476], "2x1": [462, 476], "801": 462, "7895": 462, "signific": [462, 463, 470], "reduct": [462, 475], "namhoon": 462, "lee": 462, "thalaiyasingam": 462, "ajanthan": 462, "philip": 462, "torr": 462, "2019": 462, "zafrir": 462, "ofir": 462, "ariel": 462, "larei": 462, "boudoukh": 462, "mosh": 462, "wasserblat": 462, "preprint": [462, 467, 470], "2111": 462, "05754": 462, "2021": 462, "medium": 463, "juli": 463, "chatbot": 463, "netflix": 463, "apr": 463, "mlperf": [463, 476], "5x": 463, "heterogen": 463, "mar": 463, "busi": 463, "jan": 463, "amx": 463, "4th": [463, 465], "mleffici": 463, "dec": 463, "wechat": 463, "deepen": 463, "foundat": 463, "intellig": 463, "vmware": 463, "applianc": 463, "bitnami": 463, "nov": 463, "sota": 463, "few": [463, 473], "plug": 463, "twitter": 463, "linkedin": 463, "zone": 463, "land": 463, "gcp": 463, "pat": 463, "keynot": 463, "intelon": 463, "sep": 463, "chines": 463, "aug": 463, "purif": 463, "sacrif": 463, "jun": 463, "partner": 463, "feb": 463, "joint": 463, "bilibili": 463, "gestalt": 463, "ml": 463, "doubl": 463, "reconstruct": 463, "abound": 463, "lpot": [463, 468], "nextplatform": 463, "cern": 463, "gan": 463, "3dgan": 463, "iml": 463, "workshop": 463, "asplo": 463, "18": [463, 476], "highli": 463, "intelcaff": 463, "aris": 464, "henc": 464, "onnxrt_qoper": 464, "quant_aware_train": 464, "weight_compress": [464, 475], "initial_spars": [464, 475], "prune_typ": [464, 475], "basic_magnitud": [464, 475], "update_frequ": 464, "prune_domain": 464, "tile_pattern_1x1": 464, "invent": 465, "int4": 465, "cost": [465, 467], "On": [465, 476], "theoret": [465, 467], "zeropoint": 465, "255": [465, 470], "overflow": 465, "solv": [465, 468], "unseen": 465, "enough": 465, "peopl": 465, "mimic": 465, "fact": 465, "ultim": 465, "pain": 465, "lossi": 465, "chart": [465, 469, 471], "understand": [465, 471, 474], "philosophi": 465, "request": 465, "neither": 465, "nor": 465, "val_load": 465, "avg": 465, "themselv": 465, "ON": 466, "forc": 466, "postposttrainingquantconfig": 466, "bf16wrapper": 466, "retrac": 466, "preval": 467, "grow": 467, "demand": 467, "w8a8": 467, "trade": 467, "bottleneck": 467, "roughli": 467, "speak": 467, "capac": [467, 469], "flop": 467, "famou": 467, "approx": 467, "bmm": 467, "100x": 467, "straightforward": [467, 470], "excel": 467, "gptq": 467, "stai": [467, 470], "89": [467, 470, 476], "wip": 467, "gptq_arg": 467, "percdamp": 467, "awq_arg": 467, "xiao": [467, 470], "guangxuan": [467, 470], "2211": [467, 470], "10438": [467, 470], "wei": [467, 470], "xiui": [467, 470], "suppress": [467, 470], "2209": [467, 470], "13325": [467, 470], "lin": 467, "ji": 467, "2306": 467, "00978": 467, "frantar": 467, "elia": 467, "site": 468, "assist": 468, "sed": 468, "your_script": 468, "backbon": 469, "interact": 469, "sigopt_experiment_id": 469, "nc": [469, 473], "certain": 469, "suffici": 469, "ordinari": 469, "receiv": 469, "latenc": [469, 473], "8266": 469, "8372": 469, "2132": 469, "83": [469, 470, 476], "7495": 469, "8299": 469, "8294": 469, "85": [469, 470, 476], "0837": 469, "8291": 469, "4469": 469, "gigant": 470, "systemat": 470, "quantif": 470, "migrat": [470, 474], "difficulti": 470, "mathemat": 470, "allevi": 470, "coarsest": 470, "finer": [470, 473], "matric": 470, "similarli": 470, "finest": 470, "consumpt": 470, "why": [470, 471], "suppos": 470, "6839": 470, "4741": 470, "7451": 470, "9301": 470, "1742": 470, "6835": 470, "q_min": 470, "q_max": 470, "q_x": 470, "clamp_": 470, "round_": 470, "w_q": 470, "00296431384049356": 470, "59": [470, 476], "172": 470, "192": 470, "w_dq": 470, "1220": 470, "0500": 470, "1430": 470, "2570": 470, "1890": 470, "mseloss": 470, "1983354538679123": 470, "6848": 470, "4743": 470, "7440": 470, "9308": 470, "1749": 470, "385297635664756e": 470, "07": [470, 475, 476], "affect": 470, "quantize_per_channel": 470, "x_tmp": 470, "detach": 470, "keepdim": 470, "dequantize_per_channel": 470, "0029": [470, 476], "0036": 470, "162": [470, 476], "48": [470, 476], "72": [470, 476], "93": [470, 476], "207": 470, "139": 470, "6837": 470, "4734": 470, "1751": 470, "6821": 470, "637690492221736e": 470, "6376e": 470, "3852e": 470, "cdot": 470, "quantize_per_tensor_absmax": 470, "n_bit": 470, "div_": 470, "0806": 470, "7589": 470, "6038": 470, "3815": 470, "5040": 470, "7174": 470, "5444": 470, "5826": 470, "7772": 470, "5555": 470, "3740": 470, "3253": 470, "0698": 470, "1381": 470, "5972": 470, "0086": 470, "0737": 470, "8298": 470, "6883": 470, "2991": 470, "1601": 470, "6506": 470, "8246": 470, "3924": 470, "3845": 470, "8768": 470, "w_scale": 470, "x_q": 470, "x_scale": 470, "84": [470, 476], "120": 470, "0059755356051027775": 470, "119": 470, "57": [470, 476], "91": [470, 476], "006533813662827015": 470, "y_q": 470, "17509": 470, "7608": 470, "4055": 470, "16599": 470, "21020": 470, "10016": 470, "9860": 470, "22444": 470, "y_dq": 470, "6836": 470, "2970": 470, "1583": 470, "6481": 470, "8207": 470, "3911": 470, "3850": 470, "8763": 470, "though": 470, "prove": 470, "simplic": 470, "middl": 470, "denot": 470, "fp1": 470, "fp2": 470, "subsect": [470, 475], "even": 470, "intuit": 470, "x1": [470, 473], "x2": [470, 473], "herebi": 470, "recalcul": 470, "sq": 470, "overhead": 470, "hardtanh": 470, "t5norm": 470, "llamanorm": 470, "groupnorm": 470, "lambada": 470, "sweet": 470, "spot": 470, "region": 470, "bigscienc": 470, "560m": 470, "65": [470, 476], "44": [470, 476], "66": [470, 476], "76": [470, 476], "1b7": 470, "71": [470, 476], "43": [470, 476], "67": [470, 476], "78": [470, 472, 476], "56": [470, 476], "58": [470, 476], "55": [470, 476], "3b": 470, "73": [470, 476], "69": [470, 476], "74": [470, 476], "7b1": 470, "77": [470, 476], "46": [470, 476], "17": [470, 476], "82": [470, 476], "52": [470, 476], "facebook": 470, "125m": 470, "41": [470, 476], "70": [470, 476], "94": [470, 472, 476], "79": [470, 471, 476], "60": [470, 476], "81": [470, 476], "26": [470, 476], "39": [470, 476], "68": [470, 472, 476], "eleutherai": [470, 476], "6b": [470, 476], "29": [470, 476], "96": [470, 476], "jason": 470, "emerg": 470, "transact": 470, "yvinec": 470, "edouard": 470, "proceed": 470, "cvf": 470, "winter": 470, "discov": 471, "valuabl": 471, "instrument": 471, "writer": 471, "_pre_eval_hook": 471, "_post_eval_hook": 471, "submodul": 471, "whitelist": 471, "_recordingobserv": 471, "output_tensors_dict": 471, "current_it": 471, "get_tensor_valu": 471, "_observer_forward_hook": 471, "activation_post_process": 471, "_add_observer_": 471, "named_children": 471, "leaf": 471, "add_modul": 471, "register_forward_hook": 471, "dump_tim": 471, "summarywrit": 471, "_acc": 471, "tune_": 471, "add_graph": 471, "get_observer_dict": 471, "observer_dict": 471, "is_quant": 471, "add_histogram": 471, "shell": 471, "bind_al": 471, "logdir_spec": 471, "tune_0_acc0": 471, "tune_1": 471, "tune_1_acc0": 471, "four": 471, "baseline_acc_0": 471, "776": 471, "tune_1_acc_0": 471, "095": 471, "runs_v3": 471, "run_tuning_dump_tensor": 471, "sh": 471, "inceptionv3": 471, "skip": [471, 473], "bash": 471, "run_tun": 471, "topologi": 471, "inception_v3": 471, "inceptionv3_fp32_pretrained_model": 471, "nc_inceptionv3": 471, "inceptionv3_dump_tensor": 471, "poor": 471, "eightbit": 471, "disappear": 471, "centercrop": 472, "randomcrop": 472, "cropres": 472, "decodeimag": 472, "jpeg": 472, "encodejp": 472, "alignimagechannel": 472, "116": 472, "103": 472, "017": 472, "bilinearimagenet": [472, 475], "topilimag": 472, "padding_mod": 472, "border": 472, "pixel": 472, "edg": 472, "colorjitt": 472, "bright": 472, "satur": 472, "hue": 472, "jitter": 472, "tondarrai": 472, "quickli": [473, 474], "human": 473, "concret": 473, "aggress": 473, "classic": 473, "flowchart": 473, "htmllabel": 473, "td": 473, "classdef": 473, "itemstyl": 473, "cce5ff": 473, "stroke": 473, "99ccff": 473, "s1": 473, "s2": 473, "s3": 473, "s4": 473, "s5": 473, "s6": 473, "s7": 473, "nbsp": 473, "subgraphstyl": 473, "ffffff": 473, "attempt": 473, "post_training_auto_qu": 473, "trial": 473, "increment": 473, "primari": 473, "ii": 473, "highest": 473, "spent": 473, "hawq_v2_loss": 473, "model_loss": 473, "black": 473, "come": 473, "compli": 473, "posterior": 473, "focu": 473, "short": 473, "never": 473, "loglevel": 473, "endlessli": 473, "perspect": 473, "smbo": 473, "appl": 473, "surrog": 473, "densiti": 473, "parzen": 473, "greatest": 473, "hour": 473, "dai": 473, "next_tune_cfg": 473, "overridden": 473, "cluster": 473, "seamlessli": 473, "mpi": 473, "replic": 473, "replica": 473, "fed": 473, "synchron": 473, "mpirun": 473, "number_of_process": 473, "run_cmd": 473, "abctunestrategi": 473, "familiar": 474, "notebook": 474, "introduct": 474, "organ": 475, "logic": 475, "mobilenet_v1": 475, "hyper": 475, "40": [475, 476], "06": [475, 476], "beta_1": 475, "beta_2": 475, "epsilon": 475, "sparsecategoricalcrossentropi": 475, "sum_over_batch_s": 475, "from_logit": 475, "54": [475, 476], "19": [475, 476], "1x": 476, "platinum": 476, "8480": 476, "8ghz": 476, "ht": 476, "turbo": 476, "256gb": 476, "16x16gb": 476, "ddr5": 476, "4800": 476, "mt": 476, "bio": 476, "3a14": 476, "tel2p1": 476, "microcod": 476, "0x2b0001b0": 476, "gcc": 476, "20210514": 476, "red": 476, "hat": 476, "visit": 476, "1s4c14ins1bsthroughput": 476, "sec": 476, "2721": 476, "638": 476, "26x": 476, "23": 476, "31": 476, "2123": 476, "552": 476, "84x": 476, "resnet101": 476, "37": 476, "1477": 476, "432": 476, "42x": 476, "incept": 476, "3267": 476, "92": 476, "1266": 476, "03": 476, "58x": 476, "38": 476, "2399": 476, "1098": 476, "18x": 476, "v3": 476, "1593": 476, "508": 476, "13x": 476, "1032": 476, "249": 476, "14x": 476, "34": 476, "427": 476, "185": 476, "30x": 476, "5503": 476, "1791": 476, "62": 476, "07x": 476, "3639": 476, "1864": 476, "95x": 476, "47": 476, "1538": 476, "236": 476, "51x": 476, "vgg19": 476, "1368": 476, "196": 476, "resnetv2": 476, "1105": 476, "657": 476, "68x": 476, "716": 476, "49": 476, "369": 476, "94x": 476, "152": 476, "269": 476, "89x": 476, "densenet": 476, "121": 476, "617": 476, "498": 476, "24x": 476, "161": 476, "372": 476, "242": 476, "54x": 476, "169": 476, "496": 476, "411": 476, "21x": 476, "efficientnet": 476, "b0": 476, "748": 476, "709": 476, "05x": 476, "00": 476, "134": 476, "34x": 476, "1273": 476, "671": 476, "90x": 476, "136": 476, "53": 476, "1235": 476, "477": 476, "09": 476, "179": 476, "85x": 476, "cnn": 476, "79x": 476, "83x": 476, "156": 476, "67x": 476, "23x": 476, "173": 476, "00x": 476, "yolov3": 476, "211": 476, "41x": 476, "82x": 476, "61": 476, "49x": 476, "86": 476, "424": 476, "174": 476, "44x": 476, "29x": 476, "55612": 476, "43479": 476, "28x": 476, "1s56c1ins1bsthroughput": 476, "65x": 476, "gpt2": 476, "2716": 476, "569": 476, "77x": 476, "2683": 476, "476": 476, "64x": 476, "2349": 476, "1035": 476, "27x": 476, "930": 476, "763": 476, "262": 476, "91x": 476, "4003": 476, "1677": 476, "39x": 476, "2766": 476, "36": 476, "2643": 476, "1495": 476, "238": 476, "1372": 476, "199": 476, "88x": 476, "1457": 476, "630": 476, "31x": 476, "842": 476, "338": 476, "645": 476, "231": 476, "938": 476, "707": 476, "33x": 476, "1533": 476, "1258": 476, "22x": 476, "981": 476, "647": 476, "52x": 476, "850": 476, "444": 476, "37x": 476, "543": 476, "74x": 476, "93x": 476, "947": 476, "233": 476, "788": 476, "462": 476, "71x": 476, "15x": 476, "51958": 476, "39974": 476, "1631": 476, "662": 476, "46x": 476, "1162": 476, "330": 476, "968": 476, "334": 476, "resnest50": 476, "394": 476, "resnext101_32x8d": 476, "558": 476, "108": 476, "efficientnet_b0": 476, "703": 476, "656": 476, "efficientnet_b3": 476, "510": 476, "391": 476, "efficientnet_b7": 476, "150": 476, "55x": 476, "peleenet": 476, "857": 476, "585": 476, "yolo": 476, "160": 476, "66x": 476, "141": 476, "407": 476, "camembert": 476, "402": 476, "32x": 476, "343": 476, "804": 476, "352": 476, "17x": 476, "302": 476, "183": 476, "382": 476, "19x": 476, "35x": 476, "51": 476, "414": 476, "stsb": 476, "413": 476, "410": 476, "138": 476, "69x": 476, "385": 476, "76x": 476, "126": 476, "wikitext": 476, "reform": 476, "crime": 476, "punish": 476, "449": 476, "364": 476, "lvwerra": 476, "pegasu": 476, "samsum": 476, "openai": 476, "whisper": 476, "abeja": 476, "neox": 476, "japanes": 476, "1723": 476, "654": 476, "63x": 476, "1141": 476, "306": 476, "73x": 476, "106": 476, "1379": 476, "729": 476, "389": 476, "25x": 476, "1980": 476, "672": 476, "5032": 476, "1500": 476, "resnext101_32x16d_wsl": 476, "533": 476, "36x": 476, "556": 476, "149": 476, "1412": 476, "710": 476, "99x": 476, "1564": 476, "712": 476, "20x": 476, "1377": 476, "719": 476, "1446": 476, "06x": 476, "1579": 476, "747": 476, "11x": 476, "1508": 476, "749": 476, "01x": 476, "6950": 476, "4214": 476, "6881": 476, "4192": 476, "6563": 476, "3804": 476, "6631": 476, "3922": 476, "423": 476, "158": 476, "571": 476, "53x": 476, "598": 476, "163": 476, "594": 476, "164": 476, "62x": 476, "5473": 476, "2567": 476, "5455": 476, "2563": 476, "shufflenet": 476, "6818": 476, "3839": 476, "78x": 476, "5750": 476, "3861": 476, "googlenet": 476, "1783": 476, "1095": 476, "1755": 476, "1071": 476, "squeezenet": 476, "9918": 476, "5639": 476, "9423": 476, "5501": 476, "caffenet": 476, "3363": 476, "1015": 476, "3276": 476, "798": 476, "10x": 476, "2104": 476, "985": 476, "2054": 476, "745": 476, "zfnet": 476, "864": 476, "866": 476, "455": 476, "1802": 476, "1170": 476, "1813": 476, "1164": 476, "56x": 476, "2615": 476, "1349": 476, "2343": 476, "1322": 476, "499": 476, "1288": 476, "878": 476, "47x": 476, "1173": 476, "851": 476, "38x": 476, "1114": 476, "825": 476, "1056": 476, "792": 476, "669": 476, "140": 476, "110": 476, "yolov4": 476, "12x": 476, "duc": 476, "tini": 476, "1163": 476, "993": 476, "ultra": 476, "8501": 476, "1922": 476, "emot": 476, "ferplu": 476, "3552": 476, "3114": 476, "arcfac": 476, "246": 476, "399": 476, "226": 476, "392": 476, "223": 476, "integerop": 476, "474": 476, "222": 476, "557": 476, "963": 476, "529": 476, "603": 476, "398": 476, "187": 476, "96x": 476, "144": 476, "124": 476, "bidaf": 476, "2757": 476, "2279": 476, "lm": 476, "357": 476, "472": 476, "365": 476, "214": 476, "70x": 476, "489": 476, "212": 476, "213": 476, "61x": 476, "270": 476, "215": 476, "491": 476, "l12": 476, "h384": 476, "1051": 476, "583": 476, "80x": 476, "1076": 476, "589": 476, "896": 476, "396": 476, "753": 476, "274": 476, "210": 476, "271": 476, "l6": 476, "1124": 476, "2010": 476, "1127": 476, "401": 476, "494": 476, "electra": 476, "discrimin": 476, "1804": 476, "1154": 476, "1961": 476, "1158": 476, "mini": 476, "4986": 476, "3444": 476, "45x": 476, "5603": 476, "3320": 476, "bart": 476, "deberta": 476, "147": 476, "170": 476, "16x": 476, "spanbert": 476, "multilingu": 476, "159": 476, "distilgpt2": 476, "layoutlm": 476, "funsd": 476, "50x": 476, "layoutlmv3": 476, "fcn": 476, "taskdataset": 476, "accuracyspars": 476, "ratiospars": 476, "commentsbalancedor": 476, "unbalanc": 476, "answeringsquad": 476, "87f1": 476, "momentumunbalanc": 476, "momentumbalanc": 476, "90f1": 476, "59f1": 476, "23f1": 476, "classificationmrpc": 476, "52f1": 476, "26f1": 476, "classificationsst": 476, "61accuraci": 476, "recognitionimagenet": 476, "95top1": 476, "v5s6": 476, "detectioncoco": 476, "ap0": 476, "6ap0": 476, "393": 476, "584": 476, "34f1": 476, "lassounbalanc": 476, "classificationmnli": 476, "mm": 476, "allbalanc": 476, "32accuraci": 476, "sensitivitybalanc": 476, "classificationqqp": 476, "classificationqnli": 476, "54accuraci": 476, "em": 476, "mobilenetv2": 476, "7965": 476, "wideresnet40": 476, "9522": 476, "8178": 476, "0213": 476, "8235": 476, "027": 476, "5494": 476, "7153": 476, "5540": 476, "0046": 476, "5523": 476, "vgg": 476, "bn": 476, "7022": 476, "7415": 476, "7025": 476, "0003": 476, "6739": 476, "7399": 476, "6845": 476, "0106": 476, "blendcnn": 476, "7034": 476, "8382": 476, "bilstm": 476, "8314": 476, "9403": 476, "9048": 476, "0734": 476, "7323": 476, "8256": 476, "8084": 476, "8814": 476, "7442": 476, "8371": 476, "0119": 476, "0115": 476, "tinybert": 476, "8018": 476, "8044": 476, "8363": 476, "8411": 476, "8025": 476, "8074": 476, "0007": 476, "0030": 476, "8626": 476, "8213": 476, "9091": 476, "8782": 476, "8684": 476, "8259": 476, "0058": 476, "distilroberta": 476, "6057": 476, "6455": 476, "6187": 476, "0130": 476, "c6i": 476, "2xlarg": 476, "c6a": 476, "c6g": 476, "a100cuda": 476, "executionprovid": 476}, "objects": {"": [[0, 0, 0, "-", "block_mask"], [319, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[2, 0, 0, "-", "adaptor"], [162, 0, 0, "-", "algorithm"], [165, 0, 0, "-", "benchmark"], [169, 0, 0, "-", "compression"], [183, 0, 0, "-", "conf"], [185, 0, 0, "-", "config"], [186, 0, 0, "-", "contrib"], [211, 0, 0, "-", "data"], [266, 0, 0, "-", "experimental"], [326, 0, 0, "-", "metric"], [328, 0, 0, "-", "mix_precision"], [330, 0, 0, "-", "model"], [338, 0, 0, "-", "objective"], [339, 0, 0, "-", "profiling"], [361, 0, 0, "-", "quantization"], [369, 0, 0, "-", "strategy"], [381, 0, 0, "-", "template"], [382, 0, 0, "-", "training"], [386, 0, 0, "-", "utils"], [395, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[1, 0, 0, "-", "adaptor"], [3, 0, 0, "-", "keras"], [7, 0, 0, "-", "keras_utils"], [11, 0, 0, "-", "mxnet"], [12, 0, 0, "-", "mxnet_utils"], [14, 0, 0, "-", "onnxrt"], [17, 0, 0, "-", "ox_utils"], [44, 0, 0, "-", "pytorch"], [45, 0, 0, "-", "query"], [46, 0, 0, "-", "tensorflow"], [110, 0, 0, "-", "tf_utils"], [151, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[1, 1, 1, "", "Adaptor"], [1, 2, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.keras": [[3, 1, 1, "", "KerasAdaptor"], [3, 1, 1, "", "KerasQuery"]], "neural_compressor.adaptor.keras_utils": [[4, 0, 0, "-", "conv2d"], [5, 0, 0, "-", "dense"], [6, 0, 0, "-", "depthwise_conv2d"], [8, 0, 0, "-", "pool2d"], [9, 0, 0, "-", "quantizer"], [10, 0, 0, "-", "separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, 1, 1, "", "MXNetQuery"], [11, 1, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet_utils": [[13, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, 1, 1, "", "CalibCollector"], [13, 1, 1, "", "CalibData"], [13, 1, 1, "", "CollectorBase"], [13, 1, 1, "", "DataIterLoader"], [13, 1, 1, "", "DataLoaderWrap"], [13, 1, 1, "", "NameCollector"], [13, 1, 1, "", "OpType"], [13, 1, 1, "", "TensorCollector"], [13, 2, 1, "", "amp_convert"], [13, 2, 1, "", "calib_model"], [13, 2, 1, "", "check_mx_version"], [13, 2, 1, "", "combine_capabilities"], [13, 2, 1, "", "create_data_example"], [13, 2, 1, "", "distribute_calib_tensors"], [13, 2, 1, "", "ensure_list"], [13, 2, 1, "", "fuse"], [13, 2, 1, "", "get_framework_name"], [13, 2, 1, "", "is_model_quantized"], [13, 2, 1, "", "isiterable"], [13, 2, 1, "", "make_module"], [13, 2, 1, "", "make_nc_model"], [13, 2, 1, "", "make_symbol_block"], [13, 2, 1, "", "ndarray_to_device"], [13, 2, 1, "", "parse_tune_config"], [13, 2, 1, "", "prepare_dataloader"], [13, 2, 1, "", "prepare_model"], [13, 2, 1, "", "prepare_model_data"], [13, 2, 1, "", "quantize_sym_model"], [13, 2, 1, "", "query_quantizable_nodes"], [13, 2, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[14, 1, 1, "", "ONNXRTQuery"], [14, 1, 1, "", "ONNXRT_IntegerOpsAdaptor"], [14, 1, 1, "", "ONNXRT_QDQAdaptor"], [14, 1, 1, "", "ONNXRT_QLinearOpsAdaptor"], [14, 1, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.ox_utils": [[15, 0, 0, "-", "calibration"], [16, 0, 0, "-", "calibrator"], [29, 0, 0, "-", "operators"], [41, 0, 0, "-", "quantizer"], [42, 0, 0, "-", "smooth_quant"], [43, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, 1, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, 1, 1, "", "CalibratorBase"], [16, 1, 1, "", "HistogramCollector"], [16, 1, 1, "", "KLCalibrator"], [16, 1, 1, "", "MinMaxCalibrator"], [16, 1, 1, "", "PercentileCalibrator"], [16, 2, 1, "", "calib_registry"], [16, 2, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[18, 0, 0, "-", "activation"], [19, 0, 0, "-", "argmax"], [20, 0, 0, "-", "attention"], [21, 0, 0, "-", "binary_op"], [22, 0, 0, "-", "concat"], [23, 0, 0, "-", "conv"], [24, 0, 0, "-", "direct_q8"], [25, 0, 0, "-", "embed_layernorm"], [26, 0, 0, "-", "gather"], [27, 0, 0, "-", "gavgpool"], [28, 0, 0, "-", "gemm"], [30, 0, 0, "-", "lstm"], [31, 0, 0, "-", "matmul"], [32, 0, 0, "-", "maxpool"], [33, 0, 0, "-", "norm"], [34, 0, 0, "-", "ops"], [35, 0, 0, "-", "pad"], [36, 0, 0, "-", "pooling"], [37, 0, 0, "-", "reduce"], [38, 0, 0, "-", "resize"], [39, 0, 0, "-", "split"], [40, 0, 0, "-", "unary_op"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, 1, 1, "", "ActivationOperator"], [18, 1, 1, "", "Float16ActivationOperator"], [18, 1, 1, "", "QActivationOperator"], [18, 1, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, 1, 1, "", "ArgMaxOperator"], [19, 1, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, 1, 1, "", "AttentionOperator"], [20, 1, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, 1, 1, "", "BinaryOperator"], [21, 1, 1, "", "Float16BinaryOperator"], [21, 1, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, 1, 1, "", "ConcatOperator"], [22, 1, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, 1, 1, "", "ConvOperator"], [23, 1, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, 1, 1, "", "Direct8BitOperator"], [24, 1, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, 1, 1, "", "EmbedLayerNormalizationOperator"], [25, 1, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, 1, 1, "", "GatherOperator"], [26, 1, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, 1, 1, "", "GlobalAveragePoolOperator"], [27, 1, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, 1, 1, "", "GemmOperator"], [28, 1, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, 1, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, 1, 1, "", "FusedMatMulOperator"], [31, 1, 1, "", "MatMulOperator"], [31, 1, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, 1, 1, "", "MaxPoolOperator"], [32, 1, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, 1, 1, "", "BatchNormalizationOperator"], [33, 1, 1, "", "NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, 1, 1, "", "Operator"], [34, 1, 1, "", "QOperator"], [34, 2, 1, "", "op_registry"], [34, 2, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, 1, 1, "", "PadOperator"], [35, 1, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, 1, 1, "", "PoolOperator"], [36, 1, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, 1, 1, "", "ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, 1, 1, "", "QResizeOperator"], [38, 1, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, 1, 1, "", "QSplitOperator"], [39, 1, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, 1, 1, "", "UnaryOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, 1, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, 1, 1, "", "ORTSmoothQuant"], [42, 2, 1, "", "get_quant_dequant_output"], [42, 2, 1, "", "make_sub_graph"], [42, 2, 1, "", "quant_dequant_data"]], "neural_compressor.adaptor.ox_utils.util": [[43, 1, 1, "", "QuantFormat"], [43, 1, 1, "", "QuantType"], [43, 1, 1, "", "QuantizationMode"], [43, 1, 1, "", "QuantizedInitializer"], [43, 1, 1, "", "QuantizedValue"], [43, 1, 1, "", "QuantizedValueType"], [43, 1, 1, "", "ValueInfo"], [43, 2, 1, "", "attribute_to_kwarg"], [43, 2, 1, "", "calculate_scale_zp"], [43, 2, 1, "", "cast_tensor"], [43, 2, 1, "", "collate_preds"], [43, 2, 1, "", "dequantize_data"], [43, 2, 1, "", "dequantize_data_with_scale_zero"], [43, 2, 1, "", "dtype_to_name"], [43, 2, 1, "", "find_by_name"], [43, 2, 1, "", "float_to_bfloat16"], [43, 2, 1, "", "float_to_float16"], [43, 2, 1, "", "is_B_transposed"], [43, 2, 1, "", "make_dquant_node"], [43, 2, 1, "", "make_quant_node"], [43, 2, 1, "", "quantize_data"], [43, 2, 1, "", "quantize_data_per_channel"], [43, 2, 1, "", "quantize_data_with_scale_zero"], [43, 2, 1, "", "quantize_nparray"], [43, 2, 1, "", "remove_init_from_model_input"], [43, 2, 1, "", "split_shared_bias"], [43, 2, 1, "", "to_numpy"], [43, 2, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.pytorch": [[44, 1, 1, "", "PyTorchAdaptor"], [44, 1, 1, "", "PyTorchWeightOnlyAdaptor"], [44, 1, 1, "", "PyTorch_FXAdaptor"], [44, 1, 1, "", "PyTorch_IPEXAdaptor"], [44, 1, 1, "", "TemplateAdaptor"], [44, 2, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.query": [[45, 1, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.tensorflow": [[46, 1, 1, "", "TensorFlowAdaptor"], [46, 1, 1, "", "TensorflowQuery"], [46, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[47, 0, 0, "-", "graph_converter"], [48, 0, 0, "-", "graph_converter_without_calib"], [86, 0, 0, "-", "graph_rewriter"], [109, 0, 0, "-", "graph_util"], [111, 0, 0, "-", "quantize_graph"], [138, 0, 0, "-", "quantize_graph_common"], [139, 0, 0, "-", "smooth_quant_calibration"], [140, 0, 0, "-", "smooth_quant_scaler"], [141, 0, 0, "-", "tf2onnx_converter"], [144, 0, 0, "-", "transform_graph"], [147, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, 1, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[50, 0, 0, "-", "bf16"], [75, 0, 0, "-", "generic"], [85, 0, 0, "-", "graph_base"], [94, 0, 0, "-", "int8"], [100, 0, 0, "-", "onnx"], [105, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[49, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, 1, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[51, 0, 0, "-", "convert_add_to_biasadd"], [52, 0, 0, "-", "convert_layout"], [53, 0, 0, "-", "convert_leakyrelu"], [54, 0, 0, "-", "convert_nan_to_random"], [55, 0, 0, "-", "convert_placeholder_to_const"], [56, 0, 0, "-", "dequantize_cast_optimizer"], [57, 0, 0, "-", "dilated_contraction"], [58, 0, 0, "-", "dummy_biasadd"], [59, 0, 0, "-", "expanddims_optimizer"], [60, 0, 0, "-", "fetch_weight_from_reshape"], [61, 0, 0, "-", "fold_batch_norm"], [62, 0, 0, "-", "fold_constant"], [63, 0, 0, "-", "fuse_biasadd_add"], [64, 0, 0, "-", "fuse_column_wise_mul"], [65, 0, 0, "-", "fuse_conv_with_math"], [66, 0, 0, "-", "fuse_decomposed_bn"], [67, 0, 0, "-", "fuse_decomposed_in"], [68, 0, 0, "-", "fuse_gelu"], [69, 0, 0, "-", "fuse_layer_norm"], [70, 0, 0, "-", "fuse_pad_with_conv"], [71, 0, 0, "-", "fuse_pad_with_fp32_conv"], [72, 0, 0, "-", "fuse_reshape_transpose"], [73, 0, 0, "-", "graph_cse_optimizer"], [74, 0, 0, "-", "grappler_pass"], [76, 0, 0, "-", "insert_print_node"], [77, 0, 0, "-", "move_squeeze_after_relu"], [78, 0, 0, "-", "pre_optimize"], [79, 0, 0, "-", "remove_training_nodes"], [80, 0, 0, "-", "rename_batch_norm"], [81, 0, 0, "-", "split_shared_input"], [82, 0, 0, "-", "strip_equivalent_nodes"], [83, 0, 0, "-", "strip_unused_nodes"], [84, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, 1, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, 1, 1, "", "FuseDecomposedBNOptimizer"], [66, 2, 1, "", "bypass_reshape"], [66, 2, 1, "", "get_const_dim_count"], [66, 2, 1, "", "node_from_map"], [66, 2, 1, "", "node_name_from_input"], [66, 2, 1, "", "valid_reshape_inputs"], [66, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, 1, 1, "", "FuseDecomposedINOptimizer"], [67, 2, 1, "", "bypass_reshape"], [67, 2, 1, "", "get_const_dim_count"], [67, 2, 1, "", "node_from_map"], [67, 2, 1, "", "node_name_from_input"], [67, 2, 1, "", "valid_reshape_inputs"], [67, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, 1, 1, "", "FuseLayerNormOptimizer"], [69, 2, 1, "", "node_from_map"], [69, 2, 1, "", "node_name_from_input"], [69, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, 1, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[87, 0, 0, "-", "freeze_fake_quant"], [88, 0, 0, "-", "freeze_value"], [89, 0, 0, "-", "freeze_value_without_calib"], [90, 0, 0, "-", "fuse_conv_redundant_dequantize"], [91, 0, 0, "-", "fuse_conv_requantize"], [92, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [93, 0, 0, "-", "fuse_matmul_requantize"], [95, 0, 0, "-", "meta_op_optimizer"], [96, 0, 0, "-", "post_hostconst_converter"], [97, 0, 0, "-", "post_quantized_op_cse"], [98, 0, 0, "-", "rnn_convert"], [99, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [93, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [93, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [93, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, 0, 0, "-", "onnx_graph"], [102, 0, 0, "-", "onnx_node"], [103, 0, 0, "-", "onnx_schema"], [104, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, 1, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, 1, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, 1, 1, "", "OnnxOpSchema"], [103, 2, 1, "", "get_max_supported_opset_version"], [103, 2, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, 1, 1, "", "SeqType"], [104, 2, 1, "", "add_port_to_name"], [104, 2, 1, "", "are_shapes_equal"], [104, 2, 1, "", "assert_error"], [104, 2, 1, "", "compute_const_folding_using_tf"], [104, 2, 1, "", "convert_tensorflow_tensor_to_onnx"], [104, 2, 1, "", "find_opset"], [104, 2, 1, "", "get_index_from_strided_slice_of_shape"], [104, 2, 1, "", "get_subgraphs_from_onnx"], [104, 2, 1, "", "get_tensorflow_node_attr"], [104, 2, 1, "", "get_tensorflow_node_shape_attr"], [104, 2, 1, "", "get_tensorflow_tensor_data"], [104, 2, 1, "", "get_tensorflow_tensor_shape"], [104, 2, 1, "", "infer_onnx_shape_dtype"], [104, 2, 1, "", "initialize_name_counter"], [104, 2, 1, "", "is_list_or_tuple"], [104, 2, 1, "", "is_onnx_domain"], [104, 2, 1, "", "make_onnx_inputs_outputs"], [104, 2, 1, "", "make_onnx_shape"], [104, 2, 1, "", "map_numpy_to_onnx_dtype"], [104, 2, 1, "", "map_onnx_to_numpy_type"], [104, 2, 1, "", "map_tensorflow_dtype"], [104, 2, 1, "", "read_tensorflow_node_attrs"], [104, 2, 1, "", "save_protobuf"], [104, 2, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, 0, 0, "-", "insert_qdq_pattern"], [107, 0, 0, "-", "merge_duplicated_qdq"], [108, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, 1, 1, "", "GraphAnalyzer"], [109, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[113, 0, 0, "-", "qat"], [129, 0, 0, "-", "qdq"], [131, 0, 0, "-", "quantize_graph_base"], [132, 0, 0, "-", "quantize_graph_bn"], [133, 0, 0, "-", "quantize_graph_concatv2"], [134, 0, 0, "-", "quantize_graph_conv"], [135, 0, 0, "-", "quantize_graph_for_intel_cpu"], [136, 0, 0, "-", "quantize_graph_matmul"], [137, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[112, 0, 0, "-", "fake_quantize"], [114, 0, 0, "-", "quantize_config"], [115, 0, 0, "-", "quantize_helper"], [116, 0, 0, "-", "quantize_layers"], [121, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, 1, 1, "", "FakeQuantize"], [112, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, 1, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, 2, 1, "", "init_quantize_config"], [115, 2, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, 0, 0, "-", "optimize_layer"], [118, 0, 0, "-", "quantize_layer_add"], [119, 0, 0, "-", "quantize_layer_base"], [120, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, 1, 1, "", "QuantizeWrapper"], [121, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[122, 0, 0, "-", "fuse_qdq_bn"], [123, 0, 0, "-", "fuse_qdq_concatv2"], [124, 0, 0, "-", "fuse_qdq_conv"], [125, 0, 0, "-", "fuse_qdq_deconv"], [126, 0, 0, "-", "fuse_qdq_in"], [127, 0, 0, "-", "fuse_qdq_matmul"], [128, 0, 0, "-", "fuse_qdq_pooling"], [130, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, 1, 1, "", "QuantizeGraphBase"], [131, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[139, 1, 1, "", "SmoothQuantCalibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[140, 1, 1, "", "SmoothQuantScaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[141, 1, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[142, 0, 0, "-", "bias_correction"], [143, 0, 0, "-", "graph_transform_base"], [145, 0, 0, "-", "insert_logging"], [146, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[142, 1, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[143, 1, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[145, 1, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[146, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[147, 2, 1, "", "collate_tf_preds"], [147, 2, 1, "", "disable_random"], [147, 2, 1, "", "fix_ref_type_of_graph_def"], [147, 2, 1, "", "generate_feed_dict"], [147, 2, 1, "", "get_estimator_graph"], [147, 2, 1, "", "get_graph_def"], [147, 2, 1, "", "get_input_output_node_names"], [147, 2, 1, "", "get_model_input_shape"], [147, 2, 1, "", "get_tensor_by_name"], [147, 2, 1, "", "get_tensor_val_from_graph_node"], [147, 2, 1, "", "get_weight_from_input_tensor"], [147, 2, 1, "", "int8_node_name_reverse"], [147, 2, 1, "", "is_ckpt_format"], [147, 2, 1, "", "is_saved_model_format"], [147, 2, 1, "", "iterator_sess_run"], [147, 2, 1, "", "read_graph"], [147, 2, 1, "", "strip_equivalent_nodes"], [147, 2, 1, "", "strip_unused_nodes"], [147, 2, 1, "", "tf_diagnosis_helper"], [147, 2, 1, "", "version1_eq_version2"], [147, 2, 1, "", "version1_gt_version2"], [147, 2, 1, "", "version1_gte_version2"], [147, 2, 1, "", "version1_lt_version2"], [147, 2, 1, "", "version1_lte_version2"], [147, 2, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[148, 0, 0, "-", "bf16_convert"], [149, 0, 0, "-", "gptq"], [150, 0, 0, "-", "hawq_metric"], [152, 0, 0, "-", "mixed_precision"], [153, 0, 0, "-", "model_wrapper"], [154, 0, 0, "-", "pattern_detector"], [155, 0, 0, "-", "smooth_quant"], [156, 0, 0, "-", "symbolic_trace"], [157, 0, 0, "-", "teq"], [158, 0, 0, "-", "util"], [159, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[148, 1, 1, "", "BF16ModuleWrapper"], [148, 2, 1, "", "Convert"], [148, 2, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.gptq": [[149, 1, 1, "", "GPTQ"], [149, 1, 1, "", "GPTQuantizer"], [149, 2, 1, "", "find_layers"], [149, 2, 1, "", "find_layers_name"], [149, 2, 1, "", "is_leaf"], [149, 2, 1, "", "log_quantizable_layers_per_transformer"], [149, 2, 1, "", "quantize"], [149, 2, 1, "", "trace_gptq_target_blocks"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[150, 1, 1, "", "HessianTrace"], [150, 1, 1, "", "Node_collector"], [150, 2, 1, "", "compare_weights"], [150, 2, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[152, 2, 1, "", "ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[153, 1, 1, "", "FakeAffineTensorQuantFunction"], [153, 1, 1, "", "TEQLinearFakeQuant"], [153, 1, 1, "", "TEQMulLinear"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[154, 1, 1, "", "TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[155, 1, 1, "", "GraphTrace"], [155, 1, 1, "", "TorchSmoothQuant"], [155, 2, 1, "", "get_module"], [155, 2, 1, "", "set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[156, 2, 1, "", "symbolic_trace"], [156, 2, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.teq": [[157, 1, 1, "", "TEQuantizer"]], "neural_compressor.adaptor.torch_utils.util": [[158, 2, 1, "", "append_attr"], [158, 2, 1, "", "auto_copy"], [158, 2, 1, "", "calculate_quant_min_max"], [158, 2, 1, "", "check_cfg_and_qconfig"], [158, 2, 1, "", "collate_torch_preds"], [158, 2, 1, "", "collect_weight_info"], [158, 2, 1, "", "fetch_module"], [158, 2, 1, "", "generate_activation_observer"], [158, 2, 1, "", "get_depth"], [158, 2, 1, "", "get_dict_at_depth"], [158, 2, 1, "", "get_element_under_depth"], [158, 2, 1, "", "get_embedding_contiguous"], [158, 2, 1, "", "get_example_input"], [158, 2, 1, "", "get_fallback_order"], [158, 2, 1, "", "get_mse_order_per_fp32"], [158, 2, 1, "", "get_mse_order_per_int8"], [158, 2, 1, "", "get_op_type_by_name"], [158, 2, 1, "", "get_quantizable_ops_from_cfgs"], [158, 2, 1, "", "get_torch_version"], [158, 2, 1, "", "input2tuple"], [158, 2, 1, "", "is_fused_module"], [158, 2, 1, "", "match_datatype_pattern"], [158, 2, 1, "", "paser_cfgs"], [158, 2, 1, "", "set_module"], [158, 2, 1, "", "simple_inference"], [158, 2, 1, "", "update_sq_scale"]], "neural_compressor.adaptor.torch_utils.weight_only": [[159, 2, 1, "", "awq_quantize"], [159, 2, 1, "", "get_module_input_output"], [159, 2, 1, "", "gptq_quantize"], [159, 2, 1, "", "qdq_weight_actor"], [159, 2, 1, "", "qdq_weight_asym"], [159, 2, 1, "", "qdq_weight_sym"], [159, 2, 1, "", "quant_weight"], [159, 2, 1, "", "rtn_quantize"], [159, 2, 1, "", "teq_quantize"]], "neural_compressor.algorithm": [[160, 0, 0, "-", "algorithm"], [161, 0, 0, "-", "fast_bias_correction"], [163, 0, 0, "-", "smooth_quant"], [164, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[160, 1, 1, "", "ALGORITHMS"], [160, 1, 1, "", "Algorithm"], [160, 1, 1, "", "AlgorithmScheduler"], [160, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[161, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[163, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[164, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[165, 2, 1, "", "benchmark_with_raw_cmd"], [165, 2, 1, "", "call_one"], [165, 2, 1, "", "config_instance"], [165, 2, 1, "", "fit"], [165, 2, 1, "", "generate_prefix"], [165, 2, 1, "", "get_architecture"], [165, 2, 1, "", "get_bounded_threads"], [165, 2, 1, "", "get_core_ids"], [165, 2, 1, "", "get_physical_ids"], [165, 2, 1, "", "get_threads"], [165, 2, 1, "", "get_threads_per_core"], [165, 2, 1, "", "profile"], [165, 2, 1, "", "run_instance"], [165, 2, 1, "", "set_all_env_var"], [165, 2, 1, "", "set_env_var"], [165, 2, 1, "", "summary_benchmark"]], "neural_compressor.compression": [[166, 0, 0, "-", "callbacks"], [168, 0, 0, "-", "distillation"], [171, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[166, 1, 1, "", "BaseCallbacks"], [166, 1, 1, "", "DistillationCallbacks"], [166, 1, 1, "", "PruningCallbacks"], [166, 1, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[166, 3, 1, "", "_epoch_ran"], [166, 3, 1, "", "best_model"], [166, 3, 1, "", "best_score"], [166, 3, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[167, 0, 0, "-", "criterions"]], "neural_compressor.compression.distillation.criterions": [[167, 1, 1, "", "Criterions"], [167, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [167, 1, 1, "", "KnowledgeDistillationFramework"], [167, 1, 1, "", "KnowledgeDistillationLoss"], [167, 1, 1, "", "PyTorchCriterions"], [167, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [167, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [167, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [167, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [167, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [167, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [167, 1, 1, "", "SelfKnowledgeDistillationLoss"], [167, 1, 1, "", "TensorflowCriterions"], [167, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [167, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [167, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [167, 2, 1, "", "criterion_registry"]], "neural_compressor.compression.pruner": [[170, 0, 0, "-", "criteria"], [173, 0, 0, "-", "model_slim"], [176, 0, 0, "-", "patterns"], [177, 0, 0, "-", "pruners"], [178, 0, 0, "-", "regs"], [179, 0, 0, "-", "schedulers"], [180, 0, 0, "-", "utils"]], "neural_compressor.compression.pruner.criteria": [[170, 1, 1, "", "GradientCriterion"], [170, 1, 1, "", "MagnitudeCriterion"], [170, 1, 1, "", "PruningCriterion"], [170, 1, 1, "", "RetrainFreeCriterion"], [170, 1, 1, "", "SnipCriterion"], [170, 1, 1, "", "SnipMomentumBlockCriterion"], [170, 1, 1, "", "SnipMomentumCriterion"], [170, 2, 1, "", "get_criterion"], [170, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[170, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[170, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[170, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[170, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[170, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion": [[170, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[170, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.model_slim": [[172, 0, 0, "-", "auto_slim"], [174, 0, 0, "-", "pattern_analyzer"], [175, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[172, 2, 1, "", "generate_ffn2_pruning_config"], [172, 2, 1, "", "generate_mha_pruning_config"], [172, 2, 1, "", "model_slim"], [172, 2, 1, "", "model_slim_ffn2"], [172, 2, 1, "", "model_slim_mha"], [172, 2, 1, "", "parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[174, 1, 1, "", "ClassifierHeadSearcher"], [174, 1, 1, "", "ClassifierHeadSearcherTF"], [174, 1, 1, "", "JitBasicSearcher"], [174, 1, 1, "", "Linear2LinearSearcher"], [174, 1, 1, "", "RecipeSearcher"], [174, 1, 1, "", "SelfMHASearcher"], [174, 2, 1, "", "get_attributes"], [174, 2, 1, "", "get_common_module"], [174, 2, 1, "", "print_iterables"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher": [[174, 3, 1, "", "device"], [174, 3, 1, "", "flatten_static_graph"], [174, 3, 1, "", "model"], [174, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF": [[174, 3, 1, "", "device"], [174, 3, 1, "", "flatten_static_graph"], [174, 3, 1, "", "model"], [174, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[174, 3, 1, "", "device"], [174, 3, 1, "", "flatten_static_graph"], [174, 3, 1, "", "model"], [174, 3, 1, "", "searching_results"], [174, 3, 1, "", "static_graph"], [174, 3, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[174, 3, 1, "", "current_pattern"], [174, 3, 1, "", "device"], [174, 3, 1, "", "flatten_static_graph"], [174, 3, 1, "", "model"], [174, 3, 1, "", "searching_results"], [174, 3, 1, "", "static_graph"], [174, 3, 1, "", "target_layers"], [174, 3, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[174, 3, 1, "", "model"], [174, 3, 1, "", "recipe"], [174, 3, 1, "", "searching_results"], [174, 3, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[174, 3, 1, "", "device"], [174, 3, 1, "", "flatten_static_graph"], [174, 3, 1, "", "model"], [174, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[175, 1, 1, "", "LinearCompression"], [175, 1, 1, "", "LinearCompressionIterator"], [175, 1, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[175, 3, 1, "", "device"], [175, 3, 1, "", "layer_1"], [175, 3, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[175, 3, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[176, 1, 1, "", "BasePattern"], [176, 1, 1, "", "PatternMHA"], [176, 1, 1, "", "PatternNInM"], [176, 1, 1, "", "PatternNxM"], [176, 2, 1, "", "get_pattern"], [176, 2, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.BasePattern": [[176, 3, 1, "", "config"], [176, 3, 1, "", "invalid_layers"], [176, 3, 1, "", "is_global"], [176, 3, 1, "", "keep_mask_layers"], [176, 3, 1, "", "max_sparsity_ratio_per_op"], [176, 3, 1, "", "min_sparsity_ratio_per_op"], [176, 3, 1, "", "modules"], [176, 3, 1, "", "pattern"], [176, 3, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.PatternMHA": [[176, 3, 1, "", "M"], [176, 3, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.PatternNInM": [[176, 3, 1, "", "M"], [176, 3, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.PatternNxM": [[176, 3, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[177, 1, 1, "", "BasePruner"], [177, 1, 1, "", "BasicPruner"], [177, 1, 1, "", "BlockMaskPruner"], [177, 1, 1, "", "MultiheadAttentionPruner"], [177, 1, 1, "", "PatternLockPruner"], [177, 1, 1, "", "ProgressivePruner"], [177, 1, 1, "", "RetrainFreePruner"], [177, 2, 1, "", "get_pruner"], [177, 2, 1, "", "parse_valid_pruner_types"], [177, 2, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.BasePruner": [[177, 3, 1, "", "config"], [177, 3, 1, "", "current_sparsity_ratio"], [177, 3, 1, "", "end_step"], [177, 3, 1, "", "global_step"], [177, 3, 1, "", "masks"], [177, 3, 1, "", "max_sparsity_ratio_per_op"], [177, 3, 1, "", "modules"], [177, 3, 1, "", "pattern"], [177, 3, 1, "", "pruning_frequency"], [177, 3, 1, "", "scheduler"], [177, 3, 1, "", "scores"], [177, 3, 1, "", "start_step"], [177, 3, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.BasicPruner": [[177, 3, 1, "", "criterion"], [177, 3, 1, "", "pattern"], [177, 3, 1, "", "reg"], [177, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.BlockMaskPruner": [[177, 3, 1, "", "criterion"], [177, 3, 1, "", "pattern"], [177, 3, 1, "", "reg"], [177, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.MultiheadAttentionPruner": [[177, 3, 1, "", "head_masks"], [177, 3, 1, "", "linear_layers"], [177, 3, 1, "", "mha_compressions"], [177, 3, 1, "", "mha_scores"]], "neural_compressor.compression.pruner.pruners.RetrainFreePruner": [[177, 3, 1, "", "criterion"], [177, 3, 1, "", "pattern"], [177, 3, 1, "", "reg"], [177, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.regs": [[178, 1, 1, "", "BaseReg"], [178, 1, 1, "", "GroupLasso"], [178, 2, 1, "", "get_reg"], [178, 2, 1, "", "get_reg_type"], [178, 2, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[178, 3, 1, "", "alpha"], [178, 3, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[179, 1, 1, "", "IterativeScheduler"], [179, 1, 1, "", "OneshotScheduler"], [179, 1, 1, "", "PruningScheduler"], [179, 2, 1, "", "get_scheduler"], [179, 2, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[179, 3, 1, "", "config"]], "neural_compressor.compression.pruner.utils": [[180, 2, 1, "", "check_config"], [180, 2, 1, "", "check_key_validity"], [180, 2, 1, "", "generate_pruner_config"], [180, 2, 1, "", "get_sparsity_ratio"], [180, 2, 1, "", "get_sparsity_ratio_tf"], [180, 2, 1, "", "parse_last_linear"], [180, 2, 1, "", "parse_last_linear_tf"], [180, 2, 1, "", "parse_to_prune"], [180, 2, 1, "", "parse_to_prune_tf"], [180, 2, 1, "", "process_and_check_config"], [180, 2, 1, "", "process_config"], [180, 2, 1, "", "process_weight_config"], [180, 2, 1, "", "process_yaml_config"], [180, 2, 1, "", "reset_none_to_default"], [180, 2, 1, "", "update_params"]], "neural_compressor.conf": [[181, 0, 0, "-", "config"], [182, 0, 0, "-", "dotdict"], [184, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[181, 1, 1, "", "Benchmark_Conf"], [181, 1, 1, "", "Conf"], [181, 1, 1, "", "Distillation_Conf"], [181, 1, 1, "", "Graph_Optimization_Conf"], [181, 1, 1, "", "MixedPrecision_Conf"], [181, 1, 1, "", "NASConfig"], [181, 1, 1, "", "PrunerV2"], [181, 1, 1, "", "Pruning_Conf"], [181, 1, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[182, 1, 1, "", "DotDict"], [182, 2, 1, "", "deep_get"], [182, 2, 1, "", "deep_set"]], "neural_compressor.conf.pythonic_config": [[184, 1, 1, "", "AccuracyCriterion"], [184, 1, 1, "", "BenchmarkConfig"], [184, 1, 1, "", "DistillationConfig"], [184, 1, 1, "", "KnowledgeDistillationLossConfig"], [184, 1, 1, "", "Options"], [184, 1, 1, "", "QuantizationConfig"], [184, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.config": [[185, 1, 1, "", "AccuracyCriterion"], [185, 1, 1, "", "BenchmarkConfig"], [185, 1, 1, "", "DistillationConfig"], [185, 1, 1, "", "DotDict"], [185, 1, 1, "", "ExportConfig"], [185, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [185, 1, 1, "", "Keras"], [185, 1, 1, "", "KnowledgeDistillationLossConfig"], [185, 1, 1, "", "MXNet"], [185, 1, 1, "", "MixedPrecisionConfig"], [185, 1, 1, "", "NASConfig"], [185, 1, 1, "", "ONNX"], [185, 1, 1, "", "ONNXQlinear2QDQConfig"], [185, 1, 1, "", "Options"], [185, 1, 1, "", "PostTrainingQuantConfig"], [185, 1, 1, "", "PyTorch"], [185, 1, 1, "", "QuantizationAwareTrainingConfig"], [185, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [185, 1, 1, "", "TF2ONNXConfig"], [185, 1, 1, "", "TensorFlow"], [185, 1, 1, "", "Torch2ONNXConfig"], [185, 1, 1, "", "TuningCriterion"], [185, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[187, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[188, 0, 0, "-", "sigopt"], [189, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[188, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[189, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[194, 0, 0, "-", "dataloaders"], [206, 0, 0, "-", "datasets"], [210, 0, 0, "-", "filters"], [214, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[190, 0, 0, "-", "base_dataloader"], [191, 0, 0, "-", "dataloader"], [192, 0, 0, "-", "default_dataloader"], [193, 0, 0, "-", "fetcher"], [195, 0, 0, "-", "mxnet_dataloader"], [196, 0, 0, "-", "onnxrt_dataloader"], [197, 0, 0, "-", "pytorch_dataloader"], [198, 0, 0, "-", "sampler"], [199, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[190, 1, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[191, 1, 1, "", "DataLoader"], [191, 2, 1, "", "check_dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[192, 1, 1, "", "DefaultDataLoader"], [192, 2, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[193, 1, 1, "", "Fetcher"], [193, 1, 1, "", "IndexFetcher"], [193, 1, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[195, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[196, 1, 1, "", "ONNXRTBertDataLoader"], [196, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[197, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[198, 1, 1, "", "BatchSampler"], [198, 1, 1, "", "IterableSampler"], [198, 1, 1, "", "Sampler"], [198, 1, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[199, 1, 1, "", "TFDataDataLoader"], [199, 1, 1, "", "TensorflowBertDataLoader"], [199, 1, 1, "", "TensorflowDataLoader"], [199, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[200, 0, 0, "-", "bert_dataset"], [201, 0, 0, "-", "coco_dataset"], [202, 0, 0, "-", "dataset"], [203, 0, 0, "-", "dummy_dataset"], [204, 0, 0, "-", "dummy_dataset_v2"], [205, 0, 0, "-", "imagenet_dataset"], [207, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[200, 1, 1, "", "InputFeatures"], [200, 1, 1, "", "ONNXRTBertDataset"], [200, 1, 1, "", "ParseDecodeBert"], [200, 1, 1, "", "PytorchBertDataset"], [200, 1, 1, "", "TensorflowBertDataset"], [200, 1, 1, "", "TensorflowModelZooBertDataset"], [200, 2, 1, "", "convert_examples_to_features"], [200, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[201, 1, 1, "", "COCONpy"], [201, 1, 1, "", "COCORaw"], [201, 1, 1, "", "COCORecordDataset"], [201, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[202, 1, 1, "", "CIFAR10"], [202, 1, 1, "", "CIFAR100"], [202, 1, 1, "", "Dataset"], [202, 1, 1, "", "Datasets"], [202, 1, 1, "", "FashionMNIST"], [202, 1, 1, "", "ImageFolder"], [202, 1, 1, "", "IterableDataset"], [202, 1, 1, "", "MNIST"], [202, 1, 1, "", "MXNetCIFAR10"], [202, 1, 1, "", "MXNetCIFAR100"], [202, 1, 1, "", "MXNetDatasets"], [202, 1, 1, "", "MXNetFashionMNIST"], [202, 1, 1, "", "MXNetImageFolder"], [202, 1, 1, "", "MXNetMNIST"], [202, 1, 1, "", "ONNXRTITDatasets"], [202, 1, 1, "", "ONNXRTQLDatasets"], [202, 1, 1, "", "PyTorchDatasets"], [202, 1, 1, "", "PytorchCIFAR10"], [202, 1, 1, "", "PytorchCIFAR100"], [202, 1, 1, "", "PytorchFashionMNIST"], [202, 1, 1, "", "PytorchMNIST"], [202, 1, 1, "", "PytorchMxnetWrapDataset"], [202, 1, 1, "", "PytorchMxnetWrapFunction"], [202, 1, 1, "", "Tensorflow"], [202, 1, 1, "", "TensorflowCIFAR10"], [202, 1, 1, "", "TensorflowCIFAR100"], [202, 1, 1, "", "TensorflowDatasets"], [202, 1, 1, "", "TensorflowFashionMNIST"], [202, 1, 1, "", "TensorflowImageRecord"], [202, 1, 1, "", "TensorflowMNIST"], [202, 1, 1, "", "TensorflowTFRecordDataset"], [202, 1, 1, "", "TensorflowVOCRecord"], [202, 2, 1, "", "calculate_md5"], [202, 2, 1, "", "check_integrity"], [202, 2, 1, "", "dataset_registry"], [202, 2, 1, "", "download_url"], [202, 4, 1, "", "framework_datasets"], [202, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[203, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[204, 1, 1, "", "DummyDataset"], [204, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[205, 1, 1, "", "ImagenetRaw"], [205, 1, 1, "", "MXNetImagenetRaw"], [205, 1, 1, "", "ONNXRTImagenetDataset"], [205, 1, 1, "", "PytorchImagenetRaw"], [205, 1, 1, "", "TensorflowImagenetDataset"], [205, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[207, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[208, 0, 0, "-", "coco_filter"], [209, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[208, 1, 1, "", "LabelBalanceCOCORawFilter"], [208, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[209, 1, 1, "", "FILTERS"], [209, 1, 1, "", "Filter"], [209, 1, 1, "", "MXNetFilters"], [209, 1, 1, "", "ONNXRTITFilters"], [209, 1, 1, "", "ONNXRTQLFilters"], [209, 1, 1, "", "PyTorchFilters"], [209, 1, 1, "", "TensorflowFilters"], [209, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[212, 0, 0, "-", "coco_transform"], [213, 0, 0, "-", "imagenet_transform"], [215, 0, 0, "-", "postprocess"], [216, 0, 0, "-", "tokenization"], [217, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.coco_transform": [[212, 1, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[213, 1, 1, "", "BilinearImagenetTransform"], [213, 1, 1, "", "LabelShift"], [213, 1, 1, "", "ONNXResizeCropImagenetTransform"], [213, 1, 1, "", "OnnxBilinearImagenetTransform"], [213, 1, 1, "", "ParseDecodeImagenet"], [213, 1, 1, "", "ParseDecodeImagenetTransform"], [213, 1, 1, "", "QuantizedInput"], [213, 1, 1, "", "ResizeWithAspectRatio"], [213, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [213, 1, 1, "", "TensorflowShiftRescale"], [213, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[215, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[216, 1, 1, "", "BasicTokenizer"], [216, 1, 1, "", "FullTokenizer"], [216, 1, 1, "", "WordpieceTokenizer"], [216, 2, 1, "", "convert_by_vocab"], [216, 2, 1, "", "convert_to_unicode"], [216, 2, 1, "", "load_vocab"], [216, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[217, 1, 1, "", "AlignImageChannelTransform"], [217, 1, 1, "", "BaseTransform"], [217, 1, 1, "", "CastONNXTransform"], [217, 1, 1, "", "CastPyTorchTransform"], [217, 1, 1, "", "CastTFTransform"], [217, 1, 1, "", "CenterCropTFTransform"], [217, 1, 1, "", "CenterCropTransform"], [217, 1, 1, "", "CollectTransform"], [217, 1, 1, "", "ComposeTransform"], [217, 1, 1, "", "CropResizeTFTransform"], [217, 1, 1, "", "CropResizeTransform"], [217, 1, 1, "", "CropToBoundingBox"], [217, 1, 1, "", "InputFeatures"], [217, 1, 1, "", "MXNetCropResizeTransform"], [217, 1, 1, "", "MXNetCropToBoundingBox"], [217, 1, 1, "", "MXNetNormalizeTransform"], [217, 1, 1, "", "MXNetTransforms"], [217, 1, 1, "", "MXNetTranspose"], [217, 1, 1, "", "NormalizeTFTransform"], [217, 1, 1, "", "NormalizeTransform"], [217, 1, 1, "", "ONNXRTCropToBoundingBox"], [217, 1, 1, "", "ONNXRTITTransforms"], [217, 1, 1, "", "ONNXRTQLTransforms"], [217, 1, 1, "", "PaddedCenterCropTransform"], [217, 1, 1, "", "ParseDecodeVocTransform"], [217, 1, 1, "", "PyTorchAlignImageChannel"], [217, 1, 1, "", "PyTorchCropResizeTransform"], [217, 1, 1, "", "PyTorchNormalizeTransform"], [217, 1, 1, "", "PyTorchTransforms"], [217, 1, 1, "", "PyTorchTranspose"], [217, 1, 1, "", "PytorchMxnetTransform"], [217, 1, 1, "", "PytorchMxnetWrapFunction"], [217, 1, 1, "", "RandomCropTFTransform"], [217, 1, 1, "", "RandomCropTransform"], [217, 1, 1, "", "RandomHorizontalFlip"], [217, 1, 1, "", "RandomResizedCropMXNetTransform"], [217, 1, 1, "", "RandomResizedCropPytorchTransform"], [217, 1, 1, "", "RandomResizedCropTFTransform"], [217, 1, 1, "", "RandomResizedCropTransform"], [217, 1, 1, "", "RandomVerticalFlip"], [217, 1, 1, "", "RescaleKerasPretrainTransform"], [217, 1, 1, "", "RescaleTFTransform"], [217, 1, 1, "", "RescaleTransform"], [217, 1, 1, "", "ResizeMXNetTransform"], [217, 1, 1, "", "ResizePytorchTransform"], [217, 1, 1, "", "ResizeTFTransform"], [217, 1, 1, "", "ResizeTransform"], [217, 1, 1, "", "ResizeWithRatio"], [217, 1, 1, "", "SquadExample"], [217, 1, 1, "", "TFModelZooCollectTransform"], [217, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [217, 1, 1, "", "TFSquadV1PostTransform"], [217, 1, 1, "", "TRANSFORMS"], [217, 1, 1, "", "TensorflowCropToBoundingBox"], [217, 1, 1, "", "TensorflowRandomHorizontalFlip"], [217, 1, 1, "", "TensorflowRandomVerticalFlip"], [217, 1, 1, "", "TensorflowResizeWithRatio"], [217, 1, 1, "", "TensorflowTransform"], [217, 1, 1, "", "TensorflowTransforms"], [217, 1, 1, "", "TensorflowTranspose"], [217, 1, 1, "", "TensorflowWrapFunction"], [217, 1, 1, "", "ToArray"], [217, 1, 1, "", "ToNDArrayTransform"], [217, 1, 1, "", "Transforms"], [217, 1, 1, "", "Transpose"], [217, 2, 1, "", "convert_examples_to_features"], [217, 2, 1, "", "get_final_text"], [217, 2, 1, "", "get_torchvision_map"], [217, 2, 1, "", "read_squad_examples"], [217, 2, 1, "", "transform_registry"]], "neural_compressor.experimental": [[218, 0, 0, "-", "benchmark"], [221, 0, 0, "-", "common"], [227, 0, 0, "-", "component"], [228, 0, 0, "-", "compression"], [230, 0, 0, "-", "contrib"], [255, 0, 0, "-", "data"], [260, 0, 0, "-", "distillation"], [261, 0, 0, "-", "export"], [265, 0, 0, "-", "graph_optimization"], [273, 0, 0, "-", "metric"], [275, 0, 0, "-", "mixed_precision"], [276, 0, 0, "-", "model_conversion"], [279, 0, 0, "-", "nas"], [285, 0, 0, "-", "pruner_legacy"], [289, 0, 0, "-", "pruning"], [290, 0, 0, "-", "pruning_recipes"], [294, 0, 0, "-", "pruning_v2"], [295, 0, 0, "-", "pytorch_pruner"], [302, 0, 0, "-", "quantization"], [303, 0, 0, "-", "scheduler"], [308, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[218, 1, 1, "", "Benchmark"], [218, 2, 1, "", "get_architecture"], [218, 2, 1, "", "get_bounded_threads"], [218, 2, 1, "", "get_core_ids"], [218, 2, 1, "", "get_physical_ids"], [218, 2, 1, "", "get_threads"], [218, 2, 1, "", "get_threads_per_core"], [218, 2, 1, "", "set_all_env_var"], [218, 2, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[219, 0, 0, "-", "criterion"], [220, 0, 0, "-", "dataloader"], [222, 0, 0, "-", "metric"], [223, 0, 0, "-", "model"], [224, 0, 0, "-", "optimizer"], [225, 0, 0, "-", "postprocess"], [226, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[219, 1, 1, "", "Criterions"], [219, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [219, 1, 1, "", "KnowledgeDistillationFramework"], [219, 1, 1, "", "KnowledgeDistillationLoss"], [219, 1, 1, "", "PyTorchCriterions"], [219, 1, 1, "", "PyTorchCrossEntropyLoss"], [219, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [219, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [219, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [219, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [219, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [219, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [219, 1, 1, "", "SelfKnowledgeDistillationLoss"], [219, 1, 1, "", "TensorFlowCrossEntropyLoss"], [219, 1, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [219, 1, 1, "", "TensorflowCriterions"], [219, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [219, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [219, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [219, 2, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[220, 1, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[222, 1, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[223, 1, 1, "", "Model"], [223, 2, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[224, 1, 1, "", "Optimizers"], [224, 1, 1, "", "PyTorchOptimizers"], [224, 1, 1, "", "PyTorchSGD"], [224, 1, 1, "", "TensorFlowAdam"], [224, 1, 1, "", "TensorFlowAdamW"], [224, 1, 1, "", "TensorFlowSGD"], [224, 1, 1, "", "TensorflowOptimizers"], [224, 2, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[225, 1, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[226, 2, 1, "", "get_activation"], [226, 2, 1, "", "record_output"]], "neural_compressor.experimental.component": [[227, 1, 1, "", "Component"]], "neural_compressor.experimental.compression": [[229, 0, 0, "-", "pruning"]], "neural_compressor.experimental.compression.pruning": [[229, 2, 1, "", "prepare_pruning"], [229, 2, 1, "", "save"]], "neural_compressor.experimental.contrib": [[231, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[232, 0, 0, "-", "sigopt"], [233, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[232, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[233, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[238, 0, 0, "-", "dataloaders"], [250, 0, 0, "-", "datasets"], [254, 0, 0, "-", "filters"], [257, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[234, 0, 0, "-", "base_dataloader"], [235, 0, 0, "-", "dataloader"], [236, 0, 0, "-", "default_dataloader"], [237, 0, 0, "-", "fetcher"], [239, 0, 0, "-", "mxnet_dataloader"], [240, 0, 0, "-", "onnxrt_dataloader"], [241, 0, 0, "-", "pytorch_dataloader"], [242, 0, 0, "-", "sampler"], [243, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[234, 1, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[236, 1, 1, "", "DefaultDataLoader"], [236, 2, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[237, 1, 1, "", "Fetcher"], [237, 1, 1, "", "IndexFetcher"], [237, 1, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[239, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[240, 1, 1, "", "ONNXRTBertDataLoader"], [240, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[241, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[242, 1, 1, "", "BatchSampler"], [242, 1, 1, "", "IterableSampler"], [242, 1, 1, "", "Sampler"], [242, 1, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[243, 1, 1, "", "TFDataDataLoader"], [243, 1, 1, "", "TensorflowBertDataLoader"], [243, 1, 1, "", "TensorflowDataLoader"], [243, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[244, 0, 0, "-", "bert_dataset"], [245, 0, 0, "-", "coco_dataset"], [246, 0, 0, "-", "dataset"], [247, 0, 0, "-", "dummy_dataset"], [248, 0, 0, "-", "dummy_dataset_v2"], [249, 0, 0, "-", "imagenet_dataset"], [251, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[244, 1, 1, "", "InputFeatures"], [244, 1, 1, "", "ONNXRTBertDataset"], [244, 1, 1, "", "ParseDecodeBert"], [244, 1, 1, "", "PytorchBertDataset"], [244, 1, 1, "", "TensorflowBertDataset"], [244, 1, 1, "", "TensorflowModelZooBertDataset"], [244, 2, 1, "", "convert_examples_to_features"], [244, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[245, 1, 1, "", "COCONpy"], [245, 1, 1, "", "COCORaw"], [245, 1, 1, "", "COCORecordDataset"], [245, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[246, 1, 1, "", "CIFAR10"], [246, 1, 1, "", "CIFAR100"], [246, 1, 1, "", "Dataset"], [246, 1, 1, "", "Datasets"], [246, 1, 1, "", "FashionMNIST"], [246, 1, 1, "", "ImageFolder"], [246, 1, 1, "", "IterableDataset"], [246, 1, 1, "", "MNIST"], [246, 1, 1, "", "MXNetCIFAR10"], [246, 1, 1, "", "MXNetCIFAR100"], [246, 1, 1, "", "MXNetDatasets"], [246, 1, 1, "", "MXNetFashionMNIST"], [246, 1, 1, "", "MXNetImageFolder"], [246, 1, 1, "", "MXNetMNIST"], [246, 1, 1, "", "ONNXRTITDatasets"], [246, 1, 1, "", "ONNXRTQLDatasets"], [246, 1, 1, "", "PyTorchDatasets"], [246, 1, 1, "", "PytorchCIFAR10"], [246, 1, 1, "", "PytorchCIFAR100"], [246, 1, 1, "", "PytorchFashionMNIST"], [246, 1, 1, "", "PytorchMNIST"], [246, 1, 1, "", "PytorchMxnetWrapDataset"], [246, 1, 1, "", "PytorchMxnetWrapFunction"], [246, 1, 1, "", "TensorflowCIFAR10"], [246, 1, 1, "", "TensorflowCIFAR100"], [246, 1, 1, "", "TensorflowDatasets"], [246, 1, 1, "", "TensorflowFashionMNIST"], [246, 1, 1, "", "TensorflowImageFolder"], [246, 1, 1, "", "TensorflowImageRecord"], [246, 1, 1, "", "TensorflowMNIST"], [246, 1, 1, "", "TensorflowTFRecordDataset"], [246, 1, 1, "", "TensorflowVOCRecord"], [246, 2, 1, "", "calculate_md5"], [246, 2, 1, "", "check_integrity"], [246, 2, 1, "", "dataset_registry"], [246, 2, 1, "", "download_url"], [246, 4, 1, "", "framework_datasets"], [246, 2, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[247, 1, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[248, 1, 1, "", "DummyDataset"], [248, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[249, 1, 1, "", "ImagenetRaw"], [249, 1, 1, "", "MXNetImagenetRaw"], [249, 1, 1, "", "ONNXRTImagenetDataset"], [249, 1, 1, "", "PytorchImagenetRaw"], [249, 1, 1, "", "TensorflowImagenetDataset"], [249, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[251, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[252, 0, 0, "-", "coco_filter"], [253, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[252, 1, 1, "", "LabelBalanceCOCORawFilter"], [252, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[253, 1, 1, "", "FILTERS"], [253, 1, 1, "", "Filter"], [253, 1, 1, "", "MXNetFilters"], [253, 1, 1, "", "ONNXRTITFilters"], [253, 1, 1, "", "ONNXRTQLFilters"], [253, 1, 1, "", "PyTorchFilters"], [253, 1, 1, "", "TensorflowFilters"], [253, 2, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[256, 0, 0, "-", "imagenet_transform"], [258, 0, 0, "-", "tokenization"], [259, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[256, 1, 1, "", "BilinearImagenetTransform"], [256, 1, 1, "", "LabelShift"], [256, 1, 1, "", "ONNXResizeCropImagenetTransform"], [256, 1, 1, "", "OnnxBilinearImagenetTransform"], [256, 1, 1, "", "ParseDecodeImagenet"], [256, 1, 1, "", "ParseDecodeImagenetTransform"], [256, 1, 1, "", "QuantizedInput"], [256, 1, 1, "", "ResizeWithAspectRatio"], [256, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[258, 1, 1, "", "BasicTokenizer"], [258, 1, 1, "", "FullTokenizer"], [258, 1, 1, "", "WordpieceTokenizer"], [258, 2, 1, "", "convert_by_vocab"], [258, 2, 1, "", "convert_to_unicode"], [258, 2, 1, "", "load_vocab"], [258, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[259, 1, 1, "", "AlignImageChannelTransform"], [259, 1, 1, "", "BaseTransform"], [259, 1, 1, "", "CastONNXTransform"], [259, 1, 1, "", "CastPyTorchTransform"], [259, 1, 1, "", "CastTFTransform"], [259, 1, 1, "", "CenterCropTFTransform"], [259, 1, 1, "", "CenterCropTransform"], [259, 1, 1, "", "CollectTransform"], [259, 1, 1, "", "ComposeTransform"], [259, 1, 1, "", "CropResizeTFTransform"], [259, 1, 1, "", "CropResizeTransform"], [259, 1, 1, "", "CropToBoundingBox"], [259, 1, 1, "", "InputFeatures"], [259, 1, 1, "", "MXNetCropResizeTransform"], [259, 1, 1, "", "MXNetCropToBoundingBox"], [259, 1, 1, "", "MXNetNormalizeTransform"], [259, 1, 1, "", "MXNetTransforms"], [259, 1, 1, "", "MXNetTranspose"], [259, 1, 1, "", "NormalizeTFTransform"], [259, 1, 1, "", "NormalizeTransform"], [259, 1, 1, "", "ONNXRTCropToBoundingBox"], [259, 1, 1, "", "ONNXRTITTransforms"], [259, 1, 1, "", "ONNXRTQLTransforms"], [259, 1, 1, "", "PaddedCenterCropTransform"], [259, 1, 1, "", "ParseDecodeVocTransform"], [259, 1, 1, "", "PyTorchAlignImageChannel"], [259, 1, 1, "", "PyTorchCropResizeTransform"], [259, 1, 1, "", "PyTorchNormalizeTransform"], [259, 1, 1, "", "PyTorchTransforms"], [259, 1, 1, "", "PyTorchTranspose"], [259, 1, 1, "", "PytorchMxnetTransform"], [259, 1, 1, "", "PytorchMxnetWrapFunction"], [259, 1, 1, "", "RandomCropTFTransform"], [259, 1, 1, "", "RandomCropTransform"], [259, 1, 1, "", "RandomHorizontalFlip"], [259, 1, 1, "", "RandomResizedCropMXNetTransform"], [259, 1, 1, "", "RandomResizedCropPytorchTransform"], [259, 1, 1, "", "RandomResizedCropTFTransform"], [259, 1, 1, "", "RandomResizedCropTransform"], [259, 1, 1, "", "RandomVerticalFlip"], [259, 1, 1, "", "RescaleKerasPretrainTransform"], [259, 1, 1, "", "RescaleTFTransform"], [259, 1, 1, "", "RescaleTransform"], [259, 1, 1, "", "ResizeMXNetTransform"], [259, 1, 1, "", "ResizePytorchTransform"], [259, 1, 1, "", "ResizeTFTransform"], [259, 1, 1, "", "ResizeTransform"], [259, 1, 1, "", "ResizeWithRatio"], [259, 1, 1, "", "SquadExample"], [259, 1, 1, "", "TFModelZooCollectTransform"], [259, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [259, 1, 1, "", "TFSquadV1PostTransform"], [259, 1, 1, "", "TRANSFORMS"], [259, 1, 1, "", "TensorflowCropToBoundingBox"], [259, 1, 1, "", "TensorflowRandomHorizontalFlip"], [259, 1, 1, "", "TensorflowRandomVerticalFlip"], [259, 1, 1, "", "TensorflowResizeWithRatio"], [259, 1, 1, "", "TensorflowTransform"], [259, 1, 1, "", "TensorflowTransforms"], [259, 1, 1, "", "TensorflowTranspose"], [259, 1, 1, "", "TensorflowWrapFunction"], [259, 1, 1, "", "ToArray"], [259, 1, 1, "", "ToNDArrayTransform"], [259, 1, 1, "", "Transforms"], [259, 1, 1, "", "Transpose"], [259, 2, 1, "", "convert_examples_to_features"], [259, 2, 1, "", "get_final_text"], [259, 2, 1, "", "get_torchvision_map"], [259, 2, 1, "", "read_squad_examples"], [259, 2, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[260, 1, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[260, 3, 1, "", "_epoch_ran"], [260, 3, 1, "", "best_model"], [260, 3, 1, "", "best_score"], [260, 3, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[262, 0, 0, "-", "qlinear2qdq"], [263, 0, 0, "-", "tf2onnx"], [264, 0, 0, "-", "torch2onnx"]], "neural_compressor.experimental.export.qlinear2qdq": [[262, 2, 1, "", "check_model"], [262, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[263, 2, 1, "", "tf_to_fp32_onnx"], [263, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[264, 2, 1, "", "dynamic_quant_export"], [264, 2, 1, "", "get_node_mapping"], [264, 2, 1, "", "get_quantizable_onnx_ops"], [264, 2, 1, "", "static_quant_export"], [264, 2, 1, "", "torch_to_fp32_onnx"], [264, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.experimental.graph_optimization": [[265, 1, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[267, 0, 0, "-", "bleu"], [268, 0, 0, "-", "bleu_util"], [269, 0, 0, "-", "coco_label_map"], [270, 0, 0, "-", "coco_tools"], [271, 0, 0, "-", "evaluate_squad"], [272, 0, 0, "-", "f1"], [274, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[267, 1, 1, "", "BLEU"], [267, 1, 1, "", "UnicodeRegex"], [267, 2, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[267, 3, 1, "", "labels"], [267, 3, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[267, 3, 1, "", "nondigit_punct_re"], [267, 3, 1, "", "punct_nondigit_re"], [267, 3, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[268, 2, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[270, 1, 1, "", "COCOEvalWrapper"], [270, 1, 1, "", "COCOWrapper"], [270, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [270, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [270, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[270, 3, 1, "", "dataset"], [270, 3, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[271, 2, 1, "", "evaluate"], [271, 2, 1, "", "exact_match_score"], [271, 2, 1, "", "f1_score"], [271, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[272, 2, 1, "", "evaluate"], [272, 2, 1, "", "f1_score"], [272, 2, 1, "", "metric_max_over_ground_truths"], [272, 2, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[274, 1, 1, "", "Accuracy"], [274, 1, 1, "", "BaseMetric"], [274, 1, 1, "", "COCOmAPv2"], [274, 1, 1, "", "F1"], [274, 1, 1, "", "GeneralTopK"], [274, 1, 1, "", "Loss"], [274, 1, 1, "", "MAE"], [274, 1, 1, "", "METRICS"], [274, 1, 1, "", "MSE"], [274, 1, 1, "", "MXNetMetrics"], [274, 1, 1, "", "ONNXRTGLUE"], [274, 1, 1, "", "ONNXRTITMetrics"], [274, 1, 1, "", "ONNXRTQLMetrics"], [274, 1, 1, "", "PyTorchLoss"], [274, 1, 1, "", "PyTorchMetrics"], [274, 1, 1, "", "RMSE"], [274, 1, 1, "", "ROC"], [274, 1, 1, "", "SquadF1"], [274, 1, 1, "", "TensorflowCOCOMAP"], [274, 1, 1, "", "TensorflowMAP"], [274, 1, 1, "", "TensorflowMetrics"], [274, 1, 1, "", "TensorflowTopK"], [274, 1, 1, "", "TensorflowVOCMAP"], [274, 1, 1, "", "WrapMXNetMetric"], [274, 1, 1, "", "WrapONNXRTMetric"], [274, 1, 1, "", "WrapPyTorchMetric"], [274, 1, 1, "", "mIOU"], [274, 2, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[274, 3, 1, "", "label_list"], [274, 3, 1, "", "pred_list"], [274, 3, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[274, 3, 1, "", "k"], [274, 3, 1, "", "num_correct"], [274, 3, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[274, 3, 1, "", "sample"], [274, 3, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[274, 3, 1, "", "compare_label"], [274, 3, 1, "", "label_list"], [274, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[274, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[274, 3, 1, "", "compare_label"], [274, 3, 1, "", "label_list"], [274, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[274, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[274, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[274, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[274, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[274, 3, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[274, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[274, 3, 1, "", "k"], [274, 3, 1, "", "num_correct"], [274, 3, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[275, 1, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[276, 1, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[277, 0, 0, "-", "basic_nas"], [278, 0, 0, "-", "dynas"], [280, 0, 0, "-", "nas"], [281, 0, 0, "-", "nas_utils"], [282, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[277, 1, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[278, 1, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[280, 1, 1, "", "NAS"], [280, 1, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[281, 2, 1, "", "create_search_space_pool"], [281, 2, 1, "", "find_pareto_front"], [281, 2, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[282, 1, 1, "", "BayesianOptimizationSearcher"], [282, 1, 1, "", "GridSearcher"], [282, 1, 1, "", "RandomSearcher"], [282, 1, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[283, 0, 0, "-", "gradient_sensitivity"], [284, 0, 0, "-", "group_lasso"], [286, 0, 0, "-", "magnitude"], [287, 0, 0, "-", "pattern_lock"], [288, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[283, 1, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[284, 1, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[286, 1, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[287, 1, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[288, 1, 1, "", "Pruner"], [288, 2, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[289, 1, 1, "", "Pruning"], [289, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[289, 3, 1, "", "conf"], [289, 3, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[291, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[292, 0, 0, "-", "pattern"], [293, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[292, 1, 1, "", "PATTERNS"], [292, 1, 1, "", "PatternBase"], [292, 2, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[292, 3, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[293, 1, 1, "", "TilePatternBase"], [293, 1, 1, "", "TilePattern_1x1"], [293, 1, 1, "", "TilePattern_1x16"], [293, 1, 1, "", "TilePattern_1x2"], [293, 1, 1, "", "TilePattern_2x2"], [293, 1, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[294, 1, 1, "", "Pruning"], [294, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[294, 3, 1, "", "conf"], [294, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[296, 0, 0, "-", "logger"], [297, 0, 0, "-", "patterns"], [298, 0, 0, "-", "prune_utils"], [299, 0, 0, "-", "pruner"], [300, 0, 0, "-", "pruning"], [301, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[297, 1, 1, "", "Pattern"], [297, 1, 1, "", "PatternNInM"], [297, 1, 1, "", "PatternNxM"], [297, 2, 1, "", "get_pattern"], [297, 2, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[297, 3, 1, "", "is_global"], [297, 3, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[297, 3, 1, "", "M"], [297, 3, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[297, 3, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[298, 2, 1, "", "check_config"], [298, 2, 1, "", "parse_not_to_prune"], [298, 2, 1, "", "parse_to_prune"], [298, 2, 1, "", "process_and_check_config"], [298, 2, 1, "", "process_config"], [298, 2, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[299, 1, 1, "", "MagnitudePruner"], [299, 1, 1, "", "PatternLockPruner"], [299, 1, 1, "", "Pruner"], [299, 1, 1, "", "SnipMomentumPruner"], [299, 1, 1, "", "SnipPruner"], [299, 2, 1, "", "get_pruner"], [299, 2, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[299, 3, 1, "", "config"], [299, 3, 1, "", "current_sparsity_ratio"], [299, 3, 1, "", "end_step"], [299, 3, 1, "", "global_step"], [299, 3, 1, "", "masks"], [299, 3, 1, "", "max_sparsity_ratio_per_layer"], [299, 3, 1, "", "modules"], [299, 3, 1, "", "pattern"], [299, 3, 1, "", "scheduler"], [299, 3, 1, "", "scores"], [299, 3, 1, "", "start_step"], [299, 3, 1, "", "target_sparsity_ratio"], [299, 3, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[300, 1, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[300, 3, 1, "", "config_file_path"], [300, 3, 1, "", "model"], [300, 3, 1, "", "pruner_info"], [300, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[301, 1, 1, "", "IterativeScheduler"], [301, 1, 1, "", "OneshotScheduler"], [301, 1, 1, "", "Scheduler"], [301, 2, 1, "", "get_scheduler"], [301, 2, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[301, 3, 1, "", "config"]], "neural_compressor.experimental.quantization": [[302, 1, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[303, 1, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[304, 0, 0, "-", "auto_mixed_precision"], [305, 0, 0, "-", "basic"], [306, 0, 0, "-", "bayesian"], [307, 0, 0, "-", "exhaustive"], [309, 0, 0, "-", "mse"], [310, 0, 0, "-", "mse_v2"], [311, 0, 0, "-", "random"], [312, 0, 0, "-", "strategy"], [314, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[304, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[305, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[306, 1, 1, "", "BayesianOptimization"], [306, 1, 1, "", "BayesianTuneStrategy"], [306, 1, 1, "", "TargetSpace"], [306, 2, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[307, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[309, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[310, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[311, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[312, 1, 1, "", "TuneStrategy"], [312, 2, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[313, 0, 0, "-", "constant"], [315, 0, 0, "-", "tuning_sampler"], [316, 0, 0, "-", "tuning_space"], [317, 0, 0, "-", "tuning_structs"], [318, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[315, 1, 1, "", "FallbackTuningSampler"], [315, 1, 1, "", "ModelWiseTuningSampler"], [315, 1, 1, "", "OpTypeWiseTuningSampler"], [315, 1, 1, "", "OpWiseTuningSampler"], [315, 1, 1, "", "SmoothQuantSampler"], [315, 1, 1, "", "TuningOrder"], [315, 1, 1, "", "TuningSampler"], [315, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[316, 1, 1, "", "TuningItem"], [316, 1, 1, "", "TuningSpace"], [316, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [316, 2, 1, "", "pattern_to_internal"], [316, 2, 1, "", "pattern_to_path"], [316, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[317, 1, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[318, 1, 1, "", "OrderedDefaultDict"], [318, 2, 1, "", "extract_data_type"], [318, 2, 1, "", "get_adaptor_name"], [318, 2, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[320, 0, 0, "-", "bleu"], [321, 0, 0, "-", "bleu_util"], [322, 0, 0, "-", "coco_label_map"], [323, 0, 0, "-", "coco_tools"], [324, 0, 0, "-", "evaluate_squad"], [325, 0, 0, "-", "f1"], [327, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[320, 1, 1, "", "BLEU"], [320, 1, 1, "", "UnicodeRegex"], [320, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[320, 3, 1, "", "labels"], [320, 3, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[320, 3, 1, "", "nondigit_punct_re"], [320, 3, 1, "", "punct_nondigit_re"], [320, 3, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[321, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[323, 1, 1, "", "COCOEvalWrapper"], [323, 1, 1, "", "COCOWrapper"], [323, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [323, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [323, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[323, 3, 1, "", "dataset"], [323, 3, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[324, 2, 1, "", "evaluate"], [324, 2, 1, "", "exact_match_score"], [324, 2, 1, "", "f1_score"], [324, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[325, 2, 1, "", "evaluate"], [325, 2, 1, "", "f1_score"], [325, 2, 1, "", "metric_max_over_ground_truths"], [325, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[327, 1, 1, "", "Accuracy"], [327, 1, 1, "", "BaseMetric"], [327, 1, 1, "", "COCOmAPv2"], [327, 1, 1, "", "F1"], [327, 1, 1, "", "GeneralTopK"], [327, 1, 1, "", "Loss"], [327, 1, 1, "", "MAE"], [327, 1, 1, "", "METRICS"], [327, 1, 1, "", "MSE"], [327, 1, 1, "", "MXNetMetrics"], [327, 1, 1, "", "Metric"], [327, 1, 1, "", "ONNXRTGLUE"], [327, 1, 1, "", "ONNXRTITMetrics"], [327, 1, 1, "", "ONNXRTQLMetrics"], [327, 1, 1, "", "PyTorchLoss"], [327, 1, 1, "", "PyTorchMetrics"], [327, 1, 1, "", "RMSE"], [327, 1, 1, "", "ROC"], [327, 1, 1, "", "SquadF1"], [327, 1, 1, "", "TensorflowCOCOMAP"], [327, 1, 1, "", "TensorflowMAP"], [327, 1, 1, "", "TensorflowMetrics"], [327, 1, 1, "", "TensorflowTopK"], [327, 1, 1, "", "TensorflowVOCMAP"], [327, 1, 1, "", "WrapMXNetMetric"], [327, 1, 1, "", "WrapONNXRTMetric"], [327, 1, 1, "", "WrapPyTorchMetric"], [327, 1, 1, "", "mIOU"], [327, 2, 1, "", "metric_registry"], [327, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[327, 3, 1, "", "label_list"], [327, 3, 1, "", "pred_list"], [327, 3, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[327, 3, 1, "", "k"], [327, 3, 1, "", "num_correct"], [327, 3, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[327, 3, 1, "", "sample"], [327, 3, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[327, 3, 1, "", "compare_label"], [327, 3, 1, "", "label_list"], [327, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[327, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[327, 3, 1, "", "compare_label"], [327, 3, 1, "", "label_list"], [327, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[327, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[327, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[327, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[327, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[327, 3, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[327, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[327, 3, 1, "", "k"], [327, 3, 1, "", "num_correct"], [327, 3, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[328, 2, 1, "", "fit"]], "neural_compressor.model": [[329, 0, 0, "-", "base_model"], [331, 0, 0, "-", "keras_model"], [332, 0, 0, "-", "model"], [333, 0, 0, "-", "mxnet_model"], [334, 0, 0, "-", "nets_factory"], [335, 0, 0, "-", "onnx_model"], [336, 0, 0, "-", "tensorflow_model"], [337, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[329, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[331, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[332, 1, 1, "", "Model"], [332, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[333, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[334, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[335, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[336, 1, 1, "", "TensorflowBaseModel"], [336, 1, 1, "", "TensorflowCheckpointModel"], [336, 1, 1, "", "TensorflowModel"], [336, 1, 1, "", "TensorflowQATModel"], [336, 1, 1, "", "TensorflowSavedModelModel"], [336, 2, 1, "", "checkpoint_session"], [336, 2, 1, "", "estimator_session"], [336, 2, 1, "", "frozen_pb_session"], [336, 2, 1, "", "get_model_type"], [336, 2, 1, "", "graph_def_session"], [336, 2, 1, "", "graph_session"], [336, 2, 1, "", "keras_session"], [336, 2, 1, "", "load_saved_model"], [336, 2, 1, "", "saved_model_session"], [336, 2, 1, "", "slim_session"], [336, 2, 1, "", "validate_and_inference_input_output"], [336, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[337, 1, 1, "", "IPEXModel"], [337, 1, 1, "", "PyTorchBaseModel"], [337, 1, 1, "", "PyTorchFXModel"], [337, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[338, 1, 1, "", "Accuracy"], [338, 1, 1, "", "Footprint"], [338, 1, 1, "", "ModelSize"], [338, 1, 1, "", "MultiObjective"], [338, 1, 1, "", "Objective"], [338, 1, 1, "", "Performance"], [338, 2, 1, "", "objective_custom_registry"], [338, 2, 1, "", "objective_registry"]], "neural_compressor.profiling": [[341, 0, 0, "-", "parser"], [351, 0, 0, "-", "profiler"]], "neural_compressor.profiling.parser": [[340, 0, 0, "-", "factory"], [343, 0, 0, "-", "onnx_parser"], [345, 0, 0, "-", "parser"], [346, 0, 0, "-", "result"], [348, 0, 0, "-", "tensorflow_parser"]], "neural_compressor.profiling.parser.factory": [[340, 1, 1, "", "ParserFactory"]], "neural_compressor.profiling.parser.onnx_parser": [[342, 0, 0, "-", "factory"], [344, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[342, 1, 1, "", "OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[344, 1, 1, "", "OnnxProfilingParser"]], "neural_compressor.profiling.parser.parser": [[345, 1, 1, "", "ProfilingParser"]], "neural_compressor.profiling.parser.result": [[346, 1, 1, "", "ProfilingResult"]], "neural_compressor.profiling.parser.tensorflow_parser": [[347, 0, 0, "-", "factory"], [349, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[347, 1, 1, "", "TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[349, 1, 1, "", "TensorFlowProfilingParser"]], "neural_compressor.profiling.profiler": [[350, 0, 0, "-", "factory"], [353, 0, 0, "-", "onnxrt_profiler"], [356, 0, 0, "-", "profiler"], [358, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.profiling.profiler.factory": [[350, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[352, 0, 0, "-", "factory"], [354, 0, 0, "-", "profiler"], [355, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[352, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[354, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[355, 2, 1, "", "create_onnx_config"]], "neural_compressor.profiling.profiler.profiler": [[356, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[357, 0, 0, "-", "factory"], [359, 0, 0, "-", "profiler"], [360, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[357, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[359, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[360, 2, 1, "", "create_tf_config"], [360, 2, 1, "", "delete_assign"], [360, 2, 1, "", "set_eager_execution"]], "neural_compressor.quantization": [[361, 2, 1, "", "fit"]], "neural_compressor.strategy": [[362, 0, 0, "-", "auto"], [363, 0, 0, "-", "auto_mixed_precision"], [364, 0, 0, "-", "basic"], [365, 0, 0, "-", "bayesian"], [366, 0, 0, "-", "conservative"], [367, 0, 0, "-", "exhaustive"], [368, 0, 0, "-", "hawq_v2"], [370, 0, 0, "-", "mse"], [371, 0, 0, "-", "mse_v2"], [372, 0, 0, "-", "random"], [373, 0, 0, "-", "strategy"], [375, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[362, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[363, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[364, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[365, 1, 1, "", "BayesianOptimization"], [365, 1, 1, "", "BayesianTuneStrategy"], [365, 1, 1, "", "TargetSpace"], [365, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[366, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[367, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[368, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[370, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[371, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[372, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[373, 1, 1, "", "TuneStrategy"], [373, 1, 1, "", "TuneStrategyMeta"], [373, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[374, 0, 0, "-", "constant"], [376, 0, 0, "-", "tuning_sampler"], [377, 0, 0, "-", "tuning_space"], [378, 0, 0, "-", "tuning_structs"], [379, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[376, 1, 1, "", "BlockFallbackTuningSampler"], [376, 1, 1, "", "FallbackTuningSampler"], [376, 1, 1, "", "LowerBitsSampler"], [376, 1, 1, "", "ModelWiseTuningSampler"], [376, 1, 1, "", "OpTypeWiseTuningSampler"], [376, 1, 1, "", "OpWiseTuningSampler"], [376, 1, 1, "", "TuningOrder"], [376, 1, 1, "", "TuningSampler"], [376, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_space": [[377, 1, 1, "", "TuningItem"], [377, 1, 1, "", "TuningSpace"], [377, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [377, 2, 1, "", "pattern_to_internal"], [377, 2, 1, "", "pattern_to_path"], [377, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[378, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[379, 1, 1, "", "OrderedDefaultDict"], [379, 1, 1, "", "QuantOptions"], [379, 1, 1, "", "QuantType"], [379, 2, 1, "", "build_slave_faker_model"], [379, 2, 1, "", "extract_data_type"], [379, 2, 1, "", "get_adaptor_name"], [379, 2, 1, "", "preprocess_user_cfg"], [379, 2, 1, "", "reverted_data_type"]], "neural_compressor.template": [[380, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[380, 1, 1, "", "ExampleClass"], [380, 3, 1, "", "attribute1"], [380, 2, 1, "", "function1"], [380, 2, 1, "", "function2"], [380, 2, 1, "", "function3"], [380, 2, 1, "", "generator1"], [380, 4, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[380, 3, 1, "", "attr1"], [380, 3, 1, "", "attr2"], [380, 3, 1, "", "attr5"]], "neural_compressor.training": [[382, 1, 1, "", "CallBacks"], [382, 1, 1, "", "CompressionManager"], [382, 2, 1, "", "fit"], [382, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[383, 0, 0, "-", "collect_layer_histogram"], [384, 0, 0, "-", "constant"], [385, 0, 0, "-", "create_obj_from_config"], [387, 0, 0, "-", "kl_divergence"], [388, 0, 0, "-", "load_huggingface"], [389, 0, 0, "-", "logger"], [390, 0, 0, "-", "neural_insights_utils"], [391, 0, 0, "-", "options"], [392, 0, 0, "-", "pytorch"], [393, 0, 0, "-", "utility"], [394, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[383, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[385, 2, 1, "", "create_dataloader"], [385, 2, 1, "", "create_dataset"], [385, 2, 1, "", "create_eval_func"], [385, 2, 1, "", "create_train_func"], [385, 2, 1, "", "get_algorithm"], [385, 2, 1, "", "get_func_from_config"], [385, 2, 1, "", "get_metrics"], [385, 2, 1, "", "get_postprocess"], [385, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[387, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[388, 1, 1, "", "OptimizedModel"], [388, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[389, 1, 1, "", "Logger"], [389, 2, 1, "", "debug"], [389, 2, 1, "", "error"], [389, 2, 1, "", "fatal"], [389, 2, 1, "", "info"], [389, 2, 1, "", "log"], [389, 2, 1, "", "warn"], [389, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[390, 2, 1, "", "register_neural_insights_workload"], [390, 2, 1, "", "update_neural_insights_workload"], [390, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[391, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[392, 2, 1, "", "is_int8_model"], [392, 2, 1, "", "load"]], "neural_compressor.utils.utility": [[393, 1, 1, "", "CaptureOutputToFile"], [393, 1, 1, "", "CpuInfo"], [393, 2, 1, "", "Dequantize"], [393, 1, 1, "", "DotDict"], [393, 1, 1, "", "GLOBAL_STATE"], [393, 1, 1, "", "LazyImport"], [393, 1, 1, "", "MODE"], [393, 1, 1, "", "OpEntry"], [393, 1, 1, "", "Statistics"], [393, 2, 1, "", "alias_param"], [393, 2, 1, "", "calculate_mse"], [393, 2, 1, "", "combine_histogram"], [393, 2, 1, "", "compare_objects"], [393, 2, 1, "", "compute_sparsity"], [393, 2, 1, "", "dequantize_weight"], [393, 2, 1, "", "dump_class_attrs"], [393, 2, 1, "", "dump_data_to_local"], [393, 2, 1, "", "dump_elapsed_time"], [393, 2, 1, "", "dump_table"], [393, 2, 1, "", "dump_table_to_csv"], [393, 2, 1, "", "equal_dicts"], [393, 2, 1, "", "fault_tolerant_file"], [393, 2, 1, "", "get_all_fp32_data"], [393, 2, 1, "", "get_number_of_sockets"], [393, 2, 1, "", "get_op_list"], [393, 2, 1, "", "get_size"], [393, 2, 1, "", "get_tensor_histogram"], [393, 2, 1, "", "get_tensors_info"], [393, 2, 1, "", "get_tuning_history"], [393, 2, 1, "", "get_weights_details"], [393, 2, 1, "", "load_data_from_pkl"], [393, 2, 1, "", "mse_metric_gap"], [393, 2, 1, "", "print_op_list"], [393, 2, 1, "", "print_table"], [393, 2, 1, "", "recover"], [393, 2, 1, "", "set_random_seed"], [393, 2, 1, "", "set_resume_from"], [393, 2, 1, "", "set_tensorboard"], [393, 2, 1, "", "set_workspace"], [393, 2, 1, "", "show_memory_info"], [393, 2, 1, "", "singleton"], [393, 2, 1, "", "str2array"], [393, 2, 1, "", "time_limit"], [393, 2, 1, "", "version1_eq_version2"], [393, 2, 1, "", "version1_gt_version2"], [393, 2, 1, "", "version1_gte_version2"], [393, 2, 1, "", "version1_lt_version2"], [393, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[394, 1, 1, "", "WeightsDetails"], [394, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:attribute", "4": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "data", "Python data"]}, "titleterms": {"block_mask": 0, "neural_compressor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395], "adaptor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 403, 404, 406], "modul": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 212, 213, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 229, 232, 233, 234, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 256, 258, 259, 260, 262, 263, 264, 265, 267, 268, 270, 271, 272, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 286, 287, 288, 289, 292, 293, 294, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 315, 316, 317, 318, 320, 321, 323, 324, 325, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 340, 342, 344, 345, 346, 347, 349, 350, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 376, 377, 378, 379, 380, 382, 383, 385, 387, 388, 389, 390, 391, 392, 393, 394], "content": [1, 2, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 342, 344, 345, 346, 347, 349, 350, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 376, 377, 378, 379, 380, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 402], "class": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 150, 153, 154, 155, 157, 160, 161, 162, 163, 164, 166, 167, 170, 174, 175, 176, 177, 178, 179, 181, 182, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 232, 233, 234, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 265, 266, 267, 270, 273, 274, 275, 276, 277, 278, 280, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 315, 316, 317, 318, 320, 323, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 342, 344, 345, 346, 347, 349, 350, 352, 354, 356, 357, 359, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 376, 377, 378, 379, 380, 382, 383, 386, 387, 388, 389, 391, 393, 394, 403], "function": [1, 13, 16, 34, 42, 43, 44, 66, 67, 69, 103, 104, 115, 117, 147, 148, 149, 150, 152, 155, 156, 158, 159, 160, 162, 165, 167, 170, 172, 174, 176, 177, 178, 179, 180, 182, 191, 192, 200, 202, 206, 209, 210, 211, 214, 216, 217, 218, 219, 221, 223, 224, 226, 229, 236, 244, 246, 250, 253, 254, 255, 257, 258, 259, 262, 263, 264, 267, 268, 270, 271, 272, 273, 274, 281, 288, 292, 297, 298, 299, 301, 306, 312, 316, 318, 320, 321, 323, 324, 325, 326, 327, 328, 332, 336, 338, 355, 360, 361, 365, 373, 377, 379, 380, 382, 385, 386, 388, 389, 390, 392, 393, 427], "subpackag": [2, 17, 86, 110, 111, 113, 169, 171, 186, 211, 230, 255, 266, 290, 308, 319, 369], "submodul": [2, 12, 17, 29, 50, 75, 86, 94, 100, 105, 110, 111, 113, 116, 129, 144, 151, 162, 168, 169, 171, 173, 183, 187, 194, 206, 210, 214, 221, 228, 231, 238, 250, 254, 257, 261, 266, 273, 279, 285, 291, 295, 308, 314, 319, 326, 330, 341, 343, 348, 351, 353, 358, 369, 375, 381, 386], "packag": [2, 29, 162, 194, 206, 210, 211, 214, 221, 238, 250, 254, 255, 257, 266, 273, 285, 290, 291, 308, 326, 330, 369, 386, 451, 453, 455, 456], "kera": 3, "keras_util": [4, 5, 6, 7, 8, 9, 10], "conv2d": 4, "dens": 5, "depthwise_conv2d": 6, "pool2d": 8, "quantiz": [9, 41, 302, 361, 399, 402, 404, 405, 417, 424, 426, 429, 432, 435, 438, 439, 447, 458, 464, 465, 466, 467, 470, 476], "separable_conv2d": 10, "mxnet": [11, 422, 437, 465, 472], "mxnet_util": [12, 13], "util": [13, 43, 147, 158, 180, 313, 314, 315, 316, 317, 318, 355, 360, 374, 375, 376, 377, 378, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 408], "onnxrt": [14, 422, 437, 472], "ox_util": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], "calibr": [15, 16, 404], "oper": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 404, 405], "activ": 18, "argmax": 19, "attent": 20, "binary_op": 21, "concat": 22, "conv": 23, "direct_q8": 24, "embed_layernorm": 25, "gather": 26, "gavgpool": 27, "gemm": 28, "lstm": 30, "matmul": [31, 470], "maxpool": 32, "norm": 33, "op": [34, 429], "pad": 35, "pool": 36, "reduc": 37, "resiz": 38, "split": 39, "unary_op": 40, "smooth_quant": [42, 155, 163], "pytorch": [44, 392, 422, 427, 429, 437, 465, 466, 471, 472, 476], "queri": [45, 403], "tensorflow": [46, 422, 427, 429, 437, 465, 466, 471, 472, 476], "tf_util": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], "graph_convert": 47, "graph_converter_without_calib": 48, "graph_rewrit": [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "bf16": [49, 50, 439], "bf16_convert": [49, 148], "gener": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 404], "convert_add_to_biasadd": 51, "convert_layout": 52, "convert_leakyrelu": 53, "convert_nan_to_random": 54, "convert_placeholder_to_const": 55, "dequantize_cast_optim": 56, "dilated_contract": 57, "dummy_biasadd": 58, "expanddims_optim": 59, "fetch_weight_from_reshap": 60, "fold_batch_norm": 61, "fold_const": 62, "fuse_biasadd_add": 63, "fuse_column_wise_mul": 64, "fuse_conv_with_math": 65, "fuse_decomposed_bn": 66, "fuse_decomposed_in": 67, "fuse_gelu": 68, "fuse_layer_norm": 69, "fuse_pad_with_conv": 70, "fuse_pad_with_fp32_conv": 71, "fuse_reshape_transpos": 72, "graph_cse_optim": 73, "grappler_pass": 74, "insert_print_nod": 76, "move_squeeze_after_relu": 77, "pre_optim": 78, "remove_training_nod": 79, "rename_batch_norm": 80, "split_shared_input": 81, "strip_equivalent_nod": 82, "strip_unused_nod": 83, "switch_optim": 84, "graph_bas": 85, "int8": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 429, 476], "freeze_fake_qu": 87, "freeze_valu": 88, "freeze_value_without_calib": 89, "fuse_conv_redundant_dequant": 90, "fuse_conv_requant": 91, "fuse_matmul_redundant_dequant": 92, "fuse_matmul_requant": 93, "meta_op_optim": 95, "post_hostconst_convert": 96, "post_quantized_op_cs": 97, "rnn_convert": 98, "scale_propag": 99, "onnx": [100, 101, 102, 103, 104, 407, 435, 465, 476], "onnx_graph": 101, "onnx_nod": 102, "onnx_schema": 103, "tf2onnx_util": 104, "qdq": [105, 106, 107, 108, 122, 123, 124, 125, 126, 127, 128, 129, 130, 476], "insert_qdq_pattern": 106, "merge_duplicated_qdq": 107, "share_qdq_y_pattern": 108, "graph_util": 109, "quantize_graph": [111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137], "qat": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 476], "fake_quant": 112, "quantize_config": 114, "quantize_help": 115, "quantize_lay": [116, 117, 118, 119, 120], "optimize_lay": 117, "quantize_layer_add": 118, "quantize_layer_bas": 119, "quantize_layer_bn": 120, "quantize_wrapp": 121, "fuse_qdq_bn": 122, "fuse_qdq_concatv2": 123, "fuse_qdq_conv": 124, "fuse_qdq_deconv": 125, "fuse_qdq_in": 126, "fuse_qdq_matmul": 127, "fuse_qdq_pool": 128, "optimize_qdq": 130, "quantize_graph_bas": 131, "quantize_graph_bn": 132, "quantize_graph_concatv2": 133, "quantize_graph_conv": 134, "quantize_graph_for_intel_cpu": 135, "quantize_graph_matmul": 136, "quantize_graph_pool": 137, "quantize_graph_common": 138, "smooth_quant_calibr": 139, "smooth_quant_scal": 140, "tf2onnx_convert": 141, "transform_graph": [142, 143, 144, 145, 146], "bias_correct": 142, "graph_transform_bas": 143, "insert_log": 145, "rerange_quantized_concat": 146, "torch_util": [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 226], "gptq": 149, "hawq_metr": 150, "mixed_precis": [152, 275], "model_wrapp": 153, "pattern_detector": 154, "symbolic_trac": 156, "teq": 157, "weight_onli": 159, "algorithm": [160, 161, 162, 163, 164, 470, 473], "fast_bias_correct": 161, "weight_correct": 164, "benchmark": [165, 218, 411, 420, 424, 438, 464], "compress": [166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 228, 229, 412], "callback": 166, "distil": [167, 168, 260, 425, 426, 438, 464, 476], "criterion": [167, 219], "pruner": [170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 288, 299], "criteria": [170, 462, 473], "model_slim": [172, 173, 174, 175], "auto_slim": 172, "pattern_analyz": 174, "weight_slim": 175, "pattern": [176, 291, 292, 293, 297, 462], "reg": 178, "schedul": [179, 301, 303, 462], "conf": [181, 182, 183, 184], "config": [181, 185, 413, 422, 460], "dotdict": 182, "pythonic_config": 184, "contrib": [186, 187, 188, 189, 230, 231, 232, 233], "strategi": [187, 188, 189, 231, 232, 233, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 418, 469, 473], "sigopt": [188, 232, 469, 473], "tpe": [189, 233, 473], "data": [190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 404, 405, 424, 428], "dataload": [190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 220, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 421, 422], "base_dataload": [190, 234], "default_dataload": [192, 236], "fetcher": [193, 237], "attribut": [194, 202, 211, 246, 255, 266, 290, 330, 380, 386, 397], "mxnet_dataload": [195, 239], "onnxrt_dataload": [196, 240], "pytorch_dataload": [197, 241], "sampler": [198, 242], "tensorflow_dataload": [199, 243], "dataset": [200, 201, 202, 203, 204, 205, 206, 207, 244, 245, 246, 247, 248, 249, 250, 251, 422, 424, 433], "bert_dataset": [200, 244], "coco_dataset": [201, 245], "dummy_dataset": [203, 247], "dummy_dataset_v2": [204, 248], "imagenet_dataset": [205, 249], "style_transfer_dataset": [207, 251], "filter": [208, 209, 210, 252, 253, 254], "coco_filt": [208, 252], "transform": [212, 213, 214, 215, 216, 217, 256, 257, 258, 259, 433, 472], "coco_transform": 212, "imagenet_transform": [213, 256], "postprocess": [215, 225], "token": [216, 258], "experiment": [218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318], "common": [219, 220, 221, 222, 223, 224, 225, 226, 399, 430], "metric": [222, 267, 268, 269, 270, 271, 272, 273, 274, 320, 321, 322, 323, 324, 325, 326, 327, 433, 437], "model": [223, 329, 330, 331, 332, 333, 334, 335, 336, 337, 404, 415, 429, 432, 435, 438, 440, 447, 462, 467, 470, 476], "optim": [224, 448, 458, 461, 474], "compon": 227, "prune": [229, 289, 300, 438, 462, 464, 476], "export": [261, 262, 263, 264, 429], "qlinear2qdq": 262, "tf2onnx": 263, "torch2onnx": 264, "graph_optim": 265, "bleu": [267, 320], "bleu_util": [268, 321], "coco_label_map": [269, 322], "coco_tool": [270, 323], "evaluate_squad": [271, 324], "f1": [272, 325], "model_convers": 276, "na": [277, 278, 279, 280, 281, 282, 400, 464], "basic_na": 277, "dyna": 278, "nas_util": 281, "search_algorithm": 282, "pruner_legaci": [283, 284, 285, 286, 287, 288], "gradient_sensit": 283, "group_lasso": 284, "magnitud": 286, "pattern_lock": 287, "pruning_recip": [290, 291, 292, 293], "tile_pattern": 293, "pruning_v2": 294, "pytorch_prun": [295, 296, 297, 298, 299, 300, 301], "logger": [296, 389], "prune_util": 298, "auto_mixed_precis": [304, 363], "basic": [305, 364, 400, 473], "bayesian": [306, 365, 473], "exhaust": [307, 367, 473], "mse": [309, 370, 473], "mse_v2": [310, 371, 473], "random": [311, 372, 473], "constant": [313, 374, 384], "tuning_sampl": [315, 376], "tuning_spac": [316, 377], "tuning_struct": [317, 378], "mix_precis": 328, "base_model": 329, "keras_model": 331, "mxnet_model": 333, "nets_factori": 334, "onnx_model": 335, "tensorflow_model": 336, "torch_model": 337, "object": [338, 416, 460], "profil": [339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 424], "parser": [340, 341, 342, 343, 344, 345, 346, 347, 348, 349], "factori": [340, 342, 347, 350, 352, 357], "onnx_pars": [342, 343, 344], "result": 346, "tensorflow_pars": [347, 348, 349], "onnxrt_profil": [352, 353, 354, 355], "tensorflow_profil": [357, 358, 359, 360], "auto": [362, 452, 458, 466, 470, 473], "conserv": [366, 473], "hawq_v2": [368, 473], "templat": [380, 381, 398], "api_doc_exampl": 380, "train": [382, 399, 419, 427, 438, 465], "collect_layer_histogram": 383, "create_obj_from_config": 385, "kl_diverg": 387, "load_huggingfac": 388, "neural_insights_util": 390, "option": [391, 427, 446], "weights_detail": 394, "version": 395, "intel": [396, 402, 421, 424, 434, 435, 437, 438, 444, 452, 458, 476, 477], "neural": [396, 399, 400, 402, 421, 424, 434, 435, 437, 438, 441, 445, 447, 452, 458, 462, 469, 474, 477], "compressor": [396, 399, 402, 421, 424, 434, 435, 437, 438, 452, 458, 469, 477], "document": [396, 402, 409, 477], "section": [396, 477], "contributor": [397, 398], "coven": [397, 398], "code": [397, 398, 400, 438, 459, 467, 474], "conduct": [397, 398], "our": [397, 470], "pledg": 397, "standard": 397, "respons": 397, "scope": [397, 462], "enforc": 397, "contribut": [398, 451, 455], "guidelin": 398, "pull": 398, "request": [398, 439], "checklist": 398, "support": [398, 399, 400, 403, 405, 420, 421, 422, 424, 425, 426, 427, 429, 431, 434, 435, 437, 439, 440, 442, 443, 447, 448, 460, 461, 462, 464, 465, 467, 470, 471, 472, 475], "fx": 399, "introduct": [399, 400, 403, 404, 405, 420, 421, 422, 424, 425, 426, 427, 429, 431, 434, 437, 439, 440, 458, 460, 461, 462, 464, 465, 467, 469, 470, 471, 472, 473, 475], "mode": [399, 476], "matrix": [399, 400, 403, 420, 421, 422, 424, 425, 426, 427, 429, 431, 434, 437, 439, 440, 443, 460, 461, 462, 464, 465, 467, 470, 471, 475], "get": [399, 400, 402, 403, 420, 421, 422, 424, 425, 426, 427, 431, 432, 437, 439, 441, 452, 459, 460, 461, 462, 464, 465, 471, 475], "start": [399, 400, 402, 403, 420, 421, 422, 424, 425, 426, 427, 431, 432, 437, 439, 441, 442, 446, 452, 460, 461, 462, 464, 465, 471, 475], "post": [399, 438, 465], "static": [399, 465], "dynam": [399, 400, 465], "awar": [399, 438, 465], "exampl": [399, 400, 403, 409, 420, 421, 422, 424, 425, 426, 427, 428, 429, 437, 438, 439, 440, 443, 447, 460, 461, 462, 465, 467, 470, 471, 476], "note": [399, 468], "detail": 399, "problem": 399, "architectur": [400, 423, 434, 435], "search": [400, 458], "api": [400, 402, 403, 404, 409, 410, 420, 421, 422, 425, 426, 427, 432, 433, 437, 439, 441, 445, 459, 460, 461, 462, 464, 474], "usag": [400, 447, 458, 471, 473], "1": [400, 427, 430, 433, 438, 458, 476], "python": [400, 402, 421, 432, 437, 441, 445, 446, 453, 456, 464, 474], "yaml": [400, 404, 422, 427, 431, 475], "2": [400, 427, 430, 433, 438, 458, 476], "onli": [400, 467], "advanc": [400, 474], "custom": [400, 421, 437, 473], "secur": [401, 427], "polici": [401, 473], "report": 401, "vulner": 401, "instal": [402, 424, 435, 442, 444, 451, 452, 455], "from": [402, 404, 435, 438], "pypi": [402, 447], "select": [402, 452], "public": [402, 463], "event": [402, 463], "addit": 402, "research": 402, "collabor": 402, "work": [403, 465], "flow": [403, 465], "background": [403, 458], "ad": 403, "new": [403, 405, 453, 456, 473], "backend": [403, 465], "capabl": [403, 467], "implement": [403, 404], "onnxrtadaptor": 403, "how": [404, 405, 424], "add": 404, "an": 404, "list": [404, 428, 472], "need": 404, "design": [404, 423, 473], "framework": [404, 421, 422, 429, 431, 440, 464, 467, 470], "query_fw_cap": 404, "accord": [404, 405], "tune_cfg": 404, "prepar": [404, 424, 469], "fp32": [404, 429], "graph": 404, "run": [404, 424, 459], "sampl": [404, 432], "iter": 404, "calcul": 404, "rang": 404, "type": [405, 462], "like": 405, "int4": 405, "few": 405, "line": 405, "chang": [405, 433, 457, 459, 468], "defin": [405, 427], "abil": 405, "specif": [405, 422], "invok": 405, "kernel": 405, "tune": [405, 465, 470, 473], "configur": [405, 427, 431, 464, 469, 475], "us": [405, 421, 437], "summari": 405, "runtim": [407, 435, 465, 476], "torch": [408, 476], "mix": [414, 438, 439, 466], "precis": [414, 438, 439, 466], "build": [421, 430, 437], "file": [422, 431, 475], "user": [422, 427, 433, 464, 467, 474, 475], "workflow": 423, "diagnosi": 424, "featur": [424, 427, 431, 434, 447, 448, 452, 464, 465, 471, 475], "modifi": 424, "script": 424, "see": 424, "do": [424, 441], "paramet": 424, "descript": 424, "suggest": 424, "fallback": 424, "set": [424, 444, 458], "knowledg": [425, 476], "intermedi": 425, "layer": [425, 470], "self": 425, "distribut": [427, 447, 473], "infer": 427, "evalu": 427, "pure": 427, "horovodrun": 427, "execut": 427, "releas": [428, 453, 456, 468], "appendix": 429, "frequent": 430, "ask": 430, "question": 430, "issu": [430, 468], "3": [430, 442, 458], "4": [430, 449, 458, 463], "quick": [432, 446], "valid": [432, 435, 470, 476], "incompat": [433, 468], "between": 433, "v1": 433, "face": 433, "built": [433, 435, 437], "infrastructur": 434, "linux": 435, "prerequisit": 435, "binari": 435, "sourc": 435, "ai": 435, "kit": 435, "window": 435, "system": 435, "requir": [435, 451, 455], "hardwar": [435, 439, 476], "environ": [435, 444], "cpu": [435, 444, 476], "base": [435, 474], "64": 435, "compat": 435, "processor": 435, "gpu": 435, "": [435, 459], "xe": 435, "multipl": [435, 460, 476], "vendor": 435, "through": [435, 476], "softwar": [435, 439], "legal": 436, "inform": 436, "licens": 436, "citat": 436, "trademark": 436, "migrat": 438, "x": 438, "orchestr": [438, 461], "fp16": 439, "dure": [439, 466], "accuraci": [439, 465, 473], "driven": 439, "coder": [441, 445, 447, 458, 474], "what": [441, 459], "we": 441, "offer": 441, "jupyt": [441, 442, 453, 456], "lab": [441, 442], "extens": [441, 451, 452, 455, 458, 459, 476], "launcher": [441, 446], "contact": 441, "aw": 442, "amazon": 442, "sagemak": 442, "For": 442, "studio": 442, "notebook": 442, "instanc": 442, "guid": [442, 474], "bigdl": 443, "nano": 443, "platform": [444, 469], "best": [444, 452], "perform": [444, 469], "mkl": 444, "openmp": 444, "jemalloc": 444, "numa": 444, "control": 444, "variabl": 444, "frequenc": 444, "govern": 444, "enabl": [445, 452, 458], "bench": 445, "superbench": 445, "argument": 446, "v0": 449, "highlight": 449, "other": 449, "changelog": [450, 454], "neural_compressor_ext_lab": [451, 453], "uninstal": [451, 455], "develop": [451, 455], "jupyterlab": 452, "Or": 452, "let": 452, "u": 452, "help": 452, "you": 452, "pre": 452, "requisit": 452, "make": [453, 456, 459], "manual": [453, 456], "npm": [453, 456], "autom": [453, 456], "publish": [453, 456], "conda": [453, 456], "forg": [453, 456], "neural_compressor_ext_lab_alibaba": [455, 456], "log": 457, "unreleas": 457, "vscode": 458, "open": 458, "icon": 458, "5": 458, "welcom": 459, "your": 459, "v": 459, "folder": 459, "setup": 459, "up": 459, "straight": 459, "awai": 459, "explor": 459, "test": 459, "go": 459, "further": 459, "singl": 460, "One": 461, "shot": 461, "network": 462, "sparsiti": 462, "decai": 462, "regular": 462, "spars": 462, "deploy": 462, "refer": [462, 465, 467, 470], "full": 463, "68": 463, "2023": 463, "15": [463, 476], "2022": 463, "34": 463, "2021": 463, "2018": 463, "2020": 463, "style": 464, "access": 464, "fundament": [465, 470], "scheme": 465, "ipex": 465, "approach": 465, "With": 465, "without": 465, "specifi": 465, "rule": 465, "recip": 465, "devic": 465, "turn": 466, "off": 466, "weight": 467, "known": 468, "benefit": 469, "comparison": 469, "differ": 469, "smooth": 470, "quant": 470, "per": 470, "tensor": 470, "channel": 470, "limit": 470, "smoothquant": 470, "enhanc": 470, "wise": 470, "alpha": 470, "engin": 470, "tensorboard": 471, "space": 473, "exit": 473, "process": 473, "overview": 474, "zero": 474, "topic": 474, "innov": 474, "product": 474, "12": 476, "0": 476, "ptq": 476}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"block_mask": [[0, "module-block_mask"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "Module Contents": [[1, "module-contents"], [3, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [112, "module-contents"], [114, "module-contents"], [115, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [130, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [170, "module-contents"], [172, "module-contents"], [174, "module-contents"], [175, "module-contents"], [176, "module-contents"], [177, "module-contents"], [178, "module-contents"], [179, "module-contents"], [180, "module-contents"], [181, "module-contents"], [182, "module-contents"], [184, "module-contents"], [185, "module-contents"], [188, "module-contents"], [189, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [195, "module-contents"], [196, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [204, "module-contents"], [205, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [212, "module-contents"], [213, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"], [222, "module-contents"], [223, "module-contents"], [224, "module-contents"], [225, "module-contents"], [226, "module-contents"], [227, "module-contents"], [229, "module-contents"], [232, "module-contents"], [233, "module-contents"], [234, "module-contents"], [236, "module-contents"], [237, "module-contents"], [239, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [244, "module-contents"], [245, "module-contents"], [246, "module-contents"], [247, "module-contents"], [248, "module-contents"], [249, "module-contents"], [251, "module-contents"], [252, "module-contents"], [253, "module-contents"], [256, "module-contents"], [258, "module-contents"], [259, "module-contents"], [260, "module-contents"], [262, "module-contents"], [263, "module-contents"], [264, "module-contents"], [265, "module-contents"], [267, "module-contents"], [268, "module-contents"], [270, "module-contents"], [271, "module-contents"], [272, "module-contents"], [274, "module-contents"], [275, "module-contents"], [276, "module-contents"], [277, "module-contents"], [278, "module-contents"], [280, "module-contents"], [281, "module-contents"], [282, "module-contents"], [283, "module-contents"], [284, "module-contents"], [286, "module-contents"], [287, "module-contents"], [288, "module-contents"], [289, "module-contents"], [292, "module-contents"], [293, "module-contents"], [294, "module-contents"], [297, "module-contents"], [298, "module-contents"], [299, "module-contents"], [300, "module-contents"], [301, "module-contents"], [302, "module-contents"], [303, "module-contents"], [304, "module-contents"], [305, "module-contents"], [306, "module-contents"], [307, "module-contents"], [309, "module-contents"], [310, "module-contents"], [311, "module-contents"], [312, "module-contents"], [315, "module-contents"], [316, "module-contents"], [317, "module-contents"], [318, "module-contents"], [320, "module-contents"], [321, "module-contents"], [323, "module-contents"], [324, "module-contents"], [325, "module-contents"], [327, "module-contents"], [328, "module-contents"], [329, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [336, "module-contents"], [337, "module-contents"], [338, "module-contents"], [340, "module-contents"], [342, "module-contents"], [344, "module-contents"], [345, "module-contents"], [346, "module-contents"], [347, "module-contents"], [349, "module-contents"], [350, "module-contents"], [352, "module-contents"], [354, "module-contents"], [355, "module-contents"], [356, "module-contents"], [357, "module-contents"], [359, "module-contents"], [360, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [365, "module-contents"], [366, "module-contents"], [367, "module-contents"], [368, "module-contents"], [370, "module-contents"], [371, "module-contents"], [372, "module-contents"], [373, "module-contents"], [376, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [382, "module-contents"], [383, "module-contents"], [385, "module-contents"], [387, "module-contents"], [388, "module-contents"], [389, "module-contents"], [390, "module-contents"], [391, "module-contents"], [392, "module-contents"], [393, "module-contents"], [394, "module-contents"]], "Classes": [[1, "classes"], [3, "classes"], [11, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [101, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [112, "classes"], [114, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [130, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [145, "classes"], [146, "classes"], [148, "classes"], [149, "classes"], [150, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [157, "classes"], [160, "classes"], [161, "classes"], [162, "classes"], [163, "classes"], [164, "classes"], [166, "classes"], [167, "classes"], [170, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [177, "classes"], [178, "classes"], [179, "classes"], [181, "classes"], [182, "classes"], [184, "classes"], [185, "classes"], [188, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [222, "classes"], [223, "classes"], [224, "classes"], [225, "classes"], [227, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [236, "classes"], [237, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [251, "classes"], [252, "classes"], [253, "classes"], [254, "classes"], [255, "classes"], [256, "classes"], [257, "classes"], [258, "classes"], [259, "classes"], [260, "classes"], [265, "classes"], [266, "classes"], [267, "classes"], [270, "classes"], [273, "classes"], [274, "classes"], [275, "classes"], [276, "classes"], [277, "classes"], [278, "classes"], [280, "classes"], [282, "classes"], [283, "classes"], [284, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [290, "classes"], [291, "classes"], [292, "classes"], [293, "classes"], [294, "classes"], [297, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [302, "classes"], [303, "classes"], [304, "classes"], [305, "classes"], [306, "classes"], [307, "classes"], [309, "classes"], [310, "classes"], [311, "classes"], [312, "classes"], [315, "classes"], [316, "classes"], [317, "classes"], [318, "classes"], [320, "classes"], [323, "classes"], [326, "classes"], [327, "classes"], [329, "classes"], [330, "classes"], [331, "classes"], [332, "classes"], [333, "classes"], [334, "classes"], [335, "classes"], [336, "classes"], [337, "classes"], [338, "classes"], [340, "classes"], [342, "classes"], [344, "classes"], [345, "classes"], [346, "classes"], [347, "classes"], [349, "classes"], [350, "classes"], [352, "classes"], [354, "classes"], [356, "classes"], [357, "classes"], [359, "classes"], [362, "classes"], [363, "classes"], [364, "classes"], [365, "classes"], [366, "classes"], [367, "classes"], [368, "classes"], [370, "classes"], [371, "classes"], [372, "classes"], [373, "classes"], [376, "classes"], [377, "classes"], [378, "classes"], [379, "classes"], [380, "classes"], [382, "classes"], [383, "classes"], [386, "classes"], [387, "classes"], [388, "classes"], [389, "classes"], [391, "classes"], [393, "classes"], [394, "classes"]], "Functions": [[1, "functions"], [13, "functions"], [16, "functions"], [34, "functions"], [42, "functions"], [43, "functions"], [44, "functions"], [66, "functions"], [67, "functions"], [69, "functions"], [103, "functions"], [104, "functions"], [115, "functions"], [117, "functions"], [147, "functions"], [148, "functions"], [149, "functions"], [150, "functions"], [152, "functions"], [155, "functions"], [156, "functions"], [158, "functions"], [159, "functions"], [160, "functions"], [162, "functions"], [165, "functions"], [167, "functions"], [170, "functions"], [172, "functions"], [174, "functions"], [176, "functions"], [177, "functions"], [178, "functions"], [179, "functions"], [180, "functions"], [182, "functions"], [191, "functions"], [192, "functions"], [200, "functions"], [202, "functions"], [206, "functions"], [209, "functions"], [210, "functions"], [211, "functions"], [214, "functions"], [216, "functions"], [217, "functions"], [218, "functions"], [219, "functions"], [221, "functions"], [223, "functions"], [224, "functions"], [226, "functions"], [229, "functions"], [236, "functions"], [244, "functions"], [246, "functions"], [250, "functions"], [253, "functions"], [254, "functions"], [255, "functions"], [257, "functions"], [258, "functions"], [259, "functions"], [262, "functions"], [263, "functions"], [264, "functions"], [267, "functions"], [268, "functions"], [270, "functions"], [271, "functions"], [272, "functions"], [273, "functions"], [274, "functions"], [281, "functions"], [288, "functions"], [292, "functions"], [297, "functions"], [298, "functions"], [299, "functions"], [301, "functions"], [306, "functions"], [312, "functions"], [316, "functions"], [318, "functions"], [320, "functions"], [321, "functions"], [323, "functions"], [324, "functions"], [325, "functions"], [326, "functions"], [327, "functions"], [328, "functions"], [332, "functions"], [336, "functions"], [338, "functions"], [355, "functions"], [360, "functions"], [361, "functions"], [365, "functions"], [373, "functions"], [377, "functions"], [379, "functions"], [380, "functions"], [382, "functions"], [385, "functions"], [386, "functions"], [388, "functions"], [389, "functions"], [390, "functions"], [392, "functions"], [393, "functions"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "Subpackages": [[2, "subpackages"], [17, "subpackages"], [86, "subpackages"], [110, "subpackages"], [111, "subpackages"], [113, "subpackages"], [169, "subpackages"], [171, "subpackages"], [186, "subpackages"], [211, "subpackages"], [230, "subpackages"], [255, "subpackages"], [266, "subpackages"], [290, "subpackages"], [308, "subpackages"], [319, "subpackages"], [369, "subpackages"]], "Submodules": [[2, "submodules"], [12, "submodules"], [17, "submodules"], [29, "submodules"], [50, "submodules"], [75, "submodules"], [86, "submodules"], [94, "submodules"], [100, "submodules"], [105, "submodules"], [110, "submodules"], [111, "submodules"], [113, "submodules"], [116, "submodules"], [129, "submodules"], [144, "submodules"], [151, "submodules"], [162, "submodules"], [168, "submodules"], [169, "submodules"], [171, "submodules"], [173, "submodules"], [183, "submodules"], [187, "submodules"], [194, "submodules"], [206, "submodules"], [210, "submodules"], [214, "submodules"], [221, "submodules"], [228, "submodules"], [231, "submodules"], [238, "submodules"], [250, "submodules"], [254, "submodules"], [257, "submodules"], [261, "submodules"], [266, "submodules"], [273, "submodules"], [279, "submodules"], [285, "submodules"], [291, "submodules"], [295, "submodules"], [308, "submodules"], [314, "submodules"], [319, "submodules"], [326, "submodules"], [330, "submodules"], [341, "submodules"], [343, "submodules"], [348, "submodules"], [351, "submodules"], [353, "submodules"], [358, "submodules"], [369, "submodules"], [375, "submodules"], [381, "submodules"], [386, "submodules"]], "Package Contents": [[2, "package-contents"], [29, "package-contents"], [162, "package-contents"], [194, "package-contents"], [206, "package-contents"], [210, "package-contents"], [211, "package-contents"], [214, "package-contents"], [221, "package-contents"], [238, "package-contents"], [250, "package-contents"], [254, "package-contents"], [255, "package-contents"], [257, "package-contents"], [266, "package-contents"], [273, "package-contents"], [285, "package-contents"], [290, "package-contents"], [291, "package-contents"], [308, "package-contents"], [326, "package-contents"], [330, "package-contents"], [369, "package-contents"], [386, "package-contents"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[44, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[45, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[46, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[110, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[139, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[141, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[142, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[147, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[148, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.gptq": [[149, "module-neural_compressor.adaptor.torch_utils.gptq"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[150, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[151, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[152, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[153, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[154, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[155, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[156, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.teq": [[157, "module-neural_compressor.adaptor.torch_utils.teq"]], "neural_compressor.adaptor.torch_utils.util": [[158, "module-neural_compressor.adaptor.torch_utils.util"]], "}": [[158, "id3"]], "neural_compressor.adaptor.torch_utils.weight_only": [[159, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "neural_compressor.algorithm.algorithm": [[160, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[161, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[162, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[163, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[164, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[165, "module-neural_compressor.benchmark"]], "neural_compressor.compression.callbacks": [[166, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[167, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[168, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[169, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[170, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner": [[171, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[172, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "neural_compressor.compression.pruner.model_slim": [[173, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[174, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[175, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns": [[176, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.pruners": [[177, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.regs": [[178, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[179, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.utils": [[180, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.conf.config": [[181, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[182, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[183, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[184, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[185, "module-neural_compressor.config"]], "neural_compressor.contrib": [[186, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[187, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[188, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[189, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[190, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[191, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[192, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[193, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[194, "module-neural_compressor.data.dataloaders"]], "Attributes": [[194, "attributes"], [202, "attributes"], [211, "attributes"], [246, "attributes"], [255, "attributes"], [266, "attributes"], [290, "attributes"], [330, "attributes"], [380, "attributes"], [386, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[195, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[196, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[197, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[198, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[199, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[200, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[201, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[202, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[203, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[204, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[205, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[206, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[207, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[208, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[209, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[210, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[211, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[212, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[213, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[214, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[215, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[216, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[217, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[218, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[219, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[220, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[221, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[222, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[223, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[224, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[225, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[226, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[227, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[228, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[229, "module-neural_compressor.experimental.compression.pruning"]], "neural_compressor.experimental.contrib": [[230, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[231, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[232, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[233, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[234, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[235, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[236, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[237, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[238, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[239, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[240, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[241, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[242, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[243, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[244, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[245, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[246, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[247, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[248, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[249, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[250, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[251, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[252, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[253, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[254, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[255, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[256, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[257, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[258, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[259, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[260, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[261, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[262, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[263, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[264, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.graph_optimization": [[265, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[266, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[267, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[268, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[269, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[270, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[271, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[272, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[273, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[274, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[275, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[276, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[277, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[278, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[279, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[280, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[281, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[282, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[283, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[284, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[285, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[286, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[287, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[288, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[289, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[290, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[291, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[292, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[293, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[294, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[295, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[296, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[297, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[298, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[299, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[300, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[301, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[302, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[303, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[304, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[305, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[306, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[307, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[308, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.mse": [[309, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[310, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[311, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[312, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils.constant": [[313, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[314, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[315, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[316, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[317, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[318, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor": [[319, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[320, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[321, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[322, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[323, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[324, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[325, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[326, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[327, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[328, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[329, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[330, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[331, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[332, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[333, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[334, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[335, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[336, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[337, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[338, "module-neural_compressor.objective"]], "neural_compressor.profiling": [[339, "module-neural_compressor.profiling"]], "neural_compressor.profiling.parser.factory": [[340, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[341, "module-neural_compressor.profiling.parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[342, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[343, "module-neural_compressor.profiling.parser.onnx_parser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[344, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "neural_compressor.profiling.parser.parser": [[345, "module-neural_compressor.profiling.parser.parser"]], "neural_compressor.profiling.parser.result": [[346, "module-neural_compressor.profiling.parser.result"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[347, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[348, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[349, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "neural_compressor.profiling.profiler.factory": [[350, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[351, "module-neural_compressor.profiling.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[352, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[353, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[354, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[355, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "neural_compressor.profiling.profiler.profiler": [[356, "module-neural_compressor.profiling.profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[357, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[358, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[359, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[360, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "neural_compressor.quantization": [[361, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[362, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[363, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[364, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[365, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[366, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[367, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[368, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[369, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[370, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[371, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[372, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[373, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[374, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[375, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[376, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[377, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[378, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[379, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[380, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[381, "module-neural_compressor.template"]], "neural_compressor.training": [[382, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[383, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[384, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[385, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[386, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[387, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[388, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[389, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[390, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[391, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[392, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[393, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[394, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[395, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[396, "intel-neural-compressor-documentation"], [477, "intel-neural-compressor-documentation"]], "Sections": [[396, "sections"], [477, "sections"]], "Contributor Covenant Code of Conduct": [[397, "contributor-covenant-code-of-conduct"], [398, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[397, "our-pledge"]], "Our Standards": [[397, "our-standards"]], "Our Responsibilities": [[397, "our-responsibilities"]], "Scope": [[397, "scope"]], "Enforcement": [[397, "enforcement"]], "Attribution": [[397, "attribution"]], "Contribution Guidelines": [[398, "contribution-guidelines"]], "Pull Request Checklist": [[398, "pull-request-checklist"]], "Pull Request Template": [[398, "pull-request-template"]], "Support": [[398, "support"]], "FX": [[399, "fx"]], "Introduction": [[399, "introduction"], [400, "introduction"], [403, "introduction"], [404, "introduction"], [405, "introduction"], [420, "introduction"], [421, "introduction"], [422, "introduction"], [425, "introduction"], [426, "introduction"], [427, "introduction"], [429, "introduction"], [431, "introduction"], [434, "introduction"], [437, "introduction"], [439, "introduction"], [440, "introduction"], [460, "introduction"], [461, "introduction"], [462, "introduction"], [464, "introduction"], [467, "introduction"], [469, "introduction"], [470, "introduction"], [471, "introduction"], [472, "introduction"], [473, "introduction"], [475, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[399, "fx-mode-support-matrix-in-neural-compressor"]], "Get Started": [[399, "get-started"], [465, "get-started"]], "Post Training Static Quantization": [[399, "post-training-static-quantization"], [465, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[399, "post-training-dynamic-quantization"], [465, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[399, "quantization-aware-training"]], "Examples": [[399, "examples"], [400, "examples"], [420, "examples"], [421, "examples"], [422, "examples"], [425, "examples"], [426, "examples"], [427, "examples"], [428, "examples"], [429, "examples"], [438, "examples"], [439, "examples"], [440, "examples"], [461, "examples"], [462, "examples"], [465, "examples"], [467, "examples"], [471, "examples"]], "Note": [[399, "note"]], "Details": [[399, "details"]], "Common Problem": [[399, "common-problem"]], "Dynamic Quantization": [[399, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[399, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[400, "neural-architecture-search"]], "Basic NAS": [[400, "basic-nas"]], "Dynamic NAS": [[400, "dynamic-nas"]], "NAS Support Matrix": [[400, "nas-support-matrix"]], "Get Started with NAS API": [[400, "get-started-with-nas-api"]], "Basic Usage": [[400, "basic-usage"]], "1. Python code + YAML": [[400, "python-code-yaml"]], "2. Python code only": [[400, "python-code-only"]], "Advanced Usage (Custom NAS)": [[400, "advanced-usage-custom-nas"]], "Security Policy": [[401, "security-policy"]], "Report a Vulnerability": [[401, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[402, "intel-neural-compressor"], [458, "intel-neural-compressor"]], "Installation": [[402, "installation"], [435, "installation"], [452, "installation"]], "Install from pypi": [[402, "install-from-pypi"]], "Getting Started": [[402, "getting-started"], [432, "getting-started"]], "Quantization with Python API": [[402, "quantization-with-python-api"], [432, "quantization-with-python-api"]], "Documentation": [[402, "documentation"]], "Selected Publications/Events": [[402, "selected-publications-events"]], "Additional Content": [[402, "additional-content"]], "Research Collaborations": [[402, "research-collaborations"]], "Adaptor": [[403, "adaptor"], [406, "adaptor"]], "Adaptor Support Matrix": [[403, "adaptor-support-matrix"]], "Working Flow": [[403, "working-flow"], [465, "working-flow"]], "Get Started with Adaptor API": [[403, "get-started-with-adaptor-api"]], "Query API": [[403, "query-api"]], "Background": [[403, "background"]], "Query API Introduction": [[403, "query-api-introduction"]], "Example of Adding a New Backend Support": [[403, "example-of-adding-a-new-backend-support"]], "Capability": [[403, "capability"]], "Implement ONNXRTAdaptor Class": [[403, "implement-onnxrtadaptor-class"]], "How to Add An Adaptor": [[404, "how-to-add-an-adaptor"]], "API List that Need to Implement": [[404, "api-list-that-need-to-implement"]], "Design the framework YAML": [[404, "design-the-framework-yaml"]], "Add query_fw_capability to Adaptor": [[404, "add-query-fw-capability-to-adaptor"]], "Add quantize API according to tune_cfg": [[404, "add-quantize-api-according-to-tune-cfg"]], "Prepare calibration model from fp32 graph": [[404, "prepare-calibration-model-from-fp32-graph"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[404, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Calculate the data range and generate quantized model": [[404, "calculate-the-data-range-and-generate-quantized-model"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[405, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "Define the Quantization Ability of the Specific Operator": [[405, "define-the-quantization-ability-of-the-specific-operator"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[405, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Use the New Data Type": [[405, "use-the-new-data-type"]], "Summary": [[405, "summary"]], "ONNX Runtime": [[407, "onnx-runtime"]], "Torch Utils": [[408, "torch-utils"]], "API Document Example": [[409, "api-document-example"]], "APIs": [[410, "apis"]], "Benchmark": [[411, "benchmark"], [438, "benchmark"], [464, "benchmark"]], "Compression": [[412, "compression"]], "Config": [[413, "config"]], "Mix Precision": [[414, "mix-precision"], [438, "mix-precision"]], "Model": [[415, "model"], [440, "model"]], "Objective": [[416, "objective"], [460, "objective"]], "Quantization": [[417, "quantization"], [464, "quantization"], [465, "quantization"]], "Strategy": [[418, "strategy"]], "Training": [[419, "training"]], "Benchmarking": [[420, "benchmarking"]], "Benchmark Support Matrix": [[420, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[420, "get-started-with-benchmark-api"]], "DataLoader": [[421, "dataloader"]], "Supported Framework Dataloader Matrix": [[421, "supported-framework-dataloader-matrix"]], "Get Started with DataLoader": [[421, "get-started-with-dataloader"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[421, "use-intel-neural-compressor-dataloader-api"]], "Build Custom Dataloader with Python API": [[421, "build-custom-dataloader-with-python-api"]], "Dataset": [[422, "dataset"]], "Supported Framework Dataset Matrix": [[422, "supported-framework-dataset-matrix"]], "TensorFlow": [[422, "tensorflow"], [437, "tensorflow"], [472, "tensorflow"]], "PyTorch": [[422, "pytorch"], [437, "pytorch"], [466, "pytorch"]], "MXNet": [[422, "mxnet"], [437, "mxnet"], [472, "mxnet"]], "ONNXRT": [[422, "onnxrt"], [437, "onnxrt"], [472, "onnxrt"]], "Get start with Dataset API": [[422, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[422, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[422, "user-specific-dataset"]], "Design": [[423, "design"], [473, "design"], [473, "id1"], [473, "id3"], [473, "id5"], [473, "id7"], [473, "id9"], [473, "id11"], [473, "id13"], [473, "id15"], [473, "id17"], [473, "id19"], [473, "id21"]], "Architecture": [[423, "architecture"], [434, "architecture"]], "Workflow": [[423, "workflow"]], "Diagnosis": [[424, "diagnosis"]], "Diagnosis introduction": [[424, "diagnosis-introduction"]], "Supported feature matrix": [[424, "supported-feature-matrix"]], "Get started": [[424, "get-started"]], "Install Intel\u00ae Neural Compressor": [[424, "install-intel-neural-compressor"]], "Modify script": [[424, "modify-script"]], "Quantization diagnosis": [[424, "quantization-diagnosis"]], "Benchmark diagnosis": [[424, "benchmark-diagnosis"]], "Example": [[424, "example"], [437, "example"], [443, "example"], [447, "example"], [460, "example"], [470, "example"]], "Prepare dataset": [[424, "prepare-dataset"]], "Run quantization script": [[424, "run-quantization-script"]], "Run benchmark script": [[424, "run-benchmark-script"]], "See quantization data": [[424, "see-quantization-data"]], "How to do diagnosis": [[424, "how-to-do-diagnosis"]], "Parameter description": [[424, "parameter-description"]], "Diagnosis suggestions": [[424, "diagnosis-suggestions"]], "Fallback setting example": [[424, "fallback-setting-example"]], "See profiling data": [[424, "see-profiling-data"]], "Distillation": [[425, "distillation"], [438, "distillation"], [464, "distillation"]], "Knowledge Distillation": [[425, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[425, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[425, "self-distillation"]], "Distillation Support Matrix": [[425, "distillation-support-matrix"]], "Get Started with Distillation API": [[425, "get-started-with-distillation-api"]], "Distillation for Quantization": [[426, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[426, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[426, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[427, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[427, "supported-feature-matrix"], [431, "supported-feature-matrix"], [434, "supported-feature-matrix"], [464, "supported-feature-matrix"], [465, "supported-feature-matrix"], [471, "supported-feature-matrix"], [475, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[427, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[427, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[427, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[427, "horovodrun-execution"]], "Security": [[427, "security"]], "PyTorch Examples:": [[427, "pytorch-examples"]], "TensorFlow Examples:": [[427, "tensorflow-examples"]], "Example List": [[428, "example-list"]], "Release Data": [[428, "release-data"]], "Export": [[429, "export"]], "Supported Framework Model Matrix": [[429, "supported-framework-model-matrix"], [440, "supported-framework-model-matrix"], [467, "supported-framework-model-matrix"]], "PyTorch Model": [[429, "pytorch-model"]], "FP32 Model Export": [[429, "fp32-model-export"], [429, "id1"]], "INT8 Model Export": [[429, "int8-model-export"], [429, "id2"]], "Tensorflow Model": [[429, "tensorflow-model"]], "Appendix": [[429, "appendix"]], "Supported quantized ops": [[429, "supported-quantized-ops"]], "Frequently Asked Questions": [[430, "frequently-asked-questions"]], "Common Build Issues": [[430, "common-build-issues"]], "Issue 1:": [[430, "issue-1"]], "Issue 2:": [[430, "issue-2"]], "Issue 3:": [[430, "issue-3"]], "Issue 4:": [[430, "issue-4"]], "Framework YAML Configuration Files": [[431, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[431, "get-started-with-framework-yaml-files"]], "Quick Samples": [[432, "quick-samples"]], "Validated Models": [[432, "validated-models"], [470, "validated-models"], [476, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[433, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[433, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[433, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[434, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[435, "linux-installation"]], "Prerequisites": [[435, "prerequisites"], [435, "id1"]], "Install from Binary": [[435, "install-from-binary"], [435, "id2"]], "Install from Source": [[435, "install-from-source"], [435, "id3"]], "Install from AI Kit": [[435, "install-from-ai-kit"]], "Windows Installation": [[435, "windows-installation"]], "System Requirements": [[435, "system-requirements"]], "Validated Hardware Environment": [[435, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[435, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[435, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[435, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[435, "validated-software-environment"]], "Legal Information": [[436, "legal-information"]], "License": [[436, "license"]], "Citation": [[436, "citation"]], "Trademarks": [[436, "trademarks"]], "Metrics": [[437, "metrics"]], "Supported Built-in Metric Matrix": [[437, "supported-built-in-metric-matrix"]], "Get Started with Metric": [[437, "get-started-with-metric"]], "Use Intel\u00ae Neural Compressor Metric API": [[437, "use-intel-neural-compressor-metric-api"]], "Build Custom Metric with Python API": [[437, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[438, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[438, "model-quantization"]], "Post-training Quantization": [[438, "post-training-quantization"]], "Quantization Aware Training": [[438, "quantization-aware-training"], [465, "quantization-aware-training"], [465, "id1"]], "Pruning": [[438, "pruning"], [462, "pruning"], [464, "pruning"]], "Orchestration": [[438, "orchestration"]], "Mixed Precision": [[439, "mixed-precision"]], "Mixed Precision Support Matrix": [[439, "mixed-precision-support-matrix"]], "Hardware and Software requests for BF16": [[439, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[439, "hardware-and-software-requests-for-fp16"]], "During quantization mixed precision": [[439, "during-quantization-mixed-precision"]], "Accuracy-driven mixed precision": [[439, "accuracy-driven-mixed-precision"]], "Get Started with Mixed Precision API": [[439, "get-started-with-mixed-precision-api"]], "Neural Coder": [[441, "neural-coder"], [458, "neural-coder"], [458, "id1"]], "What do we offer?": [[441, "what-do-we-offer"]], "Getting Started!": [[441, "getting-started"], [452, "getting-started"]], "Jupyter Lab Extension": [[441, "jupyter-lab-extension"]], "Python Launcher": [[441, "python-launcher"], [446, "python-launcher"]], "Python API": [[441, "python-api"]], "Contact": [[441, "contact"]], "AWS Amazon SageMaker Support": [[442, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[442, "start-jupyter-lab-3"]], "For SageMaker Studio": [[442, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[442, "for-sagemaker-notebook-instance"]], "Installation Guide": [[442, "installation-guide"]], "BigDL Nano Support": [[443, "bigdl-nano-support"]], "Support Matrix": [[443, "support-matrix"]], "Intel CPU Platforms: Best Performance Setting": [[444, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[444, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[444, "install-numa-controller"]], "Environment Variables": [[444, "environment-variables"]], "Frequency Governers": [[444, "frequency-governers"]], "Neural Coder as Python API": [[445, "neural-coder-as-python-api"]], "Enable": [[445, "enable"]], "Bench": [[445, "bench"]], "SuperBench": [[445, "superbench"]], "Quick-Start": [[446, "quick-start"]], "Launcher Arguments (Optional)": [[446, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[447, "neural-coder-for-quantization"]], "Features Supported": [[447, "features-supported"]], "Models Supported": [[447, "models-supported"]], "Usage": [[447, "usage"], [471, "usage"], [471, "id1"], [473, "usage"], [473, "id2"], [473, "id4"], [473, "id6"], [473, "id8"], [473, "id10"], [473, "id12"], [473, "id14"], [473, "id16"], [473, "id18"], [473, "id20"], [473, "id22"]], "PyPI distribution:": [[447, "pypi-distribution"]], "Supported Optimization Features": [[448, "supported-optimization-features"]], "v0.4": [[449, "v0-4"]], "Highlights": [[449, "highlights"]], "Others": [[449, "others"]], "Changelog": [[450, "changelog"], [454, "changelog"]], "neural_compressor_ext_lab": [[451, "neural-compressor-ext-lab"]], "Requirements": [[451, "requirements"], [455, "requirements"]], "Install": [[451, "install"], [455, "install"]], "Uninstall": [[451, "uninstall"], [455, "uninstall"]], "Contributing": [[451, "contributing"], [455, "contributing"]], "Development install": [[451, "development-install"], [455, "development-install"]], "Development uninstall": [[451, "development-uninstall"], [455, "development-uninstall"]], "Packaging the extension": [[451, "packaging-the-extension"], [455, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[452, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[452, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[452, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[452, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[453, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[453, "manual-release"], [456, "manual-release"]], "Python package": [[453, "python-package"], [456, "python-package"]], "NPM package": [[453, "npm-package"], [456, "npm-package"]], "Automated releases with the Jupyter Releaser": [[453, "automated-releases-with-the-jupyter-releaser"], [456, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[453, "publishing-to-conda-forge"], [456, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[455, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[456, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[457, "change-log"]], "[Unreleased]": [[457, "unreleased"]], "Background Introduction": [[458, "background-introduction"]], "Neural Coder Extension in VSCode": [[458, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[458, "neural-coder-extension-usage"]], "1. Open": [[458, "open"]], "2. Search": [[458, "search"]], "3. Setting": [[458, "setting"]], "4. Icon": [[458, "icon"]], "5. optimization (quantization)": [[458, "optimization-quantization"]], "5.1 Enable": [[458, "enable"]], "5.2 Auto": [[458, "auto"]], "Welcome to your VS Code Extension": [[459, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[459, "what-s-in-the-folder"]], "Setup": [[459, "setup"]], "Get up and running straight away": [[459, "get-up-and-running-straight-away"]], "Make changes": [[459, "make-changes"]], "Explore the API": [[459, "explore-the-api"]], "Run tests": [[459, "run-tests"]], "Go further": [[459, "go-further"]], "Single Objective": [[460, "single-objective"]], "Multiple Objectives": [[460, "multiple-objectives"]], "Objective Support Matrix": [[460, "objective-support-matrix"]], "Get Started with Objective API": [[460, "get-started-with-objective-api"]], "Config Single Objective": [[460, "config-single-objective"]], "Config Multiple Objectives": [[460, "config-multiple-objectives"]], "Optimization Orchestration": [[461, "optimization-orchestration"]], "One-shot": [[461, "one-shot"]], "Orchestration Support Matrix": [[461, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[461, "get-started-with-orchestration-api"]], "Neural Network Pruning": [[462, "neural-network-pruning"]], "Pruning Patterns": [[462, "pruning-patterns"]], "Pruning Criteria": [[462, "pruning-criteria"]], "Pruning Types": [[462, "pruning-types"]], "Pruning Schedules": [[462, "pruning-schedules"]], "Pruning Scope": [[462, "pruning-scope"]], "Sparsity Decay Types": [[462, "sparsity-decay-types"]], "Regularization": [[462, "regularization"]], "Pruning Support Matrix": [[462, "pruning-support-matrix"]], "Get Started with Pruning API": [[462, "get-started-with-pruning-api"]], "Sparse Model Deployment": [[462, "sparse-model-deployment"]], "Reference": [[462, "reference"], [465, "reference"], [467, "reference"], [470, "reference"]], "Full Publications/Events (68)": [[463, "full-publications-events-68"]], "2023 (15)": [[463, "id1"]], "2022 (34)": [[463, "id2"]], "2021 (15)": [[463, "id3"]], "2018 - 2020 (4)": [[463, "id4"]], "Pythonic Style Access for Configurations": [[464, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[464, "pythonic-api-for-user-configurations"], [464, "id1"]], "Pythonic API for Framework Configurations": [[464, "pythonic-api-for-framework-configurations"], [464, "id2"]], "Get Started with Pythonic API for Configurations": [[464, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[464, "nas"]], "Quantization Introduction": [[465, "quantization-introduction"]], "Quantization Fundamentals": [[465, "quantization-fundamentals"], [470, "quantization-fundamentals"]], "Quantization Support Matrix": [[465, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[465, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[465, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[465, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[465, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[465, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[465, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[465, "with-or-without-accuracy-aware-tuning"]], "Post Training Quantization": [[465, "post-training-quantization"]], "Specify Quantization Rules": [[465, "specify-quantization-rules"]], "Specify Quantization Recipes": [[465, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[465, "specify-quantization-backend-and-device"]], "Turn OFF Auto Mixed Precision during Quantization": [[466, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[466, "tensorflow"]], "Weight Only Quantization": [[467, "weight-only-quantization"]], "Quantization Capability:": [[467, "quantization-capability"]], "User code:": [[467, "user-code"]], "Release": [[468, "release"]], "Release Notes": [[468, "release-notes"]], "Known Issues": [[468, "known-issues"]], "Incompatible Changes": [[468, "incompatible-changes"]], "SigOpt Strategy": [[469, "sigopt-strategy"]], "Preparation": [[469, "preparation"]], "SigOpt Platform": [[469, "sigopt-platform"]], "Neural Compressor Configuration": [[469, "neural-compressor-configuration"]], "Performance": [[469, "performance"]], "Benefit of SigOpt Strategy": [[469, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[469, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[470, "smooth-quant"]], "Per-tensor & Per-channel": [[470, "per-tensor-per-channel"]], "Per-tensor example": [[470, "per-tensor-example"]], "Per-channel example": [[470, "per-channel-example"]], "Matmul quantization example": [[470, "matmul-quantization-example"]], "Per-channel limitation": [[470, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[470, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[470, "smoothquant"]], "Our enhancement:": [[470, "our-enhancement"]], "Algorithm: Layer-wise Auto-tuning of $\\alpha$.": [[470, "algorithm-layer-wise-auto-tuning-of-alpha"]], "Engineering": [[470, "engineering"]], "Supported Framework Matrix": [[470, "supported-framework-matrix"]], "TensorBoard": [[471, "tensorboard"]], "Get Started with TensorBoard": [[471, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[471, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[471, "tensorflow-tensorboard"]], "PyTorch Examples": [[471, "pytorch-examples"]], "TensorFlow Examples": [[471, "tensorflow-examples"]], "Transform": [[472, "transform"]], "Transform Support List": [[472, "transform-support-list"]], "Pytorch": [[472, "pytorch"]], "Tuning Strategies": [[473, "tuning-strategies"]], "Strategy Design": [[473, "strategy-design"]], "Tuning Space": [[473, "tuning-space"]], "Exit Policy": [[473, "exit-policy"]], "Accuracy Criteria": [[473, "accuracy-criteria"]], "Tuning Process": [[473, "tuning-process"]], "Tuning Algorithms": [[473, "tuning-algorithms"]], "Auto": [[473, "auto"]], "Conservative Tuning": [[473, "conservative-tuning"]], "Basic": [[473, "basic"]], "MSE": [[473, "mse"]], "MSE_V2": [[473, "mse-v2"]], "HAWQ_V2": [[473, "hawq-v2"]], "Bayesian": [[473, "bayesian"]], "Exhaustive": [[473, "exhaustive"]], "Random": [[473, "random"]], "SigOpt": [[473, "sigopt"]], "TPE": [[473, "tpe"]], "Distributed Tuning": [[473, "distributed-tuning"]], "Customize a New Tuning Strategy": [[473, "customize-a-new-tuning-strategy"]], "User Guide": [[474, "user-guide"]], "Overview": [[474, "overview"]], "Python-based APIs": [[474, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[474, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[474, "advanced-topics"]], "Innovations for Productivity": [[474, "innovations-for-productivity"]], "User YAML Configuration Files": [[475, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[475, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[476, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.12.0": [[476, "tensorflow-models-with-intel-tensorflow-2-12-0"]], "TensorFlow Models with Intel\u00ae Extension for TensorFlow* 1.2.0": [[476, "tensorflow-models-with-intel-extension-for-tensorflow-1-2-0"]], "PyTorch Models with Torch 2.0.1+cpu in PTQ Mode": [[476, "pytorch-models-with-torch-2-0-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.0.1+cpu in QAT Mode": [[476, "pytorch-models-with-torch-2-0-1-cpu-in-qat-mode"]], "PyTorch Models with Intel\u00ae Extension for PyTorch* 2.0.1+cpu": [[476, "pytorch-models-with-intel-extension-for-pytorch-2-0-1-cpu"]], "ONNX Models with ONNX Runtime 1.15.0": [[476, "onnx-models-with-onnx-runtime-1-15-0"]], "Validated Pruning Examples": [[476, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[476, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[476, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"block_mask": [[0, "module-block_mask"]], "module": [[0, "module-block_mask"], [1, "module-neural_compressor.adaptor.adaptor"], [2, "module-neural_compressor.adaptor"], [3, "module-neural_compressor.adaptor.keras"], [4, "module-neural_compressor.adaptor.keras_utils.conv2d"], [5, "module-neural_compressor.adaptor.keras_utils.dense"], [6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"], [7, "module-neural_compressor.adaptor.keras_utils"], [8, "module-neural_compressor.adaptor.keras_utils.pool2d"], [9, "module-neural_compressor.adaptor.keras_utils.quantizer"], [10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"], [11, "module-neural_compressor.adaptor.mxnet"], [12, "module-neural_compressor.adaptor.mxnet_utils"], [13, "module-neural_compressor.adaptor.mxnet_utils.util"], [14, "module-neural_compressor.adaptor.onnxrt"], [15, "module-neural_compressor.adaptor.ox_utils.calibration"], [16, "module-neural_compressor.adaptor.ox_utils.calibrator"], [17, "module-neural_compressor.adaptor.ox_utils"], [18, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [20, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [22, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [23, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [26, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [29, "module-neural_compressor.adaptor.ox_utils.operators"], [30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [33, "module-neural_compressor.adaptor.ox_utils.operators.norm"], [34, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [35, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"], [38, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [39, "module-neural_compressor.adaptor.ox_utils.operators.split"], [40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"], [41, "module-neural_compressor.adaptor.ox_utils.quantizer"], [42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"], [43, "module-neural_compressor.adaptor.ox_utils.util"], [44, "module-neural_compressor.adaptor.pytorch"], [45, "module-neural_compressor.adaptor.query"], [46, "module-neural_compressor.adaptor.tensorflow"], [47, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [109, "module-neural_compressor.adaptor.tf_utils.graph_util"], [110, "module-neural_compressor.adaptor.tf_utils"], [111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [139, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"], [140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"], [141, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [142, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [143, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [144, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [145, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [146, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [147, "module-neural_compressor.adaptor.tf_utils.util"], [148, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [149, "module-neural_compressor.adaptor.torch_utils.gptq"], [150, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [151, "module-neural_compressor.adaptor.torch_utils"], [152, "module-neural_compressor.adaptor.torch_utils.mixed_precision"], [153, "module-neural_compressor.adaptor.torch_utils.model_wrapper"], [154, "module-neural_compressor.adaptor.torch_utils.pattern_detector"], [155, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [156, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [157, "module-neural_compressor.adaptor.torch_utils.teq"], [158, "module-neural_compressor.adaptor.torch_utils.util"], [159, "module-neural_compressor.adaptor.torch_utils.weight_only"], [160, "module-neural_compressor.algorithm.algorithm"], [161, "module-neural_compressor.algorithm.fast_bias_correction"], [162, "module-neural_compressor.algorithm"], [163, "module-neural_compressor.algorithm.smooth_quant"], [164, "module-neural_compressor.algorithm.weight_correction"], [165, "module-neural_compressor.benchmark"], [166, "module-neural_compressor.compression.callbacks"], [167, "module-neural_compressor.compression.distillation.criterions"], [168, "module-neural_compressor.compression.distillation"], [169, "module-neural_compressor.compression"], [170, "module-neural_compressor.compression.pruner.criteria"], [171, "module-neural_compressor.compression.pruner"], [172, "module-neural_compressor.compression.pruner.model_slim.auto_slim"], [173, "module-neural_compressor.compression.pruner.model_slim"], [174, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"], [175, "module-neural_compressor.compression.pruner.model_slim.weight_slim"], [176, "module-neural_compressor.compression.pruner.patterns"], [177, "module-neural_compressor.compression.pruner.pruners"], [178, "module-neural_compressor.compression.pruner.regs"], [179, "module-neural_compressor.compression.pruner.schedulers"], [180, "module-neural_compressor.compression.pruner.utils"], [181, "module-neural_compressor.conf.config"], [182, "module-neural_compressor.conf.dotdict"], [183, "module-neural_compressor.conf"], [184, "module-neural_compressor.conf.pythonic_config"], [185, "module-neural_compressor.config"], [186, "module-neural_compressor.contrib"], [187, "module-neural_compressor.contrib.strategy"], [188, "module-neural_compressor.contrib.strategy.sigopt"], [189, "module-neural_compressor.contrib.strategy.tpe"], [190, "module-neural_compressor.data.dataloaders.base_dataloader"], [191, "module-neural_compressor.data.dataloaders.dataloader"], [192, "module-neural_compressor.data.dataloaders.default_dataloader"], [193, "module-neural_compressor.data.dataloaders.fetcher"], [194, "module-neural_compressor.data.dataloaders"], [195, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [196, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [197, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [198, "module-neural_compressor.data.dataloaders.sampler"], [199, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [200, "module-neural_compressor.data.datasets.bert_dataset"], [201, "module-neural_compressor.data.datasets.coco_dataset"], [202, "module-neural_compressor.data.datasets.dataset"], [203, "module-neural_compressor.data.datasets.dummy_dataset"], [204, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [205, "module-neural_compressor.data.datasets.imagenet_dataset"], [206, "module-neural_compressor.data.datasets"], [207, "module-neural_compressor.data.datasets.style_transfer_dataset"], [208, "module-neural_compressor.data.filters.coco_filter"], [209, "module-neural_compressor.data.filters.filter"], [210, "module-neural_compressor.data.filters"], [211, "module-neural_compressor.data"], [212, "module-neural_compressor.data.transforms.coco_transform"], [213, "module-neural_compressor.data.transforms.imagenet_transform"], [214, "module-neural_compressor.data.transforms"], [215, "module-neural_compressor.data.transforms.postprocess"], [216, "module-neural_compressor.data.transforms.tokenization"], [217, "module-neural_compressor.data.transforms.transform"], [218, "module-neural_compressor.experimental.benchmark"], [219, "module-neural_compressor.experimental.common.criterion"], [220, "module-neural_compressor.experimental.common.dataloader"], [221, "module-neural_compressor.experimental.common"], [222, "module-neural_compressor.experimental.common.metric"], [223, "module-neural_compressor.experimental.common.model"], [224, "module-neural_compressor.experimental.common.optimizer"], [225, "module-neural_compressor.experimental.common.postprocess"], [226, "module-neural_compressor.experimental.common.torch_utils"], [227, "module-neural_compressor.experimental.component"], [228, "module-neural_compressor.experimental.compression"], [229, "module-neural_compressor.experimental.compression.pruning"], [230, "module-neural_compressor.experimental.contrib"], [231, "module-neural_compressor.experimental.contrib.strategy"], [232, "module-neural_compressor.experimental.contrib.strategy.sigopt"], [233, "module-neural_compressor.experimental.contrib.strategy.tpe"], [234, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [235, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [236, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [237, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [238, "module-neural_compressor.experimental.data.dataloaders"], [239, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [240, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [241, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [242, "module-neural_compressor.experimental.data.dataloaders.sampler"], [243, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [244, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [245, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [246, "module-neural_compressor.experimental.data.datasets.dataset"], [247, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [248, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [249, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [250, "module-neural_compressor.experimental.data.datasets"], [251, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [252, "module-neural_compressor.experimental.data.filters.coco_filter"], [253, "module-neural_compressor.experimental.data.filters.filter"], [254, "module-neural_compressor.experimental.data.filters"], [255, "module-neural_compressor.experimental.data"], [256, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [257, "module-neural_compressor.experimental.data.transforms"], [258, "module-neural_compressor.experimental.data.transforms.tokenization"], [259, "module-neural_compressor.experimental.data.transforms.transform"], [260, "module-neural_compressor.experimental.distillation"], [261, "module-neural_compressor.experimental.export"], [262, "module-neural_compressor.experimental.export.qlinear2qdq"], [263, "module-neural_compressor.experimental.export.tf2onnx"], [264, "module-neural_compressor.experimental.export.torch2onnx"], [265, "module-neural_compressor.experimental.graph_optimization"], [266, "module-neural_compressor.experimental"], [267, "module-neural_compressor.experimental.metric.bleu"], [268, "module-neural_compressor.experimental.metric.bleu_util"], [269, "module-neural_compressor.experimental.metric.coco_label_map"], [270, "module-neural_compressor.experimental.metric.coco_tools"], [271, "module-neural_compressor.experimental.metric.evaluate_squad"], [272, "module-neural_compressor.experimental.metric.f1"], [273, "module-neural_compressor.experimental.metric"], [274, "module-neural_compressor.experimental.metric.metric"], [275, "module-neural_compressor.experimental.mixed_precision"], [276, "module-neural_compressor.experimental.model_conversion"], [277, "module-neural_compressor.experimental.nas.basic_nas"], [278, "module-neural_compressor.experimental.nas.dynas"], [279, "module-neural_compressor.experimental.nas"], [280, "module-neural_compressor.experimental.nas.nas"], [281, "module-neural_compressor.experimental.nas.nas_utils"], [282, "module-neural_compressor.experimental.nas.search_algorithms"], [283, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [284, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [285, "module-neural_compressor.experimental.pruner_legacy"], [286, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [287, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [288, "module-neural_compressor.experimental.pruner_legacy.pruner"], [289, "module-neural_compressor.experimental.pruning"], [290, "module-neural_compressor.experimental.pruning_recipes"], [291, "module-neural_compressor.experimental.pruning_recipes.patterns"], [292, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [293, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [294, "module-neural_compressor.experimental.pruning_v2"], [295, "module-neural_compressor.experimental.pytorch_pruner"], [296, "module-neural_compressor.experimental.pytorch_pruner.logger"], [297, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [298, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [299, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [300, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [301, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [302, "module-neural_compressor.experimental.quantization"], [303, "module-neural_compressor.experimental.scheduler"], [304, "module-neural_compressor.experimental.strategy.auto_mixed_precision"], [305, "module-neural_compressor.experimental.strategy.basic"], [306, "module-neural_compressor.experimental.strategy.bayesian"], [307, "module-neural_compressor.experimental.strategy.exhaustive"], [308, "module-neural_compressor.experimental.strategy"], [309, "module-neural_compressor.experimental.strategy.mse"], [310, "module-neural_compressor.experimental.strategy.mse_v2"], [311, "module-neural_compressor.experimental.strategy.random"], [312, "module-neural_compressor.experimental.strategy.strategy"], [313, "module-neural_compressor.experimental.strategy.utils.constant"], [314, "module-neural_compressor.experimental.strategy.utils"], [315, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"], [316, "module-neural_compressor.experimental.strategy.utils.tuning_space"], [317, "module-neural_compressor.experimental.strategy.utils.tuning_structs"], [318, "module-neural_compressor.experimental.strategy.utils.utility"], [319, "module-neural_compressor"], [320, "module-neural_compressor.metric.bleu"], [321, "module-neural_compressor.metric.bleu_util"], [322, "module-neural_compressor.metric.coco_label_map"], [323, "module-neural_compressor.metric.coco_tools"], [324, "module-neural_compressor.metric.evaluate_squad"], [325, "module-neural_compressor.metric.f1"], [326, "module-neural_compressor.metric"], [327, "module-neural_compressor.metric.metric"], [328, "module-neural_compressor.mix_precision"], [329, "module-neural_compressor.model.base_model"], [330, "module-neural_compressor.model"], [331, "module-neural_compressor.model.keras_model"], [332, "module-neural_compressor.model.model"], [333, "module-neural_compressor.model.mxnet_model"], [334, "module-neural_compressor.model.nets_factory"], [335, "module-neural_compressor.model.onnx_model"], [336, "module-neural_compressor.model.tensorflow_model"], [337, "module-neural_compressor.model.torch_model"], [338, "module-neural_compressor.objective"], [339, "module-neural_compressor.profiling"], [340, "module-neural_compressor.profiling.parser.factory"], [341, "module-neural_compressor.profiling.parser"], [342, "module-neural_compressor.profiling.parser.onnx_parser.factory"], [343, "module-neural_compressor.profiling.parser.onnx_parser"], [344, "module-neural_compressor.profiling.parser.onnx_parser.parser"], [345, "module-neural_compressor.profiling.parser.parser"], [346, "module-neural_compressor.profiling.parser.result"], [347, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"], [348, "module-neural_compressor.profiling.parser.tensorflow_parser"], [349, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"], [350, "module-neural_compressor.profiling.profiler.factory"], [351, "module-neural_compressor.profiling.profiler"], [352, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"], [353, "module-neural_compressor.profiling.profiler.onnxrt_profiler"], [354, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"], [355, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"], [356, "module-neural_compressor.profiling.profiler.profiler"], [357, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"], [358, "module-neural_compressor.profiling.profiler.tensorflow_profiler"], [359, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"], [360, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"], [361, "module-neural_compressor.quantization"], [362, "module-neural_compressor.strategy.auto"], [363, "module-neural_compressor.strategy.auto_mixed_precision"], [364, "module-neural_compressor.strategy.basic"], [365, "module-neural_compressor.strategy.bayesian"], [366, "module-neural_compressor.strategy.conservative"], [367, "module-neural_compressor.strategy.exhaustive"], [368, "module-neural_compressor.strategy.hawq_v2"], [369, "module-neural_compressor.strategy"], [370, "module-neural_compressor.strategy.mse"], [371, "module-neural_compressor.strategy.mse_v2"], [372, "module-neural_compressor.strategy.random"], [373, "module-neural_compressor.strategy.strategy"], [374, "module-neural_compressor.strategy.utils.constant"], [375, "module-neural_compressor.strategy.utils"], [376, "module-neural_compressor.strategy.utils.tuning_sampler"], [377, "module-neural_compressor.strategy.utils.tuning_space"], [378, "module-neural_compressor.strategy.utils.tuning_structs"], [379, "module-neural_compressor.strategy.utils.utility"], [380, "module-neural_compressor.template.api_doc_example"], [381, "module-neural_compressor.template"], [382, "module-neural_compressor.training"], [383, "module-neural_compressor.utils.collect_layer_histogram"], [384, "module-neural_compressor.utils.constant"], [385, "module-neural_compressor.utils.create_obj_from_config"], [386, "module-neural_compressor.utils"], [387, "module-neural_compressor.utils.kl_divergence"], [388, "module-neural_compressor.utils.load_huggingface"], [389, "module-neural_compressor.utils.logger"], [390, "module-neural_compressor.utils.neural_insights_utils"], [391, "module-neural_compressor.utils.options"], [392, "module-neural_compressor.utils.pytorch"], [393, "module-neural_compressor.utils.utility"], [394, "module-neural_compressor.utils.weights_details"], [395, "module-neural_compressor.version"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasQuery"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "mxnetquery (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MXNetQuery"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrtquery (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRTQuery"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase"]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector"]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator"]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator"]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator"]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "float16activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.Float16ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "float16binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.Float16BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[30, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "fusedmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.FusedMatMulOperator"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "batchnormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.BatchNormalizationOperator"]], "normalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "reduceoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "unaryoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[41, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "ortsmoothquant (class in neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.ORTSmoothQuant"]], "get_quant_dequant_output() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.get_quant_dequant_output"]], "make_sub_graph() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.make_sub_graph"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "quant_dequant_data() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.quant_dequant_data"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "to_numpy() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.to_numpy"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchweightonlyadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorchWeightOnlyAdaptor"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "neural_compressor.adaptor.pytorch": [[44, "module-neural_compressor.adaptor.pytorch"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[45, "neural_compressor.adaptor.query.QueryBackendCapability"]], "neural_compressor.adaptor.query": [[45, "module-neural_compressor.adaptor.query"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow": [[46, "module-neural_compressor.adaptor.tensorflow"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[47, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[48, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[49, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[109, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[109, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[110, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "smoothquantcalibration (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[139, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[139, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "smoothquantscaler (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[140, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScaler"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[141, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[141, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[142, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[142, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[143, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[145, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[146, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "get_weight_from_input_tensor() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_weight_from_input_tensor"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[147, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[148, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[148, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[148, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[148, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "gptq (class in neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.GPTQ"]], "gptquantizer (class in neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.GPTQuantizer"]], "find_layers() (in module neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.find_layers"]], "find_layers_name() (in module neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.find_layers_name"]], "is_leaf() (in module neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.is_leaf"]], "log_quantizable_layers_per_transformer() (in module neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.log_quantizable_layers_per_transformer"]], "neural_compressor.adaptor.torch_utils.gptq": [[149, "module-neural_compressor.adaptor.torch_utils.gptq"]], "quantize() (in module neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.quantize"]], "trace_gptq_target_blocks() (in module neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.trace_gptq_target_blocks"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[150, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[150, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[150, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[150, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[150, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[151, "module-neural_compressor.adaptor.torch_utils"]], "ipex_mixed_precision() (in module neural_compressor.adaptor.torch_utils.mixed_precision)": [[152, "neural_compressor.adaptor.torch_utils.mixed_precision.ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[152, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "fakeaffinetensorquantfunction (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[153, "neural_compressor.adaptor.torch_utils.model_wrapper.FakeAffineTensorQuantFunction"]], "teqlinearfakequant (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[153, "neural_compressor.adaptor.torch_utils.model_wrapper.TEQLinearFakeQuant"]], "teqmullinear (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[153, "neural_compressor.adaptor.torch_utils.model_wrapper.TEQMulLinear"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[153, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.adaptor.torch_utils.pattern_detector)": [[154, "neural_compressor.adaptor.torch_utils.pattern_detector.TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[154, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "graphtrace (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[155, "neural_compressor.adaptor.torch_utils.smooth_quant.GraphTrace"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[155, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "get_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[155, "neural_compressor.adaptor.torch_utils.smooth_quant.get_module"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[155, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "set_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[155, "neural_compressor.adaptor.torch_utils.smooth_quant.set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[156, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[156, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[156, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "tequantizer (class in neural_compressor.adaptor.torch_utils.teq)": [[157, "neural_compressor.adaptor.torch_utils.teq.TEQuantizer"]], "neural_compressor.adaptor.torch_utils.teq": [[157, "module-neural_compressor.adaptor.torch_utils.teq"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "collect_weight_info() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.collect_weight_info"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_depth"]], "get_dict_at_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_dict_at_depth"]], "get_element_under_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_element_under_depth"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_op_type_by_name() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_op_type_by_name"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern"]], "neural_compressor.adaptor.torch_utils.util": [[158, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.update_sq_scale"]], "awq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[159, "neural_compressor.adaptor.torch_utils.weight_only.awq_quantize"]], "get_module_input_output() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[159, "neural_compressor.adaptor.torch_utils.weight_only.get_module_input_output"]], "gptq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[159, "neural_compressor.adaptor.torch_utils.weight_only.gptq_quantize"]], "neural_compressor.adaptor.torch_utils.weight_only": [[159, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "qdq_weight_actor() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[159, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_actor"]], "qdq_weight_asym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[159, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_asym"]], "qdq_weight_sym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[159, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_sym"]], "quant_weight() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[159, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight"]], "rtn_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[159, "neural_compressor.adaptor.torch_utils.weight_only.rtn_quantize"]], "teq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[159, "neural_compressor.adaptor.torch_utils.weight_only.teq_quantize"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[160, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[160, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[160, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[160, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[160, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[161, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[161, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[162, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[163, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[163, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[164, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[164, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[165, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.summary_benchmark"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[166, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[166, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[166, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[166, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[166, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[166, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[166, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[166, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "neural_compressor.compression.callbacks": [[166, "module-neural_compressor.compression.callbacks"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "neural_compressor.compression.distillation.criterions": [[167, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[168, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[169, "module-neural_compressor.compression"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[170, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[170, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[170, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[170, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[170, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumblockcriterion (class in neural_compressor.compression.pruner.criteria)": [[170, "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[170, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[170, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[170, "module-neural_compressor.compression.pruner.criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[170, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[170, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[170, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[170, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[170, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[170, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumblockcriterion attribute)": [[170, "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[170, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.compression.pruner": [[171, "module-neural_compressor.compression.pruner"]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[172, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_ffn2_pruning_config"]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[172, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_mha_pruning_config"]], "model_slim() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[172, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim"]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[172, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_ffn2"]], "model_slim_mha() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[172, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_mha"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[172, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[172, "neural_compressor.compression.pruner.model_slim.auto_slim.parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim": [[173, "module-neural_compressor.compression.pruner.model_slim"]], "classifierheadsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher"]], "classifierheadsearchertf (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF"]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher"]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher"]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher"]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph"]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes"]], "get_common_module() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_common_module"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[174, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "print_iterables() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.print_iterables"]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut"]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets"]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[175, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression"]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[175, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator"]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[175, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils"]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[175, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device"]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[175, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1"]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[175, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2"]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[175, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[175, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "basepattern (class in neural_compressor.compression.pruner.patterns)": [[176, "neural_compressor.compression.pruner.patterns.BasePattern"]], "m (neural_compressor.compression.pruner.patterns.patternmha attribute)": [[176, "neural_compressor.compression.pruner.patterns.PatternMHA.M"]], "m (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[176, "neural_compressor.compression.pruner.patterns.PatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.patternmha attribute)": [[176, "neural_compressor.compression.pruner.patterns.PatternMHA.N"]], "n (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[176, "neural_compressor.compression.pruner.patterns.PatternNInM.N"]], "patternmha (class in neural_compressor.compression.pruner.patterns)": [[176, "neural_compressor.compression.pruner.patterns.PatternMHA"]], "patternninm (class in neural_compressor.compression.pruner.patterns)": [[176, "neural_compressor.compression.pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.compression.pruner.patterns)": [[176, "neural_compressor.compression.pruner.patterns.PatternNxM"]], "block_size (neural_compressor.compression.pruner.patterns.patternnxm attribute)": [[176, "neural_compressor.compression.pruner.patterns.PatternNxM.block_size"]], "config (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.BasePattern.config"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[176, "neural_compressor.compression.pruner.patterns.get_pattern"]], "invalid_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.BasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.BasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.BasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.BasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.BasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.BasePattern.modules"]], "neural_compressor.compression.pruner.patterns": [[176, "module-neural_compressor.compression.pruner.patterns"]], "pattern (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.BasePattern.pattern"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns)": [[176, "neural_compressor.compression.pruner.patterns.register_pattern"]], "target_sparsity (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.BasePattern.target_sparsity"]], "basepruner (class in neural_compressor.compression.pruner.pruners)": [[177, "neural_compressor.compression.pruner.pruners.BasePruner"]], "basicpruner (class in neural_compressor.compression.pruner.pruners)": [[177, "neural_compressor.compression.pruner.pruners.BasicPruner"]], "blockmaskpruner (class in neural_compressor.compression.pruner.pruners)": [[177, "neural_compressor.compression.pruner.pruners.BlockMaskPruner"]], "multiheadattentionpruner (class in neural_compressor.compression.pruner.pruners)": [[177, "neural_compressor.compression.pruner.pruners.MultiheadAttentionPruner"]], "patternlockpruner (class in neural_compressor.compression.pruner.pruners)": [[177, "neural_compressor.compression.pruner.pruners.PatternLockPruner"]], "progressivepruner (class in neural_compressor.compression.pruner.pruners)": [[177, "neural_compressor.compression.pruner.pruners.ProgressivePruner"]], "retrainfreepruner (class in neural_compressor.compression.pruner.pruners)": [[177, "neural_compressor.compression.pruner.pruners.RetrainFreePruner"]], "config (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[177, "neural_compressor.compression.pruner.pruners.BasePruner.config"]], "criterion (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[177, "neural_compressor.compression.pruner.pruners.BasicPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[177, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[177, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.criterion"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[177, "neural_compressor.compression.pruner.pruners.BasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[177, "neural_compressor.compression.pruner.pruners.BasePruner.end_step"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[177, "neural_compressor.compression.pruner.pruners.get_pruner"]], "global_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[177, "neural_compressor.compression.pruner.pruners.BasePruner.global_step"]], "head_masks (neural_compressor.compression.pruner.pruners.multiheadattentionpruner attribute)": [[177, "neural_compressor.compression.pruner.pruners.MultiheadAttentionPruner.head_masks"]], "linear_layers (neural_compressor.compression.pruner.pruners.multiheadattentionpruner attribute)": [[177, "neural_compressor.compression.pruner.pruners.MultiheadAttentionPruner.linear_layers"]], "masks (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[177, "neural_compressor.compression.pruner.pruners.BasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[177, "neural_compressor.compression.pruner.pruners.BasePruner.max_sparsity_ratio_per_op"]], "mha_compressions (neural_compressor.compression.pruner.pruners.multiheadattentionpruner attribute)": [[177, "neural_compressor.compression.pruner.pruners.MultiheadAttentionPruner.mha_compressions"]], "mha_scores (neural_compressor.compression.pruner.pruners.multiheadattentionpruner attribute)": [[177, "neural_compressor.compression.pruner.pruners.MultiheadAttentionPruner.mha_scores"]], "modules (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[177, "neural_compressor.compression.pruner.pruners.BasePruner.modules"]], "neural_compressor.compression.pruner.pruners": [[177, "module-neural_compressor.compression.pruner.pruners"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[177, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pattern (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[177, "neural_compressor.compression.pruner.pruners.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[177, "neural_compressor.compression.pruner.pruners.BasicPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[177, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[177, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.pattern"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[177, "neural_compressor.compression.pruner.pruners.BasePruner.pruning_frequency"]], "reg (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[177, "neural_compressor.compression.pruner.pruners.BasicPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[177, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[177, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.reg"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners)": [[177, "neural_compressor.compression.pruner.pruners.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[177, "neural_compressor.compression.pruner.pruners.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[177, "neural_compressor.compression.pruner.pruners.BasicPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[177, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[177, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[177, "neural_compressor.compression.pruner.pruners.BasePruner.scores"]], "start_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[177, "neural_compressor.compression.pruner.pruners.BasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[177, "neural_compressor.compression.pruner.pruners.BasePruner.target_sparsity_ratio"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[178, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[178, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[178, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[178, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[178, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[178, "module-neural_compressor.compression.pruner.regs"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[178, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[178, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[179, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[179, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[179, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[179, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[179, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[179, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[179, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[180, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[180, "neural_compressor.compression.pruner.utils.check_key_validity"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[180, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[180, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "get_sparsity_ratio_tf() (in module neural_compressor.compression.pruner.utils)": [[180, "neural_compressor.compression.pruner.utils.get_sparsity_ratio_tf"]], "neural_compressor.compression.pruner.utils": [[180, "module-neural_compressor.compression.pruner.utils"]], "parse_last_linear() (in module neural_compressor.compression.pruner.utils)": [[180, "neural_compressor.compression.pruner.utils.parse_last_linear"]], "parse_last_linear_tf() (in module neural_compressor.compression.pruner.utils)": [[180, "neural_compressor.compression.pruner.utils.parse_last_linear_tf"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[180, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "parse_to_prune_tf() (in module neural_compressor.compression.pruner.utils)": [[180, "neural_compressor.compression.pruner.utils.parse_to_prune_tf"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[180, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[180, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[180, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[180, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[180, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[180, "neural_compressor.compression.pruner.utils.update_params"]], "benchmark_conf (class in neural_compressor.conf.config)": [[181, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[181, "neural_compressor.conf.config.Conf"]], "distillation_conf (class in neural_compressor.conf.config)": [[181, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[181, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[181, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[181, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[181, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[181, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[181, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[181, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[182, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[182, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[182, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[182, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[183, "module-neural_compressor.conf"]], "accuracycriterion (class in neural_compressor.conf.pythonic_config)": [[184, "neural_compressor.conf.pythonic_config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.conf.pythonic_config)": [[184, "neural_compressor.conf.pythonic_config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.conf.pythonic_config)": [[184, "neural_compressor.conf.pythonic_config.DistillationConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.conf.pythonic_config)": [[184, "neural_compressor.conf.pythonic_config.KnowledgeDistillationLossConfig"]], "options (class in neural_compressor.conf.pythonic_config)": [[184, "neural_compressor.conf.pythonic_config.Options"]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[184, "neural_compressor.conf.pythonic_config.QuantizationConfig"]], "weightpruningconfig (class in neural_compressor.conf.pythonic_config)": [[184, "neural_compressor.conf.pythonic_config.WeightPruningConfig"]], "neural_compressor.conf.pythonic_config": [[184, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[185, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[185, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[185, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[185, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[185, "neural_compressor.config.ExportConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[185, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[185, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[185, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[185, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[185, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[185, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[185, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[185, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[185, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[185, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[185, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[185, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[185, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[185, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[185, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[185, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[185, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[185, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[185, "module-neural_compressor.config"]], "neural_compressor.contrib": [[186, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[187, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[188, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[188, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[189, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[189, "module-neural_compressor.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[190, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader": [[190, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[191, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "check_dataloader() (in module neural_compressor.data.dataloaders.dataloader)": [[191, "neural_compressor.data.dataloaders.dataloader.check_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[191, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[192, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[192, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[192, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[193, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[193, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[193, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[193, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[194, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[195, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[195, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[196, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[196, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[196, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[197, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[197, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[198, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[198, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[198, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[198, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[198, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[199, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[199, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[199, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[199, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[199, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[200, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[200, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[200, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[200, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[200, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[200, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[200, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[200, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[200, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[201, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[201, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[201, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[201, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[201, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[202, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[203, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[203, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[204, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[204, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[204, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[205, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[205, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[205, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[205, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[205, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[205, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[205, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[206, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[207, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[207, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[208, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[208, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[208, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[209, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[209, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[209, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[209, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[209, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[209, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[209, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[209, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[209, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[210, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[211, "module-neural_compressor.data"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[212, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[212, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[213, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[213, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[213, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[213, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[213, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[213, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[213, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[213, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[213, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[213, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale"]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[213, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.imagenet_transform": [[213, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[214, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[215, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[215, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[216, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[216, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[216, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[216, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[216, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[216, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[216, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[216, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.TRANSFORMS"], [217, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[217, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[218, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[218, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[218, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[218, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[218, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[218, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[218, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[218, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[218, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[218, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[219, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[220, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[220, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[221, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[222, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[222, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[223, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[223, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[223, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[224, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[224, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[224, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[224, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[224, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[224, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[224, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[224, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[224, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[225, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[225, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[226, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[226, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[226, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[227, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[227, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[228, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[229, "module-neural_compressor.experimental.compression.pruning"]], "prepare_pruning() (in module neural_compressor.experimental.compression.pruning)": [[229, "neural_compressor.experimental.compression.pruning.prepare_pruning"]], "save() (in module neural_compressor.experimental.compression.pruning)": [[229, "neural_compressor.experimental.compression.pruning.save"]], "neural_compressor.experimental.contrib": [[230, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[231, "module-neural_compressor.experimental.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[232, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[232, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[233, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[233, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[234, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[234, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[235, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[236, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[236, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[236, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[237, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[237, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[237, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[237, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[238, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[239, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[239, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[240, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[240, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[240, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[241, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[241, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[242, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[242, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[242, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[242, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[242, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[243, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[243, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[243, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[243, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[243, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[244, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[244, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[244, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[244, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[244, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[244, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[244, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[244, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[244, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[245, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[245, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[245, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[245, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[245, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[246, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[247, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[247, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[248, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[248, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[248, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[249, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[249, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[249, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[249, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[249, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[249, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[249, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[250, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[251, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[251, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[252, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[252, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[252, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[253, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[253, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[253, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[253, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[253, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[253, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[253, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[253, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[253, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[254, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[255, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[256, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[256, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[256, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[256, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[256, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[256, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[256, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[256, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[256, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[256, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[257, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[258, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[258, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[258, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[258, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[258, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[258, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[258, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[258, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [259, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[259, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[260, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[260, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[260, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[260, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[260, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[260, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[261, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[262, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[262, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[262, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[263, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[263, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[263, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "dynamic_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[264, "neural_compressor.experimental.export.torch2onnx.dynamic_quant_export"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[264, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[264, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[264, "module-neural_compressor.experimental.export.torch2onnx"]], "static_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[264, "neural_compressor.experimental.export.torch2onnx.static_quant_export"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[264, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[264, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[265, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[265, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[266, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[267, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[267, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[267, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[267, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[267, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[267, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[267, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[267, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[267, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[268, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[268, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[269, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[270, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[270, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[270, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[270, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[270, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[270, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[270, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[270, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[271, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[271, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[271, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[271, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[271, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[272, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[272, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[272, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[272, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[272, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[273, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[274, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[274, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[274, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[274, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[274, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[274, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[274, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[274, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[274, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[274, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[274, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[274, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[274, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[274, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[274, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[274, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[274, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[274, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[274, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[274, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[274, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[274, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[274, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[274, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[274, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[275, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[275, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[276, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[276, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[277, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[277, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[278, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[278, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[279, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[280, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[280, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[280, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[281, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[281, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[281, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[281, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[282, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[282, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[282, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[282, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[282, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[283, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[283, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[284, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[284, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[285, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[286, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[286, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[287, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[287, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[288, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[288, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[288, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[289, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[289, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[289, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[289, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[289, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[290, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[291, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[292, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[292, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[292, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[292, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[292, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[293, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[293, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[293, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[293, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[293, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[293, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[293, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[294, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[294, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[294, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[294, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[294, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[295, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[296, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[297, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[297, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[297, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[297, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[297, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[297, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[298, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[298, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[298, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[298, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[298, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[298, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[298, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[299, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[300, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[300, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[300, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[300, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[300, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[300, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[301, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[301, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[301, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[301, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[301, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[301, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[301, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[302, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[302, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[303, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[303, "module-neural_compressor.experimental.scheduler"]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[304, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[304, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[305, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[305, "module-neural_compressor.experimental.strategy.basic"]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[306, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[306, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[306, "neural_compressor.experimental.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[306, "neural_compressor.experimental.strategy.bayesian.acq_max"]], "neural_compressor.experimental.strategy.bayesian": [[306, "module-neural_compressor.experimental.strategy.bayesian"]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[307, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.exhaustive": [[307, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[308, "module-neural_compressor.experimental.strategy"]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[309, "neural_compressor.experimental.strategy.mse.MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[309, "module-neural_compressor.experimental.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[310, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[310, "module-neural_compressor.experimental.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[311, "neural_compressor.experimental.strategy.random.RandomTuneStrategy"]], "neural_compressor.experimental.strategy.random": [[311, "module-neural_compressor.experimental.strategy.random"]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[312, "neural_compressor.experimental.strategy.strategy.TuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[312, "module-neural_compressor.experimental.strategy.strategy"]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[312, "neural_compressor.experimental.strategy.strategy.strategy_registry"]], "neural_compressor.experimental.strategy.utils.constant": [[313, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[314, "module-neural_compressor.experimental.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[315, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[315, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[315, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[315, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[315, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[315, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[315, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[315, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[315, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[316, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[316, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[316, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[316, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[316, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[316, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[316, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[317, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[317, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[318, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[318, "neural_compressor.experimental.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[318, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.experimental.strategy.utils.utility": [[318, "module-neural_compressor.experimental.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[318, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type"]], "neural_compressor": [[319, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[320, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[320, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[320, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[320, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[320, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[320, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[320, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[320, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[320, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[321, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[321, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[322, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[323, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[323, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[323, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[323, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[323, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[323, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[323, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[323, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[324, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[324, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[324, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[324, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[324, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[325, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[325, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[325, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[325, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[325, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[326, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[327, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[327, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[327, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[327, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[327, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[327, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[327, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[327, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[327, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[327, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[327, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[327, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[327, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[327, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[327, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[327, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[327, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[327, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[327, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[327, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[327, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[327, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[327, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[327, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[327, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[328, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[328, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[329, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[329, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[330, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[331, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[331, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[332, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[332, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[332, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[333, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[333, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[334, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[334, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[335, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[335, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[336, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[337, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[337, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[337, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[337, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[337, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[338, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[338, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[338, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[338, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[338, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[338, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[338, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[338, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[338, "neural_compressor.objective.objective_registry"]], "neural_compressor.profiling": [[339, "module-neural_compressor.profiling"]], "parserfactory (class in neural_compressor.profiling.parser.factory)": [[340, "neural_compressor.profiling.parser.factory.ParserFactory"]], "neural_compressor.profiling.parser.factory": [[340, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[341, "module-neural_compressor.profiling.parser"]], "onnxrtparserfactory (class in neural_compressor.profiling.parser.onnx_parser.factory)": [[342, "neural_compressor.profiling.parser.onnx_parser.factory.OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[342, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[343, "module-neural_compressor.profiling.parser.onnx_parser"]], "onnxprofilingparser (class in neural_compressor.profiling.parser.onnx_parser.parser)": [[344, "neural_compressor.profiling.parser.onnx_parser.parser.OnnxProfilingParser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[344, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "profilingparser (class in neural_compressor.profiling.parser.parser)": [[345, "neural_compressor.profiling.parser.parser.ProfilingParser"]], "neural_compressor.profiling.parser.parser": [[345, "module-neural_compressor.profiling.parser.parser"]], "profilingresult (class in neural_compressor.profiling.parser.result)": [[346, "neural_compressor.profiling.parser.result.ProfilingResult"]], "neural_compressor.profiling.parser.result": [[346, "module-neural_compressor.profiling.parser.result"]], "tensorflowparserfactory (class in neural_compressor.profiling.parser.tensorflow_parser.factory)": [[347, "neural_compressor.profiling.parser.tensorflow_parser.factory.TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[347, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[348, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "tensorflowprofilingparser (class in neural_compressor.profiling.parser.tensorflow_parser.parser)": [[349, "neural_compressor.profiling.parser.tensorflow_parser.parser.TensorFlowProfilingParser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[349, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "profilerfactory (class in neural_compressor.profiling.profiler.factory)": [[350, "neural_compressor.profiling.profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.factory": [[350, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[351, "module-neural_compressor.profiling.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.onnxrt_profiler.factory)": [[352, "neural_compressor.profiling.profiler.onnxrt_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[352, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[353, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "profiler (class in neural_compressor.profiling.profiler.onnxrt_profiler.profiler)": [[354, "neural_compressor.profiling.profiler.onnxrt_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[354, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "create_onnx_config() (in module neural_compressor.profiling.profiler.onnxrt_profiler.utils)": [[355, "neural_compressor.profiling.profiler.onnxrt_profiler.utils.create_onnx_config"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[355, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "profiler (class in neural_compressor.profiling.profiler.profiler)": [[356, "neural_compressor.profiling.profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.profiler": [[356, "module-neural_compressor.profiling.profiler.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.tensorflow_profiler.factory)": [[357, "neural_compressor.profiling.profiler.tensorflow_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[357, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[358, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "profiler (class in neural_compressor.profiling.profiler.tensorflow_profiler.profiler)": [[359, "neural_compressor.profiling.profiler.tensorflow_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[359, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "create_tf_config() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[360, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.create_tf_config"]], "delete_assign() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[360, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[360, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "set_eager_execution() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[360, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.set_eager_execution"]], "fit() (in module neural_compressor.quantization)": [[361, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[361, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[362, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[362, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[363, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[363, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[364, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[364, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[365, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[365, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[365, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[365, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[365, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[366, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[366, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[367, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[367, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[368, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[368, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[369, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[370, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[370, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[371, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[371, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[372, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[372, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[373, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[373, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[373, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[373, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[374, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[375, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[376, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[376, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[376, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[376, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[376, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[376, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[376, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[376, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.strategy.utils.tuning_sampler)": [[376, "neural_compressor.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_sampler": [[376, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[377, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[377, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[377, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[377, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[377, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[377, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[377, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[378, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[378, "module-neural_compressor.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[379, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[379, "neural_compressor.strategy.utils.utility.QuantOptions"]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[379, "neural_compressor.strategy.utils.utility.QuantType"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[379, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[379, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[379, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[379, "module-neural_compressor.strategy.utils.utility"]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[379, "neural_compressor.strategy.utils.utility.preprocess_user_cfg"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[379, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[380, "neural_compressor.template.api_doc_example.ExampleClass"]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[380, "neural_compressor.template.api_doc_example.ExampleClass.attr1"]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[380, "neural_compressor.template.api_doc_example.ExampleClass.attr2"]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[380, "neural_compressor.template.api_doc_example.ExampleClass.attr5"]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[380, "neural_compressor.template.api_doc_example.attribute1"]], "function1() (in module neural_compressor.template.api_doc_example)": [[380, "neural_compressor.template.api_doc_example.function1"]], "function2() (in module neural_compressor.template.api_doc_example)": [[380, "neural_compressor.template.api_doc_example.function2"]], "function3() (in module neural_compressor.template.api_doc_example)": [[380, "neural_compressor.template.api_doc_example.function3"]], "generator1() (in module neural_compressor.template.api_doc_example)": [[380, "neural_compressor.template.api_doc_example.generator1"]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[380, "neural_compressor.template.api_doc_example.module_debug_level1"]], "neural_compressor.template.api_doc_example": [[380, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[381, "module-neural_compressor.template"]], "callbacks (class in neural_compressor.training)": [[382, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[382, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[382, "neural_compressor.training.fit"]], "neural_compressor.training": [[382, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[382, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[383, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[383, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[384, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[385, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[385, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[385, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[385, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[385, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[385, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[385, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[385, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[385, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[385, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[386, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[387, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[387, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[388, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "neural_compressor.utils.load_huggingface": [[388, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[388, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[389, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[389, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[389, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[389, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[389, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[389, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[389, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[389, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[389, "neural_compressor.utils.logger.warning"]], "neural_compressor.utils.neural_insights_utils": [[390, "module-neural_compressor.utils.neural_insights_utils"]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[390, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload"]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[390, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload"]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[390, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[391, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[391, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[392, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[392, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[392, "module-neural_compressor.utils.pytorch"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.Dequantize"]], "dotdict (class in neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.calculate_mse"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.compute_sparsity"]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.dequantize_weight"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[393, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[393, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[394, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[394, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[394, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[395, "module-neural_compressor.version"]]}})