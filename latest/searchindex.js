Search.setIndex({"docnames": ["autoapi/644ec953a7dc_pruning_support/index", "autoapi/6ece06672ed3_v1_14/index", "autoapi/6f0d0f71d92e_v1_13/index", "autoapi/9e89549a08c8_v1_11/index", "autoapi/block_mask/index", "autoapi/env/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/onnx/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/export/utils/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_manager/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_predictor/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_search/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_utils/index", "autoapi/neural_compressor/experimental/nas/dynast/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/modules_supernetwork/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_interface/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_supernetwork/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/pruner/criteria/index", "autoapi/neural_compressor/pruner/index", "autoapi/neural_compressor/pruner/logger/index", "autoapi/neural_compressor/pruner/patterns/index", "autoapi/neural_compressor/pruner/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/pruner/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/pruner/pruner_legacy/index", "autoapi/neural_compressor/pruner/pruner_legacy/magnitude/index", "autoapi/neural_compressor/pruner/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/pruner/pruner_legacy/pruner/index", "autoapi/neural_compressor/pruner/pruners/index", "autoapi/neural_compressor/pruner/pruning/index", "autoapi/neural_compressor/pruner/regs/index", "autoapi/neural_compressor/pruner/schedulers/index", "autoapi/neural_compressor/pruner/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/util/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/index", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index", "autoapi/neural_compressor/ux/components/configuration_wizard/index", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index", "autoapi/neural_compressor/ux/components/db_manager/utils/index", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/factory/index", "autoapi/neural_compressor/ux/components/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index", "autoapi/neural_compressor/ux/components/file_browser/index", "autoapi/neural_compressor/ux/components/graph/attribute/index", "autoapi/neural_compressor/ux/components/graph/collapser/index", "autoapi/neural_compressor/ux/components/graph/edge/index", "autoapi/neural_compressor/ux/components/graph/graph/index", "autoapi/neural_compressor/ux/components/graph/graph_reader/index", "autoapi/neural_compressor/ux/components/graph/index", "autoapi/neural_compressor/ux/components/graph/node/index", "autoapi/neural_compressor/ux/components/graph/reader/index", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index", "autoapi/neural_compressor/ux/components/index", "autoapi/neural_compressor/ux/components/jobs_management/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index", "autoapi/neural_compressor/ux/components/jobs_management/request/index", "autoapi/neural_compressor/ux/components/manage_workspace/index", "autoapi/neural_compressor/ux/components/model/domain/index", "autoapi/neural_compressor/ux/components/model/index", "autoapi/neural_compressor/ux/components/model/model/index", "autoapi/neural_compressor/ux/components/model/model_type_getter/index", "autoapi/neural_compressor/ux/components/model/onnxrt/index", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index", "autoapi/neural_compressor/ux/components/model/pytorch/index", "autoapi/neural_compressor/ux/components/model/pytorch/model/index", "autoapi/neural_compressor/ux/components/model/repository/index", "autoapi/neural_compressor/ux/components/model/shape/index", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index", "autoapi/neural_compressor/ux/components/model/tensorflow/index", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index", "autoapi/neural_compressor/ux/components/model_zoo/index", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index", "autoapi/neural_compressor/ux/components/names_mapper/index", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index", "autoapi/neural_compressor/ux/components/optimization/factory/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/optimization/index", "autoapi/neural_compressor/ux/components/optimization/pruning/index", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index", "autoapi/neural_compressor/ux/components/optimization/tune/index", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index", "autoapi/neural_compressor/ux/components/profiling/factory/index", "autoapi/neural_compressor/ux/components/profiling/index", "autoapi/neural_compressor/ux/components/profiling/profile_model/index", "autoapi/neural_compressor/ux/components/profiling/profiler/index", "autoapi/neural_compressor/ux/components/profiling/profiling/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index", "autoapi/neural_compressor/ux/inc_bench/index", "autoapi/neural_compressor/ux/index", "autoapi/neural_compressor/ux/utils/consts/index", "autoapi/neural_compressor/ux/utils/environment/index", "autoapi/neural_compressor/ux/utils/exceptions/index", "autoapi/neural_compressor/ux/utils/executor/index", "autoapi/neural_compressor/ux/utils/expiring_dict/index", "autoapi/neural_compressor/ux/utils/github_info/index", "autoapi/neural_compressor/ux/utils/hw_info/index", "autoapi/neural_compressor/ux/utils/index", "autoapi/neural_compressor/ux/utils/json_serializer/index", "autoapi/neural_compressor/ux/utils/logger/index", "autoapi/neural_compressor/ux/utils/parser/index", "autoapi/neural_compressor/ux/utils/proc/index", "autoapi/neural_compressor/ux/utils/processes/index", "autoapi/neural_compressor/ux/utils/singleton/index", "autoapi/neural_compressor/ux/utils/status_updates/index", "autoapi/neural_compressor/ux/utils/templates/index", "autoapi/neural_compressor/ux/utils/templates/metric/index", "autoapi/neural_compressor/ux/utils/templates/workdir/index", "autoapi/neural_compressor/ux/utils/utils/index", "autoapi/neural_compressor/ux/utils/workload/config/index", "autoapi/neural_compressor/ux/utils/workload/dataloader/index", "autoapi/neural_compressor/ux/utils/workload/evaluation/index", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index", "autoapi/neural_compressor/ux/utils/workload/index", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index", "autoapi/neural_compressor/ux/utils/workload/model/index", "autoapi/neural_compressor/ux/utils/workload/pruning/index", "autoapi/neural_compressor/ux/utils/workload/quantization/index", "autoapi/neural_compressor/ux/utils/workload/tuning/index", "autoapi/neural_compressor/ux/utils/yaml_utils/index", "autoapi/neural_compressor/ux/web/communication/index", "autoapi/neural_compressor/ux/web/configuration/index", "autoapi/neural_compressor/ux/web/exceptions/index", "autoapi/neural_compressor/ux/web/index", "autoapi/neural_compressor/ux/web/router/index", "autoapi/neural_compressor/ux/web/server/index", "autoapi/neural_compressor/ux/web/service/benchmark/index", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index", "autoapi/neural_compressor/ux/web/service/index", "autoapi/neural_compressor/ux/web/service/model/index", "autoapi/neural_compressor/ux/web/service/optimization/index", "autoapi/neural_compressor/ux/web/service/profiling/index", "autoapi/neural_compressor/ux/web/service/request_data_processor/index", "autoapi/neural_compressor/ux/web/service/response_generator/index", "autoapi/neural_compressor/ux/web/service/workload/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/adaptor/torch_utils/bf16_convert", "docs/source/api-doc/adaptor/torch_utils/hawq_metric", "docs/source/api-doc/adaptor/torch_utils/onnx", "docs/source/api-doc/adaptor/torch_utils/symbolic_trace", "docs/source/api-doc/adaptor/torch_utils/util", "docs/source/api-doc/algorithm", "docs/source/api-doc/apis", "docs/source/api-doc/basic_api", "docs/source/api-doc/basic_api/benchmark", "docs/source/api-doc/basic_api/config", "docs/source/api-doc/basic_api/mix_precision", "docs/source/api-doc/basic_api/objective", "docs/source/api-doc/basic_api/quantization", "docs/source/api-doc/basic_api/training", "docs/source/api-doc/common", "docs/source/api-doc/common/benchmark", "docs/source/api-doc/common/bleu", "docs/source/api-doc/common/criterion", "docs/source/api-doc/common/data", "docs/source/api-doc/common/data/dataloader", "docs/source/api-doc/common/data/datasets", "docs/source/api-doc/common/data/transforms", "docs/source/api-doc/common/metric", "docs/source/api-doc/common/model", "docs/source/api-doc/common/optimizer", "docs/source/api-doc/component", "docs/source/api-doc/component/Distillation", "docs/source/api-doc/component/MixedPrecision", "docs/source/api-doc/component/ModelConversion", "docs/source/api-doc/component/Nas", "docs/source/api-doc/component/Pruning", "docs/source/api-doc/component/Quantization", "docs/source/api-doc/component/Scheduler", "docs/source/api-doc/contrib", "docs/source/api-doc/model", "docs/source/api-doc/pythonic", "docs/source/api-doc/strategy", "docs/source/api-doc/strategy/strategy", "docs/source/api-doc/utils", "docs/source/bench", "docs/source/benchmark", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/metric", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/objective", "docs/source/orchestration", "docs/source/platform_configuration", "docs/source/pruning", "docs/source/pruning_details", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_mixed_precision", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/644ec953a7dc_pruning_support/index.rst", "autoapi/6ece06672ed3_v1_14/index.rst", "autoapi/6f0d0f71d92e_v1_13/index.rst", "autoapi/9e89549a08c8_v1_11/index.rst", "autoapi/block_mask/index.rst", "autoapi/env/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/onnx/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/export/utils/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_manager/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_predictor/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_search/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/modules_supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_interface/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/pruner/criteria/index.rst", "autoapi/neural_compressor/pruner/index.rst", "autoapi/neural_compressor/pruner/logger/index.rst", "autoapi/neural_compressor/pruner/patterns/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/pruner/pruners/index.rst", "autoapi/neural_compressor/pruner/pruning/index.rst", "autoapi/neural_compressor/pruner/regs/index.rst", "autoapi/neural_compressor/pruner/schedulers/index.rst", "autoapi/neural_compressor/pruner/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/util/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index.rst", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/index.rst", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index.rst", "autoapi/neural_compressor/ux/components/db_manager/utils/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/factory/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index.rst", "autoapi/neural_compressor/ux/components/file_browser/index.rst", "autoapi/neural_compressor/ux/components/graph/attribute/index.rst", "autoapi/neural_compressor/ux/components/graph/collapser/index.rst", "autoapi/neural_compressor/ux/components/graph/edge/index.rst", "autoapi/neural_compressor/ux/components/graph/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/graph_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/node/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index.rst", "autoapi/neural_compressor/ux/components/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/request/index.rst", "autoapi/neural_compressor/ux/components/manage_workspace/index.rst", "autoapi/neural_compressor/ux/components/model/domain/index.rst", "autoapi/neural_compressor/ux/components/model/index.rst", "autoapi/neural_compressor/ux/components/model/model/index.rst", "autoapi/neural_compressor/ux/components/model/model_type_getter/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/model/index.rst", "autoapi/neural_compressor/ux/components/model/repository/index.rst", "autoapi/neural_compressor/ux/components/model/shape/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/factory/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/profile_model/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/ux/inc_bench/index.rst", "autoapi/neural_compressor/ux/index.rst", "autoapi/neural_compressor/ux/utils/consts/index.rst", "autoapi/neural_compressor/ux/utils/environment/index.rst", "autoapi/neural_compressor/ux/utils/exceptions/index.rst", "autoapi/neural_compressor/ux/utils/executor/index.rst", "autoapi/neural_compressor/ux/utils/expiring_dict/index.rst", "autoapi/neural_compressor/ux/utils/github_info/index.rst", "autoapi/neural_compressor/ux/utils/hw_info/index.rst", "autoapi/neural_compressor/ux/utils/index.rst", "autoapi/neural_compressor/ux/utils/json_serializer/index.rst", "autoapi/neural_compressor/ux/utils/logger/index.rst", "autoapi/neural_compressor/ux/utils/parser/index.rst", "autoapi/neural_compressor/ux/utils/proc/index.rst", "autoapi/neural_compressor/ux/utils/processes/index.rst", "autoapi/neural_compressor/ux/utils/singleton/index.rst", "autoapi/neural_compressor/ux/utils/status_updates/index.rst", "autoapi/neural_compressor/ux/utils/templates/index.rst", "autoapi/neural_compressor/ux/utils/templates/metric/index.rst", "autoapi/neural_compressor/ux/utils/templates/workdir/index.rst", "autoapi/neural_compressor/ux/utils/utils/index.rst", "autoapi/neural_compressor/ux/utils/workload/config/index.rst", "autoapi/neural_compressor/ux/utils/workload/dataloader/index.rst", "autoapi/neural_compressor/ux/utils/workload/evaluation/index.rst", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index.rst", "autoapi/neural_compressor/ux/utils/workload/index.rst", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index.rst", "autoapi/neural_compressor/ux/utils/workload/model/index.rst", "autoapi/neural_compressor/ux/utils/workload/pruning/index.rst", "autoapi/neural_compressor/ux/utils/workload/quantization/index.rst", "autoapi/neural_compressor/ux/utils/workload/tuning/index.rst", "autoapi/neural_compressor/ux/utils/yaml_utils/index.rst", "autoapi/neural_compressor/ux/web/communication/index.rst", "autoapi/neural_compressor/ux/web/configuration/index.rst", "autoapi/neural_compressor/ux/web/exceptions/index.rst", "autoapi/neural_compressor/ux/web/index.rst", "autoapi/neural_compressor/ux/web/router/index.rst", "autoapi/neural_compressor/ux/web/server/index.rst", "autoapi/neural_compressor/ux/web/service/benchmark/index.rst", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index.rst", "autoapi/neural_compressor/ux/web/service/index.rst", "autoapi/neural_compressor/ux/web/service/model/index.rst", "autoapi/neural_compressor/ux/web/service/optimization/index.rst", "autoapi/neural_compressor/ux/web/service/profiling/index.rst", "autoapi/neural_compressor/ux/web/service/request_data_processor/index.rst", "autoapi/neural_compressor/ux/web/service/response_generator/index.rst", "autoapi/neural_compressor/ux/web/service/workload/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/adaptor/torch_utils/bf16_convert.rst", "docs/source/api-doc/adaptor/torch_utils/hawq_metric.rst", "docs/source/api-doc/adaptor/torch_utils/onnx.rst", "docs/source/api-doc/adaptor/torch_utils/symbolic_trace.rst", "docs/source/api-doc/adaptor/torch_utils/util.rst", "docs/source/api-doc/algorithm.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/basic_api.rst", "docs/source/api-doc/basic_api/benchmark.rst", "docs/source/api-doc/basic_api/config.rst", "docs/source/api-doc/basic_api/mix_precision.rst", "docs/source/api-doc/basic_api/objective.rst", "docs/source/api-doc/basic_api/quantization.rst", "docs/source/api-doc/basic_api/training.rst", "docs/source/api-doc/common.rst", "docs/source/api-doc/common/benchmark.rst", "docs/source/api-doc/common/bleu.rst", "docs/source/api-doc/common/criterion.rst", "docs/source/api-doc/common/data.rst", "docs/source/api-doc/common/data/dataloader.rst", "docs/source/api-doc/common/data/datasets.rst", "docs/source/api-doc/common/data/transforms.rst", "docs/source/api-doc/common/metric.rst", "docs/source/api-doc/common/model.rst", "docs/source/api-doc/common/optimizer.rst", "docs/source/api-doc/component.rst", "docs/source/api-doc/component/Distillation.rst", "docs/source/api-doc/component/MixedPrecision.rst", "docs/source/api-doc/component/ModelConversion.rst", "docs/source/api-doc/component/Nas.rst", "docs/source/api-doc/component/Pruning.rst", "docs/source/api-doc/component/Quantization.rst", "docs/source/api-doc/component/Scheduler.rst", "docs/source/api-doc/contrib.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/pythonic.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/strategy/strategy.rst", "docs/source/api-doc/utils.rst", "docs/source/bench.md", "docs/source/benchmark.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/metric.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/platform_configuration.md", "docs/source/pruning.md", "docs/source/pruning_details.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_mixed_precision.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">644ec953a7dc_pruning_support</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6ece06672ed3_v1_14</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6f0d0f71d92e_v1_13</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">9e89549a08c8_v1_11</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">env</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_predictor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_search</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.execute_benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.benchmark_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.graph_optimization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.mixed_precision_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.profiling_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.pruning_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.quantization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.configuration_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_boundary_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.params_feeder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.pruning_config_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain_flavour</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.framework</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.project</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.pruning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.examples_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.model_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.project_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.params_interfaces</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.attribute</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.collapser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.edge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.onnxrt_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.tensorflow_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_control_queue</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.request</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.manage_workspace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model_type_getter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.repository</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.shape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.frozen_pb</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.meta_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.saved_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.list_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.execute_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tune_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.execute_profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profile_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.inc_bench</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.consts</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.environment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.executor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.expiring_dict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.github_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.hw_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.json_serializer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.proc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.processes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.singleton</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.status_updates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.workdir</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.evaluation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.yaml_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.communication</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.router</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.server</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.history_snapshot_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.request_data_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.response_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "Adaptor", "ONNX Runtime", "Torch Utils", "Bf16 Convert", "Hawq Metric", "Onnx", "Symbolic Trace", "Util", "Algorithm", "APIs", "User facing APIs", "Benchmark", "Config", "Mix Precision", "Objective", "Quantization", "Training", "Common", "Benchmark", "BLEU", "Criterion", "Data", "Dataloader", "Datasets", "Transforms", "Metric", "Model", "Optimizer", "Component(experiemental API, deprecated in 2.0)", "Distillation", "MixedPrecision", "ModelConversion", "Neural architecture search (NAS)", "Pruning", "Quantization", "Scheduler", "Contrib", "Model", "Pythonic", "Strategy", "Strategies", "Utils", "Intel\u00ae Neural Compressor Bench", "Benchmarking", "DataLoader", "Dataset", "Design", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Objective", "Optimization Orchestration", "SYSTEM CONFIGURATION", "Pruning", "Pruning details", "Full Publications/Events (56)", "Pythonic Style Access for Configurations", "Quantization", "Turn ON Auto Mixed Precision during Quantization", "Release", "SigOpt Strategy", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"pruning_support": 0, "revis": [0, 1, 2, 3, 328], "id": [0, 1, 2, 3, 183, 185, 219, 228, 230, 231, 232, 233, 270, 272, 273, 274, 275, 315, 328, 352, 353, 355, 356, 357, 359, 362, 363, 364, 365, 366, 368, 369, 371, 372, 400, 401, 404, 472, 542, 582, 614, 617], "644ec953a7dc": 0, "6ece06672ed3": [0, 1], "creat": [0, 1, 2, 3, 5, 13, 41, 99, 111, 128, 157, 167, 169, 187, 188, 195, 205, 207, 221, 227, 231, 239, 240, 250, 251, 252, 268, 273, 307, 315, 317, 319, 320, 325, 351, 368, 378, 379, 383, 384, 465, 486, 499, 512, 516, 519, 522, 568, 584, 595, 597, 599, 600, 603, 611, 614, 615, 617], "date": [0, 1, 2, 3, 305, 456], "2022": [0, 1, 2, 3, 521, 581], "12": [0, 565, 577, 580, 620], "09": [0, 620], "17": [0, 620], "22": [0, 3, 477, 480, 620], "310141": 0, "v1": [1, 2, 3, 41, 134, 178, 179, 180, 181, 217, 232, 233, 235, 274, 275, 276, 277, 286, 572, 577, 582, 584, 613, 614, 620], "14": [1, 2, 152, 222, 224, 287, 574, 620], "6f0d0f71d92e": [1, 2], "08": [1, 184, 220, 616, 620], "31": [1, 620], "07": [1, 2, 619, 620], "16": [1, 567, 568, 607, 620], "24": [1, 617, 620], "229939": 1, "update_dataload": 1, "db_session": [1, 352, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 378, 379, 381, 383, 386], "sqlalchemi": [1, 351, 352, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 378, 379, 381, 383, 384, 386, 575, 580], "orm": [1, 352, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 378, 379, 381, 383, 386], "session": [1, 134, 166, 204, 286, 351, 352, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 378, 379, 381, 383, 384, 386, 615, 617], "updat": [1, 42, 56, 68, 99, 104, 111, 147, 224, 228, 234, 235, 243, 262, 264, 269, 270, 276, 277, 285, 286, 287, 289, 292, 293, 294, 296, 297, 298, 299, 302, 303, 315, 335, 352, 353, 354, 355, 363, 366, 368, 369, 371, 373, 379, 381, 382, 383, 386, 456, 479, 483, 488, 491, 493, 497, 542, 565, 574, 582, 588, 593, 596, 606, 607, 608, 617], "dataload": [1, 6, 8, 11, 13, 14, 15, 39, 41, 136, 138, 139, 141, 142, 144, 147, 155, 156, 167, 178, 185, 188, 194, 205, 216, 221, 227, 237, 254, 259, 264, 267, 268, 269, 287, 298, 304, 322, 325, 333, 338, 345, 349, 360, 374, 377, 379, 384, 386, 408, 449, 462, 465, 468, 476, 487, 488, 492, 518, 521, 522, 544, 565, 570, 571, 572, 577, 578, 582, 583, 605, 611, 612, 615, 616, 619], "exist": [1, 47, 128, 149, 185, 186, 231, 251, 273, 286, 317, 319, 328, 353, 373, 379, 381, 382, 419, 470, 486, 487, 582, 589, 607, 617], "databas": [1, 169, 173, 178, 207, 351, 352, 353, 354, 355, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 379, 380, 381, 382, 383, 384, 456, 470, 486], "update_transform": 1, "transform": [1, 14, 38, 44, 56, 61, 62, 83, 84, 86, 120, 121, 125, 129, 130, 131, 132, 133, 139, 147, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 205, 206, 207, 208, 209, 210, 212, 214, 215, 216, 227, 246, 248, 249, 269, 345, 349, 355, 360, 374, 377, 379, 384, 386, 408, 487, 488, 489, 490, 495, 518, 519, 544, 567, 568, 570, 571, 572, 573, 577, 585, 590, 591, 592, 593, 609, 612, 615, 619, 620], "13": [2, 3, 304, 565, 580], "9e89549a08c8": [2, 3], "29": [2, 620], "41": [2, 620], "291905": 2, "11": [3, 477, 565, 580, 582, 583], "03": [3, 477, 620], "34": [3, 620], "52": [3, 620], "916541": 3, "block": [4, 61, 227, 240, 249, 254, 259, 262, 265, 288, 292, 300, 504, 579, 604, 607, 608], "mask": [4, 167, 205, 231, 247, 249, 258, 262, 264, 266, 273, 287, 292, 293, 296, 297, 299, 302, 607, 608, 620], "run_migrations_offlin": 5, "run": [5, 6, 8, 11, 13, 15, 39, 99, 134, 147, 152, 155, 156, 166, 183, 185, 204, 219, 227, 240, 243, 263, 264, 278, 299, 303, 304, 307, 308, 315, 434, 480, 502, 503, 504, 517, 522, 565, 566, 572, 575, 576, 583, 585, 587, 589, 590, 591, 593, 595, 596, 597, 599, 600, 602, 607, 609, 611, 613, 614, 615, 617, 619], "migrat": [5, 470], "offlin": [5, 332, 516, 611], "mode": [5, 6, 8, 11, 14, 19, 37, 38, 39, 41, 99, 139, 176, 185, 214, 227, 231, 273, 286, 299, 315, 317, 319, 332, 352, 479, 522, 565, 579, 580, 595, 599, 611, 612, 617], "thi": [5, 8, 37, 39, 41, 50, 56, 61, 62, 75, 80, 96, 99, 104, 111, 121, 128, 129, 133, 136, 141, 146, 147, 155, 156, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 181, 183, 184, 187, 188, 193, 194, 204, 205, 206, 207, 208, 209, 210, 212, 219, 220, 227, 228, 231, 232, 233, 235, 240, 245, 246, 253, 254, 259, 262, 264, 265, 266, 267, 268, 269, 270, 273, 274, 275, 276, 277, 278, 288, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 304, 307, 312, 331, 332, 516, 517, 518, 519, 522, 542, 565, 567, 568, 570, 571, 572, 576, 579, 581, 582, 583, 584, 585, 587, 588, 590, 591, 593, 595, 597, 599, 600, 601, 602, 603, 607, 608, 611, 612, 613, 614, 615, 616, 617], "configur": [5, 6, 8, 11, 13, 14, 39, 40, 41, 99, 107, 135, 141, 147, 148, 152, 155, 156, 158, 161, 169, 172, 178, 185, 190, 207, 210, 221, 222, 224, 226, 227, 231, 237, 238, 239, 240, 242, 250, 251, 254, 259, 263, 265, 267, 268, 269, 273, 278, 287, 288, 292, 300, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 320, 322, 324, 325, 328, 330, 331, 333, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 352, 363, 374, 376, 379, 438, 440, 445, 449, 452, 455, 468, 470, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 502, 504, 518, 519, 522, 565, 568, 582, 589, 603, 604, 607, 613, 616, 617, 620], "context": [5, 13, 332, 610], "just": [5, 91, 157, 178, 181, 182, 184, 187, 188, 189, 190, 192, 195, 220, 288, 519, 592, 596, 602, 605, 611, 616, 617], "url": [5, 169, 207, 433, 500, 581], "an": [5, 13, 14, 37, 39, 56, 61, 62, 64, 104, 128, 129, 136, 141, 146, 147, 160, 165, 169, 173, 178, 181, 184, 188, 193, 194, 198, 203, 207, 211, 216, 220, 227, 228, 231, 232, 233, 240, 247, 250, 251, 252, 268, 269, 270, 273, 274, 275, 278, 285, 292, 299, 302, 307, 396, 401, 477, 514, 516, 518, 519, 521, 522, 542, 567, 568, 569, 574, 582, 583, 585, 589, 590, 593, 602, 604, 608, 609, 614, 615, 616, 617], "engin": [5, 242, 351, 363, 384], "though": [5, 249], "i": [5, 6, 8, 11, 13, 14, 15, 38, 39, 41, 42, 43, 47, 48, 51, 54, 56, 58, 61, 62, 64, 75, 76, 79, 85, 86, 87, 96, 98, 99, 104, 111, 121, 128, 129, 130, 134, 136, 140, 141, 146, 147, 152, 155, 156, 157, 158, 161, 165, 166, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 180, 181, 184, 185, 187, 188, 191, 193, 194, 195, 203, 204, 205, 206, 207, 208, 209, 212, 214, 215, 216, 217, 220, 227, 228, 231, 233, 234, 235, 237, 240, 243, 247, 249, 252, 254, 259, 263, 264, 265, 268, 269, 270, 273, 275, 276, 277, 278, 285, 288, 289, 292, 293, 299, 300, 301, 303, 304, 307, 308, 313, 314, 315, 322, 331, 332, 351, 384, 396, 416, 419, 421, 422, 424, 426, 427, 428, 429, 435, 473, 475, 477, 479, 480, 485, 487, 489, 495, 500, 502, 516, 517, 518, 519, 522, 523, 525, 531, 532, 533, 540, 542, 544, 551, 559, 560, 561, 562, 564, 565, 566, 567, 568, 570, 571, 572, 574, 576, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 591, 593, 595, 596, 597, 599, 600, 602, 603, 604, 605, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 619], "accept": [5, 288, 516, 565, 566], "here": [5, 62, 64, 111, 231, 238, 249, 250, 273, 565, 568, 572, 573, 574, 576, 577, 582, 590, 597, 600, 602, 607, 611, 613, 614, 617], "well": [5, 155, 156, 278, 304, 519, 521, 568, 611, 613, 619], "By": [5, 228, 270, 542, 582, 584, 595, 596, 599, 617], "skip": [5, 61, 288, 615, 617], "creation": [5, 348], "we": [5, 38, 61, 62, 64, 68, 80, 99, 128, 129, 139, 145, 146, 166, 185, 187, 188, 204, 228, 231, 238, 249, 250, 270, 273, 309, 310, 328, 516, 518, 522, 542, 567, 572, 574, 576, 582, 589, 590, 593, 597, 600, 602, 603, 604, 605, 607, 608, 610, 611, 614, 615, 617], "don": [5, 129, 146, 292, 477, 518, 565, 617], "t": [5, 61, 62, 64, 99, 128, 129, 146, 178, 181, 184, 187, 188, 220, 233, 242, 243, 247, 268, 275, 292, 477, 486, 518, 522, 565, 570, 572, 583, 603, 617, 619], "even": [5, 56, 565, 607], "need": [5, 6, 8, 11, 13, 14, 38, 39, 56, 75, 80, 98, 99, 121, 128, 139, 147, 155, 156, 157, 165, 166, 169, 173, 176, 177, 178, 181, 184, 187, 188, 189, 190, 195, 203, 204, 207, 214, 215, 216, 220, 221, 227, 234, 235, 240, 247, 249, 254, 259, 268, 276, 277, 278, 284, 285, 288, 292, 304, 308, 312, 315, 331, 332, 506, 518, 522, 565, 567, 568, 570, 572, 579, 583, 585, 587, 588, 591, 595, 596, 597, 599, 600, 602, 603, 607, 610, 611, 612, 613, 616, 617, 619], "dbapi": 5, "avail": [5, 152, 282, 349, 354, 356, 357, 361, 364, 365, 370, 435, 523, 525, 531, 532, 533, 540, 544, 551, 559, 560, 561, 562, 564, 565, 573, 577, 579, 595, 599, 606, 608, 617], "call": [5, 13, 111, 139, 142, 144, 194, 227, 231, 242, 243, 254, 259, 262, 264, 265, 273, 293, 297, 298, 299, 322, 351, 384, 472, 480, 481, 518, 519, 522, 565, 567, 578, 591, 593, 603, 607, 611, 615, 616], "execut": [5, 8, 11, 14, 39, 41, 44, 46, 47, 49, 63, 67, 73, 76, 78, 82, 97, 132, 194, 221, 227, 238, 239, 250, 254, 259, 264, 267, 268, 299, 304, 306, 325, 331, 332, 333, 334, 335, 352, 363, 366, 373, 379, 381, 382, 438, 440, 442, 445, 446, 449, 450, 451, 452, 454, 455, 457, 462, 465, 469, 472, 480, 481, 503, 565, 570, 571, 583, 587, 588, 595, 596, 599, 602, 603, 605, 607, 608, 611, 614, 617, 620], "emit": 5, "given": [5, 13, 14, 15, 37, 41, 61, 62, 64, 104, 105, 134, 141, 152, 178, 181, 183, 184, 219, 220, 231, 273, 285, 286, 287, 292, 299, 304, 315, 328, 396, 402, 416, 419, 421, 422, 424, 426, 427, 429, 473, 487, 500, 519, 607, 608, 616], "string": [5, 6, 8, 37, 38, 39, 40, 41, 50, 57, 73, 99, 104, 105, 128, 130, 134, 147, 148, 167, 169, 186, 191, 205, 207, 221, 224, 226, 227, 228, 231, 237, 238, 239, 242, 250, 251, 252, 254, 259, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 278, 282, 286, 287, 292, 299, 300, 301, 302, 303, 304, 317, 319, 325, 332, 345, 465, 487, 511, 582, 616], "script": [5, 228, 229, 232, 233, 270, 271, 274, 275, 334, 335, 421, 438, 440, 442, 445, 446, 448, 449, 451, 452, 454, 455, 460, 572, 579, 585, 589, 592, 593, 596, 609], "output": [5, 15, 37, 38, 39, 41, 47, 51, 53, 54, 62, 64, 68, 79, 85, 87, 92, 98, 99, 102, 111, 128, 134, 141, 147, 149, 152, 155, 156, 183, 186, 188, 189, 193, 219, 221, 222, 224, 226, 227, 228, 231, 235, 240, 241, 249, 262, 269, 270, 273, 276, 277, 278, 285, 286, 287, 292, 299, 304, 322, 323, 326, 328, 329, 332, 352, 363, 366, 373, 379, 381, 382, 416, 426, 427, 428, 442, 446, 449, 472, 480, 488, 494, 518, 522, 542, 565, 570, 571, 572, 574, 576, 578, 582, 584, 593, 602, 603, 605, 607, 610, 611, 615, 616, 617, 619], "run_migrations_onlin": 5, "onlin": [5, 516, 521, 614], "In": [5, 50, 61, 62, 104, 166, 194, 204, 227, 231, 249, 262, 264, 273, 288, 292, 299, 301, 313, 516, 518, 519, 521, 522, 565, 567, 568, 570, 571, 572, 582, 592, 595, 596, 599, 604, 605, 607, 608, 611, 612, 614, 615, 616, 617], "scenario": [5, 349, 522, 565, 566, 570, 607, 608], "associ": [5, 231, 273, 374, 375], "connect": [5, 264, 289, 363, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 565, 602, 606, 607, 608, 614], "adaptor_registri": [6, 522], "cl": [6, 39, 142, 144, 147, 169, 173, 176, 177, 178, 181, 184, 186, 191, 207, 211, 214, 215, 216, 218, 220, 252, 257, 262, 264, 266, 269, 288, 292, 298, 299, 301, 302, 315, 332], "The": [6, 8, 11, 14, 15, 32, 38, 39, 41, 47, 62, 64, 68, 73, 85, 86, 87, 99, 102, 104, 108, 110, 134, 136, 139, 141, 142, 144, 147, 148, 149, 155, 156, 157, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 181, 184, 186, 188, 189, 191, 194, 195, 205, 206, 207, 208, 209, 211, 213, 214, 215, 216, 218, 220, 221, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 249, 250, 251, 252, 253, 254, 257, 259, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 285, 286, 288, 289, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 319, 320, 321, 322, 323, 325, 326, 327, 328, 331, 332, 352, 353, 355, 358, 362, 363, 366, 367, 369, 371, 372, 379, 384, 387, 389, 390, 391, 392, 393, 394, 395, 408, 415, 416, 468, 516, 518, 519, 522, 523, 525, 531, 532, 533, 540, 542, 544, 551, 559, 560, 561, 562, 564, 565, 566, 567, 568, 570, 572, 574, 576, 578, 579, 580, 582, 583, 584, 587, 588, 590, 593, 595, 596, 597, 599, 600, 602, 603, 604, 605, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 619], "decor": [6, 32, 61, 62, 64, 134, 142, 144, 178, 181, 184, 191, 216, 218, 220, 234, 235, 252, 257, 262, 264, 266, 276, 277, 288, 292, 298, 299, 302, 315, 332, 482, 518, 519, 522, 617], "us": [6, 8, 11, 13, 14, 32, 38, 39, 41, 42, 43, 61, 62, 64, 102, 104, 105, 111, 136, 141, 147, 149, 155, 156, 165, 166, 167, 168, 169, 170, 171, 173, 174, 178, 181, 183, 184, 185, 186, 191, 203, 204, 205, 206, 207, 208, 209, 212, 216, 218, 219, 220, 221, 222, 224, 226, 227, 228, 229, 231, 235, 236, 237, 238, 241, 243, 249, 250, 252, 254, 257, 259, 262, 264, 265, 266, 267, 268, 270, 271, 273, 277, 288, 289, 292, 298, 299, 302, 307, 309, 310, 312, 313, 314, 315, 319, 323, 324, 325, 326, 327, 328, 332, 379, 384, 389, 390, 394, 396, 408, 415, 417, 442, 446, 470, 487, 489, 499, 500, 516, 517, 518, 519, 522, 542, 565, 566, 567, 568, 570, 571, 572, 574, 576, 578, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 593, 595, 597, 599, 600, 602, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620], "regist": [6, 32, 121, 142, 144, 169, 173, 176, 177, 178, 181, 184, 186, 191, 194, 207, 211, 214, 215, 216, 218, 220, 221, 227, 234, 235, 252, 253, 254, 255, 256, 257, 259, 262, 264, 266, 276, 277, 284, 287, 288, 289, 292, 298, 299, 301, 302, 307, 315, 519, 522, 568, 572, 582, 603, 604, 617], "all": [6, 8, 13, 15, 32, 39, 41, 54, 57, 79, 91, 111, 120, 125, 142, 144, 157, 158, 161, 165, 169, 173, 176, 177, 178, 181, 184, 185, 186, 191, 194, 195, 203, 207, 211, 214, 215, 216, 218, 220, 224, 227, 228, 231, 233, 234, 235, 245, 246, 247, 249, 252, 254, 255, 256, 257, 258, 259, 262, 265, 268, 270, 273, 275, 276, 277, 279, 280, 285, 288, 292, 298, 299, 300, 305, 306, 307, 308, 309, 315, 317, 318, 319, 332, 336, 348, 351, 360, 377, 379, 384, 389, 390, 403, 405, 408, 409, 415, 416, 419, 421, 428, 434, 441, 443, 447, 448, 450, 453, 459, 464, 468, 477, 481, 504, 516, 521, 522, 565, 567, 568, 572, 576, 580, 585, 593, 596, 597, 600, 601, 602, 603, 605, 606, 607, 608, 609, 611, 612, 616, 617], "subclass": [6, 32, 142, 144, 162, 166, 169, 173, 176, 177, 178, 181, 184, 191, 200, 204, 207, 211, 214, 215, 216, 218, 220, 234, 235, 252, 255, 256, 257, 262, 264, 266, 276, 277, 288, 292, 298, 299, 302, 315, 522], "paramet": [6, 8, 11, 13, 14, 15, 37, 38, 39, 41, 50, 51, 54, 55, 56, 57, 61, 62, 64, 68, 73, 79, 80, 83, 84, 99, 102, 104, 105, 111, 121, 128, 130, 134, 135, 136, 140, 141, 142, 144, 147, 148, 149, 152, 155, 156, 157, 166, 167, 169, 173, 176, 177, 178, 180, 181, 183, 184, 185, 186, 191, 195, 204, 205, 207, 211, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 249, 250, 251, 252, 253, 254, 257, 259, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 282, 284, 285, 286, 287, 288, 289, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 307, 308, 312, 315, 317, 319, 320, 321, 322, 325, 326, 328, 329, 331, 332, 345, 349, 354, 355, 374, 375, 376, 379, 385, 387, 396, 422, 440, 445, 449, 452, 455, 467, 472, 477, 479, 480, 486, 487, 489, 499, 500, 518, 542, 565, 567, 568, 570, 572, 579, 582, 596, 602, 603, 607, 608, 611, 614, 616, 617, 619], "framework_specific_info": [6, 8, 11, 14, 39, 41, 522], "base": [6, 8, 11, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 102, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 132, 133, 135, 136, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 225, 227, 228, 231, 234, 235, 236, 238, 239, 240, 242, 243, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 262, 264, 266, 267, 268, 269, 270, 273, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 296, 297, 298, 299, 301, 302, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 321, 323, 326, 327, 328, 329, 332, 337, 338, 339, 341, 342, 343, 344, 347, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 391, 392, 393, 395, 398, 400, 401, 404, 414, 416, 419, 421, 423, 424, 426, 427, 428, 429, 437, 440, 445, 449, 452, 455, 465, 469, 471, 473, 475, 479, 480, 481, 482, 485, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 500, 501, 503, 505, 509, 510, 519, 521, 522, 542, 568, 571, 572, 576, 590, 591, 593, 602, 606, 608, 614, 615, 617, 620], "object": [6, 8, 11, 13, 14, 32, 38, 39, 41, 51, 54, 55, 56, 57, 68, 73, 79, 80, 85, 86, 87, 88, 99, 102, 105, 121, 128, 130, 135, 136, 140, 141, 142, 144, 147, 148, 149, 152, 155, 156, 157, 158, 160, 161, 165, 167, 168, 169, 173, 176, 177, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 198, 203, 205, 206, 207, 211, 214, 215, 216, 218, 219, 220, 221, 224, 226, 227, 228, 231, 234, 235, 236, 239, 240, 242, 250, 251, 253, 254, 255, 256, 257, 259, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 276, 277, 278, 280, 282, 284, 285, 286, 287, 289, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 307, 315, 323, 325, 326, 327, 329, 331, 332, 349, 364, 365, 368, 371, 412, 477, 480, 487, 497, 499, 500, 504, 518, 519, 533, 542, 565, 566, 567, 568, 575, 582, 584, 605, 607, 608, 610, 611, 616, 617], "framework": [6, 8, 11, 13, 14, 39, 147, 153, 154, 158, 159, 161, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 181, 184, 186, 187, 188, 191, 196, 197, 199, 201, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 220, 226, 227, 234, 235, 236, 243, 267, 268, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 313, 315, 317, 319, 325, 334, 349, 360, 377, 379, 384, 386, 388, 408, 416, 419, 421, 422, 428, 435, 437, 442, 446, 451, 454, 458, 469, 475, 487, 488, 521, 522, 565, 572, 573, 577, 578, 579, 580, 582, 583, 607, 609, 611, 615, 616, 617, 619], "layer": [6, 8, 11, 14, 38, 39, 40, 41, 62, 64, 104, 105, 106, 107, 108, 110, 111, 139, 145, 152, 186, 193, 227, 249, 254, 259, 262, 263, 265, 292, 300, 303, 323, 325, 326, 332, 499, 522, 571, 579, 607, 608, 613], "abstract": [6, 11, 13, 40, 80, 102, 111, 184, 186, 220, 221, 226, 227, 234, 235, 251, 253, 257, 262, 266, 267, 276, 277, 279, 280, 281, 288, 292, 298, 302, 315, 338, 350, 416, 427, 428, 449, 461, 479, 503, 522, 578], "quantiz": [6, 7, 8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 82, 86, 88, 90, 93, 96, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 133, 135, 136, 138, 139, 141, 142, 144, 145, 147, 152, 155, 156, 180, 187, 188, 194, 217, 222, 224, 225, 226, 227, 237, 268, 269, 278, 287, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 319, 322, 323, 326, 327, 328, 331, 332, 344, 349, 379, 381, 387, 468, 476, 488, 492, 522, 533, 551, 565, 567, 568, 572, 573, 574, 576, 578, 579, 582, 583, 584, 585, 590, 592, 593, 596, 605, 609, 613, 615, 616, 617, 619], "tune_cfg": [6, 8, 11, 13, 14, 39, 41, 134, 135, 141, 156, 308, 522, 617], "model": [6, 8, 11, 13, 14, 15, 28, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 105, 107, 128, 134, 135, 136, 139, 140, 141, 142, 144, 145, 147, 152, 155, 156, 163, 166, 167, 169, 178, 181, 184, 185, 186, 188, 189, 194, 201, 204, 205, 207, 220, 221, 222, 223, 224, 225, 226, 227, 235, 236, 237, 238, 239, 241, 243, 248, 249, 250, 251, 253, 254, 259, 262, 263, 264, 265, 266, 267, 268, 269, 276, 277, 278, 288, 292, 293, 294, 296, 297, 298, 299, 300, 302, 303, 304, 307, 308, 310, 312, 313, 314, 315, 317, 319, 322, 328, 331, 332, 334, 335, 336, 338, 349, 352, 360, 363, 366, 368, 376, 377, 378, 379, 380, 381, 383, 384, 385, 387, 391, 395, 396, 401, 402, 403, 406, 407, 408, 432, 433, 435, 438, 441, 442, 443, 444, 446, 447, 448, 449, 453, 454, 459, 461, 464, 465, 468, 469, 476, 485, 487, 492, 502, 503, 507, 514, 518, 519, 521, 522, 532, 540, 566, 567, 568, 570, 571, 572, 573, 578, 579, 581, 582, 583, 585, 590, 592, 593, 596, 602, 604, 605, 606, 607, 608, 609, 611, 613, 614, 615, 616, 617, 619], "q_func": [6, 8, 11, 14, 39, 41, 155, 156, 227, 267, 268, 307, 308, 310, 312, 314, 315, 522, 617], "none": [6, 8, 11, 13, 14, 15, 37, 38, 39, 41, 42, 43, 57, 83, 99, 105, 111, 128, 134, 136, 139, 141, 147, 148, 149, 152, 155, 156, 157, 159, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 178, 180, 181, 184, 185, 186, 187, 188, 194, 195, 197, 202, 203, 205, 206, 207, 208, 209, 210, 212, 217, 220, 221, 222, 224, 226, 227, 228, 231, 234, 235, 236, 237, 238, 240, 242, 243, 247, 249, 250, 251, 254, 258, 259, 263, 264, 267, 268, 269, 270, 273, 276, 277, 278, 283, 285, 286, 287, 288, 298, 303, 304, 307, 308, 310, 312, 314, 315, 317, 319, 322, 323, 325, 326, 331, 332, 333, 334, 335, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 351, 352, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 379, 382, 384, 385, 386, 387, 401, 416, 419, 421, 423, 426, 427, 428, 433, 435, 440, 442, 445, 446, 449, 451, 452, 454, 455, 456, 457, 458, 461, 462, 463, 465, 467, 470, 472, 473, 475, 478, 480, 481, 485, 486, 487, 488, 489, 490, 491, 493, 495, 496, 497, 499, 500, 504, 506, 512, 522, 542, 568, 582, 611, 615, 616, 617], "do": [6, 8, 11, 14, 17, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 39, 42, 43, 71, 73, 96, 166, 167, 204, 205, 221, 222, 224, 227, 228, 231, 265, 268, 270, 273, 288, 300, 308, 331, 516, 542, 565, 568, 572, 576, 579, 580, 582, 597, 600, 607, 612, 613, 617], "calibr": [6, 7, 8, 11, 13, 14, 16, 38, 39, 42, 43, 71, 83, 84, 139, 141, 142, 144, 147, 155, 156, 226, 227, 267, 268, 269, 278, 287, 304, 327, 496, 522, 567, 568, 578, 579, 611, 617, 619], "quanit": [6, 11, 14], "post": [6, 11, 14, 91, 92, 139, 145, 152, 155, 156, 178, 181, 184, 194, 220, 224, 227, 268, 269, 304, 499, 516, 521, 522, 571, 572, 574, 579, 580, 585, 591, 602, 609, 615, 617], "train": [6, 8, 11, 14, 39, 41, 50, 56, 73, 74, 111, 139, 145, 152, 155, 156, 167, 169, 184, 194, 205, 207, 220, 221, 227, 237, 238, 240, 241, 248, 250, 254, 259, 264, 265, 267, 268, 269, 298, 299, 300, 304, 315, 325, 495, 519, 521, 522, 533, 568, 570, 571, 574, 579, 583, 585, 591, 602, 605, 607, 608, 609, 614, 617, 619, 620], "dict": [6, 8, 11, 13, 14, 15, 38, 39, 41, 102, 104, 105, 111, 130, 134, 135, 136, 141, 142, 144, 149, 155, 156, 166, 169, 185, 186, 191, 204, 207, 222, 223, 224, 227, 230, 231, 232, 233, 235, 238, 240, 243, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 262, 263, 264, 265, 266, 272, 273, 274, 275, 277, 278, 279, 280, 285, 286, 287, 289, 292, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 323, 325, 326, 331, 332, 333, 335, 338, 345, 346, 347, 349, 350, 352, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 392, 393, 396, 404, 413, 416, 423, 431, 432, 433, 435, 437, 438, 439, 440, 445, 449, 452, 455, 456, 457, 458, 460, 462, 463, 465, 472, 473, 475, 477, 479, 480, 483, 485, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 499, 500, 503, 504, 506, 508, 510, 511, 513, 518, 582, 607, 610, 615, 617], "chosen": [6, 8, 565], "tune": [6, 8, 11, 13, 14, 39, 41, 147, 152, 155, 156, 167, 169, 205, 207, 226, 227, 267, 269, 278, 288, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 332, 344, 363, 371, 372, 379, 381, 385, 408, 438, 443, 456, 468, 476, 488, 492, 522, 565, 567, 568, 572, 579, 581, 583, 602, 604, 609, 612, 613, 614, 615, 619], "load": [6, 8, 167, 169, 183, 184, 205, 207, 219, 220, 231, 241, 243, 251, 273, 278, 286, 287, 304, 331, 332, 379, 381, 460, 487, 488, 567, 595, 599, 603, 610, 611], "dataset": [6, 8, 11, 14, 39, 41, 141, 147, 155, 156, 157, 159, 160, 164, 165, 166, 178, 187, 188, 195, 197, 198, 202, 203, 204, 216, 226, 227, 231, 232, 233, 235, 237, 243, 267, 268, 269, 273, 274, 275, 276, 277, 278, 304, 325, 352, 360, 363, 366, 374, 379, 383, 384, 385, 396, 408, 485, 487, 488, 489, 519, 521, 522, 544, 567, 572, 577, 582, 590, 607, 608, 611, 613, 617, 619, 620], "option": [6, 8, 11, 14, 15, 39, 41, 99, 128, 147, 152, 155, 156, 157, 167, 178, 181, 184, 186, 195, 205, 220, 222, 224, 227, 231, 237, 242, 243, 249, 262, 268, 269, 273, 278, 286, 287, 292, 304, 317, 319, 322, 326, 328, 332, 477, 568, 576, 580, 596, 614, 616, 617, 619], "awar": [6, 8, 11, 14, 39, 41, 136, 152, 158, 161, 178, 194, 227, 237, 262, 267, 268, 269, 310, 315, 522, 571, 572, 574, 579, 583, 602, 605, 617, 620], "evalu": [6, 8, 11, 14, 39, 41, 147, 155, 156, 167, 185, 194, 205, 221, 226, 227, 228, 231, 232, 233, 234, 235, 237, 238, 239, 242, 243, 250, 251, 254, 259, 264, 265, 268, 269, 270, 273, 274, 275, 276, 277, 278, 288, 292, 299, 300, 304, 315, 325, 337, 339, 341, 343, 344, 345, 468, 476, 488, 492, 519, 522, 542, 567, 568, 570, 571, 578, 579, 582, 583, 585, 591, 593, 596, 602, 604, 607, 611, 614, 615, 617, 619], "postprocess": [6, 8, 11, 14, 39, 41, 147, 178, 181, 184, 185, 188, 216, 218, 220, 226, 227, 237, 249, 267, 268, 269, 325, 490, 495, 522, 615, 616], "metric": [6, 8, 11, 14, 39, 41, 147, 155, 156, 185, 188, 221, 226, 227, 237, 238, 239, 241, 243, 250, 251, 252, 253, 254, 259, 267, 268, 269, 278, 288, 304, 325, 345, 349, 355, 360, 374, 377, 379, 384, 408, 468, 476, 479, 484, 487, 488, 490, 506, 519, 522, 525, 540, 542, 565, 567, 568, 572, 583, 614, 615, 617, 619, 620], "measur": [6, 8, 11, 14, 39, 41, 134, 147, 185, 242, 243, 248, 269, 278, 288, 327, 506, 519, 522, 566, 570, 582, 615, 617], "iter": [6, 8, 11, 13, 14, 15, 39, 41, 134, 142, 144, 147, 152, 155, 156, 160, 165, 169, 170, 173, 178, 187, 188, 198, 203, 207, 208, 211, 216, 251, 264, 266, 278, 286, 299, 302, 304, 325, 352, 480, 488, 518, 519, 522, 566, 568, 607, 608, 610, 615, 617, 619], "1": [6, 8, 11, 14, 37, 38, 39, 41, 42, 48, 61, 68, 73, 83, 98, 102, 104, 132, 134, 139, 141, 143, 145, 146, 147, 152, 157, 159, 164, 166, 167, 168, 170, 171, 173, 174, 175, 177, 178, 180, 181, 184, 185, 186, 187, 188, 195, 197, 202, 204, 205, 206, 208, 209, 212, 213, 217, 220, 226, 227, 231, 232, 233, 235, 240, 243, 247, 249, 254, 259, 262, 264, 267, 268, 269, 273, 274, 275, 276, 277, 287, 288, 292, 299, 304, 305, 325, 335, 457, 465, 516, 518, 521, 522, 567, 568, 570, 574, 576, 577, 580, 582, 583, 586, 588, 604, 605, 606, 607, 608, 610, 611, 613, 614, 615, 616, 617, 619], "tensorboard": [6, 8, 11, 14, 39, 41, 152, 269, 322, 325, 332, 522], "fals": [6, 8, 11, 13, 14, 15, 37, 39, 41, 42, 43, 57, 65, 66, 73, 83, 86, 93, 99, 102, 113, 120, 125, 129, 132, 133, 134, 139, 140, 141, 147, 152, 156, 157, 159, 164, 167, 169, 178, 180, 181, 184, 185, 186, 187, 188, 193, 195, 197, 202, 205, 207, 217, 220, 231, 234, 235, 240, 241, 242, 243, 247, 248, 249, 262, 269, 273, 276, 277, 285, 288, 292, 315, 325, 328, 404, 423, 472, 475, 480, 481, 487, 506, 512, 522, 568, 576, 582, 595, 599, 610, 611, 615, 616, 619], "valid": [6, 8, 11, 40, 41, 48, 53, 61, 62, 99, 128, 169, 173, 178, 207, 231, 243, 263, 264, 273, 286, 292, 299, 303, 435, 504, 517, 519, 521, 522, 568, 570, 573, 576, 579, 581, 593, 607, 608, 611, 613], "gener": [6, 7, 8, 13, 41, 42, 43, 81, 83, 84, 96, 99, 100, 111, 128, 130, 134, 141, 155, 156, 157, 166, 169, 170, 171, 172, 178, 181, 184, 185, 195, 204, 207, 208, 209, 210, 216, 218, 220, 224, 225, 227, 228, 236, 240, 247, 254, 262, 265, 268, 270, 278, 287, 292, 300, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 350, 374, 379, 385, 440, 445, 449, 452, 454, 455, 460, 461, 462, 471, 480, 512, 518, 522, 565, 567, 570, 582, 583, 585, 590, 595, 597, 599, 600, 602, 604, 606, 607, 608, 609, 611, 612, 615, 616, 617], "data": [6, 8, 11, 13, 14, 15, 38, 39, 41, 49, 73, 99, 128, 134, 136, 138, 139, 141, 145, 147, 155, 156, 185, 186, 187, 188, 222, 224, 225, 227, 243, 248, 262, 268, 269, 278, 285, 292, 304, 307, 313, 319, 321, 325, 332, 333, 335, 338, 345, 346, 347, 349, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 387, 396, 412, 413, 416, 419, 423, 428, 431, 432, 433, 435, 438, 440, 445, 449, 452, 455, 457, 462, 465, 472, 485, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 499, 503, 508, 510, 511, 513, 521, 522, 540, 565, 567, 568, 572, 576, 577, 580, 582, 583, 611, 612, 613, 614, 615, 616, 617], "label": [6, 8, 41, 147, 155, 156, 167, 169, 170, 171, 172, 175, 177, 178, 180, 181, 184, 186, 188, 189, 205, 207, 208, 209, 210, 213, 217, 220, 228, 230, 234, 235, 240, 241, 269, 270, 272, 276, 277, 278, 304, 404, 518, 542, 567, 568, 582, 616], "process": [6, 8, 11, 14, 39, 41, 105, 136, 155, 156, 167, 168, 169, 173, 178, 180, 181, 184, 185, 194, 205, 206, 207, 216, 217, 218, 220, 221, 222, 224, 227, 238, 239, 242, 248, 250, 251, 254, 259, 262, 264, 265, 266, 268, 269, 278, 292, 298, 299, 300, 302, 303, 304, 306, 307, 315, 331, 332, 348, 431, 432, 435, 468, 472, 476, 479, 480, 488, 519, 522, 565, 567, 568, 570, 571, 572, 574, 586, 605, 607, 608, 611, 615, 616, 619], "result": [6, 8, 11, 14, 38, 39, 41, 134, 136, 141, 155, 178, 180, 181, 184, 185, 186, 217, 220, 227, 228, 231, 232, 233, 234, 235, 240, 242, 251, 270, 273, 274, 275, 276, 277, 288, 306, 310, 315, 317, 319, 333, 335, 352, 353, 366, 367, 369, 373, 379, 382, 385, 462, 503, 506, 516, 519, 521, 542, 565, 567, 570, 572, 579, 581, 582, 590, 591, 602, 603, 604, 607, 609, 611, 614, 615, 616, 617, 620], "from": [6, 8, 11, 13, 15, 38, 39, 41, 55, 61, 62, 63, 64, 99, 102, 104, 111, 121, 128, 130, 134, 141, 147, 152, 155, 156, 157, 160, 164, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 181, 186, 187, 188, 190, 194, 195, 198, 202, 205, 206, 207, 208, 209, 210, 212, 217, 221, 223, 224, 225, 227, 228, 231, 232, 233, 237, 240, 241, 242, 243, 247, 249, 252, 254, 259, 262, 263, 264, 265, 266, 268, 269, 270, 273, 274, 275, 278, 284, 285, 286, 288, 289, 292, 299, 300, 301, 302, 303, 304, 307, 309, 314, 315, 317, 319, 320, 321, 322, 325, 328, 331, 332, 350, 352, 355, 356, 357, 359, 362, 363, 364, 365, 366, 368, 369, 371, 373, 374, 376, 379, 380, 381, 382, 383, 385, 396, 401, 419, 422, 431, 432, 433, 435, 460, 465, 479, 480, 485, 487, 488, 489, 495, 504, 506, 511, 512, 516, 518, 519, 522, 542, 566, 567, 568, 570, 571, 572, 573, 574, 575, 577, 579, 582, 583, 584, 585, 589, 590, 591, 593, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617], "depend": [6, 8, 13, 41, 56, 73, 155, 156, 185, 227, 238, 250, 251, 278, 304, 517, 565, 575, 576, 610, 617], "categori": [6, 8, 41, 169, 207, 230, 231, 272, 273, 566, 568, 592], "default": [6, 8, 15, 39, 41, 91, 99, 128, 134, 147, 149, 152, 155, 156, 157, 159, 167, 168, 169, 173, 178, 180, 181, 184, 186, 194, 195, 197, 205, 206, 207, 217, 220, 222, 224, 227, 228, 231, 234, 235, 237, 249, 263, 269, 270, 273, 276, 277, 286, 287, 303, 317, 319, 321, 328, 332, 354, 356, 357, 359, 361, 364, 365, 370, 392, 393, 396, 413, 423, 475, 477, 487, 489, 490, 494, 495, 518, 522, 542, 565, 568, 574, 576, 579, 580, 582, 590, 593, 595, 599, 604, 607, 608, 610, 612, 614, 616, 617, 619], "precis": [6, 8, 11, 39, 40, 41, 42, 43, 73, 135, 155, 156, 226, 227, 231, 233, 235, 236, 267, 273, 275, 276, 277, 278, 288, 305, 306, 308, 315, 317, 319, 349, 360, 363, 364, 374, 375, 376, 377, 378, 379, 384, 408, 437, 442, 444, 445, 446, 469, 488, 491, 493, 521, 522, 533, 565, 566, 571, 572, 576, 579, 585, 591, 592, 593, 609, 610, 611, 617], "benchmark": [6, 8, 11, 41, 152, 187, 188, 227, 268, 269, 288, 332, 353, 360, 363, 373, 379, 381, 384, 385, 408, 468, 469, 479, 485, 502, 507, 521, 533, 540, 584, 585, 589, 593, 596, 602, 617, 619, 620], "int": [6, 8, 11, 13, 14, 38, 39, 41, 99, 128, 134, 136, 141, 157, 166, 167, 168, 173, 178, 180, 181, 184, 195, 204, 205, 206, 217, 220, 222, 224, 229, 231, 235, 240, 242, 243, 252, 269, 271, 273, 276, 277, 285, 287, 288, 292, 298, 308, 326, 332, 338, 351, 352, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 376, 378, 379, 380, 381, 382, 383, 384, 386, 430, 465, 472, 473, 475, 477, 478, 479, 480, 481, 487, 488, 490, 495, 497, 500, 512, 568, 582, 610, 616], "control": [6, 8, 11, 41, 74, 142, 144, 243, 379, 384, 518, 565, 607, 617], "step": [6, 8, 11, 41, 42, 61, 62, 86, 96, 194, 227, 262, 264, 265, 266, 288, 289, 292, 297, 298, 299, 300, 301, 302, 322, 565, 570, 571, 572, 597, 600, 602, 605, 607, 608, 610, 612, 614, 615, 617], "mini": [6, 8, 11, 41, 620], "batch": [6, 8, 11, 13, 41, 56, 61, 104, 141, 157, 159, 160, 165, 166, 178, 187, 188, 194, 195, 197, 198, 203, 204, 227, 243, 247, 249, 254, 259, 313, 322, 352, 363, 485, 565, 567, 570, 571, 605, 607, 616, 617, 620], "boolean": [6, 8, 11, 13, 41, 50, 242, 299, 487], "inspect": [6, 8, 11, 14, 41, 565, 613, 615], "tensor": [6, 8, 11, 13, 14, 15, 37, 38, 39, 41, 64, 99, 111, 121, 128, 134, 136, 141, 178, 181, 184, 186, 220, 222, 223, 224, 249, 257, 258, 262, 264, 266, 284, 285, 286, 287, 289, 292, 293, 299, 301, 302, 312, 332, 376, 379, 387, 416, 518, 568, 607, 608, 611, 613, 615, 616, 617], "query_fw_cap": [6, 8, 11, 14, 39, 41, 522], "return": [6, 8, 11, 13, 14, 15, 38, 39, 41, 42, 43, 44, 47, 50, 51, 54, 55, 56, 57, 61, 62, 64, 68, 73, 75, 79, 83, 84, 85, 86, 87, 88, 99, 102, 104, 105, 111, 121, 128, 130, 132, 134, 135, 136, 139, 140, 141, 142, 144, 149, 155, 156, 157, 159, 166, 169, 173, 176, 177, 178, 180, 181, 183, 184, 185, 186, 191, 195, 197, 204, 207, 211, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 227, 228, 229, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 243, 249, 250, 251, 252, 253, 254, 257, 259, 262, 263, 264, 265, 266, 268, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 292, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 325, 328, 331, 332, 352, 353, 355, 362, 363, 364, 365, 366, 368, 369, 371, 372, 396, 399, 400, 401, 402, 433, 472, 475, 477, 479, 480, 481, 487, 490, 499, 500, 503, 518, 519, 542, 568, 572, 582, 584, 604, 611, 615, 617], "capabl": [6, 8, 11, 13, 14, 39, 40, 41, 315, 317, 319, 566, 576, 583, 593, 610, 611, 617, 619], "queri": [6, 8, 11, 13, 14, 39, 41, 99, 104, 111, 134, 247, 249, 308, 317, 319, 354, 361, 370, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 611], "query_fused_pattern": [6, 522], "fuse": [6, 13, 39, 41, 42, 43, 48, 52, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 85, 86, 87, 88, 90, 120, 124, 125, 136, 140, 141, 145, 518, 615], "pattern": [6, 40, 41, 52, 53, 55, 56, 58, 61, 62, 64, 72, 73, 86, 90, 96, 97, 98, 99, 112, 113, 115, 116, 117, 118, 120, 122, 123, 124, 125, 126, 127, 148, 152, 169, 173, 178, 207, 227, 255, 260, 264, 269, 290, 297, 298, 299, 301, 317, 319, 376, 379, 392, 401, 402, 479, 503, 522, 568, 576, 579, 603, 605, 610, 620], "conv": [6, 7, 14, 15, 16, 28, 37, 42, 43, 52, 56, 60, 65, 66, 67, 86, 98, 99, 114, 124, 145, 152, 269, 292, 518, 607, 610], "relu": [6, 68, 72, 73, 98, 112, 114, 116, 117, 122, 124, 126, 518, 576, 615], "bn": [6, 56, 73, 75, 112, 620], "inspect_tensor": [6, 8, 11, 14, 41, 522], "op_list": [6, 8, 11, 14, 41, 136, 312, 522, 615], "iteration_list": [6, 8, 11, 14, 41, 522], "inspect_typ": [6, 8, 11, 14, 41, 387, 522], "activ": [6, 7, 8, 11, 14, 15, 16, 28, 41, 99, 117, 136, 139, 141, 193, 222, 224, 287, 317, 319, 392, 522, 565, 571, 576, 603, 606, 610, 611, 615, 619], "save_to_disk": [6, 8, 11, 14, 41, 522], "strategi": [6, 8, 11, 13, 14, 39, 141, 152, 153, 169, 207, 227, 267, 269, 349, 371, 469, 487, 497, 521, 522, 532, 572, 579, 590, 602, 609, 610, 611, 612, 613, 619], "dump": [6, 8, 11, 14, 15, 39, 41, 99, 222, 224, 285, 332, 342, 456, 477, 488, 500, 611, 615], "info": [6, 8, 11, 14, 15, 38, 42, 99, 141, 178, 181, 182, 187, 188, 192, 224, 262, 268, 281, 282, 285, 286, 287, 292, 303, 326, 329, 332, 352, 353, 355, 362, 363, 366, 367, 369, 372, 472, 475, 480, 487, 503, 518, 565, 574, 584], "feed": [6, 8, 134, 166, 204, 349, 570], "list": [6, 8, 11, 13, 38, 39, 41, 47, 50, 73, 99, 104, 111, 128, 134, 135, 136, 141, 152, 155, 156, 160, 167, 178, 180, 181, 183, 184, 185, 186, 198, 205, 217, 219, 220, 222, 224, 227, 228, 229, 231, 232, 233, 235, 240, 242, 243, 252, 254, 259, 262, 265, 270, 271, 273, 274, 275, 276, 277, 278, 285, 286, 287, 288, 292, 300, 304, 306, 308, 312, 315, 317, 318, 319, 322, 323, 326, 345, 347, 349, 350, 352, 354, 355, 356, 357, 359, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 385, 386, 387, 396, 399, 401, 402, 404, 416, 419, 422, 423, 426, 427, 428, 430, 435, 438, 440, 442, 445, 446, 449, 452, 455, 465, 472, 477, 479, 480, 481, 485, 487, 488, 489, 490, 491, 493, 494, 495, 497, 499, 506, 518, 521, 522, 542, 568, 576, 580, 585, 590, 592, 595, 596, 599, 604, 607, 610, 612, 615, 617], "op": [6, 7, 8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 46, 48, 50, 51, 53, 54, 56, 59, 60, 61, 62, 63, 64, 65, 66, 68, 72, 73, 75, 79, 82, 85, 86, 87, 88, 90, 96, 98, 99, 112, 113, 114, 120, 122, 123, 124, 125, 127, 128, 129, 132, 134, 135, 136, 139, 140, 141, 145, 222, 224, 286, 305, 306, 308, 310, 312, 313, 317, 318, 319, 320, 327, 376, 379, 387, 392, 393, 401, 503, 522, 565, 576, 583, 607, 611, 612, 613, 615, 617, 619], "name": [6, 8, 13, 37, 38, 39, 41, 47, 56, 57, 61, 62, 64, 73, 99, 104, 105, 121, 128, 130, 134, 135, 136, 140, 141, 142, 144, 147, 149, 152, 167, 168, 169, 172, 173, 176, 177, 178, 181, 182, 184, 185, 186, 188, 189, 191, 192, 193, 205, 206, 207, 210, 211, 214, 215, 216, 218, 220, 222, 223, 224, 230, 231, 234, 235, 240, 241, 243, 249, 254, 257, 259, 262, 264, 266, 268, 269, 272, 273, 276, 277, 282, 284, 285, 286, 287, 288, 289, 292, 293, 299, 301, 302, 317, 319, 323, 326, 328, 332, 352, 356, 357, 359, 362, 363, 364, 365, 366, 368, 387, 396, 398, 416, 419, 421, 422, 428, 435, 436, 437, 438, 449, 465, 472, 475, 487, 489, 490, 511, 518, 565, 568, 572, 576, 581, 582, 584, 588, 595, 599, 603, 606, 613, 614, 615, 617, 619, 620], "fp32": [6, 8, 11, 37, 39, 40, 41, 42, 43, 73, 85, 87, 120, 125, 129, 136, 139, 141, 146, 152, 155, 156, 222, 224, 235, 277, 287, 288, 306, 308, 312, 317, 319, 325, 331, 332, 387, 521, 522, 565, 576, 577, 582, 583, 592, 610, 611, 612, 613, 614, 615, 617, 619, 620], "contain": [6, 8, 11, 13, 39, 50, 61, 62, 64, 68, 73, 99, 102, 128, 134, 136, 147, 155, 156, 167, 168, 169, 173, 178, 205, 206, 207, 221, 222, 224, 226, 227, 231, 232, 233, 237, 240, 245, 246, 254, 255, 256, 257, 259, 262, 263, 264, 265, 266, 267, 269, 273, 274, 275, 278, 292, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 331, 336, 340, 348, 354, 356, 357, 359, 360, 361, 364, 365, 368, 370, 374, 379, 384, 389, 390, 394, 397, 403, 408, 409, 415, 434, 441, 443, 444, 447, 448, 450, 453, 459, 464, 468, 472, 480, 568, 570, 579, 582, 603, 607, 608, 615, 617], "str": [6, 8, 13, 14, 15, 99, 128, 135, 136, 140, 141, 142, 144, 147, 157, 167, 168, 169, 173, 176, 177, 178, 180, 181, 184, 186, 190, 191, 195, 205, 206, 207, 211, 214, 215, 216, 217, 218, 220, 222, 224, 225, 228, 229, 231, 233, 234, 235, 240, 242, 243, 252, 257, 269, 270, 271, 273, 275, 276, 277, 279, 280, 284, 285, 286, 287, 292, 304, 312, 317, 318, 321, 322, 325, 328, 332, 333, 334, 335, 338, 345, 346, 347, 349, 351, 352, 355, 356, 357, 359, 362, 363, 364, 365, 366, 367, 368, 371, 374, 375, 376, 378, 379, 384, 385, 386, 387, 392, 393, 396, 398, 399, 400, 401, 402, 404, 413, 414, 416, 417, 419, 421, 422, 423, 424, 426, 427, 428, 429, 431, 432, 433, 435, 437, 438, 440, 442, 445, 446, 449, 451, 452, 454, 455, 456, 457, 460, 461, 462, 465, 472, 474, 475, 477, 479, 480, 483, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 499, 500, 503, 504, 511, 512, 542, 568, 582, 610, 615, 616], "valu": [6, 8, 11, 15, 38, 39, 41, 49, 50, 56, 61, 62, 64, 83, 84, 99, 104, 128, 129, 130, 134, 139, 141, 146, 149, 152, 155, 156, 167, 170, 171, 178, 180, 181, 184, 185, 186, 205, 208, 209, 217, 220, 227, 231, 235, 241, 242, 247, 254, 259, 262, 263, 265, 273, 277, 278, 285, 287, 288, 289, 292, 293, 296, 300, 303, 304, 307, 312, 315, 317, 319, 323, 325, 326, 332, 345, 347, 349, 354, 356, 357, 359, 361, 364, 365, 370, 374, 375, 396, 398, 437, 469, 472, 473, 477, 479, 485, 487, 490, 495, 497, 498, 500, 511, 518, 565, 568, 576, 582, 588, 604, 607, 608, 610, 611, 616, 617, 619], "ar": [6, 8, 15, 56, 61, 62, 68, 111, 121, 152, 167, 178, 181, 184, 194, 205, 220, 227, 228, 231, 235, 241, 243, 247, 249, 252, 254, 259, 262, 263, 264, 265, 268, 269, 270, 273, 277, 285, 292, 299, 300, 305, 306, 307, 309, 325, 331, 332, 416, 419, 421, 428, 472, 481, 516, 517, 518, 519, 522, 542, 565, 567, 568, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 585, 588, 590, 593, 596, 602, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 617, 619], "weight": [6, 8, 15, 37, 38, 41, 54, 55, 56, 73, 99, 111, 128, 129, 136, 139, 146, 222, 224, 234, 235, 249, 258, 262, 264, 266, 276, 277, 286, 287, 289, 292, 293, 294, 296, 297, 299, 301, 302, 310, 317, 319, 332, 392, 497, 522, 565, 571, 574, 576, 578, 582, 604, 607, 608, 610, 611, 615, 617, 619], "bool": [6, 8, 13, 14, 15, 39, 56, 57, 73, 99, 104, 128, 134, 136, 140, 141, 156, 167, 169, 178, 180, 181, 184, 205, 207, 217, 220, 222, 224, 229, 231, 235, 240, 242, 243, 249, 262, 269, 271, 273, 277, 287, 288, 292, 308, 315, 317, 318, 328, 332, 362, 396, 401, 404, 416, 419, 421, 422, 423, 424, 426, 427, 428, 429, 433, 435, 438, 456, 472, 473, 475, 480, 481, 487, 489, 490, 500, 506, 512, 568, 582, 610, 616], "save": [6, 8, 14, 38, 39, 41, 99, 169, 173, 178, 207, 211, 216, 222, 224, 241, 251, 268, 279, 280, 281, 283, 285, 286, 287, 288, 303, 304, 308, 315, 322, 323, 326, 328, 332, 518, 522, 567, 578, 583, 584, 586, 590, 595, 599, 605, 607, 608, 611], "disk": [6, 8, 41], "memori": [6, 8, 68, 226, 227, 254, 259, 267, 288, 332, 567, 571, 583, 585, 604, 607, 608, 611, 617], "numpi": [6, 8, 11, 38, 41, 61, 62, 64, 99, 134, 184, 220, 225, 231, 235, 240, 242, 252, 273, 277, 575, 616], "arrai": [6, 8, 11, 37, 38, 41, 99, 128, 134, 178, 181, 184, 220, 231, 235, 240, 242, 252, 273, 277, 285, 287, 307, 332, 616], "node0_nam": [6, 8, 41], "weight0_nam": [6, 8, 11, 41], "bias0_nam": [6, 8, 11, 41], "node1_nam": [6, 8, 41], "weight1_nam": [6, 8, 41], "bias1_nam": [6, 8, 41], "0": [6, 8, 13, 14, 37, 38, 39, 40, 47, 84, 99, 128, 134, 136, 139, 143, 145, 147, 152, 157, 159, 164, 167, 170, 171, 174, 178, 180, 181, 184, 186, 187, 188, 195, 197, 202, 205, 208, 209, 212, 217, 220, 222, 224, 226, 227, 235, 240, 242, 243, 247, 249, 252, 254, 259, 262, 267, 269, 276, 277, 287, 288, 292, 302, 308, 317, 319, 472, 480, 518, 565, 568, 570, 572, 574, 576, 577, 580, 581, 582, 583, 588, 590, 595, 599, 606, 607, 608, 610, 611, 613, 614, 615, 616, 617, 619], "output0_nam": [6, 8, 41], "output1_nam": [6, 8, 41], "set_tensor": [6, 8, 11, 41, 522], "tensor_dict": [6, 8, 11, 41, 522], "set": [6, 8, 11, 13, 15, 39, 40, 51, 61, 62, 90, 99, 104, 128, 134, 141, 142, 144, 147, 149, 152, 155, 156, 157, 159, 167, 169, 172, 178, 184, 185, 190, 191, 195, 197, 205, 207, 210, 220, 221, 224, 226, 227, 231, 236, 237, 238, 240, 247, 249, 250, 254, 259, 263, 268, 269, 273, 278, 286, 288, 292, 299, 303, 304, 315, 317, 318, 319, 326, 332, 334, 374, 375, 376, 379, 396, 442, 446, 454, 475, 479, 485, 486, 488, 489, 490, 495, 499, 500, 504, 516, 519, 565, 566, 568, 572, 576, 578, 579, 580, 582, 583, 585, 587, 589, 603, 607, 610, 611, 614, 617, 619], "back": [6, 8, 11, 41, 111, 141, 184, 190, 220, 240, 294, 315, 602], "usual": [6, 8, 11, 167, 205, 227, 254, 259, 570, 605, 611], "note": [6, 8, 11, 48, 227, 231, 254, 259, 265, 273, 292, 300, 313, 368, 379, 383, 519, 565, 572, 576, 580, 587, 590, 595, 599, 602, 607, 611, 615, 617, 619], "float": [6, 8, 11, 14, 38, 39, 41, 99, 128, 136, 167, 178, 180, 181, 205, 217, 227, 228, 229, 231, 232, 233, 240, 242, 243, 254, 259, 262, 264, 265, 266, 270, 271, 273, 274, 275, 286, 287, 288, 292, 298, 299, 300, 301, 302, 307, 335, 353, 362, 371, 372, 387, 393, 448, 456, 472, 473, 477, 479, 485, 487, 488, 495, 497, 498, 506, 542, 568, 582, 610, 611, 616], "ha": [6, 8, 11, 38, 56, 57, 61, 62, 64, 68, 73, 74, 86, 99, 111, 128, 147, 185, 227, 228, 242, 262, 264, 269, 270, 292, 299, 517, 519, 522, 542, 565, 567, 574, 579, 583, 588, 602, 608, 610, 611, 612, 614, 617], "respons": [6, 8, 11, 475, 479, 486, 499, 503, 504, 508, 510, 512, 513, 611], "int8": [6, 7, 8, 11, 17, 18, 38, 39, 40, 41, 42, 43, 81, 100, 112, 113, 114, 120, 122, 123, 124, 125, 129, 134, 136, 146, 147, 152, 180, 217, 222, 223, 224, 287, 308, 317, 319, 321, 387, 518, 522, 565, 566, 568, 571, 576, 587, 590, 592, 593, 596, 602, 610, 611, 612, 613, 614, 615, 616, 619], "int32": [6, 8, 11, 99, 222, 224, 568], "format": [6, 8, 11, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 47, 61, 62, 134, 167, 168, 169, 173, 178, 205, 206, 207, 211, 216, 222, 224, 227, 231, 237, 240, 251, 273, 287, 312, 317, 319, 438, 477, 495, 568, 572, 574, 582, 583, 584, 585, 611], "someth": [6, 8, 11, 155, 156, 169, 207, 304], "like": [6, 8, 11, 68, 73, 90, 92, 99, 128, 134, 155, 156, 157, 169, 173, 178, 195, 207, 211, 216, 226, 227, 235, 241, 264, 267, 268, 276, 277, 286, 292, 304, 322, 517, 518, 519, 522, 565, 570, 571, 579, 590, 605, 607, 611, 613, 617], "quantize_input": [6, 8, 37, 41], "abl": [6, 8, 41, 75, 155, 156, 183, 219, 278, 304, 593, 602, 607, 611], "take": [6, 8, 41, 147, 155, 156, 160, 178, 181, 184, 188, 189, 198, 220, 262, 269, 276, 277, 278, 292, 304, 307, 516, 518, 519, 565, 567, 570, 576, 602, 607, 611, 612, 616, 617, 619], "input": [6, 8, 13, 14, 15, 37, 38, 39, 41, 47, 54, 56, 57, 58, 61, 62, 64, 65, 66, 68, 73, 74, 76, 77, 79, 80, 98, 99, 104, 105, 111, 121, 128, 130, 134, 135, 136, 139, 140, 141, 145, 147, 152, 155, 156, 167, 168, 169, 171, 173, 178, 180, 181, 183, 184, 186, 188, 189, 194, 205, 206, 207, 209, 217, 219, 220, 221, 222, 223, 224, 226, 227, 231, 236, 243, 247, 249, 254, 259, 268, 269, 273, 276, 277, 278, 282, 284, 285, 286, 287, 292, 299, 304, 322, 332, 334, 345, 368, 373, 374, 376, 379, 380, 381, 382, 383, 416, 419, 426, 427, 428, 430, 442, 446, 451, 454, 460, 485, 488, 494, 519, 522, 565, 566, 567, 568, 570, 571, 572, 574, 576, 578, 582, 584, 585, 590, 607, 610, 611, 615, 616, 619], "scale": [6, 8, 14, 15, 37, 38, 39, 41, 56, 61, 94, 129, 139, 145, 146, 178, 180, 181, 184, 217, 220, 224, 285, 574, 611, 614, 616], "type": [6, 8, 11, 13, 14, 15, 38, 39, 40, 41, 51, 54, 55, 56, 57, 62, 64, 68, 73, 79, 85, 86, 87, 88, 90, 99, 102, 104, 105, 111, 121, 128, 134, 135, 136, 139, 141, 142, 144, 149, 152, 156, 157, 165, 167, 169, 173, 176, 177, 178, 181, 184, 186, 191, 195, 203, 205, 207, 211, 214, 215, 216, 218, 220, 222, 224, 225, 227, 228, 229, 231, 234, 235, 237, 240, 242, 249, 252, 255, 256, 257, 262, 264, 266, 268, 270, 271, 273, 276, 277, 279, 280, 285, 286, 287, 288, 292, 298, 299, 301, 302, 303, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 328, 331, 345, 350, 364, 365, 374, 375, 377, 379, 417, 472, 475, 477, 479, 482, 483, 517, 522, 542, 565, 568, 572, 576, 579, 583, 603, 607, 611, 614, 616, 617, 619], "path": [6, 8, 14, 39, 41, 99, 128, 134, 148, 167, 168, 169, 173, 178, 181, 184, 205, 206, 207, 220, 221, 222, 224, 226, 227, 237, 238, 239, 240, 243, 250, 251, 254, 259, 263, 265, 267, 268, 278, 285, 286, 287, 300, 303, 304, 317, 319, 322, 328, 332, 333, 338, 352, 355, 362, 363, 366, 373, 374, 379, 381, 382, 396, 402, 413, 416, 419, 421, 422, 424, 426, 427, 428, 429, 433, 440, 445, 449, 452, 455, 456, 462, 472, 480, 485, 487, 488, 497, 512, 518, 519, 522, 565, 567, 568, 572, 578, 582, 583, 584, 588, 591, 602, 605, 616, 619], "where": [6, 8, 15, 38, 61, 111, 231, 235, 247, 249, 251, 253, 262, 273, 276, 277, 292, 570, 595, 599, 603, 607, 615], "convert": [6, 8, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 60, 68, 75, 80, 91, 93, 94, 120, 125, 135, 141, 167, 178, 180, 181, 183, 184, 205, 217, 219, 220, 227, 231, 235, 237, 251, 253, 263, 273, 277, 279, 280, 305, 319, 322, 354, 361, 370, 465, 477, 518, 525, 583, 587, 611, 612, 616], "sourc": [6, 8, 15, 41, 188, 227, 229, 237, 249, 269, 271, 325, 400, 514, 518, 521, 581, 595, 597, 599, 600, 602, 609], "destinatin": [6, 8], "anoth": [6, 8, 41, 98, 99, 178, 181, 184, 220, 227, 228, 237, 270, 322, 332, 542, 570, 595, 599, 616, 617], "destin": [6, 8, 15, 41, 222, 223, 227, 237], "mxnet_util": 7, "util": [7, 12, 16, 99, 100, 128, 135, 136, 137, 138, 140, 193, 222, 227, 229, 263, 269, 271, 290, 311, 313, 337, 338, 339, 341, 343, 344, 347, 352, 363, 366, 369, 373, 374, 379, 381, 382, 384, 392, 393, 398, 400, 401, 404, 408, 414, 415, 423, 425, 449, 455, 459, 464, 468, 501, 523, 572, 585, 611, 617], "ox_util": 7, "oper": [7, 16, 38, 99, 134, 178, 180, 181, 217, 249, 262, 292, 308, 499, 503, 518, 565, 566, 567, 574, 602, 611, 616, 617], "argmax": [7, 16, 28], "attent": [7, 16, 28, 167, 205, 247, 249, 516, 570], "binary_op": [7, 16, 28], "concat": [7, 16, 28, 133, 472], "direct_q8": [7, 16, 28], "embed_layernorm": [7, 16, 28], "gather": [7, 13, 15, 16, 28, 262, 292, 475], "gavgpool": [7, 16, 28], "gemm": [7, 16, 28, 607], "lstm": [7, 16, 28], "matmul": [7, 14, 15, 16, 28, 40, 46, 53, 59, 67, 73, 79, 88, 98, 99, 117, 126, 224, 262, 292, 574, 576], "maxpool": [7, 16, 28, 118, 127, 576], "pad": [7, 16, 28, 65, 66, 167, 178, 181, 184, 205, 220, 247, 249, 568, 616], "pool": [7, 16, 28, 127], "resiz": [7, 16, 28, 167, 168, 173, 178, 180, 181, 184, 205, 206, 217, 220, 567, 568, 616], "split": [7, 16, 28, 38, 73, 76, 128, 178, 181, 183, 184, 219, 220, 240, 518, 616], "tf_util": 7, "graph_rewrit": [7, 100], "bf16": [7, 40, 41, 42, 43, 51, 75, 81, 85, 87, 100, 135, 152, 287, 306, 308, 317, 319, 332, 522, 525, 576, 583, 587, 592, 596, 602, 612, 617], "qdq": [7, 17, 19, 20, 21, 22, 24, 26, 27, 30, 32, 34, 36, 37, 42, 81, 100, 101, 102, 141, 152, 222, 223, 224, 285, 287, 522, 574, 579, 592, 593, 611], "graph_bas": [7, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 100], "quantize_graph": [7, 100], "qat": [7, 39, 100, 101, 140, 152, 224, 227, 237, 269, 286, 571, 572, 574, 579, 611], "quantize_graph_bas": [7, 100, 101, 112, 113, 114, 115, 116, 117, 118, 120, 122, 123, 124, 125, 126, 127], "quantize_graph_bn": [7, 100, 101], "quantize_graph_concatv2": [7, 100, 101], "quantize_graph_conv": [7, 100, 101], "quantize_graph_for_intel_cpu": [7, 100, 101], "quantize_graph_matmul": [7, 100, 101], "quantize_graph_pool": [7, 100, 101], "transform_graph": [7, 100], "bias_correct": [7, 100, 131], "graph_transform_bas": [7, 100, 129, 131, 132, 133], "insert_log": [7, 100, 131], "rerange_quantized_concat": [7, 100, 131], "graph_convert": [7, 100], "graph_converter_without_calib": [7, 100], "graph_util": [7, 100], "quantize_graph_common": [7, 100], "torch_util": [7, 188, 227, 269], "bf16_convert": [7, 42, 43, 45, 81, 100, 137], "hawq_metr": [7, 137], "onnx": [7, 14, 15, 28, 37, 38, 137, 145, 163, 201, 222, 223, 224, 225, 279, 280, 285, 287, 322, 330, 335, 438, 521, 522, 523, 525, 567, 573, 574, 576, 577, 579, 583, 584, 587, 592, 593, 609, 610, 617], "symbolic_trac": [7, 137], "tensorflow": [7, 45, 47, 69, 70, 71, 75, 81, 89, 95, 99, 100, 101, 103, 106, 111, 119, 131, 134, 166, 167, 168, 169, 172, 173, 174, 176, 177, 178, 181, 184, 186, 191, 204, 205, 206, 207, 210, 211, 212, 214, 215, 216, 218, 220, 224, 225, 226, 227, 229, 231, 234, 235, 236, 237, 267, 271, 273, 276, 277, 278, 286, 304, 313, 332, 394, 395, 407, 408, 415, 464, 465, 466, 468, 519, 521, 522, 565, 567, 570, 571, 573, 574, 576, 577, 579, 580, 583, 584, 592, 593, 607, 609, 610, 614, 617, 619], "kerasadaptor": 8, "specifi": [8, 11, 14, 15, 39, 40, 41, 73, 99, 128, 155, 156, 184, 185, 220, 226, 227, 231, 234, 235, 238, 241, 243, 250, 251, 254, 259, 267, 268, 273, 276, 277, 278, 287, 293, 304, 317, 319, 331, 332, 349, 352, 355, 362, 363, 364, 366, 367, 368, 373, 374, 376, 377, 379, 381, 382, 386, 387, 388, 401, 433, 437, 438, 439, 458, 463, 479, 483, 487, 500, 504, 565, 572, 576, 582, 590, 604, 610, 611, 616, 617, 619], "function": [8, 11, 14, 37, 41, 56, 99, 128, 139, 155, 156, 168, 194, 206, 226, 227, 238, 249, 250, 251, 254, 259, 265, 268, 285, 300, 323, 518, 519, 522, 565, 566, 567, 570, 571, 578, 579, 580, 582, 583, 593, 603, 607, 608, 611, 614, 615, 617], "fp32_baselin": [8, 11, 14, 39, 41, 325, 522], "boolen": [8, 14, 39, 41], "onli": [8, 11, 14, 15, 38, 39, 41, 42, 43, 47, 56, 57, 61, 62, 64, 68, 80, 98, 104, 123, 127, 129, 139, 145, 146, 167, 185, 187, 188, 191, 205, 227, 237, 249, 262, 264, 285, 292, 293, 299, 309, 313, 314, 315, 487, 497, 499, 500, 522, 566, 567, 572, 574, 576, 583, 590, 603, 607, 608, 610, 615, 617, 619], "compare_label": [8, 11, 14, 39, 41, 235, 277, 582], "pipelin": [8, 11, 14, 39, 41, 221, 227, 238, 239, 250, 265, 268, 571, 605], "get_optype_wise_": [8, 41], "quantizable_op_detail": 8, "get": [8, 13, 14, 15, 38, 39, 40, 41, 61, 62, 64, 73, 99, 104, 111, 112, 113, 114, 115, 116, 117, 118, 120, 122, 124, 126, 128, 130, 134, 136, 138, 141, 142, 144, 149, 152, 155, 157, 160, 178, 181, 184, 185, 191, 193, 194, 195, 198, 216, 218, 220, 224, 225, 226, 227, 236, 243, 247, 253, 254, 259, 262, 264, 266, 267, 268, 269, 285, 286, 287, 288, 289, 292, 299, 301, 302, 307, 312, 317, 319, 325, 327, 329, 332, 333, 338, 345, 346, 347, 349, 352, 355, 356, 357, 359, 362, 363, 364, 365, 366, 367, 368, 373, 374, 376, 378, 379, 380, 381, 382, 383, 386, 387, 388, 391, 395, 396, 401, 413, 416, 417, 419, 421, 422, 426, 427, 428, 430, 433, 435, 437, 438, 439, 440, 445, 449, 452, 455, 456, 458, 462, 463, 465, 467, 474, 475, 479, 483, 485, 487, 488, 490, 494, 497, 499, 500, 503, 504, 508, 510, 511, 512, 513, 565, 579, 580, 588, 617, 621], "wise": [8, 15, 41, 129, 146, 262, 292, 306, 307, 308, 312, 317, 318, 376, 379, 487, 565, 579, 607, 608, 615, 617, 619], "union": [8, 41, 235, 277, 322, 477, 582], "each": [8, 14, 15, 38, 39, 40, 41, 80, 99, 104, 130, 136, 165, 169, 172, 178, 180, 181, 184, 203, 207, 210, 217, 220, 229, 231, 232, 233, 242, 243, 249, 264, 271, 273, 274, 275, 285, 286, 287, 288, 292, 299, 306, 312, 517, 522, 565, 568, 570, 571, 576, 587, 593, 596, 602, 604, 607, 608, 614, 615, 616, 617], "kei": [8, 38, 39, 41, 99, 104, 128, 130, 134, 136, 149, 227, 231, 247, 249, 252, 254, 259, 263, 265, 273, 285, 286, 292, 300, 303, 307, 315, 323, 325, 326, 332, 479, 495, 521, 565, 574, 615], "while": [8, 41, 130, 249, 264, 299, 307, 522, 565, 568, 573, 577, 579, 583, 585, 590, 602, 610, 611], "detail": [8, 41, 139, 145, 178, 181, 184, 220, 247, 352, 355, 362, 363, 366, 368, 369, 371, 373, 374, 376, 379, 380, 381, 382, 383, 387, 392, 455, 460, 474, 487, 516, 517, 521, 576, 577, 578, 582, 583, 585, 593, 602, 607, 613, 614, 615, 617, 620], "kerasqueri": 8, "local_config_fil": [8, 39, 41], "querybackendcap": [8, 39, 40, 41, 522], "defin": [8, 39, 40, 41, 80, 86, 99, 128, 136, 147, 155, 156, 186, 227, 238, 239, 242, 250, 251, 252, 253, 254, 259, 262, 263, 264, 265, 266, 269, 278, 286, 292, 299, 300, 301, 302, 304, 307, 322, 331, 410, 411, 412, 499, 516, 519, 522, 565, 567, 568, 570, 571, 576, 579, 582, 603, 605, 607, 608, 611, 614, 615, 617, 619], "interfac": [8, 39, 40, 80, 99, 102, 121, 130, 148, 152, 158, 161, 178, 226, 227, 242, 243, 254, 259, 267, 268, 269, 288, 315, 325, 327, 333, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 449, 455, 462, 474, 579, 593, 606, 611, 613], "adapt": [8, 39, 40, 516, 521, 568, 593, 609], "should": [8, 15, 37, 39, 40, 41, 48, 68, 73, 104, 105, 130, 147, 155, 156, 165, 167, 169, 173, 178, 181, 183, 184, 188, 189, 203, 205, 207, 211, 216, 219, 220, 224, 229, 234, 235, 264, 268, 269, 271, 276, 277, 278, 292, 299, 304, 315, 328, 332, 396, 477, 518, 519, 522, 565, 568, 572, 582, 588, 597, 600, 602, 604, 608, 611, 616, 617, 619], "implement": [8, 39, 40, 41, 80, 99, 121, 129, 130, 133, 155, 156, 162, 165, 166, 167, 169, 173, 178, 200, 203, 204, 205, 207, 211, 216, 228, 234, 235, 257, 262, 266, 270, 276, 277, 278, 288, 292, 299, 300, 301, 302, 304, 310, 315, 542, 567, 568, 593, 603, 608, 613, 615, 617, 619], "inherit": [8, 39, 40, 164, 184, 186, 194, 202, 220, 227, 264, 266, 299, 302, 519, 522, 568], "specif": [8, 11, 14, 39, 40, 104, 105, 147, 158, 161, 167, 168, 169, 170, 173, 174, 176, 177, 178, 185, 191, 205, 206, 207, 208, 212, 214, 215, 216, 227, 228, 231, 237, 238, 249, 250, 251, 269, 270, 273, 287, 293, 294, 296, 297, 298, 303, 328, 363, 374, 375, 376, 379, 387, 402, 516, 519, 522, 565, 570, 576, 578, 582, 583, 584, 585, 589, 590, 592, 596, 602, 604, 607, 610, 617, 619], "backend": [8, 15, 39, 40, 41, 145, 152, 153, 154, 158, 159, 163, 167, 168, 170, 171, 172, 173, 174, 178, 181, 184, 190, 191, 196, 197, 199, 201, 205, 206, 208, 209, 210, 211, 212, 216, 218, 220, 236, 269, 278, 279, 280, 282, 285, 313, 518, 572, 578, 579, 591, 610, 611, 616, 619], "own": [8, 39, 40, 68, 165, 184, 203, 220, 288, 519, 565, 567, 568, 579, 582, 604, 614], "get_vers": [8, 40, 41], "current": [8, 13, 37, 38, 40, 41, 56, 61, 62, 64, 68, 99, 104, 139, 227, 237, 243, 254, 259, 262, 264, 265, 266, 285, 289, 292, 293, 294, 296, 297, 298, 299, 300, 302, 307, 308, 309, 312, 313, 315, 518, 519, 522, 565, 572, 576, 580, 582, 585, 589, 602, 604, 607, 608, 611, 617], "version": [8, 13, 37, 40, 41, 47, 141, 155, 222, 224, 249, 269, 287, 307, 328, 435, 470, 475, 487, 516, 518, 522, 565, 576, 580, 581, 595, 597, 599, 600, 606, 609, 617], "infom": [8, 41, 187, 188, 224], "get_precis": [8, 40, 349], "support": [8, 13, 38, 39, 40, 41, 68, 75, 91, 139, 145, 152, 155, 156, 157, 166, 167, 169, 173, 176, 177, 178, 180, 181, 184, 185, 186, 187, 188, 191, 194, 195, 204, 205, 207, 211, 214, 215, 216, 217, 218, 220, 227, 234, 235, 237, 242, 243, 249, 252, 254, 255, 256, 257, 259, 262, 264, 268, 269, 276, 277, 278, 282, 288, 292, 299, 304, 313, 317, 319, 325, 327, 349, 416, 419, 421, 422, 424, 426, 427, 428, 429, 435, 469, 477, 487, 514, 521, 565, 585, 590, 593, 596, 602, 608, 609, 612, 614, 617], "get_op_typ": [8, 39, 40, 41], "A": [8, 14, 38, 39, 41, 48, 50, 61, 62, 64, 68, 69, 99, 102, 104, 105, 111, 128, 134, 139, 141, 142, 144, 169, 173, 178, 183, 184, 187, 188, 189, 190, 207, 211, 216, 219, 220, 221, 227, 228, 231, 232, 233, 235, 238, 250, 251, 252, 253, 254, 255, 256, 257, 259, 262, 263, 264, 265, 266, 270, 273, 274, 275, 276, 277, 278, 280, 282, 286, 289, 292, 299, 300, 301, 302, 303, 305, 306, 307, 309, 310, 312, 313, 314, 317, 320, 568, 573, 576, 582, 584, 595, 596, 599, 602, 607, 609, 616, 617, 619], "compos": [8, 39, 41, 128, 178, 181, 184, 220, 325, 616], "dictionari": [8, 15, 39, 41, 61, 62, 64, 111, 135, 136, 141, 149, 152, 183, 219, 231, 238, 240, 243, 249, 250, 251, 253, 269, 273, 285, 354, 356, 357, 359, 361, 364, 365, 370, 374, 375, 377], "which": [8, 13, 39, 41, 49, 61, 62, 74, 77, 98, 99, 104, 128, 136, 139, 147, 155, 167, 168, 169, 173, 178, 180, 181, 185, 205, 206, 207, 217, 227, 228, 231, 233, 241, 243, 251, 252, 254, 255, 256, 257, 262, 263, 264, 265, 266, 269, 270, 273, 275, 282, 285, 288, 289, 292, 293, 294, 296, 297, 298, 299, 302, 305, 307, 315, 328, 332, 485, 516, 518, 519, 522, 542, 565, 567, 568, 570, 572, 576, 579, 582, 583, 584, 586, 590, 593, 596, 602, 603, 605, 607, 608, 610, 611, 612, 613, 615, 616, 617, 619], "get_quantization_cap": [8, 39, 40, 41], "describ": [8, 39, 41, 61, 62, 243, 522, 565, 576, 615], "get_op_types_by_precis": [8, 39, 41], "per": [8, 15, 37, 38, 39, 40, 41, 139, 145, 157, 166, 185, 195, 204, 231, 243, 273, 292, 327, 332, 352, 522, 565, 606, 612, 620], "mxnetadaptor": 11, "nc_model": [11, 13, 254, 259], "config": [11, 13, 14, 15, 39, 40, 41, 102, 104, 105, 107, 111, 141, 147, 155, 156, 167, 185, 194, 205, 226, 227, 240, 248, 251, 254, 259, 262, 263, 264, 265, 266, 269, 278, 289, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 319, 320, 322, 325, 326, 331, 332, 333, 334, 337, 338, 339, 341, 343, 344, 347, 373, 379, 381, 382, 386, 387, 431, 433, 440, 442, 445, 446, 449, 451, 452, 454, 455, 462, 465, 468, 476, 487, 490, 491, 492, 493, 495, 497, 498, 500, 508, 510, 513, 519, 521, 533, 565, 566, 570, 571, 572, 574, 577, 579, 583, 584, 605, 607, 610, 611, 612, 614, 615, 617], "unimpl": [11, 14], "yet": [11, 14, 41, 292, 519, 565, 597, 600, 603], "mxnetmodel": [11, 283], "data_x": [11, 13], "loader": [11, 13, 155, 156, 268, 278, 304, 328], "acc": [11, 14, 235, 243, 277, 288, 519, 615, 620], "level": [11, 152, 269, 308, 315, 326, 329, 478, 500, 516, 617], "modelwis": 11, "opwis": 11, "save_path": [11, 14, 41, 134, 222, 224, 279, 280, 285, 287, 322, 522, 584], "quantization_cfg": [11, 14, 41, 522], "includ": [11, 42, 43, 167, 169, 173, 176, 177, 178, 181, 184, 186, 205, 207, 211, 214, 215, 216, 218, 220, 226, 227, 231, 236, 249, 262, 266, 267, 273, 289, 292, 301, 302, 309, 315, 317, 320, 516, 517, 522, 565, 568, 580, 581, 582, 585, 588, 591, 596, 607, 608, 611, 612, 615, 617], "recover_tuned_model": [11, 41], "q_config": [11, 14, 15, 37, 40, 41, 222, 224, 281, 285, 286, 522], "recov": [11, 14, 41, 139, 332, 522, 571], "mxnet": [12, 13, 162, 166, 169, 172, 173, 176, 177, 178, 181, 184, 200, 204, 207, 210, 211, 214, 215, 216, 218, 220, 226, 227, 234, 235, 267, 276, 277, 278, 283, 304, 521, 522, 567, 573, 576, 579, 580, 583, 584, 610, 617, 619], "init": [12, 16, 144, 186, 290, 315, 568, 582], "optyp": [13, 223], "enum": [13, 38, 332, 437, 469], "isiter": 13, "obj": [13, 147, 166, 204, 221, 226, 227, 237, 238, 239, 250, 251, 254, 259, 263, 267, 268, 269, 278, 288, 303, 304, 325, 332], "check": [13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 56, 57, 61, 62, 73, 99, 104, 111, 134, 141, 152, 156, 169, 207, 223, 227, 237, 263, 268, 285, 288, 292, 299, 303, 307, 308, 315, 332, 374, 379, 416, 419, 421, 422, 424, 426, 427, 428, 429, 435, 438, 456, 472, 473, 475, 480, 487, 489, 517, 521, 565, 572, 580, 586, 588, 590, 597, 600, 601, 613], "whether": [13, 14, 15, 39, 41, 104, 105, 134, 157, 165, 167, 178, 180, 181, 184, 195, 203, 205, 217, 220, 221, 227, 229, 231, 235, 249, 254, 259, 262, 264, 271, 273, 277, 288, 292, 308, 315, 325, 328, 332, 438, 522, 568, 582, 616], "true": [13, 14, 15, 37, 39, 41, 56, 57, 73, 79, 99, 102, 104, 132, 134, 136, 152, 156, 157, 165, 167, 169, 170, 178, 181, 183, 184, 185, 195, 203, 205, 207, 208, 219, 220, 222, 224, 229, 231, 235, 240, 247, 249, 257, 262, 271, 273, 277, 287, 288, 292, 293, 315, 317, 318, 325, 433, 472, 475, 480, 481, 487, 568, 572, 576, 582, 585, 588, 589, 610, 611, 615, 616, 617, 619], "els": [13, 56, 57, 134, 165, 203, 288, 308, 315, 472, 487, 590, 615], "ensure_list": 13, "x": [13, 48, 61, 62, 64, 68, 135, 166, 178, 181, 184, 204, 220, 243, 247, 249, 307, 572, 584, 607, 611, 615, 616], "ensur": [13, 15, 178, 181, 184, 220, 265, 300, 307, 351, 384, 416, 419, 421, 428, 470, 565, 572, 574, 611, 616], "check_mx_vers": 13, "mx": 13, "__version__": 13, "combine_cap": 13, "new": [13, 50, 96, 99, 121, 134, 157, 169, 178, 181, 184, 185, 195, 207, 216, 218, 220, 249, 262, 263, 266, 268, 288, 292, 302, 315, 378, 379, 383, 499, 517, 572, 583, 596, 602, 603, 609, 611, 613, 614, 616, 619], "combin": [13, 40, 141, 152, 155, 156, 178, 180, 181, 194, 217, 227, 268, 269, 278, 304, 332, 518, 522, 579, 605, 609, 612, 616, 617], "make_nc_model": 13, "target": [13, 38, 39, 83, 84, 99, 128, 155, 186, 240, 263, 266, 288, 292, 296, 298, 302, 303, 305, 307, 400, 401, 568, 572, 607, 608, 615, 616, 617, 619], "sym_model": 13, "ctx": 13, "input_desc": 13, "symbol": [13, 135, 140, 141, 228, 270, 278, 304, 518, 525, 584], "neural": [13, 39, 136, 147, 152, 178, 179, 180, 181, 184, 185, 188, 191, 194, 217, 218, 220, 222, 227, 234, 235, 237, 254, 259, 262, 265, 267, 268, 269, 276, 277, 278, 280, 282, 292, 300, 304, 310, 311, 317, 328, 391, 395, 419, 428, 467, 474, 487, 514, 517, 522, 551, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 582, 583, 584, 586, 587, 590, 592, 593, 595, 597, 599, 600, 601, 604, 605, 609, 611, 613, 615, 616, 617, 619], "compressor": [13, 39, 147, 152, 178, 179, 180, 181, 184, 185, 188, 191, 194, 217, 218, 220, 222, 227, 234, 235, 237, 262, 265, 267, 268, 269, 276, 277, 278, 280, 282, 292, 300, 304, 311, 317, 328, 391, 395, 419, 428, 467, 474, 487, 514, 517, 519, 522, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 582, 583, 584, 585, 586, 590, 592, 593, 595, 597, 599, 600, 601, 604, 605, 607, 609, 611, 613, 615, 616, 617, 619], "tupl": [13, 39, 41, 99, 111, 141, 155, 156, 178, 180, 181, 184, 186, 217, 220, 222, 224, 231, 240, 243, 249, 273, 278, 288, 292, 304, 312, 317, 318, 319, 402, 433, 487, 506, 568, 582, 616], "symnet": 13, "arg": [13, 39, 47, 167, 168, 169, 173, 178, 205, 206, 207, 226, 227, 237, 249, 259, 262, 267, 268, 279, 280, 281, 284, 287, 300, 307, 322, 326, 328, 329, 337, 339, 341, 342, 343, 344, 354, 356, 357, 359, 361, 364, 365, 370, 472, 480, 500, 567, 568, 572, 591, 611, 615, 616], "aux": 13, "descript": [13, 99, 121, 128, 224, 225, 231, 251, 273, 287, 517, 518], "ncmodel": 13, "suppli": [13, 247], "get_framework_nam": [13, 416, 419, 421, 428], "prepare_model_data": 13, "prepar": [13, 39, 141, 194, 221, 227, 254, 259, 265, 267, 374, 379, 467, 518, 521, 568, 572, 577, 611], "dataloaderwrap": 13, "prepare_model": 13, "create_data_exampl": 13, "exampl": [13, 104, 136, 141, 147, 152, 167, 168, 169, 173, 178, 180, 183, 184, 205, 206, 207, 217, 219, 220, 231, 232, 233, 235, 241, 265, 269, 273, 274, 275, 277, 278, 287, 288, 300, 304, 322, 360, 378, 384, 408, 432, 433, 434, 435, 480, 487, 516, 517, 521, 565, 578, 579, 585, 588, 589, 590, 593, 612, 613, 616, 617, 621], "prepare_dataload": 13, "io": [13, 521], "ndarray_to_devic": 13, "ndarrai": [13, 61, 62, 64, 99, 184, 220, 240, 242, 287, 307, 323, 326, 575, 616], "devic": [13, 73, 83, 84, 85, 86, 87, 88, 91, 96, 99, 120, 125, 128, 133, 136, 152, 186, 243, 269, 570, 585, 588, 593, 602, 607, 610], "is_model_quant": 13, "query_quantizable_nod": 13, "node": [13, 15, 21, 23, 32, 36, 37, 38, 41, 42, 43, 44, 47, 48, 49, 50, 54, 56, 57, 58, 61, 62, 64, 68, 71, 73, 74, 76, 77, 78, 92, 98, 99, 121, 128, 130, 134, 222, 223, 224, 279, 280, 285, 286, 287, 315, 385, 398, 399, 400, 401, 402, 403, 408, 416, 419, 426, 427, 428, 465, 466, 468, 522, 565, 572, 615], "map": [13, 38, 41, 121, 130, 136, 184, 220, 222, 223, 224, 226, 227, 230, 231, 232, 233, 235, 240, 254, 259, 262, 264, 267, 272, 273, 274, 275, 276, 277, 292, 301, 437, 568, 572, 582, 595, 599, 607, 608, 611], "quantize_sym_model": 13, "qconfig": [13, 615], "accord": [13, 41, 111, 147, 152, 155, 167, 168, 169, 173, 178, 181, 184, 205, 206, 207, 216, 218, 220, 227, 249, 266, 267, 287, 292, 293, 296, 297, 298, 302, 305, 306, 307, 308, 310, 312, 315, 317, 319, 325, 486, 519, 522, 568, 572, 607, 608, 612, 616, 617], "run_forward": 13, "b_filter": 13, "collector": [13, 136, 323, 326], "pre_batch": 13, "post_batch": 13, "forward": [13, 135, 186, 247, 249, 287, 521, 610, 611, 615], "propag": [13, 94, 111, 294], "filter": [13, 167, 168, 169, 170, 171, 172, 173, 174, 178, 205, 206, 207, 208, 209, 210, 212, 216, 227, 269, 332, 355, 396, 419, 489, 567, 568, 579, 607, 608, 615], "infer": [13, 15, 61, 62, 121, 128, 226, 227, 267, 286, 288, 304, 521, 522, 570, 571, 583, 602, 604, 607, 608, 609, 611, 615, 617], "collect": [13, 38, 41, 178, 181, 182, 184, 187, 188, 189, 190, 192, 216, 218, 220, 228, 233, 234, 235, 270, 275, 276, 277, 317, 318, 319, 321, 323, 326, 332, 333, 438, 462, 473, 475, 487, 488, 574, 611, 615, 617], "inform": [13, 15, 38, 41, 102, 136, 155, 156, 187, 188, 189, 190, 231, 262, 264, 265, 266, 268, 273, 276, 277, 285, 289, 292, 299, 300, 301, 302, 303, 315, 349, 387, 416, 474, 475, 480, 481, 516, 517, 520, 521, 522, 523, 525, 531, 532, 533, 540, 544, 551, 559, 560, 561, 562, 564, 570, 574, 576, 584, 597, 600, 603, 607, 608, 612, 613, 615, 619, 620, 621], "dure": [13, 41, 56, 61, 62, 111, 240, 243, 249, 262, 266, 268, 288, 292, 302, 481, 583, 584, 604, 605, 607, 608, 611, 615, 619], "prior": [13, 82, 307, 617], "after": [13, 15, 38, 39, 51, 72, 141, 167, 178, 180, 181, 184, 187, 188, 194, 205, 217, 220, 221, 222, 224, 227, 240, 262, 264, 265, 266, 289, 292, 299, 300, 301, 302, 308, 322, 473, 519, 565, 567, 568, 570, 571, 574, 579, 582, 595, 596, 599, 603, 604, 605, 607, 608, 611, 612, 614, 615, 616, 617], "count": [13, 251, 292, 308, 519, 568], "make_symbol_block": 13, "gluon": [13, 278, 304, 584], "symbolblock": 13, "make_modul": 13, "parse_tune_config": 13, "quantizable_nod": 13, "distribute_calib_tensor": 13, "calib_tensor": 13, "calib_cfg": 13, "tensor_to_nod": 13, "distribut": [13, 129, 146, 147, 157, 159, 160, 164, 165, 178, 187, 188, 195, 197, 198, 202, 203, 221, 227, 254, 259, 267, 269, 307, 315, 327, 475, 521, 570, 580, 597, 600, 609, 611, 613, 617, 620], "algorithm": [13, 141, 148, 183, 219, 228, 235, 238, 242, 250, 251, 253, 269, 270, 277, 307, 317, 319, 325, 327, 519, 522, 542, 570, 571, 576, 579, 591, 596, 607, 608, 611, 615, 619], "kl": [13, 323, 326, 327, 576, 617, 619], "minmax": [13, 576, 619], "calib_model": 13, "qsym_model": 13, "calib_data": 13, "calibdata": 13, "threshold": [13, 15, 143, 231, 262, 273, 292, 323, 326, 327, 582], "amp_convert": 13, "amp_cfg": 13, "amp": [13, 585, 592, 606], "wrap": [13, 105, 111, 186, 231, 273, 345, 518, 572, 597, 600], "dataiterload": 13, "data_it": 13, "collectorbas": 13, "collect_gluon": 13, "_": [13, 155, 156, 304, 518, 519, 522, 565, 570, 572, 576, 582, 583, 584, 585, 591, 595, 597, 599, 600, 604, 607, 608, 611, 613, 614, 615, 617, 619], "arr": [13, 38, 332], "api": [13, 14, 39, 41, 64, 69, 96, 99, 111, 121, 147, 226, 227, 231, 265, 267, 269, 273, 304, 317, 318, 319, 332, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 503, 504, 517, 518, 523, 525, 531, 540, 544, 559, 560, 561, 562, 564, 574, 579, 587, 591, 592, 593, 613, 614, 617, 621], "collect_modul": 13, "m": [13, 38, 64, 136, 262, 292, 570, 580, 585, 587, 590, 593, 597, 600, 620], "b": [13, 38, 64, 68, 167, 205, 224, 568, 582, 608, 617], "o": [13, 64, 396, 580, 587, 606], "calibcollector": 13, "include_tensors_kl": 13, "include_tensors_minmax": 13, "num_bin": [13, 323, 326, 327], "8001": [13, 323, 326], "calc_kl_th_dict": 13, "quantized_dtyp": 13, "calcul": [13, 15, 38, 39, 41, 54, 136, 156, 170, 171, 186, 208, 209, 227, 232, 233, 243, 248, 249, 254, 258, 259, 262, 264, 265, 274, 275, 288, 289, 292, 300, 301, 312, 323, 326, 387, 479, 485, 568, 582, 593, 604, 607, 608, 611, 614, 617, 619], "tensorcollector": 13, "include_nod": 13, "qtensor_to_tensor": 13, "build": [13, 104, 111, 121, 142, 143, 144, 145, 146, 224, 225, 238, 240, 250, 251, 281, 283, 285, 286, 287, 352, 353, 355, 366, 367, 369, 372, 396, 456, 465, 487, 504, 522, 565, 580, 584, 595, 597, 599, 600, 603, 609, 614, 617], "up": [13, 61, 62, 64, 94, 178, 181, 184, 220, 227, 243, 254, 259, 263, 288, 373, 565, 572, 573, 576, 577, 579, 593, 597, 600, 602, 609, 610, 611, 614, 616, 619], "preprocess": [13, 167, 178, 181, 184, 205, 216, 218, 220, 221, 227, 249, 325, 572, 616], "namecollector": 13, "cache_kl": 13, "cache_minmax": 13, "tensors_kl": 13, "tensors_minmax": 13, "properti": [13, 99, 111, 142, 144, 152, 157, 159, 167, 169, 178, 185, 186, 194, 195, 197, 205, 207, 221, 226, 227, 234, 235, 236, 237, 251, 254, 259, 267, 268, 269, 276, 277, 279, 280, 281, 283, 285, 286, 287, 288, 300, 307, 315, 317, 319, 332, 333, 351, 384, 391, 395, 400, 401, 404, 416, 419, 424, 428, 437, 440, 445, 449, 452, 455, 462, 472, 479, 480, 481, 485, 490, 494, 497, 499, 500, 581, 606], "min_max_dict": 13, "mix": [13, 41, 42, 43, 135, 278, 305, 319, 444, 445, 446, 493, 521, 522, 533, 579, 585, 591, 592, 593], "max": [13, 14, 15, 38, 41, 99, 129, 146, 152, 178, 181, 184, 220, 232, 233, 269, 274, 275, 307, 332, 497, 521, 565, 580, 611, 616, 617], "post_collect": 13, "2": [13, 38, 40, 41, 42, 47, 68, 73, 98, 139, 143, 145, 168, 185, 206, 231, 233, 235, 243, 257, 258, 264, 273, 275, 276, 277, 288, 292, 299, 305, 307, 518, 522, 568, 570, 576, 577, 579, 580, 581, 582, 583, 604, 606, 607, 611, 613, 614, 616, 617], "onnxruntimeadaptor": 14, "rt": 14, "smooth_quant": [14, 39, 144, 269], "alpha": [14, 38, 39, 139, 145, 241, 289, 301], "5": [14, 39, 73, 139, 145, 152, 171, 180, 186, 209, 217, 231, 235, 273, 276, 277, 308, 522, 565, 568, 576, 582, 606, 607, 610, 616, 617, 619, 620], "percentil": [14, 15, 39, 139], "99": [14, 139, 620], "999": [14, 139, 619, 620], "op_typ": [14, 15, 32, 39, 139, 285, 308, 312, 315, 317, 319, 320], "linear": [14, 38, 139, 145, 152, 222, 224, 262, 269, 292, 518, 570, 574, 607, 608], "scales_per_op": [14, 39, 139], "augment": [14, 15], "smooth": [14, 15, 38, 39, 139, 145, 608], "quant": [14, 39, 41, 139, 141, 317, 319, 518, 611], "model_wrapp": [14, 15], "origin_model": [14, 142, 144], "smoothquant": [14, 39, 139, 145, 521], "fallback": [14, 39, 41, 141, 305, 306, 309, 310, 312, 313, 583, 612, 617], "spiq": [14, 39, 139, 145], "remov": [14, 15, 17, 37, 38, 39, 41, 50, 51, 54, 56, 68, 73, 74, 77, 78, 79, 90, 92, 99, 104, 121, 128, 136, 186, 224, 233, 275, 285, 287, 317, 319, 352, 355, 362, 363, 366, 368, 369, 371, 373, 419, 480, 481, 488, 516, 517, 595, 599, 607, 608, 615], "outlier": [14, 15, 39], "whose": [14, 15, 38, 39, 54, 79, 139, 145, 263, 292, 578, 607, 617], "have": [14, 38, 39, 68, 77, 99, 134, 147, 165, 183, 187, 188, 203, 219, 228, 231, 235, 242, 262, 264, 269, 270, 273, 277, 292, 299, 317, 319, 516, 517, 542, 565, 567, 568, 572, 576, 581, 582, 583, 585, 602, 604, 607, 608, 611, 617], "individu": [14, 38, 39, 61, 62, 64, 239, 240, 250, 262, 292, 516], "mainli": [14, 15, 39, 194, 227, 266, 292, 302, 608, 611], "accuraci": [14, 39, 147, 152, 155, 156, 185, 221, 226, 227, 235, 239, 240, 241, 243, 250, 254, 259, 267, 269, 276, 277, 278, 288, 304, 305, 308, 313, 315, 337, 353, 363, 373, 379, 381, 455, 479, 485, 488, 490, 506, 518, 521, 565, 567, 568, 571, 572, 573, 574, 577, 582, 583, 593, 602, 604, 605, 607, 608, 609, 610, 613, 614, 615, 619, 620], "same": [14, 38, 39, 41, 50, 61, 77, 134, 139, 167, 178, 181, 184, 205, 220, 231, 254, 259, 273, 292, 308, 309, 312, 332, 522, 566, 567, 568, 570, 572, 576, 586, 590, 595, 599, 606, 610, 611, 615, 616, 617], "share": [14, 38, 39, 73, 76, 92, 98, 128, 575, 576, 617], "perform": [14, 39, 56, 61, 62, 90, 147, 152, 167, 178, 179, 180, 181, 183, 185, 205, 217, 219, 226, 227, 238, 239, 241, 243, 250, 251, 254, 259, 267, 269, 288, 299, 301, 306, 308, 309, 312, 314, 337, 353, 363, 373, 379, 381, 470, 479, 488, 490, 497, 506, 518, 519, 521, 522, 565, 566, 567, 568, 569, 571, 573, 574, 577, 579, 580, 582, 583, 584, 585, 587, 591, 593, 596, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 617, 619, 620], "modifi": [14, 39, 50, 56, 61, 62, 64, 75, 169, 207, 227, 254, 259, 265, 300, 466, 518, 565, 572, 576, 619], "data_load": [14, 41, 42, 43, 522], "todo": [14, 38, 167, 170, 205, 208, 231, 273, 319, 485, 618], "replac": [14, 61, 62, 79, 99, 233, 275, 285, 308, 487, 572, 593, 613], "input_graph": [14, 120, 121, 125, 128, 129, 334, 442, 446, 451, 454, 461, 522], "eval": [14, 194, 227, 231, 237, 273, 518, 567, 585, 615], "func": [14, 186, 268, 287, 487, 504, 619], "onnxdataload": 14, "evalut": 14, "onnxtransform": 14, "onnxmetr": 14, "evaluaton": 14, "visualizaton": 14, "f1": [14, 227, 232, 234, 235, 269, 274, 276, 277, 572, 582, 614, 620], "e": [14, 40, 64, 240, 242, 268, 292, 477, 479, 504, 516, 570, 573, 577, 585, 590, 591, 595, 599, 607, 617], "g": [14, 40, 240, 242, 268, 292, 479, 570, 573, 577, 585, 590, 607, 608, 613, 617], "modelproto": [14, 222, 223, 224, 584], "onnxrt_qlinearopsadaptor": [14, 522], "onnxrt_integeropsadaptor": 14, "onnxrt_qdqadaptor": 14, "onnxrtaug": 15, "dump_op_typ": 15, "black_nod": 15, "white_nod": 15, "cpuexecutionprovid": 15, "reduce_rang": [15, 37, 152, 269, 610], "augment_graph": 15, "activation_onli": 15, "weight_onli": 15, "add": [15, 37, 38, 46, 53, 58, 61, 62, 98, 99, 104, 108, 114, 117, 134, 167, 169, 191, 205, 207, 227, 228, 235, 249, 254, 259, 263, 265, 268, 270, 276, 277, 285, 300, 303, 308, 317, 319, 345, 352, 353, 355, 362, 363, 364, 365, 366, 367, 369, 371, 372, 373, 374, 378, 379, 380, 381, 382, 383, 385, 401, 487, 512, 517, 518, 542, 565, 567, 568, 572, 574, 576, 582, 597, 600, 614, 615, 617], "quantization_candid": 15, "store": [15, 169, 207, 231, 249, 255, 256, 257, 262, 264, 273, 289, 292, 299, 301, 302, 307, 328, 578], "part": [15, 221, 227, 231, 262, 264, 273, 299, 518, 580, 583, 597, 600], "graph": [15, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 106, 119, 121, 125, 128, 129, 131, 132, 133, 134, 166, 204, 224, 226, 269, 279, 280, 281, 285, 286, 287, 339, 341, 343, 408, 416, 419, 427, 428, 430, 440, 441, 442, 447, 448, 452, 465, 466, 468, 488, 491, 503, 518, 522, 568, 570, 572, 578, 582, 584, 585, 611, 612, 615], "get_intermediate_output": 15, "calib_mod": 15, "intermedi": [15, 38, 136, 152, 186, 518, 579, 607, 611], "dump_minmax": 15, "naiv": 15, "min": [15, 41, 99, 129, 146, 332, 565, 611, 616, 617], "dump_calibr": 15, "param": [15, 39, 40, 41, 61, 136, 139, 155, 157, 185, 191, 195, 231, 234, 235, 249, 273, 276, 277, 307, 354, 386, 487, 490, 522, 584, 617], "give": [15, 602, 617], "pair": [15, 37, 42, 96, 104, 567, 583], "across": [15, 226, 227, 236, 267, 278, 569, 607, 608], "test": [15, 184, 220, 240, 517, 521, 565, 580, 620], "first": [15, 41, 86, 96, 129, 146, 149, 167, 183, 205, 219, 221, 227, 231, 273, 305, 306, 308, 319, 396, 518, 519, 522, 565, 568, 574, 580, 583, 587, 596, 597, 600, 603, 610, 611, 612, 614, 615, 617, 619], "element": [15, 165, 203, 227, 231, 247, 249, 254, 259, 262, 265, 273, 292, 300, 332, 350, 568, 579, 582, 607], "minimum": [15, 292, 307, 593, 607, 617], "second": [15, 58, 152, 167, 205, 269, 308, 332, 396, 479, 565, 595, 599, 603, 617, 619], "maximum": [15, 48, 167, 178, 181, 184, 205, 220, 229, 249, 262, 264, 271, 292, 299, 307, 568, 607, 611, 616], "calculate_quantization_param": 15, "quantization_threshold": 15, "follow": [15, 62, 64, 73, 82, 85, 86, 87, 88, 99, 169, 173, 178, 207, 227, 228, 231, 249, 254, 259, 270, 273, 305, 516, 517, 518, 519, 522, 532, 565, 567, 568, 570, 571, 572, 574, 576, 580, 581, 582, 583, 584, 585, 586, 587, 595, 599, 605, 607, 608, 610, 611, 615, 617], "param_nam": [15, 345], "dump_tensor": 15, "both": [15, 134, 136, 249, 251, 253, 516, 519, 522, 571, 580, 586, 610, 611, 617], "calculate_scale_zeropoint": 15, "last_nod": 15, "next_nod": 15, "rmin": [15, 38, 611], "rmax": [15, 38, 611], "scheme": [15, 37, 38, 40, 141, 317, 319, 504, 522, 567, 576, 593, 617, 619], "qtype": [15, 38, 522], "quantize_rang": [15, 38], "zero": [15, 37, 38, 178, 181, 184, 220, 227, 235, 254, 259, 262, 264, 265, 277, 292, 299, 300, 332, 521, 607, 608, 611, 616, 617], "point": [15, 37, 38, 180, 217, 232, 233, 252, 274, 275, 288, 307, 582, 602, 611, 616, 617], "calib_smooth": 15, "channel": [15, 37, 38, 99, 129, 139, 145, 146, 178, 180, 181, 184, 217, 220, 243, 247, 262, 292, 416, 419, 428, 522, 579, 580, 585, 587, 592, 607, 608, 616, 620], "shape_info": [15, 38], "shape": [15, 38, 99, 111, 128, 134, 170, 171, 178, 180, 181, 184, 208, 209, 217, 220, 231, 247, 249, 262, 273, 284, 292, 408, 415, 416, 419, 428, 430, 468, 521, 565, 568, 576, 577, 616], "max_vals_per_channel": [15, 38], "activationoper": 17, "onnx_quant": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36], "onnx_nod": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36], "quantize_check": [17, 20, 21, 23, 25, 27, 31, 32, 33, 34, 35], "quantizaion": [17, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36], "can": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 50, 129, 136, 139, 146, 147, 155, 156, 166, 169, 178, 181, 184, 185, 187, 188, 204, 207, 220, 227, 231, 233, 235, 247, 249, 254, 259, 262, 264, 265, 266, 269, 273, 275, 277, 278, 288, 292, 299, 300, 302, 304, 328, 438, 470, 477, 487, 518, 519, 521, 522, 565, 566, 567, 568, 570, 571, 572, 576, 579, 580, 582, 583, 584, 585, 586, 587, 589, 590, 591, 593, 595, 596, 597, 599, 600, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 614, 615, 616, 617, 619], "done": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 518, 570, 571, 586, 602, 607, 611], "convert_check": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36], "convert_format": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36], "convers": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 48, 75, 227, 237, 522, 583, 611, 612], "qoper": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37], "removableactivationoper": 17, "qactivationoper": 17, "children": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 285], "initi": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 105, 134, 147, 155, 156, 164, 167, 186, 194, 202, 205, 221, 227, 238, 239, 250, 251, 263, 264, 268, 269, 285, 286, 299, 304, 315, 319, 351, 374, 375, 384, 433, 465, 467, 475, 488, 495, 519, 565, 567, 568, 582, 601, 607, 608, 617], "argmaxoper": 18, "qargmaxoper": 18, "attentionoper": 19, "qattentionoper": 19, "qattent": 19, "binari": [20, 134, 235, 247, 249, 277, 575, 582, 597, 600], "binaryoper": 20, "qbinaryoper": 20, "qbinari": 20, "concatoper": 21, "cast": [21, 23, 32, 36, 37, 38, 51, 574, 612, 616], "qconcatoper": 21, "qconcat": 21, "convoper": 22, "qconvoper": 22, "qlinearconv": 22, "direct8bit": 23, "direct8bitoper": 23, "directcastoper": 23, "qdirectoper": 23, "qdirect": 23, "embedlayernorm": 24, "embedlayernormalizationoper": 24, "qembedlayernormalizationoper": 24, "qembedlayernorm": 24, "gatheroper": 25, "qgatheroper": 25, "qgather": 25, "globalaveragepool": 26, "globalaveragepooloper": 26, "qglobalaveragepooloper": 26, "qlinearglobalaveragepool": 26, "gemmoper": 27, "qgemmoper": 27, "qgemm": 27, "lstmoper": 29, "matmuloper": 30, "qmatmuloper": 30, "qlinearmatmul": 30, "maxpooloper": 31, "qmaxpooloper": 31, "qmaxpool": 31, "op_registri": 32, "qop_registri": 32, "padoper": 33, "qpadoper": 33, "qpad": 33, "averagepool": 34, "pooloper": 34, "qpooloper": 34, "qlinearaveragepool": 34, "resizeoper": 35, "qresizeoper": 35, "qresiz": 35, "splitoper": 36, "qsplitoper": 36, "qsplit": 36, "static": [37, 39, 41, 99, 128, 138, 139, 145, 152, 225, 240, 268, 269, 285, 304, 317, 319, 345, 349, 352, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 387, 388, 416, 419, 421, 422, 424, 426, 427, 428, 429, 439, 456, 458, 463, 465, 470, 472, 477, 479, 485, 486, 488, 490, 495, 500, 504, 511, 512, 522, 574, 579, 585, 590, 591, 592, 593, 596, 602, 617, 620], "quantization_param": 37, "op_types_to_quant": 37, "fallback_list": 37, "add_qdq_pair_to_weight": 37, "optypes_to_exclude_output_qu": 37, "dedicated_qdq_pair": 37, "check_opset_vers": 37, "opset": [37, 222, 224, 287], "should_quant": 37, "quantize_model": 37, "merge_dedicated_qdq_pair": 37, "merg": [37, 97, 159, 197, 317, 319, 597, 600, 615, 617], "dedic": 37, "q": [37, 38, 42, 96, 98, 120], "dq": [37, 42, 96, 98, 120], "should_cast": 37, "insert_qdq": 37, "insert": [37, 38, 41, 42, 71, 96, 98, 99, 102, 121, 132, 145, 222, 224, 518, 579, 585, 607, 608, 611, 612, 615], "should_convert": 37, "convert_qdq_to_operator_ori": 37, "remove_redundant_pair": 37, "redud": 37, "dtype_cast": 37, "cfg": [37, 41, 65, 66, 141, 148, 319, 325], "keep_io_typ": 37, "dtype": [37, 38, 42, 43, 99, 128, 135, 152, 170, 171, 180, 184, 208, 209, 217, 220, 222, 224, 225, 287, 568, 574, 576, 585, 610, 615, 616, 619], "quantize_output": 37, "initializer_use_weight_qtyp": 37, "direct_int8": 37, "indic": [37, 160, 165, 167, 198, 203, 205, 221, 227, 231, 247, 249, 252, 253, 273, 292, 518, 565, 575, 615], "quantize_bias_tensor": 37, "bia": [37, 41, 99, 128, 129, 222, 224, 247, 615], "quantize_bia": 37, "bias_nam": [37, 224], "input_nam": [37, 61, 62, 152, 222, 224, 287, 574], "weight_nam": [37, 293], "beta": [37, 61, 62, 64, 289], "input_scal": 37, "weight_scal": 37, "quantize_weights_per_channel": 37, "weight_qtyp": 37, "axi": [37, 38, 292], "quantize_weight_per_channel": 37, "channel_axi": [37, 102, 143, 146], "tensor_proto_to_arrai": 37, "tensorproto": [37, 38], "get_bias_add_nod": 37, "last_output": 37, "quantized_bias_nam": 37, "handl": [37, 54, 55, 56, 134, 136, 139, 145, 227, 240, 241, 242, 267, 315, 329, 477, 503, 504, 518, 520, 567], "ad": [37, 38, 111, 167, 205, 228, 270, 292, 299, 307, 352, 353, 355, 362, 363, 364, 365, 366, 369, 371, 372, 565, 583, 585, 590, 593, 597, 600, 615], "reshap": [37, 55, 61, 62, 64, 67, 72, 257, 292], "nodeproto": [37, 224], "_type_": [37, 224, 284], "previou": [37, 41, 61, 73, 249, 251, 288, 292, 306, 313, 565, 613, 615, 617], "is_valid_quantize_weight": 37, "dequantize_tensor": [37, 136, 387], "value_nam": 37, "dequant": [37, 38, 51, 82, 85, 86, 87, 88, 90, 114, 115, 117, 136, 141, 332, 387, 518, 615], "helper": [38, 39, 41, 99, 105, 134, 136, 141, 167, 168, 169, 183, 205, 206, 207, 219, 223, 224, 247, 286, 330, 481], "onnxrt": [38, 167, 169, 176, 177, 178, 181, 184, 205, 207, 214, 215, 216, 218, 220, 234, 235, 276, 277, 330, 390, 391, 406, 408, 415, 468, 522], "dtype_to_nam": 38, "dtype_map": 38, "its": [38, 41, 54, 90, 99, 102, 111, 136, 163, 169, 178, 181, 183, 184, 201, 207, 219, 220, 222, 223, 229, 230, 234, 235, 264, 268, 271, 272, 276, 277, 292, 299, 307, 308, 312, 317, 319, 516, 565, 568, 570, 581, 582, 583, 593, 595, 599, 602, 603, 606, 607, 608, 614, 616, 617], "represent": [38, 50, 240, 352, 353, 355, 358, 362, 363, 366, 367, 369, 371, 372, 498, 516, 518, 571, 608, 611], "quanttyp": 38, "repres": [38, 169, 174, 207, 212, 231, 233, 235, 273, 275, 277, 292, 299, 300, 301, 302, 303, 354, 356, 357, 359, 361, 364, 365, 368, 370, 485, 516, 568, 574, 611, 617], "make_quant_nod": 38, "make": [38, 62, 128, 129, 146, 165, 203, 262, 264, 266, 292, 299, 302, 332, 351, 384, 416, 516, 517, 522, 565, 566, 567, 576, 582, 590, 595, 599, 602, 611, 612, 614, 617], "quantizelinear": [38, 574], "make_dquant_nod": 38, "dequantizelinear": [38, 574], "is_b_transpos": 38, "wheter": 38, "inuput": 38, "transpos": [38, 67, 184, 220, 262, 292, 616], "split_shared_bia": 38, "cast_tensor": 38, "remove_init_from_model_input": 38, "collate_pr": 38, "quantize_data_with_scale_zero": 38, "zero_point": [38, 224, 285, 292], "To": [38, 231, 257, 262, 266, 273, 288, 292, 302, 477, 517, 565, 568, 572, 574, 583, 586, 589, 595, 597, 599, 600, 610, 612, 613, 617, 619], "pack": [38, 55], "comput": [38, 41, 56, 61, 62, 111, 136, 141, 194, 221, 227, 228, 229, 231, 232, 233, 235, 241, 270, 271, 273, 274, 275, 276, 277, 293, 296, 297, 322, 332, 542, 571, 582, 583, 585, 596, 607, 608, 611, 617], "when": [38, 47, 58, 61, 64, 111, 134, 147, 152, 167, 168, 173, 176, 177, 178, 181, 184, 205, 206, 214, 215, 216, 220, 228, 229, 241, 249, 262, 263, 264, 269, 270, 271, 285, 292, 293, 299, 303, 304, 315, 485, 487, 500, 504, 516, 519, 542, 565, 567, 568, 593, 595, 596, 599, 603, 607, 608, 611, 616, 617], "uint8": [38, 152, 180, 217, 231, 273, 321, 522, 568, 576, 610, 611, 616, 619], "ab": [38, 249, 264, 289, 611], "np": [38, 99, 128, 178, 181, 184, 220, 307, 572, 616], "sym": [38, 576, 619], "asym": [38, 576, 619], "calculate_scale_zp": 38, "quantize_data": 38, "necessari": [38, 221, 227, 516, 519, 584, 603, 614, 617], "trasnform": 38, "full": [38, 41, 167, 168, 169, 173, 178, 185, 205, 206, 207, 227, 317, 319, 332, 521, 565, 568, 575, 577, 580, 581, 603], "equat": [38, 233, 235, 275, 277, 611], "r": [38, 64, 129, 146, 243, 565, 580, 603, 606, 611, 620], "": [38, 40, 41, 50, 56, 64, 73, 99, 111, 128, 129, 130, 134, 146, 148, 149, 152, 157, 166, 169, 183, 184, 185, 187, 188, 189, 195, 204, 207, 219, 220, 227, 233, 241, 243, 249, 262, 264, 265, 269, 275, 276, 277, 278, 282, 292, 299, 304, 308, 315, 332, 385, 416, 472, 473, 516, 519, 570, 572, 576, 579, 583, 590, 593, 595, 599, 602, 605, 606, 607, 608, 609, 610, 611, 613, 614, 619], "z": [38, 570], "real": [38, 39, 170, 187, 188, 208, 572, 609, 611], "origin": [38, 39, 130, 141, 142, 144, 167, 184, 185, 205, 220, 227, 240, 249, 254, 259, 262, 263, 264, 265, 292, 293, 294, 296, 297, 298, 299, 300, 303, 308, 312, 321, 332, 335, 517, 568, 590, 607, 608, 611, 616, 617, 619], "quantize_data_per_channel": 38, "tensor_valu": 38, "scale_valu": 38, "zo_valu": 38, "dequantize_data_with_scale_zero": 38, "sacal": 38, "dequantize_data": 38, "valueinfo": 38, "tensor_nam": [38, 134, 285, 286, 287], "new_dtyp": 38, "quantizedvalu": 38, "new_quantized_nam": 38, "scale_nam": 38, "zero_point_nam": 38, "quantized_value_typ": 38, "quint8": 38, "linearli": 38, "intial": 38, "quantizediniti": 38, "quantized_data": 38, "quantizationmod": 38, "quantizedvaluetyp": 38, "quantformat": [38, 224], "quantize_nparrai": 38, "low": [38, 40, 41, 155, 156, 170, 171, 208, 209, 226, 227, 236, 267, 278, 522, 566, 568, 572, 583, 609, 611, 617], "high": [38, 170, 171, 208, 209, 306, 568, 580, 609, 617], "attribute_to_kwarg": 38, "attribut": [38, 56, 77, 99, 111, 128, 141, 149, 194, 267, 403, 404, 408, 468, 485, 522, 567, 576, 578, 610, 619], "kwarg": [38, 39, 41, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 124, 126, 147, 152, 169, 178, 181, 182, 184, 188, 189, 192, 207, 220, 226, 227, 237, 243, 249, 254, 259, 265, 267, 268, 269, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 300, 304, 317, 320, 322, 326, 328, 329, 331, 332, 337, 339, 341, 342, 343, 344, 354, 356, 357, 359, 361, 364, 365, 370, 567], "make_nod": 38, "find_by_nam": 38, "item_list": 38, "find": [38, 61, 62, 64, 134, 156, 235, 251, 252, 276, 277, 285, 307, 315, 332, 433, 503, 521, 522, 565, 588, 595, 599, 602, 603, 607, 614, 615, 617], "item": [38, 149, 183, 219, 263, 303, 315, 317, 319, 385, 473, 506, 572, 617], "get_smooth_scales_per_op": 38, "input_tensors_2_weight": 38, "input_tensors_2_weights_nod": 38, "one": [38, 41, 98, 99, 104, 121, 141, 158, 161, 178, 181, 184, 194, 220, 227, 228, 231, 234, 235, 237, 240, 262, 265, 266, 270, 273, 276, 277, 292, 300, 302, 306, 322, 481, 519, 522, 542, 565, 570, 571, 572, 576, 577, 579, 580, 582, 583, 585, 586, 590, 591, 593, 595, 596, 599, 602, 603, 604, 605, 607, 608, 610, 611, 613, 616, 617], "mul": [38, 48, 59, 60, 61, 63, 64, 73, 114, 117, 145, 574], "correspond": [38, 41, 111, 136, 167, 205, 228, 231, 235, 262, 264, 268, 270, 273, 276, 277, 299, 307, 315, 325, 522, 542, 576, 607, 608, 610, 611, 614, 617], "paper": [38, 139, 249, 570, 607, 608], "get_smooth_scales_per_input": 38, "insert_smooth_mul_op_per_input": 38, "inupt": 38, "new_init_tensor": 38, "new_added_mul_nod": 38, "adjust_weights_per_op": 38, "adjust": [38, 243, 292, 593, 611], "adjustd": 38, "adjust_weights_per_input": 38, "insert_smooth_mul_op_per_op": 38, "befor": [38, 96, 98, 111, 145, 167, 194, 205, 221, 222, 224, 227, 254, 259, 262, 264, 265, 266, 289, 292, 298, 299, 300, 301, 302, 312, 322, 373, 517, 565, 568, 570, 571, 572, 575, 576, 580, 597, 600, 607, 611, 614, 615, 617], "name_2_nod": 38, "get_ops_recurs": 39, "prefix": [39, 134, 135, 140, 185, 227, 228, 270, 500, 585, 590, 615], "graph_info": [39, 41, 279, 280, 281, 285, 286, 287], "templateadaptor": 39, "tampl": 39, "yaml": [39, 40, 41, 149, 155, 156, 167, 169, 185, 194, 205, 207, 221, 226, 227, 237, 238, 239, 250, 251, 254, 259, 267, 268, 278, 303, 304, 331, 332, 333, 337, 338, 339, 340, 341, 343, 344, 346, 347, 431, 433, 440, 445, 449, 452, 455, 487, 498, 522, 578, 582, 604, 607, 610, 615, 616], "file": [39, 99, 128, 134, 144, 148, 155, 156, 167, 168, 169, 172, 173, 178, 181, 183, 184, 190, 193, 205, 206, 207, 210, 219, 220, 221, 224, 226, 227, 231, 237, 238, 239, 240, 241, 243, 250, 251, 254, 259, 263, 265, 267, 268, 273, 278, 287, 288, 300, 303, 304, 328, 331, 332, 337, 338, 339, 340, 341, 342, 343, 344, 396, 433, 442, 446, 456, 472, 479, 480, 486, 487, 488, 500, 504, 508, 510, 512, 513, 519, 522, 565, 572, 575, 578, 581, 582, 584, 588, 597, 600, 601, 602, 603, 604, 607, 610, 615, 616], "is_fused_modul": [39, 136, 141], "_propagate_qconfig_help": [39, 136, 141], "detect": [39, 136, 141, 231, 235, 273, 276, 277, 282, 416, 419, 428, 487, 518, 565, 585, 592, 593], "calculate_hessian_trac": 39, "fp32_model": [39, 41, 134, 136, 141, 222, 224, 287, 312, 332, 522], "q_model": [39, 136, 142, 144, 227, 237, 304, 328, 518, 521, 567, 568, 572, 574, 577, 578, 582, 584, 611, 612], "criterion": [39, 41, 136, 152, 188, 191, 221, 227, 269, 289, 292, 299, 455, 495, 540, 570, 571, 574, 607, 608, 611, 617, 619], "enable_act": [39, 136], "hessian": [39, 136, 310, 617], "trace": [39, 135, 136, 140, 141, 222, 224, 304, 310, 518, 525, 592, 617], "loss": [39, 111, 152, 156, 186, 194, 226, 227, 235, 254, 259, 267, 269, 277, 288, 322, 570, 571, 572, 573, 577, 582, 583, 593, 605, 607, 608, 611, 617, 619], "gradient": [39, 111, 264, 287, 289, 293, 294, 579, 607, 608, 620], "amap": 39, "enabl": [39, 41, 98, 136, 152, 249, 264, 269, 299, 475, 565, 572, 580, 583, 585, 587, 590, 591, 593, 606, 607, 608, 609, 617], "error": [39, 136, 228, 235, 241, 268, 270, 277, 312, 326, 329, 471, 499, 542, 582, 586, 617], "op_nam": [39, 141, 148, 152, 269, 308, 312, 315, 317, 319, 320, 387, 392, 393, 401, 402, 607, 615], "hessian_trac": [39, 136], "calib_it": [39, 139, 142, 144], "force_re_smooth": 39, "calib": 39, "now": [39, 139, 184, 220, 309, 485, 518, 519, 568, 572, 593, 610, 616, 617], "pytorchadaptor": 39, "objext": 39, "number": [39, 61, 62, 136, 141, 142, 144, 157, 165, 168, 173, 178, 180, 181, 184, 195, 203, 206, 217, 220, 232, 233, 235, 242, 251, 262, 274, 275, 276, 277, 292, 293, 298, 299, 302, 307, 325, 332, 419, 475, 485, 488, 565, 566, 568, 572, 582, 607, 611, 614, 616, 617], "summari": [39, 185, 227, 296, 322, 565, 597, 600, 606, 615], "optimizer_tupl": [39, 41], "criterion_tupl": [39, 41], "hook": [39, 41, 136, 155, 186, 193, 194, 221, 227, 254, 259, 287, 315, 325, 570, 571, 607, 615], "optim": [39, 41, 42, 43, 47, 51, 54, 55, 57, 68, 69, 73, 74, 79, 82, 85, 86, 87, 88, 92, 105, 107, 128, 148, 152, 188, 194, 221, 226, 227, 241, 253, 264, 265, 267, 269, 287, 289, 298, 299, 300, 301, 307, 322, 323, 326, 333, 335, 339, 341, 343, 360, 364, 365, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 384, 385, 387, 388, 389, 390, 391, 394, 395, 408, 462, 468, 469, 479, 485, 488, 491, 495, 502, 507, 519, 521, 540, 566, 570, 571, 572, 576, 577, 579, 580, 584, 585, 587, 589, 590, 593, 596, 606, 607, 609, 610, 611, 612, 614, 615, 617, 619], "It": [39, 47, 56, 73, 155, 156, 193, 227, 233, 235, 240, 241, 252, 262, 267, 268, 275, 277, 278, 292, 304, 307, 308, 309, 312, 315, 328, 522, 565, 570, 588, 591, 596, 602, 603, 607, 608, 611, 614, 617, 619], "other": [39, 61, 62, 64, 128, 139, 145, 166, 204, 233, 268, 275, 286, 328, 477, 481, 504, 516, 517, 518, 565, 576, 579, 580, 581, 584, 604, 606, 607, 611, 616, 617, 620], "is_fused_child": 39, "_post_eval_hook": [39, 615], "is_fused_op": 39, "is_last_fused_child": 39, "last": [39, 41, 86, 141, 155, 157, 195, 249, 262, 288, 289, 292, 315, 456, 565, 583, 585, 587, 592, 596, 611], "q_capabl": 39, "get_non_quant_modul": 39, "model_kwarg": 39, "non_quant_modul": 39, "custom": [39, 104, 147, 240, 268, 288, 331, 374, 379, 566, 570, 571, 585, 607, 614], "keyword": 39, "custom_non_quant_dict": 39, "pytorch_ipexadaptor": 39, "intel": [39, 188, 191, 222, 227, 234, 235, 262, 265, 269, 276, 277, 292, 300, 311, 317, 328, 467, 480, 514, 516, 517, 519, 520, 522, 567, 568, 569, 570, 571, 573, 574, 576, 577, 581, 583, 584, 585, 590, 592, 593, 604, 605, 606, 607, 609, 611, 612, 613, 615, 617, 619], "extens": [39, 268, 422, 487, 519, 521, 522, 576, 579, 580, 583, 584, 586, 591, 592, 593, 597, 600, 601, 609, 617, 619], "ipex": [39, 141, 287, 579, 587, 591, 592, 620], "unspport": 39, "best": [39, 156, 178, 181, 184, 220, 221, 226, 227, 238, 239, 250, 251, 267, 288, 306, 312, 315, 516, 519, 580, 585, 591, 602, 604, 611, 616, 617], "No": [39, 575, 606, 609], "pytorch_fxadaptor": 39, "fx": [39, 141, 304, 313, 579, 591, 592, 609, 611, 612, 620], "prepare_sub_graph": 39, "sub_module_list": 39, "fx_op_cfg": 39, "is_qat": [39, 140], "example_input": [39, 141, 152, 222, 224, 287, 574], "method": [39, 99, 111, 128, 129, 141, 160, 165, 166, 167, 169, 173, 176, 177, 178, 181, 184, 187, 188, 198, 203, 204, 205, 207, 211, 214, 215, 216, 218, 220, 227, 234, 235, 240, 243, 249, 251, 252, 253, 257, 267, 276, 277, 279, 280, 301, 317, 319, 325, 326, 328, 329, 472, 477, 481, 499, 518, 519, 521, 568, 570, 571, 582, 605, 607, 608, 611, 612, 616, 617], "sub": [39, 60, 61, 62, 80, 99, 185, 224, 227, 243, 315, 519, 617], "recurs": [39, 317, 319, 332], "traceabl": [39, 518], "qconfigmap": 39, "prepare_fx": 39, "dir": [39, 141, 167, 205, 331, 568, 575, 578], "convert_sub_graph": 39, "fuse_fx_model": 39, "approach": [39, 148, 152, 227, 238, 239, 240, 249, 250, 251, 269, 315, 349, 488, 495, 518, 519, 567, 568, 570, 579, 590, 602, 609, 610, 617, 619], "graphmodul": [39, 141, 518, 612], "torch": [39, 135, 136, 137, 138, 140, 141, 145, 148, 152, 186, 222, 224, 235, 243, 247, 249, 269, 277, 278, 287, 292, 304, 328, 518, 521, 523, 570, 572, 574, 583, 584, 585, 590, 593, 611, 615], "fused_model": 39, "calculate_op_sensit": [39, 41], "output_op_nam": [39, 41], "confidence_batch": [39, 41, 141, 617], "requantize_cfg": [39, 41, 141], "inc": [39, 184, 220, 328, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 495, 516, 521, 585, 592, 602, 609, 610, 613], "switch": [39, 79, 585, 615], "stage": [39, 41, 86, 305, 306, 313, 480, 570, 615, 617], "re": [39, 41, 307, 328, 580, 602], "sort": [39, 41, 128, 285, 306, 312, 396, 617], "sensit": [39, 41, 264, 289, 293, 579, 607, 608], "ops_lst": 39, "pytorchqueri": 39, "3": [40, 64, 73, 104, 134, 169, 173, 178, 181, 184, 207, 211, 216, 218, 220, 231, 243, 273, 477, 518, 519, 521, 565, 567, 568, 570, 572, 574, 576, 577, 580, 582, 583, 585, 589, 593, 595, 599, 604, 607, 610, 611, 614, 616, 617, 620], "conv2d": [40, 46, 53, 54, 55, 59, 60, 65, 66, 73, 114, 124, 129, 139, 576, 615, 617], "get_fuse_pattern": [40, 41], "fusion": [40, 52, 53, 55, 58, 61, 62, 63, 64, 67, 72, 88, 90, 98, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 518, 522, 576], "everi": [40, 61, 62, 64, 262, 264, 265, 292, 299, 300, 522, 590, 595, 599, 607, 608, 617], "set_quantization_config": 40, "organ": [40, 565, 619], "granular": [40, 522, 576, 579, 588, 607, 619], "etc": [40, 147, 183, 194, 219, 221, 226, 227, 233, 241, 242, 254, 259, 267, 269, 275, 278, 304, 331, 570, 579, 614, 617], "get_mixed_precision_combin": [40, 41], "unsupported_precis": 40, "hardwar": [40, 475, 517, 521, 522, 570, 579, 583, 602, 606, 607, 608, 609, 610], "user": [40, 99, 147, 155, 156, 158, 161, 169, 172, 176, 177, 178, 184, 185, 191, 194, 207, 210, 214, 215, 216, 220, 226, 227, 240, 242, 254, 259, 265, 267, 268, 269, 278, 288, 299, 300, 303, 304, 308, 315, 322, 332, 471, 518, 519, 522, 532, 566, 570, 571, 576, 579, 582, 583, 584, 585, 586, 587, 589, 590, 591, 593, 596, 602, 604, 605, 607, 609, 611, 612, 613, 615, 616, 617, 621], "tensorflowadaptor": 41, "stock": [41, 591], "spr": 41, "graphdef": [41, 50, 51, 54, 55, 57, 61, 62, 64, 68, 73, 79, 85, 86, 87, 88, 99, 121, 128, 134, 286, 465, 584], "could": [41, 61, 62, 139, 145, 155, 156, 169, 207, 268, 278, 292, 300, 304, 315, 516, 518, 571, 605, 607, 608, 611], "graph_def": [41, 47, 99, 134, 278, 286, 304, 430, 465, 466], "frozen": [41, 50, 278, 286, 304, 424, 427, 565, 584], "pb": [41, 147, 152, 278, 286, 304, 424, 427, 438, 521, 566, 572, 577, 584, 615, 620], "ckpt": [41, 134, 278, 286, 304, 620], "savedmodel": [41, 278, 286, 304, 620], "folder": [41, 134, 169, 174, 207, 212, 278, 304, 331, 568, 590, 595, 599, 615], "callback": [41, 254, 259, 322, 323, 325, 326, 503, 518, 605, 607, 611], "on_epoch_begin": [41, 194, 227, 254, 259, 264, 265, 293, 296, 297, 298, 299, 300, 322, 325, 570, 571, 605, 607], "on_epoch_end": [41, 194, 227, 254, 259, 264, 265, 293, 296, 297, 298, 299, 300, 322, 325, 570, 571, 605, 607], "larger": [41, 292], "better": [41, 90, 155, 156, 252, 278, 288, 304, 314, 571, 582, 583, 607, 608, 609, 611, 614, 617], "tf": [41, 105, 111, 134, 166, 167, 168, 169, 173, 178, 181, 184, 204, 205, 206, 207, 220, 284, 286, 335, 565, 572, 584, 609, 612, 616], "compat": [41, 75, 134, 231, 240, 273, 286, 572, 584, 597, 600, 602, 613], "definit": [41, 99, 160, 165, 198, 203, 401, 414, 423, 472, 503], "inspect_weight_and_bia": 41, "node_list": 41, "graph_node_name_map": [41, 134], "bias": 41, "fused_node_map": 41, "pattern_map": 41, "between": [41, 129, 136, 146, 178, 181, 184, 186, 220, 232, 234, 235, 240, 242, 243, 274, 276, 277, 299, 387, 499, 503, 518, 522, 570, 574, 579, 582, 593, 608, 611, 613, 614, 616, 617], "sequenc": [41, 57, 73, 167, 178, 181, 183, 184, 205, 219, 220, 228, 229, 233, 262, 270, 271, 275, 285, 292, 522, 542, 568, 576, 608, 616], "val": [41, 134, 169, 172, 207, 210, 263, 303], "seq": 41, "fused_mapping_revers": 41, "fused_map": 41, "inspect_activ": 41, "local": [41, 262, 292, 299, 315, 328, 332, 347, 379, 384, 397, 417, 565, 595, 599, 608, 614], "actual": [41, 235, 277, 288, 572], "4": [41, 47, 73, 147, 152, 176, 177, 178, 179, 180, 181, 184, 214, 215, 216, 217, 218, 220, 228, 229, 231, 270, 271, 273, 292, 308, 477, 516, 522, 542, 565, 566, 572, 573, 575, 576, 577, 579, 580, 582, 590, 606, 607, 616, 617, 620], "tensorflowbasemodel": [41, 286, 428], "start": [41, 178, 181, 184, 220, 228, 231, 242, 270, 273, 285, 288, 299, 305, 308, 480, 500, 580, 616, 617, 621], "quantizedv2": 41, "move": [41, 72, 518, 610, 613], "quantizedconv2d": 41, "qat_convert": 41, "quantize_recip": [41, 104, 105], "kera": [41, 64, 105, 111, 191, 281, 286, 408, 415, 425, 572, 584, 592, 593, 620], "expect": [41, 111, 169, 207, 307, 335, 457, 480, 516, 517, 575, 602, 611, 617], "sequenti": [41, 165, 203, 268, 306, 309, 617], "decid": [41, 104, 105, 152, 229, 264, 269, 271, 396, 522, 613, 617], "fake": [41, 102, 139, 145, 611], "converted_model": [41, 152, 278, 583], "diagnosis_help": [41, 522], "quan_model": [41, 134], "diagnosi": [41, 134, 269, 376, 379, 385, 408, 468, 497, 503], "get_output_op_nam": 41, "qmodel": [41, 136], "oupur": 41, "mse": [41, 141, 152, 235, 269, 277, 311, 387, 393, 565, 582, 610, 613], "backup": 41, "fallen": 41, "denot": 41, "tensorflow_itexadaptor": 41, "itex": [41, 98], "tensorflowqueri": [41, 522], "performance_onli": [41, 42, 43, 96, 120, 125, 133, 497], "itex_mod": [41, 42, 73, 83, 96, 120, 125], "quant_mod": [41, 315, 317, 319], "get_bf16_pattern": 41, "get_eightbit_pattern": 41, "qdq_enabl": [41, 42], "eightbit": [41, 615], "generate_internal_pattern": 41, "translat": [41, 228, 229, 240, 243, 246, 248, 270, 271, 542], "intern": [41, 99, 136, 247, 317, 319, 471, 567, 568, 608], "express": [41, 228, 270, 516], "graphconvert": 42, "qt_config": 42, "recip": [42, 104, 152, 222, 224, 226, 227, 267, 269, 574, 617], "int8_sequ": 42, "fp32_op": [42, 44, 96, 99], "bf16_op": [42, 44, 96, 99, 612], "fake_qu": [42, 82, 96, 120, 125], "new_api": [42, 43, 65, 66, 71, 73, 86, 93, 120, 125, 129], "use_bf16": [42, 43, 610], "fp32_frozen_graph": 42, "requantizeop": [42, 43], "so": [42, 43, 111, 178, 181, 184, 220, 264, 322, 328, 518, 522, 575, 579, 582, 588, 590, 611, 612, 615, 616], "self": [42, 57, 86, 152, 227, 231, 254, 264, 269, 273, 288, 307, 315, 500, 522, 565, 567, 568, 579, 582, 614, 615, 617], "empti": [42, 104, 231, 273, 307, 588], "without": [42, 43, 84, 99, 134, 184, 220, 231, 264, 273, 299, 321, 487, 516, 565, 567, 570, 572, 582, 593, 607, 609, 610, 611, 617], "bf16_node": [42, 43], "quantize_with_qdq_pattern": 42, "newapi": [42, 88], "graphconverterwithoutcalib": 43, "recover_config": 43, "convert_without_calib": 43, "quantize_without_calib": 43, "rewrit": [44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], "bf16convert": [44, 612], "graphrewriterbas": [44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98], "do_transform": [44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 113, 120, 121, 125, 129, 130, 132, 133], "biasadd": [46, 53, 58, 60, 73, 98, 114, 115, 117, 124, 126, 576], "convertaddtobiasaddoptim": 46, "addv2": [46, 62, 63, 64, 114, 117, 576], "layout": 47, "convertlayoutoptim": 47, "nchw": 47, "nhwc": [47, 61, 62], "abov": [47, 231, 273, 522, 607], "leakyrelu": [48, 112, 114, 116, 117, 122], "convertleakyreluoptim": 48, "below": [48, 60, 61, 62, 68, 73, 268, 306, 308, 313, 517, 518, 521, 522, 565, 567, 570, 572, 578, 582, 585, 587, 595, 596, 599, 602, 604, 605, 607, 610, 611, 614, 615, 617], "subgraph": [48, 56, 60, 61, 62, 64, 140, 574], "coeffici": [48, 241, 608], "less": [48, 73, 134, 332, 566, 570, 607], "than": [48, 56, 134, 167, 178, 181, 184, 205, 220, 231, 273, 288, 332, 519, 521, 566, 568, 578, 582, 604, 605, 607, 608, 611, 614, 616, 617], "small": [48, 61, 62, 63, 231, 273, 310, 519, 565, 617], "nan": 49, "random": [49, 128, 134, 152, 178, 180, 181, 184, 217, 220, 240, 253, 269, 307, 311, 326, 332, 497, 517, 519, 610, 616, 619], "convertnantorandom": 49, "const": [49, 50, 57, 58, 61, 62, 64, 76, 79, 91, 92, 99, 269, 352, 363, 366, 373, 379, 381, 382, 386, 468, 476, 486], "consist": [49, 57, 249, 517, 518, 565, 574, 617], "placehold": [50, 165, 203], "convertplaceholdertoconst": 50, "renam": [50, 75, 249, 613], "placeholderwithdefault": 50, "constant": [50, 56, 73, 99, 128, 222, 224, 269, 285, 287, 307, 311, 317, 326, 469, 567, 576, 616], "help": [50, 193, 237, 285, 349, 487, 584, 585, 591, 602, 617], "simplifi": [50, 585, 596, 602], "input_graph_def": [50, 51, 54, 55, 57, 61, 62, 64, 68, 79, 99, 128], "nodes_to_convert": 50, "strtobool": 50, "val_str": 50, "equival": [50, 77, 240], "rerewrit": 51, "dequantizecastoptim": 51, "b16": 51, "redund": [51, 85, 87, 121], "dilat": 52, "contract": 52, "dilatedcontract": 52, "spacetobatchnd": 52, "batchtospacend": 52, "inject": 53, "dummi": [53, 170, 171, 208, 209, 225, 235, 277, 379, 383, 489, 521, 565, 568, 577, 582], "injectdummybiasaddoptim": 53, "miss": [53, 345, 607, 611], "behind": 53, "them": [53, 56, 99, 167, 205, 518, 567, 576, 578, 605, 607, 617], "expanddim": 54, "expanddimsoptim": 54, "next": [54, 138, 160, 198, 225, 251, 266, 302, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 519, 565, 610, 617], "featch": 55, "fetchweightfromreshapeoptim": 55, "fetch": [55, 141, 144, 160, 198, 231, 273, 568], "fold": [56, 57, 61, 62, 73, 222, 224, 287, 576], "batchnorm": [56, 61, 110, 518], "foldbatchnormnodesoptim": 56, "scale_after_norm": 56, "batchnormwithglobalnorm": 56, "nodedef": [56, 61, 62, 64, 99, 128, 130, 465], "normal": [56, 61, 62, 64, 178, 181, 184, 220, 233, 275, 487, 604, 616], "convolut": [56, 61, 62, 570, 607, 609], "multipl": [56, 61, 62, 104, 153, 154, 158, 159, 167, 168, 170, 171, 172, 173, 174, 178, 181, 184, 191, 196, 197, 199, 205, 206, 208, 209, 210, 211, 212, 216, 218, 220, 236, 264, 278, 279, 280, 282, 288, 293, 299, 306, 472, 566, 568, 574, 605, 607, 614, 617], "dynam": [56, 99, 157, 195, 222, 224, 268, 287, 317, 319, 340, 522, 567, 570, 574, 579, 585, 590, 591, 592, 593, 596, 602, 609, 617, 620], "onc": [56, 99, 134, 139, 191, 266, 302, 306, 565, 567, 602, 607, 608, 609, 617, 620], "final": [56, 264, 292, 299, 479, 588, 604, 607, 608, 611, 613, 617], "becom": [56, 522, 574, 608], "That": [56, 565], "mean": [56, 61, 62, 64, 139, 157, 178, 180, 181, 184, 195, 217, 220, 231, 233, 235, 241, 243, 249, 262, 273, 275, 276, 277, 285, 288, 292, 312, 518, 567, 572, 576, 582, 588, 607, 608, 611, 616, 617, 619], "opportun": [56, 61, 62], "reduc": [56, 61, 62, 257, 292, 522, 571, 583, 602, 603, 608, 609, 611, 612, 617, 619], "down": [56, 596], "addit": [56, 62, 64, 141, 155, 322, 472, 565, 570, 596, 613], "rather": [56, 578], "more": [56, 128, 134, 139, 145, 155, 178, 181, 184, 220, 231, 247, 249, 262, 273, 292, 315, 519, 520, 521, 565, 568, 570, 572, 577, 579, 580, 582, 583, 585, 593, 597, 600, 604, 605, 607, 608, 612, 617, 620], "expens": [56, 570, 617], "bake": 56, "identifi": [56, 61, 62, 64, 231, 273, 286, 328], "typic": [56, 104, 111, 227, 237, 268, 519, 521, 571, 573, 577, 607, 608], "simpler": 56, "form": [56, 61, 62, 64, 75, 231, 233, 273, 275, 379, 381, 480, 565, 570, 602], "spot": 56, "fusedbatchnorm": [56, 61, 75], "fusedbatchnormv3": [56, 112, 122], "_fusedbatchnormex": 56, "extend": [56, 61, 62], "futur": [56, 145, 155, 156, 187, 188, 579, 583, 593], "newer": [56, 61, 62], "style": [56, 160, 174, 198, 212, 517, 568, 578], "rais": [56, 61, 62, 64, 75, 99, 186, 228, 231, 234, 235, 262, 263, 264, 270, 273, 276, 277, 278, 292, 299, 303, 307, 487, 500, 521, 542, 607, 608], "valueerror": [56, 61, 62, 64, 75, 99, 228, 231, 235, 270, 273, 277, 542, 575], "If": [56, 61, 62, 64, 68, 75, 99, 147, 155, 156, 169, 178, 181, 184, 207, 220, 231, 243, 262, 263, 264, 273, 278, 304, 305, 517, 518, 565, 566, 568, 572, 574, 580, 581, 582, 583, 588, 596, 597, 600, 602, 604, 611, 614, 615, 616, 617], "badli": [56, 61, 62, 64, 75], "duplic": [56, 61, 62, 64, 92, 97, 307], "graphfoldconstantoptim": 57, "supported_op_typ": 57, "check_all_fold": 57, "been": [57, 183, 219, 228, 242, 262, 264, 270, 292, 299, 517, 519, 542, 565, 570, 583, 602], "complet": [57, 317, 319, 522, 565, 617, 619, 620], "check_const_input": 57, "node_nam": [57, 61, 62, 64, 73, 99, 121, 128, 130, 134, 224, 285, 286, 367, 465], "fusebiasaddandaddoptim": 58, "columnwis": 59, "fusecolumnwisemuloptim": 59, "depthwiseconv2dn": [59, 65, 66, 114, 124, 576], "math": [60, 611], "fuseconvwithmathoptim": 60, "elimin": 60, "realdiv": [60, 63], "decompos": [61, 62], "fusedecomposedbnoptim": 61, "some": [61, 62, 104, 155, 167, 194, 205, 227, 263, 315, 487, 565, 568, 580, 582, 604, 607, 608, 611, 612, 615, 617], "normalizatin": [61, 62], "via": [61, 62, 111, 226, 227, 254, 259, 267, 504, 516, 572, 579, 585, 602], "group": [61, 62, 294, 301, 404, 579, 607, 608, 615, 616, 617, 620], "instead": [61, 62, 149, 166, 204, 332, 588, 590, 593], "singl": [61, 62, 114, 115, 121, 123, 124, 160, 167, 183, 184, 198, 205, 219, 220, 231, 240, 242, 264, 266, 273, 289, 302, 307, 368, 385, 404, 472, 506, 518, 568, 580, 607, 608], "made": [61, 62, 64, 241, 243, 310, 522, 611, 613, 617], "those": [61, 62, 68, 312, 332, 570, 571, 578, 605, 607, 608, 611, 617], "provid": [61, 62, 99, 111, 155, 156, 178, 181, 184, 194, 216, 218, 220, 226, 227, 231, 240, 249, 254, 259, 267, 268, 273, 278, 304, 326, 328, 396, 416, 422, 472, 481, 506, 519, 521, 522, 565, 566, 567, 571, 572, 573, 574, 579, 580, 583, 584, 585, 589, 593, 596, 602, 603, 607, 610, 611, 615, 617, 619, 620], "further": [61, 62, 64, 516, 583, 584, 585, 587, 596, 602], "recogn": [61, 62, 228, 270], "seen": [61, 62, 332, 522], "also": [61, 62, 166, 169, 173, 178, 184, 204, 207, 211, 216, 220, 228, 270, 288, 292, 304, 313, 314, 517, 519, 522, 542, 565, 567, 573, 577, 579, 582, 585, 590, 595, 596, 599, 602, 603, 604, 607, 611, 612, 617], "attempt": [61, 62, 328], "multipli": 61, "rsqrt": [61, 62], "varianc": [61, 129, 146], "epsilon": [61, 619], "gamma": [61, 62, 64], "OR": 61, "mul_0": 61, "appli": [61, 69, 83, 84, 88, 90, 92, 93, 94, 102, 112, 113, 114, 115, 116, 117, 120, 122, 123, 124, 125, 126, 129, 133, 194, 227, 229, 262, 264, 271, 287, 292, 296, 299, 516, 565, 585, 587, 593, 602, 605, 607, 608, 611, 612, 614, 617, 619], "mul_1": 61, "insid": [61, 231, 273, 570, 571, 603, 607, 617], "end": [61, 99, 134, 167, 178, 181, 183, 184, 194, 205, 219, 220, 227, 240, 264, 265, 288, 293, 297, 298, 299, 300, 306, 322, 522, 570, 571, 576, 580, 596, 604, 607, 608, 615, 616, 617], "mul_3": 61, "batchnorma": 61, "node_name_from_input": [61, 62, 64, 99, 128, 130], "strip": [61, 62, 64, 73, 77, 78, 134, 615], "off": [61, 62, 64, 517], "port": [61, 62, 64, 128, 500, 504, 565], "underli": [61, 62, 64, 241], "node_from_map": [61, 62, 64], "node_map": [61, 62, 64], "pull": [61, 62, 64, 480], "def": [61, 62, 64, 121, 152, 155, 156, 304, 518, 522, 567, 568, 570, 571, 572, 582, 611, 615, 617], "entri": [61, 62, 64, 121, 136, 139, 191, 226, 268, 350, 393, 396, 479, 487, 581], "index": [61, 62, 64, 104, 111, 160, 165, 169, 173, 178, 185, 198, 203, 207, 211, 216, 227, 252, 285, 288, 332, 504, 568, 582, 603], "want": [61, 62, 64, 99, 165, 167, 203, 205, 264, 308, 322, 518, 522, 565, 568, 572, 580, 582, 590, 602, 603, 604, 614, 615, 617], "isn": [61, 62, 64, 99], "present": [61, 62, 64, 565, 609], "values_from_const": [61, 62, 64, 99], "node_def": [61, 62, 64, 99], "extract": [61, 62, 64, 99, 169, 207, 321, 506, 568], "access": [61, 62, 64, 99, 111, 149, 328, 332, 471, 487, 500, 504, 565, 597, 600], "valid_reshape_input": [61, 62], "reshape_in0_ndef": [61, 62], "reshape_in1_ndef": [61, 62], "bypass_reshap": [61, 62], "input_node_map": [61, 62], "get_const_dim_count": [61, 62], "dimens": [61, 62, 159, 178, 181, 184, 197, 220, 243, 258, 292, 307, 568, 570, 607, 616], "instancenorm": 62, "fusedecomposedinoptim": 62, "instanc": [62, 102, 104, 105, 111, 155, 156, 167, 185, 205, 227, 232, 233, 235, 238, 250, 251, 274, 275, 277, 278, 293, 294, 296, 297, 298, 304, 307, 315, 322, 352, 391, 395, 419, 428, 495, 516, 518, 522, 565, 566, 587, 593, 619, 620], "search": [62, 64, 73, 148, 155, 156, 226, 227, 228, 238, 239, 240, 242, 243, 250, 251, 252, 253, 267, 270, 307, 309, 310, 314, 374, 375, 402, 521, 542, 551, 565, 577, 579, 582, 585, 586, 596, 609, 615, 617], "contraint": [62, 64], "ani": [62, 64, 111, 128, 136, 221, 227, 231, 233, 249, 273, 275, 315, 317, 318, 328, 334, 335, 337, 339, 341, 342, 343, 344, 345, 346, 347, 349, 350, 352, 353, 355, 362, 363, 364, 365, 366, 367, 369, 372, 374, 375, 385, 387, 392, 393, 396, 398, 404, 413, 416, 419, 423, 426, 427, 428, 430, 433, 435, 438, 442, 446, 448, 451, 454, 457, 460, 465, 466, 472, 473, 475, 477, 479, 480, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 503, 504, 511, 512, 516, 517, 521, 565, 567, 572, 585, 590, 603, 614], "clang": 62, "x____________": 62, "mean1": 62, "fusedop": [62, 64], "_mklfusedinstancenorm": 62, "_mkllayernorm": [62, 64], "squareddiff": 62, "mean0": 62, "mul1": 62, "constx": 62, "mul2": 62, "mul0": 62, "gelu": [63, 117], "fusegeluoptim": 63, "sqrt": 63, "erf": 63, "samll": 64, "layernorm": [64, 249], "fuselayernormoptim": 64, "remap": 64, "smaller": [64, 178, 181, 184, 220, 570, 607, 608, 616], "case": [64, 68, 166, 178, 181, 183, 184, 185, 204, 219, 220, 226, 227, 235, 254, 259, 267, 268, 277, 288, 477, 481, 487, 565, 567, 570, 571, 572, 576, 578, 582, 586, 590, 602, 603, 604, 607, 609, 611, 613, 616, 619, 620], "fusedbatcnormv3": 64, "And": [64, 194, 227, 518, 566, 588], "restrict": [64, 607, 608, 614], "2d": 64, "3d": [64, 609], "fill": [64, 354, 356, 357, 359, 361, 364, 365, 370, 565, 602, 614, 616], "f": [64, 570, 572, 611], "u": [64, 129, 146, 521, 585], "d": [64, 68, 240, 570, 578, 603, 608, 620], "c": [64, 68, 169, 207, 565, 568, 575, 580, 608, 617], "h": [64, 184, 220, 572, 616], "n": [64, 168, 178, 181, 184, 206, 220, 229, 262, 271, 292, 475, 568, 570, 607, 608, 616], "v": [64, 593, 602, 619], "fusepadwithconv2doptim": 65, "excluded_op_nam": [65, 66, 148, 152, 269, 607], "itex_qdq_mod": [65, 66], "conv3d": [65, 66, 114], "fusepadwithfp32conv2doptim": 66, "fusetransposereshapeoptim": 67, "cse": [68, 92], "graphcseoptim": 68, "introduc": [68, 517, 522, 574, 576, 607, 608, 611, 613, 617], "ident": [68, 73, 74, 99, 128, 262, 292, 516, 570], "three": [68, 167, 205, 227, 254, 259, 265, 300, 306, 518, 522, 565, 567, 574, 580, 583, 596, 605, 611, 612, 614, 615, 617], "child": [68, 615], "b1": 68, "c1c2": 68, "d1": [68, 332], "c1": 68, "c2": 68, "bound": [68, 184, 185, 220, 227, 231, 240, 273, 307, 582, 616], "relu6": [68, 114, 117, 576], "multi": [68, 73, 185, 227, 231, 242, 247, 249, 273, 288, 313, 345, 519, 567, 568, 579, 604, 617], "elim": [68, 73], "grappler": [69, 576], "grappleroptim": 69, "input_output_nam": 69, "opt_cfg": 69, "python": [69, 111, 134, 169, 188, 207, 227, 231, 269, 273, 332, 435, 514, 517, 518, 565, 568, 572, 580, 587, 593, 596, 602, 609, 616], "wrapper": [69, 111, 135, 166, 178, 181, 184, 186, 187, 188, 189, 190, 204, 216, 218, 220, 231, 235, 273, 276, 277, 280, 282, 286, 504, 512, 612], "leverag": [69, 519, 521, 570, 585, 602, 605, 611], "built": [69, 111, 147, 153, 154, 158, 163, 167, 168, 173, 175, 177, 178, 180, 181, 184, 188, 189, 191, 196, 199, 201, 205, 206, 211, 213, 215, 216, 217, 218, 220, 268, 269, 276, 277, 280, 284, 288, 519, 522, 568, 572, 595, 599, 604, 616, 617, 619], "convert_add_to_biasadd": [70, 81, 100], "convert_layout": [70, 81, 100], "convert_leakyrelu": [70, 81, 100], "convert_nan_to_random": [70, 81, 100], "convert_placeholder_to_const": [70, 81, 100], "dequantize_cast_optim": [70, 81, 100], "dilated_contract": [70, 81, 100], "dummy_biasadd": [70, 81, 100], "expanddims_optim": [70, 81, 100], "fetch_weight_from_reshap": [70, 81, 100], "fold_batch_norm": [70, 81, 100], "fold_const": [70, 81, 100], "fuse_biasadd_add": [70, 81, 100], "fuse_column_wise_mul": [70, 81, 100], "fuse_conv_with_math": [70, 81, 100], "fuse_decomposed_bn": [70, 81, 100], "fuse_decomposed_in": [70, 81, 100], "fuse_gelu": [70, 81, 100], "fuse_layer_norm": [70, 81, 100], "fuse_pad_with_conv": [70, 81, 100], "fuse_pad_with_fp32_conv": [70, 81, 100], "fuse_reshape_transpos": [70, 81, 100], "graph_cse_optim": [70, 81, 100], "grappler_pass": [70, 81, 100], "insert_print_nod": [70, 81, 100], "move_squeeze_after_relu": [70, 81, 100], "pre_optim": [70, 81, 100], "remove_training_nod": [70, 81, 100, 128], "rename_batch_norm": [70, 81, 100], "split_shared_input": [70, 81, 100, 128], "strip_equivalent_nod": [70, 81, 100, 134], "strip_unused_nod": [70, 81, 100, 134], "switch_optim": [70, 81, 100], "print": [71, 136, 235, 277, 287, 332, 565, 572, 582, 607, 617], "insertprintminmaxnod": 71, "pre_node_nam": 71, "post_node_nam": 71, "pass": [71, 73, 75, 134, 147, 183, 219, 227, 247, 249, 254, 259, 265, 268, 300, 332, 430, 486, 499, 500, 518, 522, 566, 568, 570, 571, 572, 574, 578, 582, 603, 607, 610, 611, 612, 619], "sampl": [71, 99, 136, 157, 160, 165, 167, 168, 169, 173, 178, 180, 181, 184, 195, 198, 203, 205, 206, 207, 211, 216, 217, 220, 234, 235, 252, 276, 277, 307, 363, 419, 488, 519, 521, 568, 573, 579, 603, 611, 616, 617, 619, 620], "squeez": [72, 518], "movesqueezeafterreluoptim": 72, "match": [72, 73, 99, 111, 183, 219, 231, 232, 273, 274, 285, 570, 603], "pre": [73, 105, 155, 156, 167, 205, 248, 278, 287, 304, 568, 570, 571, 583, 590, 607, 608, 609, 611, 615, 617], "entranc": [73, 158, 161, 178], "preoptim": 73, "get_excluded_node_nam": 73, "exclud": [73, 247, 249, 285, 522, 612], "get_optimized_model": 73, "non": [73, 111, 191, 263, 332, 518, 606, 607, 617], "possibl": [73, 185, 227, 240, 305, 306, 309, 349, 416, 565, 605, 612, 617], "useless": 73, "6": [73, 565, 576, 611, 617, 620], "common": [73, 128, 182, 227, 237, 243, 251, 252, 253, 262, 268, 269, 292, 325, 480, 481, 487, 516, 568, 571, 572, 574, 578, 580, 611], "7": [73, 128, 147, 152, 288, 566, 575, 576, 580, 611, 613, 617, 620], "get_matched_nod": 73, "illustr": [73, 571], "matched_node_a_nam": 73, "has_positive_input": [73, 99], "posit": [73, 99, 184, 220, 249, 292, 516, 565, 582, 585], "neg": [73, 99], "removetrainingnodesoptim": 74, "protected_nod": [74, 128], "types_to_splic": [74, 128], "checknumer": [74, 128], "stopgradi": 74, "tranin": 74, "edg": [74, 285, 401, 403, 408, 468, 616], "fusedbatchnormv2": 75, "renamebatchnormoptim": 75, "due": [75, 607, 608, 611, 615], "histor": 75, "reason": [75, 187, 188, 309, 516, 567, 615, 617], "As": [75, 231, 273, 314, 518, 565, 567, 570, 596, 607, 608, 617], "latter": [75, 104], "former": 75, "chang": [75, 90, 129, 139, 146, 264, 266, 299, 302, 307, 310, 332, 347, 353, 456, 478, 485, 517, 567, 572, 575, 581, 582, 585, 595, 596, 599, 602, 608, 615, 616, 617], "platform": [75, 332, 475, 521, 579, 585, 593, 609, 611, 620], "vnni_bf16": 75, "amx": [75, 521, 609], "instruct": [75, 565, 570, 580, 583, 597, 600, 609, 610, 611], "splitsharedinputoptim": 76, "stripequivalentnodesoptim": 77, "output_node_nam": [77, 78, 120, 121, 125, 128, 134, 286], "unus": [78, 134, 240, 249, 285], "stripunusednodesoptim": 78, "input_node_nam": [78, 120, 125, 128, 134, 286], "switchoptim": 79, "condit": [79, 167, 168, 169, 173, 178, 181, 184, 205, 206, 207, 220, 306, 568, 581, 616, 617], "enter": [79, 596, 602], "freeze_fake_qu": [81, 89, 100], "freeze_valu": [81, 89, 100], "freeze_value_without_calib": [81, 89, 100], "fuse_conv_redundant_dequant": [81, 89, 100], "fuse_conv_requant": [81, 89, 100], "fuse_matmul_redundant_dequant": [81, 89, 100], "fuse_matmul_requant": [81, 89, 100], "meta_op_optim": [81, 89, 100], "post_hostconst_convert": [81, 89, 100], "post_quantized_op_cs": [81, 89, 100], "rnn_convert": [81, 89, 100], "scale_propag": [81, 89, 100], "insert_qdq_pattern": [81, 95, 100], "merge_duplicated_qdq": [81, 95, 100], "share_qdq_y_pattern": [81, 95, 100], "freez": [82, 83, 84, 585, 607, 608], "fakequ": 82, "freezefakequantopoptim": 82, "freezevaluetransform": 83, "max_min_data": [83, 84], "postfix": [83, 84], "tensor_data": [83, 332], "th": [83, 84], "gpu": [83, 84, 91, 99, 128, 521, 566, 579, 587, 593, 602, 610, 611], "generate_output_graph": [83, 84], "max_name_valu": [83, 84], "freeze_max": [83, 84], "freeze_min": [83, 84], "generate_output_graph_rang": [83, 84], "freezevaluewithoutcalibtransform": 84, "95": [84, 231, 235, 273, 276, 277, 582, 620], "do_transformation_without_calib": 84, "quantizedconv": [85, 86], "quantizeddeconv": 85, "fuseconvredundantdequantizetransform": 85, "cpu": [85, 86, 87, 88, 99, 128, 152, 243, 269, 332, 521, 566, 579, 583, 585, 587, 593, 602, 606, 609, 610, 612, 615], "_quantizedconv": 85, "_quantizeddeconv": 85, "successor": [85, 86, 87, 88], "requant": [86, 88, 615], "fuseconvrequantizetransform": 86, "two": [86, 99, 136, 169, 173, 174, 178, 185, 207, 211, 212, 216, 231, 262, 266, 268, 273, 292, 299, 302, 313, 332, 518, 519, 565, 568, 570, 572, 576, 582, 583, 607, 611, 612, 614, 617, 619], "fuse_pattern": 86, "sum_pattern": 86, "quantizedmatmul": [87, 88], "fusematmulredundantdequantizetransform": 87, "_quantizedmatmul": [87, 88], "fusematmulrequantizedequantizetransform": 88, "quantizedmatmulwithbiasanddequant": 88, "fusematmulrequantizetransform": 88, "fusematmulrequantizedequantizenewapitransform": 88, "fusematmulrequantizenewapitransform": 88, "meta": [90, 169, 207, 609], "metainfochangingmemopoptim": 90, "metaop": 90, "With": [90, 288, 518, 522, 567, 590, 595, 599, 603, 604, 607, 609, 611, 614, 617, 620], "quantizev2": [90, 92, 114, 115, 117, 121], "hostconst": 91, "posthostconstconvert": 91, "postcseoptim": 92, "decreas": 92, "size": [92, 99, 139, 157, 159, 160, 166, 169, 173, 175, 177, 178, 180, 181, 184, 195, 197, 198, 204, 207, 211, 213, 216, 217, 220, 231, 240, 243, 249, 262, 273, 285, 288, 292, 332, 352, 362, 363, 485, 487, 488, 516, 565, 567, 568, 572, 575, 602, 603, 604, 607, 608, 616, 619, 620], "rnn": [93, 99], "quantizedrnnconvert": 93, "calibration_data": [93, 96], "rnn_detail": 93, "scalepropagationtransform": 94, "direct": [94, 262, 292, 437], "algrothim": 94, "generategraphwithqdqpattern": 96, "op_wise_config": [96, 120, 125, 317, 318], "quantized_nod": 96, "quantizaiton": 96, "mergeduplicatedqdqoptim": 97, "y": [98, 184, 220, 307, 588, 616], "shareqdqforitexypatternoptim": 98, "break": [98, 572], "graphanalyz": 99, "extend_engin": 99, "analyz": [99, 128, 286, 607, 608, 614, 615], "under": [99, 111, 169, 207, 331, 519, 565, 568, 581, 582, 585, 590, 591, 602, 605, 607, 608, 611, 615, 617], "singleton": [99, 269, 332, 468, 476], "getter": [99, 194, 221, 227, 251, 254, 259, 267, 268, 287, 417], "_graph": 99, "retrun": 99, "get_graph_input_output": 99, "sometim": [99, 128, 518, 607, 611], "doesn": [99, 178, 181, 184, 220, 268, 486, 522, 572, 603, 619], "know": [99, 187, 188, 221, 227, 254, 259, 473, 572, 613], "clearli": 99, "similar": [99, 249, 610, 617, 619], "featur": [99, 136, 152, 167, 168, 180, 184, 186, 205, 206, 217, 220, 249, 269, 517, 521, 566, 567, 569, 570, 583, 584, 585, 589, 590, 593, 602, 608, 609, 613, 616], "summarize_graph": 99, "py": [99, 134, 136, 229, 231, 232, 233, 264, 271, 273, 274, 275, 299, 503, 518, 522, 565, 572, 580, 587, 589, 590, 591, 597, 600, 611, 613, 615], "writtern": 99, "googl": [99, 521, 583, 609], "query_fusion_pattern_nod": 99, "public": [99, 516, 597, 600], "aggreg": [99, 481], "statu": [99, 352, 363, 366, 371, 373, 379, 381, 382, 470, 483, 499, 512, 516, 567, 604], "pleas": [99, 136, 139, 145, 167, 168, 169, 172, 173, 178, 205, 206, 207, 210, 227, 254, 259, 262, 264, 265, 289, 292, 300, 518, 519, 520, 521, 522, 565, 566, 568, 571, 572, 580, 582, 583, 585, 586, 590, 593, 607, 608, 612, 613, 614, 617], "_search_pattern": 99, "remove_node_with_single_input_output": 99, "rebuild": [99, 586, 595, 599], "structur": [99, 264, 299, 320, 412, 579, 601, 603, 607, 608, 611, 615, 620], "except": [99, 269, 332, 468, 476, 477, 487, 502, 512], "fail": [99, 481, 518], "remove_nod": [99, 285], "replace_const_nod": 99, "new_const_nod": 99, "target_nod": 99, "old_constant_node_nam": 99, "replace_al": 99, "outdat": 99, "replace_constant_graph_with_constant_nod": 99, "new_nod": 99, "old_end_node_nam": 99, "replace_single_nod": 99, "old_output_node_nam": 99, "old_output_nam": [99, 285], "old_input_node_nam": 99, "old_input_nam": [99, 285], "would": [99, 292, 517, 583, 607, 608, 611], "top": [99, 184, 220, 226, 227, 235, 254, 259, 267, 276, 277, 582, 602, 616, 620], "bottom": [99, 565], "replace_nod": 99, "old_node_nam": 99, "output_nodes_nam": 99, "node_name_detail": 99, "parent": [99, 258, 264, 266, 285, 299, 302, 615], "add_nod": [99, 285, 401], "start_node_nam": 99, "end_node_nam": 99, "dump_graph": 99, "get_frame_info": 99, "frame": 99, "ordereddict": [99, 315, 321, 374, 379, 488], "parent_frame_detail": 99, "parse_graph": 99, "outputnod": 99, "graphrewriterhelp": 99, "encapsul": [99, 155, 156, 278, 304, 584], "compare_node_attr": 99, "node_a": 99, "node_b": 99, "compar": [99, 136, 235, 277, 288, 315, 565, 571, 582, 608, 611, 614, 615, 617], "create_nod": [99, 128], "create_constant_nod": [99, 128], "datatyp": [99, 128, 152, 309, 612, 617], "mai": [99, 128, 134, 288, 293, 294, 296, 297, 298, 516, 517, 565, 567, 575, 581, 583, 595, 599, 606, 609, 611, 617], "set_attr_dtyp": [99, 128], "set_attr_tensor": [99, 128], "field": [99, 128, 152, 169, 207, 231, 268, 269, 273, 518, 522, 565, 572, 614, 617, 619], "set_attr_type_list": [99, 128], "attr": [99, 128, 134], "set_attr_string_list": [99, 128], "set_attr_str": [99, 128], "set_attr_int_list": 99, "set_attr_int": [99, 128], "set_attr_float": [99, 128], "set_attr_bool": [99, 128], "generate_int32_bias_for_conv": 99, "bias_tensor": 99, "channel_s": 99, "max_input": 99, "min_input": 99, "max_filter_tensor": [99, 332], "min_filter_tensor": [99, 332], "activation_rang": 99, "weights_rang": 99, "127": [99, 170, 171, 208, 209, 568, 611], "rang": [99, 170, 171, 184, 208, 209, 220, 231, 240, 273, 322, 521, 522, 568, 570, 571, 572, 605, 607, 608, 611, 616], "int32_bia": 99, "generate_int32_bias_for_matmul": 99, "weights_tensor": 99, "input_rang": 99, "max_filter_valu": 99, "min_filter_valu": 99, "gen_valid_sampling_log": 99, "log_path": 99, "log": [99, 132, 254, 259, 326, 329, 335, 352, 363, 366, 373, 379, 381, 382, 438, 472, 478, 479, 480, 481, 486, 500, 518, 565, 593, 614, 615, 617], "analysis_rnn_model": 99, "quantize_lay": [100, 101, 103], "fake_quant": [100, 101, 103], "quantize_config": [100, 101, 103], "quantize_help": [100, 101, 103], "quantize_wrapp": [100, 101, 103], "fuse_qdq_bn": [100, 101, 119], "fuse_qdq_concatv2": [100, 101, 119], "fuse_qdq_conv": [100, 101, 119], "fuse_qdq_deconv": [100, 101, 119], "fuse_qdq_in": [100, 101, 119], "fuse_qdq_matmul": [100, 101, 119], "fuse_qdq_pool": [100, 101, 119], "optimize_qdq": [100, 101, 119], "optimize_lay": [101, 103, 106], "quantize_layer_add": [101, 103, 106], "quantize_layer_bas": [101, 103, 106, 108, 110], "quantize_layer_bn": [101, 103, 106], "fakequantizebas": 102, "abc": [102, 233, 275, 416, 479, 522, 615, 617], "get_config": [102, 111, 513], "serial": [102, 167, 205, 385, 392, 393, 423, 475, 477, 489, 490, 494, 495], "fakequant": 102, "classmethod": [102, 111, 142, 144, 255, 256, 257, 317, 320, 328, 474, 508, 510, 513], "from_config": [102, 111], "instanti": [102, 328, 605], "requir": [102, 111, 194, 227, 231, 243, 268, 273, 286, 288, 305, 308, 315, 334, 336, 345, 348, 403, 409, 416, 419, 421, 428, 434, 441, 442, 443, 444, 446, 447, 448, 450, 453, 454, 459, 464, 468, 518, 522, 565, 566, 567, 571, 572, 576, 583, 584, 586, 596, 602, 606, 607, 608, 611, 613, 614, 615, 617, 619], "per_channel": [102, 128, 576, 619], "num_bit": 102, "8": [102, 152, 183, 219, 269, 477, 518, 576, 580, 607, 609, 617, 620], "symmetr": [102, 611, 616, 617], "narrow_rang": 102, "quantizeconfig": [104, 105, 111], "There": [104, 235, 268, 277, 306, 565, 570, 576, 579, 582, 583, 585, 617, 619], "global": [104, 152, 262, 269, 292, 293, 294, 296, 297, 298, 299, 332, 500, 518, 607, 608, 610, 617], "add_quantize_recip": 104, "layer_nam": [104, 262, 292], "For": [104, 145, 169, 183, 184, 194, 207, 219, 220, 227, 231, 232, 233, 235, 240, 262, 265, 273, 274, 275, 277, 278, 292, 300, 304, 308, 477, 516, 518, 520, 522, 565, 571, 572, 574, 576, 579, 585, 587, 588, 590, 593, 607, 612, 615, 617, 619, 620], "conv5_block3_3_conv": 104, "flase": 104, "conv5_block3_3_add": 104, "query_lay": 104, "layer_recip": 104, "remove_lay": 104, "get_quantize_recip": 104, "is_empti": 104, "clear_quantize_recip": 104, "clear": [104, 165, 203, 228, 234, 235, 243, 270, 276, 277, 522, 542, 576, 582], "class": [105, 141, 252, 278, 304, 410, 411, 518, 519, 567, 568, 570, 582, 593, 604, 605, 613, 615, 617, 619], "init_quantize_config": 105, "begin": [105, 194, 227, 254, 259, 264, 265, 289, 293, 297, 298, 299, 300, 322, 570, 571, 607, 617], "model_nam": [105, 243, 362, 368, 487], "special": [105, 288, 518, 567, 582, 604], "qat_clone_funct": 105, "leav": [105, 596], "quantizewrapp": [105, 111], "wrapped_lay": 105, "config_quantizable_lay": 107, "quantizelayeradd": 108, "quantizelayerbas": [108, 109, 110], "quantizelay": 109, "quantizelayerbatchnorm": 110, "quantizewrapperbas": 111, "trainabl": 111, "sublay": 111, "trainable_weight": 111, "track": [111, 315, 602, 614], "descent": 111, "variabl": [111, 169, 185, 207, 227, 236, 242, 286, 301, 307, 475, 500, 565, 580, 608, 617], "non_trainable_weight": 111, "thei": [111, 185, 227, 249, 292, 328, 516, 570, 576, 582, 590, 604, 607, 608], "manual": [111, 169, 207, 568, 585, 591, 593, 596], "add_loss": 111, "regular": [111, 228, 263, 270, 301, 607], "eager": [111, 265, 300, 334, 442, 446, 454, 572, 579, 611, 612, 615, 620], "safe": [111, 327, 517], "gradienttap": 111, "input_shap": [111, 171, 209, 284, 416, 419, 428, 567, 568], "tensorshap": 111, "compute_output_shap": 111, "caus": [111, 586, 607, 608], "state": [111, 136, 234, 235, 247, 249, 276, 277, 287, 317, 320, 588, 607, 608], "happen": 111, "later": [111, 139, 145, 615], "integ": [111, 221, 227, 231, 235, 252, 262, 264, 266, 273, 277, 292, 299, 302, 522, 611, 617], "output_shap": 111, "query_input_index": 111, "design": [111, 166, 188, 189, 194, 204, 227, 242, 267, 276, 277, 308, 519, 590, 593, 607, 608, 611], "logic": [111, 155, 156, 315, 499, 619], "live": 111, "output_obj": 111, "fusenodestartwithfusedbatchnormv3": [112, 122], "quantizenodebas": [112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 126, 127], "_quantizedfusedbatchnorm": 112, "apply_newly_bn_relu_fus": [112, 122], "match_node_nam": [112, 114, 115, 116, 117, 122, 124, 126], "apply_newly_bn_leakyrelu_fus": [112, 122], "get_longest_fus": [112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 126, 127], "longest": [112, 113, 114, 115, 116, 117, 118, 122, 124, 126, 178, 181, 183, 184, 219, 220, 616], "apply_the_transform": [112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 126, 127], "concatv2": [113, 123, 133, 576], "fusenodestartwithconcatv2": [113, 123], "quantizedconcatv2": [113, 123], "fusenodestartwithconv2d": [114, 124], "apply_conv3d_add_addn_relu_fus": 114, "addn": [114, 124, 576], "apply_conv3d_add_addn_fus": 114, "apply_conv3d_add_relu_fus": 114, "apply_conv3d_add_fus": 114, "apply_conv3d_single_fus": 114, "apply_newly_conv_biasadd_relu_fus": 114, "elu": [114, 117], "sigmoid": [114, 117], "apply_newly_conv_biasadd_fus": 114, "apply_newly_conv_single_fus": 114, "apply_newly_conv_biasadd_addn_relu_fus": 114, "apply_conv_biasadd_hardswish_fus": 114, "hardswish": 114, "apply_newly_conv_biasadd_swishf32_fus": 114, "swishf32": 114, "swish_f32": 114, "apply_newly_conv_biasadd_addn_fus": 114, "patter": 114, "conv2dbackpropinput": 115, "conv3dbackpropinputv2": 115, "fusenodestartwithdeconv2d": 115, "apply_single_deconv2d_fus": 115, "apply_deconv2d_biasadd_fus": 115, "apply_single_deconv3d_fus": 115, "apply_deconv3d_biasadd_fus": 115, "fusedinstancenorm": 116, "fusenodestartwithfusedinstancenorm": 116, "apply_newly_in_relu_fus": 116, "batchmatmul": 117, "batchmatmulv2": 117, "fusenodestartwithmatmul": [117, 126], "apply_matmul_biasadd_relu_fus": [117, 126], "tanh": 117, "apply_matmul_biasadd_fus": [117, 126], "apply_batchmatmulv2_fus": 117, "apply_batchmatmulv2_mul_add_fus": 117, "avgpool": [118, 127, 576], "fusenodestartwithpool": [118, 127], "optimizeqdqgraph": 120, "op_wise_sequ": [120, 125], "quantizegraphbas": [120, 121, 125], "get_quantized_nod": 120, "quantizegraph": 121, "register_transform": 121, "virtual": [121, 130, 609], "deriv": [121, 194, 221, 227, 262, 264, 266, 289, 292, 299, 301, 302], "remove_dead_nod": 121, "output_nam": [121, 152, 222, 224, 287, 574], "longer": [121, 167, 178, 181, 184, 205, 220, 568, 616], "eightbitize_single_input_tensor_nod": 121, "original_nod": 121, "add_op_funct": 121, "add_output_graph_nod": 121, "output_nod": [121, 362], "remove_redundant_quant": 121, "old_graph": 121, "create_nodes_map": 121, "apply_conv_single_fus": 124, "apply_conv_biasadd_relu_fus": 124, "apply_conv_biasadd_fus": 124, "apply_conv_biasadd_addn_relu_fus": 124, "quantizegraphforintel": 125, "itself": [127, 279, 280, 281, 283, 285, 286, 590], "herlper": 128, "quantizegraphhelp": 128, "sever": [128, 178, 181, 184, 220, 266, 302, 519, 565, 570, 571, 579, 583, 595, 599, 607, 608, 610, 616, 617, 619], "staticmethod": 128, "get_sorted_graph": 128, "wa": [128, 156, 456, 522, 565, 609, 617], "reorder": [128, 247, 249], "pars": [128, 130, 141, 167, 168, 180, 184, 205, 206, 217, 220, 249, 293, 334, 345, 350, 373, 374, 376, 379, 380, 381, 382, 385, 438, 442, 446, 451, 454, 460, 479, 487, 495, 506, 616], "easier": [128, 565, 595, 599, 602, 609], "in_graph": [128, 134], "ouput": 128, "prune": [128, 152, 194, 227, 255, 256, 257, 259, 260, 262, 263, 264, 266, 268, 269, 287, 289, 290, 292, 293, 294, 296, 297, 298, 299, 301, 302, 303, 322, 332, 343, 350, 363, 369, 379, 381, 408, 416, 428, 443, 468, 476, 487, 492, 521, 551, 572, 573, 576, 577, 579, 605, 609, 611, 619], "out": [128, 136, 167, 168, 169, 173, 178, 205, 206, 207, 226, 227, 249, 262, 267, 285, 292, 517, 518, 521, 568, 585, 590, 595, 596, 597, 599, 600, 602, 608, 610, 611], "aren": 128, "uncondition": 128, "copy_attr": 128, "attr_valu": 128, "copi": [128, 152, 263, 269, 332], "unique_node_name_from_input": 128, "ensure_tensor_name_has_port": 128, "sure": [128, 262, 264, 266, 292, 299, 302, 416, 565, 566], "explicit": [128, 516], "generate_quantized_weight_nod": 128, "host_op_typ": 128, "input_nod": [128, 362], "weight_bit": 128, "enter_nod": 128, "correct": [129, 146, 231, 232, 233, 235, 263, 273, 274, 275, 276, 277, 303, 437, 516, 565, 585], "biascorrect": 129, "fp32_graph": 129, "weight_empir": 129, "graphtransformbas": [129, 130, 132, 133], "Will": [129, 158, 161, 178, 500, 570, 579], "our": [129, 519, 521, 574, 603, 614], "task": [129, 167, 174, 205, 212, 235, 249, 276, 277, 315, 568, 570, 571, 579, 582, 607, 608], "close": [129, 146], "w_int8": [129, 146], "w_fp32": [129, 146], "ratio": [129, 146, 178, 180, 181, 184, 217, 220, 227, 254, 259, 262, 264, 265, 266, 292, 296, 299, 300, 302, 568, 607, 608, 616, 620], "differ": [129, 139, 142, 144, 146, 160, 169, 184, 186, 198, 207, 220, 226, 227, 228, 234, 235, 242, 250, 251, 253, 256, 262, 267, 268, 270, 276, 277, 288, 292, 327, 516, 518, 519, 542, 565, 567, 568, 570, 572, 573, 574, 578, 579, 582, 584, 595, 599, 604, 607, 611, 615, 616, 617], "equal": [129, 134, 146, 332, 582, 608], "minim": [129, 146, 307, 570, 573, 577, 582, 595, 599, 607, 608, 611, 617], "round": [129, 146, 611], "scale_c": [129, 146], "shift": [129, 146, 178, 180, 181, 217, 603, 616], "notic": [129, 146, 185, 227, 581, 613], "empir": [129, 146], "solut": [129, 146, 240, 521, 522, 575, 587, 591, 596, 609, 617], "graphtransform": 130, "input_pb": [130, 132, 133], "parse_input_pb": 130, "pbdef": 130, "generate_input_map": 130, "get_node_name_from_input": 130, "insertlog": 132, "node_name_list": 132, "show_nam": 132, "show_op": 132, "first_n": 132, "summar": [132, 570], "1024": [132, 169, 207, 588], "messag": [132, 487, 499, 504, 617], "dump_fp32": 132, "rerang": 133, "rerangequantizedconcat": 133, "rerange_quant": 133, "version1_lt_version2": [134, 332], "version1": [134, 332], "version2": [134, 332], "version1_gt_version2": [134, 332], "greater": [134, 332], "version1_eq_version2": [134, 332], "version1_gte_version2": [134, 332], "version1_lte_version2": [134, 332], "disable_random": 134, "seed": [134, 152, 240, 242, 253, 269, 326, 332, 497, 619], "disabl": [134, 475, 504, 516, 602, 612], "read_graph": 134, "in_graph_is_binari": 134, "read": [134, 169, 172, 184, 207, 210, 220, 227, 254, 259, 263, 265, 300, 402, 406, 407, 568, 612, 614], "write_graph": 134, "out_graph_def": 134, "out_graph_fil": 134, "write": [134, 176, 177, 178, 214, 215, 216, 231, 273, 332, 572, 578, 585, 615], "is_ckpt_format": 134, "model_path": [134, 285, 402, 417, 422, 487], "is_saved_model_format": 134, "saved_model": [134, 227, 237, 286, 408, 415, 425], "get_estimator_graph": 134, "estim": [134, 136, 235, 238, 239, 243, 250, 251, 277, 286, 617], "input_fn": [134, 286], "get_tensor_by_nam": 134, "try_cnt": 134, "consid": [134, 235, 276, 277, 314, 516, 570, 603, 617], "import": [134, 147, 152, 227, 237, 240, 269, 278, 288, 293, 304, 322, 332, 518, 519, 521, 566, 567, 568, 570, 571, 572, 574, 577, 582, 583, 584, 585, 589, 591, 604, 605, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617], "scope": [134, 194, 227, 284, 607], "suffix": 134, "time": [134, 152, 178, 181, 184, 220, 235, 247, 269, 276, 277, 288, 307, 332, 473, 479, 480, 485, 500, 572, 575, 590, 592, 595, 599, 602, 603, 604, 607, 608, 609, 611, 614, 615, 616, 617], "got": [134, 575, 615], "iterator_sess_run": 134, "sess": [134, 286], "iter_op": [134, 286], "feed_dict": [134, 166, 204], "output_tensor": [134, 286], "integr": [134, 186, 522, 565, 603], "makeiter": 134, "predict": [134, 147, 178, 181, 184, 188, 189, 220, 228, 232, 233, 234, 235, 241, 243, 269, 270, 274, 275, 276, 277, 519, 542, 570, 582, 593, 615, 616], "pred": [134, 234, 235, 276, 277, 582], "collate_tf_pr": 134, "collat": [134, 141], "tbe": 134, "get_input_output_node_nam": 134, "fix_ref_type_of_graph_def": 134, "fix": [134, 167, 205, 264, 299, 517, 568, 589, 608, 617], "ref": 134, "tool": [134, 332, 521, 522, 595, 599, 609, 611], "strip_unused_lib": 134, "offici": [134, 228, 232, 233, 270, 274, 275, 516, 565, 582], "r1": 134, "15": [134, 242, 576, 620], "branch": [134, 328, 565], "get_graph_def": 134, "auto_input_output": 134, "get_model_input_shap": 134, "inout": 134, "get_tensor_val_from_graph_nod": 134, "tensor_v": 134, "int8_node_name_revers": 134, "revers": [134, 565], "tf_diagnosis_help": 134, "generate_feed_dict": 134, "input_tensor": [134, 286, 287], "bf16modulewrapp": 135, "nn": [135, 136, 141, 152, 186, 222, 224, 243, 247, 249, 269, 278, 287, 304, 328, 518, 570, 574, 584, 615], "bf16modul": 135, "mixed_precision_model": 135, "bf16_symbolic_trac": 135, "fx_sub_module_list": 135, "_description_": 135, "node_collector": 136, "record": [136, 141, 167, 168, 169, 173, 175, 177, 178, 186, 193, 205, 206, 207, 213, 288, 306, 568, 614, 615, 617], "hook_fn_act": 136, "inp": 136, "outp": 136, "hessiantrac": 136, "refer": [136, 139, 145, 167, 205, 227, 228, 229, 234, 235, 254, 259, 262, 264, 265, 270, 271, 276, 277, 289, 292, 300, 518, 522, 542, 566, 567, 568, 571, 572, 578, 580, 581, 582, 583, 585, 590, 593, 604, 607, 610, 613, 616, 617], "yao": 136, "zhewei": 136, "et": [136, 249], "al": [136, 249], "pyhessian": 136, "network": [136, 240, 243, 264, 289, 292, 310, 519, 565, 570, 571, 574, 606, 609, 611, 617], "through": [136, 147, 155, 156, 183, 219, 269, 278, 304, 308, 521, 566, 576, 578, 579, 582, 588, 604, 605, 607, 610], "len": [136, 152, 178, 181, 184, 220, 307, 568, 572, 616], "2020": 136, "ieee": [136, 583], "confer": [136, 608], "big": 136, "dong": 136, "zhen": 136, "hawq": [136, 310, 525, 617], "v2": [136, 310, 572, 580, 591, 613, 617, 620], "advanc": [136, 496, 516, 521, 611, 619], "system": [136, 185, 328, 332, 475, 502, 503, 566, 588, 607], "33": [136, 240, 620], "18518": 136, "18529": 136, "http": [136, 167, 169, 205, 207, 228, 229, 231, 232, 233, 249, 262, 264, 265, 270, 271, 273, 274, 275, 289, 292, 300, 512, 518, 521, 565, 568, 577, 580, 581, 591, 597, 600, 613], "github": [136, 167, 205, 228, 229, 232, 233, 262, 265, 270, 271, 274, 275, 292, 300, 431, 433, 474, 517, 521, 565, 568, 573, 577, 580, 581, 591, 597, 600, 613], "com": [136, 167, 205, 228, 229, 232, 233, 262, 265, 270, 271, 274, 275, 292, 300, 480, 516, 521, 565, 568, 577, 580, 581, 585, 591, 613, 614, 620], "openvinotoolkit": 136, "nncf": 136, "blob": [136, 228, 229, 232, 233, 262, 270, 271, 274, 275, 292, 591], "develop": [136, 288, 487, 517, 518, 580, 583, 585, 591, 602, 609, 611, 612, 614], "mse_metric_gap": [136, 387], "fp32_tensor": [136, 387], "euclidean": [136, 387, 570], "distanc": [136, 387, 570], "get_fused_map": 136, "weight_to_op": 136, "get_devic": 136, "register_act_grad_hook": 136, "append": [136, 141, 152, 268, 285, 307, 317, 319, 518, 571, 605], "reset_act_gradient_and_hook": 136, "reset": [136, 228, 234, 235, 270, 276, 277, 288, 500, 542, 582], "get_param": [136, 184, 220], "get_vthv_weight": 136, "num_sampl": [136, 235, 276, 277], "vthv": 136, "get_weight_trac": 136, "op_name_to_trac": 136, "get_act_trac": 136, "res_dict": 136, "get_act_gap": 136, "gap": [136, 574, 584], "get_avg_trac": 136, "averag": [136, 231, 232, 233, 235, 273, 274, 275, 276, 277, 582, 617], "compare_weight": 136, "float_dict": 136, "quantized_dict": 136, "being": [136, 231, 243, 268, 273, 287, 404], "usag": [136, 166, 204, 227, 231, 237, 268, 273, 288, 487, 565, 568, 572, 573, 582, 585, 593, 604, 610, 616], "wt_compare_dict": 136, "float_model": 136, "state_dict": [136, 249, 572, 615], "compute_error": 136, "weight_dict": 136, "hawq_top": 136, "modul": [137, 222, 227, 244, 245, 246, 250, 260, 261, 291, 295, 476, 484, 492, 518, 565, 567, 570, 574, 579, 582, 584, 607, 610, 612, 615], "dataread": [138, 225], "sample_s": 138, "100": [138, 139, 147, 152, 169, 173, 178, 207, 231, 240, 269, 273, 566, 568, 572, 578, 610, 611, 616, 617, 619, 620], "ortq": [138, 225], "get_next": [138, 225], "torchsmoothqu": 139, "traced_model": [139, 140], "accur": [139, 145], "effici": [139, 145, 519, 567, 570, 585, 605, 609], "larg": [139, 145, 231, 273, 521, 567, 570, 607, 608, 620], "languag": [139, 145, 228, 249, 270, 516, 542, 609], "free": [139, 145, 155, 156, 304, 315, 516, 521, 582, 591, 596, 604, 614], "absorb": [139, 145], "inplac": 139, "you": [139, 165, 167, 203, 205, 231, 247, 249, 264, 273, 517, 518, 565, 568, 572, 574, 580, 581, 582, 585, 587, 588, 590, 595, 599, 602, 603, 607, 613, 614, 615], "convtranspose2d": 139, "main": [139, 155, 191, 265, 300, 315, 467, 504, 518, 572, 577, 589, 591, 603, 608, 611], "balanc": [139, 175, 177, 178, 213, 606], "difficulti": 139, "Not": [139, 185, 194, 227, 254, 259, 317, 318, 319, 332, 471, 519], "architectur": [139, 185, 238, 239, 249, 250, 251, 253, 521, 551, 565, 566, 570, 607, 608, 609], "orig": 139, "benefit": [139, 605, 607], "graphtrac": 139, "trace_and_fuse_sub_graph": 140, "get_embedding_contigu": 141, "embed": [141, 249], "contigu": [141, 607], "collate_torch_pr": 141, "collate_result": 141, "input2tupl": 141, "append_attr": 141, "fx_model": 141, "fx_white_list": 141, "generate_activation_observ": 141, "observ": [141, 614, 615, 617], "what": [141, 165, 203, 299, 322, 516, 565], "check_cfg_and_qconfig": 141, "op_infos_from_cfg": 141, "output_tensor_ids_op_nam": 141, "paser_cfg": 141, "ops_nam": 141, "get_quantizable_ops_from_cfg": 141, "input_tensor_ids_op_nam": 141, "auto_copi": 141, "fetch_modul": 141, "set_modul": 141, "new_modul": 141, "simple_infer": 141, "get_example_input": 141, "example_inp": 141, "get_fallback_ord": 141, "fall": 141, "order": [141, 228, 229, 249, 268, 270, 271, 287, 306, 307, 308, 312, 313, 319, 321, 416, 419, 428, 489, 518, 542, 582, 607, 610, 615, 617], "confid": 141, "ordered_op": 141, "get_mse_order_per_fp32": 141, "influenc": 141, "fallback_ord": 141, "get_mse_order_per_int8": 141, "get_torch_vers": 141, "algorithm_registri": [142, 144], "algorithm_typ": [142, 144], "locat": [142, 144, 184, 220, 572, 588, 595, 599, 602, 611, 613, 616, 619], "registr": [142, 144, 169, 173, 176, 177, 178, 181, 184, 191, 207, 211, 214, 215, 216, 218, 220, 257], "support_algorithm": [142, 144], "algorithmschedul": [142, 144], "conf": [142, 144, 147, 152, 155, 156, 185, 227, 236, 237, 254, 259, 268, 269, 278, 279, 280, 285, 287, 288, 293, 294, 296, 297, 298, 304, 307, 308, 310, 312, 314, 315, 317, 319, 322, 495, 498, 518, 519, 521, 566, 570, 577, 578, 583, 584, 605, 611, 612, 614, 617], "phase": [142, 144, 268, 299, 300, 519, 607, 608, 611, 612, 617], "adaptor": [142, 144, 194, 227, 325, 521, 532, 579, 612, 613, 615], "fastbiascorrect": [143, 146], "fast_bias_correct": [144, 269], "weight_correct": [144, 269], "kernel": [145, 475, 522, 606, 607, 617], "weightcorrect": 146, "ep": 146, "1e": [146, 619], "05": [146, 231, 235, 273, 276, 277, 480, 582, 620], "conf_fname_or_obj": [147, 185, 194, 221, 226, 227, 236, 237, 238, 239, 250, 251, 254, 259, 267, 268, 269], "goal": [147, 156, 221, 226, 227, 254, 259, 267, 269, 278, 288, 298, 304, 315, 488, 567, 605, 611, 617], "prefer": [147, 226, 227, 267, 269, 278, 304], "space": [147, 155, 156, 226, 227, 233, 238, 240, 242, 250, 251, 252, 253, 267, 269, 275, 278, 288, 299, 304, 305, 307, 308, 309, 310, 312, 314, 315, 317, 319, 487, 516, 517, 519, 522, 607, 611, 619], "batch_siz": [147, 157, 159, 164, 165, 166, 167, 168, 173, 178, 187, 188, 195, 197, 202, 203, 204, 205, 206, 222, 224, 243, 248, 269, 287, 338, 352, 363, 465, 488, 519, 567, 568, 572, 574, 578, 585, 611], "collate_fn": [147, 157, 159, 160, 164, 178, 187, 188, 195, 197, 198, 202, 269, 568], "last_batch": [147, 157, 159, 164, 166, 178, 187, 188, 195, 197, 202, 204, 269], "rollov": [147, 157, 159, 164, 166, 178, 187, 188, 195, 197, 202, 204, 269], "sampler": [147, 157, 159, 161, 164, 178, 187, 188, 195, 197, 199, 202, 216, 227, 269, 317, 318, 572], "batch_sampl": [147, 157, 159, 164, 178, 187, 188, 195, 197, 202, 269], "num_work": [147, 157, 159, 164, 178, 187, 188, 195, 197, 202, 243, 269, 611], "pin_memori": [147, 157, 159, 164, 178, 187, 188, 195, 197, 202, 269], "shuffl": [147, 157, 159, 164, 178, 187, 188, 195, 197, 202, 269, 611], "metric_cl": [147, 188, 189, 234, 235, 269, 276, 277], "mani": [147, 242, 243, 269, 288, 305, 306, 580, 617, 619], "alwai": [147, 188, 189, 231, 269, 273, 276, 277, 582], "user_metr": [147, 188, 189, 269, 276, 277], "sub_class": [147, 269], "basemetr": [147, 234, 235, 269, 276, 277], "postprocess_cl": [147, 178, 181, 182, 188, 192, 269], "fit": [147, 152, 278, 292, 304, 307, 518, 521, 566, 567, 568, 572, 577, 578, 582, 583, 584, 607, 608, 611, 612], "b_dataload": [147, 152, 185, 227, 566], "b_func": [147, 185, 227, 566], "benchmarkconfig": [147, 152, 566], "cores_per_inst": [147, 152, 352, 488, 566, 610], "num_of_inst": [147, 152, 488, 566, 610], "eval_dataload": [147, 152, 155, 156, 194, 226, 227, 237, 268, 278, 304, 307, 308, 310, 312, 314, 315, 521, 566, 577, 578, 617], "prunerv2": 148, "target_spars": [148, 152, 269, 292, 322, 607, 610, 619], "pruning_typ": [148, 152, 269, 322, 607], "start_step": [148, 152, 264, 269, 299, 322, 607, 610], "end_step": [148, 152, 264, 269, 299, 322, 607, 610], "pruning_scop": [148, 152, 269, 607], "pruning_frequ": [148, 152, 269, 299, 607], "min_sparsity_ratio_per_op": [148, 152, 269, 292, 607], "max_sparsity_ratio_per_op": [148, 152, 269, 292, 299, 607], "sparsity_decay_typ": [148, 152, 269, 607], "pruning_op_typ": [148, 152, 269, 607], "reg_typ": 148, "criterion_reduce_typ": 148, "resume_from_pruned_checkpoint": 148, "similiar": [148, 152, 269], "cfg_fname": 148, "parser": [148, 269, 345, 350, 468, 472, 476, 506], "quantization_conf": 148, "dotdict": [148, 288, 303], "pruning_conf": 148, "graph_optimization_conf": [148, 226, 227], "mixedprecision_conf": 148, "benchmark_conf": 148, "distillation_conf": [148, 221, 227], "nasconfig": [148, 227, 239, 250, 251, 519], "search_spac": [148, 238, 250, 251, 252, 253], "search_algorithm": [148, 227, 250, 251, 269, 519], "na": [148, 227, 269, 282, 551, 579], "procedur": [148, 292, 308, 519], "deep_get": [149, 288], "dot": [149, 487, 583, 611], "nest": 149, "eg": [149, 169, 173, 178, 207, 211, 216, 568, 610], "person": [149, 516, 609], "john": 149, "deep": [149, 521, 522, 567, 579, 580, 583, 585, 587, 590, 591, 593, 596, 602, 609, 611, 617, 620], "deep_set": [149, 288], "sex": [149, 516], "male": 149, "notat": 149, "check_valu": 152, "src": [152, 603], "supported_typ": 152, "supported_valu": 152, "_datatyp": 152, "random_se": [152, 307, 322, 371, 497, 619], "1978": 152, "workspac": [152, 269, 286, 287, 322, 331, 332, 373, 374, 379, 381, 382, 383, 413, 486, 488, 497, 584], "default_workspac": 152, "resume_from": [152, 332], "warmup": [152, 488, 566, 610], "inter_num_of_thread": [152, 610], "intra_num_of_thread": [152, 610], "accuracycriterion": [152, 455, 617], "higher_is_bett": [152, 582, 617, 619], "rel": [152, 288, 610, 617, 619, 620], "tolerable_loss": [152, 617], "01": [152, 606, 610, 617, 619, 620], "accuracy_criterion": [152, 269, 288, 604, 610, 617, 619], "absolut": [152, 235, 241, 277, 289, 293, 296, 480, 582, 606, 607, 608, 611, 617], "tuningcriterion": [152, 269, 604, 614, 617], "basic": [152, 183, 219, 238, 250, 262, 269, 292, 311, 315, 317, 318, 322, 579, 580, 610, 614], "strategy_kwarg": [152, 614, 617], "timeout": [152, 156, 269, 315, 497, 610, 617, 619], "max_trial": [152, 269, 497, 617], "tuning_criterion": [152, 269, 604, 614, 617], "earli": [152, 269, 611, 617, 619], "stop": [152, 156, 269, 285, 308, 315, 456, 480, 617, 619], "exit": [152, 269, 306, 565, 583, 619], "see": [152, 178, 181, 184, 220, 228, 231, 247, 270, 273, 516, 518, 520, 565, 581, 595, 596, 599, 602, 603, 615, 617, 620], "concret": [152, 155, 315, 617], "posttrainingquantconfig": [152, 269, 304, 518, 521, 567, 577, 584, 611, 612, 614, 617], "domain": [152, 269, 292, 349, 357, 360, 377, 379, 384, 408, 415, 416, 419, 437, 468, 469, 471, 487, 499, 504, 565, 607, 608, 617], "auto": [152, 269, 305, 332, 518, 585, 588, 590, 592, 593], "quant_format": [152, 222, 224, 269, 287, 574], "calibration_sampling_s": [152, 269], "op_type_list": [152, 269, 610, 617], "op_name_list": [152, 269, 617], "excluded_precis": [152, 269, 612], "quant_level": [152, 269, 617], "use_distributed_tun": [152, 269], "_basequantizationconfig": [152, 269], "quantizationawaretrainingconfig": [152, 269, 518, 571, 611, 612, 617], "deepcopi": [152, 269], "model_origin": [152, 269, 612], "qat_op_name_list": [152, 269], "compression_manag": [152, 269, 322, 518, 570, 571, 605, 607, 611], "prepare_compress": [152, 269, 322, 518, 570, 571, 605, 607, 611], "weightpruningconfig": [152, 269, 322, 605, 607], "pruning_config": [152, 269, 607], "9": [152, 242, 269, 518, 580, 607, 608, 610, 617, 619], "snip_momentum": [152, 269, 289, 607], "4x1": [152, 258, 269, 292, 607, 620], "98": [152, 269, 607, 610, 620], "exp": [152, 269, 607, 608], "local_config": [152, 269, 293, 294, 296, 297, 298, 303], "update_config": [152, 259, 269, 300], "10": [152, 169, 207, 231, 269, 273, 307, 465, 521, 565, 566, 568, 580, 607, 610, 616, 617, 620], "weight_compress": [152, 269, 610, 619], "knowledgedistillationlossconfig": [152, 571, 605], "temperatur": [152, 186, 619], "loss_typ": [152, 186, 619], "ce": [152, 186, 619], "loss_weight": [152, 186, 619], "knowledg": [152, 186, 221, 227, 571, 573, 577, 579, 584, 619], "distil": [152, 186, 193, 194, 227, 269, 322, 521, 551, 573, 577, 579, 605, 619], "distillationconfig": [152, 269, 570, 571, 605], "comb": [152, 571], "distillation_criterion": [152, 571, 605], "d_conf": [152, 571, 605], "teacher_model": [152, 186, 221, 227, 269, 570, 571], "q_conf": [152, 571], "intermediatelayersknowledgedistillationlossconfig": 152, "layer_map": [152, 186], "add_origin_loss": [152, 186], "selfknowledgedistillationlossconfig": [152, 269, 570], "distil_loss": [152, 269, 570], "crossentropyloss": [152, 186, 269, 570], "sgd": [152, 191, 269, 570, 610, 619], "lr": [152, 269, 570, 572], "0001": [152, 269, 570, 610], "learning_r": [152, 269, 610, 619], "callabl": [152, 233, 269, 275, 322, 483, 487, 503, 504], "teacher": [152, 186, 221, 227, 249, 269, 570, 571, 620], "altern": [152, 269], "mixedprecisionconfig": [152, 278, 583], "mixedprecis": [152, 227, 236, 278, 341, 445, 493, 551], "mix_precis": [152, 269, 583], "exportconfig": 152, "opset_vers": [152, 222, 224, 287, 574], "dynamic_ax": [152, 222, 224, 287, 574], "export": [152, 227, 231, 269, 273, 279, 280, 285, 287, 322, 487, 521, 588, 603, 615], "onnxqlinear2qdqconfig": 152, "onnxqlinear2qdq": 152, "torch2onnxconfig": [152, 574], "qdq_op_fp32_bia": [152, 222, 224, 574], "torch2onnx": [152, 222, 227, 269], "tf2onnxconfig": 152, "tf2onnx": 152, "sigopt": [153, 154, 269, 609], "tpe": [153, 154, 269], "sigopttunestrategi": 155, "q_dataload": [155, 156, 307, 308, 310, 312, 314, 315, 578, 617], "eval_func": [155, 156, 194, 226, 227, 237, 268, 278, 288, 304, 307, 308, 310, 312, 314, 315, 518, 567, 568, 570, 571, 572, 612, 617, 619], "q_hook": [155, 156, 307, 308, 310, 312, 314, 315], "tunestrategi": [155, 156, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 617], "hpo": 155, "mandatori": [155, 156, 304, 619], "yield": [155, 156, 165, 187, 188, 203, 278, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 567, 611, 617], "taken": [155, 156, 278, 304], "reserv": [155, 156, 194, 227, 268, 293], "tuner": [155, 156, 226, 227, 267, 278, 304], "higher": [155, 156, 252, 278, 304, 305, 518, 570, 574, 582, 607, 608, 611, 614, 617], "scalar": [155, 156, 278, 304, 582, 611], "pseudo": [155, 156, 304, 615], "code": [155, 156, 185, 227, 237, 245, 246, 249, 265, 268, 304, 374, 379, 397, 415, 480, 481, 512, 513, 518, 521, 522, 565, 567, 568, 570, 571, 572, 578, 579, 581, 582, 585, 587, 589, 590, 591, 593, 596, 602, 604, 605, 607, 609, 610, 611, 614, 615, 616], "resum": [155, 156, 310, 314, 315, 322, 328], "params_to_tune_config": 155, "next_tune_cfg": [155, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 617], "travers": [155, 156, 305, 306, 308, 309, 315, 617], "get_acc_target": 155, "base_acc": 155, "ceiterion": 155, "overrid": [155, 194, 227, 267, 315, 328, 332, 477], "constraint": [155, 226, 227, 267, 285, 614, 617, 619], "create_exp": 155, "acc_target": 155, "experi": [155, 516, 585, 614, 617], "fefin": 156, "tpetunestrategi": 156, "add_loss_to_tuned_history_and_find_best": 156, "tuning_history_list": 156, "histori": [156, 307, 315, 331, 332, 372, 379, 381, 385, 438, 456, 506, 602, 617], "object_evalu": 156, "alredi": 156, "calculate_loss": 156, "acc_diff": 156, "lat_diff": 156, "trials_count": [156, 308, 315], "either": [156, 231, 273, 315, 583, 586, 590, 605, 610, 611], "met": [156, 315, 519, 576, 583, 611, 615], "reach": [156, 262, 266, 288, 292, 302, 315, 517, 521, 567, 607, 608, 617], "otherwis": [156, 169, 178, 181, 184, 207, 220, 315, 516, 568, 597, 600, 610, 616], "basedatalod": [157, 195], "basedataload": [157, 159, 162, 163, 164, 166, 178, 195, 197, 200, 201, 202, 204], "_generate_dataload": [157, 195], "drop": [157, 195, 231, 263, 273, 583, 596, 607, 608, 620], "incomplet": [157, 195, 317, 319, 328], "discard": [157, 195], "dispatch": [158, 161, 178, 579], "unifi": [158, 161, 178, 226, 227, 267, 479, 522, 567, 578, 579, 584], "default_col": [159, 197], "outer": [159, 197], "defaultdataload": [159, 163, 166, 178, 197, 201, 204], "base_dataload": [159, 161, 162, 163, 164, 166, 178, 197, 199, 200, 201, 202, 204, 216, 227], "drop_last": [160, 165, 198, 203], "iterablefetch": [160, 198], "indexfetch": [160, 198], "default_dataload": [161, 163, 166, 199, 201, 204, 216, 227], "fetcher": [161, 199, 216, 227], "mxnet_dataload": [161, 199, 216, 227], "onnxrt_dataload": [161, 199, 216, 227], "pytorch_dataload": [161, 199, 216, 227], "tensorflow_dataload": [161, 199, 216, 227, 465], "mxnetdataload": [162, 200], "onnxruntim": [163, 201, 227, 236, 391, 395, 522, 577, 579, 580, 610], "onnxrtbertdataload": [163, 201], "bert": [163, 166, 167, 178, 181, 184, 201, 204, 205, 220, 521, 568, 570, 582, 590, 616, 620], "varient": [163, 201], "onnxrtdataload": [163, 201], "pytorchdataload": [164, 202], "data_sourc": [165, 203, 325], "__iter__": [165, 169, 173, 178, 203, 207, 211, 216, 567, 568], "matter": [165, 203, 612], "iterablesampl": [165, 203], "squential": [165, 203], "your": [165, 167, 203, 205, 231, 273, 517, 565, 568, 572, 574, 580, 581, 585, 588, 589, 590, 595, 596, 597, 599, 600, 602, 607, 614, 615, 617], "iterabledataset": [165, 168, 169, 171, 172, 173, 178, 203, 206, 207, 209, 210, 211, 216], "try": [165, 203, 416, 419, 428, 500, 518, 574, 611], "indexdataset": [165, 203], "__getitem__": [165, 169, 173, 178, 181, 184, 203, 207, 211, 216, 218, 220, 568], "__len__": [165, 169, 173, 178, 203, 207, 211, 216, 568], "inter": [165, 169, 173, 178, 203, 207, 211, 216], "retriev": [165, 203, 481], "act": [165, 203, 516], "sequentialsampl": [165, 203], "batchsampl": [165, 203], "tfdatadataload": [166, 204], "tensorflow1": [166, 204], "coupl": [166, 204], "satisfi": [166, 204, 580], "tf1": [166, 204, 584], "although": [166, 204, 614], "pytorch": [166, 167, 169, 172, 173, 176, 177, 178, 181, 184, 186, 191, 193, 204, 205, 207, 210, 211, 214, 215, 216, 218, 220, 222, 224, 225, 226, 227, 234, 235, 236, 260, 262, 265, 267, 269, 276, 277, 278, 287, 292, 300, 304, 313, 326, 328, 332, 335, 408, 415, 438, 448, 468, 518, 519, 521, 522, 567, 570, 571, 573, 574, 576, 579, 580, 583, 584, 585, 587, 590, 591, 592, 593, 602, 607, 609, 610, 613, 617, 619], "tensorflowbertdataload": [166, 204], "tensorflowmodelzoobertdataload": [166, 204], "zoo": [166, 184, 204, 220, 521, 573, 577, 620], "tensorflowdataload": [166, 204, 465], "directli": [166, 204, 231, 235, 263, 273, 277, 315, 574, 582, 589, 610, 611, 615], "pytorchbertdataset": [167, 205], "model_typ": [167, 205, 286, 387, 417, 568], "construct": [167, 170, 171, 174, 178, 181, 182, 187, 188, 189, 190, 192, 205, 208, 209, 212, 276, 277, 280, 282, 286, 325, 516, 568, 572, 608, 617], "tensordataset": [167, 205, 568], "repo": [167, 205, 515, 568, 573, 595, 597, 599, 600, 621], "link": [167, 205, 565, 568, 595, 599, 602], "huggingfac": [167, 205, 328, 568, 573, 577, 590, 591, 592, 593], "easi": [167, 205, 227, 267, 565, 567, 574, 609, 611, 614], "classifi": [167, 205, 235, 276, 277, 308, 568, 570, 607], "squad": [167, 178, 181, 184, 205, 220, 232, 233, 235, 274, 275, 276, 277, 568, 582, 616, 620], "distilbert": [167, 205, 521, 568, 609, 620], "xlnet": [167, 205, 568], "xlm": [167, 205, 568, 620], "101": [167, 205, 235, 276, 277, 582, 620], "2043": [167, 205], "2001": [167, 205], "onnxrtbertdataset": [167, 205], "data_dir": [167, 205, 568], "model_name_or_path": [167, 205, 328, 568, 590, 591], "max_seq_length": [167, 178, 181, 184, 205, 220, 568, 616], "128": [167, 170, 171, 178, 181, 184, 205, 208, 209, 220, 568, 611, 616], "do_lower_cas": [167, 178, 181, 183, 184, 205, 219, 220, 568, 616], "mrpc": [167, 205, 235, 277, 568, 582, 590, 620], "dynamic_length": [167, 205, 568], "student": [167, 186, 193, 205, 221, 227, 568, 570, 571, 620], "shortcut": [167, 205, 568], "select": [167, 205, 239, 243, 250, 301, 313, 518, 519, 565, 579, 580, 602, 608, 611, 615, 617], "length": [167, 178, 181, 184, 205, 220, 228, 231, 249, 270, 273, 521, 542, 568, 582, 609, 611, 616], "token": [167, 178, 181, 184, 205, 216, 218, 220, 227, 228, 229, 249, 269, 270, 271, 328, 500, 504, 542, 565, 568, 582, 614, 616, 617], "truncat": [167, 178, 181, 184, 205, 220, 568, 616], "shorter": [167, 178, 181, 184, 205, 220, 568, 616], "lowercas": [167, 205, 568], "fine": [167, 205, 299, 568, 588, 609, 611], "choic": [167, 205, 522, 565, 568, 582], "qqp": [167, 205, 568, 582, 620], "qnli": [167, 205, 568, 582, 620], "rte": [167, 205, 568, 582, 620], "st": [167, 205, 568, 582], "cola": [167, 205, 568, 582, 620], "mnli": [167, 205, 568, 582, 620], "wnli": [167, 205, 568, 582, 620], "mobilebert": [167, 205, 568, 570, 620], "roberta": [167, 205, 568, 620], "uncas": [167, 178, 181, 184, 205, 220, 568, 616, 620], "load_and_cache_exampl": [167, 205], "cach": [167, 205, 228, 270, 328, 417, 504, 542, 575, 611], "convert_examples_to_featur": [167, 184, 205, 220], "max_length": [167, 205], "label_list": [167, 205, 235, 277], "output_mod": [167, 205], "classif": [167, 184, 205, 220, 235, 265, 276, 277, 300, 570, 577, 582, 591, 609], "pad_token": [167, 205], "pad_token_segment_id": [167, 205], "mask_padding_with_zero": [167, 205], "inputfeatur": [167, 184, 205, 220], "input_id": [167, 184, 205, 220], "vocabulari": [167, 178, 181, 183, 184, 205, 219, 220, 249, 616], "attention_mask": [167, 205], "avoid": [167, 205, 286, 518, 615], "NOT": [167, 205, 576, 580], "token_type_id": [167, 205], "segment": [167, 205, 229, 231, 271, 273], "portion": [167, 205], "problem": [167, 205, 235, 242, 277, 582, 583, 603], "regress": [167, 205], "seq_length": [167, 205], "to_json_str": [167, 205], "json": [167, 168, 178, 181, 184, 205, 206, 220, 342, 460, 462, 470, 477, 487, 568, 584, 603, 616], "tensorflowbertdataset": [167, 205], "root": [167, 168, 169, 172, 173, 178, 205, 206, 207, 210, 235, 241, 277, 279, 280, 281, 283, 285, 286, 287, 322, 504, 567, 568, 572, 582, 619], "label_fil": [167, 178, 181, 184, 205, 220, 568, 616], "tfrecord": [167, 168, 169, 173, 178, 205, 206, 207, 211, 216, 568], "guid": [167, 205, 518, 521, 568, 570, 580, 585, 593, 602, 621], "parsedecodebert": [167, 205], "tensorflowmodelzoobertdataset": [167, 168, 205, 206], "num_cor": [167, 168, 172, 173, 178, 205, 206, 210, 568], "28": [167, 168, 172, 173, 178, 205, 206, 210, 568, 620], "coco": [168, 173, 175, 177, 178, 179, 181, 206, 213, 231, 235, 273, 277, 582], "parsedecodecoco": [168, 206], "cocorecorddataset": [168, 173, 178, 206], "directori": [168, 169, 173, 178, 206, 207, 286, 328, 331, 332, 396, 449, 470, 487, 500, 568, 572, 575, 595, 597, 599, 600, 615], "interleav": [168, 173, 178, 206, 568], "parallel": [168, 173, 178, 206, 568], "cocoraw": [168, 206, 567, 568], "img_dir": [168, 206, 568], "val2017": [168, 206, 568], "anno_dir": [168, 206, 568], "annot": [168, 206, 231, 273, 568, 582], "instances_val2017": [168, 206, 568], "raw": [168, 172, 175, 206, 210, 213, 312, 577, 582, 617], "arrang": [168, 169, 172, 173, 178, 206, 207, 210, 299, 568, 607], "wai": [168, 169, 172, 173, 178, 206, 207, 210, 519, 565, 567, 568, 582, 585, 588, 603, 605, 607, 608, 611, 617, 619], "jpg": [168, 172, 174, 206, 210, 212, 568], "imag": [168, 169, 172, 174, 178, 180, 181, 184, 206, 207, 210, 212, 217, 220, 231, 243, 273, 485, 565, 568, 572, 610, 615, 616, 620], "coconpi": [168, 206, 568], "npy_dir": [168, 206, 568], "npy": [168, 206, 568], "tensorflowdataset": [169, 207], "pytorchdataset": [169, 207], "mxnetdataset": [169, 207], "onnxrtqldataset": [169, 207], "qlinear": [169, 176, 207, 214, 235, 277, 285, 522, 574, 592, 620], "onnxrtitdataset": [169, 207], "IT": [169, 176, 207, 214, 609], "pytorchmxnetwrapdataset": [169, 207], "datafunc": [169, 207], "pytorchmxnetwrapfunct": [169, 184, 207, 220], "framework_dataset": [169, 207], "convent": [169, 207, 231, 273, 570], "imageclassifi": [169, 207], "choos": [169, 207, 314, 565, 579, 580, 590, 613, 617, 619], "tensorflow_itex": [169, 172, 173, 174, 176, 177, 178, 207, 210, 211, 212, 214, 215, 216, 610], "onnxrt_qdq": [169, 173, 176, 177, 178, 207, 211, 214, 215, 216, 610], "onnxrt_qlinearop": [169, 173, 176, 177, 178, 184, 207, 211, 214, 215, 216, 220, 610], "onnxrt_integerop": [169, 173, 176, 177, 178, 184, 207, 211, 214, 215, 216, 220, 610], "pytorch_ipex": [169, 173, 176, 177, 178, 207, 211, 214, 215, 216, 610, 619], "pytorch_fx": [169, 173, 176, 177, 178, 207, 211, 214, 215, 216, 610], "onnxrt_qoper": [169, 173, 176, 177, 178, 207, 211, 214, 215, 216, 610], "dataset_registri": [169, 173, 178, 207, 211, 216], "dataset_typ": [169, 173, 178, 207, 211, 216, 226, 227, 237, 267, 355], "dataset_format": [169, 173, 178, 207, 211, 216], "data_format": [169, 173, 178, 180, 181, 207, 211, 216, 217], "raw_imag": [169, 173, 178, 207, 211, 216], "overwrit": [169, 173, 178, 207, 211, 216, 595, 599], "over": [169, 173, 178, 207, 211, 216, 231, 235, 273, 277, 285, 307, 573, 577, 579, 582, 593, 602, 610, 617], "download_url": [169, 207], "filenam": [169, 207, 241, 332, 333, 433, 449, 456, 462, 472, 480, 568], "md5": [169, 207], "download": [169, 207, 328, 408, 431, 432, 434, 435, 468, 565, 568, 580, 613], "address": [169, 207, 504, 516, 565, 583, 609], "gen_bar_updat": [169, 207], "progress": [169, 207, 266, 292, 299, 302, 596, 602, 608], "bar": [169, 207, 565, 602], "check_integr": [169, 207], "fpath": [169, 207], "checksum": [169, 207], "calculate_md5": [169, 207], "chunk_siz": [169, 207], "cifar10": [169, 207, 568], "cifar100": [169, 207, 568], "automat": [169, 172, 178, 179, 180, 181, 207, 210, 217, 226, 227, 236, 243, 267, 518, 521, 565, 566, 568, 579, 583, 585, 587, 590, 591, 593, 595, 596, 597, 599, 600, 602, 605, 608, 616, 617], "www": [169, 207, 568, 620], "toronto": [169, 207, 568], "edu": [169, 207, 568], "kriz": [169, 207, 568], "cifar": [169, 207, 568, 620], "tar": [169, 207, 568, 597, 600], "gz": [169, 207, 568, 597, 600], "subset": [169, 172, 207, 210, 568], "internet": [169, 207, 565, 568], "put": [169, 207, 568, 570, 607], "alreadi": [169, 183, 185, 207, 219, 473, 500, 522, 565, 568, 579, 597, 600, 617], "again": [169, 207, 568, 612], "load_meta": [169, 207], "pytorchcifar10": [169, 207], "mxnetcifar10": [169, 207], "tensorflowcifar10": [169, 207], "pytorchcifar100": [169, 207], "mxnetcifar100": [169, 207], "tensorflowcifar100": [169, 207], "mnist": [169, 207, 568, 572], "nation": [169, 207, 516], "institut": [169, 207], "standard": [169, 178, 181, 184, 207, 220, 328, 574, 582, 616, 617], "technologi": [169, 207, 606], "fashionmnist": [169, 207, 568], "npz": [169, 207, 568], "idx1": [169, 207, 568], "ubyt": [169, 207, 568], "idx3": [169, 207, 568], "t10k": [169, 207, 568], "class_to_idx": [169, 207], "read_data": [169, 207], "pytorchmnist": [169, 207], "mxnetmnist": [169, 207], "tensorflowmnist": [169, 207], "pytorchfashionmnist": [169, 207], "mxnetfashionmnist": [169, 207], "tensorflowfashionmnist": [169, 207], "imagefold": [169, 207, 568, 572], "subfold": [169, 207], "belong": [169, 207, 224, 282, 611], "class_1": [169, 207, 568], "xxx": [169, 207, 517, 568], "png": [169, 207, 568], "xxy": [169, 207, 568], "xxz": [169, 207, 568], "class_n": [169, 207, 568], "123": [169, 207, 568, 616], "nsdf3": [169, 207, 568], "asd932_": [169, 207, 568], "mxnetimagefold": [169, 207], "tensorflowtfrecorddataset": [169, 207], "tensorflowimagerecord": [169, 173, 178, 207], "imagenet": [169, 172, 173, 178, 180, 181, 207, 210, 217, 243, 519, 565, 591, 615, 616, 619, 620], "000": [169, 173, 178, 207, 521, 568], "001": [169, 173, 178, 207, 568, 572, 619], "099": [169, 173, 178, 207, 568], "tensorflowvocrecord": [169, 207], "pascal": [169, 207], "voc": [169, 207, 235, 277], "2012": [169, 207], "00000": [169, 207], "00004": [169, 207], "00001": [169, 207], "00003": [169, 207], "dummydataset": [170, 171, 208, 209], "float32": [170, 171, 184, 208, 209, 220, 231, 273, 485, 522, 566, 568, 611, 616], "stand_norm": [170, 171, 208, 209, 568], "dummy_v2": [171, 209, 567, 568], "sparse_dummy_v2": [171, 209, 568], "label_shap": [171, 209, 568], "sparsedummydataset": [171, 209], "dense_shap": [171, 209, 568], "sparse_ratio": [171, 209, 568], "imagenetraw": [172, 210, 568], "data_path": [172, 210, 568], "image_list": [172, 210, 568], "img1": [172, 210, 568], "img2": [172, 210, 568], "imgx": [172, 210, 568], "val_map": [172, 210, 568], "txt": [172, 210, 480, 565, 568, 580], "pytorchimagenetraw": [172, 210], "mxnetimagenetraw": [172, 210], "tensorflowimagenetraw": [172, 210], "inteltensorflow": [172, 174, 210, 212, 580], "tensorflowimagenetdataset": [172, 210], "onnxrtimagenetdataset": [172, 210], "bert_dataset": [173, 178, 211, 216, 227, 269], "coco_dataset": [173, 178, 211, 216, 227, 269], "dummy_dataset": [173, 178, 211, 216, 227, 269], "dummy_dataset_v2": [173, 178, 211, 216, 227, 269], "imagenet_dataset": [173, 178, 211, 216, 227, 269], "style_transfer_dataset": [173, 178, 211, 216, 227, 269], "transfer": [174, 212, 221, 227, 568, 570, 571], "styletransferdataset": [174, 212], "content_fold": [174, 212, 568], "style_fold": [174, 212, 568], "crop_ratio": [174, 212, 568], "resize_shap": [174, 212, 568], "256": [174, 178, 180, 181, 212, 217, 568, 572, 616], "image_format": [174, 212, 568], "holder": [174, 212, 568], "labelbalancecocorecordfilt": [175, 177, 178, 213], "labelbalancecocorawfilt": [175, 213], "tensorflowfilt": [176, 214], "onnxrtqlfilt": [176, 214], "onnxrtitfilt": [176, 214], "pytorchfilt": [176, 214], "mxnetfilt": [176, 214], "filter_registri": [176, 177, 178, 214, 215, 216], "filter_typ": [176, 177, 178, 214, 215, 216], "__call__": [176, 177, 178, 214, 215, 216], "coco_filt": [177, 178, 215, 216, 227, 269], "imagenet_transform": [178, 181, 216, 218, 227, 269], "transform_cl": [178, 181, 184, 216, 218, 220], "basetransform": [178, 179, 180, 181, 184, 216, 217, 218, 220], "composetransform": [178, 181, 184, 220], "transform_list": [178, 181, 184, 220, 616], "togeth": [178, 181, 184, 220, 262, 268, 292, 570, 580, 589, 609, 615, 616], "transform_registri": [178, 181, 184, 216, 218, 220], "transform_typ": [178, 181, 184, 216, 218, 220], "user_postprocess": [178, 181, 182, 188, 192], "labelshift": [178, 180, 181, 217, 490, 616], "label_shift": [178, 180, 181, 217, 616], "bilinearimagenettransform": [178, 180, 181, 217], "height": [178, 180, 181, 184, 217, 220, 243, 262, 292, 572, 607, 616, 619], "width": [178, 180, 181, 184, 217, 220, 243, 262, 292, 572, 611, 616, 619], "central_fract": [178, 180, 181, 217, 616], "875": [178, 180, 181, 217, 616], "mean_valu": [178, 180, 181, 217, 616], "seri": [178, 180, 181, 217, 521, 580, 616], "applic": [178, 180, 181, 217, 471, 500, 502, 504, 565, 574, 585, 602, 609, 615, 616], "fraction": [178, 180, 181, 217, 616], "crop": [178, 180, 181, 184, 217, 220, 568, 616], "std": [178, 180, 181, 184, 217, 220, 243, 616], "tensorflowresizecropimagenettransform": [178, 180, 181, 217], "random_crop": [178, 180, 181, 217, 616], "resize_sid": [178, 180, 181, 217, 616], "resize_method": [178, 180, 181, 217], "bilinear": [178, 180, 181, 184, 217, 220, 616], "random_flip_left_right": [178, 180, 181, 217, 616], "channels_last": [178, 180, 181, 217, 585], "subpixel": [178, 180, 181, 217], "rgb": [178, 180, 181, 217], "desir": [178, 180, 181, 184, 217, 220, 249, 616], "flip": [178, 180, 181, 184, 217, 220, 616], "left": [178, 180, 181, 184, 217, 220, 292, 565, 596, 602, 616], "right": [178, 180, 181, 217, 231, 273, 485, 516, 518, 565, 602, 616], "tfsquadv1posttransform": [178, 181, 184, 220], "vocab_fil": [178, 181, 183, 184, 219, 220, 616], "n_best_siz": [178, 181, 184, 220, 616], "20": [178, 181, 184, 220, 242, 243, 580, 606, 616, 619, 620], "384": [178, 181, 184, 220, 616], "max_query_length": [178, 181, 184, 220, 616], "64": [178, 181, 184, 220, 519, 616, 620], "max_answer_length": [178, 181, 184, 220, 616], "30": [178, 181, 184, 220, 573, 577, 579, 616, 620], "doc_strid": [178, 181, 184, 220, 616], "total": [178, 181, 184, 220, 235, 264, 266, 276, 277, 286, 287, 288, 292, 299, 302, 308, 568, 608, 616], "nbest_predict": [178, 181, 184, 220, 616], "wordpiec": [178, 181, 183, 184, 219, 220, 616], "question": [178, 181, 184, 220, 232, 233, 274, 275, 516, 517, 522, 580, 585, 616, 620], "answer": [178, 181, 184, 220, 232, 233, 274, 275, 516, 616, 620], "becaus": [178, 181, 184, 220, 231, 262, 273, 292, 518, 607, 611, 616, 617], "lower": [178, 181, 183, 184, 219, 220, 233, 275, 308, 487, 571, 607, 608, 609, 611, 616, 617], "text": [178, 181, 183, 184, 219, 220, 228, 233, 265, 270, 275, 300, 542, 581, 591, 609, 616, 620], "long": [178, 181, 184, 220, 575, 616], "document": [178, 181, 184, 220, 517, 572, 583, 587, 597, 600, 601, 613, 616], "chunk": [178, 181, 184, 220, 616], "how": [178, 181, 184, 220, 221, 227, 242, 243, 262, 289, 292, 299, 517, 518, 520, 522, 565, 567, 568, 570, 571, 572, 578, 596, 597, 600, 601, 602, 607, 608, 611, 616, 617, 619], "much": [178, 181, 184, 220, 221, 227, 289, 570, 596, 607, 608, 616], "stride": [178, 181, 184, 220, 293, 616], "process_result": [178, 181, 184, 220], "get_postprocess_result": [178, 181, 184, 220], "tfsquadv1modelzooposttransform": [178, 181, 184, 220], "squadv1": [178, 181, 184, 220, 616], "tensorflowresizewithratio": [178, 181, 184, 220], "min_dim": [178, 181, 184, 220, 616], "800": [178, 181, 184, 220, 616], "max_dim": [178, 181, 184, 220, 616], "1365": [178, 181, 184, 220, 616, 620], "constant_valu": [178, 181, 184, 220], "aspect": [178, 180, 181, 184, 217, 220, 616], "side": [178, 181, 184, 220, 249, 565, 568, 596, 616], "exce": [178, 181, 184, 220, 616], "resizetftransform": [178, 181, 184, 220], "interpol": [178, 181, 184, 220, 299, 582, 608, 616], "nearest": [178, 181, 184, 220, 616], "bicub": [178, 181, 184, 220, 616], "rescaletftransform": [178, 181, 184, 220], "normalizetftransform": [178, 181, 184, 220], "rescal": [178, 181, 184, 220, 616], "deviat": [178, 181, 184, 220, 616], "broadcast": [178, 181, 184, 220, 572, 616], "parsedecodecocotransform": [178, 179, 181], "experiment": [178, 179, 181, 269, 465, 519, 542, 568, 571, 572, 574, 610, 613, 616], "decod": [178, 179, 180, 181, 217, 228, 249, 270, 542, 582, 616], "quantizedinput": [180, 217, 616], "parsedecodeimagenet": [180, 217, 616], "proto": [180, 184, 217, 220, 616], "parsedecodeimagenettransform": [180, 217], "onnxbilinearimagenettransform": [180, 217], "onnxresizecropimagenettransform": [180, 217], "std_valu": [180, 217], "229": [180, 217, 620], "224": [180, 217, 243, 521, 567, 568, 572, 574, 577, 585, 616, 619, 620], "225": [180, 217, 620], "resizewithaspectratio": [180, 217], "87": [180, 217, 620], "inter_pol": [180, 217], "cv2": [180, 217], "inter_area": [180, 217], "convert_to_unicod": [183, 219], "unicod": [183, 219, 228, 270], "assum": [183, 219, 231, 252, 273, 522, 576, 602], "utf": [183, 219], "load_vocab": [183, 219], "convert_by_vocab": [183, 219], "vocab": [183, 219, 249], "whitespace_token": [183, 219], "whitespac": [183, 219, 233, 275], "clean": [183, 186, 219, 352, 363, 366, 373, 374, 379, 381, 382, 383, 470, 486, 517], "piec": [183, 219, 228, 270, 542, 574, 582], "fulltoken": [183, 219], "tokenzi": [183, 219], "convert_tokens_to_id": [183, 219], "convert_ids_to_token": [183, 219], "basictoken": [183, 219], "punctuat": [183, 219, 228, 233, 270, 275], "wordpiecetoken": [183, 219], "unk_token": [183, 219], "unk": [183, 219], "max_input_chars_per_word": [183, 219], "200": [183, 219, 518, 617], "word": [183, 219, 228, 270, 542, 582], "greedi": [183, 219], "unaff": [183, 219], "un": [183, 219], "aff": [183, 219], "separ": [183, 219, 503, 516, 565, 578, 581, 605, 610], "concat_gener": [184, 220], "tensorflowtransform": [184, 220], "mxnettransform": [184, 220], "pytorchtransform": [184, 220], "onnxrtqltransform": [184, 220], "onnxrtittransform": [184, 220], "tensorflowwrapfunct": [184, 220], "transform_func": [184, 220], "pytorchmxnettransform": [184, 220], "get_torchvision_map": [184, 220], "torchvis": [184, 220, 243, 565, 573, 577, 585, 591], "croptoboundingbox": [184, 220, 616], "offset_height": [184, 220, 616], "offset_width": [184, 220, 616], "target_height": [184, 220, 616], "target_width": [184, 220, 616], "box": [184, 220, 231, 235, 273, 276, 277, 307, 518, 565, 582, 585, 596, 602, 615, 616, 617], "vertic": [184, 220, 262, 292, 616], "coordin": [184, 220, 307, 616], "corner": [184, 220, 522, 616], "horizont": [184, 220, 616], "mxnetcroptoboundingbox": [184, 220], "onnxrtcroptoboundingbox": [184, 220], "tensorflowcroptoboundingbox": [184, 220], "resizewithratio": [184, 220, 616], "perm": [184, 220, 616], "permut": [184, 220, 292, 616], "tensorflowtranspos": [184, 220], "mxnettranspos": [184, 220], "pytorchtranspos": [184, 220], "randomverticalflip": [184, 220, 616], "randomli": [184, 220, 253, 307, 314, 519, 616, 617], "tensorflowrandomverticalflip": [184, 220], "randomhorizontalflip": [184, 220, 616], "tensorflowrandomhorizontalflip": [184, 220], "toarrai": [184, 220, 616], "pil": [184, 220, 616], "casttftransform": [184, 220], "castonnxtransform": [184, 220], "castpytorchtransform": [184, 220], "centercroptftransform": [184, 220], "center": [184, 220, 520, 521, 580, 616, 617], "paddedcentercroptransform": [184, 220], "crop_pad": [184, 220], "resizepytorchtransform": [184, 220], "randomcroptftransform": [184, 220], "randomresizedcroppytorchtransform": [184, 220], "randomresizedcropmxnettransform": [184, 220], "randomresizedcroptftransform": [184, 220], "pramet": [184, 220], "rescalekeraspretraintransform": [184, 220], "rescaletransform": [184, 220], "alignimagechanneltransform": [184, 220], "dim": [184, 220, 257, 292, 307, 616], "align": [184, 220, 265, 516, 616], "w": [184, 220, 243, 607, 608, 616], "must": [184, 220, 231, 235, 273, 277, 517, 518, 565, 566, 567, 580, 616], "pytorchalignimagechannel": [184, 220], "tondarraytransform": [184, 220], "resizemxnettransform": [184, 220], "resizetransform": [184, 220], "cropresizetftransform": [184, 220], "boundari": [184, 220, 385, 616], "area": [184, 220, 231, 273, 582, 616], "pytorchcropresizetransform": [184, 220], "mxnetcropresizetransform": [184, 220], "cropresizetransform": [184, 220], "centercroptransform": [184, 220], "mxnetnormalizetransform": [184, 220], "pytorchnormalizetransform": [184, 220], "normalizetransform": [184, 220], "randomcroptransform": [184, 220], "randomresizedcroptransform": [184, 220], "get_final_text": [184, 220], "pred_text": [184, 220], "orig_text": [184, 220], "project": [184, 220, 249, 352, 355, 360, 362, 363, 366, 373, 374, 378, 379, 380, 381, 382, 383, 384, 408, 515, 516, 517, 609, 614, 617, 621], "squadexampl": [184, 220], "qas_id": [184, 220], "question_text": [184, 220], "doc_token": [184, 220], "orig_answer_text": [184, 220], "start_posit": [184, 220], "end_posit": [184, 220], "is_imposs": [184, 220], "simpl": [184, 220, 565, 580, 614, 617], "unique_id": [184, 220], "example_index": [184, 220], "doc_span_index": [184, 220], "token_to_orig_map": [184, 220], "token_is_max_context": [184, 220], "input_mask": [184, 220, 299], "segment_id": [184, 220], "read_squad_exampl": [184, 220], "input_fil": [184, 220], "output_fn": [184, 220], "inputbatch": [184, 220], "collecttransform": [184, 220], "10833": [184, 220], "tfmodelzoocollecttransform": [184, 220], "parsedecodevoctransform": [184, 220], "set_env_var": 185, "env_var": 185, "overwrite_exist": 185, "environ": [185, 269, 435, 467, 468, 476, 500, 516, 565, 566, 595, 599, 602, 617], "env": [185, 472, 480], "set_all_env_var": 185, "physic": [185, 516, 566], "core": [185, 227, 242, 332, 352, 565, 566, 581, 595, 599, 606, 620], "get_architectur": 185, "get_threads_per_cor": 185, "thread": [185, 503, 565, 567, 606], "get_thread": 185, "get_physical_id": 185, "socket": [185, 332, 475, 504, 606, 620], "get_core_id": 185, "get_bounded_thread": 185, "core_id": 185, "bind": 185, "command": [185, 227, 249, 322, 352, 363, 366, 373, 379, 381, 382, 449, 472, 480, 500, 565, 572, 585, 587, 590, 595, 599, 603], "unnecessari": [185, 227], "summary_benchmark": [185, 227], "config_inst": [185, 227], "trigger": [185, 227, 264, 299, 517], "generate_prefix": [185, 227], "core_list": [185, 227], "numactl": [185, 227, 588, 596], "run_inst": [185, 227], "critet": 186, "tensorflowcrossentropyloss": 186, "pytorchcrossentropyloss": 186, "tensorflowknowledgedistillationloss": 186, "pytorchknowledgedistillationloss": 186, "pytorchintermediatelayersknowledgedistillationloss": 186, "tensorflowcriterion": 186, "pytorchcriterion": 186, "criterion_cl": 186, "criterion_registri": 186, "criterion_typ": 186, "registry_criterion": 186, "param_dict": [186, 191, 240], "tensorflowsparsecategoricalcrossentropi": 186, "sparsecategoricalcrossentropyloss": 186, "knowledgedistillationframework": 186, "student_model": [186, 221, 227], "knowledgedistillationloss": [186, 619], "teacher_model_forward": 186, "notimplementederror": [186, 234, 235, 276, 277], "teacher_student_loss_c": 186, "student_output": [186, 194, 227, 322, 570, 571], "teacher_output": [186, 194, 221, 227, 322], "student_targets_loss_c": 186, "groud": 186, "truth": [186, 232, 233, 274, 275], "loss_cal": 186, "loss_cal_sloss": 186, "student_loss": [186, 194, 227, 322, 570, 571], "softcrossentropi": 186, "logit": [186, 570], "ground": [186, 232, 233, 274, 275], "kullbackleiblerdiverg": 186, "pytorchknowledgedistillationlosswrapp": 186, "tensorflowknowledgedistillationlosswrapp": 186, "tensorflowknowledgedistillationlossextern": 186, "intermediatelayersknowledgedistillationloss": [186, 495], "init_loss_func": 186, "init_feature_match": 186, "student_featur": 186, "teacher_featur": 186, "matcher": [186, 603], "clear_featur": 186, "register_hooks_for_model": 186, "attributeerror": 186, "remove_all_hook": 186, "pytorch_linear_feature_match": 186, "pytorchintermediatelayersknowledgedistillationlosswrapp": 186, "selfknowledgedistillationloss": [186, 495], "selfknowledg": 186, "pytorchselfknowledgedistillationloss": 186, "l2diverg": 186, "feature1": 186, "feature2": 186, "pytorchselfknowledgedistillationlosswrapp": 186, "setter": [187, 188], "calib_dataload": [187, 188, 227, 267, 268, 287, 304, 518, 521, 567, 568, 577, 578, 582, 611, 612], "known": [187, 188, 307, 574, 607, 615, 617], "open": [188, 227, 269, 480, 514, 516, 521, 565, 574, 575, 597, 600, 603, 609], "librari": [188, 227, 269, 514, 517, 521, 580, 587, 596, 602, 609, 611], "recommend": [188, 189, 276, 277, 522, 568, 574, 576, 593, 596, 601, 603, 607, 610, 617], "set_backend": 190, "tensorflowoptim": 191, "pytorchoptim": 191, "optimizer_cl": 191, "allow": [191, 285, 307, 328, 504, 565, 570, 572, 582, 583, 610, 619], "optimizer_registri": 191, "optimizer_typ": 191, "cross": [191, 234, 235, 276, 277, 578, 617], "tensorflowsgd": 191, "tensorflowadamw": 191, "tensorflow_addon": 191, "adamw": 191, "tensorflowadam": 191, "adam": [191, 619], "pytorchsgd": 191, "record_output": 193, "output_process": 193, "get_activ": 193, "shot": [194, 227, 264, 266, 289, 302, 519, 579, 607, 608, 609], "train_func": [194, 227, 268, 572, 611], "train_dataload": [194, 227, 607], "prepare_qat": [194, 227], "pre_process": [194, 221, 227, 238, 250, 254, 259, 267, 572], "compress": [194, 227, 254, 259, 269, 288, 322, 514, 521, 570, 579, 602, 604, 605, 607, 608, 609, 611], "post_process": [194, 227], "on_train_begin": [194, 227, 254, 259, 264, 265, 298, 299, 300, 322, 518, 570, 571, 605, 607, 611], "Be": [194, 227, 231, 273, 293, 297, 298], "epoch": [194, 221, 227, 254, 259, 264, 265, 293, 296, 297, 298, 299, 300, 322, 570, 571, 572, 605, 607, 619], "on_train_end": [194, 227, 254, 259, 264, 265, 298, 299, 300, 322, 570, 571, 605, 607, 611], "pre_epoch_begin": [194, 227, 254, 259], "post_epoch_end": [194, 227, 254, 259], "on_step_begin": [194, 227, 254, 259, 264, 265, 289, 293, 296, 297, 298, 299, 300, 322, 325, 570, 571, 605, 607], "batch_id": [194, 227, 293, 296, 297, 298, 322], "on_batch_begin": [194, 227, 254, 259], "on_after_compute_loss": [194, 227, 254, 259, 322, 570, 571, 605], "on_before_optimizer_step": [194, 227, 264, 265, 289, 294, 298, 299, 300, 301, 322, 570, 571, 605, 607], "on_after_optimizer_step": [194, 227, 264, 265, 289, 299, 300, 301, 322, 607], "on_before_ev": [194, 227, 264, 265, 299, 300], "on_after_ev": [194, 227, 264, 265, 299, 300], "on_post_grad": [194, 227], "on_step_end": [194, 227, 254, 259, 264, 265, 293, 296, 297, 298, 299, 300, 322, 325, 570, 571, 605, 607], "on_batch_end": [194, 227, 254, 259], "register_hook": [194, 227], "input_arg": [194, 227], "input_kwarg": [194, 227], "tensorflowimagefold": 207, "compon": [221, 227, 238, 250, 254, 259, 267, 268, 269, 322, 468, 503, 506, 518, 572, 580, 581, 585, 602, 605, 606], "relat": [221, 227, 231, 245, 246, 254, 259, 262, 273, 301, 325, 415, 418, 420, 425, 505, 508, 509, 510, 513, 585, 619], "_epoch_ran": [221, 227], "ran": [221, 227], "eval_frequ": [221, 227], "frequenc": [221, 227, 264, 299, 606, 607, 619], "term": [221, 227, 299, 301, 517, 570, 581, 582, 604, 605, 617], "best_scor": [221, 227], "best_model": [221, 227], "found": [221, 227, 238, 239, 250, 251, 285, 307, 313, 471, 487, 504, 521, 565, 583, 590, 617], "train_cfg": [221, 227, 325], "evaluation_distribut": [221, 227, 254, 259], "train_distribut": [221, 227, 254, 259], "on_post_forward": [221, 227], "deprec": [221, 227, 487, 597, 600, 616], "init_train_cfg": [221, 227], "create_criterion": [221, 227], "create_optim": [221, 227], "disil": [221, 227], "generate_hook": [221, 227, 254, 259], "qlinear2qdq": [222, 227, 269], "torch_to_fp32_onnx": [222, 224], "do_constant_fold": [222, 224, 287], "verbos": [222, 224, 240, 241, 242, 287, 307], "int8_model": [222, 224, 522], "ax": [222, 224, 287], "torch_to_int8_onnx": [222, 224], "u8s8": [222, 224], "optionl": [222, 224], "qdq_op_int32_bia": [222, 224, 574], "qdq_op_fp32_bias_qdq": [222, 224, 574], "onnx_qlinear_to_qdq": [222, 223], "input_name_to_nod": [222, 223, 285], "qlinearop": [222, 223, 579, 593, 611], "check_model": 223, "update_weight_bia": 224, "fp32_onnx_path": [224, 225], "wegiht": 224, "set_data_typ": 224, "weight_typ": 224, "activation_typ": 224, "get_node_map": 224, "module_node_map": 224, "get_quantizable_onnx_op": 224, "quantize_nod": 224, "build_scale_map": 224, "int8_scale_info": 224, "scale_zp_dict": 224, "set_scale_info": 224, "int8_onnx_model": 224, "int8_onnx_path": 224, "recalculate_bia": 224, "recalcul": [224, 292], "remove_nodes_by_nam": 224, "sub_graph_with_int32_bia": 224, "a_info": 224, "b_info": 224, "qdq_fp32_bia": 224, "excut": 224, "qdq_int32_bia": 224, "qdq_fp32_bias_qdq": 224, "onnx2numpy_dtyp": 225, "onnx_node_typ": 225, "dummydataread": 225, "achiev": [226, 227, 267, 574, 582, 605, 607, 608, 609, 611, 615, 617], "within": [226, 227, 231, 267, 273, 286, 299, 307, 516, 518, 583, 595, 599, 602, 609], "variou": [226, 227, 236, 267, 278, 579, 585, 608, 610], "dl": [226, 227, 236, 254, 259, 267, 278, 578, 589, 602, 609], "bring": [226, 227, 267, 596, 611], "work": [226, 227, 254, 259, 267, 520, 567, 570, 597, 600, 607, 608, 612, 613, 615], "sinc": [226, 227, 228, 254, 259, 267, 270, 328, 456, 542, 570, 574, 580, 582, 596, 602, 605], "vari": [226, 227, 254, 259, 267, 606, 620], "roc": [226, 227, 235, 254, 259, 267, 277], "criteria": [226, 227, 254, 259, 262, 264, 267, 269, 290, 313, 518, 602], "footprint": [226, 227, 254, 259, 267, 288, 571, 604, 607, 608, 610], "flexibl": [226, 227, 254, 259, 267, 570, 607, 608], "set_config_by_model": [226, 227, 236], "model_obj": [226, 227, 236], "popular": [227, 269, 514, 521, 522, 570, 573, 574, 577, 607, 611, 617], "techniqu": [227, 269, 514, 521, 579, 585, 605, 607, 608, 610, 611, 619], "bleu": [227, 229, 234, 248, 269, 271, 276, 582], "bleu_util": [227, 234, 269, 276], "coco_label_map": [227, 234, 269, 276], "coco_tool": [227, 234, 269, 276], "evaluate_squad": [227, 234, 269, 276], "dynast": [227, 250, 269], "supernetwork": [227, 240, 243, 244, 250], "dynas_manag": [227, 243, 244, 250], "dynas_predictor": [227, 243, 244, 250], "dynas_search": [227, 244, 250], "dynas_util": [227, 242, 244, 250], "basic_na": [227, 250, 269], "dyna": [227, 240, 241, 242, 243, 244, 250, 269, 519, 579, 610], "nas_util": [227, 250, 269], "pruning_recip": [227, 269], "tile_pattern": [227, 255, 256], "pytorch_prun": [227, 269, 300], "logger": [227, 260, 269, 290, 323, 326, 332, 468, 472, 476], "prune_util": [227, 260, 269], "pruner": [227, 254, 259, 260, 262, 265, 269, 495, 498, 607, 619], "schedul": [227, 260, 264, 269, 290, 296, 299, 301, 322, 551, 605], "graph_optim": [227, 236, 269, 339, 408, 443, 447, 448, 468, 476, 492], "mixed_precis": [227, 269, 341, 408, 443, 468, 476, 492], "model_convers": [227, 269], "pruning_v2": [227, 269], "quantconf": [227, 267, 278, 304], "qfunc": [227, 267], "routinu": [227, 267], "distributed_execut": [227, 267], "pruningconf": [227, 254, 259], "pruning_func": [227, 254, 259], "update_items_for_all_prun": [227, 254, 265], "argument": [227, 247, 249, 254, 259, 265, 268, 300, 334, 442, 446, 451, 454, 460, 472, 480, 500, 519], "howev": [227, 254, 259, 265, 300, 574, 607], "still": [227, 254, 259, 265, 300, 611, 612], "analys": [227, 254, 259, 265], "generate_prun": [227, 254, 259], "flow": [227, 232, 233, 254, 259, 274, 275, 518, 519], "dens": [227, 254, 259, 266, 302, 607, 608, 620], "spars": [227, 254, 259, 264, 299, 568, 607, 608, 609], "get_sparsity_ratio": [227, 254, 259, 262, 265, 292, 300], "sparsiti": [227, 254, 258, 259, 262, 264, 265, 266, 286, 287, 292, 296, 297, 298, 299, 300, 302, 332, 521, 568, 579, 607, 620], "elementwise_over_matmul_gemm_conv": [227, 254, 259, 265, 300], "elementwise_over_al": [227, 254, 259, 265, 300], "blockwise_over_matmul_gemm_conv": [227, 254, 259, 265, 300], "graphoptim": [227, 236, 339, 440, 491], "privat": [227, 236, 516], "member": [227, 236, 516, 522], "modelconvers": [227, 237, 551], "unicoderegex": [228, 270], "hoc": [228, 270], "hack": [228, 270], "nondigit_punct_r": [228, 270], "compil": [228, 270, 606], "preced": [228, 270], "digit": [228, 270, 609], "punct_nondigit_r": [228, 270], "symbol_r": [228, 270], "property_char": [228, 270], "join": [228, 270], "bleu_token": [228, 270], "mose": [228, 270], "smt": [228, 270], "mosesdecod": [228, 270], "master": [228, 229, 232, 233, 262, 265, 270, 271, 274, 275, 292, 300, 315], "mteval": [228, 270], "v14": [228, 270], "pl": [228, 270], "l954": [228, 270], "l983": [228, 270], "bilingu": [228, 270, 542], "understudi": [228, 270, 542], "score": [228, 229, 231, 232, 233, 235, 248, 262, 264, 270, 271, 273, 274, 275, 276, 277, 289, 292, 299, 301, 306, 310, 313, 325, 518, 542, 582, 604, 607, 608, 614, 617], "qualiti": [228, 270, 542], "machin": [228, 246, 270, 347, 542, 565, 574, 580, 588, 602, 609, 615], "natur": [228, 270, 542], "approxim": [228, 229, 270, 271, 542, 582], "glue": [228, 235, 270, 277, 542, 568, 582, 591], "ngram": [228, 270, 542, 582], "breviti": [228, 229, 270, 271, 542, 582], "penalti": [228, 229, 270, 271, 542, 582], "doe": [228, 231, 240, 270, 273, 305, 313, 542, 568, 582, 613, 616], "beam": [228, 270, 542, 582], "occur": [228, 270, 542], "bleu_scor": [228, 229, 270, 271, 542], "tensor2tensor": [229, 249, 271], "bleu_hook": [229, 271], "compute_bleu": [229, 248, 271], "reference_corpu": [229, 271], "translation_corpu": [229, 271], "max_ord": [229, 271], "use_bp": [229, 271], "against": [229, 271], "gram": [229, 271], "flag": [229, 271, 322, 497], "third": [231, 273, 565, 581], "parti": [231, 273, 581, 611], "pycocotool": [231, 273, 575, 580], "object_detect": [231, 273], "noth": [231, 273, 480, 617], "thu": [231, 273, 611], "cannot": [231, 273, 475, 518, 574, 575, 615], "slim": [231, 273, 284, 286, 584], "jonathanhuang": [231, 273], "image_id": [231, 273, 582], "encod": [231, 240, 249, 273, 616], "groundtruth": [231, 273], "invok": [231, 273], "groundtruth_dict": [231, 273], "exportgroundtruthtococo": [231, 273], "groundtruth_boxes_list": [231, 273], "groundtruth_classes_list": [231, 273], "max_num_class": [231, 273], "output_path": [231, 273, 285, 480], "detections_list": [231, 273], "exportdetectionstococo": [231, 273], "detection_boxes_list": [231, 273], "detection_scores_list": [231, 273], "detection_classes_list": [231, 273], "cocowrapp": [231, 273], "loadannot": [231, 273], "cocoevalwrapp": [231, 273], "agnostic_mod": [231, 273], "computemetr": [231, 273], "detection_typ": [231, 273], "bbox": [231, 273, 518, 582], "hold": [231, 273, 285, 307, 568], "datastructur": [231, 273], "mscoco": [231, 273], "org": [231, 249, 264, 273, 289, 517, 518, 565, 580, 597, 600], "replic": [231, 273], "behavior": [231, 273, 516, 517, 522, 576, 584, 615, 619], "extern": [231, 273, 285, 565], "storag": [231, 273, 521, 577, 582], "category_id": [231, 273], "iou_typ": [231, 273], "iou_thr": [231, 235, 273, 276, 277, 582], "map_point": [231, 235, 273, 276, 277, 582], "cocoev": [231, 273], "Then": [231, 273, 315, 565, 595, 597, 599, 600, 617], "getcategori": [231, 273], "getagnosticmod": [231, 273], "agnost": [231, 273, 570], "getcategoryidlist": [231, 273], "accumul": [231, 273, 306, 317, 318, 617], "p": [231, 273, 565, 603], "include_metrics_per_categori": [231, 273], "all_metrics_per_categori": [231, 273], "summeri": [231, 273], "per_category_ap": [231, 273], "care": [231, 273], "hand": [231, 273, 519, 565], "pollut": [231, 273], "mldash": [231, 273], "summary_metr": [231, 273], "iou": [231, 235, 273, 277], "increment": [231, 247, 249, 273, 306, 617], "50iou": [231, 273], "50": [231, 233, 242, 273, 275, 519, 620], "75iou": [231, 273], "75": [231, 273, 620], "32": [231, 273, 572, 578, 606, 607, 620], "pixel": [231, 273, 616], "medium": [231, 273, 609], "96": [231, 273, 620], "10000": [231, 273, 307], "recal": [231, 233, 235, 273, 275, 277], "bycategori": [231, 273], "supercategori": [231, 273], "backward": [231, 273, 322, 570, 571, 572, 605, 607, 611, 613], "performancebycategori": [231, 273], "regardless": [231, 273, 516], "category_stat": [231, 273], "exportsingleimagegroundtruthtococo": [231, 273], "next_annotation_id": [231, 273], "category_id_set": [231, 273], "groundtruth_box": [231, 273], "groundtruth_class": [231, 273], "groundtruth_mask": [231, 273], "groundtruth_is_crowd": [231, 273], "ingest": [231, 273], "ones": [231, 273, 608], "exportsingleimagedetectionstococo": [231, 273], "uniqu": [231, 243, 268, 273, 307, 374, 375, 611], "assign": [231, 273, 287, 315, 332, 373, 374, 379, 380, 381, 382, 565, 572, 610], "continu": [231, 262, 273, 292, 308, 519, 603, 607], "num_gt_box": [231, 273], "num_detect": [231, 235, 273, 276, 277, 582, 619], "image_height": [231, 273], "image_width": [231, 273], "detection_mask": [231, 273], "crowd": [231, 273], "exportsingleimagedetectionboxestococo": [231, 273], "detection_box": [231, 273, 619], "detection_scor": [231, 273, 619], "detection_class": [231, 273, 619], "exporsingleimagedetectionboxestococo": [231, 273], "exportsingleimagedetectionmaskstococo": [231, 273], "allenai": [232, 233, 274, 275], "bi": [232, 233, 274, 275], "att": [232, 233, 274, 275], "f1_score": [232, 233, 274, 275], "ground_truth": [232, 233, 274, 275], "metric_max_over_ground_truth": [232, 233, 274, 275], "metric_fn": [232, 233, 274, 275], "exact_match_scor": [232, 274], "exact": [232, 274], "articl": [232, 233, 274, 275], "paragraph": [232, 233, 274, 275], "qa": [232, 233, 274, 275], "cantain": [232, 233, 274, 275], "normalize_answ": [233, 275], "extra": [233, 275], "newlin": [233, 275], "tab": [233, 275, 376, 379, 385, 503, 602, 615], "harmon": [233, 235, 275, 277], "answer_start": [233, 275], "177": [233, 275], "denver": [233, 275], "bronco": [233, 275], "nfl": [233, 275], "team": [233, 275, 516, 612], "afc": [233, 275], "super": [233, 240, 243, 275, 519], "bowl": [233, 275], "56be4db0acb8001400a502ec": [233, 275], "percentag": [233, 241, 275, 619], "single_output": [234, 235, 276, 277], "hvd": [234, 235, 276, 277, 572], "sample_weight": [234, 235, 276, 277], "metric_registri": [234, 235, 276, 277], "metric_typ": [234, 235, 276, 277], "decorator_metr": [234, 235, 276, 277], "tensorflowmetr": [235, 277], "maintain": [235, 277, 516, 517, 521, 584, 585, 597, 600, 607, 613], "pytorchmetr": [235, 277], "mxnetmetr": [235, 277], "onnxrtqlmetr": [235, 277], "onnxrtitmetr": [235, 277], "wrappytorchmetr": [235, 277], "wrapmxnetmetr": [235, 277], "wraponnxrtmetr": [235, 277], "proport": [235, 277], "were": [235, 276, 277, 588], "pred_list": [235, 277], "pytorchloss": [235, 277], "least": [235, 265, 277, 292, 300, 481, 607, 608, 617], "sum": [235, 277, 570], "mae": [235, 277, 582], "magnitud": [235, 269, 277, 289, 290, 294, 295, 579, 607, 608, 620], "numer": [235, 277, 583, 609, 611], "rmse": [235, 241, 277, 582, 617], "squar": [235, 241, 277, 312, 582, 617], "tensorflowtopk": [235, 276, 277], "k": [235, 276, 277, 582, 607], "among": [235, 276, 277, 596], "most": [235, 276, 277, 307, 565, 583, 607, 611, 617], "outcom": [235, 276, 277], "num_correct": [235, 276, 277], "generaltopk": [235, 277], "cocomapv2": [235, 276, 277, 582], "anno_path": [235, 276, 277, 582], "map_kei": [235, 276, 277], "detectionboxes_precis": [235, 276, 277], "output_index_map": [235, 276, 277, 582], "tensorflowmap": [235, 277], "tensorflowcocomap": [235, 277], "tensorflowvocmap": [235, 277], "squadf1": [235, 276, 277, 582], "miou": [235, 277], "num_class": [235, 277], "21": [235, 277, 590, 591, 609, 620], "intersect": [235, 277, 522, 582], "hist": [235, 277, 327], "onnxrtglu": [235, 277], "dlrm": [235, 277], "basicna": [238, 250], "model_build": [238, 250, 251], "nasbas": [238, 239, 250, 251, 519], "conf_fnam": [238, 250], "init_by_cfg": [238, 250], "init_for_search": [239, 250], "select_model_arch": [239, 250, 251], "create_acc_predictor": [239, 250], "predictor": [239, 240, 241, 243, 250, 519], "create_macs_predictor": [239, 250], "mac": [239, 241, 243, 248, 250, 519, 603], "create_latency_predictor": [239, 250], "latenc": [239, 240, 241, 243, 248, 250, 485, 614, 617], "init_cfg": [239, 250], "manag": [240, 241, 242, 243, 315, 351, 384, 386, 409, 470, 486, 577, 585, 586, 596], "parametermanag": [240, 243], "hot": 240, "pymoo": [240, 242, 243, 565], "process_param_dict": 240, "upper": [240, 242, 602], "vector": [240, 251, 253], "onehot_gener": 240, "in_arrai": 240, "onehot": 240, "account": [240, 516, 614, 617], "depth": [240, 317, 319, 570, 612], "input_arrai": 240, "elast": 240, "mapper": [240, 373, 436, 437], "random_sampl": [240, 307], "subnetwork": [240, 243], "trial_limit": 240, "100000": 240, "translate2param": 240, "pymoo_vector": 240, "translate2pymoo": 240, "import_csv": 240, "filepath": 240, "column_nam": 240, "drop_dupl": 240, "panda": 240, "datafram": [240, 286, 287], "csv": [240, 243, 487, 519, 565], "purpos": [240, 576, 583, 602, 610], "subnet": [240, 243], "column": [240, 565, 607], "df": [240, 286, 287], "set_se": 240, "create_training_set": 240, "train_with_al": 240, "sklearn": 240, "transformerltencod": 240, "default_alpha": 241, "cost_factor": 241, "default_cost_factor": 241, "max_iter": 241, "default_max_iter": 241, "regressor": 241, "get_paramet": 241, "get_metr": [241, 325, 349], "mape": 241, "kendal": 241, "rank": [241, 572], "correl": 241, "spearman": 241, "searcher": [241, 253], "searchalgomanag": 242, "nsga2": [242, 519], "optuna": 242, "configure_nsga2": 242, "popul": [242, 519], "num_ev": [242, 519], "1000": [242, 485, 619], "warm_pop": 242, "crossover_prob": 242, "crossover_eta": 242, "mutation_prob": 242, "02": [242, 620], "mutation_eta": 242, "configure_ag": 242, "ag": [242, 516], "run_search": 242, "save_histori": 242, "previous": [242, 567], "problemmultiobject": 242, "evaluation_interfac": 242, "evaluationinterfac": [242, 243], "param_count": 242, "param_upperbound": 242, "supernet": [242, 243, 245, 246, 519], "ofa": [242, 243, 565], "mobilenetv3": [242, 243, 519], "45": [242, 518, 620], "get_mac": 243, "input_s": 243, "measure_lat": 243, "warmup_step": 243, "measure_step": 243, "resolut": 243, "warm": [243, 288], "runner": [243, 603], "ofarunn": 243, "acc_predictor": 243, "macs_predictor": 243, "latency_predictor": 243, "datasetpath": 243, "resnet50": [243, 521, 572, 577, 585, 589, 611, 614, 620], "w1": 243, "ilsvrc2012": [243, 519], "estimate_accuracy_top1": 243, "subnet_cfg": 243, "top1": [243, 611], "estimate_mac": 243, "estimate_lat": 243, "validate_top1": 243, "validate_mac": 243, "flop": 243, "fvcore": [243, 565], "get_subnet": 243, "transformerltrunn": 243, "checkpoint_path": [243, 248], "predictor_mod": 243, "csv_path": 243, "written": 243, "eval_subnet": 243, "clear_csv": 243, "evaluationinterfaceresnet50": 243, "evaluationinterfacemobilenetv3": 243, "evaluationinterfacetransformerlt": 243, "get_torchvision_model": 243, "torchvisionrefer": 243, "dataset_path": [243, 248, 488, 519], "baselin": [243, 288, 315, 325, 614, 615], "subprocess": [243, 480, 503], "machine_transl": [244, 245, 250], "transformer_interfac": [244, 245, 246], "lt": [246, 519, 568, 606, 620], "get_incremental_st": 247, "incremental_st": [247, 249], "set_incremental_st": 247, "multiheadattentionsup": 247, "super_embed_dim": 247, "num_head": 247, "is_encod": 247, "super_kdim": 247, "super_vdim": 247, "dropout": [247, 249], "add_bias_kv": [247, 249], "add_zero_attn": [247, 249], "self_attent": 247, "encoder_decoder_attent": 247, "out_dim": 247, "qkv_dim": 247, "head": [247, 249, 607], "key_padding_mask": 247, "need_weight": 247, "static_kv": 247, "attn_mask": [247, 249], "timestep": 247, "bytetensor": [247, 249], "src_len": [247, 249], "reorder_incremental_st": 247, "new_ord": [247, 249], "buffer": [247, 286], "compute_lat": 248, "get_model_paramet": 248, "compute_mac": 248, "transformersupernetwork": 249, "fairseq": 249, "vaswani": 249, "2017": 249, "arxiv": [249, 264, 289], "1706": 249, "03762": 249, "transformerencod": 249, "transformerdecod": 249, "line": [249, 479, 480, 500, 565, 572, 579, 585, 590, 591, 607, 615], "encoder_config": 249, "embed_token": 249, "encoder_lay": 249, "transformerencoderlay": 249, "argpars": [249, 602], "namespac": 249, "src_token": 249, "src_length": 249, "longtensor": 249, "sentenc": 249, "encoder_out": 249, "embed_dim": 249, "encoder_padding_mask": 249, "reorder_encoder_out": 249, "rearrang": 249, "max_posit": 249, "upgrade_state_dict_nam": 249, "upgrad": 249, "possibli": 249, "old": [249, 265, 332, 613], "decoder_config": 249, "no_encoder_attn": 249, "decoder_lay": 249, "transformerdecoderlay": 249, "attend": 249, "prev_output_token": 249, "tgt_len": 249, "forc": [249, 328, 583, 612], "extract_featur": 249, "output_lay": 249, "layer_idx": 249, "ffn": 249, "residu": 249, "suggest": [249, 253, 307, 518, 614], "learn": [249, 521, 522, 567, 568, 574, 578, 579, 580, 583, 585, 587, 590, 591, 593, 596, 597, 600, 602, 608, 609, 611, 615, 617], "robust": 249, "encoder_normalize_befor": 249, "norm": 249, "layer_norm": 249, "self_attn_layer_norm": 249, "final_layer_norm": 249, "seq_len": 249, "t_tgt": 249, "t_src": 249, "decoder_normalize_befor": 249, "prev_self_attn_st": 249, "prev_attn_st": 249, "self_attn_mask": 249, "self_attn_padding_mask": 249, "builder": [251, 286], "propos": [251, 292, 519, 522, 570, 583, 607], "res_save_path": 251, "count_model_paramet": 251, "load_search_result": 251, "dump_search_result": 251, "params_vec2params_dict": [251, 253], "paras_vec": 251, "find_best_model_arch": 251, "lie": [251, 519], "pareto": [251, 252, 519], "front": [251, 252, 519], "metrics_convers": 251, "init_search_cfg": 251, "nas_registri": 252, "nas_method": 252, "create_search_space_pool": 252, "idx": [252, 285, 568], "enumer": [252, 322, 336, 437, 443, 469, 522, 570, 571, 572, 605, 607, 615], "find_pareto_front": 252, "n_point": 252, "n_metric": 252, "n_pareto_point": 252, "get_feedback": 253, "feedback": 253, "para_vec": 253, "gridsearch": 253, "grid": [253, 519], "whole": [253, 502, 565, 611], "exhaust": [253, 269, 311, 314, 610], "randomsearch": 253, "42": [253, 606, 620], "bayesianoptimizationsearch": 253, "bayesian": [253, 269, 309, 311, 519, 610], "indices2params_vec": 253, "tfpruningcallback": [254, 259], "input_model": [254, 259, 584, 615], "pure": [254, 259], "s_output": [254, 259], "s_loss": [254, 259], "t_output": [254, 259], "support_pattern": [255, 256, 257], "pattern_registri": 257, "pattern_typ": 257, "patternbas": [257, 258], "mask_shap": [257, 258], "is_contigu": 257, "compute_spars": [257, 258, 332], "abs_sum": 257, "abs_max": 257, "tile": 258, "tilepatternbas": 258, "nxm": [258, 262, 292, 299, 608], "matrix": [258, 521, 593, 608], "repeat_mask": 258, "ori_shap": 258, "repeat": [258, 617], "tilepattern_1x1": 258, "1x1": [258, 570, 607], "unstructur": [258, 579, 607, 608, 620], "tilepattern_2x2": 258, "2x2": 258, "tilepattern_1x16": 258, "1x16": 258, "tilepattern_4x1": 258, "tilepattern_1x2": 258, "1x2": 258, "register_pattern": [262, 292], "registri": [262, 264, 266, 289, 292, 299, 301, 302, 519], "get_pattern": [262, 292], "assertionerror": [262, 263, 264, 278, 292, 299, 303], "unit": [262, 292, 479, 487, 517], "is_glob": [262, 292], "contrast": [262, 292, 616], "get_mask": [262, 292], "target_sparsity_ratio": [262, 264, 292, 299], "pre_mask": [262, 292], "max_sparsity_ratio_per_lay": [262, 264, 610], "get_masks_glob": [262, 292], "get_mask_singl": 262, "exact_sparsity_ratio": [262, 292], "obtain": [262, 263, 266, 292, 300, 301, 302, 303, 518, 574, 608, 614, 617], "get_block_size_dict": [262, 292], "get_masks_loc": [262, 292], "calul": [262, 292], "ration": [262, 292], "get_pattern_lock_mask": [262, 292], "lock": [262, 292, 297, 298, 579, 605, 607, 608], "patternnxm": [262, 292], "kept": [262, 292], "block_siz": [262, 292], "hidden": [262, 292, 487, 522, 607], "block_size_1": [262, 292], "block_size_2": [262, 292], "keep_pre_mask": [262, 292], "keep": [262, 263, 303, 308, 518, 522, 601, 602, 613, 617], "unchang": [262, 292], "patternninm": [262, 292], "doc": [262, 292, 317, 318, 319, 332, 582, 597, 600], "md": [262, 292, 572], "check_config": [263, 303], "prune_config": [263, 303], "everyth": [263, 303, 590], "reset_non_value_to_default": 263, "undefin": [263, 303], "process_and_check_config": [263, 303], "obejct": 263, "process_config": [263, 303], "parse_to_prun": [263, 303], "parse_not_to_prun": 263, "register_prun": [264, 299], "get_prun": [264, 299], "module_nam": [264, 266, 289, 299, 301, 302, 332, 487], "cuurent": [264, 299], "current_sparsity_ratio": [264, 299], "global_step": [264, 299], "update_frequency_on_step": [264, 610], "mask_weight": [264, 299], "formal": [264, 299], "local_step": [264, 265, 299, 300], "judg": 264, "Or": 264, "simpli": [264, 572, 584, 585, 587, 590, 602], "check_is_pruned_step": [264, 299], "update_scor": 264, "magnitudeprun": 264, "snipprun": 264, "snip": [264, 289, 579, 607, 608, 620], "1810": [264, 289], "02340": [264, 289], "snipmomentumprun": 264, "moreoev": 264, "momentum": [264, 289, 579, 607, 608, 619], "patternlockprun": [264, 297, 299], "templat": [265, 269, 300, 355, 374, 379, 468, 476, 513, 565, 607], "tree": [265, 300, 317, 319, 350, 379, 381], "nlp": [265, 300, 590, 607, 608, 611], "huggingface_model": [265, 300], "config_file_path": [265, 300], "pruner_info": [265, 300], "register_schedul": [266, 302], "get_schedul": [266, 302], "gradual": [266, 302, 607, 608], "update_sparsity_ratio": [266, 302], "aggressive_ratio": 266, "current_prune_step": [266, 302], "total_prune_step": [266, 302], "oneshotschedul": [266, 302], "aggress": 266, "iterativeschedul": [266, 302], "target_ratio": [266, 302], "server": [268, 269, 408, 415, 467, 468, 475, 476, 484, 487, 498, 500, 502, 565, 602], "seper": 268, "opt_model": 268, "fulli": [268, 611], "meet": [268, 288, 305, 306, 308, 313, 315, 518, 574, 604, 609, 610, 611, 615, 617], "saniti": 268, "illeg": 268, "sync": 268, "accordingli": [268, 296, 593], "contrib": 269, "base_model": [269, 280, 281, 283, 285, 286, 287], "keras_model": [269, 280], "mxnet_model": [269, 280], "nets_factori": [269, 280], "onnx_model": [269, 280, 419], "tensorflow_model": [269, 280], "torch_model": [269, 280], "pruner_legaci": [269, 290], "gradient_sensit": [269, 290, 295], "group_lasso": [269, 290, 295], "pattern_lock": [269, 290, 295], "reg": [269, 290, 299], "tuning_sampl": [269, 311, 317], "tuning_spac": [269, 311, 317, 318, 320], "tuning_struct": [269, 311, 317, 318, 319], "auto_mixed_precis": [269, 311], "conserv": [269, 311], "hawq_v2": [269, 311], "mse_v2": [269, 311], "collect_layer_histogram": [269, 326], "create_obj_from_config": [269, 326], "kl_diverg": [269, 326], "load_huggingfac": [269, 326], "ux": 269, "config_gener": [269, 408, 468], "configuration_wizard": [269, 408, 468], "db_manag": [269, 408, 468, 506], "file_brows": [269, 408, 468], "jobs_manag": [269, 408, 468], "model_zoo": [269, 408, 468], "names_mapp": [269, 408, 468], "profil": [269, 342, 360, 367, 369, 379, 382, 384, 385, 408, 416, 424, 468, 469, 479, 485, 502, 507], "manage_workspac": [269, 408, 468], "workload": [269, 337, 338, 339, 341, 343, 344, 347, 369, 374, 379, 439, 456, 463, 468, 470, 476, 486, 487, 502, 505, 507, 508, 509, 510, 609], "executor": [269, 335, 468, 476], "expiring_dict": [269, 468, 476], "github_info": [269, 468, 476], "hw_info": [269, 468, 476], "json_seri": [269, 338, 392, 393, 398, 400, 401, 404, 414, 423, 449, 455, 468, 475, 476, 485, 488, 489, 490, 491, 493, 494, 495, 496, 497], "proc": [269, 468, 476], "status_upd": [269, 468, 476], "yaml_util": [269, 468, 476], "web": [269, 467, 468, 521, 565, 615], "servic": [269, 468, 501, 502, 521, 602, 606], "commun": [269, 468, 502, 503, 504, 516, 565], "router": [269, 468, 502], "inc_bench": [269, 468, 565, 577], "set_random_se": [269, 326, 332, 497], "set_tensorboard": [269, 332], "set_workspac": [269, 332, 488, 497], "eval_metr": [278, 304], "hybirdblock": [278, 304], "paramt": [278, 304], "basemodel": [279, 280, 281, 283, 285, 286, 287], "plai": [279, 280, 607, 609], "role": [279, 280, 607], "node_typ": [279, 280], "kerasmodel": [281, 426], "get_model_fwk_nam": 282, "fwk": 282, "net": 284, "factori": [284, 389, 408, 443, 459, 464, 468, 479, 483], "tfslimnetsfactori": 284, "model_func": 284, "arg_scop": 284, "onnxmodel": [285, 419], "is_large_model": 285, "2gb": 285, "ort": 285, "about": [285, 289, 387, 416, 472, 474, 475, 480, 481, 516, 565, 567, 612, 620], "output_name_to_nod": 285, "ir_vers": 285, "opset_import": 285, "nodes_to_remov": 285, "nodes_to_add": 285, "add_initi": 285, "get_initi": 285, "remove_initi": 285, "init_to_remov": 285, "set_initi": 285, "get_children": 285, "get_par": 285, "find_node_by_nam": 285, "new_nodes_list": 285, "find_nodes_by_initi": 285, "get_scale_zero": 285, "save_model_to_fil": 285, "use_external_data_format": 285, "replace_node_input": 285, "new_input_nam": 285, "replace_input_of_all_nod": 285, "white_optyp": 285, "black_optyp": 285, "replace_node_output": 285, "new_output_nam": 285, "replace_output_of_all_nod": 285, "remove_unused_const": 285, "topological_sort": 285, "enable_subgraph": 285, "topolog": 285, "get_nodes_chain": 285, "start_nod": 285, "stop_nod": 285, "result_chain": 285, "chain": 285, "add_tensors_to_output": 285, "remove_tensors_from_output": 285, "match_first_par": 285, "parent_op_typ": 285, "match_par": 285, "input_index": 285, "return_indic": 285, "match_parent_path": 285, "parent_input_index": 285, "get_model_typ": [286, 417], "validate_graph_nod": 286, "validate_and_inference_input_output": 286, "input_tensor_nam": 286, "output_tensor_nam": 286, "graph_sess": 286, "graph_def_sess": 286, "frozen_pb_sess": 286, "load_saved_model": 286, "saved_model_tag": 286, "serv": [286, 504, 512], "signatur": 286, "saved_model_dir": 286, "tag": [286, 328, 474, 487, 615], "metagraphdef": 286, "keras_sess": 286, "slim_sess": 286, "checkpoint_sess": 286, "estimator_sess": 286, "saved_model_sess": 286, "renturn": 286, "workspace_path": [286, 287, 472, 487], "tensorflowsavedmodelmodel": 286, "get_all_weight_nam": [286, 287], "update_weight": [286, 287, 297], "new_tensor": [286, 287], "get_weight": [286, 287], "wight": 286, "report_spars": [286, 287], "total_spars": [286, 287], "build_saved_model": 286, "savedmodelbuild": 286, "protocol": 286, "asset": 286, "tensorflowqatmodel": 286, "frozen_graph_def": 286, "tensorflowcheckpointmodel": 286, "checkpoint": [286, 331, 584], "issu": [286, 516, 517, 520, 565, 580, 611, 615], "tensorflowmodel": [286, 395, 424, 426, 427, 428, 429], "pytorchbasemodel": 287, "register_forward_pre_hook": 287, "remove_hook": 287, "generate_forward_pre_hook": 287, "update_gradi": 287, "grad_nam": 287, "new_grad": 287, "grad": 287, "prune_weights_": 287, "place": [287, 571, 580, 607, 615], "get_input": 287, "get_gradi": 287, "pytorchmodel": [287, 293, 294, 296, 297, 298], "quantized_state_dict": 287, "load_quantized_state_dict": 287, "stat_dict": 287, "export_to_jit": 287, "jit": [287, 585, 587, 592, 615], "export_to_fp32_onnx": 287, "rand": [287, 585], "stdout": 287, "export_to_bf16_onnx": 287, "export_to_int8_onnx": 287, "s8s8": 287, "pytorchfxmodel": 287, "ipexmodel": 287, "driven": [288, 521, 583, 602, 604, 615], "objective_registri": 288, "objective_custom_registri": 288, "obj_cl": 288, "eural_compressor": 288, "objective_cl": 288, "user_object": 288, "__class__": 288, "__name__": 288, "objective_cfg": 288, "usr_cfg": 288, "user_obj_cfg": 288, "easili": [288, 522, 586, 590, 602, 604, 607, 608], "sart": 288, "result_list": 288, "loop": [288, 322, 518, 519, 576, 614, 617], "durat": [288, 315, 352, 363, 366, 373, 379, 381, 382, 472, 614], "peak": [288, 604], "alloc": 288, "models": [288, 604, 610], "multiobject": [288, 497], "metric_criterion": 288, "metric_weight": 288, "obj_criterion": 288, "obj_weight": 288, "is_measur": 288, "accuracy_target": 288, "accuracy_meet": 288, "verifi": 288, "accuracy_meet_req": 288, "last_result": 288, "check_result": 288, "set_model": 288, "best_result": 288, "tune_data": 288, "acc1": 288, "obj1": 288, "obj2": 288, "acc2": 288, "register_criterion": 289, "get_criterion": 289, "pruningcriterion": 289, "magnitudecriterion": 289, "criterion_class": 289, "determin": [289, 292, 299, 327, 500, 516, 518, 608], "magtinud": 289, "gradientcriterion": 289, "snipcriterion": 289, "product": [289, 579, 583, 585, 586, 602, 606, 609, 611, 614, 617], "snipmomentumcriterion": 289, "mechan": [289, 614], "preserv": 289, "basepattern": [292, 301], "keep_mask_lay": 292, "invalid_lay": 292, "reduce_tensor": 292, "along": [292, 480, 580], "unprun": 292, "get_single_mask_per_target_ratio": 292, "return_dict": 292, "zero_cnt": 292, "total_cnt": 292, "check_layer_valid": 292, "get_reduced_masks_from_data": 292, "update_residual_cnt": 292, "get_sparsity_ratio_each_lay": 292, "sparsity_ratio": 292, "cnt": 292, "sparsityinfo": 292, "adjust_ratio": 292, "key_new_spars": 292, "max_sparsity_ratio": 292, "min_sparsity_ratio": 292, "final_target_sparsity_ratio": 292, "examin": [292, 607], "adjust_sparsity_ratio": 292, "block_wis": 292, "get_sparsity_ratio_progress": 292, "reshape_orig_to_pattern": 292, "s1": 292, "s2": 292, "reshape_reduced_to_orig": 292, "orig_shap": 292, "reduce_scor": 292, "get_mask_per_threshold": 292, "cur_target_sparsity_ratio": 292, "keep_exact_sparsity_ratio": 292, "remain": [292, 590], "count_new_masked_cnt": 292, "new_added_mask": 292, "update_new_added_mask": 292, "cur_mask": 292, "bacaus": 292, "update_progressive_mask": 292, "progressive_step": 292, "progressive_config": 292, "update_progressive_masks_linear": 292, "update_progressive_masks_scor": 292, "update_progressive_masks_loc": 292, "update_progressive_masks_glob": 292, "get_least_ninm_mask_from_data": 292, "elementwis": [292, 293], "sparisti": 292, "get_ele_mask_per_threshold": 292, "least_ninm_mask": 292, "least_m_in_m_mask": 292, "gradientsensitivityprun": 293, "global_config": [293, 294, 296, 297, 298, 303], "overwritten": [293, 294, 296, 297, 298, 590], "elementwise_prun": 293, "parse_weight_nam": 293, "weight_name_pattern": 293, "compute_mask": [293, 296, 297], "prune_weight": 293, "update_importance_elementwis": 293, "update_importance_ab": 293, "update_importance_weight": 293, "prune_by_import": 293, "num_inst": 293, "lasso": [294, 301, 579, 607, 608], "grouplassoprun": 294, "basicmagnitudeprun": [294, 296], "legaci": 295, "pruner_registri": 298, "clase": 298, "update_spars": 298, "parse_valid_pruner_typ": 299, "baseprun": 299, "show": [299, 332, 516, 565, 570, 572, 588, 603, 607, 617], "mask_weights_gener": 299, "update_mask": 299, "basicprun": 299, "proce": 299, "regul": 299, "set_global_step": 299, "progressiveprun": 299, "grain": [299, 609], "improv": [299, 307, 517, 585, 602, 603, 607, 608, 611, 612, 617, 620], "interv": [299, 608], "check_progressive_valid": 299, "check_is_pruned_progressive_step": 299, "update_masks_progress": 299, "print_progressive_spars": 299, "register_reg": 301, "regulariz": 301, "get_reg_typ": 301, "get_reg": 301, "basereg": 301, "grouplasso": 301, "coeff": 301, "reg_term": 301, "coeffient": 301, "pruningschedul": 302, "init_ratio": 302, "init_sparsity_ratio": 302, "reset_none_to_default": 303, "update_param": [303, 354], "process_weight_config": 303, "default_config": 303, "pruners_info": 303, "process_yaml_config": 303, "check_key_valid": 303, "template_config": 303, "user_config": 303, "generate_pruner_config": 303, "calib_func": [304, 612], "entir": [304, 518, 607, 608], "ptq": [304, 518, 572, 579, 611, 615, 617], "val_dataload": [304, 611], "automixedprecisiontunestrategi": 305, "rule": [305, 585, 607, 608], "tri": [305, 306, 500, 617], "tune_config": [305, 306, 307, 308, 309, 310, 312, 313, 314, 315], "basictunestrategi": [306, 315], "polici": [306, 312, 516, 521, 606, 619, 621], "distributed_next_tune_cfg_lst": [306, 315], "comm": [306, 315], "One": [306, 565, 568, 572, 579, 607, 608, 609, 617], "tuning_config_list": 306, "impact": [306, 309, 310, 312, 313, 613, 617], "ii": [306, 617], "bayesiantunestrategi": 307, "come": [307, 521, 617], "packag": [307, 340, 348, 354, 356, 357, 359, 360, 361, 364, 365, 368, 370, 389, 390, 394, 397, 403, 405, 408, 409, 415, 434, 436, 441, 444, 447, 448, 450, 453, 459, 464, 468, 502, 522, 565, 575, 580, 602, 603, 609, 613, 617], "discret": [307, 617], "gaussian": [307, 617], "posterior": [307, 617], "black": [307, 617], "maxim": [307, 607, 608, 617], "acq_max": 307, "ac": 307, "gp": 307, "y_max": 307, "n_warmup": 307, "n_iter": 307, "acquisit": 307, "relev": 307, "limit": [307, 332, 521, 570, 607, 615], "acq": 307, "randomst": 307, "scipi": 307, "x_max": 307, "targetspac": 307, "pbound": 307, "9527": [307, 619], "params_to_arrai": 307, "array_to_param": 307, "amort": 307, "keyerror": 307, "get_target": 307, "num": [307, 332, 582], "_kei": 307, "bayesianoptim": 307, "promis": [307, 571, 607, 608], "gen_next_param": 307, "conservativetunestrategi": 308, "o0": [308, 617], "who": [308, 516, 617], "quantifi": 308, "quant_queu": 308, "prioriti": [308, 617], "go": [308, 576, 597, 600, 610, 616], "fp16": [308, 317, 319, 583, 611], "trail": 308, "exhaustivetunestrategi": 309, "perspect": [309, 617], "hawq_v2tunestrategi": 310, "msetunestrategi": 312, "mse_impact_lst": 312, "best_qmodel": 312, "current_best_model": 312, "ordered_op_name_typ": 312, "mse_v2tunestrategi": 313, "revert": [313, 321, 617], "highest": [313, 617], "lowest": [313, 607, 608, 617], "until": [313, 315, 519, 617], "randomtunestrategi": 314, "strategy_registri": [315, 617], "evaluation_result": [315, 572], "meet_acc_req": 315, "eval_r": 315, "master_worker_handl": 315, "matster": 315, "worker": [315, 611], "send": [315, 456, 499, 504, 517], "wait": [315, 499, 595, 599, 602], "receiv": [315, 328, 614], "sender": 315, "mpi": 315, "comun": 315, "slave_worker_handl": 315, "slave": 315, "tune_cfg_lst": 315, "distributed_travers": 315, "disribut": 315, "initial_tuning_cfg": 315, "quant_mode_wise_item": 315, "initial_op_tuning_cfg": [315, 317, 318], "op_item_dtype_dict": 315, "show_baseline_info": 315, "displai": [315, 317, 318, 319, 332, 403, 416, 602], "initial_best_acc": 315, "set_tuning_spac": 315, "setup_resum": 315, "set_q_func": 315, "update_best_op_tuning_cfg": 315, "op_tuning_cfg": 315, "deploy_config": 315, "deploy": [315, 569, 585, 602], "tuningsampl": [317, 318], "tuningspac": [317, 318, 319], "tuning_order_lst": [317, 318], "tuningord": [317, 318], "opwisetuningsampl": [317, 318], "tuning_items_prior": [317, 318], "op_dtype_dict": [317, 318], "get_opwise_candid": [317, 318], "optypewisetuningsampl": [317, 318], "optuningconfig": [317, 318, 319, 320], "fallbacktuningsampl": [317, 318], "op_dtyp": [317, 318], "skip_first": [317, 318], "op_quant_mod": [317, 320], "get_stat": [317, 320], "from_stat": [317, 320], "tuningitem": [317, 319], "item_typ": [317, 319], "get_options_nam": [317, 319], "get_option_by_nam": [317, 319], "option_nam": [317, 319], "get_detail": [317, 319], "query_item_opt": [317, 319], "op_name_typ": [317, 319], "method_nam": [317, 319], "method_v": [317, 319], "get_default_config": [317, 319], "op_tuning_config": [317, 319], "get_item_by_path": [317, 319], "get_default_full_path": [317, 319], "op_path": [317, 319], "new_path": [317, 319], "query_quant_mode_item_by_full_path": [317, 319], "query_items_by_quant_mod": [317, 319], "get_op_default_path_by_pattern": [317, 319], "modelwisetuningsampl": 318, "get_op_mode_by_query_ord": 319, "query_ord": 319, "pattern_to_intern": 319, "default_dtyp": 319, "pattern_to_path": 319, "quant_mode_from_pattern": 319, "internal_pattern": 319, "initial_tuning_cfg_with_quant_mod": 319, "step1": 319, "step2": 319, "step3": 319, "step4": 319, "step5": 319, "ordereddefaultdict": 321, "extract_data_typ": 321, "data_typ": 321, "sign": [321, 517, 565, 611, 614], "unsign": 321, "reverted_data_typ": 321, "signed_flag": 321, "compressionmanag": 322, "uesd": 322, "deal": 322, "commpon": 322, "train_loop": [322, 605], "path_to_sav": 322, "num_warm": 322, "num_iter": 322, "orchestr": [322, 521, 579], "layerhistogramcollector": [323, 326], "histogram": [323, 326, 332, 376, 379, 387, 615], "layer_tensor": [323, 326], "include_lay": [323, 326], "diverg": [323, 326, 327, 570, 617], "get_func_from_config": 325, "func_dict": 325, "get_preprocess": 325, "get_postprocess": 325, "get_algorithm": 325, "create_dataset": 325, "cfg_preprocess": 325, "cfg_filter": 325, "create_dataload": 325, "dataloader_cfg": 325, "create_eval_func": 325, "postprocess_cfg": 325, "create_train_func": 325, "Their": 325, "auxiliari": 326, "msg": [326, 329], "debug": [326, 329, 389, 390, 394, 565, 595, 599, 603, 617], "warn": [326, 329, 565], "warin": [326, 329], "alia": [326, 329, 587, 592], "fatal": [326, 329], "probabl": 327, "expand_quantized_bin": 327, "quantized_bin": 327, "reference_bin": 327, "expand": 327, "bin": [327, 332], "safe_entropi": 327, "reference_distr_p": 327, "p_sum": 327, "candidate_distr_q": 327, "q_sum": 327, "entropi": [327, 617], "get_threshold": 327, "hist_edg": 327, "min_val": 327, "max_val": 327, "quantized_typ": 327, "num_quantized_bin": 327, "255": [327, 611], "pretrain": [328, 585, 591], "optimizedmodel": 328, "from_pretrain": 328, "repositori": [328, 408, 413, 415, 468, 474, 597, 600], "hug": [328, 521, 609], "face": [328, 516, 521, 532, 585, 589, 609, 613], "hub": [328, 480, 521, 573, 577, 593], "host": [328, 572], "cache_dir": 328, "force_download": 328, "resume_download": 328, "delet": [328, 367, 373, 374, 379, 380, 381, 382, 383, 607, 608], "commit": [328, 516, 517], "git": [328, 565, 580], "artifact": 328, "co": [328, 608], "save_for_huggingface_upstream": 328, "output_dir": [328, 480, 590, 591], "get_logg": 329, "checkpoint_dir": 331, "history_cfg": 331, "best_configur": 331, "best_model_weight": 331, "pt": [331, 584, 609, 612], "snapshot": [331, 385, 506], "cfg_from_fil": 332, "yaml_fil": [332, 568, 572, 582], "lazyimport": 332, "lazi": 332, "till": [332, 617], "decorat": 332, "time_limit": 332, "get_siz": [332, 487], "fault_tolerant_fil": 332, "temporari": [332, 516], "equal_dict": 332, "d2": 332, "compare_kei": 332, "ignore_kei": 332, "ignor": [332, 568], "cpuinfo": 332, "vnni": [332, 573, 577, 579, 610, 611], "cores_per_socket": 332, "get_number_of_socket": [332, 475], "dump_elapsed_tim": [332, 522], "customized_msg": 332, "elaps": 332, "combine_histogram": 332, "old_hist": 332, "get_tensor_histogram": 332, "2048": 332, "get_all_fp32_data": 332, "get_tuning_histori": 332, "tuning_history_path": [332, 456], "str2arrai": 332, "dequantizeweight": 332, "weight_tensor": 332, "scale_info": 332, "captureoutputtofil": 332, "tmp_file_path": 332, "stream": 332, "sy": [332, 588], "stderr": 332, "captur": 332, "statist": 332, "header": [332, 433, 512, 575], "field_nam": 332, "output_handl": 332, "printer": 332, "print_stat": 332, "global_st": 332, "load_data_from_pkl": 332, "pkl": 332, "dump_data_to_loc": 332, "set_resume_from": 332, "show_memory_info": 332, "hint": 332, "project_data": [333, 439, 440, 445, 449, 452, 455, 462], "benchmark_data": 333, "workdir": [333, 449, 462, 468, 472, 476, 484], "config_filenam": [333, 449, 462], "configuration_data": [333, 440, 445, 449, 452, 455], "generate_config": [333, 440, 445, 449, 452, 455, 462], "dataloaderinterfac": [333, 449, 462], "dataloader_data": [333, 345, 374, 379, 449, 462], "parse_arg": [334, 442, 446, 451, 454, 460], "benchmark_mod": [334, 479], "set_eager_execut": [334, 442, 446, 454], "request_id": [335, 438, 456, 457, 472, 480], "asd": [335, 457], "benchmark_id": [335, 352, 353, 363], "benchmark_result_upd": 335, "benchmark_result_update_pytorch_script": 335, "neural_coder_perform": 335, "neural_coder_tim": 335, "pytorch_script_bench_optim": 335, "command_line_of_script": 335, "pytorch_script_bench_original_model": 335, "execute_real_benchmark": 335, "project_detail": [335, 368, 438, 457], "benchmark_detail": 335, "benchmark_model": [336, 408, 468], "execute_benchmark": [336, 408, 468], "benchmarkconfiggener": 337, "configgener": [337, 338, 339, 341, 342, 343, 344], "generate_evaluation_config": [337, 339, 341, 343, 344], "generate_accuracy_config": 337, "generate_performance_config": 337, "workload_directori": 338, "configuration_path": 338, "jsonseri": [338, 392, 393, 398, 400, 401, 404, 414, 423, 449, 455, 475, 477, 485, 488, 489, 490, 491, 493, 494, 495, 496, 497], "get_predefined_config_path": [338, 487], "predefin": [338, 374, 378, 379, 487], "generate_model_config": 338, "generate_dataloader_config": 338, "graphoptimizationconfiggener": 339, "generate_graph_optimization_config": 339, "benchmark_config_gener": [340, 408, 468], "graph_optimization_config_gener": [340, 408, 468], "mixed_precision_config_gener": [340, 408, 468], "profiling_config_gener": [340, 408, 468], "pruning_config_gener": [340, 408, 468], "quantization_config_gener": [340, 408, 468], "mixedprecisionconfiggener": 341, "generate_mixed_precision_config": 341, "profilingconfiggener": 342, "pruningconfiggener": 343, "generate_pruning_config": 343, "quantizationconfiggener": 344, "generate_tuning_config": 344, "generate_quantization_config": 344, "configurationpars": 345, "input_data": [345, 350, 567], "parse_evaluation_data": 345, "evaluation_data": 345, "parse_transform": 345, "transforms_data": [345, 374, 379], "parse_dataload": 345, "parse_metr": 345, "metric_data": 345, "get_param_typ": 345, "param_group": 345, "parse_valu": 345, "required_typ": 345, "parse_list_valu": 345, "parse_multidim_list": 345, "dimension": 345, "normalize_string_list": 345, "string_list": 345, "bracket": 345, "get_predefined_configur": 347, "update_config_to_machine_specif": 347, "configuration_pars": [348, 408, 468], "get_boundary_nod": [348, 408, 468], "get_configur": [348, 408, 468], "params_feed": [348, 408, 468], "pruning_config_pars": [348, 408, 468], "feeder": 349, "get_framework": [349, 422], "get_domain": 349, "get_model": [349, 422, 508], "get_dataload": 349, "get_transform": 349, "get_object": 349, "get_strategi": 349, "get_quantization_approach": 349, "get_possible_valu": 349, "pruningconfigpars": 350, "generate_tre": 350, "parse_entri": 350, "bench": [351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 438, 467, 585], "dbmanag": [351, 384], "database_loc": [351, 384], "log_level": [351, 384, 478], "initialize_databas": [351, 384], "create_sqlalchemy_engin": [351, 384], "create_al": [351, 384], "tabl": [351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 374, 375, 384], "project_id": [352, 355, 362, 363, 366, 368, 374, 378, 379], "model_id": [352, 362, 363, 366], "dataset_id": [352, 355, 363, 366, 374, 378, 379], "warmup_iter": 352, "number_of_inst": 352, "execution_command": [352, 363, 366], "benchark": 352, "delete_benchmark": [352, 373, 379], "benchmark_nam": 352, "update_statu": [352, 363, 366], "execution_statu": [352, 363, 366], "executionstatu": [352, 363, 366, 373, 379, 381, 382, 469, 486], "update_dur": [352, 363, 366], "update_execution_command": [352, 363, 366, 373, 379, 381, 382], "update_log_path": [352, 363, 366, 379, 382], "update_config_path": [352, 363], "update_dataset": [352, 363, 366], "update_batch_s": [352, 363], "update_mod": 352, "update_cores_per_inst": 352, "update_number_of_inst": 352, "clean_statu": [352, 363, 366, 373, 379, 381, 382, 486], "status_to_clean": [352, 363, 366, 373, 379, 381, 382, 486], "build_info": [352, 353, 355, 362, 363, 366, 367, 369, 372], "benchmark_result": [352, 360, 384, 408], "benchmarkresult": [352, 353], "update_accuraci": 353, "update_perform": 353, "list_by_framework": [354, 361, 370], "framework_id": [354, 361, 362, 370, 386], "query_to_list": [354, 361, 370], "dataloaders_queri": 354, "dataloader_id": 354, "fill_dictionari": [354, 356, 357, 359, 361, 364, 365, 370], "dataset_nam": [355, 374, 379], "template_path": 355, "delete_dataset": [355, 374, 379], "update_template_path": 355, "get_domain_id": 356, "domain_nam": 356, "domainflavour": [357, 469], "db": [357, 364, 365, 385, 386], "get_domain_flavour_id": 357, "domain_flavour_nam": 357, "flavour": [357, 377, 379, 437, 469], "get_framework_id": 359, "framework_nam": [359, 435, 475], "domain_flavour": [360, 384, 408, 414, 487], "optimization_typ": [360, 363, 384, 408], "profiling_result": [360, 366, 384, 408], "pruning_detail": [360, 363, 384, 408], "tuning_detail": [360, 363, 384, 408], "tuning_histori": [360, 363, 379, 381, 384, 408, 443, 468], "metrics_queri": 361, "precision_id": [362, 363, 364, 365], "domain_id": [362, 370], "domain_flavour_id": 362, "supports_profil": [362, 416, 424], "supports_graph": [362, 416], "supports_prun": [362, 416, 428], "delete_model": [362, 379, 380], "optimization_type_id": 363, "sampling_s": [363, 488, 619], "tuning_details_id": [363, 371], "pruning_details_id": [363, 369], "diagnosis_config": 363, "delete_optim": [363, 379, 381], "optimization_id": [363, 364, 379, 381, 438], "optimization_nam": [363, 364, 378, 379], "update_optimized_model": [363, 379, 381], "optimized_model_id": 363, "update_sampling_s": 363, "update_precis": 363, "update_tuning_detail": 363, "update_pruning_detail": 363, "pin_accuracy_benchmark": [363, 379, 381], "pin": [363, 379, 381, 595, 599], "pin_performance_benchmark": [363, 379, 381], "get_optimization_by_project_and_model": 363, "unpin_benchmark": 363, "db_connect": 363, "unpin": 363, "optimizationtyp": [363, 364, 469], "tuningdetail": [363, 371, 455], "tuninghistori": [363, 372, 456], "pruningdetail": [363, 369], "optimized_model": 363, "get_pinned_benchmark": 363, "list_for_precis": 364, "precision_nam": [364, 365], "get_optimization_type_for_precis": 364, "get_optimization_type_id": 364, "get_optimization_type_by_nam": 364, "get_optimization_type_by_id": 364, "get_precision_id": 365, "get_precision_by_nam": 365, "get_precision_by_id": 365, "num_thread": 366, "delete_profil": [366, 379, 382], "profiling_id": [366, 367, 379, 382, 457], "profiling_nam": 366, "update_num_thread": 366, "profilingresult": [366, 367], "total_execution_tim": 367, "accelerator_execution_tim": 367, "cpu_execution_tim": 367, "op_run": 367, "op_defin": 367, "get_result": 367, "bulk_add": 367, "params_interfac": [367, 373, 374, 376, 378, 379, 380, 381, 382, 384, 408, 468, 506], "profilingresultaddparamsinterfac": [367, 379, 382, 385], "bulk": [367, 379, 382], "delete_result": 367, "create_project": [368, 378, 379, 383], "delete_project": [368, 379, 383], "project_nam": [368, 374, 379], "get_model_by_nam": 368, "list_project": [368, 379, 383], "update_not": 368, "pruning_details_data": 369, "delete_pruning_detail": 369, "list_by_domain": 370, "transforms_queri": 370, "accuracy_criterion_typ": 371, "accuracy_criterion_threshold": 371, "exit_polici": [371, 619], "tuning_details_data": 371, "delete_tuning_detail": 371, "update_tuning_histori": 371, "tuning_history_id": 371, "minimal_accuraci": 372, "baseline_accuraci": 372, "baseline_perform": 372, "last_tune_accuraci": 372, "last_tune_perform": 372, "best_tune_accuraci": 372, "best_tune_perform": 372, "benchmarkapiinterfac": [373, 379], "get_benchmark_detail": [373, 379], "list_benchmark": [373, 379], "update_benchmark_accuraci": [373, 379], "update_benchmark_perform": [373, 379], "update_benchmark_statu": [373, 379], "update_benchmark_dur": [373, 379], "update_path": [373, 379, 381], "add_benchmark": [373, 379], "add_result": [373, 379, 382], "edit_benchmark": [373, 379], "edit": [373, 379, 381, 382, 385, 516], "parse_benchmark_data": [373, 379], "benchmarkaddparamsinterfac": [373, 379, 385], "parse_benchmark_edit_data": [373, 379], "benchmarkeditparamsinterfac": [373, 379, 385], "before_delete_benchmark_entri": 373, "sqlite3": 373, "db_model": [373, 384, 408, 468], "datasetapiinterfac": [374, 379], "get_dataset_detail": [374, 379], "list_dataset": [374, 379], "add_dataset": [374, 379], "set_template_path": [374, 379], "parsed_dataset_data": [374, 379], "datasetaddparamsinterfac": [374, 379, 385], "check_if_custom_metric_or_dataload": [374, 379], "dataset_data": [374, 379, 439, 440, 445, 449, 452, 455, 489], "generate_custom_templ": [374, 379], "dataloader_path": [374, 379], "generate_templ": [374, 379], "template_typ": [374, 379], "parse_dataset_data": [374, 379], "get_predefined_dataset": [374, 379], "prepare_predefined_dataload": [374, 379], "prepare_predefined_transform": [374, 379], "set_database_vers": [374, 375], "version_num": [374, 375], "alembic_vers": [374, 375], "initialize_associ": [374, 375], "initialize_precision_optimization_types_associ": [374, 375], "search_in_list_of_dict_for_unique_valu": [374, 375], "list_of_dict": [374, 375], "search_in_list_of_dict": [374, 375], "diagnosisapiinterfac": [376, 379], "get_op_list": [376, 379, 387], "get_op_detail": [376, 379, 387], "generate_optim": [376, 379], "model_wise_param": [376, 379], "parse_optimization_data": [376, 379, 381], "diagnosisoptimizationparamsinterfac": [376, 379, 385], "parse_op_wise_config": [376, 379], "op_wise_param": [376, 379], "parse_wise_paramet": [376, 379], "params_per_typ": [376, 379], "set_op_wise_pattern_precis": [376, 379], "parse_model_wise_config": [376, 379], "dictionariesapiinterfac": [377, 379], "dictonari": [377, 379], "list_domain": [377, 379], "list_domain_flavour": [377, 379], "list_optimization_typ": [377, 379], "list_optimization_types_for_precis": [377, 379], "list_precis": [377, 379], "list_dataload": [377, 379], "list_dataloaders_by_framework": [377, 379], "list_transform": [377, 379], "list_transforms_by_framework": [377, 379], "list_transforms_by_domain": [377, 379], "list_metr": [377, 379], "list_metrics_by_framework": [377, 379], "examplesapiinterfac": [378, 379], "get_optimization_data": [378, 379], "optimizationaddparamsinterfac": [378, 379, 381, 385], "benchmark_api_interfac": [379, 384, 408], "dataset_api_interfac": [379, 384, 408], "diagnosis_api_interfac": [379, 384, 408], "dictionaries_api_interfac": [379, 384, 408], "examples_api_interfac": [379, 384, 408], "model_api_interfac": [379, 384, 408], "optimization_api_interfac": [379, 384, 408], "profiling_api_interfac": [379, 384, 408], "project_api_interfac": [379, 384, 408], "modelapiinterfac": [379, 380], "add_model": [379, 380, 383], "get_model_detail": [379, 380], "list_model": [379, 380, 408, 434, 468], "parse_model_data": [379, 380], "modeladdparamsinterfac": [379, 380, 385], "optimizationapiinterfac": [379, 381], "get_optimization_detail": [379, 381], "list_optim": [379, 381], "update_optimization_statu": [379, 381], "update_optimization_dur": [379, 381], "add_optim": [379, 381], "add_quantization_optim": [379, 381], "optimization_data": [379, 381, 439, 440, 445, 449, 452, 455], "add_pruning_optim": [379, 381], "add_standard_optim": [379, 381], "edit_optim": [379, 381], "get_pruning_detail": [379, 381], "gat": [379, 381], "edit_tuning_detail": [379, 381], "parsed_optimization_data": [379, 381], "optimizationeditparamsinterfac": [379, 381, 385], "edit_pruning_detail": [379, 381], "pruning_data": [379, 381], "add_tuning_histori": [379, 381], "parse_tuning_histori": [379, 381], "tuninghistoryinterfac": [379, 381, 385, 506], "parse_optimization_edit_data": [379, 381], "load_pruning_details_config": [379, 381, 487], "profilingapiinterfac": [379, 382], "get_profiling_detail": [379, 382], "list_profil": [379, 382], "update_profiling_statu": [379, 382], "update_profiling_dur": [379, 382], "add_profil": [379, 382], "edit_profil": [379, 382], "bulk_add_result": [379, 382], "parse_profiling_data": [379, 382], "profilingaddparamsinterfac": [379, 382, 385], "parse_profiling_result_data": [379, 382], "parse_profiling_edit_data": [379, 382], "profilingeditparamsinterfac": [379, 382, 385], "projectapiinterfac": [379, 383], "get_project_detail": [379, 383], "add_dummy_dataset": [379, 383], "update_project_not": [379, 383], "db_oper": [384, 408, 468], "parse_nod": 385, "tuninghistoryiteminterfac": [385, 506], "update_dataloaders_param": 386, "dataloaders_to_upd": 386, "framework_dataloaders_config": 386, "get_framework_dataloaders_config": 386, "get_framework_transforms_config": 386, "get_tensors_info": [387, 416], "load_quantization_config": 387, "calculate_ms": 387, "input_model_tensor": 387, "optimized_model_tensor": 387, "op_detail": [387, 389, 408, 468], "opdetail": [387, 392], "get_histogram_data": 387, "draw": [387, 614, 617], "diagnosisfactori": 388, "get_diagnosi": 388, "onnx_diagnosi": [389, 408, 468], "onnxrt_diagnosi": [389, 390, 408], "tensorflow_diagnosi": [389, 408, 468], "op_entri": [389, 408, 468], "onnxrtdiagnosi": 391, "onnxrtmodel": [391, 419], "serialization_typ": [392, 393, 423, 475, 477, 489, 490, 494, 495], "oppattern": 392, "pattern_data": 392, "opweight": 392, "weights_data": 392, "opactiv": 392, "op_activ": 392, "opentri": 393, "activation_min": 393, "activation_max": 393, "tensorflowdiagnosi": 395, "browser": [396, 565, 595, 599], "get_directory_entri": 396, "get_requested_path": 396, "request": [396, 408, 409, 410, 431, 432, 435, 456, 468, 472, 499, 501, 503, 504, 508, 510, 511, 513, 565, 611], "get_non_hidden_directory_entri": 396, "create_dir_entri": 396, "direntri": 396, "create_file_entri": 396, "create_entri": 396, "is_directori": 396, "sort_entri": 396, "should_show_fil": 396, "should_show_only_model_fil": 396, "get_setting_valu": 396, "get_filter_valu": 396, "filter_requested_entri": 396, "filter_nam": 396, "is_directory_entri": 396, "is_model_or_directory_entri": 396, "shown": [396, 519, 565, 567, 570, 582, 596, 604, 605, 617], "is_dataset_or_directory_entri": 396, "brows": 397, "filesystem": [397, 487, 512], "attribute_typ": 398, "expanded_group": [399, 402], "add_edg": 401, "source_id": 401, "target_id": 401, "get_nod": 401, "highlight_pattern": 401, "highlight": [401, 404, 518, 565], "get_target_nod": 401, "reader": [402, 403, 408, 468], "graphread": 402, "find_pattern_in_graph": [402, 503], "onnxrt_read": [403, 405, 408], "tensorflow_read": [403, 405, 408], "collaps": [403, 408, 468, 565], "graph_read": [403, 408, 468], "groupnod": 404, "group_nam": 404, "onnxrtread": 406, "tensorflowread": 407, "jobs_control_queu": [408, 409, 468], "frozen_pb": [408, 415, 425], "meta_graph": [408, 415, 425], "model_type_gett": [408, 415, 468], "download_config": [408, 433, 434, 468], "download_model": [408, 433, 434, 468], "optimize_model": [408, 441, 443, 444, 447, 450], "neural_coder_optim": [408, 443, 468], "tune_model": [408, 443, 453], "execute_optim": [408, 443, 468], "tensorflow_profil": [408, 459, 468], "execute_profil": [408, 459, 468], "profile_model": [408, 459, 461, 465, 468], "job": [409, 483], "_jobscontrolqueu": 410, "queu": 410, "jobsmanag": 410, "_jobsmmanag": 411, "_job": 411, "get_default_path": 413, "shape_elements_ord": [416, 419, 428, 487], "get_input_nod": [416, 426, 427, 428], "get_output_nod": [416, 426, 427, 428], "ensure_supported_path": 416, "get_model_graph": [416, 419, 427, 428, 503], "supports_path": [416, 419, 421, 424, 426, 427, 429], "guard_requirements_instal": [416, 419, 421, 428], "instal": [416, 419, 421, 428, 435, 572, 575, 577, 585, 587, 590, 593, 597, 600, 602, 603, 606, 621], "nc_model_inst": [419, 428], "filtered_input_nod": 419, "remove_number_of_samples_from_shap": 419, "pytorchscriptmodel": 421, "modelrepositori": 422, "get_framework_from_path": [422, 487], "get_supported_framework": 422, "is_model_path": 422, "trust": [423, 565], "frozenpbmodel": 424, "metagraphmodel": 427, "metagraph": 427, "savedmodelmodel": 429, "get_input_shap": 430, "fix_dynamic_shap": 430, "resourc": [433, 570, 607], "download_yaml_config": 433, "model_info": 433, "download_fil": 433, "download_path": 433, "report_progress": 433, "unpack_arch": 433, "archive_path": 433, "unpack": 433, "archiv": 433, "get_yaml_url": 433, "model_src_dir": 433, "yaml_relative_loc": 433, "get_available_model": 435, "check_vers": 435, "framework_vers": 435, "supported_vers": 435, "validate_model_list": 435, "model_list": 435, "get_framework_module_nam": 435, "get_installed_framework": 435, "mappingdirect": 437, "namesmapp": 437, "framework_map": 437, "domain_map": 437, "domain_flavour_map": 437, "precision_map": 437, "map_nam": 437, "parameter_typ": 437, "execute_optimization_pytorch_script": 438, "execute_optimization_regular": 438, "parse_model_data_to_bench_nam": 438, "parse_log": 438, "optimization_detail": 438, "check_if_collect_tuning_histori": 438, "optimizationfactori": 439, "get_optim": 439, "optimization_script": [440, 445, 449, 452, 455], "optimize_graph": [442, 446], "output_graph": [442, 446, 451, 454], "optimize_graph_config": [442, 446], "optimize_pt_script": 448, "output_model_nam": 449, "output_model_dir": 449, "optimizationinterfac": 449, "optimization_workdir": 456, "watcher": 456, "process_succeed": 456, "signal": [456, 487], "was_history_file_chang": 456, "history_file_modification_tim": 456, "modif": [456, 522, 567, 576, 590], "send_history_snapshot": 456, "execute_real_profil": 457, "profiling_detail": 457, "profilerfactori": [458, 463], "get_profil": [458, 463], "profiling_data": [458, 462, 463, 465, 485], "load_profiling_detail": 460, "json_path": 460, "config_path": 462, "initialize_graph": 465, "tf_modul": 465, "create_tf_config": 465, "num_warmup": 465, "get_node_by_nam": 465, "convert_nodes_to_list": 465, "build_dataload": 465, "delete_assign": 466, "wsgi": 467, "prepare_environ": 467, "app": [468, 502], "history_snapshot_pars": [468, 502, 507], "request_data_processor": [468, 502, 507], "response_gener": [468, 502, 507, 508, 510, 513], "status": [469, 481, 486], "ensure_workdir_exists_and_writ": 470, "clean_workloads_wip_statu": 470, "wip": [470, 620], "workloads_list": 470, "migrate_databas": 470, "latest": [470, 480, 580, 609, 613], "alemb": [470, 575, 580], "notfoundexcept": [471, 500, 501], "accessdeniedexcept": 471, "deni": 471, "clienterrorexcept": 471, "internalexcept": 471, "subject": [472, 499, 581], "send_respons": 472, "log_nam": 472, "additional_log_nam": [472, 480], "shell": [472, 480, 615], "process_dur": 472, "call_on": 472, "cwd": [472, 480], "universal_newlin": [472, 480], "startupinfo": [472, 480], "creationflag": [472, 480], "ignore_exit_cod": [472, 480], "pid": [472, 480], "env_arg": 472, "ncprocess": [472, 481], "refresh_workdir": 472, "is_multi_command": 472, "expir": 473, "expiringdictitem": 473, "expires_at": 473, "is_expir": 473, "expiringdict": 473, "initial_valu": 473, "ttl": 473, "120": 473, "userdict": 473, "githubinfo": 474, "releas": [474, 487, 521, 580, 591, 593, 595, 599, 601, 621], "hw": 475, "hwinfo": 475, "get_distribut": 475, "distibut": 475, "get_bios_vers": 475, "bio": [475, 606], "is_turbo_boost_en": 475, "turbo": [475, 606], "boost": [475, 583, 586, 602, 609], "get_kernel_vers": 475, "get_framework_info": 475, "get_framework_dependency_info": 475, "subdepend": 475, "serializ": 477, "serialize_item": 477, "datetim": 477, "throw": 477, "typeerror": 477, "2016": 477, "84913": 477, "04": [477, 580, 606, 620], "08t11": 477, "084913": 477, "change_log_level": 478, "optimizationpars": 479, "performancepars": 479, "update_parti": 479, "partial": [479, 611], "parsed_result": 479, "summarize_parti": 479, "summarize_valu": 479, "accuracypars": 479, "benchmarkparserfactori": 479, "get_pars": 479, "profilingpars": 479, "unify_tim": 479, "string_valu": 479, "micro": 479, "125": [479, 620], "6m": 479, "microsecond": 479, "cmd": [480, 603], "docker": 480, "aibt_tensorflow": 480, "cento": [480, 580], "7_3_mkldnn_tensorflow": 480, "111224": 480, "pull_imag": 480, "0c750a01": 480, "90e0": 480, "4aa8": 480, "99fe": 480, "a194d55a2046": 480, "time_start": 480, "2018": 480, "17t14": 480, "47": [480, 620], "352502": 480, "time_stop": 480, "25": [480, 620], "110410": 480, "info_path": 480, "runtim": [480, 521, 522, 523, 567, 573, 576, 579, 587, 592, 593, 610], "tail": 480, "is_ok": [480, 481], "popen": 480, "remove_log": 480, "properli": 481, "rtype": 481, "return_code_al": 481, "remove_successful_log": 481, "success": [481, 499, 580], "get_status_update_funct": 483, "job_typ": 483, "sent": 485, "throughput": 485, "acc_input_model": 485, "acc_optimized_model": 485, "size_input_model": 485, "size_optimized_model": 485, "path_optimized_model": 485, "optimization_tim": 485, "insert_data": 485, "calculate_throughput": 485, "readi": 485, "ensure_working_path_exist": 486, "clean_log": 486, "workdir_path": 486, "is_hidden": 487, "get_dataset_path": 487, "get_file_extens": 487, "lead": [487, 570, 583, 607, 608], "is_dataset_fil": 487, "normalize_domain": 487, "underscor": 487, "normalize_framework": 487, "normalize_str": 487, "string_to_norm": 487, "get_model_zoo_config_path": 487, "model_dict": 487, "get_model_zoo_model_path": 487, "check_modul": 487, "get_module_vers": 487, "mb": 487, "add_unit": 487, "load_model_config": 487, "load_dataloader_config": 487, "load_transforms_config": 487, "load_transforms_filter_config": 487, "meaning": [487, 605], "load_precisions_config": 487, "get_default_pruning_config_path": 487, "load_model_wise_param": 487, "load_metrics_config": 487, "get_metrics_dict": 487, "load_help_nc_param": 487, "replace_with_valu": 487, "file_path": 487, "verify_file_path": 487, "determine_ip": 487, "ip": 487, "is_development_env": 487, "nc_mode": 487, "filter_transform": 487, "parse_bool_valu": 487, "release_tag": 487, "get_shape_from_transform": 487, "get_height_width_from_s": 487, "parse_to_string_list": 487, "parse_to_float_list": 487, "export_to_csv": 487, "parse_vers": 487, "string_vers": 487, "remove_dataload": 488, "datalad": 488, "remove_accuracy_metr": 488, "set_evaluation_dataload": 488, "udpat": 488, "set_evaluation_dataset_path": 488, "get_performance_config": 488, "set_performance_cores_per_inst": 488, "get_performance_cores_per_inst": 488, "set_performance_num_of_inst": 488, "get_performance_num_of_inst": 488, "set_accuracy_and_performance_batch_s": 488, "set_quantization_dataload": 488, "set_quantization_dataset_path": 488, "set_quantization_batch_s": 488, "set_accuracy_go": 488, "accuracy_go": 488, "set_accuracy_metr": 488, "set_transform": 488, "process_transform": 488, "set_quantization_approach": 488, "set_input": 488, "set_output": 488, "set_quantization_sampling_s": 488, "set_performance_warmup": 488, "set_performance_iter": 488, "set_optimization_precis": 488, "yaml_path": 488, "is_dummi": 489, "labelbal": [489, 567, 568], "set_transforms_from_list": 489, "transforms_list": 489, "set_dataset": 489, "postprocessschema": 490, "get_label_shift_valu": 490, "set_accuracy_postprocess_transform": 490, "set_precis": [491, 493], "sgdoptim": 495, "adamwoptim": 495, "adamoptim": 495, "crossentropylosscriterion": 495, "sparsecategoricalcrossentropycriterion": 495, "knowledgedistillationlosscriterion": 495, "set_postprocess_transform": 495, "weightcompressionapproach": 495, "initialize_prun": 495, "pruner_dict_list": 495, "serialize_prun": 495, "parse_dict_value_to_float": 495, "parse_dict_value_to_int": 495, "wiseconfigdetail": 496, "wiseconfig": 496, "acccriterion": 497, "exitpolici": 497, "set_timeout": 497, "set_max_tri": 497, "trial": [497, 617], "set_performance_onli": 497, "float_represent": 498, "dumper": 498, "pruner_represent": 498, "outsid": 499, "create_simple_respons": 499, "gui": [499, 500, 504, 521, 565, 579, 580], "messagequeu": 499, "queue": [499, 504], "post_failur": 499, "failur": [499, 518], "post_success": 499, "post_error": 499, "global_config_directori": 500, "set_up": 500, "determine_values_from_environ": 500, "get_command_line_arg": 500, "determine_server_port": 500, "max_ports_tri": 500, "port_default": 500, "determine_gui_port": 500, "client": [500, 565], "server_port": 500, "unless": [500, 576], "is_port_taken": 500, "determine_log_level": 500, "determine_url_prefix": 500, "get_url": 500, "dump_token_to_fil": 500, "servicenotfoundexcept": 501, "unknown": 501, "connector": 503, "routingdefinit": 503, "rout": 503, "realtimeroutingdefinit": 503, "realtim": 503, "deferredroutingdefinit": 503, "deferredsubprocessroutingdefinit": 503, "spawn": 503, "get_system_info": 503, "endpoint": 504, "run_serv": 504, "webserv": 504, "get_tls_arg": 504, "tl": [504, 565], "block_ifram": 504, "werkzeug": [504, 512], "ifram": 504, "csp": 504, "block_snif": 504, "mime": 504, "snif": 504, "require_api_token": 504, "author": [504, 581], "j": [504, 517, 521, 620], "handle_api_cal": 504, "subpath": 504, "allow_api_cal": 504, "page_not_found": 504, "disable_cach": 504, "build_paramet": 504, "flask": [504, 565], "web_socket_publish": 504, "web_socket": 504, "flask_socketio": 504, "socketio": [504, 565], "benchmarkservic": 505, "workloadservic": [505, 509, 510, 513], "historysnapshotpars": 506, "history_snapshot": 506, "provide_perform": 506, "parse_history_snapshot": 506, "parse_history_item": 506, "history_item": 506, "extract_accuraci": 506, "extract_perform": 506, "modelservic": 508, "optimizationservic": 509, "profilingservic": 510, "generate_csv": 510, "processor": [511, 521, 583, 606, 609, 611, 612, 620], "requestdataprocessor": 511, "get_string_valu": 511, "responsegener": 512, "serve_from_filesystem": 512, "mimetyp": 512, "as_attach": 512, "add_refresh": 512, "refresh_tim": 512, "refresh": [512, 595, 599], "from_except": 512, "get_status_code_for_except": 512, "get_code_templ": 513, "get_output": 513, "welcom": [515, 516, 517, 521, 621], "interest": [516, 521, 615], "foster": 516, "particip": 516, "harass": 516, "everyon": 516, "bodi": 516, "ethnic": 516, "characterist": 516, "gender": 516, "educ": 516, "socio": 516, "econom": 516, "appear": [516, 565, 596, 602], "race": 516, "religion": 516, "sexual": 516, "orient": 516, "contribut": [516, 521], "inclus": 516, "Being": 516, "respect": [516, 576, 607, 608, 619], "viewpoint": 516, "gracefulli": 516, "critic": 516, "focus": [516, 522], "empathi": 516, "toward": [516, 570], "unaccept": 516, "imageri": 516, "unwelcom": 516, "troll": 516, "insult": 516, "derogatori": 516, "comment": [516, 568, 582, 616], "polit": 516, "attack": 516, "publish": [516, 581, 583, 603], "electron": 516, "permiss": 516, "inappropri": 516, "profession": 516, "clarifi": 516, "appropri": 516, "fair": 516, "action": [516, 597, 600], "reject": 516, "wiki": 516, "ban": 516, "temporarili": 516, "perman": 516, "deem": 516, "threaten": 516, "offens": 516, "harm": 516, "mail": 516, "social": [516, 521, 609], "media": [516, 521, 609], "appoint": 516, "event": [516, 615], "abus": 516, "report": [516, 517, 565, 614], "contact": [516, 613, 614], "complaint": 516, "review": [516, 517], "investig": 516, "circumst": [516, 610], "oblig": 516, "confidenti": [516, 565], "regard": [516, 612], "incid": 516, "good": [516, 611, 617], "faith": 516, "repercuss": 516, "leadership": 516, "faq": [516, 521], "page": [516, 517, 521], "view": [517, 521, 565, 573, 593, 602, 613], "pylint": 517, "flake8": 517, "autopep8": 517, "cover": [517, 578, 609], "adopt": [517, 585], "certif": [517, 565], "agre": 517, "bug": 517, "jira": 517, "ticket": 517, "potenti": [517, 519], "risk": 517, "pr": [517, 582, 597, 600, 613], "reproduc": 517, "submit": [517, 609], "intend": 517, "collabor": [517, 587, 593], "adher": 517, "toolkit": [518, 521, 580, 585, 593, 609], "tracer": 518, "resolv": [518, 520], "floatfunct": 518, "cat": [518, 588], "10004": [518, 519, 522, 567, 570, 571, 574, 576, 579, 583, 605, 610, 619], "neural_compressor": [518, 519, 521, 542, 566, 567, 568, 570, 571, 572, 574, 577, 578, 582, 583, 584, 604, 605, 607, 610, 611, 612, 613, 614, 616, 617, 619], "conduct": [518, 590, 602], "imper": 518, "therefor": [518, 608, 611, 613], "lot": 518, "might": [518, 565, 617], "successfulli": [518, 572, 609], "proxi": 518, "tutori": [518, 593, 609], "prototyp": 518, "html": [518, 597, 600], "untrac": 518, "ssd": [518, 620], "resnet34": [518, 620], "r34": 518, "bboxes_labels_scor": 518, "prob": 518, "max_output": 518, "zip": 518, "dbox": 518, "dlabel": 518, "dscore": 518, "decode_singl": 518, "autom": [519, 585, 602, 603], "artifici": 519, "ann": 519, "par": 519, "outperform": 519, "4x": [519, 611], "figur": [519, 595, 596, 599, 607], "inner": 519, "evolutionari": 519, "cycl": 519, "conclud": 519, "simplest": [519, 588], "launcher": [519, 521, 570, 571, 593, 607], "agent": 519, "ofa_mbv3_d234_e346_k357_w1": 519, "250": 519, "results_csv_path": 519, "search_result": 519, "aim": [519, 521, 585, 608, 617], "wmt": 519, "en": 519, "de": 519, "guidelin": [520, 521], "mainstream": 521, "showcas": 521, "broad": [521, 579, 591], "wide": [521, 573, 583, 608, 611, 620], "xeon": [521, 580, 581, 583, 606, 609, 611, 612, 620], "scalabl": [521, 580, 583, 606, 609, 611, 612, 620], "flex": [521, 580], "amd": [521, 579, 580, 620], "arm": [521, 579, 580, 620], "nvidia": [521, 579, 580, 607, 611, 620], "stabl": [521, 565, 580, 609], "diffus": [521, 609, 620], "gpt": [521, 620], "vision": [521, 577, 589], "coder": [521, 579, 586, 587, 590, 593, 596, 609], "cloud": [521, 609], "marketplac": [521, 603, 609], "amazon": [521, 585, 593], "azur": [521, 609], "softwar": [521, 581, 583, 606, 609, 613], "alibaba": [521, 592, 599, 600, 609], "tencent": [521, 609], "taco": 521, "ai": [521, 585, 609, 612], "ecosystem": [521, 609], "lightn": [521, 592], "visit": [521, 620], "websit": [521, 580], "pip": [521, 565, 572, 575, 577, 580, 587, 590, 595, 597, 599, 600, 613], "wget": [521, 577], "googleapi": [521, 577], "v1_6": [521, 577], "mobilenet_v1_1": [521, 577], "0_224_frozen": [521, 577], "quick": [521, 576, 619], "overview": 521, "workflow": [521, 570, 580, 583, 597, 600, 615], "notebook": 521, "oneapi": [521, 580, 609], "analyt": [521, 580, 609], "jupyterlab": [521, 585, 591, 593, 595, 599], "visual": [521, 593, 602, 614, 615, 617], "studio": [521, 593, 602], "topic": 521, "soon": 521, "busi": [521, 609], "jan": [521, 609], "2023": [521, 620], "blog": [521, 609], "enhanc": [521, 585, 609, 612], "4th": [521, 609], "gen": [521, 583, 609, 612], "neurip": [521, 609], "fast": [521, 609], "oct": [521, 609], "quala": [521, 609], "minilm": [521, 609, 620], "legal": [521, 621], "secur": [521, 606, 609, 621], "idea": [521, 608, 617], "feel": 521, "look": [521, 522, 576, 582, 619], "bridg": [522, 579], "vanilla": [522, 579], "abcadaptor": 522, "__init__": [522, 567, 568, 582, 617], "he": 522, "besid": [522, 570], "past": 522, "effect": [522, 607, 608], "mainten": 522, "difficult": 522, "abil": [522, 568, 576], "fragment": 522, "semant": [522, 576], "microsoft": 522, "mla": [522, 611], "explor": 522, "nightli": [565, 580], "pypi": [565, 580, 597, 600], "conda": [565, 575, 580, 588, 596, 613], "forg": [565, 575, 580], "clone": [565, 580, 595, 599], "cd": [565, 572, 580], "setup": [565, 576, 580, 597, 600, 607], "ui": 565, "5000": 565, "338174d13706855fc6924cec7b3a8ae8": 565, "listen": 565, "firewal": 565, "8080": 565, "tf_enable_onednn_opt": [565, 580], "cert": 565, "path_to_cert": 565, "crt": 565, "path_to_private_kei": 565, "encrypt": 565, "insecur": 565, "expos": 565, "forfeit": 565, "threat": 565, "button": [565, 579, 596, 602], "click": [565, 577, 579, 585, 586, 593, 596, 602, 609, 615], "pop": [565, 602], "recognit": [565, 572, 615], "few": [565, 609, 617], "finish": [565, 596], "synthet": 565, "plu": 565, "icon": 565, "section": [565, 570, 571, 602, 607, 610, 619], "unfold": 565, "On": [565, 611], "panel": [565, 597, 600, 602], "navig": 565, "trash": 565, "visibl": 565, "cursor": 565, "prompt": [565, 572], "confirm": 565, "pencil": 565, "light": [565, 571], "blue": 565, "color": 565, "row": [565, 607], "arrow": 565, "checkbox": 565, "chart": [565, 611, 614, 615], "offer": [565, 568], "conveni": 565, "variat": 565, "yellow": 565, "remind": 565, "autograd": 565, "numba": 565, "pictur": 565, "ilsvrc": 565, "hour": [565, 617], "dialog": 565, "cryptographi": 565, "linux": [566, 596, 602], "window": [566, 602, 603], "x86_64": 566, "aarch64": 566, "often": [567, 570, 605, 607, 608], "encount": 567, "consum": 567, "lack": 567, "faster": [567, 569, 609, 620], "hard": 567, "treat": 567, "manner": [567, 570, 584], "post_training_static_qu": [567, 568, 610, 617], "300": [567, 568], "output_model": [567, 615], "customis": [567, 568], "ensp": [568, 582, 616], "imagerecord": [568, 572, 619], "image_nam": 568, "cocorecord": 568, "gt": [568, 574, 616], "float16": 568, "int64": 568, "style_transf": 568, "content": 568, "tfrecorddataset": 568, "helloworld": [568, 616], "aid": 569, "increas": [569, 579, 585, 602, 617], "infrastructur": 569, "deploi": [570, 617], "power": [570, 596, 606], "mobil": [570, 620], "produc": 570, "softmax": 570, "l": [570, 615, 617], "kd": 570, "kullback": 570, "leibler": 570, "patient": 570, "compact": [570, 588, 607, 608], "ia": 570, "attach": 570, "shallow": 570, "deepest": 570, "deeper": 570, "acceler": [570, 585, 593, 602, 607, 608, 609, 612, 617], "10006": [570, 571], "training_func_for_nc": [570, 571], "huge": [571, 608], "bit": [571, 583, 609, 611], "heavi": 571, "booster": 571, "degrad": 571, "retrain": [571, 607, 608], "incorpor": [571, 617], "novel": [571, 585, 596, 602], "horovod": 572, "builtin": 572, "program": [572, 581, 583, 585, 602], "addition": [572, 617], "enable_eager_execut": 572, "yaml_file_path": 572, "evaluation_time_cost": 572, "partit": 572, "distributedsampl": 572, "train_sampl": 572, "train_dataset": 572, "num_replica": 572, "train_load": 572, "train_kwarg": 572, "adadelta": 572, "distributedoptim": 572, "named_paramet": 572, "broadcast_paramet": 572, "root_rank": 572, "broadcast_optimizer_st": 572, "set_epoch": 572, "batch_idx": 572, "zero_grad": [572, 607], "nll_loss": 572, "log_interv": 572, "0f": 572, "tloss": 572, "6f": 572, "dry_run": 572, "test_func": 572, "num_of_process": 572, "002": 572, "ssh": [572, 602], "readm": 572, "exactli": [572, 586], "resnet50_v1": 572, "topk": [572, 582], "resizecropimagenet": [572, 616], "realiz": [572, 582, 604, 612, 614], "tow": 572, "situat": 572, "node1": 572, "node2": 572, "TO": [572, 587], "your_node1_nam": 572, "your_node2_nam": 572, "resnet50_fp32_pretrained_model": 572, "nc_resnet50_v1": 572, "resnet": [572, 577, 620], "varieti": [573, 610, 617], "demonstr": [573, 585, 607, 608, 615], "10k": [573, 577], "speedup": [573, 577, 579, 611], "2x": [573, 577, 579, 606], "exchang": 574, "hope": 574, "briefli": [574, 607], "matur": 574, "major": [574, 578, 611], "reus": 574, "inc_model": [574, 584], "fp32_onnx_config": 574, "randn": 574, "int8_onnx_config": 574, "matmulintegertofloat": 574, "matmulinteg": 574, "incompat": 575, "88": [575, 614, 620], "80": [575, 615, 620], "pyobject": 575, "reinstal": 575, "importerror": 575, "libgl": 575, "apt": [575, 580, 588, 596], "yum": [575, 580], "opencv": [575, 596], "conflict": 575, "pend": 575, "27": [575, 580, 620], "friendli": [576, 619], "dive": 576, "let": [576, 590, 610, 619], "syntax": 576, "up1": 576, "up2": 576, "valid_mixed_precis": 576, "per_tensor": [576, 619], "grappler_optim": 576, "constfold": 576, "arithmet": 576, "debug_stripp": 576, "jupyt": [577, 593, 595, 596, 599], "lab": [577, 595, 596, 597, 599, 600], "concept": [578, 614], "custom_metr": 578, "explicitli": 578, "refin": [578, 608], "These": 579, "420": 579, "geomean": 579, "snippet": 579, "upload": [579, 597, 600], "qintegerop": [579, 611], "plan": [579, 583], "uninstal": [580, 602], "frequent": 580, "ask": 580, "consolid": 580, "eas": [580, 587, 609], "streamlin": 580, "scienc": 580, "anaconda": 580, "suit": [580, 603, 615], "esri": 580, "formerli": 580, "skylak": 580, "cascad": 580, "lake": [580, 583, 609], "cooper": [580, 583, 609], "ic": [580, 607, 609], "sapphir": 580, "rapid": 580, "hbm": 580, "arctic": 580, "sound": 580, "pont": 580, "vecchio": 580, "ubuntu": [580, 606], "fortensorflow": 580, "forpytorch": 580, "onednn": [580, 611], "apach": 581, "copyright": 581, "accompani": 581, "research": 581, "wish": 581, "bibtex": 581, "misc": 581, "feng": 581, "tian": 581, "hanwen": 581, "haihao": 581, "shen": 581, "suyu": 581, "chen": 581, "titl": [581, 603], "howpublish": 581, "year": 581, "logo": [581, 606], "atom": 581, "phi": 581, "pentium": 581, "vtune": 581, "corpor": [581, 606], "subsidiari": [581, 606], "brand": [581, 606], "claim": [581, 606], "popularli": 582, "industri": [582, 609], "label_map": 582, "decis": 582, "ap": 582, "curv": 582, "turn": [582, 596], "target_boxes_num": 582, "str_label": 582, "int_label": 582, "inturn": 582, "cocomap": 582, "vocmap": 582, "categor": 582, "multiclass": 582, "multilabel": 582, "multi_metr": 582, "newmetr": 582, "reflect": [582, 606, 616], "recent": 583, "growth": [583, 608], "complex": [583, 608], "significantli": [583, 607, 608], "bfloat16": [583, 585, 593, 612], "half": [583, 593], "sixteen": 583, "bandwidth": 583, "launch": [583, 603], "3rd": [583, 609, 611, 612], "codenam": 583, "x86": 583, "avx512": [583, 611], "vcvtne2ps2bf16": 583, "vcvtneps2bf16": 583, "vdpbf16p": 583, "avx512_bf16": 583, "consequ": 583, "persist": 584, "brought": [584, 586, 593, 611], "tf2": 584, "h5": 584, "onnx_ml_pb2": 584, "hybridblock": 584, "0000": 584, "saved_result": 584, "cuda": [585, 587], "subsequ": [585, 602], "acquir": 585, "analysi": [585, 602, 614], "heurist": [585, 602], "great": 585, "facilit": 585, "autocast": 585, "simultan": [585, 605, 610], "my_model": 585, "no_grad": 585, "memory_format": 585, "112": [585, 620], "plugin": [585, 603], "aw": [585, 593, 609, 620], "sagemak": [585, 593], "inlin": [585, 590, 593], "neural_cod": [585, 587, 589, 590, 591, 593], "superbench": 585, "enjoi": [586, 590, 593], "reload": [586, 603], "modern": 587, "democrat": [587, 609], "programm": [587, 593, 602], "nano_bf16_channels_last": 587, "resnet18": [587, 620], "nano_bf16_ipex_channels_last": 587, "nano_bf16_ipex": 587, "nano_bf16": 587, "nano_fp32_channels_last": 587, "nano_fp32_ipex_channels_last": 587, "nano_fp32_ipex": 587, "nano_gpu_to_cpu": 587, "nano_int8": 587, "nano_jit_bf16_channels_last": 587, "nano_jit_bf16_ipex_channels_last": 587, "nano_jit_bf16_ipex": 587, "nano_jit_bf16": 587, "nano_jit_fp32_channels_last": 587, "nano_jit_fp32_ipex_channels_last": 587, "nano_jit_fp32_ipex": 587, "nano_jit_fp32": 587, "nano_onnxruntime_fp32": 587, "nano_onnxruntime_int8_qlinear": 587, "openvino": 587, "nano_openvino_fp32": 587, "nano_openvino_int8": 587, "bc": [588, 596], "conda_prefix": 588, "echo": 588, "tradit": [588, 608], "libjemalloc": 588, "libiomp5": 588, "home": 588, "lib": 588, "ld_preload": 588, "malloc_conf": 588, "oversize_threshold": 588, "background_thread": 588, "metadata_thp": 588, "dirty_decay_m": 588, "9000000000": 588, "muzzy_decay_m": 588, "kmp_affin": 588, "kmp_blocktim": 588, "dnnl_primitive_cache_capac": 588, "cpufreq": 588, "scaling_governor": 588, "powersav": 588, "sudo": 588, "tee": 588, "pytorch_jit_script": [589, 592], "pytorch_channels_last": [589, 592], "run_bench": 589, "patch": [589, 602], "patch_path": 589, "your_patch_path": 589, "sweep": 589, "sweep_object": 589, "bench_config": 589, "bench_featur": 589, "sai": 590, "run_glu": [590, 591], "requisit": 590, "task_nam": [590, 591], "do_ev": [590, 591], "run_glue_optim": 590, "opt": 590, "static_ipex": 590, "auto_qu": 591, "v4": [591, 620], "albert": [591, 620], "sst2": 591, "alexnet": [591, 620], "pytorch_amp": 592, "optimize_for_infer": 592, "pytorch_jit_trac": 592, "pytorch_jit_script_ofi": 592, "pytorch_jit_trace_ofi": 592, "torchdynamo": 592, "pytorch_torchdynamo_jit_script": 592, "pytorch_torchdynamo_jit_trac": 592, "pytorch_torchdynamo_jit_script_ofi": 592, "pytorch_torchdynamo_jit_trace_ofi": 592, "pytorch_inc_bf16": 592, "pytorch_inc_static_quant_fx": 592, "pytorch_inc_static_quant_ipex": 592, "pytorch_inc_dynamic_qu": 592, "pytorch_ipex_fp32": 592, "pytorch_ipex_bf16": 592, "pytorch_ipex_int8_static_qu": 592, "pytorch_ipex_int8_dynamic_qu": 592, "blade": 592, "disc": 592, "pytorch_aliblad": 592, "pytorch_lightning_bf16_cpu": 592, "tensorflow_amp": 592, "keras_amp": 592, "tensorflow_inc": 592, "keras_inc": 592, "onnx_inc_static_quant_qlinear": 592, "onnx_inc_static_quant_qdq": 592, "onnx_inc_dynamic_qu": 592, "optimum": [592, 593], "pytorch_inc_huggingface_optimum_stat": 592, "pytorch_inc_huggingface_optimum_dynam": 592, "intel_extension_for_transform": 592, "bigdl": [592, 593], "nano": [592, 593], "nano_": 592, "inc_auto": 592, "delight": 593, "announc": 593, "trainer": 593, "500": 593, "speed": [593, 608, 609, 611], "innov": [593, 609], "isa": 593, "xpu": 593, "delta": 593, "acc_delta": 593, "int8_acc": 593, "fp32_acc": 593, "ext": [595, 597, 599, 600, 601], "nodej": [595, 599], "jlpm": [595, 599], "yarn": [595, 599], "npm": [595, 596, 599], "lieu": [595, 599], "labextens": [595, 596, 599], "typescript": [595, 599], "watch": [595, 599], "termin": [595, 596, 599], "immedi": [595, 599], "rebuilt": [595, 599], "dev": [595, 599], "symlink": [595, 599], "blank": 596, "cell": 596, "gain": [596, 605, 609], "mkl": 596, "jemalloc": 596, "pip3": 596, "headless": 596, "pyproject": [597, 600], "toml": [597, 600], "twine": [597, 600], "whl": [597, 600], "dist": [597, 600], "sdist": [597, 600], "bdist_wheel": [597, 600], "frontend": [597, 600], "login": [597, 600, 614], "cut": [597, 600], "fork": [597, 600], "admin_github_token": [597, 600], "pypi_token": [597, 600], "npm_token": [597, 600], "secret": [597, 600], "draft": [597, 600], "changelog": [597, 600, 601], "pkg": [597, 600], "bot": [597, 600], "pick": [597, 600, 603], "feedstock": [597, 600], "hatch": 600, "notabl": 601, "vscode": [601, 603], "daili": 602, "advantag": [602, 610], "remot": 602, "market": 602, "sidebar": 602, "hover": 602, "diff": 602, "manifest": 603, "declar": 603, "palett": 603, "veri": [603, 611, 617], "registercommand": 603, "amodio": 603, "tsl": 603, "dbaeumer": 603, "eslint": 603, "press": 603, "f5": 603, "ctrl": [603, 620], "hello": 603, "world": 603, "breakpoint": 603, "consol": 603, "relaunch": 603, "toolbar": 603, "node_modul": 603, "viewlet": 603, "dropdown": 603, "startup": 603, "bundl": 603, "multi_object": 604, "arbitrari": 605, "p_conf": 605, "platinum": [606, 620], "8358": 606, "manufactur": 606, "m50cyp2sbstd": 606, "se5c620": 606, "86b": 606, "0005": 606, "2202160810": 606, "microcod": 606, "0xd000332": 606, "irq": 606, "60ghz": 606, "6chz": 606, "perf": 606, "512gb": 606, "16x32gb": 606, "ddr4": 606, "3200": 606, "mt": 606, "nic": 606, "1x": 606, "ethernet": 606, "100mb": 606, "i350": 606, "gigabit": 606, "drive": 606, "intel_ssdsckkb48": 606, "447": 606, "1g": 606, "factor": [606, 620], "publicli": 606, "degre": 606, "mark": 606, "trademark": 606, "art": [607, 608], "increasingli": [607, 608], "crucial": [607, 608], "salient": [607, 608], "nonzero": [607, 608], "irregular": [607, 608], "anywher": [607, 608], "2in4": 607, "amper": 607, "oc": 607, "kh": 607, "kw": 607, "fastform": 607, "finetun": [607, 608], "downstream": [607, 608], "formula": [607, 608], "exemplifi": 607, "complement": 607, "pruner1": 607, "layer1": 607, "layer3": 607, "rate": [607, 611], "pruner2": 607, "snip_momentum_progress": 607, "layer2": 607, "num_train_epoch": 607, "lr_schedul": 607, "mention": 607, "cv": [607, 608], "grown": 608, "unpreced": 608, "cube": 608, "discourag": 608, "penal": 608, "l2": 608, "parametr": 608, "namhoon": 608, "lee": 608, "thalaiyasingam": 608, "ajanthan": 608, "philip": 608, "torr": 608, "2019": 608, "mleffici": 609, "dec": 609, "wechat": 609, "deepen": 609, "foundat": 609, "intellig": 609, "vmware": 609, "applianc": 609, "bitnami": 609, "nov": 609, "signific": [609, 611], "sota": 609, "plug": 609, "twitter": 609, "linkedin": 609, "zone": 609, "land": 609, "gcp": 609, "pat": 609, "keynot": 609, "intelon": 609, "sep": 609, "deliv": 609, "chines": 609, "aug": 609, "purif": 609, "sacrif": 609, "jun": 609, "partner": 609, "apr": 609, "feb": 609, "joint": 609, "msft": 609, "bilibili": 609, "gestalt": 609, "ml": 609, "doubl": 609, "mlperf": [609, 620], "reconstruct": 609, "abound": 609, "lpot": [609, 613], "mar": 609, "nextplatform": 609, "cern": 609, "gan": 609, "3dgan": 609, "iml": 609, "workshop": 609, "asplo": 609, "18": [609, 620], "highli": 609, "intelcaff": 609, "aris": 610, "tell": 610, "henc": 610, "post_training_dynamic_qu": [610, 617], "quant_aware_train": 610, "initial_spars": [610, 619], "prune_typ": [610, 619], "basic_magnitud": [610, 619], "start_epoch": [610, 619], "end_epoch": [610, 619], "update_frequ": 610, "prune_domain": 610, "tile_pattern_1x1": 610, "graph_optimization_level": 610, "disable_al": 610, "invent": 611, "int4": 611, "cost": 611, "theoret": 611, "affin": 611, "zeropoint": 611, "asymmetr": [611, 617], "overflow": 611, "solv": [611, 613], "fbgemm": 611, "unseen": 611, "enough": 611, "peopl": 611, "emul": 611, "mimic": 611, "fact": 611, "ultim": 611, "pain": 611, "lossi": 611, "understand": [611, 615], "philosophi": 611, "val_dataset": 611, "ping_memori": 611, "val_load": 611, "avg": 611, "postposttrainingquantconfig": 612, "bf16wrapper": 612, "retrac": 612, "site": 613, "assist": 613, "comparison": [613, 615], "sed": 613, "your_script": 613, "hyperparamet": [614, 617], "backbon": 614, "interact": 614, "sigopt_api_token": [614, 617], "sigopt_project_id": [614, 617], "sigopt_experiment_id": 614, "nc": [614, 617], "certain": 614, "suffici": 614, "ordinari": 614, "capac": 614, "sigopt_experiment_nam": [614, 617], "mobilenet": [614, 620], "8266": 614, "8372": 614, "2132": 614, "83": [614, 620], "7495": 614, "8299": 614, "8294": 614, "85": [614, 620], "0837": 614, "8291": 614, "4469": 614, "discov": 615, "why": 615, "valuabl": 615, "instrument": 615, "writer": 615, "_pre_eval_hook": 615, "submodul": 615, "whitelist": 615, "_recordingobserv": 615, "output_tensors_dict": 615, "current_it": 615, "get_tensor_valu": 615, "_observer_forward_hook": 615, "activation_post_process": 615, "_add_observer_": 615, "named_children": 615, "leaf": 615, "add_modul": 615, "register_forward_hook": 615, "dump_tim": 615, "summarywrit": 615, "_acc": 615, "tune_": 615, "add_graph": 615, "get_observer_dict": 615, "observer_dict": 615, "is_quant": 615, "add_histogram": 615, "bind_al": 615, "logdir_spec": 615, "tune_0_acc0": 615, "tune_1": 615, "tune_1_acc0": 615, "79": [615, 620], "four": 615, "baseline_acc_0": 615, "776": 615, "tune_1_acc_0": 615, "095": 615, "runs_v3": 615, "image_recognit": 615, "run_tuning_dump_tensor": 615, "sh": 615, "inceptionv3": 615, "v0": 615, "cg": 615, "conv0": 615, "op_wis": [615, 619], "bash": 615, "run_tun": 615, "topologi": 615, "inception_v3": 615, "dataset_loc": 615, "inceptionv3_fp32_pretrained_model": 615, "nc_inceptionv3": 615, "inceptionv3_dump_tensor": 615, "poor": 615, "disappear": 615, "centercrop": 616, "randomresizedcrop": 616, "randomcrop": 616, "cropres": 616, "decodeimag": 616, "jpeg": 616, "encodejp": 616, "alignimagechannel": 616, "68": [616, 620], "116": 616, "78": [616, 620], "103": 616, "94": [616, 620], "017": 616, "bilinearimagenet": [616, 619], "totensor": 616, "topilimag": 616, "padding_mod": 616, "border": 616, "colorjitt": 616, "bright": 616, "satur": 616, "hue": 616, "jitter": 616, "tondarrai": 616, "quickli": 617, "human": 617, "post_training_auto_qu": 617, "iii": 617, "classic": 617, "primari": 617, "spent": 617, "hawq_v2_loss": 617, "model_loss": 617, "compli": 617, "focu": 617, "short": 617, "never": 617, "loglevel": 617, "endlessli": 617, "smbo": 617, "appl": 617, "surrog": 617, "divid": 617, "quantil": 617, "x1": 617, "x2": 617, "densiti": 617, "parzen": 617, "greatest": 617, "dai": 617, "abctunestrategi": 617, "overridden": 617, "mobilenet_v1": 619, "onnxrt_integ": 619, "onnxrt_qlinear": 619, "image_tensor": 619, "subsect": 619, "model_wis": 619, "conv1": 619, "hyper": 619, "40": [619, 620], "06": [619, 620], "beta_1": 619, "beta_2": 619, "sparsecategoricalcrossentropi": 619, "reduct": 619, "sum_over_batch_s": 619, "from_logit": 619, "54": [619, 620], "19": [619, 620], "90": [619, 620], "nesterov": 619, "weight_decai": 619, "overal": 619, "8380": 620, "performancethroughput": 620, "sec": 620, "86": 620, "00": 620, "170": 620, "44": 620, "93": 620, "69": 620, "82x": 620, "92": 620, "63": 620, "39": 620, "85x": 620, "61": 620, "83x": 620, "densenet": 620, "121": 620, "73": 620, "72": 620, "89": 620, "274": 620, "148": 620, "161": 620, "76": 620, "132": 620, "35": 620, "39x": 620, "169": 620, "74": 620, "38": 620, "65": 620, "36": 620, "191": 620, "118": 620, "61x": 620, "cnn": 620, "incept": 620, "37": 620, "81": 620, "55": 620, "84x": 620, "resnet101": 620, "57": 620, "21x": 620, "43": 620, "70x": 620, "26": 620, "59": 620, "51": 620, "70": 620, "14x": 620, "139": 620, "955": 620, "328": 620, "91x": 620, "97": 620, "709": 620, "282": 620, "51x": 620, "v3": 620, "71": 620, "337": 620, "160": 620, "11x": 620, "77": 620, "438": 620, "204": 620, "223": 620, "105": 620, "12x": 620, "10x": 620, "1347": 620, "439": 620, "07x": 620, "56": 620, "1192": 620, "492": 620, "42x": 620, "91": 620, "412": 620, "376": 620, "662": 620, "397": 620, "66x": 620, "299": 620, "23": 620, "154": 620, "67": 620, "93x": 620, "476": 620, "227": 620, "fashion": 620, "2734": 620, "1299": 620, "498": 620, "178": 620, "79x": 620, "46": 620, "427": 620, "173": 620, "47x": 620, "resnetv2": 620, "194": 620, "146": 620, "33x": 620, "48": 620, "237": 620, "187": 620, "27x": 620, "152": 620, "155": 620, "38x": 620, "302": 620, "215": 620, "40x": 620, "346": 620, "312": 620, "277": 620, "60x": 620, "273": 620, "31x": 620, "66": 620, "18x": 620, "82": 620, "53x": 620, "24x": 620, "vgg16": 620, "219": 620, "vgg19": 620, "193": 620, "11506": 620, "9665": 620, "19x": 620, "xception": 620, "262": 620, "137": 620, "58": 620, "barthez": 620, "143": 620, "02x": 620, "84": 620, "20x": 620, "209": 620, "08x": 620, "221": 620, "sst": 620, "stsb": 620, "218": 620, "16x": 620, "62": 620, "57x": 620, "55x": 620, "56x": 620, "53": 620, "89x": 620, "blendcnn": 620, "4885": 620, "60": 620, "3715": 620, "camembert": 620, "206": 620, "09x": 620, "deberta": 620, "366": 620, "197": 620, "399": 620, "flaubert": 620, "592": 620, "385": 620, "54x": 620, "wikitext": 620, "hubert": 620, "446": 620, "181": 620, "46x": 620, "layoutlm": 620, "longform": 620, "49": 620, "mbart": 620, "625": 620, "451": 620, "lvwerra": 620, "pegasu": 620, "samsum": 620, "peleenet": 620, "402": 620, "29x": 620, "pokemon": 620, "275": 620, "334": 620, "48x": 620, "reform": 620, "crime": 620, "punish": 620, "162": 620, "153": 620, "06x": 620, "657": 620, "327": 620, "01x": 620, "812": 620, "344": 620, "36x": 620, "360": 620, "23x": 620, "resnext101": 620, "32x8d": 620, "182": 620, "207": 620, "squeezebert": 620, "195": 620, "150": 620, "30x": 620, "75x": 620, "transfo": 620, "xl": 620, "41x": 620, "wave2vec2": 620, "22x": 620, "102": 620, "00x": 620, "115": 620, "17x": 620, "yolo": 620, "232": 620, "28x": 620, "664": 620, "329": 620, "832": 620, "338": 620, "433": 620, "164": 620, "63x": 620, "836": 620, "1396": 620, "463": 620, "90x": 620, "159": 620, "32x": 620, "968": 620, "473": 620, "05x": 620, "958": 620, "477": 620, "arcfac": 620, "126": 620, "78x": 620, "298": 620, "124": 620, "624": 620, "254": 620, "45x": 620, "caffenet": 620, "1432": 620, "540": 620, "65x": 620, "1460": 620, "357": 620, "265": 620, "35x": 620, "86x": 620, "524": 620, "duc": 620, "efficientnet": 620, "1211": 620, "758": 620, "856": 620, "762": 620, "emot": 620, "ferplu": 620, "925": 620, "694": 620, "fcn": 620, "25x": 620, "googlenet": 620, "771": 620, "571": 620, "763": 620, "579": 620, "hf": 620, "156": 620, "multilingu": 620, "99x": 620, "199": 620, "104": 620, "73x": 620, "449": 620, "74x": 620, "l12": 620, "h384": 620, "466": 620, "247": 620, "88x": 620, "l6": 620, "523": 620, "354": 620, "183": 620, "107": 620, "spanbert": 620, "208": 620, "795": 620, "600": 620, "780": 620, "591": 620, "515": 620, "15x": 620, "2370": 620, "1526": 620, "2216": 620, "1506": 620, "2078": 620, "1028": 620, "1762": 620, "76x": 620, "mobilenetv2": 620, "2615": 620, "1645": 620, "59x": 620, "2461": 620, "1674": 620, "766": 620, "431": 620, "77x": 620, "575": 620, "430": 620, "34x": 620, "747": 620, "564": 620, "594": 620, "590": 620, "643": 620, "253": 620, "shufflenet": 620, "2354": 620, "1461": 620, "1850": 620, "1368": 620, "squeezenet": 620, "2484": 620, "1912": 620, "2526": 620, "1911": 620, "710": 620, "549": 620, "622": 620, "497": 620, "652": 620, "507": 620, "573": 620, "470": 620, "527": 620, "396": 620, "68x": 620, "tini": 620, "647": 620, "514": 620, "26x": 620, "ultrafac": 620, "314": 620, "50x": 620, "304": 620, "316": 620, "315": 620, "119": 620, "zfnet": 620, "462": 620, "268": 620, "72x": 620, "465": 620, "62x": 620, "436": 620, "270": 620, "429": 620, "92x": 620, "94x": 620, "331": 620, "242": 620, "37x": 620, "98x": 620, "taskdataset": 620, "accuracyspars": 620, "ratiospars": 620, "commentsbalanc": 620, "unbalanc": 620, "classificationimagenet": 620, "76top": 620, "13top": 620, "magnitudepost": 620, "magnitudequant": 620, "answeringsquad": 620, "34f1": 620, "2x1": 620, "lassounbalanc": 620, "classificationmnli": 620, "mm": 620, "allbalanc": 620, "classificationsst": 620, "32accuraci": 620, "sensitivitybalanc": 620, "classificationqqp": 620, "classificationqnli": 620, "54accuraci": 620, "em": 620, "87f1": 620, "momentumunbalanc": 620, "momentumbalanc": 620, "90f1": 620, "59f1": 620, "23f1": 620, "classificationmrpc": 620, "52f1": 620, "26f1": 620, "61accuraci": 620, "7965": 620, "wideresnet40": 620, "9522": 620, "8178": 620, "0213": 620, "8235": 620, "027": 620, "5494": 620, "7153": 620, "5540": 620, "0046": 620, "5523": 620, "0029": 620, "vgg": 620, "7022": 620, "7415": 620, "7025": 620, "0003": 620, "6739": 620, "7399": 620, "6845": 620, "0106": 620, "7034": 620, "8382": 620, "bilstm": 620, "8314": 620, "9403": 620, "9048": 620, "0734": 620, "7323": 620, "8256": 620, "8084": 620, "8814": 620, "7442": 620, "8371": 620, "0119": 620, "0115": 620, "tinybert": 620, "8018": 620, "8044": 620, "8363": 620, "8411": 620, "8025": 620, "8074": 620, "0007": 620, "0030": 620, "8626": 620, "8213": 620, "9091": 620, "8782": 620, "8684": 620, "8259": 620, "0058": 620, "distilroberta": 620, "6057": 620, "6455": 620, "6187": 620, "0130": 620, "c6i": 620, "2xlarg": 620, "c6a": 620, "c6g": 620, "a100cuda": 620}, "objects": {"": [[0, 0, 0, "-", "644ec953a7dc_pruning_support"], [1, 0, 0, "-", "6ece06672ed3_v1_14"], [2, 0, 0, "-", "6f0d0f71d92e_v1_13"], [3, 0, 0, "-", "9e89549a08c8_v1_11"], [4, 0, 0, "-", "block_mask"], [5, 0, 0, "-", "env"], [269, 0, 0, "-", "neural_compressor"]], "6ece06672ed3_v1_14": [[1, 1, 1, "ece06672ed3_v1_14.update_dataloaders", "update_dataloaders"], [1, 1, 1, "ece06672ed3_v1_14.update_transformations", "update_transformations"]], "env": [[5, 1, 1, "", "run_migrations_offline"], [5, 1, 1, "", "run_migrations_online"]], "neural_compressor": [[269, 2, 1, "", "Benchmark"], [269, 2, 1, "", "DistillationConfig"], [269, 2, 1, "", "PostTrainingQuantConfig"], [269, 2, 1, "", "QuantizationAwareTrainingConfig"], [269, 2, 1, "", "WeightPruningConfig"], [7, 0, 0, "-", "adaptor"], [144, 0, 0, "-", "algorithm"], [147, 0, 0, "-", "benchmark"], [150, 0, 0, "-", "conf"], [152, 0, 0, "-", "config"], [153, 0, 0, "-", "contrib"], [178, 0, 0, "-", "data"], [227, 0, 0, "-", "experimental"], [276, 0, 0, "-", "metric"], [278, 0, 0, "-", "mix_precision"], [280, 0, 0, "-", "model"], [288, 0, 0, "-", "objective"], [290, 0, 0, "-", "pruner"], [304, 0, 0, "-", "quantization"], [269, 1, 1, "", "set_random_seed"], [269, 1, 1, "", "set_tensorboard"], [269, 1, 1, "", "set_workspace"], [311, 0, 0, "-", "strategy"], [322, 0, 0, "-", "training"], [326, 0, 0, "-", "utils"], [468, 0, 0, "-", "ux"], [514, 0, 0, "-", "version"]], "neural_compressor.Benchmark": [[269, 3, 1, "", "dataloader"], [269, 3, 1, "", "metric"], [269, 3, 1, "", "postprocess"]], "neural_compressor.DistillationConfig": [[269, 4, 1, "", "criterion"], [269, 4, 1, "", "optimizer"], [269, 4, 1, "", "teacher_model"]], "neural_compressor.PostTrainingQuantConfig": [[269, 4, 1, "", "approach"], [269, 4, 1, "", "tuning_criterion"]], "neural_compressor.QuantizationAwareTrainingConfig": [[269, 4, 1, "", "approach"]], "neural_compressor.WeightPruningConfig": [[269, 4, 1, "", "weight_compression"]], "neural_compressor.adaptor": [[6, 0, 0, "-", "adaptor"], [8, 0, 0, "-", "keras"], [9, 0, 0, "-", "keras_utils"], [11, 0, 0, "-", "mxnet"], [12, 0, 0, "-", "mxnet_utils"], [14, 0, 0, "-", "onnxrt"], [16, 0, 0, "-", "ox_utils"], [39, 0, 0, "-", "pytorch"], [40, 0, 0, "-", "query"], [41, 0, 0, "-", "tensorflow"], [100, 0, 0, "-", "tf_utils"], [137, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[6, 2, 1, "", "Adaptor"], [6, 1, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.adaptor.Adaptor": [[6, 3, 1, "", "convert"], [6, 3, 1, "", "evaluate"], [6, 3, 1, "", "inspect_tensor"], [6, 3, 1, "", "quantize"], [6, 3, 1, "", "quantize_input"], [6, 3, 1, "", "query_fused_patterns"], [6, 3, 1, "", "query_fw_capability"], [6, 3, 1, "", "save"], [6, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.keras": [[8, 2, 1, "", "KerasAdaptor"], [8, 2, 1, "", "KerasQuery"]], "neural_compressor.adaptor.keras.KerasAdaptor": [[8, 3, 1, "", "convert"], [8, 3, 1, "", "evaluate"], [8, 3, 1, "", "get_optype_wise_ability"], [8, 3, 1, "", "inspect_tensor"], [8, 3, 1, "", "quantize"], [8, 3, 1, "", "quantize_input"], [8, 3, 1, "", "query_fw_capability"], [8, 3, 1, "", "save"], [8, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.keras.KerasQuery": [[8, 3, 1, "", "get_op_types"], [8, 3, 1, "", "get_op_types_by_precision"], [8, 3, 1, "", "get_precisions"], [8, 3, 1, "", "get_quantization_capability"], [8, 3, 1, "", "get_version"]], "neural_compressor.adaptor.keras_utils": [[10, 0, 0, "-", "quantizer"]], "neural_compressor.adaptor.mxnet": [[11, 2, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet.MxNetAdaptor": [[11, 3, 1, "", "evaluate"], [11, 3, 1, "", "inspect_tensor"], [11, 3, 1, "", "quantize"], [11, 3, 1, "", "query_fw_capability"], [11, 3, 1, "", "recover_tuned_model"], [11, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.mxnet_utils": [[13, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, 2, 1, "", "CalibCollector"], [13, 2, 1, "", "CalibData"], [13, 2, 1, "", "CollectorBase"], [13, 2, 1, "", "DataIterLoader"], [13, 2, 1, "", "DataLoaderWrap"], [13, 2, 1, "", "NameCollector"], [13, 2, 1, "", "OpType"], [13, 2, 1, "", "TensorCollector"], [13, 1, 1, "", "amp_convert"], [13, 1, 1, "", "calib_model"], [13, 1, 1, "", "check_mx_version"], [13, 1, 1, "", "combine_capabilities"], [13, 1, 1, "", "create_data_example"], [13, 1, 1, "", "distribute_calib_tensors"], [13, 1, 1, "", "ensure_list"], [13, 1, 1, "", "fuse"], [13, 1, 1, "", "get_framework_name"], [13, 1, 1, "", "is_model_quantized"], [13, 1, 1, "", "isiterable"], [13, 1, 1, "", "make_module"], [13, 1, 1, "", "make_nc_model"], [13, 1, 1, "", "make_symbol_block"], [13, 1, 1, "", "ndarray_to_device"], [13, 1, 1, "", "parse_tune_config"], [13, 1, 1, "", "prepare_dataloader"], [13, 1, 1, "", "prepare_model"], [13, 1, 1, "", "prepare_model_data"], [13, 1, 1, "", "quantize_sym_model"], [13, 1, 1, "", "query_quantizable_nodes"], [13, 1, 1, "", "run_forward"]], "neural_compressor.adaptor.mxnet_utils.util.CalibCollector": [[13, 3, 1, "", "calc_kl_th_dict"], [13, 3, 1, "", "collect_gluon"]], "neural_compressor.adaptor.mxnet_utils.util.CalibData": [[13, 4, 1, "", "min_max_dict"], [13, 3, 1, "", "post_collect"]], "neural_compressor.adaptor.mxnet_utils.util.CollectorBase": [[13, 3, 1, "", "collect_gluon"], [13, 3, 1, "", "collect_module"], [13, 3, 1, "", "post_batch"], [13, 3, 1, "", "pre_batch"]], "neural_compressor.adaptor.mxnet_utils.util.NameCollector": [[13, 3, 1, "", "collect_gluon"]], "neural_compressor.adaptor.mxnet_utils.util.TensorCollector": [[13, 3, 1, "", "collect_gluon"], [13, 3, 1, "", "pre_batch"]], "neural_compressor.adaptor.onnxrt": [[14, 2, 1, "", "ONNXRT_IntegerOpsAdaptor"], [14, 2, 1, "", "ONNXRT_QDQAdaptor"], [14, 2, 1, "", "ONNXRT_QLinearOpsAdaptor"], [14, 2, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor": [[14, 3, 1, "", "evaluate"], [14, 3, 1, "", "inspect_tensor"], [14, 3, 1, "", "quantize"], [14, 3, 1, "", "query_fw_capability"], [14, 3, 1, "", "recover"], [14, 3, 1, "", "save"], [14, 3, 1, "", "smooth_quant"]], "neural_compressor.adaptor.ox_utils": [[15, 0, 0, "-", "calibration"], [28, 0, 0, "-", "operators"], [37, 0, 0, "-", "quantizer"], [38, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, 2, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment": [[15, 3, 1, "", "augment_graph"], [15, 3, 1, "", "calculate_quantization_params"], [15, 3, 1, "", "calculate_scale_zeropoint"], [15, 3, 1, "", "calib_smooth"], [15, 3, 1, "", "dump_calibration"], [15, 3, 1, "", "dump_minmax"], [15, 3, 1, "", "dump_tensor"], [15, 3, 1, "", "get_intermediate_outputs"]], "neural_compressor.adaptor.ox_utils.operators": [[17, 0, 0, "-", "activation"], [18, 0, 0, "-", "argmax"], [19, 0, 0, "-", "attention"], [20, 0, 0, "-", "binary_op"], [21, 0, 0, "-", "concat"], [22, 0, 0, "-", "conv"], [23, 0, 0, "-", "direct_q8"], [24, 0, 0, "-", "embed_layernorm"], [25, 0, 0, "-", "gather"], [26, 0, 0, "-", "gavgpool"], [27, 0, 0, "-", "gemm"], [29, 0, 0, "-", "lstm"], [30, 0, 0, "-", "matmul"], [31, 0, 0, "-", "maxpool"], [32, 0, 0, "-", "ops"], [33, 0, 0, "-", "pad"], [34, 0, 0, "-", "pooling"], [35, 0, 0, "-", "resize"], [36, 0, 0, "-", "split"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[17, 2, 1, "", "ActivationOperator"], [17, 2, 1, "", "QActivationOperator"], [17, 2, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator": [[17, 3, 1, "", "convert"], [17, 3, 1, "", "convert_check"], [17, 3, 1, "", "quantize"], [17, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator": [[17, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator": [[17, 3, 1, "", "quantize"], [17, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[18, 2, 1, "", "ArgMaxOperator"], [18, 2, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator": [[18, 3, 1, "", "convert"], [18, 3, 1, "", "convert_check"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[19, 2, 1, "", "AttentionOperator"], [19, 2, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator": [[19, 3, 1, "", "convert"], [19, 3, 1, "", "convert_check"], [19, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator": [[19, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[20, 2, 1, "", "BinaryOperator"], [20, 2, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator": [[20, 3, 1, "", "convert"], [20, 3, 1, "", "convert_check"], [20, 3, 1, "", "quantize"], [20, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator": [[20, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[21, 2, 1, "", "ConcatOperator"], [21, 2, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator": [[21, 3, 1, "", "cast"], [21, 3, 1, "", "convert"], [21, 3, 1, "", "convert_check"], [21, 3, 1, "", "quantize"], [21, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator": [[21, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[22, 2, 1, "", "ConvOperator"], [22, 2, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator": [[22, 3, 1, "", "convert"], [22, 3, 1, "", "convert_check"], [22, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator": [[22, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[23, 2, 1, "", "Direct8BitOperator"], [23, 2, 1, "", "DirectCastOperator"], [23, 2, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator": [[23, 3, 1, "", "cast"], [23, 3, 1, "", "convert"], [23, 3, 1, "", "convert_check"], [23, 3, 1, "", "quantize"], [23, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8.DirectCastOperator": [[23, 3, 1, "", "cast"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[24, 2, 1, "", "EmbedLayerNormalizationOperator"], [24, 2, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator": [[24, 3, 1, "", "convert"], [24, 3, 1, "", "convert_check"], [24, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator": [[24, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[25, 2, 1, "", "GatherOperator"], [25, 2, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator": [[25, 3, 1, "", "convert"], [25, 3, 1, "", "convert_check"], [25, 3, 1, "", "quantize"], [25, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[26, 2, 1, "", "GlobalAveragePoolOperator"], [26, 2, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator": [[26, 3, 1, "", "convert"], [26, 3, 1, "", "convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator": [[26, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[27, 2, 1, "", "GemmOperator"], [27, 2, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator": [[27, 3, 1, "", "convert"], [27, 3, 1, "", "convert_check"], [27, 3, 1, "", "quantize"], [27, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator": [[27, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[29, 2, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator": [[29, 3, 1, "", "convert"], [29, 3, 1, "", "convert_check"], [29, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[30, 2, 1, "", "MatMulOperator"], [30, 2, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator": [[30, 3, 1, "", "convert"], [30, 3, 1, "", "convert_check"], [30, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator": [[30, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[31, 2, 1, "", "MaxPoolOperator"], [31, 2, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator": [[31, 3, 1, "", "convert"], [31, 3, 1, "", "convert_check"], [31, 3, 1, "", "quantize"], [31, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[32, 2, 1, "", "Operator"], [32, 2, 1, "", "QOperator"], [32, 1, 1, "", "op_registry"], [32, 1, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.ops.Operator": [[32, 3, 1, "", "cast"], [32, 3, 1, "", "convert"], [32, 3, 1, "", "convert_check"], [32, 3, 1, "", "quantize"], [32, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.ops.QOperator": [[32, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[33, 2, 1, "", "PadOperator"], [33, 2, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator": [[33, 3, 1, "", "convert"], [33, 3, 1, "", "convert_check"], [33, 3, 1, "", "quantize"], [33, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[34, 2, 1, "", "PoolOperator"], [34, 2, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator": [[34, 3, 1, "", "convert"], [34, 3, 1, "", "convert_check"], [34, 3, 1, "", "quantize"], [34, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator": [[34, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[35, 2, 1, "", "QResizeOperator"], [35, 2, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator": [[35, 3, 1, "", "convert"], [35, 3, 1, "", "convert_check"], [35, 3, 1, "", "quantize"], [35, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.split": [[36, 2, 1, "", "QSplitOperator"], [36, 2, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator": [[36, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator": [[36, 3, 1, "", "cast"], [36, 3, 1, "", "convert"], [36, 3, 1, "", "convert_check"], [36, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.quantizer": [[37, 2, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer.Quantizer": [[37, 3, 1, "", "check_opset_version"], [37, 3, 1, "", "convert_qdq_to_operator_oriented"], [37, 3, 1, "", "dequantize_tensor"], [37, 3, 1, "", "dtype_cast"], [37, 3, 1, "", "get_bias_add_nodes"], [37, 3, 1, "", "insert_qdq"], [37, 3, 1, "", "is_valid_quantize_weight"], [37, 3, 1, "", "merge_dedicated_qdq_pair"], [37, 3, 1, "", "quantize_bias"], [37, 3, 1, "", "quantize_bias_tensor"], [37, 3, 1, "", "quantize_inputs"], [37, 3, 1, "", "quantize_model"], [37, 3, 1, "", "quantize_outputs"], [37, 3, 1, "", "quantize_weight_per_channel"], [37, 3, 1, "", "quantize_weights_per_channel"], [37, 3, 1, "", "remove_redundant_pairs"], [37, 3, 1, "", "should_cast"], [37, 3, 1, "", "should_convert"], [37, 3, 1, "", "should_quantize"], [37, 3, 1, "", "tensor_proto_to_array"]], "neural_compressor.adaptor.ox_utils.util": [[38, 2, 1, "", "QuantFormat"], [38, 2, 1, "", "QuantType"], [38, 2, 1, "", "QuantizationMode"], [38, 2, 1, "", "QuantizedInitializer"], [38, 2, 1, "", "QuantizedValue"], [38, 2, 1, "", "QuantizedValueType"], [38, 2, 1, "", "ValueInfo"], [38, 1, 1, "", "adjust_weights_per_input"], [38, 1, 1, "", "adjust_weights_per_op"], [38, 1, 1, "", "attribute_to_kwarg"], [38, 1, 1, "", "calculate_scale_zp"], [38, 1, 1, "", "cast_tensor"], [38, 1, 1, "", "collate_preds"], [38, 1, 1, "", "dequantize_data"], [38, 1, 1, "", "dequantize_data_with_scale_zero"], [38, 1, 1, "", "dtype_to_name"], [38, 1, 1, "", "find_by_name"], [38, 1, 1, "", "get_smooth_scales_per_input"], [38, 1, 1, "", "get_smooth_scales_per_op"], [38, 1, 1, "", "insert_smooth_mul_op_per_input"], [38, 1, 1, "", "insert_smooth_mul_op_per_op"], [38, 1, 1, "", "is_B_transposed"], [38, 1, 1, "", "make_dquant_node"], [38, 1, 1, "", "make_quant_node"], [38, 1, 1, "", "quantize_data"], [38, 1, 1, "", "quantize_data_per_channel"], [38, 1, 1, "", "quantize_data_with_scale_zero"], [38, 1, 1, "", "quantize_nparray"], [38, 1, 1, "", "remove_init_from_model_input"], [38, 1, 1, "", "split_shared_bias"]], "neural_compressor.adaptor.pytorch": [[39, 2, 1, "", "PyTorchAdaptor"], [39, 2, 1, "", "PyTorchQuery"], [39, 2, 1, "", "PyTorch_FXAdaptor"], [39, 2, 1, "", "PyTorch_IPEXAdaptor"], [39, 2, 1, "", "TemplateAdaptor"], [39, 1, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.pytorch.PyTorchAdaptor": [[39, 3, 1, "", "evaluate"], [39, 3, 1, "", "get_non_quant_modules"], [39, 3, 1, "", "is_fused_child"], [39, 3, 1, "", "is_fused_op"], [39, 3, 1, "", "is_last_fused_child"], [39, 3, 1, "", "quantize"], [39, 3, 1, "", "query_fw_capability"], [39, 3, 1, "", "train"]], "neural_compressor.adaptor.pytorch.PyTorchQuery": [[39, 3, 1, "", "get_op_types"], [39, 3, 1, "", "get_op_types_by_precision"], [39, 3, 1, "", "get_quantization_capability"]], "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor": [[39, 3, 1, "", "calculate_op_sensitivity"], [39, 3, 1, "", "convert_sub_graph"], [39, 3, 1, "", "evaluate"], [39, 3, 1, "", "fuse_fx_model"], [39, 3, 1, "", "prepare_sub_graph"], [39, 3, 1, "", "quantize"], [39, 3, 1, "", "query_fw_capability"], [39, 3, 1, "", "train"]], "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor": [[39, 3, 1, "", "evaluate"], [39, 3, 1, "", "quantize"], [39, 3, 1, "", "query_fw_capability"], [39, 3, 1, "", "save"]], "neural_compressor.adaptor.pytorch.TemplateAdaptor": [[39, 3, 1, "", "calculate_hessian_trace"], [39, 3, 1, "", "is_fused_module"], [39, 3, 1, "", "smooth_quant"]], "neural_compressor.adaptor.query": [[40, 2, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.query.QueryBackendCapability": [[40, 3, 1, "", "get_fuse_patterns"], [40, 3, 1, "", "get_mixed_precision_combination"], [40, 3, 1, "", "get_op_types"], [40, 3, 1, "", "get_precisions"], [40, 3, 1, "", "get_quantization_capability"], [40, 3, 1, "", "get_version"], [40, 3, 1, "", "set_quantization_config"]], "neural_compressor.adaptor.tensorflow": [[41, 2, 1, "", "TensorFlowAdaptor"], [41, 2, 1, "", "TensorflowQuery"], [41, 2, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor": [[41, 3, 1, "", "calculate_op_sensitivity"], [41, 3, 1, "", "convert"], [41, 3, 1, "", "diagnosis_helper"], [41, 3, 1, "", "evaluate"], [41, 3, 1, "", "fused_node_mapping"], [41, 3, 1, "", "get_optype_wise_ability"], [41, 3, 1, "", "get_output_op_names"], [41, 3, 1, "", "inspect_activation"], [41, 3, 1, "", "inspect_tensor"], [41, 3, 1, "", "inspect_weight_and_bias"], [41, 3, 1, "", "qat_convert"], [41, 3, 1, "", "quantize"], [41, 3, 1, "", "quantize_input"], [41, 3, 1, "", "query_fw_capability"], [41, 3, 1, "", "recover_tuned_model"], [41, 3, 1, "", "save"], [41, 3, 1, "", "set_tensor"], [41, 3, 1, "", "train"]], "neural_compressor.adaptor.tensorflow.TensorflowQuery": [[41, 3, 1, "", "generate_internal_patterns"], [41, 3, 1, "", "get_bf16_patterns"], [41, 3, 1, "", "get_eightbit_patterns"], [41, 3, 1, "", "get_fuse_patterns"], [41, 3, 1, "", "get_mixed_precision_combination"], [41, 3, 1, "", "get_op_types"], [41, 3, 1, "", "get_op_types_by_precision"], [41, 3, 1, "", "get_quantization_capability"], [41, 3, 1, "", "get_version"]], "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor": [[41, 3, 1, "", "quantize"]], "neural_compressor.adaptor.tf_utils": [[42, 0, 0, "-", "graph_converter"], [43, 0, 0, "-", "graph_converter_without_calib"], [81, 0, 0, "-", "graph_rewriter"], [99, 0, 0, "-", "graph_util"], [101, 0, 0, "-", "quantize_graph"], [128, 0, 0, "-", "quantize_graph_common"], [131, 0, 0, "-", "transform_graph"], [134, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[42, 2, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter": [[42, 3, 1, "", "bf16_convert"], [42, 3, 1, "", "convert"], [42, 3, 1, "", "quantize"], [42, 3, 1, "", "quantize_with_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[43, 2, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib": [[43, 3, 1, "", "bf16_convert"], [43, 3, 1, "", "convert_without_calib"], [43, 3, 1, "", "quantize_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[45, 0, 0, "-", "bf16"], [70, 0, 0, "-", "generic"], [80, 0, 0, "-", "graph_base"], [89, 0, 0, "-", "int8"], [95, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[44, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[44, 2, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert": [[44, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[46, 0, 0, "-", "convert_add_to_biasadd"], [47, 0, 0, "-", "convert_layout"], [48, 0, 0, "-", "convert_leakyrelu"], [49, 0, 0, "-", "convert_nan_to_random"], [50, 0, 0, "-", "convert_placeholder_to_const"], [51, 0, 0, "-", "dequantize_cast_optimizer"], [52, 0, 0, "-", "dilated_contraction"], [53, 0, 0, "-", "dummy_biasadd"], [54, 0, 0, "-", "expanddims_optimizer"], [55, 0, 0, "-", "fetch_weight_from_reshape"], [56, 0, 0, "-", "fold_batch_norm"], [57, 0, 0, "-", "fold_constant"], [58, 0, 0, "-", "fuse_biasadd_add"], [59, 0, 0, "-", "fuse_column_wise_mul"], [60, 0, 0, "-", "fuse_conv_with_math"], [61, 0, 0, "-", "fuse_decomposed_bn"], [62, 0, 0, "-", "fuse_decomposed_in"], [63, 0, 0, "-", "fuse_gelu"], [64, 0, 0, "-", "fuse_layer_norm"], [65, 0, 0, "-", "fuse_pad_with_conv"], [66, 0, 0, "-", "fuse_pad_with_fp32_conv"], [67, 0, 0, "-", "fuse_reshape_transpose"], [68, 0, 0, "-", "graph_cse_optimizer"], [69, 0, 0, "-", "grappler_pass"], [71, 0, 0, "-", "insert_print_node"], [72, 0, 0, "-", "move_squeeze_after_relu"], [73, 0, 0, "-", "pre_optimize"], [74, 0, 0, "-", "remove_training_nodes"], [75, 0, 0, "-", "rename_batch_norm"], [76, 0, 0, "-", "split_shared_input"], [77, 0, 0, "-", "strip_equivalent_nodes"], [78, 0, 0, "-", "strip_unused_nodes"], [79, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[46, 2, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer": [[46, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[47, 2, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer": [[47, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[48, 2, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer": [[48, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[49, 2, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom": [[49, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[50, 2, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst": [[50, 3, 1, "", "do_transformation"], [50, 3, 1, "", "strtobool"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[51, 2, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer": [[51, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[52, 2, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction": [[52, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[53, 2, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer": [[53, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[54, 2, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer": [[54, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[55, 2, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer": [[55, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[56, 2, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer": [[56, 3, 1, "", "do_transformation"], [56, 3, 1, "", "scale_after_normalization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[57, 2, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer": [[57, 3, 1, "", "check_all_folded"], [57, 3, 1, "", "check_const_inputs"], [57, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[58, 2, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer": [[58, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[59, 2, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer": [[59, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[60, 2, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer": [[60, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[61, 2, 1, "", "FuseDecomposedBNOptimizer"], [61, 1, 1, "", "bypass_reshape"], [61, 1, 1, "", "get_const_dim_count"], [61, 1, 1, "", "node_from_map"], [61, 1, 1, "", "node_name_from_input"], [61, 1, 1, "", "valid_reshape_inputs"], [61, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer": [[61, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[62, 2, 1, "", "FuseDecomposedINOptimizer"], [62, 1, 1, "", "bypass_reshape"], [62, 1, 1, "", "get_const_dim_count"], [62, 1, 1, "", "node_from_map"], [62, 1, 1, "", "node_name_from_input"], [62, 1, 1, "", "valid_reshape_inputs"], [62, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer": [[62, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[63, 2, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer": [[63, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[64, 2, 1, "", "FuseLayerNormOptimizer"], [64, 1, 1, "", "node_from_map"], [64, 1, 1, "", "node_name_from_input"], [64, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer": [[64, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[65, 2, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer": [[65, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[66, 2, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer": [[66, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[67, 2, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer": [[67, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[68, 2, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer": [[68, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[69, 2, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer": [[69, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[71, 2, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode": [[71, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[72, 2, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer": [[72, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[73, 2, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization": [[73, 3, 1, "", "get_excluded_node_names"], [73, 3, 1, "", "get_matched_nodes"], [73, 3, 1, "", "get_optimized_model"], [73, 3, 1, "", "has_positive_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[74, 2, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer": [[74, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[75, 2, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer": [[75, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[76, 2, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer": [[76, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[77, 2, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer": [[77, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[78, 2, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer": [[78, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[79, 2, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer": [[79, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[80, 2, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase": [[80, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[82, 0, 0, "-", "freeze_fake_quant"], [83, 0, 0, "-", "freeze_value"], [84, 0, 0, "-", "freeze_value_without_calib"], [85, 0, 0, "-", "fuse_conv_redundant_dequantize"], [86, 0, 0, "-", "fuse_conv_requantize"], [87, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [88, 0, 0, "-", "fuse_matmul_requantize"], [90, 0, 0, "-", "meta_op_optimizer"], [91, 0, 0, "-", "post_hostconst_converter"], [92, 0, 0, "-", "post_quantized_op_cse"], [93, 0, 0, "-", "rnn_convert"], [94, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[82, 2, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer": [[82, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[83, 2, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer": [[83, 3, 1, "", "do_transformation"], [83, 3, 1, "", "generate_output_graph"], [83, 3, 1, "", "generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[84, 2, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer": [[84, 3, 1, "", "do_transformation_without_calib"], [84, 3, 1, "", "generate_output_graph"], [84, 3, 1, "", "generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[85, 2, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer": [[85, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[86, 2, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer": [[86, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[87, 2, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer": [[87, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[88, 2, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [88, 2, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [88, 2, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [88, 2, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer": [[88, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer": [[88, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer": [[88, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer": [[88, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[90, 2, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer": [[90, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[91, 2, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter": [[91, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[92, 2, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer": [[92, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[93, 2, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter": [[93, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[94, 2, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer": [[94, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[96, 0, 0, "-", "insert_qdq_pattern"], [97, 0, 0, "-", "merge_duplicated_qdq"], [98, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[96, 2, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern": [[96, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[97, 2, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer": [[97, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[98, 2, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer": [[98, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_util": [[99, 2, 1, "", "GraphAnalyzer"], [99, 2, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer": [[99, 3, 1, "", "add_node"], [99, 3, 1, "", "dump_graph"], [99, 3, 1, "", "get_frame_info"], [99, 3, 1, "", "get_graph_input_output"], [99, 4, 1, "", "graph"], [99, 3, 1, "", "has_positive_input"], [99, 3, 1, "", "parse_graph"], [99, 3, 1, "", "query_fusion_pattern_nodes"], [99, 3, 1, "", "remove_node"], [99, 3, 1, "", "remove_node_with_single_input_output"], [99, 3, 1, "", "replace_const_node"], [99, 3, 1, "", "replace_constant_graph_with_constant_node"], [99, 3, 1, "", "replace_node"], [99, 3, 1, "", "replace_single_node"]], "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper": [[99, 3, 1, "", "analysis_rnn_model"], [99, 3, 1, "", "compare_node_attr"], [99, 3, 1, "", "create_constant_node"], [99, 3, 1, "", "create_node"], [99, 3, 1, "", "gen_valid_sampling_log"], [99, 3, 1, "", "generate_int32_bias_for_conv"], [99, 3, 1, "", "generate_int32_bias_for_matmul"], [99, 3, 1, "", "node_name_from_input"], [99, 3, 1, "", "set_attr_bool"], [99, 3, 1, "", "set_attr_dtype"], [99, 3, 1, "", "set_attr_float"], [99, 3, 1, "", "set_attr_int"], [99, 3, 1, "", "set_attr_int_list"], [99, 3, 1, "", "set_attr_string"], [99, 3, 1, "", "set_attr_string_list"], [99, 3, 1, "", "set_attr_tensor"], [99, 3, 1, "", "set_attr_type_list"], [99, 3, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[103, 0, 0, "-", "qat"], [119, 0, 0, "-", "qdq"], [121, 0, 0, "-", "quantize_graph_base"], [122, 0, 0, "-", "quantize_graph_bn"], [123, 0, 0, "-", "quantize_graph_concatv2"], [124, 0, 0, "-", "quantize_graph_conv"], [125, 0, 0, "-", "quantize_graph_for_intel_cpu"], [126, 0, 0, "-", "quantize_graph_matmul"], [127, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[102, 0, 0, "-", "fake_quantize"], [104, 0, 0, "-", "quantize_config"], [105, 0, 0, "-", "quantize_helper"], [106, 0, 0, "-", "quantize_layers"], [111, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[102, 2, 1, "", "FakeQuantize"], [102, 2, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize": [[102, 3, 1, "", "get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase": [[102, 3, 1, "", "from_config"], [102, 3, 1, "", "get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[104, 2, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig": [[104, 3, 1, "", "add_quantize_recipe"], [104, 3, 1, "", "clear_quantize_recipe"], [104, 3, 1, "", "get_quantize_recipe"], [104, 3, 1, "", "is_empty"], [104, 3, 1, "", "query_layer"], [104, 3, 1, "", "remove_layer"], [104, 3, 1, "", "remove_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[105, 1, 1, "", "init_quantize_config"], [105, 1, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[107, 0, 0, "-", "optimize_layer"], [108, 0, 0, "-", "quantize_layer_add"], [109, 0, 0, "-", "quantize_layer_base"], [110, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[107, 1, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[108, 2, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[109, 2, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[110, 2, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[111, 2, 1, "", "QuantizeWrapper"], [111, 2, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper": [[111, 3, 1, "", "build"], [111, 3, 1, "", "call"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase": [[111, 3, 1, "", "build"], [111, 3, 1, "", "call"], [111, 3, 1, "", "compute_output_shape"], [111, 3, 1, "", "from_config"], [111, 3, 1, "", "get_config"], [111, 4, 1, "", "losses"], [111, 4, 1, "", "non_trainable_weights"], [111, 3, 1, "", "query_input_index"], [111, 4, 1, "", "trainable"], [111, 4, 1, "", "trainable_weights"], [111, 4, 1, "", "updates"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[112, 0, 0, "-", "fuse_qdq_bn"], [113, 0, 0, "-", "fuse_qdq_concatv2"], [114, 0, 0, "-", "fuse_qdq_conv"], [115, 0, 0, "-", "fuse_qdq_deconv"], [116, 0, 0, "-", "fuse_qdq_in"], [117, 0, 0, "-", "fuse_qdq_matmul"], [118, 0, 0, "-", "fuse_qdq_pooling"], [120, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[112, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3": [[112, 3, 1, "", "apply_newly_bn_leakyrelu_fusion"], [112, 3, 1, "", "apply_newly_bn_relu_fusion"], [112, 3, 1, "", "apply_the_transform"], [112, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[113, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2": [[113, 3, 1, "", "apply_the_transform"], [113, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[114, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d": [[114, 3, 1, "", "apply_conv3d_add_addn_fusion"], [114, 3, 1, "", "apply_conv3d_add_addn_relu_fusion"], [114, 3, 1, "", "apply_conv3d_add_fusion"], [114, 3, 1, "", "apply_conv3d_add_relu_fusion"], [114, 3, 1, "", "apply_conv3d_single_fusion"], [114, 3, 1, "", "apply_conv_biasadd_hardswish_fusion"], [114, 3, 1, "", "apply_newly_conv_biasadd_addn_fusion"], [114, 3, 1, "", "apply_newly_conv_biasadd_addn_relu_fusion"], [114, 3, 1, "", "apply_newly_conv_biasadd_fusion"], [114, 3, 1, "", "apply_newly_conv_biasadd_relu_fusion"], [114, 3, 1, "", "apply_newly_conv_biasadd_swishf32_fusion"], [114, 3, 1, "", "apply_newly_conv_single_fusion"], [114, 3, 1, "", "apply_the_transform"], [114, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[115, 2, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d": [[115, 3, 1, "", "apply_deconv2d_biasadd_fusion"], [115, 3, 1, "", "apply_deconv3d_biasadd_fusion"], [115, 3, 1, "", "apply_single_deconv2d_fusion"], [115, 3, 1, "", "apply_single_deconv3d_fusion"], [115, 3, 1, "", "apply_the_transform"], [115, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[116, 2, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm": [[116, 3, 1, "", "apply_newly_in_relu_fusion"], [116, 3, 1, "", "apply_the_transform"], [116, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[117, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul": [[117, 3, 1, "", "apply_batchmatmulv2_fusion"], [117, 3, 1, "", "apply_batchmatmulv2_mul_add_fusion"], [117, 3, 1, "", "apply_matmul_biasadd_fusion"], [117, 3, 1, "", "apply_matmul_biasadd_relu_fusion"], [117, 3, 1, "", "apply_the_transform"], [117, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[118, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling": [[118, 3, 1, "", "apply_the_transform"], [118, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[120, 2, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph": [[120, 3, 1, "", "do_transform"], [120, 3, 1, "", "get_quantized_nodes"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[121, 2, 1, "", "QuantizeGraphBase"], [121, 2, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase": [[121, 3, 1, "", "do_transform"], [121, 3, 1, "", "register_transformer"], [121, 3, 1, "", "remove_dead_nodes"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase": [[121, 3, 1, "", "add_output_graph_node"], [121, 3, 1, "", "apply_the_transform"], [121, 3, 1, "", "create_nodes_map"], [121, 3, 1, "", "eightbitize_single_input_tensor_node"], [121, 3, 1, "", "get_longest_fuse"], [121, 3, 1, "", "remove_redundant_quantization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[122, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3": [[122, 3, 1, "", "apply_newly_bn_leakyrelu_fusion"], [122, 3, 1, "", "apply_newly_bn_relu_fusion"], [122, 3, 1, "", "apply_the_transform"], [122, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[123, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2": [[123, 3, 1, "", "apply_the_transform"], [123, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[124, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d": [[124, 3, 1, "", "apply_conv_biasadd_addn_relu_fusion"], [124, 3, 1, "", "apply_conv_biasadd_fusion"], [124, 3, 1, "", "apply_conv_biasadd_relu_fusion"], [124, 3, 1, "", "apply_conv_single_fusion"], [124, 3, 1, "", "apply_the_transform"], [124, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[125, 2, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel": [[125, 3, 1, "", "do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[126, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul": [[126, 3, 1, "", "apply_matmul_biasadd_fusion"], [126, 3, 1, "", "apply_matmul_biasadd_relu_fusion"], [126, 3, 1, "", "apply_the_transform"], [126, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[127, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling": [[127, 3, 1, "", "apply_the_transform"], [127, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[128, 2, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper": [[128, 3, 1, "", "copy_attr"], [128, 3, 1, "", "create_constant_node"], [128, 3, 1, "", "create_node"], [128, 3, 1, "", "ensure_tensor_name_has_port"], [128, 3, 1, "", "generate_quantized_weight_node"], [128, 3, 1, "", "get_sorted_graph"], [128, 3, 1, "", "node_name_from_input"], [128, 3, 1, "", "remove_training_nodes"], [128, 3, 1, "", "set_attr_bool"], [128, 3, 1, "", "set_attr_dtype"], [128, 3, 1, "", "set_attr_float"], [128, 3, 1, "", "set_attr_int"], [128, 3, 1, "", "set_attr_string"], [128, 3, 1, "", "set_attr_string_list"], [128, 3, 1, "", "set_attr_tensor"], [128, 3, 1, "", "set_attr_type_list"], [128, 3, 1, "", "split_shared_inputs"], [128, 3, 1, "", "unique_node_name_from_input"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[129, 0, 0, "-", "bias_correction"], [130, 0, 0, "-", "graph_transform_base"], [132, 0, 0, "-", "insert_logging"], [133, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[129, 2, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection": [[129, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[130, 2, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase": [[130, 3, 1, "", "do_transformation"], [130, 3, 1, "", "generate_input_map"], [130, 3, 1, "", "get_node_name_from_input"], [130, 3, 1, "", "node_name_from_input"], [130, 3, 1, "", "parse_input_pb"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[132, 2, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging": [[132, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[133, 2, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat": [[133, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.util": [[134, 1, 1, "", "collate_tf_preds"], [134, 1, 1, "", "disable_random"], [134, 1, 1, "", "fix_ref_type_of_graph_def"], [134, 1, 1, "", "generate_feed_dict"], [134, 1, 1, "", "get_estimator_graph"], [134, 1, 1, "", "get_graph_def"], [134, 1, 1, "", "get_input_output_node_names"], [134, 1, 1, "", "get_model_input_shape"], [134, 1, 1, "", "get_tensor_by_name"], [134, 1, 1, "", "get_tensor_val_from_graph_node"], [134, 1, 1, "", "int8_node_name_reverse"], [134, 1, 1, "", "is_ckpt_format"], [134, 1, 1, "", "is_saved_model_format"], [134, 1, 1, "", "iterator_sess_run"], [134, 1, 1, "", "read_graph"], [134, 1, 1, "", "strip_equivalent_nodes"], [134, 1, 1, "", "strip_unused_nodes"], [134, 1, 1, "", "tf_diagnosis_helper"], [134, 1, 1, "", "version1_eq_version2"], [134, 1, 1, "", "version1_gt_version2"], [134, 1, 1, "", "version1_gte_version2"], [134, 1, 1, "", "version1_lt_version2"], [134, 1, 1, "", "version1_lte_version2"], [134, 1, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[135, 0, 0, "-", "bf16_convert"], [136, 0, 0, "-", "hawq_metric"], [138, 0, 0, "-", "onnx"], [139, 0, 0, "-", "smooth_quant"], [140, 0, 0, "-", "symbolic_trace"], [141, 0, 0, "-", "util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[135, 2, 1, "", "BF16ModuleWrapper"], [135, 1, 1, "", "Convert"], [135, 1, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper": [[135, 3, 1, "", "forward"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[136, 2, 1, "", "HessianTrace"], [136, 2, 1, "", "Node_collector"], [136, 1, 1, "", "compare_weights"], [136, 1, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace": [[136, 3, 1, "", "get_act_gap"], [136, 3, 1, "", "get_act_traces"], [136, 3, 1, "", "get_avg_traces"], [136, 3, 1, "", "get_device"], [136, 3, 1, "", "get_fused_mapping"], [136, 3, 1, "", "get_params"], [136, 3, 1, "", "get_vtHv_weight"], [136, 3, 1, "", "get_weight_traces"], [136, 3, 1, "", "is_fused_module"], [136, 3, 1, "", "mse_metric_gap"], [136, 3, 1, "", "register_act_grad_hooks"], [136, 3, 1, "", "reset_act_gradient_and_hooks"]], "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector": [[136, 3, 1, "", "hook_fn_act"], [136, 3, 1, "", "remove"]], "neural_compressor.adaptor.torch_utils.onnx": [[138, 2, 1, "", "DataReader"]], "neural_compressor.adaptor.torch_utils.onnx.DataReader": [[138, 3, 1, "", "get_next"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[139, 2, 1, "", "GraphTrace"], [139, 2, 1, "", "TorchSmoothQuant"]], "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant": [[139, 3, 1, "", "recover"], [139, 3, 1, "", "transform"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[140, 1, 1, "", "symbolic_trace"], [140, 1, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.util": [[141, 1, 1, "", "append_attr"], [141, 1, 1, "", "auto_copy"], [141, 1, 1, "", "check_cfg_and_qconfig"], [141, 1, 1, "", "collate_torch_preds"], [141, 1, 1, "", "fetch_module"], [141, 1, 1, "", "generate_activation_observer"], [141, 1, 1, "", "get_embedding_contiguous"], [141, 1, 1, "", "get_example_input"], [141, 1, 1, "", "get_fallback_order"], [141, 1, 1, "", "get_mse_order_per_fp32"], [141, 1, 1, "", "get_mse_order_per_int8"], [141, 1, 1, "", "get_quantizable_ops_from_cfgs"], [141, 1, 1, "", "get_torch_version"], [141, 1, 1, "", "input2tuple"], [141, 1, 1, "", "is_fused_module"], [141, 1, 1, "", "paser_cfgs"], [141, 1, 1, "", "set_module"], [141, 1, 1, "", "simple_inference"]], "neural_compressor.algorithm": [[144, 2, 1, "", "ALGORITHMS"], [144, 2, 1, "", "Algorithm"], [144, 2, 1, "", "AlgorithmScheduler"], [142, 0, 0, "-", "algorithm"], [144, 1, 1, "", "algorithm_registry"], [143, 0, 0, "-", "fast_bias_correction"], [145, 0, 0, "-", "smooth_quant"], [146, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.ALGORITHMS": [[144, 3, 1, "", "support_algorithms"]], "neural_compressor.algorithm.AlgorithmScheduler": [[144, 4, 1, "", "adaptor"], [144, 4, 1, "", "calib_iter"], [144, 4, 1, "", "dataloader"], [144, 4, 1, "", "origin_model"], [144, 4, 1, "", "q_model"]], "neural_compressor.algorithm.algorithm": [[142, 2, 1, "", "ALGORITHMS"], [142, 2, 1, "", "Algorithm"], [142, 2, 1, "", "AlgorithmScheduler"], [142, 1, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.algorithm.ALGORITHMS": [[142, 3, 1, "", "support_algorithms"]], "neural_compressor.algorithm.algorithm.AlgorithmScheduler": [[142, 4, 1, "", "adaptor"], [142, 4, 1, "", "calib_iter"], [142, 4, 1, "", "dataloader"], [142, 4, 1, "", "origin_model"], [142, 4, 1, "", "q_model"]], "neural_compressor.algorithm.fast_bias_correction": [[143, 2, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[145, 2, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[146, 2, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[147, 2, 1, "", "Benchmark"], [147, 1, 1, "", "fit"]], "neural_compressor.benchmark.Benchmark": [[147, 3, 1, "", "dataloader"], [147, 3, 1, "", "metric"], [147, 3, 1, "", "postprocess"]], "neural_compressor.conf": [[148, 0, 0, "-", "config"], [149, 0, 0, "-", "dotdict"], [151, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[148, 2, 1, "", "Benchmark_Conf"], [148, 2, 1, "", "Conf"], [148, 2, 1, "", "Distillation_Conf"], [148, 2, 1, "", "Graph_Optimization_Conf"], [148, 2, 1, "", "MixedPrecision_Conf"], [148, 2, 1, "", "NASConfig"], [148, 2, 1, "", "PrunerV2"], [148, 2, 1, "", "Pruning_Conf"], [148, 2, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[149, 2, 1, "", "DotDict"], [149, 1, 1, "", "deep_get"], [149, 1, 1, "", "deep_set"]], "neural_compressor.config": [[152, 2, 1, "", "AccuracyCriterion"], [152, 2, 1, "", "BenchmarkConfig"], [152, 2, 1, "", "DistillationConfig"], [152, 2, 1, "", "ExportConfig"], [152, 2, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [152, 2, 1, "", "KnowledgeDistillationLossConfig"], [152, 2, 1, "", "MixedPrecisionConfig"], [152, 2, 1, "", "ONNXQlinear2QDQConfig"], [152, 2, 1, "", "Options"], [152, 2, 1, "", "PostTrainingQuantConfig"], [152, 2, 1, "", "QuantizationAwareTrainingConfig"], [152, 2, 1, "", "SelfKnowledgeDistillationLossConfig"], [152, 2, 1, "", "TF2ONNXConfig"], [152, 2, 1, "", "Torch2ONNXConfig"], [152, 2, 1, "", "TuningCriterion"], [152, 2, 1, "", "WeightPruningConfig"], [152, 1, 1, "", "check_value"]], "neural_compressor.config.AccuracyCriterion": [[152, 4, 1, "", "absolute"], [152, 4, 1, "", "criterion"], [152, 4, 1, "", "higher_is_better"], [152, 4, 1, "", "relative"], [152, 4, 1, "", "tolerable_loss"]], "neural_compressor.config.BenchmarkConfig": [[152, 4, 1, "", "backend"], [152, 4, 1, "", "cores_per_instance"], [152, 4, 1, "", "inputs"], [152, 4, 1, "", "inter_num_of_threads"], [152, 4, 1, "", "intra_num_of_threads"], [152, 4, 1, "", "iteration"], [152, 4, 1, "", "num_of_instance"], [152, 4, 1, "", "outputs"], [152, 4, 1, "", "warmup"]], "neural_compressor.config.DistillationConfig": [[152, 4, 1, "", "criterion"], [152, 4, 1, "", "optimizer"], [152, 4, 1, "", "teacher_model"]], "neural_compressor.config.ExportConfig": [[152, 4, 1, "", "dtype"], [152, 4, 1, "", "dynamic_axes"], [152, 4, 1, "", "example_inputs"], [152, 4, 1, "", "input_names"], [152, 4, 1, "", "opset_version"], [152, 4, 1, "", "output_names"], [152, 4, 1, "", "quant_format"]], "neural_compressor.config.Options": [[152, 4, 1, "", "random_seed"], [152, 4, 1, "", "resume_from"], [152, 4, 1, "", "tensorboard"], [152, 4, 1, "", "workspace"]], "neural_compressor.config.PostTrainingQuantConfig": [[152, 4, 1, "", "approach"], [152, 4, 1, "", "tuning_criterion"]], "neural_compressor.config.QuantizationAwareTrainingConfig": [[152, 4, 1, "", "approach"]], "neural_compressor.config.TuningCriterion": [[152, 4, 1, "", "max_trials"], [152, 4, 1, "", "objective"], [152, 4, 1, "", "strategy"], [152, 4, 1, "", "strategy_kwargs"], [152, 4, 1, "", "timeout"]], "neural_compressor.config.WeightPruningConfig": [[152, 4, 1, "", "weight_compression"]], "neural_compressor.contrib": [[154, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[155, 0, 0, "-", "sigopt"], [156, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[155, 2, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy": [[155, 3, 1, "", "create_exp"], [155, 3, 1, "", "get_acc_target"], [155, 3, 1, "", "next_tune_cfg"], [155, 3, 1, "", "params_to_tune_configs"], [155, 3, 1, "", "traverse"]], "neural_compressor.contrib.strategy.tpe": [[156, 2, 1, "", "TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy": [[156, 3, 1, "", "add_loss_to_tuned_history_and_find_best"], [156, 3, 1, "", "calculate_loss"], [156, 3, 1, "", "object_evaluation"], [156, 3, 1, "", "stop"], [156, 3, 1, "", "traverse"]], "neural_compressor.data": [[178, 2, 1, "", "BaseTransform"], [178, 2, 1, "", "BilinearImagenetTransform"], [178, 2, 1, "", "COCORecordDataset"], [178, 2, 1, "", "ComposeTransform"], [178, 2, 1, "", "DataLoader"], [178, 2, 1, "", "Dataset"], [178, 2, 1, "", "Datasets"], [178, 2, 1, "", "DefaultDataLoader"], [178, 2, 1, "", "FILTERS"], [178, 2, 1, "", "Filter"], [178, 2, 1, "", "IterableDataset"], [178, 2, 1, "", "LabelBalanceCOCORecordFilter"], [178, 2, 1, "", "LabelShift"], [178, 2, 1, "", "NormalizeTFTransform"], [178, 2, 1, "", "ParseDecodeCocoTransform"], [178, 2, 1, "", "Postprocess"], [178, 2, 1, "", "RescaleTFTransform"], [178, 2, 1, "", "ResizeTFTransform"], [178, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [178, 2, 1, "", "TFSquadV1PostTransform"], [178, 2, 1, "", "TRANSFORMS"], [178, 2, 1, "", "TensorflowImageRecord"], [178, 2, 1, "", "TensorflowResizeCropImagenetTransform"], [178, 2, 1, "", "TensorflowResizeWithRatio"], [161, 0, 0, "-", "dataloaders"], [178, 1, 1, "", "dataset_registry"], [173, 0, 0, "-", "datasets"], [178, 1, 1, "", "filter_registry"], [177, 0, 0, "-", "filters"], [178, 1, 1, "", "transform_registry"], [181, 0, 0, "-", "transforms"]], "neural_compressor.data.DefaultDataLoader": [[178, 3, 1, "", "batch"], [178, 4, 1, "", "dataloader"]], "neural_compressor.data.TFSquadV1PostTransform": [[178, 3, 1, "", "get_postprocess_result"], [178, 3, 1, "", "process_result"]], "neural_compressor.data.TRANSFORMS": [[178, 3, 1, "", "register"]], "neural_compressor.data.dataloaders": [[161, 2, 1, "", "DataLoader"], [157, 0, 0, "-", "base_dataloader"], [158, 0, 0, "-", "dataloader"], [159, 0, 0, "-", "default_dataloader"], [160, 0, 0, "-", "fetcher"], [162, 0, 0, "-", "mxnet_dataloader"], [163, 0, 0, "-", "onnxrt_dataloader"], [164, 0, 0, "-", "pytorch_dataloader"], [165, 0, 0, "-", "sampler"], [166, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[157, 2, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader": [[157, 3, 1, "", "batch"], [157, 4, 1, "", "batch_size"]], "neural_compressor.data.dataloaders.dataloader": [[158, 2, 1, "", "DataLoader"]], "neural_compressor.data.dataloaders.default_dataloader": [[159, 2, 1, "", "DefaultDataLoader"], [159, 1, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader": [[159, 3, 1, "", "batch"], [159, 4, 1, "", "dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[160, 2, 1, "", "Fetcher"], [160, 2, 1, "", "IndexFetcher"], [160, 2, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[162, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[163, 2, 1, "", "ONNXRTBertDataLoader"], [163, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[164, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[165, 2, 1, "", "BatchSampler"], [165, 2, 1, "", "IterableSampler"], [165, 2, 1, "", "Sampler"], [165, 2, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[166, 2, 1, "", "TFDataDataLoader"], [166, 2, 1, "", "TensorflowBertDataLoader"], [166, 2, 1, "", "TensorflowDataLoader"], [166, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader": [[166, 3, 1, "", "batch"]], "neural_compressor.data.datasets": [[173, 2, 1, "", "COCORecordDataset"], [173, 2, 1, "", "Dataset"], [173, 2, 1, "", "Datasets"], [173, 2, 1, "", "IterableDataset"], [173, 2, 1, "", "TensorflowImageRecord"], [167, 0, 0, "-", "bert_dataset"], [168, 0, 0, "-", "coco_dataset"], [169, 0, 0, "-", "dataset"], [173, 1, 1, "", "dataset_registry"], [170, 0, 0, "-", "dummy_dataset"], [171, 0, 0, "-", "dummy_dataset_v2"], [172, 0, 0, "-", "imagenet_dataset"], [174, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[167, 2, 1, "", "InputFeatures"], [167, 2, 1, "", "ONNXRTBertDataset"], [167, 2, 1, "", "ParseDecodeBert"], [167, 2, 1, "", "PytorchBertDataset"], [167, 2, 1, "", "TensorflowBertDataset"], [167, 2, 1, "", "TensorflowModelZooBertDataset"], [167, 1, 1, "", "convert_examples_to_features"], [167, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset.InputFeatures": [[167, 3, 1, "", "to_json_string"]], "neural_compressor.data.datasets.coco_dataset": [[168, 2, 1, "", "COCONpy"], [168, 2, 1, "", "COCORaw"], [168, 2, 1, "", "COCORecordDataset"], [168, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[169, 2, 1, "", "CIFAR10"], [169, 2, 1, "", "CIFAR100"], [169, 2, 1, "", "Dataset"], [169, 2, 1, "", "Datasets"], [169, 2, 1, "", "FashionMNIST"], [169, 2, 1, "", "ImageFolder"], [169, 2, 1, "", "IterableDataset"], [169, 2, 1, "", "MNIST"], [169, 2, 1, "", "MXNetCIFAR10"], [169, 2, 1, "", "MXNetCIFAR100"], [169, 2, 1, "", "MXNetDatasets"], [169, 2, 1, "", "MXNetFashionMNIST"], [169, 2, 1, "", "MXNetImageFolder"], [169, 2, 1, "", "MXNetMNIST"], [169, 2, 1, "", "ONNXRTITDatasets"], [169, 2, 1, "", "ONNXRTQLDatasets"], [169, 2, 1, "", "PyTorchDatasets"], [169, 2, 1, "", "PytorchCIFAR10"], [169, 2, 1, "", "PytorchCIFAR100"], [169, 2, 1, "", "PytorchFashionMNIST"], [169, 2, 1, "", "PytorchMNIST"], [169, 2, 1, "", "PytorchMxnetWrapDataset"], [169, 2, 1, "", "PytorchMxnetWrapFunction"], [169, 2, 1, "", "Tensorflow"], [169, 2, 1, "", "TensorflowCIFAR10"], [169, 2, 1, "", "TensorflowCIFAR100"], [169, 2, 1, "", "TensorflowDatasets"], [169, 2, 1, "", "TensorflowFashionMNIST"], [169, 2, 1, "", "TensorflowImageRecord"], [169, 2, 1, "", "TensorflowMNIST"], [169, 2, 1, "", "TensorflowTFRecordDataset"], [169, 2, 1, "", "TensorflowVOCRecord"], [169, 1, 1, "", "calculate_md5"], [169, 1, 1, "", "check_integrity"], [169, 1, 1, "", "dataset_registry"], [169, 1, 1, "", "download_url"], [169, 5, 1, "", "framework_datasets"], [169, 1, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dataset.CIFAR10": [[169, 3, 1, "", "download"], [169, 3, 1, "", "load_meta"]], "neural_compressor.data.datasets.dataset.FashionMNIST": [[169, 3, 1, "", "read_data"]], "neural_compressor.data.datasets.dataset.MNIST": [[169, 4, 1, "", "class_to_idx"], [169, 3, 1, "", "download"], [169, 3, 1, "", "read_data"]], "neural_compressor.data.datasets.dummy_dataset": [[170, 2, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[171, 2, 1, "", "DummyDataset"], [171, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[172, 2, 1, "", "ImagenetRaw"], [172, 2, 1, "", "MXNetImagenetRaw"], [172, 2, 1, "", "ONNXRTImagenetDataset"], [172, 2, 1, "", "PytorchImagenetRaw"], [172, 2, 1, "", "TensorflowImagenetDataset"], [172, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[174, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[177, 2, 1, "", "FILTERS"], [177, 2, 1, "", "Filter"], [177, 2, 1, "", "LabelBalanceCOCORecordFilter"], [175, 0, 0, "-", "coco_filter"], [176, 0, 0, "-", "filter"], [177, 1, 1, "", "filter_registry"]], "neural_compressor.data.filters.coco_filter": [[175, 2, 1, "", "LabelBalanceCOCORawFilter"], [175, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[176, 2, 1, "", "FILTERS"], [176, 2, 1, "", "Filter"], [176, 2, 1, "", "MXNetFilters"], [176, 2, 1, "", "ONNXRTITFilters"], [176, 2, 1, "", "ONNXRTQLFilters"], [176, 2, 1, "", "PyTorchFilters"], [176, 2, 1, "", "TensorflowFilters"], [176, 1, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[181, 2, 1, "", "BaseTransform"], [181, 2, 1, "", "BilinearImagenetTransform"], [181, 2, 1, "", "ComposeTransform"], [181, 2, 1, "", "LabelShift"], [181, 2, 1, "", "NormalizeTFTransform"], [181, 2, 1, "", "ParseDecodeCocoTransform"], [181, 2, 1, "", "Postprocess"], [181, 2, 1, "", "RescaleTFTransform"], [181, 2, 1, "", "ResizeTFTransform"], [181, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [181, 2, 1, "", "TFSquadV1PostTransform"], [181, 2, 1, "", "TRANSFORMS"], [181, 2, 1, "", "TensorflowResizeCropImagenetTransform"], [181, 2, 1, "", "TensorflowResizeWithRatio"], [179, 0, 0, "-", "coco_transform"], [180, 0, 0, "-", "imagenet_transform"], [182, 0, 0, "-", "postprocess"], [183, 0, 0, "-", "tokenization"], [184, 0, 0, "-", "transform"], [181, 1, 1, "", "transform_registry"]], "neural_compressor.data.transforms.TFSquadV1PostTransform": [[181, 3, 1, "", "get_postprocess_result"], [181, 3, 1, "", "process_result"]], "neural_compressor.data.transforms.TRANSFORMS": [[181, 3, 1, "", "register"]], "neural_compressor.data.transforms.coco_transform": [[179, 2, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[180, 2, 1, "", "BilinearImagenetTransform"], [180, 2, 1, "", "LabelShift"], [180, 2, 1, "", "ONNXResizeCropImagenetTransform"], [180, 2, 1, "", "OnnxBilinearImagenetTransform"], [180, 2, 1, "", "ParseDecodeImagenet"], [180, 2, 1, "", "ParseDecodeImagenetTransform"], [180, 2, 1, "", "QuantizedInput"], [180, 2, 1, "", "ResizeWithAspectRatio"], [180, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.postprocess": [[182, 2, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[183, 2, 1, "", "BasicTokenizer"], [183, 2, 1, "", "FullTokenizer"], [183, 2, 1, "", "WordpieceTokenizer"], [183, 1, 1, "", "convert_by_vocab"], [183, 1, 1, "", "convert_to_unicode"], [183, 1, 1, "", "load_vocab"], [183, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.tokenization.BasicTokenizer": [[183, 3, 1, "", "tokenize"]], "neural_compressor.data.transforms.tokenization.FullTokenizer": [[183, 3, 1, "", "convert_ids_to_tokens"], [183, 3, 1, "", "convert_tokens_to_ids"], [183, 3, 1, "", "tokenize"]], "neural_compressor.data.transforms.tokenization.WordpieceTokenizer": [[183, 3, 1, "", "tokenize"]], "neural_compressor.data.transforms.transform": [[184, 2, 1, "", "AlignImageChannelTransform"], [184, 2, 1, "", "BaseTransform"], [184, 2, 1, "", "CastONNXTransform"], [184, 2, 1, "", "CastPyTorchTransform"], [184, 2, 1, "", "CastTFTransform"], [184, 2, 1, "", "CenterCropTFTransform"], [184, 2, 1, "", "CenterCropTransform"], [184, 2, 1, "", "CollectTransform"], [184, 2, 1, "", "ComposeTransform"], [184, 2, 1, "", "CropResizeTFTransform"], [184, 2, 1, "", "CropResizeTransform"], [184, 2, 1, "", "CropToBoundingBox"], [184, 2, 1, "", "InputFeatures"], [184, 2, 1, "", "MXNetCropResizeTransform"], [184, 2, 1, "", "MXNetCropToBoundingBox"], [184, 2, 1, "", "MXNetNormalizeTransform"], [184, 2, 1, "", "MXNetTransforms"], [184, 2, 1, "", "MXNetTranspose"], [184, 2, 1, "", "NormalizeTFTransform"], [184, 2, 1, "", "NormalizeTransform"], [184, 2, 1, "", "ONNXRTCropToBoundingBox"], [184, 2, 1, "", "ONNXRTITTransforms"], [184, 2, 1, "", "ONNXRTQLTransforms"], [184, 2, 1, "", "PaddedCenterCropTransform"], [184, 2, 1, "", "ParseDecodeVocTransform"], [184, 2, 1, "", "PyTorchAlignImageChannel"], [184, 2, 1, "", "PyTorchCropResizeTransform"], [184, 2, 1, "", "PyTorchNormalizeTransform"], [184, 2, 1, "", "PyTorchTransforms"], [184, 2, 1, "", "PyTorchTranspose"], [184, 2, 1, "", "PytorchMxnetTransform"], [184, 2, 1, "", "PytorchMxnetWrapFunction"], [184, 2, 1, "", "RandomCropTFTransform"], [184, 2, 1, "", "RandomCropTransform"], [184, 2, 1, "", "RandomHorizontalFlip"], [184, 2, 1, "", "RandomResizedCropMXNetTransform"], [184, 2, 1, "", "RandomResizedCropPytorchTransform"], [184, 2, 1, "", "RandomResizedCropTFTransform"], [184, 2, 1, "", "RandomResizedCropTransform"], [184, 2, 1, "", "RandomVerticalFlip"], [184, 2, 1, "", "RescaleKerasPretrainTransform"], [184, 2, 1, "", "RescaleTFTransform"], [184, 2, 1, "", "RescaleTransform"], [184, 2, 1, "", "ResizeMXNetTransform"], [184, 2, 1, "", "ResizePytorchTransform"], [184, 2, 1, "", "ResizeTFTransform"], [184, 2, 1, "", "ResizeTransform"], [184, 2, 1, "", "ResizeWithRatio"], [184, 2, 1, "", "SquadExample"], [184, 2, 1, "", "TFModelZooCollectTransform"], [184, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [184, 2, 1, "", "TFSquadV1PostTransform"], [184, 2, 1, "", "TRANSFORMS"], [184, 2, 1, "", "TensorflowCropToBoundingBox"], [184, 2, 1, "", "TensorflowRandomHorizontalFlip"], [184, 2, 1, "", "TensorflowRandomVerticalFlip"], [184, 2, 1, "", "TensorflowResizeWithRatio"], [184, 2, 1, "", "TensorflowTransform"], [184, 2, 1, "", "TensorflowTransforms"], [184, 2, 1, "", "TensorflowTranspose"], [184, 2, 1, "", "TensorflowWrapFunction"], [184, 2, 1, "", "ToArray"], [184, 2, 1, "", "ToNDArrayTransform"], [184, 2, 1, "", "Transforms"], [184, 2, 1, "", "Transpose"], [184, 1, 1, "", "convert_examples_to_features"], [184, 1, 1, "", "get_final_text"], [184, 1, 1, "", "get_torchvision_map"], [184, 1, 1, "", "read_squad_examples"], [184, 1, 1, "", "transform_registry"]], "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform": [[184, 3, 1, "", "get_params"]], "neural_compressor.data.transforms.transform.RandomResizedCropTransform": [[184, 3, 1, "", "get_params"]], "neural_compressor.data.transforms.transform.TFSquadV1PostTransform": [[184, 3, 1, "", "get_postprocess_result"], [184, 3, 1, "", "process_result"]], "neural_compressor.data.transforms.transform.TRANSFORMS": [[184, 3, 1, "", "register"]], "neural_compressor.experimental": [[227, 2, 1, "", "Benchmark"], [227, 2, 1, "", "Component"], [227, 2, 1, "", "Distillation"], [227, 2, 1, "", "Graph_Optimization"], [227, 2, 1, "", "MixedPrecision"], [227, 2, 1, "", "ModelConversion"], [227, 2, 1, "", "NAS"], [227, 2, 1, "", "Pruning"], [227, 2, 1, "", "Quantization"], [185, 0, 0, "-", "benchmark"], [188, 0, 0, "-", "common"], [194, 0, 0, "-", "component"], [216, 0, 0, "-", "data"], [221, 0, 0, "-", "distillation"], [222, 0, 0, "-", "export"], [226, 0, 0, "-", "graph_optimization"], [234, 0, 0, "-", "metric"], [236, 0, 0, "-", "mixed_precision"], [237, 0, 0, "-", "model_conversion"], [250, 0, 0, "-", "nas"], [254, 0, 0, "-", "pruning"], [255, 0, 0, "-", "pruning_recipes"], [259, 0, 0, "-", "pruning_v2"], [260, 0, 0, "-", "pytorch_pruner"], [267, 0, 0, "-", "quantization"], [268, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.Benchmark": [[227, 4, 1, "", "b_dataloader"], [227, 4, 1, "", "b_func"], [227, 3, 1, "", "config_instance"], [227, 3, 1, "", "generate_prefix"], [227, 4, 1, "", "metric"], [227, 4, 1, "", "model"], [227, 4, 1, "", "postprocess"], [227, 4, 1, "", "results"], [227, 3, 1, "", "run_instance"], [227, 3, 1, "", "summary_benchmark"]], "neural_compressor.experimental.Component": [[227, 4, 1, "", "eval_dataloader"], [227, 4, 1, "", "eval_func"], [227, 3, 1, "", "execute"], [227, 4, 1, "", "model"], [227, 3, 1, "", "on_after_compute_loss"], [227, 3, 1, "", "on_after_eval"], [227, 3, 1, "", "on_after_optimizer_step"], [227, 3, 1, "", "on_batch_begin"], [227, 3, 1, "", "on_batch_end"], [227, 3, 1, "", "on_before_eval"], [227, 3, 1, "", "on_before_optimizer_step"], [227, 3, 1, "", "on_epoch_begin"], [227, 3, 1, "", "on_epoch_end"], [227, 3, 1, "", "on_post_grad"], [227, 3, 1, "", "on_step_begin"], [227, 3, 1, "", "on_step_end"], [227, 3, 1, "", "on_train_begin"], [227, 3, 1, "", "on_train_end"], [227, 3, 1, "", "post_epoch_end"], [227, 3, 1, "", "post_process"], [227, 3, 1, "", "pre_epoch_begin"], [227, 3, 1, "", "pre_process"], [227, 3, 1, "", "prepare"], [227, 3, 1, "", "prepare_qat"], [227, 3, 1, "", "register_hook"], [227, 4, 1, "", "train_dataloader"], [227, 4, 1, "", "train_func"]], "neural_compressor.experimental.Distillation": [[227, 6, 1, "", "_epoch_ran"], [227, 6, 1, "", "best_model"], [227, 6, 1, "", "best_score"], [227, 3, 1, "", "create_criterion"], [227, 3, 1, "", "create_optimizer"], [227, 4, 1, "", "criterion"], [227, 6, 1, "", "eval_frequency"], [227, 4, 1, "", "evaluation_distributed"], [227, 3, 1, "", "execute"], [227, 3, 1, "", "generate_hooks"], [227, 3, 1, "", "init_train_cfg"], [227, 3, 1, "", "on_post_forward"], [227, 4, 1, "", "optimizer"], [227, 3, 1, "", "pre_process"], [227, 3, 1, "", "prepare"], [227, 4, 1, "", "student_model"], [227, 4, 1, "", "teacher_model"], [227, 4, 1, "", "train_cfg"], [227, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.Graph_Optimization": [[227, 3, 1, "", "dataset"], [227, 4, 1, "", "eval_dataloader"], [227, 4, 1, "", "eval_func"], [227, 4, 1, "", "input"], [227, 4, 1, "", "metric"], [227, 4, 1, "", "model"], [227, 4, 1, "", "output"], [227, 4, 1, "", "postprocess"], [227, 4, 1, "", "precisions"], [227, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.MixedPrecision": [[227, 4, 1, "", "precisions"], [227, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.ModelConversion": [[227, 3, 1, "", "dataset"], [227, 4, 1, "", "destination"], [227, 4, 1, "", "eval_dataloader"], [227, 4, 1, "", "eval_func"], [227, 4, 1, "", "metric"], [227, 4, 1, "", "model"], [227, 4, 1, "", "postprocess"], [227, 4, 1, "", "source"]], "neural_compressor.experimental.Pruning": [[227, 6, 1, "", "conf"], [227, 4, 1, "", "evaluation_distributed"], [227, 3, 1, "", "execute"], [227, 3, 1, "", "generate_hooks"], [227, 3, 1, "", "generate_pruners"], [227, 3, 1, "", "get_sparsity_ratio"], [227, 3, 1, "", "pre_process"], [227, 3, 1, "", "prepare"], [227, 6, 1, "", "pruners"], [227, 4, 1, "", "pruning_func"], [227, 4, 1, "", "train_distributed"], [227, 3, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.Quantization": [[227, 4, 1, "", "calib_dataloader"], [227, 3, 1, "", "dataset"], [227, 3, 1, "", "distributed_execute"], [227, 3, 1, "", "execute"], [227, 4, 1, "", "metric"], [227, 4, 1, "", "model"], [227, 4, 1, "", "objective"], [227, 4, 1, "", "postprocess"], [227, 3, 1, "", "pre_process"], [227, 4, 1, "", "q_func"]], "neural_compressor.experimental.benchmark": [[185, 2, 1, "", "Benchmark"], [185, 1, 1, "", "get_architecture"], [185, 1, 1, "", "get_bounded_threads"], [185, 1, 1, "", "get_core_ids"], [185, 1, 1, "", "get_physical_ids"], [185, 1, 1, "", "get_threads"], [185, 1, 1, "", "get_threads_per_core"], [185, 1, 1, "", "set_all_env_var"], [185, 1, 1, "", "set_env_var"]], "neural_compressor.experimental.benchmark.Benchmark": [[185, 4, 1, "", "b_dataloader"], [185, 4, 1, "", "b_func"], [185, 3, 1, "", "config_instance"], [185, 3, 1, "", "generate_prefix"], [185, 4, 1, "", "metric"], [185, 4, 1, "", "model"], [185, 4, 1, "", "postprocess"], [185, 4, 1, "", "results"], [185, 3, 1, "", "run_instance"], [185, 3, 1, "", "summary_benchmark"]], "neural_compressor.experimental.common": [[188, 2, 1, "", "DataLoader"], [188, 2, 1, "", "Metric"], [188, 2, 1, "", "Model"], [188, 2, 1, "", "Postprocess"], [186, 0, 0, "-", "criterion"], [187, 0, 0, "-", "dataloader"], [189, 0, 0, "-", "metric"], [190, 0, 0, "-", "model"], [191, 0, 0, "-", "optimizer"], [192, 0, 0, "-", "postprocess"], [193, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[186, 2, 1, "", "Criterions"], [186, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [186, 2, 1, "", "KnowledgeDistillationFramework"], [186, 2, 1, "", "KnowledgeDistillationLoss"], [186, 2, 1, "", "PyTorchCriterions"], [186, 2, 1, "", "PyTorchCrossEntropyLoss"], [186, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [186, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [186, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [186, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [186, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [186, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [186, 2, 1, "", "SelfKnowledgeDistillationLoss"], [186, 2, 1, "", "TensorFlowCrossEntropyLoss"], [186, 2, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [186, 2, 1, "", "TensorflowCriterions"], [186, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [186, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [186, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [186, 1, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.criterion.Criterions": [[186, 3, 1, "", "register"]], "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss": [[186, 3, 1, "", "clear_features"], [186, 3, 1, "", "init_feature_matcher"], [186, 3, 1, "", "init_loss_funcs"], [186, 3, 1, "", "loss_cal"], [186, 3, 1, "", "loss_cal_sloss"], [186, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework": [[186, 4, 1, "", "student_model"], [186, 4, 1, "", "teacher_model"]], "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss": [[186, 3, 1, "", "loss_cal"], [186, 3, 1, "", "loss_cal_sloss"], [186, 3, 1, "", "student_targets_loss_cal"], [186, 3, 1, "", "teacher_model_forward"], [186, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss": [[186, 3, 1, "", "init_feature_matcher"], [186, 3, 1, "", "init_loss_funcs"], [186, 3, 1, "", "loss_cal"], [186, 3, 1, "", "loss_cal_sloss"], [186, 3, 1, "", "register_hooks_for_models"], [186, 3, 1, "", "remove_all_hooks"], [186, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss": [[186, 3, 1, "", "KullbackLeiblerDivergence"], [186, 3, 1, "", "SoftCrossEntropy"], [186, 3, 1, "", "student_targets_loss_cal"], [186, 3, 1, "", "teacher_model_forward"], [186, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss": [[186, 3, 1, "", "KullbackLeiblerDivergence"], [186, 3, 1, "", "L2Divergence"], [186, 3, 1, "", "SoftCrossEntropy"], [186, 3, 1, "", "init_loss_funcs"], [186, 3, 1, "", "loss_cal"], [186, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss": [[186, 3, 1, "", "init_loss_funcs"], [186, 3, 1, "", "loss_cal"], [186, 3, 1, "", "loss_cal_sloss"], [186, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss": [[186, 3, 1, "", "SoftCrossEntropy"], [186, 3, 1, "", "student_targets_loss_cal"], [186, 3, 1, "", "teacher_model_forward"], [186, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal": [[186, 3, 1, "", "student_targets_loss_cal"], [186, 3, 1, "", "teacher_model_forward"], [186, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.dataloader": [[187, 2, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[189, 2, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[190, 2, 1, "", "Model"], [190, 1, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[191, 2, 1, "", "Optimizers"], [191, 2, 1, "", "PyTorchOptimizers"], [191, 2, 1, "", "PyTorchSGD"], [191, 2, 1, "", "TensorFlowAdam"], [191, 2, 1, "", "TensorFlowAdamW"], [191, 2, 1, "", "TensorFlowSGD"], [191, 2, 1, "", "TensorflowOptimizers"], [191, 1, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.optimizer.Optimizers": [[191, 3, 1, "", "register"]], "neural_compressor.experimental.common.postprocess": [[192, 2, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[193, 1, 1, "", "get_activation"], [193, 1, 1, "", "record_output"]], "neural_compressor.experimental.component": [[194, 2, 1, "", "Component"]], "neural_compressor.experimental.component.Component": [[194, 4, 1, "", "eval_dataloader"], [194, 4, 1, "", "eval_func"], [194, 3, 1, "", "execute"], [194, 4, 1, "", "model"], [194, 3, 1, "", "on_after_compute_loss"], [194, 3, 1, "", "on_after_eval"], [194, 3, 1, "", "on_after_optimizer_step"], [194, 3, 1, "", "on_batch_begin"], [194, 3, 1, "", "on_batch_end"], [194, 3, 1, "", "on_before_eval"], [194, 3, 1, "", "on_before_optimizer_step"], [194, 3, 1, "", "on_epoch_begin"], [194, 3, 1, "", "on_epoch_end"], [194, 3, 1, "", "on_post_grad"], [194, 3, 1, "", "on_step_begin"], [194, 3, 1, "", "on_step_end"], [194, 3, 1, "", "on_train_begin"], [194, 3, 1, "", "on_train_end"], [194, 3, 1, "", "post_epoch_end"], [194, 3, 1, "", "post_process"], [194, 3, 1, "", "pre_epoch_begin"], [194, 3, 1, "", "pre_process"], [194, 3, 1, "", "prepare"], [194, 3, 1, "", "prepare_qat"], [194, 3, 1, "", "register_hook"], [194, 4, 1, "", "train_dataloader"], [194, 4, 1, "", "train_func"]], "neural_compressor.experimental.data": [[216, 2, 1, "", "BaseTransform"], [216, 2, 1, "", "Dataset"], [216, 2, 1, "", "Datasets"], [216, 2, 1, "", "FILTERS"], [216, 2, 1, "", "Filter"], [216, 2, 1, "", "IterableDataset"], [216, 2, 1, "", "TRANSFORMS"], [199, 0, 0, "-", "dataloaders"], [216, 1, 1, "", "dataset_registry"], [211, 0, 0, "-", "datasets"], [216, 1, 1, "", "filter_registry"], [215, 0, 0, "-", "filters"], [216, 1, 1, "", "transform_registry"], [218, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.TRANSFORMS": [[216, 3, 1, "", "register"]], "neural_compressor.experimental.data.dataloaders": [[195, 0, 0, "-", "base_dataloader"], [196, 0, 0, "-", "dataloader"], [197, 0, 0, "-", "default_dataloader"], [198, 0, 0, "-", "fetcher"], [200, 0, 0, "-", "mxnet_dataloader"], [201, 0, 0, "-", "onnxrt_dataloader"], [202, 0, 0, "-", "pytorch_dataloader"], [203, 0, 0, "-", "sampler"], [204, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[195, 2, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader": [[195, 3, 1, "", "batch"], [195, 4, 1, "", "batch_size"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[197, 2, 1, "", "DefaultDataLoader"], [197, 1, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader": [[197, 3, 1, "", "batch"], [197, 4, 1, "", "dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[198, 2, 1, "", "Fetcher"], [198, 2, 1, "", "IndexFetcher"], [198, 2, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[200, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[201, 2, 1, "", "ONNXRTBertDataLoader"], [201, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[202, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[203, 2, 1, "", "BatchSampler"], [203, 2, 1, "", "IterableSampler"], [203, 2, 1, "", "Sampler"], [203, 2, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[204, 2, 1, "", "TFDataDataLoader"], [204, 2, 1, "", "TensorflowBertDataLoader"], [204, 2, 1, "", "TensorflowDataLoader"], [204, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader": [[204, 3, 1, "", "batch"]], "neural_compressor.experimental.data.datasets": [[211, 2, 1, "", "Dataset"], [211, 2, 1, "", "Datasets"], [211, 2, 1, "", "IterableDataset"], [205, 0, 0, "-", "bert_dataset"], [206, 0, 0, "-", "coco_dataset"], [207, 0, 0, "-", "dataset"], [211, 1, 1, "", "dataset_registry"], [208, 0, 0, "-", "dummy_dataset"], [209, 0, 0, "-", "dummy_dataset_v2"], [210, 0, 0, "-", "imagenet_dataset"], [212, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[205, 2, 1, "", "InputFeatures"], [205, 2, 1, "", "ONNXRTBertDataset"], [205, 2, 1, "", "ParseDecodeBert"], [205, 2, 1, "", "PytorchBertDataset"], [205, 2, 1, "", "TensorflowBertDataset"], [205, 2, 1, "", "TensorflowModelZooBertDataset"], [205, 1, 1, "", "convert_examples_to_features"], [205, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures": [[205, 3, 1, "", "to_json_string"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[206, 2, 1, "", "COCONpy"], [206, 2, 1, "", "COCORaw"], [206, 2, 1, "", "COCORecordDataset"], [206, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[207, 2, 1, "", "CIFAR10"], [207, 2, 1, "", "CIFAR100"], [207, 2, 1, "", "Dataset"], [207, 2, 1, "", "Datasets"], [207, 2, 1, "", "FashionMNIST"], [207, 2, 1, "", "ImageFolder"], [207, 2, 1, "", "IterableDataset"], [207, 2, 1, "", "MNIST"], [207, 2, 1, "", "MXNetCIFAR10"], [207, 2, 1, "", "MXNetCIFAR100"], [207, 2, 1, "", "MXNetDatasets"], [207, 2, 1, "", "MXNetFashionMNIST"], [207, 2, 1, "", "MXNetImageFolder"], [207, 2, 1, "", "MXNetMNIST"], [207, 2, 1, "", "ONNXRTITDatasets"], [207, 2, 1, "", "ONNXRTQLDatasets"], [207, 2, 1, "", "PyTorchDatasets"], [207, 2, 1, "", "PytorchCIFAR10"], [207, 2, 1, "", "PytorchCIFAR100"], [207, 2, 1, "", "PytorchFashionMNIST"], [207, 2, 1, "", "PytorchMNIST"], [207, 2, 1, "", "PytorchMxnetWrapDataset"], [207, 2, 1, "", "PytorchMxnetWrapFunction"], [207, 2, 1, "", "TensorflowCIFAR10"], [207, 2, 1, "", "TensorflowCIFAR100"], [207, 2, 1, "", "TensorflowDatasets"], [207, 2, 1, "", "TensorflowFashionMNIST"], [207, 2, 1, "", "TensorflowImageFolder"], [207, 2, 1, "", "TensorflowImageRecord"], [207, 2, 1, "", "TensorflowMNIST"], [207, 2, 1, "", "TensorflowTFRecordDataset"], [207, 2, 1, "", "TensorflowVOCRecord"], [207, 1, 1, "", "calculate_md5"], [207, 1, 1, "", "check_integrity"], [207, 1, 1, "", "dataset_registry"], [207, 1, 1, "", "download_url"], [207, 5, 1, "", "framework_datasets"], [207, 1, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset.CIFAR10": [[207, 3, 1, "", "download"], [207, 3, 1, "", "load_meta"]], "neural_compressor.experimental.data.datasets.dataset.FashionMNIST": [[207, 3, 1, "", "read_data"]], "neural_compressor.experimental.data.datasets.dataset.MNIST": [[207, 4, 1, "", "class_to_idx"], [207, 3, 1, "", "download"], [207, 3, 1, "", "read_data"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[208, 2, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[209, 2, 1, "", "DummyDataset"], [209, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[210, 2, 1, "", "ImagenetRaw"], [210, 2, 1, "", "MXNetImagenetRaw"], [210, 2, 1, "", "ONNXRTImagenetDataset"], [210, 2, 1, "", "PytorchImagenetRaw"], [210, 2, 1, "", "TensorflowImagenetDataset"], [210, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[212, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[215, 2, 1, "", "FILTERS"], [215, 2, 1, "", "Filter"], [213, 0, 0, "-", "coco_filter"], [214, 0, 0, "-", "filter"], [215, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.filters.coco_filter": [[213, 2, 1, "", "LabelBalanceCOCORawFilter"], [213, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[214, 2, 1, "", "FILTERS"], [214, 2, 1, "", "Filter"], [214, 2, 1, "", "MXNetFilters"], [214, 2, 1, "", "ONNXRTITFilters"], [214, 2, 1, "", "ONNXRTQLFilters"], [214, 2, 1, "", "PyTorchFilters"], [214, 2, 1, "", "TensorflowFilters"], [214, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[218, 2, 1, "", "BaseTransform"], [218, 2, 1, "", "TRANSFORMS"], [217, 0, 0, "-", "imagenet_transform"], [219, 0, 0, "-", "tokenization"], [220, 0, 0, "-", "transform"], [218, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.data.transforms.TRANSFORMS": [[218, 3, 1, "", "register"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[217, 2, 1, "", "BilinearImagenetTransform"], [217, 2, 1, "", "LabelShift"], [217, 2, 1, "", "ONNXResizeCropImagenetTransform"], [217, 2, 1, "", "OnnxBilinearImagenetTransform"], [217, 2, 1, "", "ParseDecodeImagenet"], [217, 2, 1, "", "ParseDecodeImagenetTransform"], [217, 2, 1, "", "QuantizedInput"], [217, 2, 1, "", "ResizeWithAspectRatio"], [217, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[219, 2, 1, "", "BasicTokenizer"], [219, 2, 1, "", "FullTokenizer"], [219, 2, 1, "", "WordpieceTokenizer"], [219, 1, 1, "", "convert_by_vocab"], [219, 1, 1, "", "convert_to_unicode"], [219, 1, 1, "", "load_vocab"], [219, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer": [[219, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer": [[219, 3, 1, "", "convert_ids_to_tokens"], [219, 3, 1, "", "convert_tokens_to_ids"], [219, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer": [[219, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[220, 2, 1, "", "AlignImageChannelTransform"], [220, 2, 1, "", "BaseTransform"], [220, 2, 1, "", "CastONNXTransform"], [220, 2, 1, "", "CastPyTorchTransform"], [220, 2, 1, "", "CastTFTransform"], [220, 2, 1, "", "CenterCropTFTransform"], [220, 2, 1, "", "CenterCropTransform"], [220, 2, 1, "", "CollectTransform"], [220, 2, 1, "", "ComposeTransform"], [220, 2, 1, "", "CropResizeTFTransform"], [220, 2, 1, "", "CropResizeTransform"], [220, 2, 1, "", "CropToBoundingBox"], [220, 2, 1, "", "InputFeatures"], [220, 2, 1, "", "MXNetCropResizeTransform"], [220, 2, 1, "", "MXNetCropToBoundingBox"], [220, 2, 1, "", "MXNetNormalizeTransform"], [220, 2, 1, "", "MXNetTransforms"], [220, 2, 1, "", "MXNetTranspose"], [220, 2, 1, "", "NormalizeTFTransform"], [220, 2, 1, "", "NormalizeTransform"], [220, 2, 1, "", "ONNXRTCropToBoundingBox"], [220, 2, 1, "", "ONNXRTITTransforms"], [220, 2, 1, "", "ONNXRTQLTransforms"], [220, 2, 1, "", "PaddedCenterCropTransform"], [220, 2, 1, "", "ParseDecodeVocTransform"], [220, 2, 1, "", "PyTorchAlignImageChannel"], [220, 2, 1, "", "PyTorchCropResizeTransform"], [220, 2, 1, "", "PyTorchNormalizeTransform"], [220, 2, 1, "", "PyTorchTransforms"], [220, 2, 1, "", "PyTorchTranspose"], [220, 2, 1, "", "PytorchMxnetTransform"], [220, 2, 1, "", "PytorchMxnetWrapFunction"], [220, 2, 1, "", "RandomCropTFTransform"], [220, 2, 1, "", "RandomCropTransform"], [220, 2, 1, "", "RandomHorizontalFlip"], [220, 2, 1, "", "RandomResizedCropMXNetTransform"], [220, 2, 1, "", "RandomResizedCropPytorchTransform"], [220, 2, 1, "", "RandomResizedCropTFTransform"], [220, 2, 1, "", "RandomResizedCropTransform"], [220, 2, 1, "", "RandomVerticalFlip"], [220, 2, 1, "", "RescaleKerasPretrainTransform"], [220, 2, 1, "", "RescaleTFTransform"], [220, 2, 1, "", "RescaleTransform"], [220, 2, 1, "", "ResizeMXNetTransform"], [220, 2, 1, "", "ResizePytorchTransform"], [220, 2, 1, "", "ResizeTFTransform"], [220, 2, 1, "", "ResizeTransform"], [220, 2, 1, "", "ResizeWithRatio"], [220, 2, 1, "", "SquadExample"], [220, 2, 1, "", "TFModelZooCollectTransform"], [220, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [220, 2, 1, "", "TFSquadV1PostTransform"], [220, 2, 1, "", "TRANSFORMS"], [220, 2, 1, "", "TensorflowCropToBoundingBox"], [220, 2, 1, "", "TensorflowRandomHorizontalFlip"], [220, 2, 1, "", "TensorflowRandomVerticalFlip"], [220, 2, 1, "", "TensorflowResizeWithRatio"], [220, 2, 1, "", "TensorflowTransform"], [220, 2, 1, "", "TensorflowTransforms"], [220, 2, 1, "", "TensorflowTranspose"], [220, 2, 1, "", "TensorflowWrapFunction"], [220, 2, 1, "", "ToArray"], [220, 2, 1, "", "ToNDArrayTransform"], [220, 2, 1, "", "Transforms"], [220, 2, 1, "", "Transpose"], [220, 1, 1, "", "convert_examples_to_features"], [220, 1, 1, "", "get_final_text"], [220, 1, 1, "", "get_torchvision_map"], [220, 1, 1, "", "read_squad_examples"], [220, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform": [[220, 3, 1, "", "get_params"]], "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform": [[220, 3, 1, "", "get_params"]], "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform": [[220, 3, 1, "", "get_postprocess_result"], [220, 3, 1, "", "process_result"]], "neural_compressor.experimental.data.transforms.transform.TRANSFORMS": [[220, 3, 1, "", "register"]], "neural_compressor.experimental.distillation": [[221, 2, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[221, 6, 1, "", "_epoch_ran"], [221, 6, 1, "", "best_model"], [221, 6, 1, "", "best_score"], [221, 3, 1, "", "create_criterion"], [221, 3, 1, "", "create_optimizer"], [221, 4, 1, "", "criterion"], [221, 6, 1, "", "eval_frequency"], [221, 4, 1, "", "evaluation_distributed"], [221, 3, 1, "", "execute"], [221, 3, 1, "", "generate_hooks"], [221, 3, 1, "", "init_train_cfg"], [221, 3, 1, "", "on_post_forward"], [221, 4, 1, "", "optimizer"], [221, 3, 1, "", "pre_process"], [221, 3, 1, "", "prepare"], [221, 4, 1, "", "student_model"], [221, 4, 1, "", "teacher_model"], [221, 4, 1, "", "train_cfg"], [221, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.export": [[222, 1, 1, "", "onnx_qlinear_to_qdq"], [223, 0, 0, "-", "qlinear2qdq"], [224, 0, 0, "-", "torch2onnx"], [222, 1, 1, "", "torch_to_fp32_onnx"], [222, 1, 1, "", "torch_to_int8_onnx"], [225, 0, 0, "-", "utils"]], "neural_compressor.experimental.export.qlinear2qdq": [[223, 1, 1, "", "check_model"], [223, 1, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.torch2onnx": [[224, 1, 1, "", "build_scale_mapping"], [224, 1, 1, "", "get_node_mapping"], [224, 1, 1, "", "get_quantizable_onnx_ops"], [224, 1, 1, "", "qdq_fp32_bias"], [224, 1, 1, "", "qdq_fp32_bias_qdq"], [224, 1, 1, "", "qdq_int32_bias"], [224, 1, 1, "", "recalculate_bias"], [224, 1, 1, "", "remove_nodes_by_name"], [224, 1, 1, "", "set_data_type"], [224, 1, 1, "", "set_scale_info"], [224, 1, 1, "", "sub_graph_with_int32_bias"], [224, 1, 1, "", "torch_to_fp32_onnx"], [224, 1, 1, "", "torch_to_int8_onnx"], [224, 1, 1, "", "update_weight_bias"]], "neural_compressor.experimental.export.utils": [[225, 2, 1, "", "DummyDataReader"], [225, 1, 1, "", "ONNX2Numpy_dtype"]], "neural_compressor.experimental.export.utils.DummyDataReader": [[225, 3, 1, "", "get_next"]], "neural_compressor.experimental.graph_optimization": [[226, 2, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.graph_optimization.Graph_Optimization": [[226, 3, 1, "", "dataset"], [226, 4, 1, "", "eval_dataloader"], [226, 4, 1, "", "eval_func"], [226, 4, 1, "", "input"], [226, 4, 1, "", "metric"], [226, 4, 1, "", "model"], [226, 4, 1, "", "output"], [226, 4, 1, "", "postprocess"], [226, 4, 1, "", "precisions"], [226, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.metric": [[234, 2, 1, "", "BaseMetric"], [234, 2, 1, "", "METRICS"], [542, 0, 0, "-", "bleu"], [229, 0, 0, "-", "bleu_util"], [230, 0, 0, "-", "coco_label_map"], [231, 0, 0, "-", "coco_tools"], [232, 0, 0, "-", "evaluate_squad"], [233, 0, 0, "-", "f1"], [235, 0, 0, "-", "metric"], [234, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.BaseMetric": [[234, 4, 1, "", "hvd"], [234, 4, 1, "", "metric"], [234, 3, 1, "", "reset"], [234, 3, 1, "", "result"], [234, 3, 1, "", "update"]], "neural_compressor.experimental.metric.METRICS": [[234, 6, 1, "", "metrics"], [234, 3, 1, "", "register"]], "neural_compressor.experimental.metric.bleu": [[542, 2, 1, "", "BLEU"], [228, 2, 1, "", "UnicodeRegex"], [228, 1, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[542, 6, 1, "", "labels"], [542, 6, 1, "", "predictions"], [542, 3, 1, "", "reset"], [542, 3, 1, "", "result"], [542, 3, 1, "", "update"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[228, 6, 1, "", "nondigit_punct_re"], [228, 3, 1, "", "property_chars"], [228, 6, 1, "", "punct_nondigit_re"], [228, 6, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[229, 1, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[231, 2, 1, "", "COCOEvalWrapper"], [231, 2, 1, "", "COCOWrapper"], [231, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [231, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [231, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper": [[231, 3, 1, "", "ComputeMetrics"], [231, 3, 1, "", "GetAgnosticMode"], [231, 3, 1, "", "GetCategory"], [231, 3, 1, "", "GetCategoryIdList"], [231, 3, 1, "", "accumulate"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[231, 3, 1, "", "LoadAnnotations"], [231, 6, 1, "", "dataset"], [231, 6, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[232, 1, 1, "", "evaluate"], [232, 1, 1, "", "exact_match_score"], [232, 1, 1, "", "f1_score"], [232, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[233, 1, 1, "", "evaluate"], [233, 1, 1, "", "f1_score"], [233, 1, 1, "", "metric_max_over_ground_truths"], [233, 1, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[235, 2, 1, "", "Accuracy"], [235, 2, 1, "", "BaseMetric"], [235, 2, 1, "", "COCOmAPv2"], [235, 2, 1, "", "F1"], [235, 2, 1, "", "GeneralTopK"], [235, 2, 1, "", "Loss"], [235, 2, 1, "", "MAE"], [235, 2, 1, "", "METRICS"], [235, 2, 1, "", "MSE"], [235, 2, 1, "", "MXNetMetrics"], [235, 2, 1, "", "ONNXRTGLUE"], [235, 2, 1, "", "ONNXRTITMetrics"], [235, 2, 1, "", "ONNXRTQLMetrics"], [235, 2, 1, "", "PyTorchLoss"], [235, 2, 1, "", "PyTorchMetrics"], [235, 2, 1, "", "RMSE"], [235, 2, 1, "", "ROC"], [235, 2, 1, "", "SquadF1"], [235, 2, 1, "", "TensorflowCOCOMAP"], [235, 2, 1, "", "TensorflowMAP"], [235, 2, 1, "", "TensorflowMetrics"], [235, 2, 1, "", "TensorflowTopK"], [235, 2, 1, "", "TensorflowVOCMAP"], [235, 2, 1, "", "WrapMXNetMetric"], [235, 2, 1, "", "WrapONNXRTMetric"], [235, 2, 1, "", "WrapPyTorchMetric"], [235, 2, 1, "", "mIOU"], [235, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[235, 6, 1, "", "label_list"], [235, 6, 1, "", "pred_list"], [235, 3, 1, "", "reset"], [235, 3, 1, "", "result"], [235, 6, 1, "", "sample"], [235, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.BaseMetric": [[235, 4, 1, "", "hvd"], [235, 4, 1, "", "metric"], [235, 3, 1, "", "reset"], [235, 3, 1, "", "result"], [235, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.COCOmAPv2": [[235, 3, 1, "", "reset"], [235, 3, 1, "", "result"], [235, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.F1": [[235, 3, 1, "", "reset"], [235, 3, 1, "", "result"], [235, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[235, 6, 1, "", "k"], [235, 6, 1, "", "num_correct"], [235, 6, 1, "", "num_sample"], [235, 3, 1, "", "reset"], [235, 3, 1, "", "result"], [235, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.Loss": [[235, 3, 1, "", "reset"], [235, 3, 1, "", "result"], [235, 6, 1, "", "sample"], [235, 6, 1, "", "sum"], [235, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.MAE": [[235, 6, 1, "", "compare_label"], [235, 6, 1, "", "label_list"], [235, 6, 1, "", "pred_list"], [235, 3, 1, "", "reset"], [235, 3, 1, "", "result"], [235, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.METRICS": [[235, 6, 1, "", "metrics"], [235, 3, 1, "", "register"]], "neural_compressor.experimental.metric.metric.MSE": [[235, 6, 1, "", "compare_label"], [235, 6, 1, "", "label_list"], [235, 6, 1, "", "pred_list"], [235, 3, 1, "", "reset"], [235, 3, 1, "", "result"], [235, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[235, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTGLUE": [[235, 3, 1, "", "reset"], [235, 3, 1, "", "result"], [235, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[235, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[235, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchLoss": [[235, 3, 1, "", "compute"], [235, 3, 1, "", "reset"], [235, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[235, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[235, 6, 1, "", "mse"], [235, 3, 1, "", "reset"], [235, 3, 1, "", "result"], [235, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.ROC": [[235, 3, 1, "", "reset"], [235, 3, 1, "", "result"], [235, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.SquadF1": [[235, 3, 1, "", "reset"], [235, 3, 1, "", "result"], [235, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.TensorflowMAP": [[235, 3, 1, "", "reset"], [235, 3, 1, "", "result"], [235, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[235, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[235, 6, 1, "", "k"], [235, 6, 1, "", "num_correct"], [235, 6, 1, "", "num_sample"], [235, 3, 1, "", "reset"], [235, 3, 1, "", "result"], [235, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapMXNetMetric": [[235, 3, 1, "", "reset"], [235, 3, 1, "", "result"], [235, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapONNXRTMetric": [[235, 3, 1, "", "reset"], [235, 3, 1, "", "result"], [235, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapPyTorchMetric": [[235, 3, 1, "", "reset"], [235, 3, 1, "", "result"], [235, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.mIOU": [[235, 3, 1, "", "reset"], [235, 3, 1, "", "result"], [235, 3, 1, "", "update"]], "neural_compressor.experimental.mixed_precision": [[236, 2, 1, "", "MixedPrecision"]], "neural_compressor.experimental.mixed_precision.MixedPrecision": [[236, 4, 1, "", "precisions"], [236, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.model_conversion": [[237, 2, 1, "", "ModelConversion"]], "neural_compressor.experimental.model_conversion.ModelConversion": [[237, 3, 1, "", "dataset"], [237, 4, 1, "", "destination"], [237, 4, 1, "", "eval_dataloader"], [237, 4, 1, "", "eval_func"], [237, 4, 1, "", "metric"], [237, 4, 1, "", "model"], [237, 4, 1, "", "postprocess"], [237, 4, 1, "", "source"]], "neural_compressor.experimental.nas": [[250, 2, 1, "", "BasicNAS"], [250, 2, 1, "", "DyNAS"], [250, 2, 1, "", "NAS"], [238, 0, 0, "-", "basic_nas"], [239, 0, 0, "-", "dynas"], [244, 0, 0, "-", "dynast"], [251, 0, 0, "-", "nas"], [252, 0, 0, "-", "nas_utils"], [253, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.BasicNAS": [[250, 3, 1, "", "estimate"], [250, 3, 1, "", "execute"], [250, 3, 1, "", "init_by_cfg"], [250, 3, 1, "", "pre_process"]], "neural_compressor.experimental.nas.DyNAS": [[250, 3, 1, "", "create_acc_predictor"], [250, 3, 1, "", "create_latency_predictor"], [250, 3, 1, "", "create_macs_predictor"], [250, 3, 1, "", "estimate"], [250, 3, 1, "", "init_cfg"], [250, 3, 1, "", "init_for_search"], [250, 3, 1, "", "search"], [250, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.basic_nas": [[238, 2, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.basic_nas.BasicNAS": [[238, 3, 1, "", "estimate"], [238, 3, 1, "", "execute"], [238, 3, 1, "", "init_by_cfg"], [238, 3, 1, "", "pre_process"]], "neural_compressor.experimental.nas.dynas": [[239, 2, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.dynas.DyNAS": [[239, 3, 1, "", "create_acc_predictor"], [239, 3, 1, "", "create_latency_predictor"], [239, 3, 1, "", "create_macs_predictor"], [239, 3, 1, "", "estimate"], [239, 3, 1, "", "init_cfg"], [239, 3, 1, "", "init_for_search"], [239, 3, 1, "", "search"], [239, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.dynast": [[240, 0, 0, "-", "dynas_manager"], [241, 0, 0, "-", "dynas_predictor"], [242, 0, 0, "-", "dynas_search"], [243, 0, 0, "-", "dynas_utils"], [245, 0, 0, "-", "supernetwork"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[240, 2, 1, "", "ParameterManager"], [240, 2, 1, "", "TransformerLTEncoding"]], "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager": [[240, 3, 1, "", "create_training_set"], [240, 3, 1, "", "import_csv"], [240, 3, 1, "", "onehot_generic"], [240, 3, 1, "", "process_param_dict"], [240, 3, 1, "", "random_sample"], [240, 3, 1, "", "random_samples"], [240, 3, 1, "", "set_seed"], [240, 3, 1, "", "translate2param"], [240, 3, 1, "", "translate2pymoo"]], "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding": [[240, 3, 1, "", "create_training_set"], [240, 3, 1, "", "import_csv"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[241, 2, 1, "", "Predictor"]], "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor": [[241, 3, 1, "", "get_metrics"], [241, 3, 1, "", "get_parameters"], [241, 3, 1, "", "load"], [241, 3, 1, "", "predict"], [241, 3, 1, "", "save"], [241, 3, 1, "", "train"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[242, 2, 1, "", "ProblemMultiObjective"], [242, 2, 1, "", "SearchAlgoManager"]], "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager": [[242, 3, 1, "", "configure_age"], [242, 3, 1, "", "configure_nsga2"], [242, 3, 1, "", "run_search"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[243, 2, 1, "", "EvaluationInterface"], [243, 2, 1, "", "EvaluationInterfaceMobileNetV3"], [243, 2, 1, "", "EvaluationInterfaceResNet50"], [243, 2, 1, "", "EvaluationInterfaceTransformerLT"], [243, 2, 1, "", "OFARunner"], [243, 2, 1, "", "Runner"], [243, 2, 1, "", "TorchVisionReference"], [243, 2, 1, "", "TransformerLTRunner"], [243, 1, 1, "", "get_macs"], [243, 1, 1, "", "get_torchvision_model"], [243, 1, 1, "", "measure_latency"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface": [[243, 3, 1, "", "clear_csv"], [243, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3": [[243, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50": [[243, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT": [[243, 3, 1, "", "clear_csv"], [243, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner": [[243, 3, 1, "", "estimate_accuracy_top1"], [243, 3, 1, "", "estimate_latency"], [243, 3, 1, "", "estimate_macs"], [243, 3, 1, "", "get_subnet"], [243, 3, 1, "", "measure_latency"], [243, 3, 1, "", "validate_macs"], [243, 3, 1, "", "validate_top1"]], "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference": [[243, 3, 1, "", "measure_latency"], [243, 3, 1, "", "validate_macs"], [243, 3, 1, "", "validate_top1"]], "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner": [[243, 3, 1, "", "measure_latency"], [243, 3, 1, "", "validate_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[246, 0, 0, "-", "machine_translation"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[247, 0, 0, "-", "modules_supernetwork"], [248, 0, 0, "-", "transformer_interface"], [249, 0, 0, "-", "transformer_supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[247, 2, 1, "", "MultiheadAttentionSuper"], [247, 1, 1, "", "get_incremental_state"], [247, 1, 1, "", "set_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper": [[247, 3, 1, "", "forward"], [247, 3, 1, "", "reorder_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[248, 1, 1, "", "compute_bleu"], [248, 1, 1, "", "compute_latency"], [248, 1, 1, "", "compute_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[249, 2, 1, "", "TransformerDecoder"], [249, 2, 1, "", "TransformerDecoderLayer"], [249, 2, 1, "", "TransformerEncoder"], [249, 2, 1, "", "TransformerEncoderLayer"], [249, 2, 1, "", "TransformerSuperNetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder": [[249, 3, 1, "", "extract_features"], [249, 3, 1, "", "forward"], [249, 3, 1, "", "max_positions"], [249, 3, 1, "", "output_layer"], [249, 3, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer": [[249, 3, 1, "", "forward"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder": [[249, 3, 1, "", "forward"], [249, 3, 1, "", "max_positions"], [249, 3, 1, "", "reorder_encoder_out"], [249, 3, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer": [[249, 3, 1, "", "forward"], [249, 3, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.nas": [[251, 2, 1, "", "NAS"], [251, 2, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas.NASBase": [[251, 3, 1, "", "count_model_parameters"], [251, 3, 1, "", "dump_search_results"], [251, 3, 1, "", "estimate"], [251, 3, 1, "", "find_best_model_archs"], [251, 3, 1, "", "init_search_cfg"], [251, 3, 1, "", "load_search_results"], [251, 3, 1, "", "metrics_conversion"], [251, 4, 1, "", "model_builder"], [251, 3, 1, "", "params_vec2params_dict"], [251, 3, 1, "", "search"], [251, 4, 1, "", "search_algorithm"], [251, 4, 1, "", "search_space"], [251, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.nas_utils": [[252, 1, 1, "", "create_search_space_pool"], [252, 1, 1, "", "find_pareto_front"], [252, 1, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[253, 2, 1, "", "BayesianOptimizationSearcher"], [253, 2, 1, "", "GridSearcher"], [253, 2, 1, "", "RandomSearcher"], [253, 2, 1, "", "Searcher"]], "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher": [[253, 3, 1, "", "get_feedback"], [253, 3, 1, "", "indices2params_vec"], [253, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.GridSearcher": [[253, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.RandomSearcher": [[253, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.Searcher": [[253, 3, 1, "", "get_feedback"], [253, 3, 1, "", "params_vec2params_dict"], [253, 3, 1, "", "suggest"]], "neural_compressor.experimental.pruning": [[254, 2, 1, "", "Pruning"], [254, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[254, 6, 1, "", "conf"], [254, 4, 1, "", "evaluation_distributed"], [254, 3, 1, "", "execute"], [254, 3, 1, "", "generate_hooks"], [254, 3, 1, "", "generate_pruners"], [254, 3, 1, "", "get_sparsity_ratio"], [254, 3, 1, "", "pre_process"], [254, 3, 1, "", "prepare"], [254, 6, 1, "", "pruners"], [254, 4, 1, "", "pruning_func"], [254, 4, 1, "", "train_distributed"], [254, 3, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.pruning.TfPruningCallback": [[254, 3, 1, "", "on_after_compute_loss"], [254, 3, 1, "", "on_batch_begin"], [254, 3, 1, "", "on_batch_end"], [254, 3, 1, "", "on_epoch_begin"], [254, 3, 1, "", "on_epoch_end"], [254, 3, 1, "", "on_step_begin"], [254, 3, 1, "", "on_step_end"], [254, 3, 1, "", "on_train_begin"], [254, 3, 1, "", "on_train_end"], [254, 3, 1, "", "post_epoch_end"], [254, 3, 1, "", "pre_epoch_begin"]], "neural_compressor.experimental.pruning_recipes": [[255, 2, 1, "", "PATTERNS"], [256, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.PATTERNS": [[255, 6, 1, "", "patterns"], [255, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns": [[256, 2, 1, "", "PATTERNS"], [257, 0, 0, "-", "pattern"], [258, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS": [[256, 6, 1, "", "patterns"], [256, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[257, 2, 1, "", "PATTERNS"], [257, 2, 1, "", "PatternBase"], [257, 1, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[257, 6, 1, "", "patterns"], [257, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase": [[257, 3, 1, "", "compute_sparsity"], [257, 3, 1, "", "reduce"], [257, 3, 1, "", "reshape"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[258, 2, 1, "", "TilePatternBase"], [258, 2, 1, "", "TilePattern_1x1"], [258, 2, 1, "", "TilePattern_1x16"], [258, 2, 1, "", "TilePattern_1x2"], [258, 2, 1, "", "TilePattern_2x2"], [258, 2, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase": [[258, 3, 1, "", "compute_sparsity"], [258, 3, 1, "", "repeat_mask"]], "neural_compressor.experimental.pruning_v2": [[259, 2, 1, "", "Pruning"], [259, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[259, 6, 1, "", "conf"], [259, 4, 1, "", "evaluation_distributed"], [259, 3, 1, "", "execute"], [259, 3, 1, "", "generate_hooks"], [259, 3, 1, "", "get_sparsity_ratio"], [259, 3, 1, "", "pre_process"], [259, 3, 1, "", "prepare"], [259, 6, 1, "", "pruners"], [259, 4, 1, "", "pruning_func"], [259, 4, 1, "", "train_distributed"], [259, 3, 1, "", "update_config"]], "neural_compressor.experimental.pruning_v2.TfPruningCallback": [[259, 3, 1, "", "on_after_compute_loss"], [259, 3, 1, "", "on_batch_begin"], [259, 3, 1, "", "on_batch_end"], [259, 3, 1, "", "on_epoch_begin"], [259, 3, 1, "", "on_epoch_end"], [259, 3, 1, "", "on_step_begin"], [259, 3, 1, "", "on_step_end"], [259, 3, 1, "", "on_train_begin"], [259, 3, 1, "", "on_train_end"], [259, 3, 1, "", "post_epoch_end"], [259, 3, 1, "", "pre_epoch_begin"]], "neural_compressor.experimental.pytorch_pruner": [[261, 0, 0, "-", "logger"], [262, 0, 0, "-", "patterns"], [263, 0, 0, "-", "prune_utils"], [264, 0, 0, "-", "pruner"], [265, 0, 0, "-", "pruning"], [266, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[262, 2, 1, "", "Pattern"], [262, 2, 1, "", "PatternNInM"], [262, 2, 1, "", "PatternNxM"], [262, 1, 1, "", "get_pattern"], [262, 1, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[262, 3, 1, "", "get_block_size_dict"], [262, 3, 1, "", "get_mask_single"], [262, 3, 1, "", "get_masks"], [262, 3, 1, "", "get_masks_global"], [262, 3, 1, "", "get_masks_local"], [262, 3, 1, "", "get_pattern_lock_masks"], [262, 3, 1, "", "get_sparsity_ratio"], [262, 6, 1, "", "is_global"], [262, 6, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[262, 6, 1, "", "M"], [262, 6, 1, "", "N"], [262, 3, 1, "", "get_masks_global"], [262, 3, 1, "", "get_pattern_lock_masks"], [262, 3, 1, "", "get_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[262, 6, 1, "", "block_size"], [262, 3, 1, "", "get_block_size_dict"], [262, 3, 1, "", "get_masks_global"], [262, 3, 1, "", "get_pattern_lock_masks"], [262, 3, 1, "", "get_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[263, 1, 1, "", "check_config"], [263, 1, 1, "", "parse_not_to_prune"], [263, 1, 1, "", "parse_to_prune"], [263, 1, 1, "", "process_and_check_config"], [263, 1, 1, "", "process_config"], [263, 1, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[264, 2, 1, "", "MagnitudePruner"], [264, 2, 1, "", "PatternLockPruner"], [264, 2, 1, "", "Pruner"], [264, 2, 1, "", "SnipMomentumPruner"], [264, 2, 1, "", "SnipPruner"], [264, 1, 1, "", "get_pruner"], [264, 1, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner": [[264, 3, 1, "", "update_scores"]], "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner": [[264, 3, 1, "", "on_after_optimizer_step"], [264, 3, 1, "", "on_step_begin"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[264, 3, 1, "", "check_is_pruned_step"], [264, 6, 1, "", "config"], [264, 6, 1, "", "current_sparsity_ratio"], [264, 6, 1, "", "end_step"], [264, 6, 1, "", "global_step"], [264, 3, 1, "", "mask_weights"], [264, 6, 1, "", "masks"], [264, 6, 1, "", "max_sparsity_ratio_per_layer"], [264, 6, 1, "", "modules"], [264, 3, 1, "", "on_after_eval"], [264, 3, 1, "", "on_after_optimizer_step"], [264, 3, 1, "", "on_before_eval"], [264, 3, 1, "", "on_before_optimizer_step"], [264, 3, 1, "", "on_epoch_begin"], [264, 3, 1, "", "on_epoch_end"], [264, 3, 1, "", "on_step_begin"], [264, 3, 1, "", "on_step_end"], [264, 3, 1, "", "on_train_begin"], [264, 3, 1, "", "on_train_end"], [264, 6, 1, "", "pattern"], [264, 6, 1, "", "scheduler"], [264, 6, 1, "", "scores"], [264, 6, 1, "", "start_step"], [264, 6, 1, "", "target_sparsity_ratio"], [264, 6, 1, "", "update_frequency_on_step"], [264, 3, 1, "", "update_scores"]], "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner": [[264, 3, 1, "", "on_after_optimizer_step"]], "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner": [[264, 3, 1, "", "on_after_optimizer_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[265, 2, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[265, 6, 1, "", "config_file_path"], [265, 3, 1, "", "get_sparsity_ratio"], [265, 6, 1, "", "model"], [265, 3, 1, "", "on_after_eval"], [265, 3, 1, "", "on_after_optimizer_step"], [265, 3, 1, "", "on_before_eval"], [265, 3, 1, "", "on_before_optimizer_step"], [265, 3, 1, "", "on_epoch_begin"], [265, 3, 1, "", "on_epoch_end"], [265, 3, 1, "", "on_step_begin"], [265, 3, 1, "", "on_step_end"], [265, 3, 1, "", "on_train_begin"], [265, 3, 1, "", "on_train_end"], [265, 3, 1, "", "prepare"], [265, 6, 1, "", "pruner_info"], [265, 6, 1, "", "pruners"], [265, 3, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[266, 2, 1, "", "IterativeScheduler"], [266, 2, 1, "", "OneshotScheduler"], [266, 2, 1, "", "Scheduler"], [266, 1, 1, "", "get_scheduler"], [266, 1, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler": [[266, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler": [[266, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[266, 6, 1, "", "config"], [266, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.quantization": [[267, 2, 1, "", "Quantization"]], "neural_compressor.experimental.quantization.Quantization": [[267, 4, 1, "", "calib_dataloader"], [267, 3, 1, "", "dataset"], [267, 3, 1, "", "distributed_execute"], [267, 3, 1, "", "execute"], [267, 4, 1, "", "metric"], [267, 4, 1, "", "model"], [267, 4, 1, "", "objective"], [267, 4, 1, "", "postprocess"], [267, 3, 1, "", "pre_process"], [267, 4, 1, "", "q_func"]], "neural_compressor.experimental.scheduler": [[268, 2, 1, "", "Scheduler"]], "neural_compressor.experimental.scheduler.Scheduler": [[268, 3, 1, "", "append"], [268, 3, 1, "", "combine"], [268, 4, 1, "", "eval_func"], [268, 4, 1, "", "model"], [268, 4, 1, "", "train_func"]], "neural_compressor.metric": [[276, 2, 1, "", "BaseMetric"], [276, 2, 1, "", "COCOmAPv2"], [276, 2, 1, "", "METRICS"], [276, 2, 1, "", "Metric"], [276, 2, 1, "", "SquadF1"], [276, 2, 1, "", "TensorflowTopK"], [270, 0, 0, "-", "bleu"], [271, 0, 0, "-", "bleu_util"], [272, 0, 0, "-", "coco_label_map"], [273, 0, 0, "-", "coco_tools"], [274, 0, 0, "-", "evaluate_squad"], [275, 0, 0, "-", "f1"], [277, 0, 0, "-", "metric"], [276, 1, 1, "", "metric_registry"]], "neural_compressor.metric.BaseMetric": [[276, 4, 1, "", "hvd"], [276, 4, 1, "", "metric"], [276, 3, 1, "", "reset"], [276, 3, 1, "", "result"], [276, 3, 1, "", "update"]], "neural_compressor.metric.COCOmAPv2": [[276, 3, 1, "", "reset"], [276, 3, 1, "", "result"], [276, 3, 1, "", "update"]], "neural_compressor.metric.METRICS": [[276, 6, 1, "", "metrics"], [276, 3, 1, "", "register"]], "neural_compressor.metric.SquadF1": [[276, 3, 1, "", "reset"], [276, 3, 1, "", "result"], [276, 3, 1, "", "update"]], "neural_compressor.metric.TensorflowTopK": [[276, 6, 1, "", "k"], [276, 6, 1, "", "num_correct"], [276, 6, 1, "", "num_sample"], [276, 3, 1, "", "reset"], [276, 3, 1, "", "result"], [276, 3, 1, "", "update"]], "neural_compressor.metric.bleu": [[270, 2, 1, "", "BLEU"], [270, 2, 1, "", "UnicodeRegex"], [270, 1, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[270, 6, 1, "", "labels"], [270, 6, 1, "", "predictions"], [270, 3, 1, "", "reset"], [270, 3, 1, "", "result"], [270, 3, 1, "", "update"]], "neural_compressor.metric.bleu.UnicodeRegex": [[270, 6, 1, "", "nondigit_punct_re"], [270, 3, 1, "", "property_chars"], [270, 6, 1, "", "punct_nondigit_re"], [270, 6, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[271, 1, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[273, 2, 1, "", "COCOEvalWrapper"], [273, 2, 1, "", "COCOWrapper"], [273, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [273, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [273, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOEvalWrapper": [[273, 3, 1, "", "ComputeMetrics"], [273, 3, 1, "", "GetAgnosticMode"], [273, 3, 1, "", "GetCategory"], [273, 3, 1, "", "GetCategoryIdList"], [273, 3, 1, "", "accumulate"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[273, 3, 1, "", "LoadAnnotations"], [273, 6, 1, "", "dataset"], [273, 6, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[274, 1, 1, "", "evaluate"], [274, 1, 1, "", "exact_match_score"], [274, 1, 1, "", "f1_score"], [274, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[275, 1, 1, "", "evaluate"], [275, 1, 1, "", "f1_score"], [275, 1, 1, "", "metric_max_over_ground_truths"], [275, 1, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[277, 2, 1, "", "Accuracy"], [277, 2, 1, "", "BaseMetric"], [277, 2, 1, "", "COCOmAPv2"], [277, 2, 1, "", "F1"], [277, 2, 1, "", "GeneralTopK"], [277, 2, 1, "", "Loss"], [277, 2, 1, "", "MAE"], [277, 2, 1, "", "METRICS"], [277, 2, 1, "", "MSE"], [277, 2, 1, "", "MXNetMetrics"], [277, 2, 1, "", "Metric"], [277, 2, 1, "", "ONNXRTGLUE"], [277, 2, 1, "", "ONNXRTITMetrics"], [277, 2, 1, "", "ONNXRTQLMetrics"], [277, 2, 1, "", "PyTorchLoss"], [277, 2, 1, "", "PyTorchMetrics"], [277, 2, 1, "", "RMSE"], [277, 2, 1, "", "ROC"], [277, 2, 1, "", "SquadF1"], [277, 2, 1, "", "TensorflowCOCOMAP"], [277, 2, 1, "", "TensorflowMAP"], [277, 2, 1, "", "TensorflowMetrics"], [277, 2, 1, "", "TensorflowTopK"], [277, 2, 1, "", "TensorflowVOCMAP"], [277, 2, 1, "", "WrapMXNetMetric"], [277, 2, 1, "", "WrapONNXRTMetric"], [277, 2, 1, "", "WrapPyTorchMetric"], [277, 2, 1, "", "mIOU"], [277, 1, 1, "", "metric_registry"]], "neural_compressor.metric.metric.Accuracy": [[277, 6, 1, "", "label_list"], [277, 6, 1, "", "pred_list"], [277, 3, 1, "", "reset"], [277, 3, 1, "", "result"], [277, 6, 1, "", "sample"], [277, 3, 1, "", "update"]], "neural_compressor.metric.metric.BaseMetric": [[277, 4, 1, "", "hvd"], [277, 4, 1, "", "metric"], [277, 3, 1, "", "reset"], [277, 3, 1, "", "result"], [277, 3, 1, "", "update"]], "neural_compressor.metric.metric.COCOmAPv2": [[277, 3, 1, "", "reset"], [277, 3, 1, "", "result"], [277, 3, 1, "", "update"]], "neural_compressor.metric.metric.F1": [[277, 3, 1, "", "reset"], [277, 3, 1, "", "result"], [277, 3, 1, "", "update"]], "neural_compressor.metric.metric.GeneralTopK": [[277, 6, 1, "", "k"], [277, 6, 1, "", "num_correct"], [277, 6, 1, "", "num_sample"], [277, 3, 1, "", "reset"], [277, 3, 1, "", "result"], [277, 3, 1, "", "update"]], "neural_compressor.metric.metric.Loss": [[277, 3, 1, "", "reset"], [277, 3, 1, "", "result"], [277, 6, 1, "", "sample"], [277, 6, 1, "", "sum"], [277, 3, 1, "", "update"]], "neural_compressor.metric.metric.MAE": [[277, 6, 1, "", "compare_label"], [277, 6, 1, "", "label_list"], [277, 6, 1, "", "pred_list"], [277, 3, 1, "", "reset"], [277, 3, 1, "", "result"], [277, 3, 1, "", "update"]], "neural_compressor.metric.metric.METRICS": [[277, 6, 1, "", "metrics"], [277, 3, 1, "", "register"]], "neural_compressor.metric.metric.MSE": [[277, 6, 1, "", "compare_label"], [277, 6, 1, "", "label_list"], [277, 6, 1, "", "pred_list"], [277, 3, 1, "", "reset"], [277, 3, 1, "", "result"], [277, 3, 1, "", "update"]], "neural_compressor.metric.metric.MXNetMetrics": [[277, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTGLUE": [[277, 3, 1, "", "reset"], [277, 3, 1, "", "result"], [277, 3, 1, "", "update"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[277, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[277, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchLoss": [[277, 3, 1, "", "compute"], [277, 3, 1, "", "reset"], [277, 3, 1, "", "update"]], "neural_compressor.metric.metric.PyTorchMetrics": [[277, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[277, 6, 1, "", "mse"], [277, 3, 1, "", "reset"], [277, 3, 1, "", "result"], [277, 3, 1, "", "update"]], "neural_compressor.metric.metric.ROC": [[277, 3, 1, "", "reset"], [277, 3, 1, "", "result"], [277, 3, 1, "", "update"]], "neural_compressor.metric.metric.SquadF1": [[277, 3, 1, "", "reset"], [277, 3, 1, "", "result"], [277, 3, 1, "", "update"]], "neural_compressor.metric.metric.TensorflowMAP": [[277, 3, 1, "", "reset"], [277, 3, 1, "", "result"], [277, 3, 1, "", "update"]], "neural_compressor.metric.metric.TensorflowMetrics": [[277, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[277, 6, 1, "", "k"], [277, 6, 1, "", "num_correct"], [277, 6, 1, "", "num_sample"], [277, 3, 1, "", "reset"], [277, 3, 1, "", "result"], [277, 3, 1, "", "update"]], "neural_compressor.metric.metric.WrapMXNetMetric": [[277, 3, 1, "", "reset"], [277, 3, 1, "", "result"], [277, 3, 1, "", "update"]], "neural_compressor.metric.metric.WrapONNXRTMetric": [[277, 3, 1, "", "reset"], [277, 3, 1, "", "result"], [277, 3, 1, "", "update"]], "neural_compressor.metric.metric.WrapPyTorchMetric": [[277, 3, 1, "", "reset"], [277, 3, 1, "", "result"], [277, 3, 1, "", "update"]], "neural_compressor.metric.metric.mIOU": [[277, 3, 1, "", "reset"], [277, 3, 1, "", "result"], [277, 3, 1, "", "update"]], "neural_compressor.mix_precision": [[278, 1, 1, "", "fit"]], "neural_compressor.model": [[280, 2, 1, "", "BaseModel"], [280, 2, 1, "", "Model"], [279, 0, 0, "-", "base_model"], [281, 0, 0, "-", "keras_model"], [282, 0, 0, "-", "model"], [283, 0, 0, "-", "mxnet_model"], [284, 0, 0, "-", "nets_factory"], [285, 0, 0, "-", "onnx_model"], [286, 0, 0, "-", "tensorflow_model"], [287, 0, 0, "-", "torch_model"]], "neural_compressor.model.BaseModel": [[280, 3, 1, "", "export"], [280, 3, 1, "", "framework"], [280, 4, 1, "", "graph_info"], [280, 4, 1, "", "model"], [280, 3, 1, "", "save"]], "neural_compressor.model.base_model": [[279, 2, 1, "", "BaseModel"]], "neural_compressor.model.base_model.BaseModel": [[279, 3, 1, "", "export"], [279, 3, 1, "", "framework"], [279, 4, 1, "", "graph_info"], [279, 4, 1, "", "model"], [279, 3, 1, "", "save"]], "neural_compressor.model.keras_model": [[281, 2, 1, "", "KerasModel"]], "neural_compressor.model.keras_model.KerasModel": [[281, 3, 1, "", "framework"], [281, 4, 1, "", "graph_info"], [281, 4, 1, "", "model"], [281, 4, 1, "", "q_config"], [281, 3, 1, "", "save"]], "neural_compressor.model.model": [[282, 2, 1, "", "Model"], [282, 1, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[283, 2, 1, "", "MXNetModel"]], "neural_compressor.model.mxnet_model.MXNetModel": [[283, 3, 1, "", "framework"], [283, 4, 1, "", "model"], [283, 3, 1, "", "save"]], "neural_compressor.model.nets_factory": [[284, 2, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.nets_factory.TFSlimNetsFactory": [[284, 3, 1, "", "register"]], "neural_compressor.model.onnx_model": [[285, 2, 1, "", "ONNXModel"]], "neural_compressor.model.onnx_model.ONNXModel": [[285, 3, 1, "", "add_initializer"], [285, 3, 1, "", "add_initializers"], [285, 3, 1, "", "add_node"], [285, 3, 1, "", "add_nodes"], [285, 3, 1, "", "add_tensors_to_outputs"], [285, 3, 1, "", "export"], [285, 3, 1, "", "find_node_by_name"], [285, 3, 1, "", "find_nodes_by_initializer"], [285, 3, 1, "", "framework"], [285, 3, 1, "", "get_children"], [285, 3, 1, "", "get_initializer"], [285, 3, 1, "", "get_nodes_chain"], [285, 3, 1, "", "get_parent"], [285, 3, 1, "", "get_parents"], [285, 3, 1, "", "get_scale_zero"], [285, 3, 1, "", "graph"], [285, 4, 1, "", "graph_info"], [285, 3, 1, "", "initializer"], [285, 3, 1, "", "input"], [285, 4, 1, "", "input_name_to_nodes"], [285, 3, 1, "", "ir_version"], [285, 4, 1, "", "is_large_model"], [285, 3, 1, "", "match_first_parent"], [285, 3, 1, "", "match_parent"], [285, 3, 1, "", "match_parent_path"], [285, 4, 1, "", "model"], [285, 4, 1, "", "model_path"], [285, 3, 1, "", "nodes"], [285, 3, 1, "", "opset_import"], [285, 3, 1, "", "output"], [285, 4, 1, "", "output_name_to_node"], [285, 4, 1, "", "q_config"], [285, 3, 1, "", "remove_initializer"], [285, 3, 1, "", "remove_initializers"], [285, 3, 1, "", "remove_node"], [285, 3, 1, "", "remove_nodes"], [285, 3, 1, "", "remove_tensors_from_outputs"], [285, 3, 1, "", "remove_unused_constant"], [285, 3, 1, "", "replace_input_of_all_nodes"], [285, 3, 1, "", "replace_node_input"], [285, 3, 1, "", "replace_node_output"], [285, 3, 1, "", "replace_output_of_all_nodes"], [285, 3, 1, "", "save"], [285, 3, 1, "", "save_model_to_file"], [285, 3, 1, "", "set_initializer"], [285, 3, 1, "", "topological_sort"], [285, 3, 1, "", "update"]], "neural_compressor.model.tensorflow_model": [[286, 2, 1, "", "TensorflowBaseModel"], [286, 2, 1, "", "TensorflowCheckpointModel"], [286, 2, 1, "", "TensorflowModel"], [286, 2, 1, "", "TensorflowQATModel"], [286, 2, 1, "", "TensorflowSavedModelModel"], [286, 1, 1, "", "checkpoint_session"], [286, 1, 1, "", "estimator_session"], [286, 1, 1, "", "frozen_pb_session"], [286, 1, 1, "", "get_model_type"], [286, 1, 1, "", "graph_def_session"], [286, 1, 1, "", "graph_session"], [286, 1, 1, "", "keras_session"], [286, 1, 1, "", "load_saved_model"], [286, 1, 1, "", "saved_model_session"], [286, 1, 1, "", "slim_session"], [286, 1, 1, "", "validate_and_inference_input_output"], [286, 1, 1, "", "validate_graph_node"]], "neural_compressor.model.tensorflow_model.TensorflowBaseModel": [[286, 3, 1, "", "framework"], [286, 4, 1, "", "graph"], [286, 4, 1, "", "graph_def"], [286, 4, 1, "", "graph_info"], [286, 4, 1, "", "input_node_names"], [286, 4, 1, "", "input_tensor"], [286, 4, 1, "", "input_tensor_names"], [286, 4, 1, "", "iter_op"], [286, 4, 1, "", "model"], [286, 4, 1, "", "model_type"], [286, 4, 1, "", "name"], [286, 4, 1, "", "output_node_names"], [286, 4, 1, "", "output_tensor"], [286, 4, 1, "", "output_tensor_names"], [286, 4, 1, "", "q_config"], [286, 3, 1, "", "save"], [286, 4, 1, "", "sess"], [286, 4, 1, "", "weights"], [286, 4, 1, "", "workspace_path"]], "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel": [[286, 4, 1, "", "graph_def"], [286, 4, 1, "", "model"]], "neural_compressor.model.tensorflow_model.TensorflowQATModel": [[286, 4, 1, "", "frozen_graph_def"], [286, 4, 1, "", "model"], [286, 3, 1, "", "save"]], "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel": [[286, 3, 1, "", "build_saved_model"], [286, 3, 1, "", "get_all_weight_names"], [286, 3, 1, "", "get_weight"], [286, 4, 1, "", "model"], [286, 3, 1, "", "report_sparsity"], [286, 3, 1, "", "save"], [286, 3, 1, "", "update_weights"]], "neural_compressor.model.torch_model": [[287, 2, 1, "", "IPEXModel"], [287, 2, 1, "", "PyTorchBaseModel"], [287, 2, 1, "", "PyTorchFXModel"], [287, 2, 1, "", "PyTorchModel"]], "neural_compressor.model.torch_model.IPEXModel": [[287, 3, 1, "", "save"], [287, 4, 1, "", "workspace_path"]], "neural_compressor.model.torch_model.PyTorchBaseModel": [[287, 3, 1, "", "forward"], [287, 4, 1, "", "fp32_model"], [287, 3, 1, "", "framework"], [287, 3, 1, "", "generate_forward_pre_hook"], [287, 3, 1, "", "get_all_weight_names"], [287, 3, 1, "", "get_gradient"], [287, 3, 1, "", "get_inputs"], [287, 3, 1, "", "get_weight"], [287, 4, 1, "", "model"], [287, 3, 1, "", "prune_weights_"], [287, 3, 1, "", "register_forward_pre_hook"], [287, 3, 1, "", "remove_hooks"], [287, 3, 1, "", "report_sparsity"], [287, 3, 1, "", "update_gradient"], [287, 3, 1, "", "update_weights"]], "neural_compressor.model.torch_model.PyTorchModel": [[287, 3, 1, "", "export"], [287, 3, 1, "", "export_to_bf16_onnx"], [287, 3, 1, "", "export_to_fp32_onnx"], [287, 3, 1, "", "export_to_int8_onnx"], [287, 3, 1, "", "export_to_jit"], [287, 4, 1, "", "graph_info"], [287, 3, 1, "", "load_quantized_state_dict"], [287, 3, 1, "", "quantized_state_dict"], [287, 3, 1, "", "save"], [287, 4, 1, "", "workspace_path"]], "neural_compressor.objective": [[288, 2, 1, "", "Accuracy"], [288, 2, 1, "", "Footprint"], [288, 2, 1, "", "ModelSize"], [288, 2, 1, "", "MultiObjective"], [288, 2, 1, "", "Objective"], [288, 2, 1, "", "Performance"], [288, 1, 1, "", "objective_custom_registry"], [288, 1, 1, "", "objective_registry"]], "neural_compressor.objective.Accuracy": [[288, 3, 1, "", "end"], [288, 3, 1, "", "start"]], "neural_compressor.objective.Footprint": [[288, 3, 1, "", "end"], [288, 3, 1, "", "start"]], "neural_compressor.objective.ModelSize": [[288, 3, 1, "", "end"], [288, 3, 1, "", "start"]], "neural_compressor.objective.MultiObjective": [[288, 3, 1, "", "accuracy_meet_req"], [288, 3, 1, "", "accuracy_meets"], [288, 4, 1, "", "accuracy_target"], [288, 4, 1, "", "baseline"], [288, 3, 1, "", "best_result"], [288, 3, 1, "", "compare"], [288, 3, 1, "", "end"], [288, 3, 1, "", "evaluate"], [288, 3, 1, "", "reset"], [288, 3, 1, "", "result"], [288, 3, 1, "", "set_model"], [288, 3, 1, "", "start"]], "neural_compressor.objective.Objective": [[288, 3, 1, "", "end"], [288, 4, 1, "", "model"], [288, 3, 1, "", "reset"], [288, 3, 1, "", "result"], [288, 3, 1, "", "result_list"], [288, 3, 1, "", "start"]], "neural_compressor.objective.Performance": [[288, 3, 1, "", "end"], [288, 3, 1, "", "start"]], "neural_compressor.pruner": [[289, 0, 0, "-", "criteria"], [291, 0, 0, "-", "logger"], [292, 0, 0, "-", "patterns"], [295, 0, 0, "-", "pruner_legacy"], [299, 0, 0, "-", "pruners"], [300, 0, 0, "-", "pruning"], [301, 0, 0, "-", "regs"], [302, 0, 0, "-", "schedulers"], [303, 0, 0, "-", "utils"]], "neural_compressor.pruner.criteria": [[289, 2, 1, "", "GradientCriterion"], [289, 2, 1, "", "MagnitudeCriterion"], [289, 2, 1, "", "PruningCriterion"], [289, 2, 1, "", "SnipCriterion"], [289, 2, 1, "", "SnipMomentumCriterion"], [289, 1, 1, "", "get_criterion"], [289, 1, 1, "", "register_criterion"]], "neural_compressor.pruner.criteria.GradientCriterion": [[289, 3, 1, "", "on_before_optimizer_step"], [289, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.MagnitudeCriterion": [[289, 3, 1, "", "on_step_begin"], [289, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.PruningCriterion": [[289, 3, 1, "", "on_after_optimizer_step"], [289, 3, 1, "", "on_before_optimizer_step"], [289, 3, 1, "", "on_step_begin"], [289, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.SnipCriterion": [[289, 3, 1, "", "on_before_optimizer_step"], [289, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.SnipMomentumCriterion": [[289, 3, 1, "", "on_before_optimizer_step"], [289, 6, 1, "", "scores"]], "neural_compressor.pruner.patterns": [[292, 2, 1, "", "BasePattern"], [292, 2, 1, "", "PatternNInM"], [292, 2, 1, "", "PatternNxM"], [292, 1, 1, "", "get_pattern"], [292, 1, 1, "", "register_pattern"]], "neural_compressor.pruner.patterns.BasePattern": [[292, 3, 1, "", "adjust_ratio"], [292, 3, 1, "", "check_layer_validity"], [292, 6, 1, "", "config"], [292, 3, 1, "", "get_block_size_dict"], [292, 3, 1, "", "get_masks"], [292, 3, 1, "", "get_masks_global"], [292, 3, 1, "", "get_masks_local"], [292, 3, 1, "", "get_pattern_lock_masks"], [292, 3, 1, "", "get_reduced_masks_from_data"], [292, 3, 1, "", "get_single_mask_per_target_ratio"], [292, 3, 1, "", "get_sparsity_ratio"], [292, 3, 1, "", "get_sparsity_ratio_each_layer"], [292, 6, 1, "", "invalid_layers"], [292, 6, 1, "", "is_global"], [292, 6, 1, "", "keep_mask_layers"], [292, 6, 1, "", "max_sparsity_ratio_per_op"], [292, 6, 1, "", "min_sparsity_ratio_per_op"], [292, 6, 1, "", "modules"], [292, 6, 1, "", "pattern"], [292, 3, 1, "", "reduce_tensor"], [292, 6, 1, "", "target_sparsity"], [292, 3, 1, "", "update_residual_cnt"]], "neural_compressor.pruner.patterns.PatternNInM": [[292, 6, 1, "", "M"], [292, 6, 1, "", "N"], [292, 3, 1, "", "check_layer_validity"], [292, 3, 1, "", "get_ele_mask_per_threshold"], [292, 3, 1, "", "get_least_ninm_mask_from_data"], [292, 3, 1, "", "get_masks_global"], [292, 3, 1, "", "get_pattern_lock_masks"], [292, 3, 1, "", "get_reduced_masks_from_data"], [292, 3, 1, "", "get_sparsity_ratio"], [292, 3, 1, "", "reduce_scores"], [292, 3, 1, "", "reshape_orig_to_pattern"], [292, 3, 1, "", "reshape_reduced_to_orig"]], "neural_compressor.pruner.patterns.PatternNxM": [[292, 6, 1, "", "block_size"], [292, 3, 1, "", "check_layer_validity"], [292, 3, 1, "", "count_new_masked_cnts"], [292, 3, 1, "", "get_block_size_dict"], [292, 3, 1, "", "get_mask_per_threshold"], [292, 3, 1, "", "get_masks_global"], [292, 3, 1, "", "get_pattern_lock_masks"], [292, 3, 1, "", "get_reduced_masks_from_data"], [292, 3, 1, "", "get_sparsity_ratio"], [292, 3, 1, "", "get_sparsity_ratio_progressive"], [292, 3, 1, "", "reduce_scores"], [292, 3, 1, "", "reshape_orig_to_pattern"], [292, 3, 1, "", "reshape_reduced_to_orig"], [292, 3, 1, "", "update_new_added_masks"], [292, 3, 1, "", "update_progressive_masks"], [292, 3, 1, "", "update_progressive_masks_global"], [292, 3, 1, "", "update_progressive_masks_linear"], [292, 3, 1, "", "update_progressive_masks_local"], [292, 3, 1, "", "update_progressive_masks_scores"]], "neural_compressor.pruner.pruner_legacy": [[293, 0, 0, "-", "gradient_sensitivity"], [294, 0, 0, "-", "group_lasso"], [296, 0, 0, "-", "magnitude"], [297, 0, 0, "-", "pattern_lock"], [298, 0, 0, "-", "pruner"]], "neural_compressor.pruner.pruner_legacy.gradient_sensitivity": [[293, 2, 1, "", "GradientSensitivityPruner"]], "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner": [[293, 3, 1, "", "compute_mask"], [293, 3, 1, "", "on_epoch_begin"], [293, 3, 1, "", "on_epoch_end"], [293, 3, 1, "", "on_step_begin"], [293, 3, 1, "", "on_step_end"], [293, 3, 1, "", "parse_weight_name"], [293, 3, 1, "", "prune_by_importance"], [293, 3, 1, "", "prune_weight"], [293, 3, 1, "", "update_importance_abs"], [293, 3, 1, "", "update_importance_elementwise"], [293, 3, 1, "", "update_importance_weighted"]], "neural_compressor.pruner.pruner_legacy.group_lasso": [[294, 2, 1, "", "GroupLassoPruner"]], "neural_compressor.pruner.pruner_legacy.group_lasso.GroupLassoPruner": [[294, 3, 1, "", "on_before_optimizer_step"]], "neural_compressor.pruner.pruner_legacy.magnitude": [[296, 2, 1, "", "BasicMagnitudePruner"]], "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner": [[296, 3, 1, "", "compute_mask"], [296, 3, 1, "", "on_epoch_begin"], [296, 3, 1, "", "on_epoch_end"], [296, 3, 1, "", "on_step_begin"], [296, 3, 1, "", "on_step_end"]], "neural_compressor.pruner.pruner_legacy.pattern_lock": [[297, 2, 1, "", "PatternLockPruner"]], "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner": [[297, 3, 1, "", "compute_mask"], [297, 3, 1, "", "on_epoch_begin"], [297, 3, 1, "", "on_epoch_end"], [297, 3, 1, "", "on_step_begin"], [297, 3, 1, "", "on_step_end"], [297, 3, 1, "", "update_weights"]], "neural_compressor.pruner.pruner_legacy.pruner": [[298, 2, 1, "", "Pruner"], [298, 1, 1, "", "pruner_registry"]], "neural_compressor.pruner.pruner_legacy.pruner.Pruner": [[298, 3, 1, "", "on_before_optimizer_step"], [298, 3, 1, "", "on_epoch_begin"], [298, 3, 1, "", "on_epoch_end"], [298, 3, 1, "", "on_step_begin"], [298, 3, 1, "", "on_step_end"], [298, 3, 1, "", "on_train_begin"], [298, 3, 1, "", "on_train_end"], [298, 3, 1, "", "update_sparsity"]], "neural_compressor.pruner.pruners": [[299, 2, 1, "", "BasePruner"], [299, 2, 1, "", "BasicPruner"], [299, 2, 1, "", "PatternLockPruner"], [299, 2, 1, "", "ProgressivePruner"], [299, 1, 1, "", "get_pruner"], [299, 1, 1, "", "parse_valid_pruner_types"], [299, 1, 1, "", "register_pruner"]], "neural_compressor.pruner.pruners.BasePruner": [[299, 3, 1, "", "check_is_pruned_step"], [299, 6, 1, "", "config"], [299, 6, 1, "", "current_sparsity_ratio"], [299, 6, 1, "", "end_step"], [299, 6, 1, "", "global_step"], [299, 3, 1, "", "mask_weights"], [299, 3, 1, "", "mask_weights_general"], [299, 6, 1, "", "masks"], [299, 6, 1, "", "max_sparsity_ratio_per_op"], [299, 6, 1, "", "modules"], [299, 3, 1, "", "on_after_eval"], [299, 3, 1, "", "on_after_optimizer_step"], [299, 3, 1, "", "on_before_eval"], [299, 3, 1, "", "on_before_optimizer_step"], [299, 3, 1, "", "on_epoch_begin"], [299, 3, 1, "", "on_epoch_end"], [299, 3, 1, "", "on_step_begin"], [299, 3, 1, "", "on_step_end"], [299, 3, 1, "", "on_train_begin"], [299, 3, 1, "", "on_train_end"], [299, 6, 1, "", "pattern"], [299, 6, 1, "", "pruning_frequency"], [299, 6, 1, "", "scheduler"], [299, 6, 1, "", "scores"], [299, 6, 1, "", "start_step"], [299, 6, 1, "", "target_sparsity_ratio"], [299, 3, 1, "", "update_masks"]], "neural_compressor.pruner.pruners.BasicPruner": [[299, 6, 1, "", "criterion"], [299, 3, 1, "", "on_after_optimizer_step"], [299, 3, 1, "", "on_before_optimizer_step"], [299, 6, 1, "", "pattern"], [299, 6, 1, "", "reg"], [299, 6, 1, "", "scheduler"], [299, 3, 1, "", "set_global_step"], [299, 3, 1, "", "update_masks"]], "neural_compressor.pruner.pruners.PatternLockPruner": [[299, 3, 1, "", "on_after_optimizer_step"], [299, 3, 1, "", "update_masks"]], "neural_compressor.pruner.pruners.ProgressivePruner": [[299, 3, 1, "", "check_is_pruned_progressive_step"], [299, 3, 1, "", "check_progressive_validity"], [299, 3, 1, "", "on_after_optimizer_step"], [299, 3, 1, "", "on_before_optimizer_step"], [299, 3, 1, "", "on_step_begin"], [299, 3, 1, "", "print_progressive_sparsity"], [299, 3, 1, "", "update_masks_progressive"]], "neural_compressor.pruner.pruning": [[300, 2, 1, "", "Pruning"]], "neural_compressor.pruner.pruning.Pruning": [[300, 6, 1, "", "config_file_path"], [300, 3, 1, "", "get_sparsity_ratio"], [300, 4, 1, "id0", "model"], [300, 3, 1, "", "on_after_eval"], [300, 3, 1, "", "on_after_optimizer_step"], [300, 3, 1, "", "on_before_eval"], [300, 3, 1, "", "on_before_optimizer_step"], [300, 3, 1, "", "on_epoch_begin"], [300, 3, 1, "", "on_epoch_end"], [300, 3, 1, "", "on_step_begin"], [300, 3, 1, "", "on_step_end"], [300, 3, 1, "", "on_train_begin"], [300, 3, 1, "", "on_train_end"], [300, 6, 1, "", "pruner_info"], [300, 6, 1, "", "pruners"], [300, 3, 1, "", "update_config"]], "neural_compressor.pruner.regs": [[301, 2, 1, "", "BaseReg"], [301, 2, 1, "", "GroupLasso"], [301, 1, 1, "", "get_reg"], [301, 1, 1, "", "get_reg_type"], [301, 1, 1, "", "register_reg"]], "neural_compressor.pruner.regs.BaseReg": [[301, 3, 1, "", "on_after_optimizer_step"], [301, 3, 1, "", "on_before_optimizer_step"]], "neural_compressor.pruner.regs.GroupLasso": [[301, 6, 1, "", "alpha"], [301, 3, 1, "", "on_after_optimizer_step"], [301, 3, 1, "", "on_before_optimizer_step"], [301, 6, 1, "", "reg_terms"]], "neural_compressor.pruner.schedulers": [[302, 2, 1, "", "IterativeScheduler"], [302, 2, 1, "", "OneshotScheduler"], [302, 2, 1, "", "PruningScheduler"], [302, 1, 1, "", "get_scheduler"], [302, 1, 1, "", "register_scheduler"]], "neural_compressor.pruner.schedulers.IterativeScheduler": [[302, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.pruner.schedulers.OneshotScheduler": [[302, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.pruner.schedulers.PruningScheduler": [[302, 6, 1, "", "config"], [302, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.pruner.utils": [[303, 1, 1, "", "check_config"], [303, 1, 1, "", "check_key_validity"], [303, 1, 1, "", "generate_pruner_config"], [303, 1, 1, "", "parse_to_prune"], [303, 1, 1, "", "process_and_check_config"], [303, 1, 1, "", "process_config"], [303, 1, 1, "", "process_weight_config"], [303, 1, 1, "", "process_yaml_config"], [303, 1, 1, "", "reset_none_to_default"], [303, 1, 1, "", "update_params"]], "neural_compressor.quantization": [[304, 1, 1, "", "fit"]], "neural_compressor.strategy": [[305, 0, 0, "-", "auto_mixed_precision"], [306, 0, 0, "-", "basic"], [307, 0, 0, "-", "bayesian"], [308, 0, 0, "-", "conservative"], [309, 0, 0, "-", "exhaustive"], [310, 0, 0, "-", "hawq_v2"], [312, 0, 0, "-", "mse"], [313, 0, 0, "-", "mse_v2"], [314, 0, 0, "-", "random"], [315, 0, 0, "-", "strategy"], [317, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto_mixed_precision": [[305, 2, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy": [[305, 3, 1, "", "next_tune_cfg"], [305, 3, 1, "", "traverse"]], "neural_compressor.strategy.basic": [[306, 2, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.basic.BasicTuneStrategy": [[306, 3, 1, "", "distributed_next_tune_cfg_lst"], [306, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.bayesian": [[307, 2, 1, "", "BayesianOptimization"], [307, 2, 1, "", "BayesianTuneStrategy"], [307, 2, 1, "", "TargetSpace"], [307, 1, 1, "", "acq_max"]], "neural_compressor.strategy.bayesian.BayesianOptimization": [[307, 3, 1, "", "gen_next_params"], [307, 4, 1, "", "max"], [307, 4, 1, "", "res"], [307, 4, 1, "", "space"], [307, 3, 1, "", "suggest"]], "neural_compressor.strategy.bayesian.BayesianTuneStrategy": [[307, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.bayesian.TargetSpace": [[307, 3, 1, "", "array_to_params"], [307, 4, 1, "", "bounds"], [307, 4, 1, "", "dim"], [307, 4, 1, "", "empty"], [307, 3, 1, "", "get_target"], [307, 4, 1, "", "keys"], [307, 3, 1, "", "max"], [307, 4, 1, "", "params"], [307, 3, 1, "", "params_to_array"], [307, 3, 1, "", "random_sample"], [307, 3, 1, "", "register"], [307, 3, 1, "", "res"], [307, 4, 1, "", "target"]], "neural_compressor.strategy.conservative": [[308, 2, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative.ConservativeTuneStrategy": [[308, 3, 1, "", "next_tune_cfg"], [308, 3, 1, "", "stop"], [308, 3, 1, "", "traverse"]], "neural_compressor.strategy.exhaustive": [[309, 2, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy": [[309, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.hawq_v2": [[310, 2, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy": [[310, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.mse": [[312, 2, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse.MSETuneStrategy": [[312, 3, 1, "", "mse_impact_lst"], [312, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.mse_v2": [[313, 2, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy": [[313, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.random": [[314, 2, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.random.RandomTuneStrategy": [[314, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.strategy": [[315, 2, 1, "", "TuneStrategy"], [315, 1, 1, "", "strategy_registry"]], "neural_compressor.strategy.strategy.TuneStrategy": [[315, 3, 1, "", "deploy_config"], [315, 3, 1, "", "distributed_next_tune_cfg_lst"], [315, 3, 1, "", "distributed_traverse"], [315, 4, 1, "", "evaluation_result"], [315, 3, 1, "", "initial_best_acc"], [315, 3, 1, "", "initial_tuning_cfg"], [315, 3, 1, "", "master_worker_handle"], [315, 3, 1, "", "meet_acc_req"], [315, 3, 1, "", "next_tune_cfg"], [315, 3, 1, "", "set_q_func"], [315, 3, 1, "", "set_tuning_space"], [315, 3, 1, "", "setup_resume"], [315, 3, 1, "", "show_baseline_info"], [315, 3, 1, "", "slave_worker_handle"], [315, 3, 1, "", "stop"], [315, 3, 1, "", "traverse"], [315, 3, 1, "", "update_best_op_tuning_cfg"]], "neural_compressor.strategy.utils": [[317, 2, 1, "", "FallbackTuningSampler"], [317, 2, 1, "", "OpTuningConfig"], [317, 2, 1, "", "OpTypeWiseTuningSampler"], [317, 2, 1, "", "OpWiseTuningSampler"], [317, 2, 1, "", "TuningItem"], [317, 2, 1, "", "TuningSampler"], [317, 2, 1, "", "TuningSpace"], [316, 0, 0, "-", "constant"], [318, 0, 0, "-", "tuning_sampler"], [319, 0, 0, "-", "tuning_space"], [320, 0, 0, "-", "tuning_structs"], [321, 0, 0, "-", "util"]], "neural_compressor.strategy.utils.OpTuningConfig": [[317, 3, 1, "", "from_state"], [317, 3, 1, "", "get_state"]], "neural_compressor.strategy.utils.OpWiseTuningSampler": [[317, 3, 1, "", "get_opwise_candidate"]], "neural_compressor.strategy.utils.TuningItem": [[317, 3, 1, "", "append"], [317, 3, 1, "", "get_details"], [317, 3, 1, "", "get_option_by_name"], [317, 3, 1, "", "get_options_name"], [317, 4, 1, "", "options"], [317, 3, 1, "", "remove"]], "neural_compressor.strategy.utils.TuningSpace": [[317, 3, 1, "", "get_default_config"], [317, 3, 1, "", "get_default_full_path"], [317, 3, 1, "", "get_item_by_path"], [317, 3, 1, "", "get_op_default_path_by_pattern"], [317, 3, 1, "", "query_item_option"], [317, 3, 1, "", "query_items_by_quant_mode"], [317, 3, 1, "", "query_quant_mode_item_by_full_path"]], "neural_compressor.strategy.utils.tuning_sampler": [[318, 2, 1, "", "FallbackTuningSampler"], [318, 2, 1, "", "ModelWiseTuningSampler"], [318, 2, 1, "", "OpTypeWiseTuningSampler"], [318, 2, 1, "", "OpWiseTuningSampler"], [318, 2, 1, "", "TuningOrder"], [318, 2, 1, "", "TuningSampler"]], "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler": [[318, 3, 1, "", "get_opwise_candidate"]], "neural_compressor.strategy.utils.tuning_space": [[319, 2, 1, "", "TuningItem"], [319, 2, 1, "", "TuningSpace"], [319, 1, 1, "", "get_op_mode_by_query_order"], [319, 1, 1, "", "initial_tuning_cfg_with_quant_mode"], [319, 1, 1, "", "pattern_to_internal"], [319, 1, 1, "", "pattern_to_path"], [319, 1, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_space.TuningItem": [[319, 3, 1, "", "append"], [319, 3, 1, "", "get_details"], [319, 3, 1, "", "get_option_by_name"], [319, 3, 1, "", "get_options_name"], [319, 4, 1, "", "options"], [319, 3, 1, "", "remove"]], "neural_compressor.strategy.utils.tuning_space.TuningSpace": [[319, 3, 1, "", "get_default_config"], [319, 3, 1, "", "get_default_full_path"], [319, 3, 1, "", "get_item_by_path"], [319, 3, 1, "", "get_op_default_path_by_pattern"], [319, 3, 1, "", "query_item_option"], [319, 3, 1, "", "query_items_by_quant_mode"], [319, 3, 1, "", "query_quant_mode_item_by_full_path"]], "neural_compressor.strategy.utils.tuning_structs": [[320, 2, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig": [[320, 3, 1, "", "from_state"], [320, 3, 1, "", "get_state"]], "neural_compressor.strategy.utils.util": [[321, 2, 1, "", "OrderedDefaultDict"], [321, 1, 1, "", "extract_data_type"], [321, 1, 1, "", "reverted_data_type"]], "neural_compressor.training": [[322, 2, 1, "", "CompressionManager"], [322, 1, 1, "", "prepare_compression"]], "neural_compressor.training.CompressionManager": [[322, 2, 1, "", "CallBacks"], [322, 3, 1, "", "export"], [322, 3, 1, "", "save"]], "neural_compressor.training.CompressionManager.CallBacks": [[322, 3, 1, "", "on_after_compute_loss"], [322, 3, 1, "", "on_after_optimizer_step"], [322, 3, 1, "", "on_before_optimizer_step"], [322, 3, 1, "", "on_epoch_begin"], [322, 3, 1, "", "on_epoch_end"], [322, 3, 1, "", "on_step_begin"], [322, 3, 1, "", "on_step_end"], [322, 3, 1, "", "on_train_begin"], [322, 3, 1, "", "on_train_end"]], "neural_compressor.utils": [[326, 2, 1, "", "LayerHistogramCollector"], [323, 0, 0, "-", "collect_layer_histogram"], [324, 0, 0, "-", "constant"], [325, 0, 0, "-", "create_obj_from_config"], [326, 1, 1, "", "debug"], [326, 1, 1, "", "error"], [326, 1, 1, "", "fatal"], [326, 1, 1, "", "info"], [327, 0, 0, "-", "kl_divergence"], [328, 0, 0, "-", "load_huggingface"], [326, 1, 1, "", "log"], [329, 0, 0, "-", "logger"], [330, 0, 0, "-", "options"], [331, 0, 0, "-", "pytorch"], [326, 1, 1, "", "set_random_seed"], [332, 0, 0, "-", "utility"], [326, 1, 1, "", "warn"], [326, 1, 1, "", "warning"]], "neural_compressor.utils.LayerHistogramCollector": [[326, 3, 1, "", "collect"]], "neural_compressor.utils.collect_layer_histogram": [[323, 2, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector": [[323, 3, 1, "", "collect"]], "neural_compressor.utils.create_obj_from_config": [[325, 1, 1, "", "create_dataloader"], [325, 1, 1, "", "create_dataset"], [325, 1, 1, "", "create_eval_func"], [325, 1, 1, "", "create_train_func"], [325, 1, 1, "", "get_algorithm"], [325, 1, 1, "", "get_func_from_config"], [325, 1, 1, "", "get_metrics"], [325, 1, 1, "", "get_postprocess"], [325, 1, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[327, 2, 1, "", "KL_Divergence"]], "neural_compressor.utils.kl_divergence.KL_Divergence": [[327, 3, 1, "", "expand_quantized_bins"], [327, 3, 1, "", "get_threshold"], [327, 3, 1, "", "safe_entropy"]], "neural_compressor.utils.load_huggingface": [[328, 2, 1, "", "OptimizedModel"], [328, 1, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.load_huggingface.OptimizedModel": [[328, 3, 1, "", "from_pretrained"]], "neural_compressor.utils.logger": [[329, 2, 1, "", "Logger"], [329, 1, 1, "", "debug"], [329, 1, 1, "", "error"], [329, 1, 1, "", "fatal"], [329, 1, 1, "", "info"], [329, 1, 1, "", "log"], [329, 1, 1, "", "warn"], [329, 1, 1, "", "warning"]], "neural_compressor.utils.logger.Logger": [[329, 3, 1, "", "get_logger"]], "neural_compressor.utils.options": [[330, 2, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[331, 1, 1, "", "load"]], "neural_compressor.utils.utility": [[332, 2, 1, "", "CaptureOutputToFile"], [332, 2, 1, "", "CpuInfo"], [332, 1, 1, "", "Dequantize"], [332, 1, 1, "", "DequantizeWeight"], [332, 2, 1, "", "GLOBAL_STATE"], [332, 2, 1, "", "LazyImport"], [332, 2, 1, "", "MODE"], [332, 2, 1, "", "Statistics"], [332, 1, 1, "", "combine_histogram"], [332, 1, 1, "", "compute_sparsity"], [332, 1, 1, "", "dump_data_to_local"], [332, 1, 1, "", "dump_elapsed_time"], [332, 1, 1, "", "equal_dicts"], [332, 1, 1, "", "fault_tolerant_file"], [332, 1, 1, "", "get_all_fp32_data"], [332, 1, 1, "", "get_size"], [332, 1, 1, "", "get_tensor_histogram"], [332, 1, 1, "", "get_tuning_history"], [332, 1, 1, "", "load_data_from_pkl"], [332, 1, 1, "", "recover"], [332, 1, 1, "", "set_random_seed"], [332, 1, 1, "", "set_resume_from"], [332, 1, 1, "", "set_tensorboard"], [332, 1, 1, "", "set_workspace"], [332, 1, 1, "", "show_memory_info"], [332, 1, 1, "", "singleton"], [332, 1, 1, "", "str2array"], [332, 1, 1, "", "time_limit"], [332, 1, 1, "", "version1_eq_version2"], [332, 1, 1, "", "version1_gt_version2"], [332, 1, 1, "", "version1_gte_version2"], [332, 1, 1, "", "version1_lt_version2"], [332, 1, 1, "", "version1_lte_version2"]], "neural_compressor.utils.utility.CpuInfo": [[332, 4, 1, "", "bf16"], [332, 4, 1, "", "cores_per_socket"], [332, 3, 1, "", "get_number_of_sockets"], [332, 4, 1, "", "vnni"]], "neural_compressor.utils.utility.Statistics": [[332, 3, 1, "", "print_stat"]], "neural_compressor.ux": [[408, 0, 0, "-", "components"], [467, 0, 0, "-", "inc_bench"], [476, 0, 0, "-", "utils"], [502, 0, 0, "-", "web"]], "neural_compressor.ux.components": [[336, 0, 0, "-", "benchmark"], [340, 0, 0, "-", "config_generator"], [348, 0, 0, "-", "configuration_wizard"], [384, 0, 0, "-", "db_manager"], [389, 0, 0, "-", "diagnosis"], [397, 0, 0, "-", "file_browser"], [403, 0, 0, "-", "graph"], [409, 0, 0, "-", "jobs_management"], [413, 0, 0, "-", "manage_workspace"], [415, 0, 0, "-", "model"], [434, 0, 0, "-", "model_zoo"], [436, 0, 0, "-", "names_mapper"], [443, 0, 0, "-", "optimization"], [459, 0, 0, "-", "profiling"]], "neural_compressor.ux.components.benchmark": [[336, 2, 1, "", "Benchmarks"], [333, 0, 0, "-", "benchmark"], [334, 0, 0, "-", "benchmark_model"], [335, 0, 0, "-", "execute_benchmark"]], "neural_compressor.ux.components.benchmark.benchmark": [[333, 2, 1, "", "Benchmark"], [333, 2, 1, "", "DataloaderInterface"]], "neural_compressor.ux.components.benchmark.benchmark.Benchmark": [[333, 4, 1, "", "config_filename"], [333, 4, 1, "", "configuration_data"], [333, 3, 1, "", "execute"], [333, 3, 1, "", "generate_config"], [333, 4, 1, "", "workdir"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[334, 1, 1, "", "benchmark_model"], [334, 1, 1, "", "parse_args"], [334, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[335, 1, 1, "", "benchmark_result_update"], [335, 1, 1, "", "benchmark_result_update_pytorch_script"], [335, 1, 1, "", "execute_benchmark"], [335, 1, 1, "", "execute_real_benchmark"], [335, 1, 1, "", "pytorch_script_bench_optimizations"], [335, 1, 1, "", "pytorch_script_bench_original_model"]], "neural_compressor.ux.components.config_generator": [[337, 0, 0, "-", "benchmark_config_generator"], [338, 0, 0, "-", "config_generator"], [339, 0, 0, "-", "graph_optimization_config_generator"], [341, 0, 0, "-", "mixed_precision_config_generator"], [342, 0, 0, "-", "profiling_config_generator"], [343, 0, 0, "-", "pruning_config_generator"], [344, 0, 0, "-", "quantization_config_generator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[337, 2, 1, "", "BenchmarkConfigGenerator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator": [[337, 3, 1, "", "generate"], [337, 3, 1, "", "generate_accuracy_config"], [337, 3, 1, "", "generate_evaluation_config"], [337, 3, 1, "", "generate_performance_config"]], "neural_compressor.ux.components.config_generator.config_generator": [[338, 2, 1, "", "ConfigGenerator"]], "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator": [[338, 3, 1, "", "generate"], [338, 3, 1, "", "generate_dataloader_config"], [338, 3, 1, "", "generate_model_config"], [338, 3, 1, "", "get_predefined_config_path"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[339, 2, 1, "", "GraphOptimizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator": [[339, 3, 1, "", "generate"], [339, 3, 1, "", "generate_evaluation_config"], [339, 3, 1, "", "generate_graph_optimization_config"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[341, 2, 1, "", "MixedPrecisionConfigGenerator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator": [[341, 3, 1, "", "generate"], [341, 3, 1, "", "generate_evaluation_config"], [341, 3, 1, "", "generate_mixed_precision_config"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[342, 2, 1, "", "ProfilingConfigGenerator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator": [[342, 3, 1, "", "generate"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[343, 2, 1, "", "PruningConfigGenerator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator": [[343, 3, 1, "", "generate"], [343, 3, 1, "", "generate_evaluation_config"], [343, 3, 1, "", "generate_pruning_config"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[344, 2, 1, "", "QuantizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator": [[344, 3, 1, "", "generate"], [344, 3, 1, "", "generate_evaluation_config"], [344, 3, 1, "", "generate_quantization_config"], [344, 3, 1, "", "generate_tuning_config"]], "neural_compressor.ux.components.configuration_wizard": [[345, 0, 0, "-", "configuration_parser"], [346, 0, 0, "-", "get_boundary_nodes"], [347, 0, 0, "-", "get_configuration"], [349, 0, 0, "-", "params_feeder"], [350, 0, 0, "-", "pruning_config_parser"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[345, 2, 1, "", "ConfigurationParser"], [345, 1, 1, "", "normalize_string_list"], [345, 1, 1, "", "parse_list_value"], [345, 1, 1, "", "parse_multidim_list"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser": [[345, 3, 1, "", "get_param_type"], [345, 3, 1, "", "parse"], [345, 3, 1, "", "parse_dataloader"], [345, 3, 1, "", "parse_evaluation_data"], [345, 3, 1, "", "parse_metric"], [345, 3, 1, "", "parse_transforms"], [345, 3, 1, "", "parse_value"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[346, 1, 1, "", "get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[347, 1, 1, "", "get_predefined_configuration"], [347, 1, 1, "", "update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[349, 2, 1, "", "Feeder"], [349, 1, 1, "", "get_possible_values"]], "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder": [[349, 3, 1, "", "feed"], [349, 3, 1, "", "get_dataloaders"], [349, 3, 1, "", "get_domains"], [349, 3, 1, "", "get_frameworks"], [349, 3, 1, "", "get_metrics"], [349, 3, 1, "", "get_models"], [349, 3, 1, "", "get_objectives"], [349, 3, 1, "", "get_precisions"], [349, 3, 1, "", "get_quantization_approaches"], [349, 3, 1, "", "get_strategies"], [349, 3, 1, "", "get_transforms"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[350, 2, 1, "", "PruningConfigParser"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser": [[350, 3, 1, "", "generate_tree"], [350, 3, 1, "", "parse"], [350, 3, 1, "", "parse_entry"]], "neural_compressor.ux.components.db_manager": [[384, 2, 1, "", "DBManager"], [351, 0, 0, "-", "db_manager"], [360, 0, 0, "-", "db_models"], [379, 0, 0, "-", "db_operations"], [385, 0, 0, "-", "params_interfaces"], [386, 0, 0, "-", "utils"]], "neural_compressor.ux.components.db_manager.DBManager": [[384, 3, 1, "", "create_all"], [384, 3, 1, "", "create_sqlalchemy_engine"], [384, 4, 1, "", "engine"], [384, 3, 1, "", "initialize_database"]], "neural_compressor.ux.components.db_manager.db_manager": [[351, 2, 1, "", "DBManager"]], "neural_compressor.ux.components.db_manager.db_manager.DBManager": [[351, 3, 1, "", "create_all"], [351, 3, 1, "", "create_sqlalchemy_engine"], [351, 4, 1, "", "engine"], [351, 3, 1, "", "initialize_database"]], "neural_compressor.ux.components.db_manager.db_models": [[352, 0, 0, "-", "benchmark"], [353, 0, 0, "-", "benchmark_result"], [354, 0, 0, "-", "dataloader"], [355, 0, 0, "-", "dataset"], [356, 0, 0, "-", "domain"], [357, 0, 0, "-", "domain_flavour"], [358, 0, 0, "-", "example"], [359, 0, 0, "-", "framework"], [361, 0, 0, "-", "metric"], [362, 0, 0, "-", "model"], [363, 0, 0, "-", "optimization"], [364, 0, 0, "-", "optimization_type"], [365, 0, 0, "-", "precision"], [366, 0, 0, "-", "profiling"], [367, 0, 0, "-", "profiling_result"], [368, 0, 0, "-", "project"], [369, 0, 0, "-", "pruning_details"], [370, 0, 0, "-", "transform"], [371, 0, 0, "-", "tuning_details"], [372, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[352, 2, 1, "", "Benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark": [[352, 3, 1, "", "add"], [352, 3, 1, "", "build_info"], [352, 3, 1, "", "clean_status"], [352, 3, 1, "", "delete_benchmark"], [352, 3, 1, "", "details"], [352, 3, 1, "", "list"], [352, 3, 1, "", "update_batch_size"], [352, 3, 1, "", "update_config_path"], [352, 3, 1, "", "update_cores_per_instance"], [352, 3, 1, "", "update_dataset"], [352, 3, 1, "", "update_duration"], [352, 3, 1, "", "update_execution_command"], [352, 3, 1, "", "update_log_path"], [352, 3, 1, "", "update_mode"], [352, 3, 1, "", "update_number_of_instance"], [352, 3, 1, "", "update_status"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[353, 2, 1, "", "BenchmarkResult"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult": [[353, 3, 1, "", "add"], [353, 3, 1, "", "build_info"], [353, 3, 1, "", "update_accuracy"], [353, 3, 1, "", "update_performance"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[354, 2, 1, "", "Dataloader"], [354, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader": [[354, 3, 1, "", "list"], [354, 3, 1, "", "list_by_framework"], [354, 3, 1, "", "query_to_list"], [354, 3, 1, "", "update_params"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[355, 2, 1, "", "Dataset"]], "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset": [[355, 3, 1, "", "add"], [355, 3, 1, "", "build_info"], [355, 3, 1, "", "delete_dataset"], [355, 3, 1, "", "details"], [355, 3, 1, "", "list"], [355, 3, 1, "", "update_template_path"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[356, 2, 1, "", "Domain"], [356, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain.Domain": [[356, 3, 1, "", "get_domain_id"], [356, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[357, 2, 1, "", "DomainFlavour"], [357, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour": [[357, 3, 1, "", "get_domain_flavour_id"], [357, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.example": [[358, 2, 1, "", "Example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[359, 2, 1, "", "Framework"], [359, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.framework.Framework": [[359, 3, 1, "", "get_framework_id"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[361, 2, 1, "", "Metric"], [361, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.metric.Metric": [[361, 3, 1, "", "list"], [361, 3, 1, "", "list_by_framework"], [361, 3, 1, "", "query_to_list"]], "neural_compressor.ux.components.db_manager.db_models.model": [[362, 2, 1, "", "Model"]], "neural_compressor.ux.components.db_manager.db_models.model.Model": [[362, 3, 1, "", "add"], [362, 3, 1, "", "build_info"], [362, 3, 1, "", "delete_model"], [362, 3, 1, "", "details"], [362, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[363, 2, 1, "", "Optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization": [[363, 3, 1, "", "add"], [363, 3, 1, "", "build_info"], [363, 3, 1, "", "clean_status"], [363, 3, 1, "", "delete_optimization"], [363, 3, 1, "", "details"], [363, 3, 1, "", "get_optimization_by_project_and_model"], [363, 3, 1, "", "get_pinned_benchmarks"], [363, 3, 1, "", "list"], [363, 3, 1, "", "pin_accuracy_benchmark"], [363, 3, 1, "", "pin_performance_benchmark"], [363, 3, 1, "", "unpin_benchmark"], [363, 3, 1, "", "update_batch_size"], [363, 3, 1, "", "update_config_path"], [363, 3, 1, "", "update_dataset"], [363, 3, 1, "", "update_duration"], [363, 3, 1, "", "update_execution_command"], [363, 3, 1, "", "update_log_path"], [363, 3, 1, "", "update_optimized_model"], [363, 3, 1, "", "update_precision"], [363, 3, 1, "", "update_pruning_details"], [363, 3, 1, "", "update_sampling_size"], [363, 3, 1, "", "update_status"], [363, 3, 1, "", "update_tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[364, 2, 1, "", "OptimizationType"], [364, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType": [[364, 3, 1, "", "add"], [364, 3, 1, "", "get_optimization_type_by_id"], [364, 3, 1, "", "get_optimization_type_by_name"], [364, 3, 1, "", "get_optimization_type_for_precision"], [364, 3, 1, "", "get_optimization_type_id"], [364, 3, 1, "", "list"], [364, 3, 1, "", "list_for_precision"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[365, 2, 1, "", "Precision"], [365, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.precision.Precision": [[365, 3, 1, "", "add"], [365, 3, 1, "", "get_precision_by_id"], [365, 3, 1, "", "get_precision_by_name"], [365, 3, 1, "", "get_precision_id"], [365, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[366, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling": [[366, 3, 1, "", "add"], [366, 3, 1, "", "build_info"], [366, 3, 1, "", "clean_status"], [366, 3, 1, "", "delete_profiling"], [366, 3, 1, "", "details"], [366, 3, 1, "", "list"], [366, 3, 1, "", "update_dataset"], [366, 3, 1, "", "update_duration"], [366, 3, 1, "", "update_execution_command"], [366, 3, 1, "", "update_log_path"], [366, 3, 1, "", "update_num_threads"], [366, 3, 1, "", "update_status"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[367, 2, 1, "", "ProfilingResult"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult": [[367, 3, 1, "", "add"], [367, 3, 1, "", "build_info"], [367, 3, 1, "", "bulk_add"], [367, 3, 1, "", "delete_results"], [367, 3, 1, "", "get_results"]], "neural_compressor.ux.components.db_manager.db_models.project": [[368, 2, 1, "", "Project"]], "neural_compressor.ux.components.db_manager.db_models.project.Project": [[368, 3, 1, "", "create_project"], [368, 3, 1, "", "delete_project"], [368, 3, 1, "", "get_model_by_name"], [368, 3, 1, "", "list_projects"], [368, 3, 1, "", "project_details"], [368, 3, 1, "", "update_notes"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[369, 2, 1, "", "PruningDetails"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails": [[369, 3, 1, "", "add"], [369, 3, 1, "", "build_info"], [369, 3, 1, "", "delete_pruning_details"], [369, 3, 1, "", "update"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[370, 2, 1, "", "Transform"], [370, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.transform.Transform": [[370, 3, 1, "", "list"], [370, 3, 1, "", "list_by_domain"], [370, 3, 1, "", "list_by_framework"], [370, 3, 1, "", "query_to_list"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[371, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails": [[371, 3, 1, "", "add"], [371, 3, 1, "", "delete_tuning_details"], [371, 3, 1, "", "update"], [371, 3, 1, "", "update_tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[372, 2, 1, "", "TuningHistory"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory": [[372, 3, 1, "", "add"], [372, 3, 1, "", "build_info"]], "neural_compressor.ux.components.db_manager.db_operations": [[379, 2, 1, "", "BenchmarkAPIInterface"], [379, 2, 1, "", "DatasetAPIInterface"], [379, 2, 1, "", "DiagnosisAPIInterface"], [379, 2, 1, "", "DictionariesAPIInterface"], [379, 2, 1, "", "ExamplesAPIInterface"], [379, 2, 1, "", "ModelAPIInterface"], [379, 2, 1, "", "OptimizationAPIInterface"], [379, 2, 1, "", "ProfilingAPIInterface"], [379, 2, 1, "", "ProjectAPIInterface"], [373, 0, 0, "-", "benchmark_api_interface"], [374, 0, 0, "-", "dataset_api_interface"], [375, 0, 0, "-", "db_operations"], [376, 0, 0, "-", "diagnosis_api_interface"], [377, 0, 0, "-", "dictionaries_api_interface"], [378, 0, 0, "-", "examples_api_interface"], [380, 0, 0, "-", "model_api_interface"], [381, 0, 0, "-", "optimization_api_interface"], [382, 0, 0, "-", "profiling_api_interface"], [383, 0, 0, "-", "project_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface": [[379, 3, 1, "", "add_benchmark"], [379, 3, 1, "", "add_result"], [379, 3, 1, "", "clean_status"], [379, 3, 1, "", "delete_benchmark"], [379, 3, 1, "", "edit_benchmark"], [379, 3, 1, "", "get_benchmark_details"], [379, 3, 1, "", "list_benchmarks"], [379, 3, 1, "", "parse_benchmark_data"], [379, 3, 1, "", "parse_benchmark_edit_data"], [379, 3, 1, "", "update_benchmark_accuracy"], [379, 3, 1, "", "update_benchmark_duration"], [379, 3, 1, "", "update_benchmark_performance"], [379, 3, 1, "", "update_benchmark_status"], [379, 3, 1, "", "update_execution_command"], [379, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface": [[379, 3, 1, "", "add_dataset"], [379, 3, 1, "", "check_if_custom_metric_or_dataloader"], [379, 3, 1, "", "dataloader_path"], [379, 3, 1, "", "delete_dataset"], [379, 3, 1, "", "generate_custom_template"], [379, 3, 1, "", "generate_template"], [379, 3, 1, "", "get_dataset_details"], [379, 3, 1, "", "get_predefined_dataset"], [379, 3, 1, "", "list_datasets"], [379, 3, 1, "", "parse_dataset_data"], [379, 3, 1, "", "prepare_predefined_dataloader"], [379, 3, 1, "", "prepare_predefined_transform"], [379, 3, 1, "", "set_template_path"]], "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface": [[379, 3, 1, "", "generate_optimization"], [379, 3, 1, "", "get_op_details"], [379, 3, 1, "", "get_op_list"], [379, 3, 1, "", "histogram"], [379, 3, 1, "", "model_wise_params"], [379, 3, 1, "", "parse_model_wise_config"], [379, 3, 1, "", "parse_op_wise_config"], [379, 3, 1, "", "parse_optimization_data"], [379, 3, 1, "", "parse_wise_parameters"], [379, 3, 1, "", "set_op_wise_pattern_precision"]], "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface": [[379, 3, 1, "", "list_dataloaders"], [379, 3, 1, "", "list_dataloaders_by_framework"], [379, 3, 1, "", "list_domain_flavours"], [379, 3, 1, "", "list_domains"], [379, 3, 1, "", "list_metrics"], [379, 3, 1, "", "list_metrics_by_framework"], [379, 3, 1, "", "list_optimization_types"], [379, 3, 1, "", "list_optimization_types_for_precision"], [379, 3, 1, "", "list_precisions"], [379, 3, 1, "", "list_transforms"], [379, 3, 1, "", "list_transforms_by_domain"], [379, 3, 1, "", "list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface": [[379, 3, 1, "", "create_project"], [379, 3, 1, "", "get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface": [[379, 3, 1, "", "add_model"], [379, 3, 1, "", "delete_model"], [379, 3, 1, "", "get_model_details"], [379, 3, 1, "", "list_models"], [379, 3, 1, "", "parse_model_data"]], "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface": [[379, 3, 1, "", "add_optimization"], [379, 3, 1, "", "add_pruning_optimization"], [379, 3, 1, "", "add_quantization_optimization"], [379, 3, 1, "", "add_standard_optimization"], [379, 3, 1, "", "add_tuning_history"], [379, 3, 1, "", "clean_status"], [379, 3, 1, "", "delete_optimization"], [379, 3, 1, "", "edit_optimization"], [379, 3, 1, "", "edit_pruning_details"], [379, 3, 1, "", "edit_tuning_details"], [379, 3, 1, "", "get_optimization_details"], [379, 3, 1, "", "get_pruning_details"], [379, 3, 1, "", "list_optimizations"], [379, 3, 1, "", "load_pruning_details_config"], [379, 3, 1, "", "parse_optimization_data"], [379, 3, 1, "", "parse_optimization_edit_data"], [379, 3, 1, "", "parse_tuning_history"], [379, 3, 1, "", "pin_accuracy_benchmark"], [379, 3, 1, "", "pin_performance_benchmark"], [379, 3, 1, "", "update_execution_command"], [379, 3, 1, "", "update_optimization_duration"], [379, 3, 1, "", "update_optimization_status"], [379, 3, 1, "", "update_optimized_model"], [379, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface": [[379, 3, 1, "", "add_profiling"], [379, 3, 1, "", "add_result"], [379, 3, 1, "", "bulk_add_results"], [379, 3, 1, "", "clean_status"], [379, 3, 1, "", "delete_profiling"], [379, 3, 1, "", "edit_profiling"], [379, 3, 1, "", "get_profiling_details"], [379, 3, 1, "", "list_profilings"], [379, 3, 1, "", "parse_profiling_data"], [379, 3, 1, "", "parse_profiling_edit_data"], [379, 3, 1, "", "parse_profiling_result_data"], [379, 3, 1, "", "update_execution_command"], [379, 3, 1, "", "update_log_path"], [379, 3, 1, "", "update_profiling_duration"], [379, 3, 1, "", "update_profiling_status"]], "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface": [[379, 3, 1, "", "add_dummy_dataset"], [379, 3, 1, "", "add_model"], [379, 3, 1, "", "create_project"], [379, 3, 1, "", "delete_project"], [379, 3, 1, "", "get_project_details"], [379, 3, 1, "", "list_projects"], [379, 3, 1, "", "update_project_notes"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[373, 2, 1, "", "BenchmarkAPIInterface"], [373, 1, 1, "", "before_delete_benchmark_entry"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface": [[373, 3, 1, "", "add_benchmark"], [373, 3, 1, "", "add_result"], [373, 3, 1, "", "clean_status"], [373, 3, 1, "", "delete_benchmark"], [373, 3, 1, "", "edit_benchmark"], [373, 3, 1, "", "get_benchmark_details"], [373, 3, 1, "", "list_benchmarks"], [373, 3, 1, "", "parse_benchmark_data"], [373, 3, 1, "", "parse_benchmark_edit_data"], [373, 3, 1, "", "update_benchmark_accuracy"], [373, 3, 1, "", "update_benchmark_duration"], [373, 3, 1, "", "update_benchmark_performance"], [373, 3, 1, "", "update_benchmark_status"], [373, 3, 1, "", "update_execution_command"], [373, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[374, 2, 1, "", "DatasetAPIInterface"], [374, 1, 1, "", "initialize_associations"], [374, 1, 1, "", "initialize_precision_optimization_types_association"], [374, 1, 1, "", "search_in_list_of_dict"], [374, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [374, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface": [[374, 3, 1, "", "add_dataset"], [374, 3, 1, "", "check_if_custom_metric_or_dataloader"], [374, 3, 1, "", "dataloader_path"], [374, 3, 1, "", "delete_dataset"], [374, 3, 1, "", "generate_custom_template"], [374, 3, 1, "", "generate_template"], [374, 3, 1, "", "get_dataset_details"], [374, 3, 1, "", "get_predefined_dataset"], [374, 3, 1, "", "list_datasets"], [374, 3, 1, "", "parse_dataset_data"], [374, 3, 1, "", "prepare_predefined_dataloader"], [374, 3, 1, "", "prepare_predefined_transform"], [374, 3, 1, "", "set_template_path"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[375, 1, 1, "", "initialize_associations"], [375, 1, 1, "", "initialize_precision_optimization_types_association"], [375, 1, 1, "", "search_in_list_of_dict"], [375, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [375, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[376, 2, 1, "", "DiagnosisAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface": [[376, 3, 1, "", "generate_optimization"], [376, 3, 1, "", "get_op_details"], [376, 3, 1, "", "get_op_list"], [376, 3, 1, "", "histogram"], [376, 3, 1, "", "model_wise_params"], [376, 3, 1, "", "parse_model_wise_config"], [376, 3, 1, "", "parse_op_wise_config"], [376, 3, 1, "", "parse_optimization_data"], [376, 3, 1, "", "parse_wise_parameters"], [376, 3, 1, "", "set_op_wise_pattern_precision"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[377, 2, 1, "", "DictionariesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface": [[377, 3, 1, "", "list_dataloaders"], [377, 3, 1, "", "list_dataloaders_by_framework"], [377, 3, 1, "", "list_domain_flavours"], [377, 3, 1, "", "list_domains"], [377, 3, 1, "", "list_metrics"], [377, 3, 1, "", "list_metrics_by_framework"], [377, 3, 1, "", "list_optimization_types"], [377, 3, 1, "", "list_optimization_types_for_precision"], [377, 3, 1, "", "list_precisions"], [377, 3, 1, "", "list_transforms"], [377, 3, 1, "", "list_transforms_by_domain"], [377, 3, 1, "", "list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[378, 2, 1, "", "ExamplesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface": [[378, 3, 1, "", "create_project"], [378, 3, 1, "", "get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[380, 2, 1, "", "ModelAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface": [[380, 3, 1, "", "add_model"], [380, 3, 1, "", "delete_model"], [380, 3, 1, "", "get_model_details"], [380, 3, 1, "", "list_models"], [380, 3, 1, "", "parse_model_data"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[381, 2, 1, "", "OptimizationAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface": [[381, 3, 1, "", "add_optimization"], [381, 3, 1, "", "add_pruning_optimization"], [381, 3, 1, "", "add_quantization_optimization"], [381, 3, 1, "", "add_standard_optimization"], [381, 3, 1, "", "add_tuning_history"], [381, 3, 1, "", "clean_status"], [381, 3, 1, "", "delete_optimization"], [381, 3, 1, "", "edit_optimization"], [381, 3, 1, "", "edit_pruning_details"], [381, 3, 1, "", "edit_tuning_details"], [381, 3, 1, "", "get_optimization_details"], [381, 3, 1, "", "get_pruning_details"], [381, 3, 1, "", "list_optimizations"], [381, 3, 1, "", "load_pruning_details_config"], [381, 3, 1, "", "parse_optimization_data"], [381, 3, 1, "", "parse_optimization_edit_data"], [381, 3, 1, "", "parse_tuning_history"], [381, 3, 1, "", "pin_accuracy_benchmark"], [381, 3, 1, "", "pin_performance_benchmark"], [381, 3, 1, "", "update_execution_command"], [381, 3, 1, "", "update_optimization_duration"], [381, 3, 1, "", "update_optimization_status"], [381, 3, 1, "", "update_optimized_model"], [381, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[382, 2, 1, "", "ProfilingAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface": [[382, 3, 1, "", "add_profiling"], [382, 3, 1, "", "add_result"], [382, 3, 1, "", "bulk_add_results"], [382, 3, 1, "", "clean_status"], [382, 3, 1, "", "delete_profiling"], [382, 3, 1, "", "edit_profiling"], [382, 3, 1, "", "get_profiling_details"], [382, 3, 1, "", "list_profilings"], [382, 3, 1, "", "parse_profiling_data"], [382, 3, 1, "", "parse_profiling_edit_data"], [382, 3, 1, "", "parse_profiling_result_data"], [382, 3, 1, "", "update_execution_command"], [382, 3, 1, "", "update_log_path"], [382, 3, 1, "", "update_profiling_duration"], [382, 3, 1, "", "update_profiling_status"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[383, 2, 1, "", "ProjectAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface": [[383, 3, 1, "", "add_dummy_dataset"], [383, 3, 1, "", "add_model"], [383, 3, 1, "", "create_project"], [383, 3, 1, "", "delete_project"], [383, 3, 1, "", "get_project_details"], [383, 3, 1, "", "list_projects"], [383, 3, 1, "", "update_project_notes"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[385, 2, 1, "", "BenchmarkAddParamsInterface"], [385, 2, 1, "", "BenchmarkEditParamsInterface"], [385, 2, 1, "", "DatasetAddParamsInterface"], [385, 2, 1, "", "DiagnosisOptimizationParamsInterface"], [385, 2, 1, "", "ModelAddParamsInterface"], [385, 2, 1, "", "OptimizationAddParamsInterface"], [385, 2, 1, "", "OptimizationEditParamsInterface"], [385, 2, 1, "", "ProfilingAddParamsInterface"], [385, 2, 1, "", "ProfilingEditParamsInterface"], [385, 2, 1, "", "ProfilingResultAddParamsInterface"], [385, 2, 1, "", "TuningHistoryInterface"], [385, 2, 1, "", "TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface": [[385, 3, 1, "", "parse_nodes"]], "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface": [[385, 3, 1, "", "serialize"]], "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface": [[385, 3, 1, "", "serialize"]], "neural_compressor.ux.components.db_manager.utils": [[386, 1, 1, "", "get_framework_dataloaders_config"], [386, 1, 1, "", "get_framework_transforms_config"], [386, 1, 1, "", "update_dataloaders_params"]], "neural_compressor.ux.components.diagnosis": [[387, 0, 0, "-", "diagnosis"], [388, 0, 0, "-", "factory"], [390, 0, 0, "-", "onnx_diagnosis"], [392, 0, 0, "-", "op_details"], [393, 0, 0, "-", "op_entry"], [394, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[387, 2, 1, "", "Diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis": [[387, 3, 1, "", "calculate_mse"], [387, 3, 1, "", "get_histogram_data"], [387, 3, 1, "", "get_op_details"], [387, 3, 1, "", "get_op_list"], [387, 3, 1, "", "get_tensors_info"], [387, 3, 1, "", "load_quantization_config"], [387, 3, 1, "", "mse_metric_gap"]], "neural_compressor.ux.components.diagnosis.factory": [[388, 2, 1, "", "DiagnosisFactory"]], "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory": [[388, 3, 1, "", "get_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[391, 0, 0, "-", "onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[391, 2, 1, "", "OnnxRtDiagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis": [[391, 4, 1, "", "model"]], "neural_compressor.ux.components.diagnosis.op_details": [[392, 2, 1, "", "OpActivation"], [392, 2, 1, "", "OpDetails"], [392, 2, 1, "", "OpPattern"], [392, 2, 1, "", "OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details.OpDetails": [[392, 3, 1, "", "serialize"]], "neural_compressor.ux.components.diagnosis.op_entry": [[393, 2, 1, "", "OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry.OpEntry": [[393, 3, 1, "", "serialize"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[395, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[395, 2, 1, "", "TensorflowDiagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis": [[395, 4, 1, "", "model"]], "neural_compressor.ux.components.file_browser": [[396, 0, 0, "-", "file_browser"]], "neural_compressor.ux.components.file_browser.file_browser": [[396, 1, 1, "", "create_dir_entry"], [396, 1, 1, "", "create_entry"], [396, 1, 1, "", "create_file_entry"], [396, 1, 1, "", "filter_requested_entries"], [396, 1, 1, "", "get_directory_entries"], [396, 1, 1, "", "get_filter_value"], [396, 1, 1, "", "get_non_hidden_directory_entries"], [396, 1, 1, "", "get_requested_path"], [396, 1, 1, "", "get_setting_value"], [396, 1, 1, "", "is_dataset_or_directory_entry"], [396, 1, 1, "", "is_directory_entry"], [396, 1, 1, "", "is_model_or_directory_entry"], [396, 1, 1, "", "should_show_files"], [396, 1, 1, "", "should_show_only_model_files"], [396, 1, 1, "", "sort_entries"]], "neural_compressor.ux.components.graph": [[398, 0, 0, "-", "attribute"], [399, 0, 0, "-", "collapser"], [400, 0, 0, "-", "edge"], [401, 0, 0, "-", "graph"], [402, 0, 0, "-", "graph_reader"], [404, 0, 0, "-", "node"], [405, 0, 0, "-", "reader"]], "neural_compressor.ux.components.graph.attribute": [[398, 2, 1, "", "Attribute"]], "neural_compressor.ux.components.graph.collapser": [[399, 2, 1, "", "Collapser"]], "neural_compressor.ux.components.graph.collapser.Collapser": [[399, 3, 1, "", "collapse"]], "neural_compressor.ux.components.graph.edge": [[400, 2, 1, "", "Edge"]], "neural_compressor.ux.components.graph.edge.Edge": [[400, 4, 1, "", "source"], [400, 4, 1, "", "target"]], "neural_compressor.ux.components.graph.graph": [[401, 2, 1, "", "Graph"]], "neural_compressor.ux.components.graph.graph.Graph": [[401, 3, 1, "", "add_edge"], [401, 3, 1, "", "add_node"], [401, 4, 1, "", "edges"], [401, 3, 1, "", "get_node"], [401, 3, 1, "", "get_target_nodes"], [401, 3, 1, "", "highlight_pattern"], [401, 4, 1, "", "nodes"]], "neural_compressor.ux.components.graph.graph_reader": [[402, 2, 1, "", "GraphReader"]], "neural_compressor.ux.components.graph.graph_reader.GraphReader": [[402, 3, 1, "", "find_pattern_in_graph"], [402, 3, 1, "", "read"]], "neural_compressor.ux.components.graph.node": [[404, 2, 1, "", "GroupNode"], [404, 2, 1, "", "Node"]], "neural_compressor.ux.components.graph.reader": [[406, 0, 0, "-", "onnxrt_reader"], [407, 0, 0, "-", "tensorflow_reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[406, 2, 1, "", "OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader": [[406, 3, 1, "", "read"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[407, 2, 1, "", "TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader": [[407, 3, 1, "", "read"]], "neural_compressor.ux.components.jobs_management": [[410, 0, 0, "-", "jobs_control_queue"], [411, 0, 0, "-", "jobs_manager"], [412, 0, 0, "-", "request"]], "neural_compressor.ux.components.manage_workspace": [[413, 1, 1, "", "get_default_path"]], "neural_compressor.ux.components.model": [[414, 0, 0, "-", "domain"], [416, 0, 0, "-", "model"], [417, 0, 0, "-", "model_type_getter"], [418, 0, 0, "-", "onnxrt"], [420, 0, 0, "-", "pytorch"], [422, 0, 0, "-", "repository"], [423, 0, 0, "-", "shape"], [425, 0, 0, "-", "tensorflow"]], "neural_compressor.ux.components.model.domain": [[414, 2, 1, "", "Domain"]], "neural_compressor.ux.components.model.model": [[416, 2, 1, "", "Model"]], "neural_compressor.ux.components.model.model.Model": [[416, 4, 1, "", "domain"], [416, 3, 1, "", "ensure_supported_path"], [416, 3, 1, "", "get_framework_name"], [416, 3, 1, "", "get_input_nodes"], [416, 3, 1, "", "get_model_graph"], [416, 3, 1, "", "get_output_nodes"], [416, 3, 1, "", "get_tensors_info"], [416, 3, 1, "", "guard_requirements_installed"], [416, 4, 1, "", "input_shape"], [416, 4, 1, "", "shape_elements_order"], [416, 4, 1, "", "supports_graph"], [416, 3, 1, "", "supports_path"], [416, 4, 1, "", "supports_profiling"], [416, 4, 1, "", "supports_pruning"]], "neural_compressor.ux.components.model.model_type_getter": [[417, 1, 1, "", "get_model_type"]], "neural_compressor.ux.components.model.onnxrt": [[419, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.onnxrt.model": [[419, 2, 1, "", "OnnxrtModel"], [419, 1, 1, "", "remove_number_of_samples_from_shape"]], "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel": [[419, 4, 1, "", "domain"], [419, 4, 1, "", "filtered_input_nodes"], [419, 3, 1, "", "get_framework_name"], [419, 3, 1, "", "get_model_graph"], [419, 3, 1, "", "guard_requirements_installed"], [419, 4, 1, "", "input_shape"], [419, 4, 1, "", "nc_model_instance"], [419, 4, 1, "", "shape_elements_order"], [419, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.pytorch": [[421, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.pytorch.model": [[421, 2, 1, "", "PyTorchScriptModel"]], "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel": [[421, 3, 1, "", "get_framework_name"], [421, 3, 1, "", "guard_requirements_installed"], [421, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.repository": [[422, 2, 1, "", "ModelRepository"]], "neural_compressor.ux.components.model.repository.ModelRepository": [[422, 3, 1, "", "get_framework_from_path"], [422, 3, 1, "", "get_frameworks"], [422, 3, 1, "", "get_model"], [422, 3, 1, "", "get_supported_frameworks"], [422, 3, 1, "", "is_model_path"]], "neural_compressor.ux.components.model.shape": [[423, 2, 1, "", "Shape"]], "neural_compressor.ux.components.model.shape.Shape": [[423, 3, 1, "", "serialize"]], "neural_compressor.ux.components.model.tensorflow": [[424, 0, 0, "-", "frozen_pb"], [426, 0, 0, "-", "keras"], [427, 0, 0, "-", "meta_graph"], [428, 0, 0, "-", "model"], [429, 0, 0, "-", "saved_model"], [430, 0, 0, "-", "utils"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[424, 2, 1, "", "FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel": [[424, 3, 1, "", "supports_path"], [424, 4, 1, "", "supports_profiling"]], "neural_compressor.ux.components.model.tensorflow.keras": [[426, 2, 1, "", "KerasModel"]], "neural_compressor.ux.components.model.tensorflow.keras.KerasModel": [[426, 3, 1, "", "get_input_nodes"], [426, 3, 1, "", "get_output_nodes"], [426, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[427, 2, 1, "", "MetaGraphModel"]], "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel": [[427, 3, 1, "", "get_input_nodes"], [427, 3, 1, "", "get_model_graph"], [427, 3, 1, "", "get_output_nodes"], [427, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.model": [[428, 2, 1, "", "TensorflowModel"]], "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel": [[428, 3, 1, "", "get_framework_name"], [428, 3, 1, "", "get_input_nodes"], [428, 3, 1, "", "get_model_graph"], [428, 3, 1, "", "get_output_nodes"], [428, 3, 1, "", "guard_requirements_installed"], [428, 4, 1, "", "input_shape"], [428, 4, 1, "", "nc_model_instance"], [428, 4, 1, "", "shape_elements_order"], [428, 4, 1, "", "supports_pruning"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[429, 2, 1, "", "SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel": [[429, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.utils": [[430, 1, 1, "", "get_input_shape"]], "neural_compressor.ux.components.model_zoo": [[431, 0, 0, "-", "download_config"], [432, 0, 0, "-", "download_model"], [433, 0, 0, "-", "downloader"], [435, 0, 0, "-", "list_models"]], "neural_compressor.ux.components.model_zoo.download_config": [[431, 1, 1, "", "download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[432, 1, 1, "", "download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[433, 2, 1, "", "Downloader"]], "neural_compressor.ux.components.model_zoo.downloader.Downloader": [[433, 3, 1, "", "download"], [433, 3, 1, "", "download_config"], [433, 3, 1, "", "download_file"], [433, 3, 1, "", "download_model"], [433, 3, 1, "", "download_yaml_config"], [433, 3, 1, "", "get_yaml_url"], [433, 3, 1, "", "unpack_archive"]], "neural_compressor.ux.components.model_zoo.list_models": [[435, 1, 1, "", "check_version"], [435, 1, 1, "", "get_available_models"], [435, 1, 1, "", "get_framework_module_name"], [435, 1, 1, "", "get_installed_frameworks"], [435, 1, 1, "", "list_models"], [435, 1, 1, "", "validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[437, 0, 0, "-", "names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[437, 2, 1, "", "MappingDirection"], [437, 2, 1, "", "NamesMapper"]], "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper": [[437, 4, 1, "", "domain_flavour_mappings"], [437, 4, 1, "", "domain_mappings"], [437, 4, 1, "", "framework_mappings"], [437, 3, 1, "", "map_name"], [437, 4, 1, "", "precision_mappings"]], "neural_compressor.ux.components.optimization": [[443, 2, 1, "", "Optimizations"], [438, 0, 0, "-", "execute_optimization"], [439, 0, 0, "-", "factory"], [441, 0, 0, "-", "graph_optimizer"], [444, 0, 0, "-", "mixed_precision"], [447, 0, 0, "-", "neural_coder_optimization"], [449, 0, 0, "-", "optimization"], [450, 0, 0, "-", "pruning"], [453, 0, 0, "-", "tune"], [456, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.optimization.execute_optimization": [[438, 1, 1, "", "check_if_collect_tuning_history"], [438, 1, 1, "", "execute_optimization"], [438, 1, 1, "", "execute_optimization_pytorch_script"], [438, 1, 1, "", "execute_optimization_regular"], [438, 1, 1, "", "parse_logs"], [438, 1, 1, "", "parse_model_data_to_bench_names"]], "neural_compressor.ux.components.optimization.factory": [[439, 2, 1, "", "OptimizationFactory"]], "neural_compressor.ux.components.optimization.factory.OptimizationFactory": [[439, 3, 1, "", "get_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[440, 0, 0, "-", "graph_optimization"], [442, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[440, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization": [[440, 4, 1, "", "configuration_data"], [440, 3, 1, "", "execute"], [440, 3, 1, "", "generate_config"], [440, 4, 1, "", "optimization_script"], [440, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[442, 1, 1, "", "optimize_graph"], [442, 1, 1, "", "optimize_graph_config"], [442, 1, 1, "", "parse_args"], [442, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.mixed_precision": [[445, 0, 0, "-", "mixed_precision"], [446, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[445, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision": [[445, 4, 1, "", "configuration_data"], [445, 3, 1, "", "execute"], [445, 3, 1, "", "generate_config"], [445, 4, 1, "", "optimization_script"], [445, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[446, 1, 1, "", "optimize_graph"], [446, 1, 1, "", "optimize_graph_config"], [446, 1, 1, "", "parse_args"], [446, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[448, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[448, 1, 1, "", "optimize_pt_script"]], "neural_compressor.ux.components.optimization.optimization": [[449, 2, 1, "", "DataloaderInterface"], [449, 2, 1, "", "Optimization"], [449, 2, 1, "", "OptimizationInterface"]], "neural_compressor.ux.components.optimization.optimization.Optimization": [[449, 4, 1, "", "command"], [449, 4, 1, "", "config_filename"], [449, 4, 1, "", "configuration_data"], [449, 3, 1, "", "execute"], [449, 3, 1, "", "generate_config"], [449, 4, 1, "", "optimization_script"], [449, 4, 1, "", "output_model_dir"], [449, 4, 1, "", "output_model_name"], [449, 4, 1, "", "parameters"], [449, 4, 1, "", "workdir"]], "neural_compressor.ux.components.optimization.pruning": [[451, 0, 0, "-", "optimize_model"], [452, 0, 0, "-", "pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[451, 1, 1, "", "optimize_model"], [451, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[452, 2, 1, "", "Pruning"]], "neural_compressor.ux.components.optimization.pruning.pruning.Pruning": [[452, 4, 1, "", "configuration_data"], [452, 3, 1, "", "execute"], [452, 3, 1, "", "generate_config"], [452, 4, 1, "", "optimization_script"], [452, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.tune": [[454, 0, 0, "-", "tune_model"], [455, 0, 0, "-", "tuning"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[454, 1, 1, "", "parse_args"], [454, 1, 1, "", "set_eager_execution"], [454, 1, 1, "", "tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[455, 2, 1, "", "AccuracyCriterion"], [455, 2, 1, "", "Tuning"], [455, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.optimization.tune.tuning.Tuning": [[455, 4, 1, "", "configuration_data"], [455, 3, 1, "", "execute"], [455, 3, 1, "", "generate_config"], [455, 4, 1, "", "optimization_script"], [455, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.tuning_history": [[456, 2, 1, "", "TuningHistory"], [456, 2, 1, "", "Watcher"], [456, 1, 1, "", "tuning_history"], [456, 1, 1, "", "tuning_history_path"]], "neural_compressor.ux.components.optimization.tuning_history.TuningHistory": [[456, 3, 1, "", "send_history_snapshot"]], "neural_compressor.ux.components.optimization.tuning_history.Watcher": [[456, 3, 1, "", "history_file_modification_time"], [456, 3, 1, "", "stop"], [456, 3, 1, "", "was_history_file_changed"]], "neural_compressor.ux.components.profiling": [[457, 0, 0, "-", "execute_profiling"], [458, 0, 0, "-", "factory"], [460, 0, 0, "-", "profile_model"], [461, 0, 0, "-", "profiler"], [462, 0, 0, "-", "profiling"], [464, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.ux.components.profiling.execute_profiling": [[457, 1, 1, "", "execute_profiling"], [457, 1, 1, "", "execute_real_profiling"]], "neural_compressor.ux.components.profiling.factory": [[458, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.factory.ProfilerFactory": [[458, 3, 1, "", "get_profiler"]], "neural_compressor.ux.components.profiling.profile_model": [[460, 1, 1, "", "load_profiling_details"], [460, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.profiling.profiler": [[461, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.profiler.Profiler": [[461, 3, 1, "", "profile_model"]], "neural_compressor.ux.components.profiling.profiling": [[462, 2, 1, "", "DataloaderInterface"], [462, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.profiling.profiling.Profiling": [[462, 4, 1, "", "config_filename"], [462, 4, 1, "", "config_path"], [462, 3, 1, "", "execute"], [462, 3, 1, "", "generate_config"], [462, 4, 1, "", "profiling_data"], [462, 4, 1, "", "workdir"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[463, 0, 0, "-", "factory"], [465, 0, 0, "-", "profiler"], [466, 0, 0, "-", "utils"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[463, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory": [[463, 3, 1, "", "get_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[465, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler": [[465, 3, 1, "", "build_dataloader"], [465, 3, 1, "", "convert_nodes_to_list"], [465, 3, 1, "", "create_tf_config"], [465, 3, 1, "", "get_node_by_name"], [465, 3, 1, "", "initialize_graph"], [465, 3, 1, "", "profile_model"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[466, 1, 1, "", "delete_assign"]], "neural_compressor.ux.inc_bench": [[467, 1, 1, "", "main"], [467, 1, 1, "", "prepare_environment"]], "neural_compressor.ux.utils": [[469, 0, 0, "-", "consts"], [470, 0, 0, "-", "environment"], [471, 0, 0, "-", "exceptions"], [472, 0, 0, "-", "executor"], [473, 0, 0, "-", "expiring_dict"], [474, 0, 0, "-", "github_info"], [475, 0, 0, "-", "hw_info"], [477, 0, 0, "-", "json_serializer"], [478, 0, 0, "-", "logger"], [479, 0, 0, "-", "parser"], [480, 0, 0, "-", "proc"], [481, 0, 0, "-", "processes"], [482, 0, 0, "-", "singleton"], [483, 0, 0, "-", "status_updates"], [484, 0, 0, "-", "templates"], [487, 0, 0, "-", "utils"], [492, 0, 0, "-", "workload"], [498, 0, 0, "-", "yaml_utils"]], "neural_compressor.ux.utils.consts": [[469, 2, 1, "", "DomainFlavours"], [469, 2, 1, "", "Domains"], [469, 2, 1, "", "ExecutionStatus"], [469, 2, 1, "", "Frameworks"], [469, 2, 1, "", "OptimizationTypes"], [469, 2, 1, "", "Precisions"], [469, 2, 1, "", "Strategies"]], "neural_compressor.ux.utils.environment": [[470, 2, 1, "", "Environment"]], "neural_compressor.ux.utils.environment.Environment": [[470, 3, 1, "", "clean_workloads_wip_status"], [470, 3, 1, "", "ensure_workdir_exists_and_writeable"], [470, 3, 1, "", "migrate_database"]], "neural_compressor.ux.utils.exceptions": [[471, 7, 1, "", "AccessDeniedException"], [471, 7, 1, "", "ClientErrorException"], [471, 7, 1, "", "InternalException"], [471, 7, 1, "", "NotFoundException"]], "neural_compressor.ux.utils.executor": [[472, 2, 1, "", "Executor"]], "neural_compressor.ux.utils.executor.Executor": [[472, 4, 1, "", "additional_log_names"], [472, 3, 1, "", "call"], [472, 3, 1, "", "call_one"], [472, 3, 1, "", "is_multi_commands"], [472, 4, 1, "", "log_name"], [472, 4, 1, "", "process_duration"], [472, 3, 1, "", "refresh_workdir"], [472, 4, 1, "", "request_id"], [472, 4, 1, "", "workdir"]], "neural_compressor.ux.utils.expiring_dict": [[473, 2, 1, "", "ExpiringDict"], [473, 2, 1, "", "ExpiringDictItem"]], "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem": [[473, 3, 1, "", "is_expired"]], "neural_compressor.ux.utils.github_info": [[474, 2, 1, "", "GithubInfo"]], "neural_compressor.ux.utils.github_info.GithubInfo": [[474, 3, 1, "", "tag"]], "neural_compressor.ux.utils.hw_info": [[475, 2, 1, "", "HWInfo"], [475, 1, 1, "", "get_bios_version"], [475, 1, 1, "", "get_distribution"], [475, 1, 1, "", "get_framework_dependency_info"], [475, 1, 1, "", "get_framework_info"], [475, 1, 1, "", "get_kernel_version"], [475, 1, 1, "", "get_number_of_sockets"], [475, 1, 1, "", "is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info.HWInfo": [[475, 3, 1, "", "initialize"], [475, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.json_serializer": [[477, 2, 1, "", "JsonSerializer"]], "neural_compressor.ux.utils.json_serializer.JsonSerializer": [[477, 3, 1, "", "serialize"], [477, 3, 1, "", "serialize_item"]], "neural_compressor.ux.utils.logger": [[478, 1, 1, "", "change_log_level"]], "neural_compressor.ux.utils.parser": [[479, 2, 1, "", "AccuracyParser"], [479, 2, 1, "", "BenchmarkParserFactory"], [479, 2, 1, "", "OptimizationParser"], [479, 2, 1, "", "Parser"], [479, 2, 1, "", "PerformanceParser"], [479, 2, 1, "", "ProfilingParser"]], "neural_compressor.ux.utils.parser.AccuracyParser": [[479, 4, 1, "", "patterns"], [479, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.BenchmarkParserFactory": [[479, 3, 1, "", "get_parser"]], "neural_compressor.ux.utils.parser.OptimizationParser": [[479, 4, 1, "", "patterns"], [479, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.Parser": [[479, 4, 1, "", "patterns"], [479, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.PerformanceParser": [[479, 4, 1, "", "patterns"], [479, 3, 1, "", "process"], [479, 3, 1, "", "summarize_partial"], [479, 3, 1, "", "summarize_value"], [479, 3, 1, "", "update_partial"]], "neural_compressor.ux.utils.parser.ProfilingParser": [[479, 4, 1, "", "patterns"], [479, 3, 1, "", "process"], [479, 3, 1, "", "unify_time"]], "neural_compressor.ux.utils.proc": [[480, 2, 1, "", "Proc"]], "neural_compressor.ux.utils.proc.Proc": [[480, 4, 1, "", "info"], [480, 4, 1, "", "info_path"], [480, 4, 1, "", "is_ok"], [480, 4, 1, "", "output"], [480, 4, 1, "", "output_path"], [480, 3, 1, "", "remove_logs"], [480, 3, 1, "", "run"], [480, 4, 1, "", "tail"]], "neural_compressor.ux.utils.processes": [[481, 2, 1, "", "NCProcesses"]], "neural_compressor.ux.utils.processes.NCProcesses": [[481, 4, 1, "", "is_ok"], [481, 3, 1, "", "remove_successful_logs"], [481, 3, 1, "", "return_code_all"]], "neural_compressor.ux.utils.singleton": [[482, 2, 1, "", "Singleton"]], "neural_compressor.ux.utils.status_updates": [[483, 1, 1, "", "get_status_update_function"]], "neural_compressor.ux.utils.templates": [[485, 0, 0, "-", "metric"], [486, 0, 0, "-", "workdir"]], "neural_compressor.ux.utils.templates.metric": [[485, 2, 1, "", "Metric"]], "neural_compressor.ux.utils.templates.metric.Metric": [[485, 4, 1, "", "acc_input_model"], [485, 4, 1, "", "acc_optimized_model"], [485, 4, 1, "", "accuracy"], [485, 3, 1, "", "calculate_throughput"], [485, 3, 1, "", "insert_data"], [485, 4, 1, "", "latency"], [485, 4, 1, "", "optimization_time"], [485, 4, 1, "", "path_optimized_model"], [485, 4, 1, "", "profiling_data"], [485, 4, 1, "", "size_input_model"], [485, 4, 1, "", "size_optimized_model"], [485, 4, 1, "", "throughput"]], "neural_compressor.ux.utils.templates.workdir": [[486, 2, 1, "", "Workdir"]], "neural_compressor.ux.utils.templates.workdir.Workdir": [[486, 3, 1, "", "clean_logs"], [486, 3, 1, "", "clean_status"], [486, 3, 1, "", "ensure_working_path_exists"]], "neural_compressor.ux.utils.utils": [[487, 1, 1, "", "check_module"], [487, 1, 1, "", "deprecated"], [487, 1, 1, "", "determine_ip"], [487, 1, 1, "", "export_to_csv"], [487, 1, 1, "", "filter_transforms"], [487, 1, 1, "", "get_dataset_path"], [487, 1, 1, "", "get_default_pruning_config_path"], [487, 1, 1, "", "get_file_extension"], [487, 1, 1, "", "get_framework_from_path"], [487, 1, 1, "", "get_height_width_from_size"], [487, 1, 1, "", "get_metrics_dict"], [487, 1, 1, "", "get_model_zoo_config_path"], [487, 1, 1, "", "get_model_zoo_model_path"], [487, 1, 1, "", "get_module_version"], [487, 1, 1, "", "get_predefined_config_path"], [487, 1, 1, "", "get_shape_from_transforms"], [487, 1, 1, "", "get_size"], [487, 1, 1, "", "is_dataset_file"], [487, 1, 1, "", "is_development_env"], [487, 1, 1, "", "is_hidden"], [487, 1, 1, "", "load_dataloader_config"], [487, 1, 1, "", "load_help_nc_params"], [487, 1, 1, "", "load_metrics_config"], [487, 1, 1, "", "load_model_config"], [487, 1, 1, "", "load_model_wise_params"], [487, 1, 1, "", "load_precisions_config"], [487, 1, 1, "", "load_pruning_details_config"], [487, 1, 1, "", "load_transforms_config"], [487, 1, 1, "", "load_transforms_filter_config"], [487, 1, 1, "", "normalize_domain"], [487, 1, 1, "", "normalize_framework"], [487, 1, 1, "", "normalize_string"], [487, 1, 1, "", "parse_bool_value"], [487, 1, 1, "", "parse_to_float_list"], [487, 1, 1, "", "parse_to_string_list"], [487, 1, 1, "", "parse_version"], [487, 1, 1, "", "release_tag"], [487, 1, 1, "", "replace_with_values"], [487, 1, 1, "", "verify_file_path"]], "neural_compressor.ux.utils.workload": [[488, 0, 0, "-", "config"], [489, 0, 0, "-", "dataloader"], [490, 0, 0, "-", "evaluation"], [491, 0, 0, "-", "graph_optimization"], [493, 0, 0, "-", "mixed_precision"], [494, 0, 0, "-", "model"], [495, 0, 0, "-", "pruning"], [496, 0, 0, "-", "quantization"], [497, 0, 0, "-", "tuning"]], "neural_compressor.ux.utils.workload.config": [[488, 2, 1, "", "Config"]], "neural_compressor.ux.utils.workload.config.Config": [[488, 3, 1, "", "dump"], [488, 3, 1, "", "get_performance_configs"], [488, 3, 1, "", "get_performance_cores_per_instance"], [488, 3, 1, "", "get_performance_num_of_instance"], [488, 3, 1, "", "initialize"], [488, 3, 1, "", "load"], [488, 3, 1, "", "process_transform"], [488, 3, 1, "", "remove_accuracy_metric"], [488, 3, 1, "", "remove_dataloader"], [488, 3, 1, "", "set_accuracy_and_performance_batch_sizes"], [488, 3, 1, "", "set_accuracy_goal"], [488, 3, 1, "", "set_accuracy_metric"], [488, 3, 1, "", "set_evaluation_dataloader"], [488, 3, 1, "", "set_evaluation_dataset_path"], [488, 3, 1, "", "set_inputs"], [488, 3, 1, "", "set_optimization_precision"], [488, 3, 1, "", "set_outputs"], [488, 3, 1, "", "set_performance_cores_per_instance"], [488, 3, 1, "", "set_performance_iterations"], [488, 3, 1, "", "set_performance_num_of_instance"], [488, 3, 1, "", "set_performance_warmup"], [488, 3, 1, "", "set_quantization_approach"], [488, 3, 1, "", "set_quantization_batch_size"], [488, 3, 1, "", "set_quantization_dataloader"], [488, 3, 1, "", "set_quantization_dataset_path"], [488, 3, 1, "", "set_quantization_sampling_size"], [488, 3, 1, "", "set_transform"], [488, 3, 1, "", "set_workspace"]], "neural_compressor.ux.utils.workload.dataloader": [[489, 2, 1, "", "Dataloader"], [489, 2, 1, "", "Dataset"], [489, 2, 1, "", "Filter"], [489, 2, 1, "", "LabelBalance"], [489, 2, 1, "", "Transform"]], "neural_compressor.ux.utils.workload.dataloader.Dataloader": [[489, 3, 1, "", "serialize"], [489, 3, 1, "", "set_dataset"], [489, 3, 1, "", "set_transforms_from_list"]], "neural_compressor.ux.utils.workload.dataloader.Dataset": [[489, 3, 1, "", "is_dummy"], [489, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.dataloader.Transform": [[489, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.evaluation": [[490, 2, 1, "", "Accuracy"], [490, 2, 1, "", "Configs"], [490, 2, 1, "", "Evaluation"], [490, 2, 1, "", "Metric"], [490, 2, 1, "", "Performance"], [490, 2, 1, "", "Postprocess"], [490, 2, 1, "", "PostprocessSchema"]], "neural_compressor.ux.utils.workload.evaluation.Evaluation": [[490, 3, 1, "", "set_accuracy_postprocess_transforms"]], "neural_compressor.ux.utils.workload.evaluation.Metric": [[490, 4, 1, "", "name"], [490, 4, 1, "", "param"], [490, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema": [[490, 3, 1, "", "get_label_shift_value"]], "neural_compressor.ux.utils.workload.graph_optimization": [[491, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization": [[491, 3, 1, "", "set_precisions"]], "neural_compressor.ux.utils.workload.mixed_precision": [[493, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision": [[493, 3, 1, "", "set_precisions"]], "neural_compressor.ux.utils.workload.model": [[494, 2, 1, "", "Model"]], "neural_compressor.ux.utils.workload.model.Model": [[494, 4, 1, "", "inputs"], [494, 4, 1, "", "outputs"], [494, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.pruning": [[495, 2, 1, "", "AdamOptimizer"], [495, 2, 1, "", "AdamWOptimizer"], [495, 2, 1, "", "Approach"], [495, 2, 1, "", "Criterion"], [495, 2, 1, "", "CrossEntropyLossCriterion"], [495, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [495, 2, 1, "", "KnowledgeDistillationLossCriterion"], [495, 2, 1, "", "Optimizer"], [495, 2, 1, "", "Pruning"], [495, 2, 1, "", "SGDOptimizer"], [495, 2, 1, "", "SelfKnowledgeDistillationLoss"], [495, 2, 1, "", "SparseCategoricalCrossentropyCriterion"], [495, 2, 1, "", "Train"], [495, 2, 1, "", "WeightCompressionApproach"], [495, 1, 1, "", "parse_dict_value_to_float"], [495, 1, 1, "", "parse_dict_value_to_int"]], "neural_compressor.ux.utils.workload.pruning.Train": [[495, 3, 1, "", "serialize"], [495, 3, 1, "", "set_postprocess_transforms"]], "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach": [[495, 3, 1, "", "initialize_pruners"], [495, 3, 1, "", "serialize"], [495, 3, 1, "", "serialize_pruner"]], "neural_compressor.ux.utils.workload.quantization": [[496, 2, 1, "", "Advance"], [496, 2, 1, "", "Calibration"], [496, 2, 1, "", "Quantization"], [496, 2, 1, "", "WiseConfig"], [496, 2, 1, "", "WiseConfigDetails"]], "neural_compressor.ux.utils.workload.tuning": [[497, 2, 1, "", "AccCriterion"], [497, 2, 1, "", "Diagnosis"], [497, 2, 1, "", "ExitPolicy"], [497, 2, 1, "", "MultiObjectives"], [497, 2, 1, "", "Strategy"], [497, 2, 1, "", "Tuning"], [497, 2, 1, "", "Workspace"]], "neural_compressor.ux.utils.workload.tuning.MultiObjectives": [[497, 4, 1, "", "objective"], [497, 4, 1, "", "weight"]], "neural_compressor.ux.utils.workload.tuning.Tuning": [[497, 3, 1, "", "set_max_trials"], [497, 3, 1, "", "set_performance_only"], [497, 3, 1, "", "set_random_seed"], [497, 3, 1, "", "set_timeout"], [497, 3, 1, "", "set_workspace"]], "neural_compressor.ux.utils.yaml_utils": [[498, 1, 1, "", "float_representer"], [498, 1, 1, "", "pruner_representer"]], "neural_compressor.ux.web": [[499, 0, 0, "-", "communication"], [500, 0, 0, "-", "configuration"], [501, 0, 0, "-", "exceptions"], [503, 0, 0, "-", "router"], [504, 0, 0, "-", "server"], [507, 0, 0, "-", "service"]], "neural_compressor.ux.web.communication": [[499, 2, 1, "", "Message"], [499, 2, 1, "", "MessageQueue"], [499, 2, 1, "", "Request"], [499, 2, 1, "", "Response"], [499, 1, 1, "", "create_simple_response"]], "neural_compressor.ux.web.communication.Message": [[499, 4, 1, "", "data"], [499, 4, 1, "", "status"], [499, 4, 1, "", "subject"]], "neural_compressor.ux.web.communication.MessageQueue": [[499, 3, 1, "", "get"], [499, 3, 1, "", "post_error"], [499, 3, 1, "", "post_failure"], [499, 3, 1, "", "post_success"]], "neural_compressor.ux.web.configuration": [[500, 2, 1, "", "Configuration"]], "neural_compressor.ux.web.configuration.Configuration": [[500, 3, 1, "", "determine_gui_port"], [500, 3, 1, "", "determine_log_level"], [500, 3, 1, "", "determine_server_port"], [500, 3, 1, "", "determine_url_prefix"], [500, 3, 1, "", "determine_values_from_environment"], [500, 3, 1, "", "dump_token_to_file"], [500, 3, 1, "", "get_command_line_args"], [500, 3, 1, "", "get_url"], [500, 4, 1, "", "global_config_directory"], [500, 3, 1, "", "is_port_taken"], [500, 3, 1, "", "set_up"]], "neural_compressor.ux.web.exceptions": [[501, 2, 1, "", "ServiceNotFoundException"]], "neural_compressor.ux.web.router": [[503, 2, 1, "", "DeferredRoutingDefinition"], [503, 2, 1, "", "DeferredSubprocessRoutingDefinition"], [503, 2, 1, "", "RealtimeRoutingDefinition"], [503, 2, 1, "", "Router"], [503, 2, 1, "", "RoutingDefinition"], [503, 1, 1, "", "find_pattern_in_graph"], [503, 1, 1, "", "get_model_graph"], [503, 1, 1, "", "get_system_info"]], "neural_compressor.ux.web.router.Router": [[503, 3, 1, "", "handle"]], "neural_compressor.ux.web.server": [[504, 1, 1, "", "allow_api_call"], [504, 1, 1, "", "block_iframe"], [504, 1, 1, "", "block_sniffing"], [504, 1, 1, "", "build_parameters"], [504, 1, 1, "", "disable_cache"], [504, 1, 1, "", "get_tls_args"], [504, 1, 1, "", "handle_api_call"], [504, 1, 1, "", "page_not_found"], [504, 1, 1, "", "require_api_token"], [504, 1, 1, "", "root"], [504, 1, 1, "", "run_server"], [504, 1, 1, "", "web_socket_publisher"]], "neural_compressor.ux.web.service": [[505, 0, 0, "-", "benchmark"], [506, 0, 0, "-", "history_snapshot_parser"], [508, 0, 0, "-", "model"], [509, 0, 0, "-", "optimization"], [510, 0, 0, "-", "profiling"], [511, 0, 0, "-", "request_data_processor"], [512, 0, 0, "-", "response_generator"], [513, 0, 0, "-", "workload"]], "neural_compressor.ux.web.service.benchmark": [[505, 2, 1, "", "BenchmarkService"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[506, 2, 1, "", "HistorySnapshotParser"]], "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser": [[506, 3, 1, "", "extract_accuracy"], [506, 3, 1, "", "extract_performance"], [506, 3, 1, "", "parse_history_item"], [506, 3, 1, "", "parse_history_snapshot"]], "neural_compressor.ux.web.service.model": [[508, 2, 1, "", "ModelService"]], "neural_compressor.ux.web.service.model.ModelService": [[508, 3, 1, "", "get_model"]], "neural_compressor.ux.web.service.optimization": [[509, 2, 1, "", "OptimizationService"]], "neural_compressor.ux.web.service.profiling": [[510, 2, 1, "", "ProfilingService"]], "neural_compressor.ux.web.service.profiling.ProfilingService": [[510, 3, 1, "", "generate_csv"]], "neural_compressor.ux.web.service.request_data_processor": [[511, 2, 1, "", "RequestDataProcessor"]], "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor": [[511, 3, 1, "", "get_string_value"]], "neural_compressor.ux.web.service.response_generator": [[512, 2, 1, "", "ResponseGenerator"]], "neural_compressor.ux.web.service.response_generator.ResponseGenerator": [[512, 3, 1, "", "add_refresh"], [512, 3, 1, "", "from_exception"], [512, 3, 1, "", "get_status_code_for_exception"], [512, 3, 1, "", "serve_from_filesystem"]], "neural_compressor.ux.web.service.workload": [[513, 2, 1, "", "WorkloadService"]], "neural_compressor.ux.web.service.workload.WorkloadService": [[513, 3, 1, "", "get_code_template"], [513, 3, 1, "", "get_config"], [513, 3, 1, "", "get_output"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property", "5": "py:data", "6": "py:attribute", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"], "6": ["py", "attribute", "Python attribute"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"644ec953a7dc_pruning_support": 0, "6ece06672ed3_v1_14": 1, "modul": [1, 5, 6, 8, 11, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 152, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 179, 180, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 217, 219, 220, 221, 223, 224, 225, 226, 228, 229, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 247, 248, 249, 251, 252, 253, 254, 257, 258, 259, 262, 263, 264, 265, 266, 267, 268, 270, 271, 273, 274, 275, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 385, 386, 387, 388, 391, 392, 393, 395, 396, 398, 399, 400, 401, 402, 404, 406, 407, 413, 414, 416, 417, 419, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 435, 437, 438, 439, 440, 442, 445, 446, 448, 449, 451, 452, 454, 455, 456, 457, 458, 460, 461, 462, 463, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 542], "content": [1, 5, 6, 7, 8, 11, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 391, 392, 393, 395, 396, 398, 399, 400, 401, 402, 404, 406, 407, 413, 414, 416, 417, 419, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 435, 437, 438, 439, 440, 442, 443, 445, 446, 448, 449, 451, 452, 454, 455, 456, 457, 458, 460, 461, 462, 463, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 521, 542, 555, 565], "function": [1, 5, 6, 13, 32, 38, 39, 61, 62, 64, 105, 107, 134, 135, 136, 140, 141, 142, 144, 147, 149, 152, 159, 167, 169, 173, 176, 177, 178, 181, 183, 184, 185, 186, 188, 190, 191, 193, 197, 205, 207, 211, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 228, 229, 231, 232, 233, 234, 235, 243, 247, 248, 252, 257, 262, 263, 264, 266, 269, 270, 271, 273, 274, 275, 276, 277, 278, 282, 286, 288, 289, 292, 298, 299, 301, 302, 303, 304, 307, 315, 319, 321, 322, 325, 326, 328, 329, 331, 332, 334, 335, 345, 346, 347, 349, 354, 356, 357, 359, 361, 364, 365, 370, 373, 374, 375, 386, 396, 413, 417, 419, 430, 431, 432, 435, 438, 442, 446, 448, 451, 454, 456, 457, 460, 466, 467, 475, 478, 483, 487, 495, 498, 499, 503, 504, 572], "6f0d0f71d92e_v1_13": 2, "9e89549a08c8_v1_11": 3, "block_mask": 4, "env": 5, "neural_compressor": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514], "adaptor": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 522, 523], "class": [6, 8, 11, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 104, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 135, 136, 138, 139, 142, 143, 144, 145, 146, 147, 148, 149, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 231, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 247, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 262, 264, 265, 266, 267, 268, 269, 270, 273, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 332, 333, 336, 337, 338, 339, 341, 342, 343, 344, 345, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 391, 392, 393, 395, 398, 399, 400, 401, 402, 404, 406, 407, 414, 416, 419, 421, 422, 423, 424, 426, 427, 428, 429, 433, 437, 439, 440, 443, 445, 449, 452, 455, 456, 458, 461, 462, 463, 465, 469, 470, 472, 473, 474, 475, 477, 479, 480, 481, 482, 485, 486, 488, 489, 490, 491, 493, 494, 495, 496, 497, 499, 500, 501, 503, 505, 506, 508, 509, 510, 511, 512, 513, 522, 542, 555], "subpackag": [7, 16, 81, 100, 101, 103, 153, 178, 216, 227, 244, 245, 250, 255, 269, 290, 311, 384, 389, 403, 408, 415, 443, 459, 468, 476, 502], "submodul": [7, 12, 16, 28, 45, 70, 81, 89, 95, 100, 101, 103, 106, 119, 131, 137, 144, 154, 161, 173, 177, 181, 188, 199, 211, 215, 218, 222, 227, 234, 244, 246, 250, 256, 260, 269, 276, 280, 290, 295, 311, 317, 326, 336, 340, 348, 360, 379, 384, 389, 390, 394, 397, 403, 405, 408, 409, 415, 418, 420, 425, 434, 436, 441, 443, 444, 447, 450, 453, 459, 464, 468, 476, 484, 492, 502, 507], "packag": [7, 28, 144, 161, 173, 177, 178, 181, 188, 199, 211, 215, 216, 218, 222, 227, 234, 250, 255, 256, 269, 276, 280, 295, 311, 317, 326, 336, 379, 384, 443, 555, 595, 597, 599, 600], "kera": [8, 426], "keras_util": [9, 10], "quantiz": [10, 37, 267, 304, 496, 518, 521, 538, 557, 571, 577, 580, 591, 602, 610, 611, 612, 620], "mxnet": [11, 568, 582, 611, 616, 620], "mxnet_util": [12, 13], "util": [13, 38, 134, 141, 225, 303, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 386, 430, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 525, 530, 564], "onnxrt": [14, 418, 419, 568, 582, 616], "ox_util": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], "calibr": 15, "oper": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "activ": 17, "argmax": 18, "attent": 19, "binary_op": 20, "concat": 21, "conv": 22, "direct_q8": 23, "embed_layernorm": 24, "gather": 25, "gavgpool": 26, "gemm": 27, "lstm": 29, "matmul": 30, "maxpool": 31, "op": 32, "pad": 33, "pool": 34, "resiz": 35, "split": 36, "pytorch": [39, 331, 420, 421, 568, 572, 582, 611, 612, 615, 616, 620], "queri": [40, 522], "tensorflow": [41, 424, 425, 426, 427, 428, 429, 430, 568, 572, 582, 611, 612, 615, 616, 620], "tf_util": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134], "graph_convert": 42, "graph_converter_without_calib": 43, "graph_rewrit": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], "bf16": [44, 45, 526], "bf16_convert": [44, 135], "gener": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79], "convert_add_to_biasadd": 46, "convert_layout": 47, "convert_leakyrelu": 48, "convert_nan_to_random": 49, "convert_placeholder_to_const": 50, "dequantize_cast_optim": 51, "dilated_contract": 52, "dummy_biasadd": 53, "expanddims_optim": 54, "fetch_weight_from_reshap": 55, "fold_batch_norm": 56, "fold_const": 57, "fuse_biasadd_add": 58, "fuse_column_wise_mul": 59, "fuse_conv_with_math": 60, "fuse_decomposed_bn": 61, "fuse_decomposed_in": 62, "fuse_gelu": 63, "fuse_layer_norm": 64, "fuse_pad_with_conv": 65, "fuse_pad_with_fp32_conv": 66, "fuse_reshape_transpos": 67, "graph_cse_optim": 68, "grappler_pass": 69, "insert_print_nod": 71, "move_squeeze_after_relu": 72, "pre_optim": 73, "remove_training_nod": 74, "rename_batch_norm": 75, "split_shared_input": 76, "strip_equivalent_nod": 77, "strip_unused_nod": 78, "switch_optim": 79, "graph_bas": 80, "int8": [82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 574, 620], "freeze_fake_qu": 82, "freeze_valu": 83, "freeze_value_without_calib": 84, "fuse_conv_redundant_dequant": 85, "fuse_conv_requant": 86, "fuse_matmul_redundant_dequant": 87, "fuse_matmul_requant": 88, "meta_op_optim": 90, "post_hostconst_convert": 91, "post_quantized_op_cs": 92, "rnn_convert": 93, "scale_propag": 94, "qdq": [95, 96, 97, 98, 112, 113, 114, 115, 116, 117, 118, 119, 120, 620], "insert_qdq_pattern": 96, "merge_duplicated_qdq": 97, "share_qdq_y_pattern": 98, "graph_util": 99, "quantize_graph": [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127], "qat": [102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 620], "fake_quant": 102, "quantize_config": 104, "quantize_help": 105, "quantize_lay": [106, 107, 108, 109, 110], "optimize_lay": 107, "quantize_layer_add": 108, "quantize_layer_bas": 109, "quantize_layer_bn": 110, "quantize_wrapp": 111, "fuse_qdq_bn": 112, "fuse_qdq_concatv2": 113, "fuse_qdq_conv": 114, "fuse_qdq_deconv": 115, "fuse_qdq_in": 116, "fuse_qdq_matmul": 117, "fuse_qdq_pool": 118, "optimize_qdq": 120, "quantize_graph_bas": 121, "quantize_graph_bn": 122, "quantize_graph_concatv2": 123, "quantize_graph_conv": 124, "quantize_graph_for_intel_cpu": 125, "quantize_graph_matmul": 126, "quantize_graph_pool": 127, "quantize_graph_common": 128, "transform_graph": [129, 130, 131, 132, 133], "bias_correct": 129, "graph_transform_bas": 130, "insert_log": 132, "rerange_quantized_concat": 133, "torch_util": [135, 136, 137, 138, 139, 140, 141, 193], "hawq_metr": 136, "onnx": [138, 524, 528, 580, 611, 620], "smooth_quant": [139, 145], "symbolic_trac": 140, "algorithm": [142, 143, 144, 145, 146, 531, 617], "fast_bias_correct": 143, "weight_correct": 146, "benchmark": [147, 185, 333, 334, 335, 336, 352, 505, 534, 541, 565, 566, 610], "conf": [148, 149, 150, 151], "config": [148, 152, 488, 535, 567, 568, 604], "dotdict": 149, "pythonic_config": 151, "contrib": [153, 154, 155, 156, 559], "strategi": [154, 155, 156, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 562, 563, 614, 617], "sigopt": [155, 614, 617], "tpe": [156, 617], "data": [157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 544, 573], "dataload": [157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 187, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 354, 489, 545, 567, 568], "base_dataload": [157, 195], "default_dataload": [159, 197], "fetcher": [160, 198], "attribut": [161, 169, 178, 207, 216, 227, 255, 280, 326, 398, 516], "mxnet_dataload": [162, 200], "onnxrt_dataload": [163, 201], "pytorch_dataload": [164, 202], "sampler": [165, 203], "tensorflow_dataload": [166, 204], "dataset": [167, 168, 169, 170, 171, 172, 173, 174, 205, 206, 207, 208, 209, 210, 211, 212, 355, 546, 565, 568, 578], "bert_dataset": [167, 205], "coco_dataset": [168, 206], "dummy_dataset": [170, 208], "dummy_dataset_v2": [171, 209], "imagenet_dataset": [172, 210], "style_transfer_dataset": [174, 212], "filter": [175, 176, 177, 213, 214, 215], "coco_filt": [175, 213], "transform": [179, 180, 181, 182, 183, 184, 217, 218, 219, 220, 370, 547, 578, 616], "coco_transform": 179, "imagenet_transform": [180, 217], "postprocess": [182, 192], "token": [183, 219], "experiment": [185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268], "common": [186, 187, 188, 189, 190, 191, 192, 193, 518, 540, 575], "criterion": [186, 543], "metric": [189, 228, 229, 230, 231, 232, 233, 234, 235, 270, 271, 272, 273, 274, 275, 276, 277, 361, 485, 527, 548, 578, 582], "model": [190, 279, 280, 281, 282, 283, 284, 285, 286, 287, 362, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 494, 508, 549, 560, 565, 574, 577, 580, 584, 591, 620], "optim": [191, 363, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 509, 550, 565, 592, 602, 605], "compon": [194, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 551], "distil": [221, 552, 570, 571, 610, 620], "export": [222, 223, 224, 225, 574], "qlinear2qdq": 223, "torch2onnx": 224, "graph_optim": [226, 440, 441, 442, 491], "bleu": [228, 270, 542], "bleu_util": [229, 271], "coco_label_map": [230, 272], "coco_tool": [231, 273], "evaluate_squad": [232, 274], "f1": [233, 275], "mixed_precis": [236, 444, 445, 446, 493], "model_convers": 237, "na": [238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 519, 555, 565, 610], "basic_na": 238, "dyna": 239, "dynast": [240, 241, 242, 243, 244, 245, 246, 247, 248, 249], "dynas_manag": 240, "dynas_predictor": 241, "dynas_search": 242, "dynas_util": 243, "supernetwork": [245, 246, 247, 248, 249], "machine_transl": [246, 247, 248, 249], "modules_supernetwork": 247, "transformer_interfac": 248, "transformer_supernetwork": 249, "nas_util": 252, "search_algorithm": 253, "prune": [254, 265, 300, 450, 451, 452, 495, 556, 565, 607, 608, 610, 620], "pruning_recip": [255, 256, 257, 258], "pattern": [256, 257, 258, 262, 292, 607, 608], "tile_pattern": 258, "pruning_v2": 259, "pytorch_prun": [260, 261, 262, 263, 264, 265, 266], "logger": [261, 291, 329, 478], "prune_util": 263, "pruner": [264, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303], "schedul": [266, 268, 302, 558, 607, 608], "mix_precis": 278, "base_model": 279, "keras_model": 281, "mxnet_model": 283, "nets_factori": 284, "onnx_model": 285, "tensorflow_model": 286, "torch_model": 287, "object": [288, 537, 604], "criteria": [289, 607, 608, 617], "pruner_legaci": [293, 294, 295, 296, 297, 298], "gradient_sensit": 293, "group_lasso": 294, "magnitud": 296, "pattern_lock": 297, "reg": 301, "auto_mixed_precis": 305, "basic": [306, 519, 617], "bayesian": [307, 617], "conserv": [308, 617], "exhaust": [309, 617], "hawq_v2": [310, 617], "mse": [312, 617], "mse_v2": [313, 617], "random": [314, 617], "constant": [316, 324], "tuning_sampl": 318, "tuning_spac": 319, "tuning_struct": 320, "train": [322, 518, 539, 572, 611], "collect_layer_histogram": 323, "create_obj_from_config": 325, "kl_diverg": 327, "load_huggingfac": 328, "option": [330, 565, 572, 590], "ux": [333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513], "benchmark_model": 334, "execute_benchmark": 335, "config_gener": [337, 338, 339, 340, 341, 342, 343, 344], "benchmark_config_gener": 337, "graph_optimization_config_gener": 339, "mixed_precision_config_gener": 341, "profiling_config_gener": 342, "pruning_config_gener": 343, "quantization_config_gener": 344, "configuration_wizard": [345, 346, 347, 348, 349, 350], "configuration_pars": 345, "get_boundary_nod": 346, "get_configur": 347, "params_feed": 349, "pruning_config_pars": 350, "db_manag": [351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386], "db_model": [352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "benchmark_result": 353, "domain": [356, 414], "domain_flavour": 357, "exampl": [358, 518, 519, 522, 566, 567, 568, 570, 571, 572, 573, 574, 583, 584, 587, 591, 604, 605, 607, 608, 611, 615, 620], "framework": [359, 567, 568, 574, 576, 584, 610], "optimization_typ": 364, "precis": [365, 536, 583, 612], "profil": [366, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 510, 565], "profiling_result": 367, "project": [368, 565], "pruning_detail": 369, "tuning_detail": 371, "tuning_histori": [372, 456], "db_oper": [373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383], "benchmark_api_interfac": 373, "dataset_api_interfac": 374, "diagnosis_api_interfac": 376, "dictionaries_api_interfac": 377, "examples_api_interfac": 378, "model_api_interfac": 380, "optimization_api_interfac": 381, "profiling_api_interfac": 382, "project_api_interfac": 383, "params_interfac": 385, "diagnosi": [387, 388, 389, 390, 391, 392, 393, 394, 395, 565], "factori": [388, 439, 458, 463], "onnx_diagnosi": [390, 391], "onnxrt_diagnosi": 391, "op_detail": 392, "op_entri": 393, "tensorflow_diagnosi": [394, 395], "file_brows": [396, 397], "graph": [398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 565], "collaps": 399, "edg": 400, "graph_read": 402, "node": 404, "reader": [405, 406, 407], "onnxrt_read": 406, "tensorflow_read": 407, "jobs_manag": [409, 410, 411, 412], "jobs_control_queu": 410, "request": [412, 517], "manage_workspac": 413, "model_type_gett": 417, "repositori": 422, "shape": 423, "frozen_pb": 424, "meta_graph": 427, "saved_model": 429, "model_zoo": [431, 432, 433, 434, 435], "download_config": 431, "download_model": 432, "download": 433, "list_model": 435, "names_mapp": [436, 437], "execute_optim": 438, "optimize_model": [442, 446, 448, 451], "neural_coder_optim": [447, 448], "tune": [453, 454, 455, 497, 611, 617], "tune_model": 454, "execute_profil": 457, "profile_model": 460, "tensorflow_profil": [463, 464, 465, 466], "inc_bench": 467, "const": 469, "environ": [470, 580, 588], "except": [471, 501], "executor": 472, "expiring_dict": 473, "github_info": 474, "hw_info": 475, "json_seri": 477, "parser": 479, "proc": 480, "process": [481, 617], "singleton": 482, "status_upd": 483, "templat": [484, 485, 486, 517], "workdir": 486, "workload": [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 513], "evalu": [490, 572], "yaml_util": 498, "web": [499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513], "commun": 499, "configur": [500, 572, 576, 606, 610, 614, 619], "router": 503, "server": 504, "servic": [505, 506, 507, 508, 509, 510, 511, 512, 513], "history_snapshot_pars": 506, "request_data_processor": 511, "response_gener": 512, "version": 514, "intel": [515, 521, 565, 579, 580, 588, 596, 602, 620, 621], "neural": [515, 518, 519, 521, 555, 565, 579, 580, 585, 589, 591, 596, 602, 607, 608, 614, 621], "compressor": [515, 518, 521, 565, 579, 580, 596, 602, 614, 621], "document": [515, 521, 621], "section": [515, 621], "contributor": [516, 517], "coven": [516, 517], "code": [516, 517, 519, 603], "conduct": [516, 517], "our": 516, "pledg": 516, "standard": 516, "respons": 516, "scope": [516, 608], "enforc": 516, "contribut": [517, 595, 599], "guidelin": 517, "pull": 517, "checklist": 517, "support": [517, 518, 519, 522, 566, 567, 568, 570, 571, 572, 574, 576, 579, 580, 582, 583, 584, 586, 587, 591, 592, 604, 605, 607, 610, 611, 615, 616, 619], "fx": 518, "introduct": [518, 519, 522, 565, 566, 567, 568, 570, 571, 572, 574, 576, 579, 582, 583, 584, 602, 604, 605, 607, 608, 610, 611, 614, 615, 616, 617, 619], "mode": [518, 620], "matrix": [518, 519, 522, 566, 567, 568, 570, 571, 572, 574, 576, 579, 582, 583, 584, 587, 604, 605, 607, 610, 611, 615, 619], "get": [518, 519, 521, 522, 566, 567, 568, 570, 571, 572, 576, 577, 582, 583, 585, 596, 603, 604, 605, 607, 610, 611, 615, 619], "start": [518, 519, 521, 522, 565, 566, 567, 568, 570, 571, 572, 576, 577, 582, 583, 585, 586, 590, 596, 604, 605, 607, 610, 611, 615, 619], "post": [518, 611], "static": [518, 611], "dynam": [518, 519, 611], "awar": [518, 611], "note": [518, 613], "detail": [518, 565, 608], "problem": 518, "architectur": [519, 555, 569, 579, 580], "search": [519, 555, 602], "api": [519, 521, 522, 532, 533, 551, 566, 567, 568, 570, 571, 572, 577, 578, 582, 583, 585, 589, 603, 604, 605, 607, 610], "usag": [519, 591, 602, 615, 617], "1": [519, 565, 572, 575, 578, 602, 620], "python": [519, 521, 561, 577, 582, 585, 589, 590, 597, 600, 610], "yaml": [519, 567, 568, 572, 576, 619], "2": [519, 551, 565, 572, 575, 578, 602, 620], "onli": 519, "advanc": 519, "custom": [519, 565, 582, 617], "secur": [520, 565, 572], "polici": [520, 617], "report": 520, "vulner": 520, "instal": [521, 565, 580, 586, 588, 595, 596, 599], "from": [521, 565, 580], "pypi": [521, 591], "select": [521, 596], "public": [521, 609], "event": [521, 609], "addit": 521, "research": 521, "collabor": 521, "work": [522, 611], "flow": [522, 611], "background": [522, 602], "ad": 522, "new": [522, 565, 597, 600, 617], "backend": 522, "capabl": 522, "implement": 522, "onnxrtadaptor": 522, "runtim": [524, 580, 611, 620], "torch": [525, 620], "convert": 526, "hawq": 527, "symbol": 529, "trace": 529, "user": [533, 567, 568, 572, 578, 610, 618, 619], "face": [533, 578], "mix": [536, 583, 612], "basedataload": 545, "experiement": 551, "deprec": 551, "0": [551, 620], "mixedprecis": 553, "modelconvers": 554, "bench": [565, 589], "tabl": 565, "binari": [565, 580], "sourc": [565, 580], "home": 565, "screen": 565, "creat": [565, 567], "predefin": 565, "displai": 565, "list": [565, 573, 616], "remov": 565, "develop": [565, 595, 599], "tab": 565, "wizard": 565, "edit": 565, "entri": 565, "inform": [565, 581], "demo": 565, "system": [565, 580, 606], "file": [567, 568, 576, 619], "specif": [567, 568], "design": [569, 617], "workflow": 569, "knowledg": [570, 620], "intermedi": 570, "layer": 570, "self": 570, "distribut": [572, 591], "infer": 572, "featur": [572, 576, 579, 591, 592, 596, 610, 611, 615, 619], "pure": 572, "defin": 572, "horovodrun": 572, "execut": 572, "releas": [573, 597, 600, 613], "fp32": 574, "appendix": 574, "frequent": 575, "ask": 575, "question": 575, "build": [575, 582], "issu": [575, 613], "3": [575, 586, 602, 609], "quick": [577, 590], "sampl": 577, "jupyterlab": [577, 596], "extens": [577, 585, 595, 596, 599, 602, 603, 620], "gui": 577, "valid": [577, 580, 620], "incompat": [578, 613], "chang": [578, 601, 603, 613], "between": 578, "v1": 578, "built": [578, 580, 582], "infrastructur": 579, "linux": 580, "prerequisit": 580, "ai": 580, "kit": 580, "window": 580, "requir": [580, 595, 599], "hardwar": [580, 620], "cpu": [580, 588, 620], "base": 580, "64": 580, "compat": 580, "processor": 580, "gpu": 580, "": [580, 603], "xe": 580, "multipl": [580, 604, 620], "vendor": 580, "through": [580, 620], "softwar": 580, "legal": 581, "licens": 581, "citat": 581, "trademark": 581, "singl": [582, 604], "multi": 582, "coder": [585, 589, 591, 602], "what": [585, 603], "do": 585, "we": 585, "offer": 585, "jupyt": [585, 586, 597, 600], "lab": [585, 586], "launcher": [585, 590], "contact": 585, "aw": 586, "amazon": 586, "sagemak": 586, "For": 586, "studio": 586, "notebook": 586, "instanc": 586, "guid": [586, 618], "bigdl": 587, "nano": 587, "platform": [588, 614], "best": [588, 596], "perform": [588, 614], "set": [588, 602], "mkl": 588, "openmp": 588, "jemalloc": 588, "numa": 588, "control": 588, "variabl": 588, "frequenc": 588, "govern": 588, "enabl": [589, 596, 602], "superbench": 589, "argument": 590, "v0": 593, "4": [593, 602, 609], "highlight": 593, "other": 593, "changelog": [594, 598], "neural_compressor_ext_lab": [595, 597], "uninstal": [595, 599], "auto": [596, 602, 612], "Or": 596, "let": 596, "u": 596, "help": 596, "you": 596, "pre": 596, "requisit": 596, "make": [597, 600, 603], "manual": [597, 600], "npm": [597, 600], "autom": [597, 600], "publish": [597, 600], "conda": [597, 600], "forg": [597, 600], "neural_compressor_ext_lab_alibaba": [599, 600], "log": 601, "unreleas": 601, "vscode": 602, "open": 602, "icon": 602, "5": 602, "welcom": 603, "your": 603, "v": 603, "folder": 603, "setup": 603, "up": 603, "run": 603, "straight": 603, "awai": 603, "explor": 603, "test": 603, "go": 603, "further": 603, "orchestr": 605, "One": 605, "shot": 605, "network": [607, 608], "type": 608, "sparsiti": 608, "decai": 608, "regular": 608, "refer": [608, 611], "full": 609, "56": 609, "2023": 609, "2022": 609, "34": 609, "2021": 609, "15": 609, "2018": 609, "2020": 609, "style": 610, "access": 610, "fundament": 611, "scheme": 611, "ipex": 611, "approach": 611, "accuraci": [611, 617], "turn": 612, "ON": 612, "dure": 612, "known": 613, "prepar": 614, "benefit": 614, "comparison": 614, "differ": 614, "tensorboard": 615, "space": 617, "exit": 617, "11": 620, "13": 620, "ptq": 620, "9": 620}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"644ec953a7dc_pruning_support": [[0, "module-644ec953a7dc_pruning_support"]], "6ece06672ed3_v1_14": [[1, "module-6ece06672ed3_v1_14"]], "Module Contents": [[1, "module-contents"], [5, "module-contents"], [6, "module-contents"], [8, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [102, "module-contents"], [104, "module-contents"], [105, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [111, "module-contents"], [112, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [116, "module-contents"], [117, "module-contents"], [118, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [130, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [152, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [174, "module-contents"], [175, "module-contents"], [176, "module-contents"], [179, "module-contents"], [180, "module-contents"], [182, "module-contents"], [183, "module-contents"], [184, "module-contents"], [185, "module-contents"], [186, "module-contents"], [187, "module-contents"], [189, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [194, "module-contents"], [195, "module-contents"], [197, "module-contents"], [198, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [204, "module-contents"], [205, "module-contents"], [206, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [210, "module-contents"], [212, "module-contents"], [213, "module-contents"], [214, "module-contents"], [217, "module-contents"], [219, "module-contents"], [220, "module-contents"], [221, "module-contents"], [223, "module-contents"], [224, "module-contents"], [225, "module-contents"], [226, "module-contents"], [228, "module-contents"], [229, "module-contents"], [231, "module-contents"], [232, "module-contents"], [233, "module-contents"], [235, "module-contents"], [236, "module-contents"], [237, "module-contents"], [238, "module-contents"], [239, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [247, "module-contents"], [248, "module-contents"], [249, "module-contents"], [251, "module-contents"], [252, "module-contents"], [253, "module-contents"], [254, "module-contents"], [257, "module-contents"], [258, "module-contents"], [259, "module-contents"], [262, "module-contents"], [263, "module-contents"], [264, "module-contents"], [265, "module-contents"], [266, "module-contents"], [267, "module-contents"], [268, "module-contents"], [270, "module-contents"], [271, "module-contents"], [273, "module-contents"], [274, "module-contents"], [275, "module-contents"], [277, "module-contents"], [278, "module-contents"], [279, "module-contents"], [281, "module-contents"], [282, "module-contents"], [283, "module-contents"], [284, "module-contents"], [285, "module-contents"], [286, "module-contents"], [287, "module-contents"], [288, "module-contents"], [289, "module-contents"], [292, "module-contents"], [293, "module-contents"], [294, "module-contents"], [296, "module-contents"], [297, "module-contents"], [298, "module-contents"], [299, "module-contents"], [300, "module-contents"], [301, "module-contents"], [302, "module-contents"], [303, "module-contents"], [304, "module-contents"], [305, "module-contents"], [306, "module-contents"], [307, "module-contents"], [308, "module-contents"], [309, "module-contents"], [310, "module-contents"], [312, "module-contents"], [313, "module-contents"], [314, "module-contents"], [315, "module-contents"], [318, "module-contents"], [319, "module-contents"], [320, "module-contents"], [321, "module-contents"], [322, "module-contents"], [323, "module-contents"], [325, "module-contents"], [327, "module-contents"], [328, "module-contents"], [329, "module-contents"], [330, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [337, "module-contents"], [338, "module-contents"], [339, "module-contents"], [341, "module-contents"], [342, "module-contents"], [343, "module-contents"], [344, "module-contents"], [345, "module-contents"], [346, "module-contents"], [347, "module-contents"], [349, "module-contents"], [350, "module-contents"], [351, "module-contents"], [352, "module-contents"], [353, "module-contents"], [354, "module-contents"], [355, "module-contents"], [356, "module-contents"], [357, "module-contents"], [358, "module-contents"], [359, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [365, "module-contents"], [366, "module-contents"], [367, "module-contents"], [368, "module-contents"], [369, "module-contents"], [370, "module-contents"], [371, "module-contents"], [372, "module-contents"], [373, "module-contents"], [374, "module-contents"], [375, "module-contents"], [376, "module-contents"], [377, "module-contents"], [378, "module-contents"], [380, "module-contents"], [381, "module-contents"], [382, "module-contents"], [383, "module-contents"], [385, "module-contents"], [386, "module-contents"], [387, "module-contents"], [388, "module-contents"], [391, "module-contents"], [392, "module-contents"], [393, "module-contents"], [395, "module-contents"], [396, "module-contents"], [398, "module-contents"], [399, "module-contents"], [400, "module-contents"], [401, "module-contents"], [402, "module-contents"], [404, "module-contents"], [406, "module-contents"], [407, "module-contents"], [413, "module-contents"], [414, "module-contents"], [416, "module-contents"], [417, "module-contents"], [419, "module-contents"], [421, "module-contents"], [422, "module-contents"], [423, "module-contents"], [424, "module-contents"], [426, "module-contents"], [427, "module-contents"], [428, "module-contents"], [429, "module-contents"], [430, "module-contents"], [431, "module-contents"], [432, "module-contents"], [433, "module-contents"], [435, "module-contents"], [437, "module-contents"], [438, "module-contents"], [439, "module-contents"], [440, "module-contents"], [442, "module-contents"], [445, "module-contents"], [446, "module-contents"], [448, "module-contents"], [449, "module-contents"], [451, "module-contents"], [452, "module-contents"], [454, "module-contents"], [455, "module-contents"], [456, "module-contents"], [457, "module-contents"], [458, "module-contents"], [460, "module-contents"], [461, "module-contents"], [462, "module-contents"], [463, "module-contents"], [465, "module-contents"], [466, "module-contents"], [467, "module-contents"], [469, "module-contents"], [470, "module-contents"], [471, "module-contents"], [472, "module-contents"], [473, "module-contents"], [474, "module-contents"], [475, "module-contents"], [477, "module-contents"], [478, "module-contents"], [479, "module-contents"], [480, "module-contents"], [481, "module-contents"], [482, "module-contents"], [483, "module-contents"], [485, "module-contents"], [486, "module-contents"], [487, "module-contents"], [488, "module-contents"], [489, "module-contents"], [490, "module-contents"], [491, "module-contents"], [493, "module-contents"], [494, "module-contents"], [495, "module-contents"], [496, "module-contents"], [497, "module-contents"], [498, "module-contents"], [499, "module-contents"], [500, "module-contents"], [501, "module-contents"], [503, "module-contents"], [504, "module-contents"], [505, "module-contents"], [506, "module-contents"], [508, "module-contents"], [509, "module-contents"], [510, "module-contents"], [511, "module-contents"], [512, "module-contents"], [513, "module-contents"], [542, "module-contents"]], "Functions": [[1, "functions"], [5, "functions"], [6, "functions"], [13, "functions"], [32, "functions"], [38, "functions"], [39, "functions"], [61, "functions"], [62, "functions"], [64, "functions"], [105, "functions"], [107, "functions"], [134, "functions"], [135, "functions"], [136, "functions"], [140, "functions"], [141, "functions"], [142, "functions"], [144, "functions"], [147, "functions"], [149, "functions"], [152, "functions"], [159, "functions"], [167, "functions"], [169, "functions"], [173, "functions"], [176, "functions"], [177, "functions"], [178, "functions"], [181, "functions"], [183, "functions"], [184, "functions"], [185, "functions"], [186, "functions"], [188, "functions"], [190, "functions"], [191, "functions"], [193, "functions"], [197, "functions"], [205, "functions"], [207, "functions"], [211, "functions"], [214, "functions"], [215, "functions"], [216, "functions"], [218, "functions"], [219, "functions"], [220, "functions"], [222, "functions"], [223, "functions"], [224, "functions"], [225, "functions"], [228, "functions"], [229, "functions"], [231, "functions"], [232, "functions"], [233, "functions"], [234, "functions"], [235, "functions"], [243, "functions"], [247, "functions"], [248, "functions"], [252, "functions"], [257, "functions"], [262, "functions"], [263, "functions"], [264, "functions"], [266, "functions"], [269, "functions"], [270, "functions"], [271, "functions"], [273, "functions"], [274, "functions"], [275, "functions"], [276, "functions"], [277, "functions"], [278, "functions"], [282, "functions"], [286, "functions"], [288, "functions"], [289, "functions"], [292, "functions"], [298, "functions"], [299, "functions"], [301, "functions"], [302, "functions"], [303, "functions"], [304, "functions"], [307, "functions"], [315, "functions"], [319, "functions"], [321, "functions"], [322, "functions"], [325, "functions"], [326, "functions"], [328, "functions"], [329, "functions"], [331, "functions"], [332, "functions"], [334, "functions"], [335, "functions"], [345, "functions"], [346, "functions"], [347, "functions"], [349, "functions"], [354, "functions"], [356, "functions"], [357, "functions"], [359, "functions"], [361, "functions"], [364, "functions"], [365, "functions"], [370, "functions"], [373, "functions"], [374, "functions"], [375, "functions"], [386, "functions"], [396, "functions"], [413, "functions"], [417, "functions"], [419, "functions"], [430, "functions"], [431, "functions"], [432, "functions"], [435, "functions"], [438, "functions"], [442, "functions"], [446, "functions"], [448, "functions"], [451, "functions"], [454, "functions"], [456, "functions"], [457, "functions"], [460, "functions"], [466, "functions"], [467, "functions"], [475, "functions"], [478, "functions"], [483, "functions"], [487, "functions"], [495, "functions"], [498, "functions"], [499, "functions"], [503, "functions"], [504, "functions"]], "6f0d0f71d92e_v1_13": [[2, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[3, "module-9e89549a08c8_v1_11"]], "block_mask": [[4, "module-block_mask"]], "env": [[5, "module-env"]], "neural_compressor.adaptor.adaptor": [[6, "module-neural_compressor.adaptor.adaptor"]], "Classes": [[6, "classes"], [8, "classes"], [11, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [102, "classes"], [104, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [111, "classes"], [112, "classes"], [113, "classes"], [114, "classes"], [115, "classes"], [116, "classes"], [117, "classes"], [118, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [130, "classes"], [132, "classes"], [133, "classes"], [135, "classes"], [136, "classes"], [138, "classes"], [139, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [145, "classes"], [146, "classes"], [147, "classes"], [148, "classes"], [149, "classes"], [152, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [158, "classes"], [159, "classes"], [160, "classes"], [161, "classes"], [162, "classes"], [163, "classes"], [164, "classes"], [165, "classes"], [166, "classes"], [167, "classes"], [168, "classes"], [169, "classes"], [170, "classes"], [171, "classes"], [172, "classes"], [173, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [177, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [181, "classes"], [182, "classes"], [183, "classes"], [184, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [194, "classes"], [195, "classes"], [197, "classes"], [198, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [225, "classes"], [226, "classes"], [227, "classes"], [228, "classes"], [231, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [247, "classes"], [249, "classes"], [250, "classes"], [251, "classes"], [253, "classes"], [254, "classes"], [255, "classes"], [256, "classes"], [257, "classes"], [258, "classes"], [259, "classes"], [262, "classes"], [264, "classes"], [265, "classes"], [266, "classes"], [267, "classes"], [268, "classes"], [269, "classes"], [270, "classes"], [273, "classes"], [276, "classes"], [277, "classes"], [279, "classes"], [280, "classes"], [281, "classes"], [282, "classes"], [283, "classes"], [284, "classes"], [285, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [292, "classes"], [293, "classes"], [294, "classes"], [296, "classes"], [297, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [302, "classes"], [305, "classes"], [306, "classes"], [307, "classes"], [308, "classes"], [309, "classes"], [310, "classes"], [312, "classes"], [313, "classes"], [314, "classes"], [315, "classes"], [317, "classes"], [318, "classes"], [319, "classes"], [320, "classes"], [321, "classes"], [322, "classes"], [323, "classes"], [326, "classes"], [327, "classes"], [328, "classes"], [329, "classes"], [330, "classes"], [332, "classes"], [333, "classes"], [336, "classes"], [337, "classes"], [338, "classes"], [339, "classes"], [341, "classes"], [342, "classes"], [343, "classes"], [344, "classes"], [345, "classes"], [349, "classes"], [350, "classes"], [351, "classes"], [352, "classes"], [353, "classes"], [354, "classes"], [355, "classes"], [356, "classes"], [357, "classes"], [358, "classes"], [359, "classes"], [361, "classes"], [362, "classes"], [363, "classes"], [364, "classes"], [365, "classes"], [366, "classes"], [367, "classes"], [368, "classes"], [369, "classes"], [370, "classes"], [371, "classes"], [372, "classes"], [373, "classes"], [374, "classes"], [376, "classes"], [377, "classes"], [378, "classes"], [379, "classes"], [380, "classes"], [381, "classes"], [382, "classes"], [383, "classes"], [384, "classes"], [385, "classes"], [387, "classes"], [388, "classes"], [391, "classes"], [392, "classes"], [393, "classes"], [395, "classes"], [398, "classes"], [399, "classes"], [400, "classes"], [401, "classes"], [402, "classes"], [404, "classes"], [406, "classes"], [407, "classes"], [414, "classes"], [416, "classes"], [419, "classes"], [421, "classes"], [422, "classes"], [423, "classes"], [424, "classes"], [426, "classes"], [427, "classes"], [428, "classes"], [429, "classes"], [433, "classes"], [437, "classes"], [439, "classes"], [440, "classes"], [443, "classes"], [445, "classes"], [449, "classes"], [452, "classes"], [455, "classes"], [456, "classes"], [458, "classes"], [461, "classes"], [462, "classes"], [463, "classes"], [465, "classes"], [469, "classes"], [470, "classes"], [472, "classes"], [473, "classes"], [474, "classes"], [475, "classes"], [477, "classes"], [479, "classes"], [480, "classes"], [481, "classes"], [482, "classes"], [485, "classes"], [486, "classes"], [488, "classes"], [489, "classes"], [490, "classes"], [491, "classes"], [493, "classes"], [494, "classes"], [495, "classes"], [496, "classes"], [497, "classes"], [499, "classes"], [500, "classes"], [501, "classes"], [503, "classes"], [505, "classes"], [506, "classes"], [508, "classes"], [509, "classes"], [510, "classes"], [511, "classes"], [512, "classes"], [513, "classes"], [542, "classes"], [555, "classes"]], "neural_compressor.adaptor": [[7, "module-neural_compressor.adaptor"]], "Subpackages": [[7, "subpackages"], [16, "subpackages"], [81, "subpackages"], [100, "subpackages"], [101, "subpackages"], [103, "subpackages"], [153, "subpackages"], [178, "subpackages"], [216, "subpackages"], [227, "subpackages"], [244, "subpackages"], [245, "subpackages"], [250, "subpackages"], [255, "subpackages"], [269, "subpackages"], [290, "subpackages"], [311, "subpackages"], [384, "subpackages"], [389, "subpackages"], [403, "subpackages"], [408, "subpackages"], [415, "subpackages"], [443, "subpackages"], [459, "subpackages"], [468, "subpackages"], [476, "subpackages"], [502, "subpackages"]], "Submodules": [[7, "submodules"], [12, "submodules"], [16, "submodules"], [28, "submodules"], [45, "submodules"], [70, "submodules"], [81, "submodules"], [89, "submodules"], [95, "submodules"], [100, "submodules"], [101, "submodules"], [103, "submodules"], [106, "submodules"], [119, "submodules"], [131, "submodules"], [137, "submodules"], [144, "submodules"], [154, "submodules"], [161, "submodules"], [173, "submodules"], [177, "submodules"], [181, "submodules"], [188, "submodules"], [199, "submodules"], [211, "submodules"], [215, "submodules"], [218, "submodules"], [222, "submodules"], [227, "submodules"], [234, "submodules"], [244, "submodules"], [246, "submodules"], [250, "submodules"], [256, "submodules"], [260, "submodules"], [269, "submodules"], [276, "submodules"], [280, "submodules"], [290, "submodules"], [295, "submodules"], [311, "submodules"], [317, "submodules"], [326, "submodules"], [336, "submodules"], [340, "submodules"], [348, "submodules"], [360, "submodules"], [379, "submodules"], [384, "submodules"], [389, "submodules"], [390, "submodules"], [394, "submodules"], [397, "submodules"], [403, "submodules"], [405, "submodules"], [408, "submodules"], [409, "submodules"], [415, "submodules"], [418, "submodules"], [420, "submodules"], [425, "submodules"], [434, "submodules"], [436, "submodules"], [441, "submodules"], [443, "submodules"], [444, "submodules"], [447, "submodules"], [450, "submodules"], [453, "submodules"], [459, "submodules"], [464, "submodules"], [468, "submodules"], [476, "submodules"], [484, "submodules"], [492, "submodules"], [502, "submodules"], [507, "submodules"]], "Package Contents": [[7, "package-contents"], [28, "package-contents"], [144, "package-contents"], [161, "package-contents"], [173, "package-contents"], [177, "package-contents"], [178, "package-contents"], [181, "package-contents"], [188, "package-contents"], [199, "package-contents"], [211, "package-contents"], [215, "package-contents"], [216, "package-contents"], [218, "package-contents"], [222, "package-contents"], [227, "package-contents"], [234, "package-contents"], [250, "package-contents"], [255, "package-contents"], [256, "package-contents"], [269, "package-contents"], [276, "package-contents"], [280, "package-contents"], [295, "package-contents"], [311, "package-contents"], [317, "package-contents"], [326, "package-contents"], [336, "package-contents"], [379, "package-contents"], [384, "package-contents"], [443, "package-contents"], [555, "package-contents"]], "neural_compressor.adaptor.keras": [[8, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils": [[9, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[10, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[16, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[17, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[18, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[19, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[20, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[21, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[22, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[23, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[24, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[25, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[28, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[29, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[30, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[31, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[32, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[33, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[34, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[35, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[36, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[37, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[38, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[39, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[40, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[41, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[42, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[43, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[44, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[45, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[99, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[100, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[101, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[102, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[103, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[104, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[105, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[106, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[107, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[108, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[129, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[130, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[131, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[132, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[133, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[134, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[135, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[136, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[137, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.onnx": [[138, "module-neural_compressor.adaptor.torch_utils.onnx"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[139, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[140, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[141, "module-neural_compressor.adaptor.torch_utils.util"]], "neural_compressor.algorithm.algorithm": [[142, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[143, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[144, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[145, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[146, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[147, "module-neural_compressor.benchmark"]], "neural_compressor.conf.config": [[148, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[149, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[150, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[151, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[152, "module-neural_compressor.config"]], "neural_compressor.contrib": [[153, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[154, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[155, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[156, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[157, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[158, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[159, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[160, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[161, "module-neural_compressor.data.dataloaders"]], "Attributes": [[161, "attributes"], [169, "attributes"], [178, "attributes"], [207, "attributes"], [216, "attributes"], [227, "attributes"], [255, "attributes"], [280, "attributes"], [326, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[162, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[163, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[164, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[165, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[166, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[167, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[168, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[169, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[170, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[171, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[172, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[173, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[174, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[175, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[176, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[177, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[178, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[179, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[180, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[181, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[182, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[183, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[184, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[185, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[186, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[187, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[188, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[189, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[190, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[191, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[192, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[193, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[194, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[195, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[196, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[197, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[198, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[199, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[200, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[201, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[202, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[203, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[204, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[205, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[206, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[207, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[208, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[209, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[210, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[211, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[212, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[213, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[214, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[215, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[216, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[217, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[218, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[219, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[220, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[221, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[222, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[223, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.torch2onnx": [[224, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.export.utils": [[225, "module-neural_compressor.experimental.export.utils"]], "neural_compressor.experimental.graph_optimization": [[226, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[227, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[228, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[229, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[230, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[231, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[232, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[233, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[234, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[235, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[236, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[237, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[238, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[239, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[240, "module-neural_compressor.experimental.nas.dynast.dynas_manager"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[241, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[242, "module-neural_compressor.experimental.nas.dynast.dynas_search"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[243, "module-neural_compressor.experimental.nas.dynast.dynas_utils"]], "neural_compressor.experimental.nas.dynast": [[244, "module-neural_compressor.experimental.nas.dynast"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[245, "module-neural_compressor.experimental.nas.dynast.supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[246, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[247, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[248, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[249, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"]], "neural_compressor.experimental.nas": [[250, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[251, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[252, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[253, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruning": [[254, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[255, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[256, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[257, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[258, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[259, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[260, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[261, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[262, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[263, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[264, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[265, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[266, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[267, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[268, "module-neural_compressor.experimental.scheduler"]], "neural_compressor": [[269, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[270, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[271, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[272, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[273, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[274, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[275, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[276, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[277, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[278, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[279, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[280, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[281, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[282, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[283, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[284, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[285, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[286, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[287, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[288, "module-neural_compressor.objective"]], "neural_compressor.pruner.criteria": [[289, "module-neural_compressor.pruner.criteria"]], "neural_compressor.pruner": [[290, "module-neural_compressor.pruner"]], "neural_compressor.pruner.logger": [[291, "module-neural_compressor.pruner.logger"]], "neural_compressor.pruner.patterns": [[292, "module-neural_compressor.pruner.patterns"]], "neural_compressor.pruner.pruner_legacy.gradient_sensitivity": [[293, "module-neural_compressor.pruner.pruner_legacy.gradient_sensitivity"]], "neural_compressor.pruner.pruner_legacy.group_lasso": [[294, "module-neural_compressor.pruner.pruner_legacy.group_lasso"]], "neural_compressor.pruner.pruner_legacy": [[295, "module-neural_compressor.pruner.pruner_legacy"]], "neural_compressor.pruner.pruner_legacy.magnitude": [[296, "module-neural_compressor.pruner.pruner_legacy.magnitude"]], "neural_compressor.pruner.pruner_legacy.pattern_lock": [[297, "module-neural_compressor.pruner.pruner_legacy.pattern_lock"]], "neural_compressor.pruner.pruner_legacy.pruner": [[298, "module-neural_compressor.pruner.pruner_legacy.pruner"]], "neural_compressor.pruner.pruners": [[299, "module-neural_compressor.pruner.pruners"]], "neural_compressor.pruner.pruning": [[300, "module-neural_compressor.pruner.pruning"]], "neural_compressor.pruner.regs": [[301, "module-neural_compressor.pruner.regs"]], "neural_compressor.pruner.schedulers": [[302, "module-neural_compressor.pruner.schedulers"]], "neural_compressor.pruner.utils": [[303, "module-neural_compressor.pruner.utils"]], "neural_compressor.quantization": [[304, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto_mixed_precision": [[305, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[306, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[307, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[308, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[309, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[310, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[311, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[312, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[313, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[314, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[315, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[316, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[317, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[318, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[319, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[320, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.util": [[321, "module-neural_compressor.strategy.utils.util"]], "neural_compressor.training": [[322, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[323, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[324, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[325, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[326, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[327, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[328, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[329, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[330, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[331, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[332, "module-neural_compressor.utils.utility"]], "neural_compressor.ux.components.benchmark.benchmark": [[333, "module-neural_compressor.ux.components.benchmark.benchmark"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[334, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[335, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "neural_compressor.ux.components.benchmark": [[336, "module-neural_compressor.ux.components.benchmark"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[337, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "neural_compressor.ux.components.config_generator.config_generator": [[338, "module-neural_compressor.ux.components.config_generator.config_generator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[339, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[340, "module-neural_compressor.ux.components.config_generator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[341, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[342, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[343, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[344, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[345, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[346, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[347, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "neural_compressor.ux.components.configuration_wizard": [[348, "module-neural_compressor.ux.components.configuration_wizard"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[349, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[350, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "neural_compressor.ux.components.db_manager.db_manager": [[351, "module-neural_compressor.ux.components.db_manager.db_manager"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[352, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[353, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[354, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[355, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[356, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[357, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "neural_compressor.ux.components.db_manager.db_models.example": [[358, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[359, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[360, "module-neural_compressor.ux.components.db_manager.db_models"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[361, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "neural_compressor.ux.components.db_manager.db_models.model": [[362, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[363, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[364, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[365, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[366, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[367, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "neural_compressor.ux.components.db_manager.db_models.project": [[368, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[369, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[370, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[371, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[372, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[373, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[374, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[375, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[376, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[377, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[378, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations": [[379, "module-neural_compressor.ux.components.db_manager.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[380, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[381, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[382, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[383, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "neural_compressor.ux.components.db_manager": [[384, "module-neural_compressor.ux.components.db_manager"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[385, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "neural_compressor.ux.components.db_manager.utils": [[386, "module-neural_compressor.ux.components.db_manager.utils"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[387, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[388, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[389, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[390, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[391, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.op_details": [[392, "module-neural_compressor.ux.components.diagnosis.op_details"]], "neural_compressor.ux.components.diagnosis.op_entry": [[393, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[394, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[395, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.file_browser.file_browser": [[396, "module-neural_compressor.ux.components.file_browser.file_browser"]], "neural_compressor.ux.components.file_browser": [[397, "module-neural_compressor.ux.components.file_browser"]], "neural_compressor.ux.components.graph.attribute": [[398, "module-neural_compressor.ux.components.graph.attribute"]], "neural_compressor.ux.components.graph.collapser": [[399, "module-neural_compressor.ux.components.graph.collapser"]], "neural_compressor.ux.components.graph.edge": [[400, "module-neural_compressor.ux.components.graph.edge"]], "neural_compressor.ux.components.graph.graph": [[401, "module-neural_compressor.ux.components.graph.graph"]], "neural_compressor.ux.components.graph.graph_reader": [[402, "module-neural_compressor.ux.components.graph.graph_reader"]], "neural_compressor.ux.components.graph": [[403, "module-neural_compressor.ux.components.graph"]], "neural_compressor.ux.components.graph.node": [[404, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[405, "module-neural_compressor.ux.components.graph.reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[406, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[407, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "neural_compressor.ux.components": [[408, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[409, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[410, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[411, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[412, "module-neural_compressor.ux.components.jobs_management.request"]], "neural_compressor.ux.components.manage_workspace": [[413, "module-neural_compressor.ux.components.manage_workspace"]], "neural_compressor.ux.components.model.domain": [[414, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[415, "module-neural_compressor.ux.components.model"]], "neural_compressor.ux.components.model.model": [[416, "module-neural_compressor.ux.components.model.model"]], "neural_compressor.ux.components.model.model_type_getter": [[417, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[418, "module-neural_compressor.ux.components.model.onnxrt"]], "neural_compressor.ux.components.model.onnxrt.model": [[419, "module-neural_compressor.ux.components.model.onnxrt.model"]], "neural_compressor.ux.components.model.pytorch": [[420, "module-neural_compressor.ux.components.model.pytorch"]], "neural_compressor.ux.components.model.pytorch.model": [[421, "module-neural_compressor.ux.components.model.pytorch.model"]], "neural_compressor.ux.components.model.repository": [[422, "module-neural_compressor.ux.components.model.repository"]], "neural_compressor.ux.components.model.shape": [[423, "module-neural_compressor.ux.components.model.shape"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[424, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "neural_compressor.ux.components.model.tensorflow": [[425, "module-neural_compressor.ux.components.model.tensorflow"]], "neural_compressor.ux.components.model.tensorflow.keras": [[426, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[427, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "neural_compressor.ux.components.model.tensorflow.model": [[428, "module-neural_compressor.ux.components.model.tensorflow.model"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[429, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "neural_compressor.ux.components.model.tensorflow.utils": [[430, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "neural_compressor.ux.components.model_zoo.download_config": [[431, "module-neural_compressor.ux.components.model_zoo.download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[432, "module-neural_compressor.ux.components.model_zoo.download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[433, "module-neural_compressor.ux.components.model_zoo.downloader"]], "neural_compressor.ux.components.model_zoo": [[434, "module-neural_compressor.ux.components.model_zoo"]], "neural_compressor.ux.components.model_zoo.list_models": [[435, "module-neural_compressor.ux.components.model_zoo.list_models"]], "neural_compressor.ux.components.names_mapper": [[436, "module-neural_compressor.ux.components.names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[437, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "neural_compressor.ux.components.optimization.execute_optimization": [[438, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "neural_compressor.ux.components.optimization.factory": [[439, "module-neural_compressor.ux.components.optimization.factory"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[440, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[441, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[442, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "neural_compressor.ux.components.optimization": [[443, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[444, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[445, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[446, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[447, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[448, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "neural_compressor.ux.components.optimization.optimization": [[449, "module-neural_compressor.ux.components.optimization.optimization"]], "neural_compressor.ux.components.optimization.pruning": [[450, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[451, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[452, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "neural_compressor.ux.components.optimization.tune": [[453, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[454, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[455, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "neural_compressor.ux.components.optimization.tuning_history": [[456, "module-neural_compressor.ux.components.optimization.tuning_history"]], "neural_compressor.ux.components.profiling.execute_profiling": [[457, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "neural_compressor.ux.components.profiling.factory": [[458, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[459, "module-neural_compressor.ux.components.profiling"]], "neural_compressor.ux.components.profiling.profile_model": [[460, "module-neural_compressor.ux.components.profiling.profile_model"]], "neural_compressor.ux.components.profiling.profiler": [[461, "module-neural_compressor.ux.components.profiling.profiler"]], "neural_compressor.ux.components.profiling.profiling": [[462, "module-neural_compressor.ux.components.profiling.profiling"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[463, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[464, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[465, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[466, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "neural_compressor.ux.inc_bench": [[467, "module-neural_compressor.ux.inc_bench"]], "neural_compressor.ux": [[468, "module-neural_compressor.ux"]], "neural_compressor.ux.utils.consts": [[469, "module-neural_compressor.ux.utils.consts"]], "neural_compressor.ux.utils.environment": [[470, "module-neural_compressor.ux.utils.environment"]], "neural_compressor.ux.utils.exceptions": [[471, "module-neural_compressor.ux.utils.exceptions"]], "neural_compressor.ux.utils.executor": [[472, "module-neural_compressor.ux.utils.executor"]], "neural_compressor.ux.utils.expiring_dict": [[473, "module-neural_compressor.ux.utils.expiring_dict"]], "neural_compressor.ux.utils.github_info": [[474, "module-neural_compressor.ux.utils.github_info"]], "neural_compressor.ux.utils.hw_info": [[475, "module-neural_compressor.ux.utils.hw_info"]], "neural_compressor.ux.utils": [[476, "module-neural_compressor.ux.utils"]], "neural_compressor.ux.utils.json_serializer": [[477, "module-neural_compressor.ux.utils.json_serializer"]], "neural_compressor.ux.utils.logger": [[478, "module-neural_compressor.ux.utils.logger"]], "neural_compressor.ux.utils.parser": [[479, "module-neural_compressor.ux.utils.parser"]], "neural_compressor.ux.utils.proc": [[480, "module-neural_compressor.ux.utils.proc"]], "neural_compressor.ux.utils.processes": [[481, "module-neural_compressor.ux.utils.processes"]], "neural_compressor.ux.utils.singleton": [[482, "module-neural_compressor.ux.utils.singleton"]], "neural_compressor.ux.utils.status_updates": [[483, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[484, "module-neural_compressor.ux.utils.templates"]], "neural_compressor.ux.utils.templates.metric": [[485, "module-neural_compressor.ux.utils.templates.metric"]], "neural_compressor.ux.utils.templates.workdir": [[486, "module-neural_compressor.ux.utils.templates.workdir"]], "neural_compressor.ux.utils.utils": [[487, "module-neural_compressor.ux.utils.utils"]], "neural_compressor.ux.utils.workload.config": [[488, "module-neural_compressor.ux.utils.workload.config"]], "neural_compressor.ux.utils.workload.dataloader": [[489, "module-neural_compressor.ux.utils.workload.dataloader"]], "neural_compressor.ux.utils.workload.evaluation": [[490, "module-neural_compressor.ux.utils.workload.evaluation"]], "neural_compressor.ux.utils.workload.graph_optimization": [[491, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "neural_compressor.ux.utils.workload": [[492, "module-neural_compressor.ux.utils.workload"]], "neural_compressor.ux.utils.workload.mixed_precision": [[493, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "neural_compressor.ux.utils.workload.model": [[494, "module-neural_compressor.ux.utils.workload.model"]], "neural_compressor.ux.utils.workload.pruning": [[495, "module-neural_compressor.ux.utils.workload.pruning"]], "neural_compressor.ux.utils.workload.quantization": [[496, "module-neural_compressor.ux.utils.workload.quantization"]], "neural_compressor.ux.utils.workload.tuning": [[497, "module-neural_compressor.ux.utils.workload.tuning"]], "neural_compressor.ux.utils.yaml_utils": [[498, "module-neural_compressor.ux.utils.yaml_utils"]], "neural_compressor.ux.web.communication": [[499, "module-neural_compressor.ux.web.communication"]], "neural_compressor.ux.web.configuration": [[500, "module-neural_compressor.ux.web.configuration"]], "neural_compressor.ux.web.exceptions": [[501, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[502, "module-neural_compressor.ux.web"]], "neural_compressor.ux.web.router": [[503, "module-neural_compressor.ux.web.router"]], "neural_compressor.ux.web.server": [[504, "module-neural_compressor.ux.web.server"]], "neural_compressor.ux.web.service.benchmark": [[505, "module-neural_compressor.ux.web.service.benchmark"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[506, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "neural_compressor.ux.web.service": [[507, "module-neural_compressor.ux.web.service"]], "neural_compressor.ux.web.service.model": [[508, "module-neural_compressor.ux.web.service.model"]], "neural_compressor.ux.web.service.optimization": [[509, "module-neural_compressor.ux.web.service.optimization"]], "neural_compressor.ux.web.service.profiling": [[510, "module-neural_compressor.ux.web.service.profiling"]], "neural_compressor.ux.web.service.request_data_processor": [[511, "module-neural_compressor.ux.web.service.request_data_processor"]], "neural_compressor.ux.web.service.response_generator": [[512, "module-neural_compressor.ux.web.service.response_generator"]], "neural_compressor.ux.web.service.workload": [[513, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[514, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[515, "intel-neural-compressor-documentation"], [621, "intel-neural-compressor-documentation"]], "Sections": [[515, "sections"], [621, "sections"]], "Contributor Covenant Code of Conduct": [[516, "contributor-covenant-code-of-conduct"], [517, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[516, "our-pledge"]], "Our Standards": [[516, "our-standards"]], "Our Responsibilities": [[516, "our-responsibilities"]], "Scope": [[516, "scope"]], "Enforcement": [[516, "enforcement"]], "Attribution": [[516, "attribution"]], "Contribution Guidelines": [[517, "contribution-guidelines"]], "Pull Request Checklist": [[517, "pull-request-checklist"]], "Pull Request Template": [[517, "pull-request-template"]], "Support": [[517, "support"]], "FX": [[518, "fx"]], "Introduction": [[518, "introduction"], [519, "introduction"], [522, "introduction"], [565, "introduction"], [566, "introduction"], [567, "introduction"], [568, "introduction"], [570, "introduction"], [571, "introduction"], [572, "introduction"], [574, "introduction"], [576, "introduction"], [579, "introduction"], [582, "introduction"], [583, "introduction"], [584, "introduction"], [604, "introduction"], [605, "introduction"], [607, "introduction"], [608, "introduction"], [610, "introduction"], [614, "introduction"], [615, "introduction"], [616, "introduction"], [617, "introduction"], [619, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[518, "fx-mode-support-matrix-in-neural-compressor"]], "Get Start": [[518, "get-start"]], "Post Training Static Quantization": [[518, "post-training-static-quantization"], [611, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[518, "post-training-dynamic-quantization"], [611, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[518, "quantization-aware-training"]], "Examples": [[518, "examples"], [519, "examples"], [566, "examples"], [567, "examples"], [568, "examples"], [570, "examples"], [571, "examples"], [572, "examples"], [573, "examples"], [574, "examples"], [583, "examples"], [584, "examples"], [605, "examples"], [607, "examples"], [611, "examples"], [615, "examples"]], "Note": [[518, "note"]], "Details": [[518, "details"]], "Common Problem": [[518, "common-problem"]], "Dynamic Quantization": [[518, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[518, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[519, "neural-architecture-search"]], "Basic NAS": [[519, "basic-nas"]], "Dynamic NAS": [[519, "dynamic-nas"]], "NAS Support Matrix": [[519, "nas-support-matrix"]], "Get Started with NAS API": [[519, "get-started-with-nas-api"]], "Basic Usage": [[519, "basic-usage"]], "1. Python code + YAML": [[519, "python-code-yaml"]], "2. Python code only": [[519, "python-code-only"]], "Advanced Usage (Custom NAS)": [[519, "advanced-usage-custom-nas"]], "Security Policy": [[520, "security-policy"]], "Report a Vulnerability": [[520, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[521, "intel-neural-compressor"], [602, "intel-neural-compressor"]], "Installation": [[521, "installation"], [580, "installation"], [596, "installation"]], "Install from pypi": [[521, "install-from-pypi"]], "Getting Started": [[521, "getting-started"], [577, "getting-started"]], "Quantization with Python API": [[521, "quantization-with-python-api"], [577, "quantization-with-python-api"]], "Documentation": [[521, "documentation"]], "Selected Publications/Events": [[521, "selected-publications-events"]], "Additional Content": [[521, "additional-content"]], "Research Collaborations": [[521, "research-collaborations"]], "Adaptor": [[522, "adaptor"], [523, "adaptor"]], "Adaptor Support Matrix": [[522, "adaptor-support-matrix"]], "Working Flow": [[522, "working-flow"], [611, "working-flow"]], "Get Start with Adaptor API": [[522, "get-start-with-adaptor-api"]], "Query API": [[522, "query-api"]], "Background": [[522, "background"]], "Query API Introduction": [[522, "query-api-introduction"]], "Example of Adding a New Backend Support": [[522, "example-of-adding-a-new-backend-support"]], "Capability": [[522, "capability"]], "Implement ONNXRTAdaptor Class": [[522, "implement-onnxrtadaptor-class"]], "ONNX Runtime": [[524, "onnx-runtime"]], "Torch Utils": [[525, "torch-utils"]], "Bf16 Convert": [[526, "bf16-convert"]], "Hawq Metric": [[527, "hawq-metric"]], "Onnx": [[528, "onnx"]], "Symbolic Trace": [[529, "symbolic-trace"]], "Util": [[530, "util"]], "Algorithm": [[531, "algorithm"]], "APIs": [[532, "apis"]], "User facing APIs": [[533, "user-facing-apis"]], "Benchmark": [[534, "benchmark"], [541, "benchmark"], [610, "benchmark"]], "Config": [[535, "config"]], "Mix Precision": [[536, "mix-precision"]], "Objective": [[537, "objective"], [604, "objective"]], "Quantization": [[538, "quantization"], [557, "quantization"], [610, "quantization"], [611, "quantization"]], "Training": [[539, "training"]], "Common": [[540, "common"]], "BLEU": [[542, "module-neural_compressor.experimental.metric.bleu"]], "Criterion": [[543, "criterion"]], "Data": [[544, "data"]], "Dataloader": [[545, "dataloader"]], "BaseDataLoader": [[545, "basedataloader"]], "dataloaders": [[545, "dataloaders"]], "Datasets": [[546, "datasets"]], "Transforms": [[547, "transforms"]], "Metric": [[548, "metric"]], "Model": [[549, "model"], [560, "model"], [584, "model"]], "Optimizer": [[550, "optimizer"]], "Component(experiemental API, deprecated in 2.0)": [[551, "component-experiemental-api-deprecated-in-2-0"]], "Distillation": [[552, "distillation"], [570, "distillation"], [610, "distillation"]], "MixedPrecision": [[553, "mixedprecision"]], "ModelConversion": [[554, "modelconversion"]], "Neural architecture search (NAS)": [[555, "neural-architecture-search-nas"]], "Pruning": [[556, "pruning"], [565, "pruning"], [607, "pruning"], [610, "pruning"]], "Scheduler": [[558, "scheduler"]], "Contrib": [[559, "contrib"]], "Pythonic": [[561, "pythonic"]], "Strategy": [[562, "strategy"]], "Strategies": [[563, "strategies"]], "Utils": [[564, "utils"]], "Intel\u00ae Neural Compressor Bench": [[565, "intel-neural-compressor-bench"]], "Table of Contents": [[565, "table-of-contents"]], "Install Intel\u00ae Neural Compressor with Bench": [[565, "install-intel-neural-compressor-with-bench"]], "Option 1: Install from Binary": [[565, "option-1-install-from-binary"]], "Option 2: Install from Source": [[565, "option-2-install-from-source"]], "Start the Intel\u00ae Neural Compressor Bench": [[565, "start-the-intel-neural-compressor-bench"]], "Home Screen": [[565, "home-screen"]], "Create New Project": [[565, "create-new-project"]], "Predefined Model": [[565, "predefined-model"]], "Custom Model": [[565, "custom-model"]], "Display Model Graph": [[565, "display-model-graph"]], "Project List": [[565, "project-list"]], "Remove Project": [[565, "remove-project"]], "Develop Project": [[565, "develop-project"]], "Optimization Tab": [[565, "optimization-tab"]], "Optimization Table": [[565, "optimization-table"]], "Optimization Wizard": [[565, "optimization-wizard"]], "Editing Optimization Entries": [[565, "editing-optimization-entries"]], "Optimization Details": [[565, "optimization-details"]], "Benchmark Tab": [[565, "benchmark-tab"]], "Benchmark Table": [[565, "benchmark-table"]], "Benchmark Wizard": [[565, "benchmark-wizard"]], "Editing Benchmark Entries": [[565, "editing-benchmark-entries"]], "Benchmark Details": [[565, "benchmark-details"]], "Profiling Tab": [[565, "profiling-tab"]], "Profiling Table": [[565, "profiling-table"]], "Profiling Wizard": [[565, "profiling-wizard"]], "Editing Profiling Entries": [[565, "editing-profiling-entries"]], "Profiling Details": [[565, "profiling-details"]], "Diagnosis Tab": [[565, "diagnosis-tab"]], "Dataset Tab": [[565, "dataset-tab"]], "Dataset List": [[565, "dataset-list"]], "Dataset Wizard": [[565, "dataset-wizard"]], "Dataset Details": [[565, "dataset-details"]], "Custom Dataset": [[565, "custom-dataset"]], "Project Information": [[565, "project-information"]], "NAS demo": [[565, "nas-demo"]], "System Information": [[565, "system-information"]], "Security": [[565, "security"], [572, "security"]], "Benchmarking": [[566, "benchmarking"]], "Benchmark Support Matrix": [[566, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[566, "get-started-with-benchmark-api"]], "DataLoader": [[567, "dataloader"]], "Supported Framework Dataloader Matrix": [[567, "supported-framework-dataloader-matrix"]], "Get Start with Dataloader API": [[567, "get-start-with-dataloader-api"]], "Config Dataloader in a Yaml File": [[567, "config-dataloader-in-a-yaml-file"]], "Create a User-specific Dataloader": [[567, "create-a-user-specific-dataloader"]], "Dataset": [[568, "dataset"]], "Supported Framework Dataset Matrix": [[568, "supported-framework-dataset-matrix"]], "TensorFlow": [[568, "tensorflow"], [582, "tensorflow"], [616, "tensorflow"]], "PyTorch": [[568, "pytorch"], [582, "pytorch"], [612, "pytorch"]], "MXNet": [[568, "mxnet"], [582, "mxnet"], [616, "mxnet"]], "ONNXRT": [[568, "onnxrt"], [582, "onnxrt"], [616, "onnxrt"]], "Get start with Dataset API": [[568, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[568, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[568, "user-specific-dataset"]], "Design": [[569, "design"], [617, "design"], [617, "id1"], [617, "id3"], [617, "id5"], [617, "id7"], [617, "id9"], [617, "id11"], [617, "id13"], [617, "id15"], [617, "id17"]], "Architecture": [[569, "architecture"], [579, "architecture"]], "Workflow": [[569, "workflow"]], "Knowledge Distillation": [[570, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[570, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[570, "self-distillation"]], "Distillation Support Matrix": [[570, "distillation-support-matrix"]], "Get Started with Distillation API": [[570, "get-started-with-distillation-api"]], "Distillation for Quantization": [[571, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[571, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[571, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[572, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[572, "supported-feature-matrix"], [576, "supported-feature-matrix"], [579, "supported-feature-matrix"], [610, "supported-feature-matrix"], [611, "supported-feature-matrix"], [615, "supported-feature-matrix"], [619, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[572, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[572, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[572, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[572, "horovodrun-execution"]], "PyTorch Examples:": [[572, "pytorch-examples"]], "TensorFlow Examples:": [[572, "tensorflow-examples"]], "Example List": [[573, "example-list"]], "Release Data": [[573, "release-data"]], "Export": [[574, "export"]], "Supported Framework Model Matrix": [[574, "supported-framework-model-matrix"], [584, "supported-framework-model-matrix"]], "FP32 Model Export": [[574, "fp32-model-export"]], "INT8 Model Export": [[574, "int8-model-export"]], "Appendix": [[574, "appendix"]], "Frequently Asked Questions": [[575, "frequently-asked-questions"]], "Common Build Issues": [[575, "common-build-issues"]], "Issue 1:": [[575, "issue-1"]], "Issue 2:": [[575, "issue-2"]], "Issue 3:": [[575, "issue-3"]], "Framework YAML Configuration Files": [[576, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[576, "get-started-with-framework-yaml-files"]], "Quick Samples": [[577, "quick-samples"]], "Quantization with JupyterLab Extension": [[577, "quantization-with-jupyterlab-extension"]], "Quantization with GUI": [[577, "quantization-with-gui"]], "Validated Models": [[577, "validated-models"], [620, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[578, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[578, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[578, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[579, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[580, "linux-installation"]], "Prerequisites": [[580, "prerequisites"], [580, "id1"]], "Install from Binary": [[580, "install-from-binary"], [580, "id2"]], "Install from Source": [[580, "install-from-source"], [580, "id3"]], "Install from AI Kit": [[580, "install-from-ai-kit"]], "Windows Installation": [[580, "windows-installation"]], "System Requirements": [[580, "system-requirements"]], "Validated Hardware Environment": [[580, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[580, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[580, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[580, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[580, "validated-software-environment"]], "Legal Information": [[581, "legal-information"]], "License": [[581, "license"]], "Citation": [[581, "citation"]], "Trademarks": [[581, "trademarks"]], "Metrics": [[582, "metrics"]], "Supported Built-in Metric Matrix": [[582, "supported-built-in-metric-matrix"]], "Get Start with Metrics": [[582, "get-start-with-metrics"]], "Support Single-metric and Multi-metrics": [[582, "support-single-metric-and-multi-metrics"]], "Build Custom Metric with Python API": [[582, "build-custom-metric-with-python-api"]], "Mixed Precision": [[583, "mixed-precision"]], "Mixed Precision Support Matrix": [[583, "mixed-precision-support-matrix"]], "Get Started with Mixed Precision API": [[583, "get-started-with-mixed-precision-api"]], "Neural Coder": [[585, "neural-coder"], [602, "neural-coder"], [602, "id1"]], "What do we offer?": [[585, "what-do-we-offer"]], "Getting Started!": [[585, "getting-started"], [596, "getting-started"]], "Jupyter Lab Extension": [[585, "jupyter-lab-extension"]], "Python Launcher": [[585, "python-launcher"], [590, "python-launcher"]], "Python API": [[585, "python-api"]], "Contact": [[585, "contact"]], "AWS Amazon SageMaker Support": [[586, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[586, "start-jupyter-lab-3"]], "For SageMaker Studio": [[586, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[586, "for-sagemaker-notebook-instance"]], "Installation Guide": [[586, "installation-guide"]], "BigDL Nano Support": [[587, "bigdl-nano-support"]], "Example": [[587, "example"], [591, "example"], [604, "example"]], "Support Matrix": [[587, "support-matrix"]], "Intel CPU Platforms: Best Performance Setting": [[588, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[588, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[588, "install-numa-controller"]], "Environment Variables": [[588, "environment-variables"]], "Frequency Governers": [[588, "frequency-governers"]], "Neural Coder as Python API": [[589, "neural-coder-as-python-api"]], "Enable": [[589, "enable"]], "Bench": [[589, "bench"]], "SuperBench": [[589, "superbench"]], "Quick-Start": [[590, "quick-start"]], "Launcher Arguments (Optional)": [[590, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[591, "neural-coder-for-quantization"]], "Features Supported": [[591, "features-supported"]], "Models Supported": [[591, "models-supported"]], "Usage": [[591, "usage"], [615, "usage"], [615, "id1"], [617, "usage"], [617, "id2"], [617, "id4"], [617, "id6"], [617, "id8"], [617, "id10"], [617, "id12"], [617, "id14"], [617, "id16"], [617, "id18"]], "PyPI distribution:": [[591, "pypi-distribution"]], "Supported Optimization Features": [[592, "supported-optimization-features"]], "v0.4": [[593, "v0-4"]], "Highlights": [[593, "highlights"]], "Others": [[593, "others"]], "Changelog": [[594, "changelog"], [598, "changelog"]], "neural_compressor_ext_lab": [[595, "neural-compressor-ext-lab"]], "Requirements": [[595, "requirements"], [599, "requirements"]], "Install": [[595, "install"], [599, "install"]], "Uninstall": [[595, "uninstall"], [599, "uninstall"]], "Contributing": [[595, "contributing"], [599, "contributing"]], "Development install": [[595, "development-install"], [599, "development-install"]], "Development uninstall": [[595, "development-uninstall"], [599, "development-uninstall"]], "Packaging the extension": [[595, "packaging-the-extension"], [599, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[596, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[596, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[596, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[596, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[597, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[597, "manual-release"], [600, "manual-release"]], "Python package": [[597, "python-package"], [600, "python-package"]], "NPM package": [[597, "npm-package"], [600, "npm-package"]], "Automated releases with the Jupyter Releaser": [[597, "automated-releases-with-the-jupyter-releaser"], [600, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[597, "publishing-to-conda-forge"], [600, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[599, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[600, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[601, "change-log"]], "[Unreleased]": [[601, "unreleased"]], "Background Introduction": [[602, "background-introduction"]], "Neural Coder Extension in VSCode": [[602, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[602, "neural-coder-extension-usage"]], "1. Open": [[602, "open"]], "2. Search": [[602, "search"]], "3. Setting": [[602, "setting"]], "4. Icon": [[602, "icon"]], "5. optimization (quantization)": [[602, "optimization-quantization"]], "5.1 Enable": [[602, "enable"]], "5.2 Auto": [[602, "auto"]], "Welcome to your VS Code Extension": [[603, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[603, "what-s-in-the-folder"]], "Setup": [[603, "setup"]], "Get up and running straight away": [[603, "get-up-and-running-straight-away"]], "Make changes": [[603, "make-changes"]], "Explore the API": [[603, "explore-the-api"]], "Run tests": [[603, "run-tests"]], "Go further": [[603, "go-further"]], "Single Objective": [[604, "single-objective"]], "Multiple Objectives": [[604, "multiple-objectives"]], "Objective Support Matrix": [[604, "objective-support-matrix"]], "Get Started with Objective API": [[604, "get-started-with-objective-api"]], "Config Single Objective": [[604, "config-single-objective"]], "Config Multiple Objectives": [[604, "config-multiple-objectives"]], "Optimization Orchestration": [[605, "optimization-orchestration"]], "One-shot": [[605, "one-shot"]], "Orchestration Support Matrix": [[605, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[605, "get-started-with-orchestration-api"]], "SYSTEM CONFIGURATION": [[606, "system-configuration"]], "Neural Network Pruning": [[607, "neural-network-pruning"], [608, "neural-network-pruning"]], "Pruning Patterns": [[607, "pruning-patterns"], [608, "pruning-patterns"]], "Pruning Criteria": [[607, "pruning-criteria"], [608, "pruning-criteria"]], "Pruning Schedule": [[607, "pruning-schedule"], [608, "pruning-schedule"]], "Pruning Support Matrix": [[607, "pruning-support-matrix"]], "Get Started with Pruning API": [[607, "get-started-with-pruning-api"]], "Pruning details": [[608, "pruning-details"]], "Pruning Type": [[608, "pruning-type"]], "Pruning Scope": [[608, "pruning-scope"]], "Sparsity Decay Type": [[608, "sparsity-decay-type"]], "Regularization": [[608, "regularization"]], "Pruning Examples": [[608, "pruning-examples"]], "Reference": [[608, "reference"], [611, "reference"]], "Full Publications/Events (56)": [[609, "full-publications-events-56"]], "2023 (3)": [[609, "id1"]], "2022 (34)": [[609, "id2"]], "2021 (15)": [[609, "id3"]], "2018 - 2020 (4)": [[609, "id4"]], "Pythonic Style Access for Configurations": [[610, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[610, "pythonic-api-for-user-configurations"], [610, "id1"]], "Pythonic API for Framework Configurations": [[610, "pythonic-api-for-framework-configurations"], [610, "id2"]], "Get Started with Pythonic API for Configurations": [[610, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[610, "nas"]], "Quantization Introduction": [[611, "quantization-introduction"]], "Quantization Fundamentals": [[611, "quantization-fundamentals"]], "Quantization Support Matrix": [[611, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[611, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[611, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[611, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[611, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[611, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[611, "quantization-approaches"]], "Quantization Aware Training": [[611, "quantization-aware-training"]], "Accuracy Aware Tuning": [[611, "accuracy-aware-tuning"]], "Get Started": [[611, "get-started"]], "Turn ON Auto Mixed Precision during Quantization": [[612, "turn-on-auto-mixed-precision-during-quantization"]], "Tensorflow": [[612, "tensorflow"]], "Release": [[613, "release"]], "Release Notes": [[613, "release-notes"]], "Known Issues": [[613, "known-issues"]], "Incompatible Changes": [[613, "incompatible-changes"]], "SigOpt Strategy": [[614, "sigopt-strategy"]], "Preparation": [[614, "preparation"]], "SigOpt Platform": [[614, "sigopt-platform"]], "Neural Compressor Configuration": [[614, "neural-compressor-configuration"]], "Performance": [[614, "performance"]], "Benefit of SigOpt Strategy": [[614, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[614, "performance-comparison-of-different-strategies"]], "TensorBoard": [[615, "tensorboard"]], "Get Started with TensorBoard": [[615, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[615, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[615, "tensorflow-tensorboard"]], "PyTorch Examples": [[615, "pytorch-examples"]], "TensorFlow Examples": [[615, "tensorflow-examples"]], "Transform": [[616, "transform"]], "Transform Support List": [[616, "transform-support-list"]], "Pytorch": [[616, "pytorch"]], "Tuning Strategies": [[617, "tuning-strategies"]], "Strategy Design": [[617, "strategy-design"]], "Tuning Space": [[617, "tuning-space"]], "Exit Policy": [[617, "exit-policy"]], "Accuracy Criteria": [[617, "accuracy-criteria"]], "Tuning Process": [[617, "tuning-process"]], "Tuning Algorithms": [[617, "tuning-algorithms"]], "Conservative Tuning": [[617, "conservative-tuning"]], "Basic": [[617, "basic"]], "MSE": [[617, "mse"]], "MSE_V2": [[617, "mse-v2"]], "HAWQ_V2": [[617, "hawq-v2"]], "Bayesian": [[617, "bayesian"]], "Exhaustive": [[617, "exhaustive"]], "Random": [[617, "random"]], "SigOpt": [[617, "sigopt"]], "TPE": [[617, "tpe"]], "Customize a New Tuning Strategy": [[617, "customize-a-new-tuning-strategy"]], "User Guide": [[618, "user-guide"]], "User YAML Configuration Files": [[619, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[619, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[620, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.11.0": [[620, "tensorflow-models-with-intel-tensorflow-2-11-0"]], "PyTorch Models with Torch 1.13.0+cpu in PTQ Mode": [[620, "pytorch-models-with-torch-1-13-0-cpu-in-ptq-mode"]], "PyTorch Models with Torch 1.13.0+cpu in QAT Mode": [[620, "pytorch-models-with-torch-1-13-0-cpu-in-qat-mode"]], "PyTorch Models with Torch and Intel\u00ae Extension for PyTorch* 1.13.0+cpu": [[620, "pytorch-models-with-torch-and-intel-extension-for-pytorch-1-13-0-cpu"]], "ONNX Models with ONNX Runtime 1.13.1": [[620, "onnx-models-with-onnx-runtime-1-13-1"]], "MXNet Models with MXNet 1.9.1": [[620, "mxnet-models-with-mxnet-1-9-1"]], "Validated Pruning Examples": [[620, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[620, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[620, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"644ec953a7dc_pruning_support": [[0, "module-644ec953a7dc_pruning_support"]], "module": [[0, "module-644ec953a7dc_pruning_support"], [1, "module-6ece06672ed3_v1_14"], [2, "module-6f0d0f71d92e_v1_13"], [3, "module-9e89549a08c8_v1_11"], [4, "module-block_mask"], [5, "module-env"], [6, "module-neural_compressor.adaptor.adaptor"], [7, "module-neural_compressor.adaptor"], [8, "module-neural_compressor.adaptor.keras"], [9, "module-neural_compressor.adaptor.keras_utils"], [10, "module-neural_compressor.adaptor.keras_utils.quantizer"], [11, "module-neural_compressor.adaptor.mxnet"], [12, "module-neural_compressor.adaptor.mxnet_utils"], [13, "module-neural_compressor.adaptor.mxnet_utils.util"], [14, "module-neural_compressor.adaptor.onnxrt"], [15, "module-neural_compressor.adaptor.ox_utils.calibration"], [16, "module-neural_compressor.adaptor.ox_utils"], [17, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [18, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [19, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [20, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [21, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [22, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [23, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [24, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [25, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [26, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [27, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [28, "module-neural_compressor.adaptor.ox_utils.operators"], [29, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [30, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [31, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [32, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [33, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [34, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [35, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [36, "module-neural_compressor.adaptor.ox_utils.operators.split"], [37, "module-neural_compressor.adaptor.ox_utils.quantizer"], [38, "module-neural_compressor.adaptor.ox_utils.util"], [39, "module-neural_compressor.adaptor.pytorch"], [40, "module-neural_compressor.adaptor.query"], [41, "module-neural_compressor.adaptor.tensorflow"], [42, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [43, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [44, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [45, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [99, "module-neural_compressor.adaptor.tf_utils.graph_util"], [100, "module-neural_compressor.adaptor.tf_utils"], [101, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [102, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [103, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [104, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [105, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [106, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [107, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [108, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [129, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [130, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [131, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [132, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [133, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [134, "module-neural_compressor.adaptor.tf_utils.util"], [135, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [136, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [137, "module-neural_compressor.adaptor.torch_utils"], [138, "module-neural_compressor.adaptor.torch_utils.onnx"], [139, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [140, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [141, "module-neural_compressor.adaptor.torch_utils.util"], [142, "module-neural_compressor.algorithm.algorithm"], [143, "module-neural_compressor.algorithm.fast_bias_correction"], [144, "module-neural_compressor.algorithm"], [145, "module-neural_compressor.algorithm.smooth_quant"], [146, "module-neural_compressor.algorithm.weight_correction"], [147, "module-neural_compressor.benchmark"], [148, "module-neural_compressor.conf.config"], [149, "module-neural_compressor.conf.dotdict"], [150, "module-neural_compressor.conf"], [151, "module-neural_compressor.conf.pythonic_config"], [152, "module-neural_compressor.config"], [153, "module-neural_compressor.contrib"], [154, "module-neural_compressor.contrib.strategy"], [155, "module-neural_compressor.contrib.strategy.sigopt"], [156, "module-neural_compressor.contrib.strategy.tpe"], [157, "module-neural_compressor.data.dataloaders.base_dataloader"], [158, "module-neural_compressor.data.dataloaders.dataloader"], [159, "module-neural_compressor.data.dataloaders.default_dataloader"], [160, "module-neural_compressor.data.dataloaders.fetcher"], [161, "module-neural_compressor.data.dataloaders"], [162, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [163, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [164, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [165, "module-neural_compressor.data.dataloaders.sampler"], [166, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [167, "module-neural_compressor.data.datasets.bert_dataset"], [168, "module-neural_compressor.data.datasets.coco_dataset"], [169, "module-neural_compressor.data.datasets.dataset"], [170, "module-neural_compressor.data.datasets.dummy_dataset"], [171, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [172, "module-neural_compressor.data.datasets.imagenet_dataset"], [173, "module-neural_compressor.data.datasets"], [174, "module-neural_compressor.data.datasets.style_transfer_dataset"], [175, "module-neural_compressor.data.filters.coco_filter"], [176, "module-neural_compressor.data.filters.filter"], [177, "module-neural_compressor.data.filters"], [178, "module-neural_compressor.data"], [179, "module-neural_compressor.data.transforms.coco_transform"], [180, "module-neural_compressor.data.transforms.imagenet_transform"], [181, "module-neural_compressor.data.transforms"], [182, "module-neural_compressor.data.transforms.postprocess"], [183, "module-neural_compressor.data.transforms.tokenization"], [184, "module-neural_compressor.data.transforms.transform"], [185, "module-neural_compressor.experimental.benchmark"], [186, "module-neural_compressor.experimental.common.criterion"], [187, "module-neural_compressor.experimental.common.dataloader"], [188, "module-neural_compressor.experimental.common"], [189, "module-neural_compressor.experimental.common.metric"], [190, "module-neural_compressor.experimental.common.model"], [191, "module-neural_compressor.experimental.common.optimizer"], [192, "module-neural_compressor.experimental.common.postprocess"], [193, "module-neural_compressor.experimental.common.torch_utils"], [194, "module-neural_compressor.experimental.component"], [195, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [196, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [197, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [198, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [199, "module-neural_compressor.experimental.data.dataloaders"], [200, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [201, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [202, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [203, "module-neural_compressor.experimental.data.dataloaders.sampler"], [204, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [205, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [206, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [207, "module-neural_compressor.experimental.data.datasets.dataset"], [208, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [209, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [210, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [211, "module-neural_compressor.experimental.data.datasets"], [212, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [213, "module-neural_compressor.experimental.data.filters.coco_filter"], [214, "module-neural_compressor.experimental.data.filters.filter"], [215, "module-neural_compressor.experimental.data.filters"], [216, "module-neural_compressor.experimental.data"], [217, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [218, "module-neural_compressor.experimental.data.transforms"], [219, "module-neural_compressor.experimental.data.transforms.tokenization"], [220, "module-neural_compressor.experimental.data.transforms.transform"], [221, "module-neural_compressor.experimental.distillation"], [222, "module-neural_compressor.experimental.export"], [223, "module-neural_compressor.experimental.export.qlinear2qdq"], [224, "module-neural_compressor.experimental.export.torch2onnx"], [225, "module-neural_compressor.experimental.export.utils"], [226, "module-neural_compressor.experimental.graph_optimization"], [227, "module-neural_compressor.experimental"], [228, "module-neural_compressor.experimental.metric.bleu"], [229, "module-neural_compressor.experimental.metric.bleu_util"], [230, "module-neural_compressor.experimental.metric.coco_label_map"], [231, "module-neural_compressor.experimental.metric.coco_tools"], [232, "module-neural_compressor.experimental.metric.evaluate_squad"], [233, "module-neural_compressor.experimental.metric.f1"], [234, "module-neural_compressor.experimental.metric"], [235, "module-neural_compressor.experimental.metric.metric"], [236, "module-neural_compressor.experimental.mixed_precision"], [237, "module-neural_compressor.experimental.model_conversion"], [238, "module-neural_compressor.experimental.nas.basic_nas"], [239, "module-neural_compressor.experimental.nas.dynas"], [240, "module-neural_compressor.experimental.nas.dynast.dynas_manager"], [241, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"], [242, "module-neural_compressor.experimental.nas.dynast.dynas_search"], [243, "module-neural_compressor.experimental.nas.dynast.dynas_utils"], [244, "module-neural_compressor.experimental.nas.dynast"], [245, "module-neural_compressor.experimental.nas.dynast.supernetwork"], [246, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"], [247, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"], [248, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"], [249, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"], [250, "module-neural_compressor.experimental.nas"], [251, "module-neural_compressor.experimental.nas.nas"], [252, "module-neural_compressor.experimental.nas.nas_utils"], [253, "module-neural_compressor.experimental.nas.search_algorithms"], [254, "module-neural_compressor.experimental.pruning"], [255, "module-neural_compressor.experimental.pruning_recipes"], [256, "module-neural_compressor.experimental.pruning_recipes.patterns"], [257, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [258, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [259, "module-neural_compressor.experimental.pruning_v2"], [260, "module-neural_compressor.experimental.pytorch_pruner"], [261, "module-neural_compressor.experimental.pytorch_pruner.logger"], [262, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [263, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [264, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [265, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [266, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [267, "module-neural_compressor.experimental.quantization"], [268, "module-neural_compressor.experimental.scheduler"], [269, "module-neural_compressor"], [270, "module-neural_compressor.metric.bleu"], [271, "module-neural_compressor.metric.bleu_util"], [272, "module-neural_compressor.metric.coco_label_map"], [273, "module-neural_compressor.metric.coco_tools"], [274, "module-neural_compressor.metric.evaluate_squad"], [275, "module-neural_compressor.metric.f1"], [276, "module-neural_compressor.metric"], [277, "module-neural_compressor.metric.metric"], [278, "module-neural_compressor.mix_precision"], [279, "module-neural_compressor.model.base_model"], [280, "module-neural_compressor.model"], [281, "module-neural_compressor.model.keras_model"], [282, "module-neural_compressor.model.model"], [283, "module-neural_compressor.model.mxnet_model"], [284, "module-neural_compressor.model.nets_factory"], [285, "module-neural_compressor.model.onnx_model"], [286, "module-neural_compressor.model.tensorflow_model"], [287, "module-neural_compressor.model.torch_model"], [288, "module-neural_compressor.objective"], [289, "module-neural_compressor.pruner.criteria"], [290, "module-neural_compressor.pruner"], [291, "module-neural_compressor.pruner.logger"], [292, "module-neural_compressor.pruner.patterns"], [293, "module-neural_compressor.pruner.pruner_legacy.gradient_sensitivity"], [294, "module-neural_compressor.pruner.pruner_legacy.group_lasso"], [295, "module-neural_compressor.pruner.pruner_legacy"], [296, "module-neural_compressor.pruner.pruner_legacy.magnitude"], [297, "module-neural_compressor.pruner.pruner_legacy.pattern_lock"], [298, "module-neural_compressor.pruner.pruner_legacy.pruner"], [299, "module-neural_compressor.pruner.pruners"], [300, "module-neural_compressor.pruner.pruning"], [301, "module-neural_compressor.pruner.regs"], [302, "module-neural_compressor.pruner.schedulers"], [303, "module-neural_compressor.pruner.utils"], [304, "module-neural_compressor.quantization"], [305, "module-neural_compressor.strategy.auto_mixed_precision"], [306, "module-neural_compressor.strategy.basic"], [307, "module-neural_compressor.strategy.bayesian"], [308, "module-neural_compressor.strategy.conservative"], [309, "module-neural_compressor.strategy.exhaustive"], [310, "module-neural_compressor.strategy.hawq_v2"], [311, "module-neural_compressor.strategy"], [312, "module-neural_compressor.strategy.mse"], [313, "module-neural_compressor.strategy.mse_v2"], [314, "module-neural_compressor.strategy.random"], [315, "module-neural_compressor.strategy.strategy"], [316, "module-neural_compressor.strategy.utils.constant"], [317, "module-neural_compressor.strategy.utils"], [318, "module-neural_compressor.strategy.utils.tuning_sampler"], [319, "module-neural_compressor.strategy.utils.tuning_space"], [320, "module-neural_compressor.strategy.utils.tuning_structs"], [321, "module-neural_compressor.strategy.utils.util"], [322, "module-neural_compressor.training"], [323, "module-neural_compressor.utils.collect_layer_histogram"], [324, "module-neural_compressor.utils.constant"], [325, "module-neural_compressor.utils.create_obj_from_config"], [326, "module-neural_compressor.utils"], [327, "module-neural_compressor.utils.kl_divergence"], [328, "module-neural_compressor.utils.load_huggingface"], [329, "module-neural_compressor.utils.logger"], [330, "module-neural_compressor.utils.options"], [331, "module-neural_compressor.utils.pytorch"], [332, "module-neural_compressor.utils.utility"], [333, "module-neural_compressor.ux.components.benchmark.benchmark"], [334, "module-neural_compressor.ux.components.benchmark.benchmark_model"], [335, "module-neural_compressor.ux.components.benchmark.execute_benchmark"], [336, "module-neural_compressor.ux.components.benchmark"], [337, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"], [338, "module-neural_compressor.ux.components.config_generator.config_generator"], [339, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"], [340, "module-neural_compressor.ux.components.config_generator"], [341, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"], [342, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"], [343, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"], [344, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"], [345, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"], [346, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"], [347, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"], [348, "module-neural_compressor.ux.components.configuration_wizard"], [349, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"], [350, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"], [351, "module-neural_compressor.ux.components.db_manager.db_manager"], [352, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"], [353, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"], [354, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"], [355, "module-neural_compressor.ux.components.db_manager.db_models.dataset"], [356, "module-neural_compressor.ux.components.db_manager.db_models.domain"], [357, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"], [358, "module-neural_compressor.ux.components.db_manager.db_models.example"], [359, "module-neural_compressor.ux.components.db_manager.db_models.framework"], [360, "module-neural_compressor.ux.components.db_manager.db_models"], [361, "module-neural_compressor.ux.components.db_manager.db_models.metric"], [362, "module-neural_compressor.ux.components.db_manager.db_models.model"], [363, "module-neural_compressor.ux.components.db_manager.db_models.optimization"], [364, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"], [365, "module-neural_compressor.ux.components.db_manager.db_models.precision"], [366, "module-neural_compressor.ux.components.db_manager.db_models.profiling"], [367, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"], [368, "module-neural_compressor.ux.components.db_manager.db_models.project"], [369, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"], [370, "module-neural_compressor.ux.components.db_manager.db_models.transform"], [371, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"], [372, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"], [373, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"], [374, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"], [375, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"], [376, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"], [377, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"], [378, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"], [379, "module-neural_compressor.ux.components.db_manager.db_operations"], [380, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"], [381, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"], [382, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"], [383, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"], [384, "module-neural_compressor.ux.components.db_manager"], [385, "module-neural_compressor.ux.components.db_manager.params_interfaces"], [386, "module-neural_compressor.ux.components.db_manager.utils"], [387, "module-neural_compressor.ux.components.diagnosis.diagnosis"], [388, "module-neural_compressor.ux.components.diagnosis.factory"], [389, "module-neural_compressor.ux.components.diagnosis"], [390, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"], [391, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"], [392, "module-neural_compressor.ux.components.diagnosis.op_details"], [393, "module-neural_compressor.ux.components.diagnosis.op_entry"], [394, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"], [395, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"], [396, "module-neural_compressor.ux.components.file_browser.file_browser"], [397, "module-neural_compressor.ux.components.file_browser"], [398, "module-neural_compressor.ux.components.graph.attribute"], [399, "module-neural_compressor.ux.components.graph.collapser"], [400, "module-neural_compressor.ux.components.graph.edge"], [401, "module-neural_compressor.ux.components.graph.graph"], [402, "module-neural_compressor.ux.components.graph.graph_reader"], [403, "module-neural_compressor.ux.components.graph"], [404, "module-neural_compressor.ux.components.graph.node"], [405, "module-neural_compressor.ux.components.graph.reader"], [406, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"], [407, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"], [408, "module-neural_compressor.ux.components"], [409, "module-neural_compressor.ux.components.jobs_management"], [410, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"], [411, "module-neural_compressor.ux.components.jobs_management.jobs_manager"], [412, "module-neural_compressor.ux.components.jobs_management.request"], [413, "module-neural_compressor.ux.components.manage_workspace"], [414, "module-neural_compressor.ux.components.model.domain"], [415, "module-neural_compressor.ux.components.model"], [416, "module-neural_compressor.ux.components.model.model"], [417, "module-neural_compressor.ux.components.model.model_type_getter"], [418, "module-neural_compressor.ux.components.model.onnxrt"], [419, "module-neural_compressor.ux.components.model.onnxrt.model"], [420, "module-neural_compressor.ux.components.model.pytorch"], [421, "module-neural_compressor.ux.components.model.pytorch.model"], [422, "module-neural_compressor.ux.components.model.repository"], [423, "module-neural_compressor.ux.components.model.shape"], [424, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"], [425, "module-neural_compressor.ux.components.model.tensorflow"], [426, "module-neural_compressor.ux.components.model.tensorflow.keras"], [427, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"], [428, "module-neural_compressor.ux.components.model.tensorflow.model"], [429, "module-neural_compressor.ux.components.model.tensorflow.saved_model"], [430, "module-neural_compressor.ux.components.model.tensorflow.utils"], [431, "module-neural_compressor.ux.components.model_zoo.download_config"], [432, "module-neural_compressor.ux.components.model_zoo.download_model"], [433, "module-neural_compressor.ux.components.model_zoo.downloader"], [434, "module-neural_compressor.ux.components.model_zoo"], [435, "module-neural_compressor.ux.components.model_zoo.list_models"], [436, "module-neural_compressor.ux.components.names_mapper"], [437, "module-neural_compressor.ux.components.names_mapper.names_mapper"], [438, "module-neural_compressor.ux.components.optimization.execute_optimization"], [439, "module-neural_compressor.ux.components.optimization.factory"], [440, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"], [441, "module-neural_compressor.ux.components.optimization.graph_optimizer"], [442, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"], [443, "module-neural_compressor.ux.components.optimization"], [444, "module-neural_compressor.ux.components.optimization.mixed_precision"], [445, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"], [446, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"], [447, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"], [448, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"], [449, "module-neural_compressor.ux.components.optimization.optimization"], [450, "module-neural_compressor.ux.components.optimization.pruning"], [451, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"], [452, "module-neural_compressor.ux.components.optimization.pruning.pruning"], [453, "module-neural_compressor.ux.components.optimization.tune"], [454, "module-neural_compressor.ux.components.optimization.tune.tune_model"], [455, "module-neural_compressor.ux.components.optimization.tune.tuning"], [456, "module-neural_compressor.ux.components.optimization.tuning_history"], [457, "module-neural_compressor.ux.components.profiling.execute_profiling"], [458, "module-neural_compressor.ux.components.profiling.factory"], [459, "module-neural_compressor.ux.components.profiling"], [460, "module-neural_compressor.ux.components.profiling.profile_model"], [461, "module-neural_compressor.ux.components.profiling.profiler"], [462, "module-neural_compressor.ux.components.profiling.profiling"], [463, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"], [464, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"], [465, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"], [466, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"], [467, "module-neural_compressor.ux.inc_bench"], [468, "module-neural_compressor.ux"], [469, "module-neural_compressor.ux.utils.consts"], [470, "module-neural_compressor.ux.utils.environment"], [471, "module-neural_compressor.ux.utils.exceptions"], [472, "module-neural_compressor.ux.utils.executor"], [473, "module-neural_compressor.ux.utils.expiring_dict"], [474, "module-neural_compressor.ux.utils.github_info"], [475, "module-neural_compressor.ux.utils.hw_info"], [476, "module-neural_compressor.ux.utils"], [477, "module-neural_compressor.ux.utils.json_serializer"], [478, "module-neural_compressor.ux.utils.logger"], [479, "module-neural_compressor.ux.utils.parser"], [480, "module-neural_compressor.ux.utils.proc"], [481, "module-neural_compressor.ux.utils.processes"], [482, "module-neural_compressor.ux.utils.singleton"], [483, "module-neural_compressor.ux.utils.status_updates"], [484, "module-neural_compressor.ux.utils.templates"], [485, "module-neural_compressor.ux.utils.templates.metric"], [486, "module-neural_compressor.ux.utils.templates.workdir"], [487, "module-neural_compressor.ux.utils.utils"], [488, "module-neural_compressor.ux.utils.workload.config"], [489, "module-neural_compressor.ux.utils.workload.dataloader"], [490, "module-neural_compressor.ux.utils.workload.evaluation"], [491, "module-neural_compressor.ux.utils.workload.graph_optimization"], [492, "module-neural_compressor.ux.utils.workload"], [493, "module-neural_compressor.ux.utils.workload.mixed_precision"], [494, "module-neural_compressor.ux.utils.workload.model"], [495, "module-neural_compressor.ux.utils.workload.pruning"], [496, "module-neural_compressor.ux.utils.workload.quantization"], [497, "module-neural_compressor.ux.utils.workload.tuning"], [498, "module-neural_compressor.ux.utils.yaml_utils"], [499, "module-neural_compressor.ux.web.communication"], [500, "module-neural_compressor.ux.web.configuration"], [501, "module-neural_compressor.ux.web.exceptions"], [502, "module-neural_compressor.ux.web"], [503, "module-neural_compressor.ux.web.router"], [504, "module-neural_compressor.ux.web.server"], [505, "module-neural_compressor.ux.web.service.benchmark"], [506, "module-neural_compressor.ux.web.service.history_snapshot_parser"], [507, "module-neural_compressor.ux.web.service"], [508, "module-neural_compressor.ux.web.service.model"], [509, "module-neural_compressor.ux.web.service.optimization"], [510, "module-neural_compressor.ux.web.service.profiling"], [511, "module-neural_compressor.ux.web.service.request_data_processor"], [512, "module-neural_compressor.ux.web.service.response_generator"], [513, "module-neural_compressor.ux.web.service.workload"], [514, "module-neural_compressor.version"], [542, "module-neural_compressor.experimental.metric.bleu"]], "6ece06672ed3_v1_14": [[1, "module-6ece06672ed3_v1_14"]], "update_dataloaders() (in module 6ece06672ed3_v1_14)": [[1, "ece06672ed3_v1_14.update_dataloaders"]], "update_transformations() (in module 6ece06672ed3_v1_14)": [[1, "ece06672ed3_v1_14.update_transformations"]], "6f0d0f71d92e_v1_13": [[2, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[3, "module-9e89549a08c8_v1_11"]], "block_mask": [[4, "module-block_mask"]], "env": [[5, "module-env"]], "run_migrations_offline() (in module env)": [[5, "env.run_migrations_offline"]], "run_migrations_online() (in module env)": [[5, "env.run_migrations_online"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[6, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[6, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "convert() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.convert"]], "evaluate() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.evaluate"]], "inspect_tensor() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.inspect_tensor"]], "neural_compressor.adaptor.adaptor": [[6, "module-neural_compressor.adaptor.adaptor"]], "quantize() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.quantize_input"]], "query_fused_patterns() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.query_fused_patterns"]], "query_fw_capability() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.save"]], "set_tensor() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.set_tensor"]], "neural_compressor.adaptor": [[7, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.adaptor.keras)": [[8, "neural_compressor.adaptor.keras.KerasQuery"]], "convert() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.convert"]], "evaluate() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.evaluate"]], "get_op_types() (neural_compressor.adaptor.keras.kerasquery method)": [[8, "neural_compressor.adaptor.keras.KerasQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.keras.kerasquery method)": [[8, "neural_compressor.adaptor.keras.KerasQuery.get_op_types_by_precision"]], "get_optype_wise_ability() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.get_optype_wise_ability"]], "get_precisions() (neural_compressor.adaptor.keras.kerasquery method)": [[8, "neural_compressor.adaptor.keras.KerasQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.keras.kerasquery method)": [[8, "neural_compressor.adaptor.keras.KerasQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.keras.kerasquery method)": [[8, "neural_compressor.adaptor.keras.KerasQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.inspect_tensor"]], "neural_compressor.adaptor.keras": [[8, "module-neural_compressor.adaptor.keras"]], "quantize() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.quantize_input"]], "query_fw_capability() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.set_tensor"]], "neural_compressor.adaptor.keras_utils": [[9, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[10, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "evaluate() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor.evaluate"]], "inspect_tensor() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor.inspect_tensor"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "quantize() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor.query_fw_capability"]], "recover_tuned_model() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor.recover_tuned_model"]], "set_tensor() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor.set_tensor"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calc_kl_th_dict() (neural_compressor.adaptor.mxnet_utils.util.calibcollector method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector.calc_kl_th_dict"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.calibcollector method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector.collect_gluon"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.collect_gluon"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.namecollector method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.NameCollector.collect_gluon"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.tensorcollector method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector.collect_gluon"]], "collect_module() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.collect_module"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "min_max_dict (neural_compressor.adaptor.mxnet_utils.util.calibdata property)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData.min_max_dict"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "post_batch() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.post_batch"]], "post_collect() (neural_compressor.adaptor.mxnet_utils.util.calibdata method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData.post_collect"]], "pre_batch() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.pre_batch"]], "pre_batch() (neural_compressor.adaptor.mxnet_utils.util.tensorcollector method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector.pre_batch"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "evaluate() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.evaluate"]], "inspect_tensor() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.inspect_tensor"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "quantize() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.query_fw_capability"]], "recover() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.recover"]], "save() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.save"]], "smooth_quant() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.smooth_quant"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "augment_graph() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.augment_graph"]], "calculate_quantization_params() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calculate_quantization_params"]], "calculate_scale_zeropoint() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calculate_scale_zeropoint"]], "calib_smooth() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calib_smooth"]], "dump_calibration() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_calibration"]], "dump_minmax() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_minmax"]], "dump_tensor() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_tensor"]], "get_intermediate_outputs() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.get_intermediate_outputs"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[16, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.activation.qactivationoperator method)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[17, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.quantize"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.activation.removableactivationoperator method)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.quantize_check"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.activation.removableactivationoperator method)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator.quantize_check"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[18, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[18, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.argmax.argmaxoperator method)": [[18, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.argmax.argmaxoperator method)": [[18, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[18, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[19, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[19, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.attention.attentionoperator method)": [[19, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.attention.qattentionoperator method)": [[19, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.attention.attentionoperator method)": [[19, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[19, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.attention.attentionoperator method)": [[19, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator.quantize"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[20, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[20, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[20, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.binary_op.qbinaryoperator method)": [[20, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[20, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[20, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[20, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[20, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.quantize_check"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[21, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[21, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[21, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[21, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.concat.qconcatoperator method)": [[21, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[21, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[21, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[21, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[21, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.quantize_check"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[22, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[22, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.conv.convoperator method)": [[22, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.conv.qconvoperator method)": [[22, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.conv.convoperator method)": [[22, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[22, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.conv.convoperator method)": [[22, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator.quantize"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[23, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "directcastoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[23, "neural_compressor.adaptor.ox_utils.operators.direct_q8.DirectCastOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[23, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[23, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.cast"]], "cast() (neural_compressor.adaptor.ox_utils.operators.direct_q8.directcastoperator method)": [[23, "neural_compressor.adaptor.ox_utils.operators.direct_q8.DirectCastOperator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[23, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[23, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[23, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[23, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[23, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.quantize_check"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[24, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[24, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.embedlayernormalizationoperator method)": [[24, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.qembedlayernormalizationoperator method)": [[24, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.embedlayernormalizationoperator method)": [[24, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[24, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.embedlayernormalizationoperator method)": [[24, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator.quantize"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[25, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[25, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[25, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[25, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[25, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[25, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[25, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.quantize_check"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[26, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[26, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gavgpool.globalaveragepooloperator method)": [[26, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gavgpool.qglobalaveragepooloperator method)": [[26, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.gavgpool.globalaveragepooloperator method)": [[26, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[27, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[27, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[27, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gemm.qgemmoperator method)": [[27, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[27, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[27, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[27, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.quantize_check"]], "neural_compressor.adaptor.ox_utils.operators": [[28, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[29, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.lstm.lstmoperator method)": [[29, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.lstm.lstmoperator method)": [[29, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[29, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.lstm.lstmoperator method)": [[29, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator.quantize"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[30, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[30, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.matmul.matmuloperator method)": [[30, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.matmul.qmatmuloperator method)": [[30, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.matmul.matmuloperator method)": [[30, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[30, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.matmul.matmuloperator method)": [[30, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator.quantize"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[31, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[31, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[31, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[31, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[31, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[31, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[31, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.quantize_check"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.ops.qoperator method)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[32, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.quantize_check"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[33, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[33, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[33, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[33, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[33, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[33, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[33, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.quantize_check"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[34, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[34, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[34, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.pooling.qpooloperator method)": [[34, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[34, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[34, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[34, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[34, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.quantize_check"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[35, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[35, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[35, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[35, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[35, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[35, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[35, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.quantize_check"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[36, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[36, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[36, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.split.qsplitoperator method)": [[36, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[36, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[36, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.split": [[36, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[36, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.quantize"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "check_opset_version() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.check_opset_version"]], "convert_qdq_to_operator_oriented() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.convert_qdq_to_operator_oriented"]], "dequantize_tensor() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.dequantize_tensor"]], "dtype_cast() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.dtype_cast"]], "get_bias_add_nodes() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.get_bias_add_nodes"]], "insert_qdq() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.insert_qdq"]], "is_valid_quantize_weight() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.is_valid_quantize_weight"]], "merge_dedicated_qdq_pair() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.merge_dedicated_qdq_pair"]], "neural_compressor.adaptor.ox_utils.quantizer": [[37, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "quantize_bias() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_bias"]], "quantize_bias_tensor() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_bias_tensor"]], "quantize_inputs() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_inputs"]], "quantize_model() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_model"]], "quantize_outputs() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_outputs"]], "quantize_weight_per_channel() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_weight_per_channel"]], "quantize_weights_per_channel() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_weights_per_channel"]], "remove_redundant_pairs() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.remove_redundant_pairs"]], "should_cast() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.should_cast"]], "should_convert() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.should_convert"]], "should_quantize() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.should_quantize"]], "tensor_proto_to_array() (neural_compressor.adaptor.ox_utils.quantizer.quantizer static method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.tensor_proto_to_array"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "adjust_weights_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.adjust_weights_per_input"]], "adjust_weights_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.adjust_weights_per_op"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "get_smooth_scales_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.get_smooth_scales_per_input"]], "get_smooth_scales_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.get_smooth_scales_per_op"]], "insert_smooth_mul_op_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.insert_smooth_mul_op_per_input"]], "insert_smooth_mul_op_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.insert_smooth_mul_op_per_op"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[38, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchquery (class in neural_compressor.adaptor.pytorch)": [[39, "neural_compressor.adaptor.pytorch.PyTorchQuery"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[39, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "calculate_hessian_trace() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[39, "neural_compressor.adaptor.pytorch.TemplateAdaptor.calculate_hessian_trace"]], "calculate_op_sensitivity() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.calculate_op_sensitivity"]], "convert_sub_graph() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor static method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.convert_sub_graph"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.evaluate"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.evaluate"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.evaluate"]], "fuse_fx_model() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.fuse_fx_model"]], "get_non_quant_modules() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.get_non_quant_modules"]], "get_op_types() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_op_types_by_precision"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[39, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "get_quantization_capability() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_quantization_capability"]], "is_fused_child() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_fused_child"]], "is_fused_module() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[39, "neural_compressor.adaptor.pytorch.TemplateAdaptor.is_fused_module"]], "is_fused_op() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_fused_op"]], "is_last_fused_child() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_last_fused_child"]], "neural_compressor.adaptor.pytorch": [[39, "module-neural_compressor.adaptor.pytorch"]], "prepare_sub_graph() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor static method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.prepare_sub_graph"]], "quantize() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.query_fw_capability"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.query_fw_capability"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.save"]], "smooth_quant() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[39, "neural_compressor.adaptor.pytorch.TemplateAdaptor.smooth_quant"]], "train() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.train"]], "train() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.train"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[40, "neural_compressor.adaptor.query.QueryBackendCapability"]], "get_fuse_patterns() (neural_compressor.adaptor.query.querybackendcapability method)": [[40, "neural_compressor.adaptor.query.QueryBackendCapability.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.query.querybackendcapability method)": [[40, "neural_compressor.adaptor.query.QueryBackendCapability.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.query.querybackendcapability method)": [[40, "neural_compressor.adaptor.query.QueryBackendCapability.get_op_types"]], "get_precisions() (neural_compressor.adaptor.query.querybackendcapability method)": [[40, "neural_compressor.adaptor.query.QueryBackendCapability.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.query.querybackendcapability method)": [[40, "neural_compressor.adaptor.query.QueryBackendCapability.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.query.querybackendcapability method)": [[40, "neural_compressor.adaptor.query.QueryBackendCapability.get_version"]], "neural_compressor.adaptor.query": [[40, "module-neural_compressor.adaptor.query"]], "set_quantization_config() (neural_compressor.adaptor.query.querybackendcapability method)": [[40, "neural_compressor.adaptor.query.QueryBackendCapability.set_quantization_config"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[41, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "calculate_op_sensitivity() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.calculate_op_sensitivity"]], "convert() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.convert"]], "diagnosis_helper() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.diagnosis_helper"]], "evaluate() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.evaluate"]], "fused_node_mapping() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.fused_node_mapping"]], "generate_internal_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery.generate_internal_patterns"]], "get_bf16_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_bf16_patterns"]], "get_eightbit_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_eightbit_patterns"]], "get_fuse_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_op_types_by_precision"]], "get_optype_wise_ability() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.get_optype_wise_ability"]], "get_output_op_names() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.get_output_op_names"]], "get_quantization_capability() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_version"]], "inspect_activation() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_activation"]], "inspect_tensor() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_tensor"]], "inspect_weight_and_bias() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_weight_and_bias"]], "neural_compressor.adaptor.tensorflow": [[41, "module-neural_compressor.adaptor.tensorflow"]], "qat_convert() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.qat_convert"]], "quantize() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.tensorflow.tensorflow_itexadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.quantize_input"]], "query_fw_capability() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.query_fw_capability"]], "recover_tuned_model() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.recover_tuned_model"]], "save() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.set_tensor"]], "train() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.train"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[42, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "bf16_convert() (neural_compressor.adaptor.tf_utils.graph_converter.graphconverter method)": [[42, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter.bf16_convert"]], "convert() (neural_compressor.adaptor.tf_utils.graph_converter.graphconverter method)": [[42, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter.convert"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[42, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "quantize() (neural_compressor.adaptor.tf_utils.graph_converter.graphconverter method)": [[42, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter.quantize"]], "quantize_with_qdq_pattern() (neural_compressor.adaptor.tf_utils.graph_converter.graphconverter method)": [[42, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter.quantize_with_qdq_pattern"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[43, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "bf16_convert() (neural_compressor.adaptor.tf_utils.graph_converter_without_calib.graphconverterwithoutcalib method)": [[43, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib.bf16_convert"]], "convert_without_calib() (neural_compressor.adaptor.tf_utils.graph_converter_without_calib.graphconverterwithoutcalib method)": [[43, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib.convert_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[43, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "quantize_without_calib() (neural_compressor.adaptor.tf_utils.graph_converter_without_calib.graphconverterwithoutcalib method)": [[43, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib.quantize_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[44, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.bf16convert method)": [[44, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[44, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[45, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[46, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.convertaddtobiasaddoptimizer method)": [[46, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[47, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.convertlayoutoptimizer method)": [[47, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[48, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.convertleakyreluoptimizer method)": [[48, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[49, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.convertnantorandom method)": [[49, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.convertplaceholdertoconst method)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "strtobool() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.convertplaceholdertoconst method)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst.strtobool"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.dequantizecastoptimizer method)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.dilatedcontraction method)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.injectdummybiasaddoptimizer method)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.expanddimsoptimizer method)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.fetchweightfromreshapeoptimizer method)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.foldbatchnormnodesoptimizer method)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "scale_after_normalization() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.foldbatchnormnodesoptimizer method)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer.scale_after_normalization"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "check_all_folded() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.check_all_folded"]], "check_const_inputs() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.check_const_inputs"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.fusebiasaddandaddoptimizer method)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.fusecolumnwisemuloptimizer method)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.fuseconvwithmathoptimizer method)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.fusedecomposedbnoptimizer method)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer.do_transformation"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.fusedecomposedinoptimizer method)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer.do_transformation"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.fusegeluoptimizer method)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.fuselayernormoptimizer method)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.fusepadwithconv2doptimizer method)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.fusepadwithfp32conv2doptimizer method)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.fusetransposereshapeoptimizer method)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.graphcseoptimizer method)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.grappleroptimizer method)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.insertprintminmaxnode method)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.movesqueezeafterreluoptimizer method)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "get_excluded_node_names() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.preoptimization method)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization.get_excluded_node_names"]], "get_matched_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.preoptimization method)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization.get_matched_nodes"]], "get_optimized_model() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.preoptimization method)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization.get_optimized_model"]], "has_positive_input() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.preoptimization method)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization.has_positive_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.removetrainingnodesoptimizer method)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.renamebatchnormoptimizer method)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.splitsharedinputoptimizer method)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.stripequivalentnodesoptimizer method)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.stripunusednodesoptimizer method)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.switchoptimizer method)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.graphrewriterbase method)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.freezefakequantopoptimizer method)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.do_transformation"]], "generate_output_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.generate_output_graph"]], "generate_output_graph_ranges() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "do_transformation_without_calib() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.do_transformation_without_calib"]], "generate_output_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.generate_output_graph"]], "generate_output_graph_ranges() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.fuseconvredundantdequantizetransformer method)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.fuseconvrequantizetransformer method)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.fusematmulredundantdequantizetransformer method)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizedequantizenewapitransformer method)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizedequantizetransformer method)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizenewapitransformer method)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizetransformer method)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.metainfochangingmemopoptimizer method)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.posthostconstconverter method)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.postcseoptimizer method)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.quantizedrnnconverter method)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.scalepropagationtransformer method)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.generategraphwithqdqpattern method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.mergeduplicatedqdqoptimizer method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.shareqdqforitexypatternoptimizer method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[99, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[99, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "add_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[99, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.add_node"]], "analysis_rnn_model() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[99, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.analysis_rnn_model"]], "compare_node_attr() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[99, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.compare_node_attr"]], "create_constant_node() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[99, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.create_constant_node"]], "create_node() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[99, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.create_node"]], "dump_graph() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[99, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.dump_graph"]], "gen_valid_sampling_log() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[99, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.gen_valid_sampling_log"]], "generate_int32_bias_for_conv() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[99, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.generate_int32_bias_for_conv"]], "generate_int32_bias_for_matmul() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[99, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.generate_int32_bias_for_matmul"]], "get_frame_info() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[99, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.get_frame_info"]], "get_graph_input_output() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[99, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.get_graph_input_output"]], "graph (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer property)": [[99, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.graph"]], "has_positive_input() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[99, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.has_positive_input"]], "neural_compressor.adaptor.tf_utils.graph_util": [[99, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[99, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.node_name_from_input"]], "parse_graph() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[99, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.parse_graph"]], "query_fusion_pattern_nodes() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[99, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.query_fusion_pattern_nodes"]], "remove_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[99, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.remove_node"]], "remove_node_with_single_input_output() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[99, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.remove_node_with_single_input_output"]], "replace_const_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[99, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_const_node"]], "replace_constant_graph_with_constant_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[99, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_constant_graph_with_constant_node"]], "replace_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[99, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_node"]], "replace_single_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[99, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_single_node"]], "set_attr_bool() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[99, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_bool"]], "set_attr_dtype() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[99, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_dtype"]], "set_attr_float() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[99, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_float"]], "set_attr_int() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[99, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_int"]], "set_attr_int_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[99, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_int_list"]], "set_attr_string() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[99, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_string"]], "set_attr_string_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[99, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_string_list"]], "set_attr_tensor() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[99, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_tensor"]], "set_attr_type_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[99, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_type_list"]], "values_from_const() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[99, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.values_from_const"]], "neural_compressor.adaptor.tf_utils": [[100, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[101, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[102, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[102, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "from_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantizebase class method)": [[102, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase.from_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantize method)": [[102, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize.get_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantizebase method)": [[102, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase.get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[102, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[103, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[104, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "add_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[104, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.add_quantize_recipe"]], "clear_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[104, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.clear_quantize_recipe"]], "get_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[104, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.get_quantize_recipe"]], "is_empty() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[104, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.is_empty"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[104, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "query_layer() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[104, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.query_layer"]], "remove_layer() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[104, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.remove_layer"]], "remove_layers() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[104, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.remove_layers"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[105, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[105, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[105, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[106, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[107, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[107, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[108, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[108, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[110, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "build() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapper method)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper.build"]], "build() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.build"]], "call() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapper method)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper.call"]], "call() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.call"]], "compute_output_shape() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.compute_output_shape"]], "from_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase class method)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.from_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.get_config"]], "losses (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.losses"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "non_trainable_weights (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.non_trainable_weights"]], "query_input_index() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.query_input_index"]], "trainable (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.trainable"]], "trainable_weights (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.trainable_weights"]], "updates (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.updates"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "apply_newly_bn_leakyrelu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.apply_newly_bn_leakyrelu_fusion"]], "apply_newly_bn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.apply_newly_bn_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.fusenodestartwithconcatv2 method)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.fusenodestartwithconcatv2 method)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "apply_conv3d_add_addn_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_add_addn_fusion"]], "apply_conv3d_add_addn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_add_addn_relu_fusion"]], "apply_conv3d_add_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_add_fusion"]], "apply_conv3d_add_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_add_relu_fusion"]], "apply_conv3d_single_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_single_fusion"]], "apply_conv_biasadd_hardswish_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_hardswish_fusion"]], "apply_newly_conv_biasadd_addn_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_addn_fusion"]], "apply_newly_conv_biasadd_addn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_addn_relu_fusion"]], "apply_newly_conv_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_fusion"]], "apply_newly_conv_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_relu_fusion"]], "apply_newly_conv_biasadd_swishf32_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_swishf32_fusion"]], "apply_newly_conv_single_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_single_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "apply_deconv2d_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_deconv2d_biasadd_fusion"]], "apply_deconv3d_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_deconv3d_biasadd_fusion"]], "apply_single_deconv2d_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_single_deconv2d_fusion"]], "apply_single_deconv3d_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_single_deconv3d_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "apply_newly_in_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.apply_newly_in_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "apply_batchmatmulv2_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_batchmatmulv2_fusion"]], "apply_batchmatmulv2_mul_add_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_batchmatmulv2_mul_add_fusion"]], "apply_matmul_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_fusion"]], "apply_matmul_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.fusenodestartwithpooling method)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.fusenodestartwithpooling method)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.optimizeqdqgraph method)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph.do_transform"]], "get_quantized_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.optimizeqdqgraph method)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph.get_quantized_nodes"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "add_output_graph_node() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.add_output_graph_node"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.apply_the_transform"]], "create_nodes_map() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.create_nodes_map"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.do_transform"]], "eightbitize_single_input_tensor_node() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.eightbitize_single_input_tensor_node"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "register_transformer() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.register_transformer"]], "remove_dead_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.remove_dead_nodes"]], "remove_redundant_quantization() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.remove_redundant_quantization"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "apply_newly_bn_leakyrelu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.apply_newly_bn_leakyrelu_fusion"]], "apply_newly_bn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.apply_newly_bn_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.fusenodestartwithconcatv2 method)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.fusenodestartwithconcatv2 method)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "apply_conv_biasadd_addn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_addn_relu_fusion"]], "apply_conv_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_fusion"]], "apply_conv_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_relu_fusion"]], "apply_conv_single_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_single_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.quantizegraphforintel method)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel.do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "apply_matmul_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_fusion"]], "apply_matmul_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.fusenodestartwithpooling method)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.fusenodestartwithpooling method)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "copy_attr() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.copy_attr"]], "create_constant_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.create_constant_node"]], "create_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.create_node"]], "ensure_tensor_name_has_port() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.ensure_tensor_name_has_port"]], "generate_quantized_weight_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.generate_quantized_weight_node"]], "get_sorted_graph() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.get_sorted_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.node_name_from_input"]], "remove_training_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.remove_training_nodes"]], "set_attr_bool() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_bool"]], "set_attr_dtype() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_dtype"]], "set_attr_float() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_float"]], "set_attr_int() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_int"]], "set_attr_string() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_string"]], "set_attr_string_list() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_string_list"]], "set_attr_tensor() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_tensor"]], "set_attr_type_list() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_type_list"]], "split_shared_inputs() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.split_shared_inputs"]], "unique_node_name_from_input() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.unique_node_name_from_input"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[129, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.biascorrection method)": [[129, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[129, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[130, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[130, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.do_transformation"]], "generate_input_map() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[130, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.generate_input_map"]], "get_node_name_from_input() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[130, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.get_node_name_from_input"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[130, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[130, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.node_name_from_input"]], "parse_input_pb() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[130, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.parse_input_pb"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[131, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[132, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.insertlogging method)": [[132, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[132, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[133, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.rerangequantizedconcat method)": [[133, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[133, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[134, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[135, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[135, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[135, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "forward() (neural_compressor.adaptor.torch_utils.bf16_convert.bf16modulewrapper method)": [[135, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper.forward"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[135, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[136, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[136, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[136, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "get_act_gap() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[136, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_act_gap"]], "get_act_traces() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[136, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_act_traces"]], "get_avg_traces() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[136, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_avg_traces"]], "get_device() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[136, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_device"]], "get_fused_mapping() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[136, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_fused_mapping"]], "get_params() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[136, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_params"]], "get_vthv_weight() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[136, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_vtHv_weight"]], "get_weight_traces() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[136, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_weight_traces"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[136, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "hook_fn_act() (neural_compressor.adaptor.torch_utils.hawq_metric.node_collector method)": [[136, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector.hook_fn_act"]], "is_fused_module() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[136, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.is_fused_module"]], "mse_metric_gap() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[136, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.mse_metric_gap"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[136, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "register_act_grad_hooks() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[136, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.register_act_grad_hooks"]], "remove() (neural_compressor.adaptor.torch_utils.hawq_metric.node_collector method)": [[136, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector.remove"]], "reset_act_gradient_and_hooks() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[136, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.reset_act_gradient_and_hooks"]], "neural_compressor.adaptor.torch_utils": [[137, "module-neural_compressor.adaptor.torch_utils"]], "datareader (class in neural_compressor.adaptor.torch_utils.onnx)": [[138, "neural_compressor.adaptor.torch_utils.onnx.DataReader"]], "get_next() (neural_compressor.adaptor.torch_utils.onnx.datareader method)": [[138, "neural_compressor.adaptor.torch_utils.onnx.DataReader.get_next"]], "neural_compressor.adaptor.torch_utils.onnx": [[138, "module-neural_compressor.adaptor.torch_utils.onnx"]], "graphtrace (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[139, "neural_compressor.adaptor.torch_utils.smooth_quant.GraphTrace"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[139, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[139, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "recover() (neural_compressor.adaptor.torch_utils.smooth_quant.torchsmoothquant method)": [[139, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant.recover"]], "transform() (neural_compressor.adaptor.torch_utils.smooth_quant.torchsmoothquant method)": [[139, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant.transform"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[140, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[140, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[140, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[141, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[141, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[141, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[141, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[141, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[141, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[141, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[141, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[141, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[141, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[141, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[141, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[141, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[141, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[141, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "neural_compressor.adaptor.torch_utils.util": [[141, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[141, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[141, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[141, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[142, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[142, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[142, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "adaptor (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[142, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.adaptor"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[142, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "calib_iter (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[142, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.calib_iter"]], "dataloader (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[142, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.dataloader"]], "neural_compressor.algorithm.algorithm": [[142, "module-neural_compressor.algorithm.algorithm"]], "origin_model (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[142, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.origin_model"]], "q_model (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[142, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.q_model"]], "support_algorithms() (neural_compressor.algorithm.algorithm.algorithms class method)": [[142, "neural_compressor.algorithm.algorithm.ALGORITHMS.support_algorithms"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[143, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[143, "module-neural_compressor.algorithm.fast_bias_correction"]], "algorithms (class in neural_compressor.algorithm)": [[144, "neural_compressor.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm)": [[144, "neural_compressor.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm)": [[144, "neural_compressor.algorithm.AlgorithmScheduler"]], "adaptor (neural_compressor.algorithm.algorithmscheduler property)": [[144, "neural_compressor.algorithm.AlgorithmScheduler.adaptor"]], "algorithm_registry() (in module neural_compressor.algorithm)": [[144, "neural_compressor.algorithm.algorithm_registry"]], "calib_iter (neural_compressor.algorithm.algorithmscheduler property)": [[144, "neural_compressor.algorithm.AlgorithmScheduler.calib_iter"]], "dataloader (neural_compressor.algorithm.algorithmscheduler property)": [[144, "neural_compressor.algorithm.AlgorithmScheduler.dataloader"]], "neural_compressor.algorithm": [[144, "module-neural_compressor.algorithm"]], "origin_model (neural_compressor.algorithm.algorithmscheduler property)": [[144, "neural_compressor.algorithm.AlgorithmScheduler.origin_model"]], "q_model (neural_compressor.algorithm.algorithmscheduler property)": [[144, "neural_compressor.algorithm.AlgorithmScheduler.q_model"]], "support_algorithms() (neural_compressor.algorithm.algorithms class method)": [[144, "neural_compressor.algorithm.ALGORITHMS.support_algorithms"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[145, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[145, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[146, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[146, "module-neural_compressor.algorithm.weight_correction"]], "benchmark (class in neural_compressor.benchmark)": [[147, "neural_compressor.benchmark.Benchmark"]], "dataloader() (neural_compressor.benchmark.benchmark method)": [[147, "neural_compressor.benchmark.Benchmark.dataloader"]], "fit() (in module neural_compressor.benchmark)": [[147, "neural_compressor.benchmark.fit"]], "metric() (neural_compressor.benchmark.benchmark method)": [[147, "neural_compressor.benchmark.Benchmark.metric"]], "neural_compressor.benchmark": [[147, "module-neural_compressor.benchmark"]], "postprocess() (neural_compressor.benchmark.benchmark method)": [[147, "neural_compressor.benchmark.Benchmark.postprocess"]], "benchmark_conf (class in neural_compressor.conf.config)": [[148, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[148, "neural_compressor.conf.config.Conf"]], "distillation_conf (class in neural_compressor.conf.config)": [[148, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[148, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[148, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[148, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[148, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[148, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[148, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[148, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[149, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[149, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[149, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[149, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[150, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[151, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[152, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[152, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[152, "neural_compressor.config.DistillationConfig"]], "exportconfig (class in neural_compressor.config)": [[152, "neural_compressor.config.ExportConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[152, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[152, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mixedprecisionconfig (class in neural_compressor.config)": [[152, "neural_compressor.config.MixedPrecisionConfig"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[152, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[152, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[152, "neural_compressor.config.PostTrainingQuantConfig"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[152, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[152, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[152, "neural_compressor.config.TF2ONNXConfig"]], "torch2onnxconfig (class in neural_compressor.config)": [[152, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[152, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[152, "neural_compressor.config.WeightPruningConfig"]], "absolute (neural_compressor.config.accuracycriterion property)": [[152, "neural_compressor.config.AccuracyCriterion.absolute"]], "approach (neural_compressor.config.posttrainingquantconfig property)": [[152, "neural_compressor.config.PostTrainingQuantConfig.approach"]], "approach (neural_compressor.config.quantizationawaretrainingconfig property)": [[152, "neural_compressor.config.QuantizationAwareTrainingConfig.approach"]], "backend (neural_compressor.config.benchmarkconfig property)": [[152, "neural_compressor.config.BenchmarkConfig.backend"]], "check_value() (in module neural_compressor.config)": [[152, "neural_compressor.config.check_value"]], "cores_per_instance (neural_compressor.config.benchmarkconfig property)": [[152, "neural_compressor.config.BenchmarkConfig.cores_per_instance"]], "criterion (neural_compressor.config.accuracycriterion property)": [[152, "neural_compressor.config.AccuracyCriterion.criterion"]], "criterion (neural_compressor.config.distillationconfig property)": [[152, "neural_compressor.config.DistillationConfig.criterion"]], "dtype (neural_compressor.config.exportconfig property)": [[152, "neural_compressor.config.ExportConfig.dtype"]], "dynamic_axes (neural_compressor.config.exportconfig property)": [[152, "neural_compressor.config.ExportConfig.dynamic_axes"]], "example_inputs (neural_compressor.config.exportconfig property)": [[152, "neural_compressor.config.ExportConfig.example_inputs"]], "higher_is_better (neural_compressor.config.accuracycriterion property)": [[152, "neural_compressor.config.AccuracyCriterion.higher_is_better"]], "input_names (neural_compressor.config.exportconfig property)": [[152, "neural_compressor.config.ExportConfig.input_names"]], "inputs (neural_compressor.config.benchmarkconfig property)": [[152, "neural_compressor.config.BenchmarkConfig.inputs"]], "inter_num_of_threads (neural_compressor.config.benchmarkconfig property)": [[152, "neural_compressor.config.BenchmarkConfig.inter_num_of_threads"]], "intra_num_of_threads (neural_compressor.config.benchmarkconfig property)": [[152, "neural_compressor.config.BenchmarkConfig.intra_num_of_threads"]], "iteration (neural_compressor.config.benchmarkconfig property)": [[152, "neural_compressor.config.BenchmarkConfig.iteration"]], "max_trials (neural_compressor.config.tuningcriterion property)": [[152, "neural_compressor.config.TuningCriterion.max_trials"]], "neural_compressor.config": [[152, "module-neural_compressor.config"]], "num_of_instance (neural_compressor.config.benchmarkconfig property)": [[152, "neural_compressor.config.BenchmarkConfig.num_of_instance"]], "objective (neural_compressor.config.tuningcriterion property)": [[152, "neural_compressor.config.TuningCriterion.objective"]], "opset_version (neural_compressor.config.exportconfig property)": [[152, "neural_compressor.config.ExportConfig.opset_version"]], "optimizer (neural_compressor.config.distillationconfig property)": [[152, "neural_compressor.config.DistillationConfig.optimizer"]], "output_names (neural_compressor.config.exportconfig property)": [[152, "neural_compressor.config.ExportConfig.output_names"]], "outputs (neural_compressor.config.benchmarkconfig property)": [[152, "neural_compressor.config.BenchmarkConfig.outputs"]], "quant_format (neural_compressor.config.exportconfig property)": [[152, "neural_compressor.config.ExportConfig.quant_format"]], "random_seed (neural_compressor.config.options property)": [[152, "neural_compressor.config.Options.random_seed"]], "relative (neural_compressor.config.accuracycriterion property)": [[152, "neural_compressor.config.AccuracyCriterion.relative"]], "resume_from (neural_compressor.config.options property)": [[152, "neural_compressor.config.Options.resume_from"]], "strategy (neural_compressor.config.tuningcriterion property)": [[152, "neural_compressor.config.TuningCriterion.strategy"]], "strategy_kwargs (neural_compressor.config.tuningcriterion property)": [[152, "neural_compressor.config.TuningCriterion.strategy_kwargs"]], "teacher_model (neural_compressor.config.distillationconfig property)": [[152, "neural_compressor.config.DistillationConfig.teacher_model"]], "tensorboard (neural_compressor.config.options property)": [[152, "neural_compressor.config.Options.tensorboard"]], "timeout (neural_compressor.config.tuningcriterion property)": [[152, "neural_compressor.config.TuningCriterion.timeout"]], "tolerable_loss (neural_compressor.config.accuracycriterion property)": [[152, "neural_compressor.config.AccuracyCriterion.tolerable_loss"]], "tuning_criterion (neural_compressor.config.posttrainingquantconfig property)": [[152, "neural_compressor.config.PostTrainingQuantConfig.tuning_criterion"]], "warmup (neural_compressor.config.benchmarkconfig property)": [[152, "neural_compressor.config.BenchmarkConfig.warmup"]], "weight_compression (neural_compressor.config.weightpruningconfig property)": [[152, "neural_compressor.config.WeightPruningConfig.weight_compression"]], "workspace (neural_compressor.config.options property)": [[152, "neural_compressor.config.Options.workspace"]], "neural_compressor.contrib": [[153, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[154, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[155, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "create_exp() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[155, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.create_exp"]], "get_acc_target() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[155, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.get_acc_target"]], "neural_compressor.contrib.strategy.sigopt": [[155, "module-neural_compressor.contrib.strategy.sigopt"]], "next_tune_cfg() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[155, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.next_tune_cfg"]], "params_to_tune_configs() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[155, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.params_to_tune_configs"]], "traverse() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[155, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.traverse"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[156, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "add_loss_to_tuned_history_and_find_best() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[156, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.add_loss_to_tuned_history_and_find_best"]], "calculate_loss() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[156, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.calculate_loss"]], "neural_compressor.contrib.strategy.tpe": [[156, "module-neural_compressor.contrib.strategy.tpe"]], "object_evaluation() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[156, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.object_evaluation"]], "stop() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[156, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.stop"]], "traverse() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[156, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.traverse"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[157, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "batch() (neural_compressor.data.dataloaders.base_dataloader.basedataloader method)": [[157, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader.batch"]], "batch_size (neural_compressor.data.dataloaders.base_dataloader.basedataloader property)": [[157, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader.batch_size"]], "neural_compressor.data.dataloaders.base_dataloader": [[157, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[158, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[158, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[159, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "batch() (neural_compressor.data.dataloaders.default_dataloader.defaultdataloader method)": [[159, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader.batch"]], "dataloader (neural_compressor.data.dataloaders.default_dataloader.defaultdataloader property)": [[159, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader.dataloader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[159, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[159, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[160, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[160, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[160, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[160, "module-neural_compressor.data.dataloaders.fetcher"]], "dataloader (class in neural_compressor.data.dataloaders)": [[161, "neural_compressor.data.dataloaders.DataLoader"]], "neural_compressor.data.dataloaders": [[161, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[162, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[162, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[163, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[163, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[163, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[164, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[164, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[165, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[165, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[165, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[165, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[165, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[166, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[166, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[166, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[166, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "batch() (neural_compressor.data.dataloaders.tensorflow_dataloader.tfdatadataloader method)": [[166, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader.batch"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[166, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[167, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[167, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[167, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[167, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[167, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[167, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[167, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[167, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[167, "module-neural_compressor.data.datasets.bert_dataset"]], "to_json_string() (neural_compressor.data.datasets.bert_dataset.inputfeatures method)": [[167, "neural_compressor.data.datasets.bert_dataset.InputFeatures.to_json_string"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[168, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[168, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[168, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[168, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[168, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[169, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[169, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[169, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[169, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[169, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[169, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[169, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[169, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[169, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[169, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[169, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[169, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[169, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[169, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[169, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[169, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[169, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[169, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[169, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[169, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[169, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[169, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[169, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[169, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[169, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[169, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[169, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[169, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[169, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[169, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[169, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[169, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[169, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[169, "neural_compressor.data.datasets.dataset.check_integrity"]], "class_to_idx (neural_compressor.data.datasets.dataset.mnist property)": [[169, "neural_compressor.data.datasets.dataset.MNIST.class_to_idx"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[169, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download() (neural_compressor.data.datasets.dataset.cifar10 method)": [[169, "neural_compressor.data.datasets.dataset.CIFAR10.download"]], "download() (neural_compressor.data.datasets.dataset.mnist method)": [[169, "neural_compressor.data.datasets.dataset.MNIST.download"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[169, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[169, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[169, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "load_meta() (neural_compressor.data.datasets.dataset.cifar10 method)": [[169, "neural_compressor.data.datasets.dataset.CIFAR10.load_meta"]], "neural_compressor.data.datasets.dataset": [[169, "module-neural_compressor.data.datasets.dataset"]], "read_data() (neural_compressor.data.datasets.dataset.fashionmnist method)": [[169, "neural_compressor.data.datasets.dataset.FashionMNIST.read_data"]], "read_data() (neural_compressor.data.datasets.dataset.mnist method)": [[169, "neural_compressor.data.datasets.dataset.MNIST.read_data"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[170, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[170, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[171, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[171, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[171, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[172, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[172, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[172, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[172, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[172, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[172, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[172, "module-neural_compressor.data.datasets.imagenet_dataset"]], "cocorecorddataset (class in neural_compressor.data.datasets)": [[173, "neural_compressor.data.datasets.COCORecordDataset"]], "dataset (class in neural_compressor.data.datasets)": [[173, "neural_compressor.data.datasets.Dataset"]], "datasets (class in neural_compressor.data.datasets)": [[173, "neural_compressor.data.datasets.Datasets"]], "iterabledataset (class in neural_compressor.data.datasets)": [[173, "neural_compressor.data.datasets.IterableDataset"]], "tensorflowimagerecord (class in neural_compressor.data.datasets)": [[173, "neural_compressor.data.datasets.TensorflowImageRecord"]], "dataset_registry() (in module neural_compressor.data.datasets)": [[173, "neural_compressor.data.datasets.dataset_registry"]], "neural_compressor.data.datasets": [[173, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[174, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[174, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[175, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[175, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[175, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[176, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[176, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[176, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[176, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[176, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[176, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[176, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[176, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[176, "module-neural_compressor.data.filters.filter"]], "filters (class in neural_compressor.data.filters)": [[177, "neural_compressor.data.filters.FILTERS"]], "filter (class in neural_compressor.data.filters)": [[177, "neural_compressor.data.filters.Filter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters)": [[177, "neural_compressor.data.filters.LabelBalanceCOCORecordFilter"]], "filter_registry() (in module neural_compressor.data.filters)": [[177, "neural_compressor.data.filters.filter_registry"]], "neural_compressor.data.filters": [[177, "module-neural_compressor.data.filters"]], "basetransform (class in neural_compressor.data)": [[178, "neural_compressor.data.BaseTransform"]], "bilinearimagenettransform (class in neural_compressor.data)": [[178, "neural_compressor.data.BilinearImagenetTransform"]], "cocorecorddataset (class in neural_compressor.data)": [[178, "neural_compressor.data.COCORecordDataset"]], "composetransform (class in neural_compressor.data)": [[178, "neural_compressor.data.ComposeTransform"]], "dataloader (class in neural_compressor.data)": [[178, "neural_compressor.data.DataLoader"]], "dataset (class in neural_compressor.data)": [[178, "neural_compressor.data.Dataset"]], "datasets (class in neural_compressor.data)": [[178, "neural_compressor.data.Datasets"]], "defaultdataloader (class in neural_compressor.data)": [[178, "neural_compressor.data.DefaultDataLoader"]], "filters (class in neural_compressor.data)": [[178, "neural_compressor.data.FILTERS"]], "filter (class in neural_compressor.data)": [[178, "neural_compressor.data.Filter"]], "iterabledataset (class in neural_compressor.data)": [[178, "neural_compressor.data.IterableDataset"]], "labelbalancecocorecordfilter (class in neural_compressor.data)": [[178, "neural_compressor.data.LabelBalanceCOCORecordFilter"]], "labelshift (class in neural_compressor.data)": [[178, "neural_compressor.data.LabelShift"]], "normalizetftransform (class in neural_compressor.data)": [[178, "neural_compressor.data.NormalizeTFTransform"]], "parsedecodecocotransform (class in neural_compressor.data)": [[178, "neural_compressor.data.ParseDecodeCocoTransform"]], "postprocess (class in neural_compressor.data)": [[178, "neural_compressor.data.Postprocess"]], "rescaletftransform (class in neural_compressor.data)": [[178, "neural_compressor.data.RescaleTFTransform"]], "resizetftransform (class in neural_compressor.data)": [[178, "neural_compressor.data.ResizeTFTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data)": [[178, "neural_compressor.data.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data)": [[178, "neural_compressor.data.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data)": [[178, "neural_compressor.data.TRANSFORMS"]], "tensorflowimagerecord (class in neural_compressor.data)": [[178, "neural_compressor.data.TensorflowImageRecord"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data)": [[178, "neural_compressor.data.TensorflowResizeCropImagenetTransform"]], "tensorflowresizewithratio (class in neural_compressor.data)": [[178, "neural_compressor.data.TensorflowResizeWithRatio"]], "batch() (neural_compressor.data.defaultdataloader method)": [[178, "neural_compressor.data.DefaultDataLoader.batch"]], "dataloader (neural_compressor.data.defaultdataloader property)": [[178, "neural_compressor.data.DefaultDataLoader.dataloader"]], "dataset_registry() (in module neural_compressor.data)": [[178, "neural_compressor.data.dataset_registry"]], "filter_registry() (in module neural_compressor.data)": [[178, "neural_compressor.data.filter_registry"]], "get_postprocess_result() (neural_compressor.data.tfsquadv1posttransform method)": [[178, "neural_compressor.data.TFSquadV1PostTransform.get_postprocess_result"]], "neural_compressor.data": [[178, "module-neural_compressor.data"]], "process_result() (neural_compressor.data.tfsquadv1posttransform method)": [[178, "neural_compressor.data.TFSquadV1PostTransform.process_result"]], "register() (neural_compressor.data.transforms method)": [[178, "neural_compressor.data.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data)": [[178, "neural_compressor.data.transform_registry"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[179, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[179, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[180, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[180, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[180, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[180, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[180, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[180, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[180, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[180, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[180, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[180, "module-neural_compressor.data.transforms.imagenet_transform"]], "basetransform (class in neural_compressor.data.transforms)": [[181, "neural_compressor.data.transforms.BaseTransform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms)": [[181, "neural_compressor.data.transforms.BilinearImagenetTransform"]], "composetransform (class in neural_compressor.data.transforms)": [[181, "neural_compressor.data.transforms.ComposeTransform"]], "labelshift (class in neural_compressor.data.transforms)": [[181, "neural_compressor.data.transforms.LabelShift"]], "normalizetftransform (class in neural_compressor.data.transforms)": [[181, "neural_compressor.data.transforms.NormalizeTFTransform"]], "parsedecodecocotransform (class in neural_compressor.data.transforms)": [[181, "neural_compressor.data.transforms.ParseDecodeCocoTransform"]], "postprocess (class in neural_compressor.data.transforms)": [[181, "neural_compressor.data.transforms.Postprocess"]], "rescaletftransform (class in neural_compressor.data.transforms)": [[181, "neural_compressor.data.transforms.RescaleTFTransform"]], "resizetftransform (class in neural_compressor.data.transforms)": [[181, "neural_compressor.data.transforms.ResizeTFTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms)": [[181, "neural_compressor.data.transforms.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms)": [[181, "neural_compressor.data.transforms.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms)": [[181, "neural_compressor.data.transforms.TRANSFORMS"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms)": [[181, "neural_compressor.data.transforms.TensorflowResizeCropImagenetTransform"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms)": [[181, "neural_compressor.data.transforms.TensorflowResizeWithRatio"]], "get_postprocess_result() (neural_compressor.data.transforms.tfsquadv1posttransform method)": [[181, "neural_compressor.data.transforms.TFSquadV1PostTransform.get_postprocess_result"]], "neural_compressor.data.transforms": [[181, "module-neural_compressor.data.transforms"]], "process_result() (neural_compressor.data.transforms.tfsquadv1posttransform method)": [[181, "neural_compressor.data.transforms.TFSquadV1PostTransform.process_result"]], "register() (neural_compressor.data.transforms.transforms method)": [[181, "neural_compressor.data.transforms.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data.transforms)": [[181, "neural_compressor.data.transforms.transform_registry"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[182, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[182, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[183, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[183, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[183, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[183, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_ids_to_tokens() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[183, "neural_compressor.data.transforms.tokenization.FullTokenizer.convert_ids_to_tokens"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[183, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "convert_tokens_to_ids() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[183, "neural_compressor.data.transforms.tokenization.FullTokenizer.convert_tokens_to_ids"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[183, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[183, "module-neural_compressor.data.transforms.tokenization"]], "tokenize() (neural_compressor.data.transforms.tokenization.basictokenizer method)": [[183, "neural_compressor.data.transforms.tokenization.BasicTokenizer.tokenize"]], "tokenize() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[183, "neural_compressor.data.transforms.tokenization.FullTokenizer.tokenize"]], "tokenize() (neural_compressor.data.transforms.tokenization.wordpiecetokenizer method)": [[183, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer.tokenize"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[183, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.TRANSFORMS"], [184, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.get_final_text"]], "get_params() (neural_compressor.data.transforms.transform.randomresizedcroptftransform method)": [[184, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform.get_params"]], "get_params() (neural_compressor.data.transforms.transform.randomresizedcroptransform method)": [[184, "neural_compressor.data.transforms.transform.RandomResizedCropTransform.get_params"]], "get_postprocess_result() (neural_compressor.data.transforms.transform.tfsquadv1posttransform method)": [[184, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform.get_postprocess_result"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[184, "module-neural_compressor.data.transforms.transform"]], "process_result() (neural_compressor.data.transforms.transform.tfsquadv1posttransform method)": [[184, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform.process_result"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.read_squad_examples"]], "register() (neural_compressor.data.transforms.transform.transforms method)": [[184, "neural_compressor.data.transforms.transform.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[184, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[185, "neural_compressor.experimental.benchmark.Benchmark"]], "b_dataloader (neural_compressor.experimental.benchmark.benchmark property)": [[185, "neural_compressor.experimental.benchmark.Benchmark.b_dataloader"]], "b_func (neural_compressor.experimental.benchmark.benchmark property)": [[185, "neural_compressor.experimental.benchmark.Benchmark.b_func"]], "config_instance() (neural_compressor.experimental.benchmark.benchmark method)": [[185, "neural_compressor.experimental.benchmark.Benchmark.config_instance"]], "generate_prefix() (neural_compressor.experimental.benchmark.benchmark method)": [[185, "neural_compressor.experimental.benchmark.Benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[185, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[185, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[185, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[185, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[185, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[185, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "metric (neural_compressor.experimental.benchmark.benchmark property)": [[185, "neural_compressor.experimental.benchmark.Benchmark.metric"]], "model (neural_compressor.experimental.benchmark.benchmark property)": [[185, "neural_compressor.experimental.benchmark.Benchmark.model"]], "neural_compressor.experimental.benchmark": [[185, "module-neural_compressor.experimental.benchmark"]], "postprocess (neural_compressor.experimental.benchmark.benchmark property)": [[185, "neural_compressor.experimental.benchmark.Benchmark.postprocess"]], "results (neural_compressor.experimental.benchmark.benchmark property)": [[185, "neural_compressor.experimental.benchmark.Benchmark.results"]], "run_instance() (neural_compressor.experimental.benchmark.benchmark method)": [[185, "neural_compressor.experimental.benchmark.Benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[185, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[185, "neural_compressor.experimental.benchmark.set_env_var"]], "summary_benchmark() (neural_compressor.experimental.benchmark.benchmark method)": [[185, "neural_compressor.experimental.benchmark.Benchmark.summary_benchmark"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[186, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[186, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[186, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[186, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "kullbackleiblerdivergence() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[186, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "kullbackleiblerdivergence() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[186, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "l2divergence() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[186, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.L2Divergence"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[186, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[186, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[186, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[186, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[186, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[186, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[186, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[186, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[186, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[186, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[186, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[186, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.SoftCrossEntropy"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[186, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[186, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[186, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[186, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[186, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[186, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "clear_features() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[186, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.clear_features"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[186, "neural_compressor.experimental.common.criterion.criterion_registry"]], "init_feature_matcher() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[186, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_feature_matcher() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[186, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[186, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[186, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[186, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[186, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.init_loss_funcs"]], "loss_cal() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[186, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[186, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[186, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[186, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[186, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[186, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[186, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[186, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[186, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.loss_cal_sloss"]], "neural_compressor.experimental.common.criterion": [[186, "module-neural_compressor.experimental.common.criterion"]], "register() (neural_compressor.experimental.common.criterion.criterions method)": [[186, "neural_compressor.experimental.common.criterion.Criterions.register"]], "register_hooks_for_models() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[186, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.register_hooks_for_models"]], "remove_all_hooks() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[186, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.remove_all_hooks"]], "student_model (neural_compressor.experimental.common.criterion.knowledgedistillationframework property)": [[186, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework.student_model"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[186, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[186, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[186, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[186, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.student_targets_loss_cal"]], "teacher_model (neural_compressor.experimental.common.criterion.knowledgedistillationframework property)": [[186, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework.teacher_model"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[186, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[186, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[186, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[186, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[186, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[186, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[186, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[186, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.teacher_model_forward"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[186, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[186, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[186, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[186, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.teacher_student_loss_cal"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[187, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[187, "module-neural_compressor.experimental.common.dataloader"]], "dataloader (class in neural_compressor.experimental.common)": [[188, "neural_compressor.experimental.common.DataLoader"]], "metric (class in neural_compressor.experimental.common)": [[188, "neural_compressor.experimental.common.Metric"]], "model (class in neural_compressor.experimental.common)": [[188, "neural_compressor.experimental.common.Model"]], "postprocess (class in neural_compressor.experimental.common)": [[188, "neural_compressor.experimental.common.Postprocess"]], "neural_compressor.experimental.common": [[188, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[189, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[189, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[190, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[190, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[190, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[191, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[191, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[191, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[191, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[191, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[191, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[191, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[191, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[191, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "register() (neural_compressor.experimental.common.optimizer.optimizers method)": [[191, "neural_compressor.experimental.common.optimizer.Optimizers.register"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[192, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[192, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[193, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[193, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[193, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[194, "neural_compressor.experimental.component.Component"]], "eval_dataloader (neural_compressor.experimental.component.component property)": [[194, "neural_compressor.experimental.component.Component.eval_dataloader"]], "eval_func (neural_compressor.experimental.component.component property)": [[194, "neural_compressor.experimental.component.Component.eval_func"]], "execute() (neural_compressor.experimental.component.component method)": [[194, "neural_compressor.experimental.component.Component.execute"]], "model (neural_compressor.experimental.component.component property)": [[194, "neural_compressor.experimental.component.Component.model"]], "neural_compressor.experimental.component": [[194, "module-neural_compressor.experimental.component"]], "on_after_compute_loss() (neural_compressor.experimental.component.component method)": [[194, "neural_compressor.experimental.component.Component.on_after_compute_loss"]], "on_after_eval() (neural_compressor.experimental.component.component method)": [[194, "neural_compressor.experimental.component.Component.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.component.component method)": [[194, "neural_compressor.experimental.component.Component.on_after_optimizer_step"]], "on_batch_begin() (neural_compressor.experimental.component.component method)": [[194, "neural_compressor.experimental.component.Component.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.component.component method)": [[194, "neural_compressor.experimental.component.Component.on_batch_end"]], "on_before_eval() (neural_compressor.experimental.component.component method)": [[194, "neural_compressor.experimental.component.Component.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.component.component method)": [[194, "neural_compressor.experimental.component.Component.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.component.component method)": [[194, "neural_compressor.experimental.component.Component.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.component.component method)": [[194, "neural_compressor.experimental.component.Component.on_epoch_end"]], "on_post_grad() (neural_compressor.experimental.component.component method)": [[194, "neural_compressor.experimental.component.Component.on_post_grad"]], "on_step_begin() (neural_compressor.experimental.component.component method)": [[194, "neural_compressor.experimental.component.Component.on_step_begin"]], "on_step_end() (neural_compressor.experimental.component.component method)": [[194, "neural_compressor.experimental.component.Component.on_step_end"]], "on_train_begin() (neural_compressor.experimental.component.component method)": [[194, "neural_compressor.experimental.component.Component.on_train_begin"]], "on_train_end() (neural_compressor.experimental.component.component method)": [[194, "neural_compressor.experimental.component.Component.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.component.component method)": [[194, "neural_compressor.experimental.component.Component.post_epoch_end"]], "post_process() (neural_compressor.experimental.component.component method)": [[194, "neural_compressor.experimental.component.Component.post_process"]], "pre_epoch_begin() (neural_compressor.experimental.component.component method)": [[194, "neural_compressor.experimental.component.Component.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.component.component method)": [[194, "neural_compressor.experimental.component.Component.pre_process"]], "prepare() (neural_compressor.experimental.component.component method)": [[194, "neural_compressor.experimental.component.Component.prepare"]], "prepare_qat() (neural_compressor.experimental.component.component method)": [[194, "neural_compressor.experimental.component.Component.prepare_qat"]], "register_hook() (neural_compressor.experimental.component.component method)": [[194, "neural_compressor.experimental.component.Component.register_hook"]], "train_dataloader (neural_compressor.experimental.component.component property)": [[194, "neural_compressor.experimental.component.Component.train_dataloader"]], "train_func (neural_compressor.experimental.component.component property)": [[194, "neural_compressor.experimental.component.Component.train_func"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[195, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.base_dataloader.basedataloader method)": [[195, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader.batch"]], "batch_size (neural_compressor.experimental.data.dataloaders.base_dataloader.basedataloader property)": [[195, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader.batch_size"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[195, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[196, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[197, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.default_dataloader.defaultdataloader method)": [[197, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader.batch"]], "dataloader (neural_compressor.experimental.data.dataloaders.default_dataloader.defaultdataloader property)": [[197, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader.dataloader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[197, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[197, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[198, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[198, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[198, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[198, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[199, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[200, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[200, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[201, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[201, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[201, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[202, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[202, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[203, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[203, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[203, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[203, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[203, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[204, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[204, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[204, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[204, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.tfdatadataloader method)": [[204, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader.batch"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[204, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[205, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[205, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[205, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[205, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[205, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[205, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[205, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[205, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[205, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "to_json_string() (neural_compressor.experimental.data.datasets.bert_dataset.inputfeatures method)": [[205, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures.to_json_string"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[206, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[206, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[206, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[206, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[206, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[207, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[207, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[207, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[207, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[207, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[207, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[207, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[207, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[207, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[207, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[207, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[207, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[207, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[207, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[207, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[207, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[207, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[207, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[207, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[207, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[207, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[207, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[207, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[207, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[207, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[207, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[207, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[207, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[207, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[207, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[207, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[207, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[207, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[207, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "class_to_idx (neural_compressor.experimental.data.datasets.dataset.mnist property)": [[207, "neural_compressor.experimental.data.datasets.dataset.MNIST.class_to_idx"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[207, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download() (neural_compressor.experimental.data.datasets.dataset.cifar10 method)": [[207, "neural_compressor.experimental.data.datasets.dataset.CIFAR10.download"]], "download() (neural_compressor.experimental.data.datasets.dataset.mnist method)": [[207, "neural_compressor.experimental.data.datasets.dataset.MNIST.download"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[207, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[207, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[207, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "load_meta() (neural_compressor.experimental.data.datasets.dataset.cifar10 method)": [[207, "neural_compressor.experimental.data.datasets.dataset.CIFAR10.load_meta"]], "neural_compressor.experimental.data.datasets.dataset": [[207, "module-neural_compressor.experimental.data.datasets.dataset"]], "read_data() (neural_compressor.experimental.data.datasets.dataset.fashionmnist method)": [[207, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST.read_data"]], "read_data() (neural_compressor.experimental.data.datasets.dataset.mnist method)": [[207, "neural_compressor.experimental.data.datasets.dataset.MNIST.read_data"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[208, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[208, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[209, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[209, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[209, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[210, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[210, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[210, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[210, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[210, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[210, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[210, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "dataset (class in neural_compressor.experimental.data.datasets)": [[211, "neural_compressor.experimental.data.datasets.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets)": [[211, "neural_compressor.experimental.data.datasets.Datasets"]], "iterabledataset (class in neural_compressor.experimental.data.datasets)": [[211, "neural_compressor.experimental.data.datasets.IterableDataset"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets)": [[211, "neural_compressor.experimental.data.datasets.dataset_registry"]], "neural_compressor.experimental.data.datasets": [[211, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[212, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[212, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[213, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[213, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[213, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[214, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[214, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[214, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[214, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[214, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[214, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[214, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[214, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[214, "module-neural_compressor.experimental.data.filters.filter"]], "filters (class in neural_compressor.experimental.data.filters)": [[215, "neural_compressor.experimental.data.filters.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters)": [[215, "neural_compressor.experimental.data.filters.Filter"]], "filter_registry() (in module neural_compressor.experimental.data.filters)": [[215, "neural_compressor.experimental.data.filters.filter_registry"]], "neural_compressor.experimental.data.filters": [[215, "module-neural_compressor.experimental.data.filters"]], "basetransform (class in neural_compressor.experimental.data)": [[216, "neural_compressor.experimental.data.BaseTransform"]], "dataset (class in neural_compressor.experimental.data)": [[216, "neural_compressor.experimental.data.Dataset"]], "datasets (class in neural_compressor.experimental.data)": [[216, "neural_compressor.experimental.data.Datasets"]], "filters (class in neural_compressor.experimental.data)": [[216, "neural_compressor.experimental.data.FILTERS"]], "filter (class in neural_compressor.experimental.data)": [[216, "neural_compressor.experimental.data.Filter"]], "iterabledataset (class in neural_compressor.experimental.data)": [[216, "neural_compressor.experimental.data.IterableDataset"]], "transforms (class in neural_compressor.experimental.data)": [[216, "neural_compressor.experimental.data.TRANSFORMS"]], "dataset_registry() (in module neural_compressor.experimental.data)": [[216, "neural_compressor.experimental.data.dataset_registry"]], "filter_registry() (in module neural_compressor.experimental.data)": [[216, "neural_compressor.experimental.data.filter_registry"]], "neural_compressor.experimental.data": [[216, "module-neural_compressor.experimental.data"]], "register() (neural_compressor.experimental.data.transforms method)": [[216, "neural_compressor.experimental.data.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data)": [[216, "neural_compressor.experimental.data.transform_registry"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[217, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[217, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[217, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[217, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[217, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[217, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[217, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[217, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[217, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[217, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "basetransform (class in neural_compressor.experimental.data.transforms)": [[218, "neural_compressor.experimental.data.transforms.BaseTransform"]], "transforms (class in neural_compressor.experimental.data.transforms)": [[218, "neural_compressor.experimental.data.transforms.TRANSFORMS"]], "neural_compressor.experimental.data.transforms": [[218, "module-neural_compressor.experimental.data.transforms"]], "register() (neural_compressor.experimental.data.transforms.transforms method)": [[218, "neural_compressor.experimental.data.transforms.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data.transforms)": [[218, "neural_compressor.experimental.data.transforms.transform_registry"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[219, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[219, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[219, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[219, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_ids_to_tokens() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[219, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.convert_ids_to_tokens"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[219, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "convert_tokens_to_ids() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[219, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.convert_tokens_to_ids"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[219, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[219, "module-neural_compressor.experimental.data.transforms.tokenization"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.basictokenizer method)": [[219, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer.tokenize"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[219, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.tokenize"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.wordpiecetokenizer method)": [[219, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer.tokenize"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[219, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [220, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_params() (neural_compressor.experimental.data.transforms.transform.randomresizedcroptftransform method)": [[220, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform.get_params"]], "get_params() (neural_compressor.experimental.data.transforms.transform.randomresizedcroptransform method)": [[220, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform.get_params"]], "get_postprocess_result() (neural_compressor.experimental.data.transforms.transform.tfsquadv1posttransform method)": [[220, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform.get_postprocess_result"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[220, "module-neural_compressor.experimental.data.transforms.transform"]], "process_result() (neural_compressor.experimental.data.transforms.transform.tfsquadv1posttransform method)": [[220, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform.process_result"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "register() (neural_compressor.experimental.data.transforms.transform.transforms method)": [[220, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[220, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[221, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[221, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[221, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[221, "neural_compressor.experimental.distillation.Distillation.best_score"]], "create_criterion() (neural_compressor.experimental.distillation.distillation method)": [[221, "neural_compressor.experimental.distillation.Distillation.create_criterion"]], "create_optimizer() (neural_compressor.experimental.distillation.distillation method)": [[221, "neural_compressor.experimental.distillation.Distillation.create_optimizer"]], "criterion (neural_compressor.experimental.distillation.distillation property)": [[221, "neural_compressor.experimental.distillation.Distillation.criterion"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[221, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "evaluation_distributed (neural_compressor.experimental.distillation.distillation property)": [[221, "neural_compressor.experimental.distillation.Distillation.evaluation_distributed"]], "execute() (neural_compressor.experimental.distillation.distillation method)": [[221, "neural_compressor.experimental.distillation.Distillation.execute"]], "generate_hooks() (neural_compressor.experimental.distillation.distillation method)": [[221, "neural_compressor.experimental.distillation.Distillation.generate_hooks"]], "init_train_cfg() (neural_compressor.experimental.distillation.distillation method)": [[221, "neural_compressor.experimental.distillation.Distillation.init_train_cfg"]], "neural_compressor.experimental.distillation": [[221, "module-neural_compressor.experimental.distillation"]], "on_post_forward() (neural_compressor.experimental.distillation.distillation method)": [[221, "neural_compressor.experimental.distillation.Distillation.on_post_forward"]], "optimizer (neural_compressor.experimental.distillation.distillation property)": [[221, "neural_compressor.experimental.distillation.Distillation.optimizer"]], "pre_process() (neural_compressor.experimental.distillation.distillation method)": [[221, "neural_compressor.experimental.distillation.Distillation.pre_process"]], "prepare() (neural_compressor.experimental.distillation.distillation method)": [[221, "neural_compressor.experimental.distillation.Distillation.prepare"]], "student_model (neural_compressor.experimental.distillation.distillation property)": [[221, "neural_compressor.experimental.distillation.Distillation.student_model"]], "teacher_model (neural_compressor.experimental.distillation.distillation property)": [[221, "neural_compressor.experimental.distillation.Distillation.teacher_model"]], "train_cfg (neural_compressor.experimental.distillation.distillation property)": [[221, "neural_compressor.experimental.distillation.Distillation.train_cfg"]], "train_distributed (neural_compressor.experimental.distillation.distillation property)": [[221, "neural_compressor.experimental.distillation.Distillation.train_distributed"]], "neural_compressor.experimental.export": [[222, "module-neural_compressor.experimental.export"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export)": [[222, "neural_compressor.experimental.export.onnx_qlinear_to_qdq"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export)": [[222, "neural_compressor.experimental.export.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export)": [[222, "neural_compressor.experimental.export.torch_to_int8_onnx"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[223, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[223, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[223, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "build_scale_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[224, "neural_compressor.experimental.export.torch2onnx.build_scale_mapping"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[224, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[224, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[224, "module-neural_compressor.experimental.export.torch2onnx"]], "qdq_fp32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[224, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias"]], "qdq_fp32_bias_qdq() (in module neural_compressor.experimental.export.torch2onnx)": [[224, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias_qdq"]], "qdq_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[224, "neural_compressor.experimental.export.torch2onnx.qdq_int32_bias"]], "recalculate_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[224, "neural_compressor.experimental.export.torch2onnx.recalculate_bias"]], "remove_nodes_by_name() (in module neural_compressor.experimental.export.torch2onnx)": [[224, "neural_compressor.experimental.export.torch2onnx.remove_nodes_by_name"]], "set_data_type() (in module neural_compressor.experimental.export.torch2onnx)": [[224, "neural_compressor.experimental.export.torch2onnx.set_data_type"]], "set_scale_info() (in module neural_compressor.experimental.export.torch2onnx)": [[224, "neural_compressor.experimental.export.torch2onnx.set_scale_info"]], "sub_graph_with_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[224, "neural_compressor.experimental.export.torch2onnx.sub_graph_with_int32_bias"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[224, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[224, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "update_weight_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[224, "neural_compressor.experimental.export.torch2onnx.update_weight_bias"]], "dummydatareader (class in neural_compressor.experimental.export.utils)": [[225, "neural_compressor.experimental.export.utils.DummyDataReader"]], "onnx2numpy_dtype() (in module neural_compressor.experimental.export.utils)": [[225, "neural_compressor.experimental.export.utils.ONNX2Numpy_dtype"]], "get_next() (neural_compressor.experimental.export.utils.dummydatareader method)": [[225, "neural_compressor.experimental.export.utils.DummyDataReader.get_next"]], "neural_compressor.experimental.export.utils": [[225, "module-neural_compressor.experimental.export.utils"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[226, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "dataset() (neural_compressor.experimental.graph_optimization.graph_optimization method)": [[226, "neural_compressor.experimental.graph_optimization.Graph_Optimization.dataset"]], "eval_dataloader (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[226, "neural_compressor.experimental.graph_optimization.Graph_Optimization.eval_dataloader"]], "eval_func (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[226, "neural_compressor.experimental.graph_optimization.Graph_Optimization.eval_func"]], "input (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[226, "neural_compressor.experimental.graph_optimization.Graph_Optimization.input"]], "metric (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[226, "neural_compressor.experimental.graph_optimization.Graph_Optimization.metric"]], "model (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[226, "neural_compressor.experimental.graph_optimization.Graph_Optimization.model"]], "neural_compressor.experimental.graph_optimization": [[226, "module-neural_compressor.experimental.graph_optimization"]], "output (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[226, "neural_compressor.experimental.graph_optimization.Graph_Optimization.output"]], "postprocess (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[226, "neural_compressor.experimental.graph_optimization.Graph_Optimization.postprocess"]], "precisions (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[226, "neural_compressor.experimental.graph_optimization.Graph_Optimization.precisions"]], "set_config_by_model() (neural_compressor.experimental.graph_optimization.graph_optimization method)": [[226, "neural_compressor.experimental.graph_optimization.Graph_Optimization.set_config_by_model"]], "benchmark (class in neural_compressor.experimental)": [[227, "neural_compressor.experimental.Benchmark"]], "component (class in neural_compressor.experimental)": [[227, "neural_compressor.experimental.Component"]], "distillation (class in neural_compressor.experimental)": [[227, "neural_compressor.experimental.Distillation"]], "graph_optimization (class in neural_compressor.experimental)": [[227, "neural_compressor.experimental.Graph_Optimization"]], "mixedprecision (class in neural_compressor.experimental)": [[227, "neural_compressor.experimental.MixedPrecision"]], "modelconversion (class in neural_compressor.experimental)": [[227, "neural_compressor.experimental.ModelConversion"]], "nas (class in neural_compressor.experimental)": [[227, "neural_compressor.experimental.NAS"]], "pruning (class in neural_compressor.experimental)": [[227, "neural_compressor.experimental.Pruning"]], "quantization (class in neural_compressor.experimental)": [[227, "neural_compressor.experimental.Quantization"]], "_epoch_ran (neural_compressor.experimental.distillation attribute)": [[227, "neural_compressor.experimental.Distillation._epoch_ran"]], "b_dataloader (neural_compressor.experimental.benchmark property)": [[227, "neural_compressor.experimental.Benchmark.b_dataloader"]], "b_func (neural_compressor.experimental.benchmark property)": [[227, "neural_compressor.experimental.Benchmark.b_func"]], "best_model (neural_compressor.experimental.distillation attribute)": [[227, "neural_compressor.experimental.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation attribute)": [[227, "neural_compressor.experimental.Distillation.best_score"]], "calib_dataloader (neural_compressor.experimental.quantization property)": [[227, "neural_compressor.experimental.Quantization.calib_dataloader"]], "conf (neural_compressor.experimental.pruning attribute)": [[227, "neural_compressor.experimental.Pruning.conf"]], "config_instance() (neural_compressor.experimental.benchmark method)": [[227, "neural_compressor.experimental.Benchmark.config_instance"]], "create_criterion() (neural_compressor.experimental.distillation method)": [[227, "neural_compressor.experimental.Distillation.create_criterion"]], "create_optimizer() (neural_compressor.experimental.distillation method)": [[227, "neural_compressor.experimental.Distillation.create_optimizer"]], "criterion (neural_compressor.experimental.distillation property)": [[227, "neural_compressor.experimental.Distillation.criterion"]], "dataset() (neural_compressor.experimental.graph_optimization method)": [[227, "neural_compressor.experimental.Graph_Optimization.dataset"]], "dataset() (neural_compressor.experimental.modelconversion method)": [[227, "neural_compressor.experimental.ModelConversion.dataset"]], "dataset() (neural_compressor.experimental.quantization method)": [[227, "neural_compressor.experimental.Quantization.dataset"]], "destination (neural_compressor.experimental.modelconversion property)": [[227, "neural_compressor.experimental.ModelConversion.destination"]], "distributed_execute() (neural_compressor.experimental.quantization method)": [[227, "neural_compressor.experimental.Quantization.distributed_execute"]], "eval_dataloader (neural_compressor.experimental.component property)": [[227, "neural_compressor.experimental.Component.eval_dataloader"]], "eval_dataloader (neural_compressor.experimental.graph_optimization property)": [[227, "neural_compressor.experimental.Graph_Optimization.eval_dataloader"]], "eval_dataloader (neural_compressor.experimental.modelconversion property)": [[227, "neural_compressor.experimental.ModelConversion.eval_dataloader"]], "eval_frequency (neural_compressor.experimental.distillation attribute)": [[227, "neural_compressor.experimental.Distillation.eval_frequency"]], "eval_func (neural_compressor.experimental.component property)": [[227, "neural_compressor.experimental.Component.eval_func"]], "eval_func (neural_compressor.experimental.graph_optimization property)": [[227, "neural_compressor.experimental.Graph_Optimization.eval_func"]], "eval_func (neural_compressor.experimental.modelconversion property)": [[227, "neural_compressor.experimental.ModelConversion.eval_func"]], "evaluation_distributed (neural_compressor.experimental.distillation property)": [[227, "neural_compressor.experimental.Distillation.evaluation_distributed"]], "evaluation_distributed (neural_compressor.experimental.pruning property)": [[227, "neural_compressor.experimental.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.component method)": [[227, "neural_compressor.experimental.Component.execute"]], "execute() (neural_compressor.experimental.distillation method)": [[227, "neural_compressor.experimental.Distillation.execute"]], "execute() (neural_compressor.experimental.pruning method)": [[227, "neural_compressor.experimental.Pruning.execute"]], "execute() (neural_compressor.experimental.quantization method)": [[227, "neural_compressor.experimental.Quantization.execute"]], "generate_hooks() (neural_compressor.experimental.distillation method)": [[227, "neural_compressor.experimental.Distillation.generate_hooks"]], "generate_hooks() (neural_compressor.experimental.pruning method)": [[227, "neural_compressor.experimental.Pruning.generate_hooks"]], "generate_prefix() (neural_compressor.experimental.benchmark method)": [[227, "neural_compressor.experimental.Benchmark.generate_prefix"]], "generate_pruners() (neural_compressor.experimental.pruning method)": [[227, "neural_compressor.experimental.Pruning.generate_pruners"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning method)": [[227, "neural_compressor.experimental.Pruning.get_sparsity_ratio"]], "init_train_cfg() (neural_compressor.experimental.distillation method)": [[227, "neural_compressor.experimental.Distillation.init_train_cfg"]], "input (neural_compressor.experimental.graph_optimization property)": [[227, "neural_compressor.experimental.Graph_Optimization.input"]], "metric (neural_compressor.experimental.benchmark property)": [[227, "neural_compressor.experimental.Benchmark.metric"]], "metric (neural_compressor.experimental.graph_optimization property)": [[227, "neural_compressor.experimental.Graph_Optimization.metric"]], "metric (neural_compressor.experimental.modelconversion property)": [[227, "neural_compressor.experimental.ModelConversion.metric"]], "metric (neural_compressor.experimental.quantization property)": [[227, "neural_compressor.experimental.Quantization.metric"]], "model (neural_compressor.experimental.benchmark property)": [[227, "neural_compressor.experimental.Benchmark.model"]], "model (neural_compressor.experimental.component property)": [[227, "neural_compressor.experimental.Component.model"]], "model (neural_compressor.experimental.graph_optimization property)": [[227, "neural_compressor.experimental.Graph_Optimization.model"]], "model (neural_compressor.experimental.modelconversion property)": [[227, "neural_compressor.experimental.ModelConversion.model"]], "model (neural_compressor.experimental.quantization property)": [[227, "neural_compressor.experimental.Quantization.model"]], "neural_compressor.experimental": [[227, "module-neural_compressor.experimental"]], "objective (neural_compressor.experimental.quantization property)": [[227, "neural_compressor.experimental.Quantization.objective"]], "on_after_compute_loss() (neural_compressor.experimental.component method)": [[227, "neural_compressor.experimental.Component.on_after_compute_loss"]], "on_after_eval() (neural_compressor.experimental.component method)": [[227, "neural_compressor.experimental.Component.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.component method)": [[227, "neural_compressor.experimental.Component.on_after_optimizer_step"]], "on_batch_begin() (neural_compressor.experimental.component method)": [[227, "neural_compressor.experimental.Component.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.component method)": [[227, "neural_compressor.experimental.Component.on_batch_end"]], "on_before_eval() (neural_compressor.experimental.component method)": [[227, "neural_compressor.experimental.Component.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.component method)": [[227, "neural_compressor.experimental.Component.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.component method)": [[227, "neural_compressor.experimental.Component.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.component method)": [[227, "neural_compressor.experimental.Component.on_epoch_end"]], "on_post_forward() (neural_compressor.experimental.distillation method)": [[227, "neural_compressor.experimental.Distillation.on_post_forward"]], "on_post_grad() (neural_compressor.experimental.component method)": [[227, "neural_compressor.experimental.Component.on_post_grad"]], "on_step_begin() (neural_compressor.experimental.component method)": [[227, "neural_compressor.experimental.Component.on_step_begin"]], "on_step_end() (neural_compressor.experimental.component method)": [[227, "neural_compressor.experimental.Component.on_step_end"]], "on_train_begin() (neural_compressor.experimental.component method)": [[227, "neural_compressor.experimental.Component.on_train_begin"]], "on_train_end() (neural_compressor.experimental.component method)": [[227, "neural_compressor.experimental.Component.on_train_end"]], "optimizer (neural_compressor.experimental.distillation property)": [[227, "neural_compressor.experimental.Distillation.optimizer"]], "output (neural_compressor.experimental.graph_optimization property)": [[227, "neural_compressor.experimental.Graph_Optimization.output"]], "post_epoch_end() (neural_compressor.experimental.component method)": [[227, "neural_compressor.experimental.Component.post_epoch_end"]], "post_process() (neural_compressor.experimental.component method)": [[227, "neural_compressor.experimental.Component.post_process"]], "postprocess (neural_compressor.experimental.benchmark property)": [[227, "neural_compressor.experimental.Benchmark.postprocess"]], "postprocess (neural_compressor.experimental.graph_optimization property)": [[227, "neural_compressor.experimental.Graph_Optimization.postprocess"]], "postprocess (neural_compressor.experimental.modelconversion property)": [[227, "neural_compressor.experimental.ModelConversion.postprocess"]], "postprocess (neural_compressor.experimental.quantization property)": [[227, "neural_compressor.experimental.Quantization.postprocess"]], "pre_epoch_begin() (neural_compressor.experimental.component method)": [[227, "neural_compressor.experimental.Component.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.component method)": [[227, "neural_compressor.experimental.Component.pre_process"]], "pre_process() (neural_compressor.experimental.distillation method)": [[227, "neural_compressor.experimental.Distillation.pre_process"]], "pre_process() (neural_compressor.experimental.pruning method)": [[227, "neural_compressor.experimental.Pruning.pre_process"]], "pre_process() (neural_compressor.experimental.quantization method)": [[227, "neural_compressor.experimental.Quantization.pre_process"]], "precisions (neural_compressor.experimental.graph_optimization property)": [[227, "neural_compressor.experimental.Graph_Optimization.precisions"]], "precisions (neural_compressor.experimental.mixedprecision property)": [[227, "neural_compressor.experimental.MixedPrecision.precisions"]], "prepare() (neural_compressor.experimental.component method)": [[227, "neural_compressor.experimental.Component.prepare"]], "prepare() (neural_compressor.experimental.distillation method)": [[227, "neural_compressor.experimental.Distillation.prepare"]], "prepare() (neural_compressor.experimental.pruning method)": [[227, "neural_compressor.experimental.Pruning.prepare"]], "prepare_qat() (neural_compressor.experimental.component method)": [[227, "neural_compressor.experimental.Component.prepare_qat"]], "pruners (neural_compressor.experimental.pruning attribute)": [[227, "neural_compressor.experimental.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning property)": [[227, "neural_compressor.experimental.Pruning.pruning_func"]], "q_func (neural_compressor.experimental.quantization property)": [[227, "neural_compressor.experimental.Quantization.q_func"]], "register_hook() (neural_compressor.experimental.component method)": [[227, "neural_compressor.experimental.Component.register_hook"]], "results (neural_compressor.experimental.benchmark property)": [[227, "neural_compressor.experimental.Benchmark.results"]], "run_instance() (neural_compressor.experimental.benchmark method)": [[227, "neural_compressor.experimental.Benchmark.run_instance"]], "set_config_by_model() (neural_compressor.experimental.graph_optimization method)": [[227, "neural_compressor.experimental.Graph_Optimization.set_config_by_model"]], "set_config_by_model() (neural_compressor.experimental.mixedprecision method)": [[227, "neural_compressor.experimental.MixedPrecision.set_config_by_model"]], "source (neural_compressor.experimental.modelconversion property)": [[227, "neural_compressor.experimental.ModelConversion.source"]], "student_model (neural_compressor.experimental.distillation property)": [[227, "neural_compressor.experimental.Distillation.student_model"]], "summary_benchmark() (neural_compressor.experimental.benchmark method)": [[227, "neural_compressor.experimental.Benchmark.summary_benchmark"]], "teacher_model (neural_compressor.experimental.distillation property)": [[227, "neural_compressor.experimental.Distillation.teacher_model"]], "train_cfg (neural_compressor.experimental.distillation property)": [[227, "neural_compressor.experimental.Distillation.train_cfg"]], "train_dataloader (neural_compressor.experimental.component property)": [[227, "neural_compressor.experimental.Component.train_dataloader"]], "train_distributed (neural_compressor.experimental.distillation property)": [[227, "neural_compressor.experimental.Distillation.train_distributed"]], "train_distributed (neural_compressor.experimental.pruning property)": [[227, "neural_compressor.experimental.Pruning.train_distributed"]], "train_func (neural_compressor.experimental.component property)": [[227, "neural_compressor.experimental.Component.train_func"]], "update_items_for_all_pruners() (neural_compressor.experimental.pruning method)": [[227, "neural_compressor.experimental.Pruning.update_items_for_all_pruners"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[228, "neural_compressor.experimental.metric.bleu.BLEU"], [542, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[228, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[228, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[228, "neural_compressor.experimental.metric.bleu.BLEU.labels"], [542, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[228, "module-neural_compressor.experimental.metric.bleu"], [542, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[228, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[228, "neural_compressor.experimental.metric.bleu.BLEU.predictions"], [542, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "property_chars() (neural_compressor.experimental.metric.bleu.unicoderegex method)": [[228, "neural_compressor.experimental.metric.bleu.UnicodeRegex.property_chars"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[228, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "reset() (neural_compressor.experimental.metric.bleu.bleu method)": [[228, "neural_compressor.experimental.metric.bleu.BLEU.reset"], [542, "neural_compressor.experimental.metric.bleu.BLEU.reset"]], "result() (neural_compressor.experimental.metric.bleu.bleu method)": [[228, "neural_compressor.experimental.metric.bleu.BLEU.result"], [542, "neural_compressor.experimental.metric.bleu.BLEU.result"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[228, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "update() (neural_compressor.experimental.metric.bleu.bleu method)": [[228, "neural_compressor.experimental.metric.bleu.BLEU.update"], [542, "neural_compressor.experimental.metric.bleu.BLEU.update"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[229, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[229, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[230, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[231, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[231, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "computemetrics() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[231, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.ComputeMetrics"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[231, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[231, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[231, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "getagnosticmode() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[231, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetAgnosticMode"]], "getcategory() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[231, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetCategory"]], "getcategoryidlist() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[231, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetCategoryIdList"]], "loadannotations() (neural_compressor.experimental.metric.coco_tools.cocowrapper method)": [[231, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.LoadAnnotations"]], "accumulate() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[231, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.accumulate"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[231, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[231, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[231, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[232, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[232, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[232, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[232, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[232, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[233, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[233, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[233, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[233, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[233, "neural_compressor.experimental.metric.f1.normalize_answer"]], "basemetric (class in neural_compressor.experimental.metric)": [[234, "neural_compressor.experimental.metric.BaseMetric"]], "metrics (class in neural_compressor.experimental.metric)": [[234, "neural_compressor.experimental.metric.METRICS"]], "hvd (neural_compressor.experimental.metric.basemetric property)": [[234, "neural_compressor.experimental.metric.BaseMetric.hvd"]], "metric (neural_compressor.experimental.metric.basemetric property)": [[234, "neural_compressor.experimental.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.experimental.metric)": [[234, "neural_compressor.experimental.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metrics attribute)": [[234, "neural_compressor.experimental.metric.METRICS.metrics"]], "neural_compressor.experimental.metric": [[234, "module-neural_compressor.experimental.metric"]], "register() (neural_compressor.experimental.metric.metrics method)": [[234, "neural_compressor.experimental.metric.METRICS.register"]], "reset() (neural_compressor.experimental.metric.basemetric method)": [[234, "neural_compressor.experimental.metric.BaseMetric.reset"]], "result() (neural_compressor.experimental.metric.basemetric method)": [[234, "neural_compressor.experimental.metric.BaseMetric.result"]], "update() (neural_compressor.experimental.metric.basemetric method)": [[234, "neural_compressor.experimental.metric.BaseMetric.update"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[235, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[235, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[235, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[235, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[235, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[235, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[235, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[235, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[235, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[235, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[235, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[235, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[235, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[235, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[235, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[235, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[235, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[235, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[235, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[235, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[235, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[235, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[235, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[235, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[235, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[235, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[235, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[235, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "compute() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[235, "neural_compressor.experimental.metric.metric.PyTorchLoss.compute"]], "hvd (neural_compressor.experimental.metric.metric.basemetric property)": [[235, "neural_compressor.experimental.metric.metric.BaseMetric.hvd"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[235, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[235, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[235, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[235, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[235, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[235, "neural_compressor.experimental.metric.metric.mIOU"]], "metric (neural_compressor.experimental.metric.metric.basemetric property)": [[235, "neural_compressor.experimental.metric.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[235, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[235, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[235, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[235, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[235, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[235, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[235, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[235, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[235, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[235, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[235, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[235, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[235, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[235, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[235, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[235, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "register() (neural_compressor.experimental.metric.metric.metrics method)": [[235, "neural_compressor.experimental.metric.metric.METRICS.register"]], "reset() (neural_compressor.experimental.metric.metric.accuracy method)": [[235, "neural_compressor.experimental.metric.metric.Accuracy.reset"]], "reset() (neural_compressor.experimental.metric.metric.basemetric method)": [[235, "neural_compressor.experimental.metric.metric.BaseMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[235, "neural_compressor.experimental.metric.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.experimental.metric.metric.f1 method)": [[235, "neural_compressor.experimental.metric.metric.F1.reset"]], "reset() (neural_compressor.experimental.metric.metric.generaltopk method)": [[235, "neural_compressor.experimental.metric.metric.GeneralTopK.reset"]], "reset() (neural_compressor.experimental.metric.metric.loss method)": [[235, "neural_compressor.experimental.metric.metric.Loss.reset"]], "reset() (neural_compressor.experimental.metric.metric.mae method)": [[235, "neural_compressor.experimental.metric.metric.MAE.reset"]], "reset() (neural_compressor.experimental.metric.metric.mse method)": [[235, "neural_compressor.experimental.metric.metric.MSE.reset"]], "reset() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[235, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.reset"]], "reset() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[235, "neural_compressor.experimental.metric.metric.PyTorchLoss.reset"]], "reset() (neural_compressor.experimental.metric.metric.rmse method)": [[235, "neural_compressor.experimental.metric.metric.RMSE.reset"]], "reset() (neural_compressor.experimental.metric.metric.roc method)": [[235, "neural_compressor.experimental.metric.metric.ROC.reset"]], "reset() (neural_compressor.experimental.metric.metric.squadf1 method)": [[235, "neural_compressor.experimental.metric.metric.SquadF1.reset"]], "reset() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[235, "neural_compressor.experimental.metric.metric.TensorflowMAP.reset"]], "reset() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[235, "neural_compressor.experimental.metric.metric.TensorflowTopK.reset"]], "reset() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[235, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[235, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[235, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.miou method)": [[235, "neural_compressor.experimental.metric.metric.mIOU.reset"]], "result() (neural_compressor.experimental.metric.metric.accuracy method)": [[235, "neural_compressor.experimental.metric.metric.Accuracy.result"]], "result() (neural_compressor.experimental.metric.metric.basemetric method)": [[235, "neural_compressor.experimental.metric.metric.BaseMetric.result"]], "result() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[235, "neural_compressor.experimental.metric.metric.COCOmAPv2.result"]], "result() (neural_compressor.experimental.metric.metric.f1 method)": [[235, "neural_compressor.experimental.metric.metric.F1.result"]], "result() (neural_compressor.experimental.metric.metric.generaltopk method)": [[235, "neural_compressor.experimental.metric.metric.GeneralTopK.result"]], "result() (neural_compressor.experimental.metric.metric.loss method)": [[235, "neural_compressor.experimental.metric.metric.Loss.result"]], "result() (neural_compressor.experimental.metric.metric.mae method)": [[235, "neural_compressor.experimental.metric.metric.MAE.result"]], "result() (neural_compressor.experimental.metric.metric.mse method)": [[235, "neural_compressor.experimental.metric.metric.MSE.result"]], "result() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[235, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.result"]], "result() (neural_compressor.experimental.metric.metric.rmse method)": [[235, "neural_compressor.experimental.metric.metric.RMSE.result"]], "result() (neural_compressor.experimental.metric.metric.roc method)": [[235, "neural_compressor.experimental.metric.metric.ROC.result"]], "result() (neural_compressor.experimental.metric.metric.squadf1 method)": [[235, "neural_compressor.experimental.metric.metric.SquadF1.result"]], "result() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[235, "neural_compressor.experimental.metric.metric.TensorflowMAP.result"]], "result() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[235, "neural_compressor.experimental.metric.metric.TensorflowTopK.result"]], "result() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[235, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.result"]], "result() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[235, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.result"]], "result() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[235, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.result"]], "result() (neural_compressor.experimental.metric.metric.miou method)": [[235, "neural_compressor.experimental.metric.metric.mIOU.result"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[235, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[235, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[235, "neural_compressor.experimental.metric.metric.Loss.sum"]], "update() (neural_compressor.experimental.metric.metric.accuracy method)": [[235, "neural_compressor.experimental.metric.metric.Accuracy.update"]], "update() (neural_compressor.experimental.metric.metric.basemetric method)": [[235, "neural_compressor.experimental.metric.metric.BaseMetric.update"]], "update() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[235, "neural_compressor.experimental.metric.metric.COCOmAPv2.update"]], "update() (neural_compressor.experimental.metric.metric.f1 method)": [[235, "neural_compressor.experimental.metric.metric.F1.update"]], "update() (neural_compressor.experimental.metric.metric.generaltopk method)": [[235, "neural_compressor.experimental.metric.metric.GeneralTopK.update"]], "update() (neural_compressor.experimental.metric.metric.loss method)": [[235, "neural_compressor.experimental.metric.metric.Loss.update"]], "update() (neural_compressor.experimental.metric.metric.mae method)": [[235, "neural_compressor.experimental.metric.metric.MAE.update"]], "update() (neural_compressor.experimental.metric.metric.mse method)": [[235, "neural_compressor.experimental.metric.metric.MSE.update"]], "update() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[235, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.update"]], "update() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[235, "neural_compressor.experimental.metric.metric.PyTorchLoss.update"]], "update() (neural_compressor.experimental.metric.metric.rmse method)": [[235, "neural_compressor.experimental.metric.metric.RMSE.update"]], "update() (neural_compressor.experimental.metric.metric.roc method)": [[235, "neural_compressor.experimental.metric.metric.ROC.update"]], "update() (neural_compressor.experimental.metric.metric.squadf1 method)": [[235, "neural_compressor.experimental.metric.metric.SquadF1.update"]], "update() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[235, "neural_compressor.experimental.metric.metric.TensorflowMAP.update"]], "update() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[235, "neural_compressor.experimental.metric.metric.TensorflowTopK.update"]], "update() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[235, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.update"]], "update() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[235, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.update"]], "update() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[235, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.update"]], "update() (neural_compressor.experimental.metric.metric.miou method)": [[235, "neural_compressor.experimental.metric.metric.mIOU.update"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[236, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[236, "module-neural_compressor.experimental.mixed_precision"]], "precisions (neural_compressor.experimental.mixed_precision.mixedprecision property)": [[236, "neural_compressor.experimental.mixed_precision.MixedPrecision.precisions"]], "set_config_by_model() (neural_compressor.experimental.mixed_precision.mixedprecision method)": [[236, "neural_compressor.experimental.mixed_precision.MixedPrecision.set_config_by_model"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[237, "neural_compressor.experimental.model_conversion.ModelConversion"]], "dataset() (neural_compressor.experimental.model_conversion.modelconversion method)": [[237, "neural_compressor.experimental.model_conversion.ModelConversion.dataset"]], "destination (neural_compressor.experimental.model_conversion.modelconversion property)": [[237, "neural_compressor.experimental.model_conversion.ModelConversion.destination"]], "eval_dataloader (neural_compressor.experimental.model_conversion.modelconversion property)": [[237, "neural_compressor.experimental.model_conversion.ModelConversion.eval_dataloader"]], "eval_func (neural_compressor.experimental.model_conversion.modelconversion property)": [[237, "neural_compressor.experimental.model_conversion.ModelConversion.eval_func"]], "metric (neural_compressor.experimental.model_conversion.modelconversion property)": [[237, "neural_compressor.experimental.model_conversion.ModelConversion.metric"]], "model (neural_compressor.experimental.model_conversion.modelconversion property)": [[237, "neural_compressor.experimental.model_conversion.ModelConversion.model"]], "neural_compressor.experimental.model_conversion": [[237, "module-neural_compressor.experimental.model_conversion"]], "postprocess (neural_compressor.experimental.model_conversion.modelconversion property)": [[237, "neural_compressor.experimental.model_conversion.ModelConversion.postprocess"]], "source (neural_compressor.experimental.model_conversion.modelconversion property)": [[237, "neural_compressor.experimental.model_conversion.ModelConversion.source"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[238, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "estimate() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[238, "neural_compressor.experimental.nas.basic_nas.BasicNAS.estimate"]], "execute() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[238, "neural_compressor.experimental.nas.basic_nas.BasicNAS.execute"]], "init_by_cfg() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[238, "neural_compressor.experimental.nas.basic_nas.BasicNAS.init_by_cfg"]], "neural_compressor.experimental.nas.basic_nas": [[238, "module-neural_compressor.experimental.nas.basic_nas"]], "pre_process() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[238, "neural_compressor.experimental.nas.basic_nas.BasicNAS.pre_process"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[239, "neural_compressor.experimental.nas.dynas.DyNAS"]], "create_acc_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[239, "neural_compressor.experimental.nas.dynas.DyNAS.create_acc_predictor"]], "create_latency_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[239, "neural_compressor.experimental.nas.dynas.DyNAS.create_latency_predictor"]], "create_macs_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[239, "neural_compressor.experimental.nas.dynas.DyNAS.create_macs_predictor"]], "estimate() (neural_compressor.experimental.nas.dynas.dynas method)": [[239, "neural_compressor.experimental.nas.dynas.DyNAS.estimate"]], "init_cfg() (neural_compressor.experimental.nas.dynas.dynas method)": [[239, "neural_compressor.experimental.nas.dynas.DyNAS.init_cfg"]], "init_for_search() (neural_compressor.experimental.nas.dynas.dynas method)": [[239, "neural_compressor.experimental.nas.dynas.DyNAS.init_for_search"]], "neural_compressor.experimental.nas.dynas": [[239, "module-neural_compressor.experimental.nas.dynas"]], "search() (neural_compressor.experimental.nas.dynas.dynas method)": [[239, "neural_compressor.experimental.nas.dynas.DyNAS.search"]], "select_model_arch() (neural_compressor.experimental.nas.dynas.dynas method)": [[239, "neural_compressor.experimental.nas.dynas.DyNAS.select_model_arch"]], "parametermanager (class in neural_compressor.experimental.nas.dynast.dynas_manager)": [[240, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager"]], "transformerltencoding (class in neural_compressor.experimental.nas.dynast.dynas_manager)": [[240, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding"]], "create_training_set() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager static method)": [[240, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.create_training_set"]], "create_training_set() (neural_compressor.experimental.nas.dynast.dynas_manager.transformerltencoding method)": [[240, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding.create_training_set"]], "import_csv() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[240, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.import_csv"]], "import_csv() (neural_compressor.experimental.nas.dynast.dynas_manager.transformerltencoding method)": [[240, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding.import_csv"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[240, "module-neural_compressor.experimental.nas.dynast.dynas_manager"]], "onehot_generic() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[240, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.onehot_generic"]], "process_param_dict() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[240, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.process_param_dict"]], "random_sample() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[240, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.random_sample"]], "random_samples() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[240, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.random_samples"]], "set_seed() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[240, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.set_seed"]], "translate2param() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[240, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.translate2param"]], "translate2pymoo() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[240, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.translate2pymoo"]], "predictor (class in neural_compressor.experimental.nas.dynast.dynas_predictor)": [[241, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor"]], "get_metrics() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[241, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.get_metrics"]], "get_parameters() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[241, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.get_parameters"]], "load() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[241, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.load"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[241, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"]], "predict() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[241, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.predict"]], "save() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[241, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.save"]], "train() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[241, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.train"]], "problemmultiobjective (class in neural_compressor.experimental.nas.dynast.dynas_search)": [[242, "neural_compressor.experimental.nas.dynast.dynas_search.ProblemMultiObjective"]], "searchalgomanager (class in neural_compressor.experimental.nas.dynast.dynas_search)": [[242, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager"]], "configure_age() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[242, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.configure_age"]], "configure_nsga2() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[242, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.configure_nsga2"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[242, "module-neural_compressor.experimental.nas.dynast.dynas_search"]], "run_search() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[242, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.run_search"]], "evaluationinterface (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[243, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface"]], "evaluationinterfacemobilenetv3 (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[243, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3"]], "evaluationinterfaceresnet50 (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[243, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50"]], "evaluationinterfacetransformerlt (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[243, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT"]], "ofarunner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[243, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner"]], "runner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[243, "neural_compressor.experimental.nas.dynast.dynas_utils.Runner"]], "torchvisionreference (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[243, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference"]], "transformerltrunner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[243, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner"]], "clear_csv() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterface method)": [[243, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface.clear_csv"]], "clear_csv() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacetransformerlt method)": [[243, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT.clear_csv"]], "estimate_accuracy_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[243, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_accuracy_top1"]], "estimate_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[243, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_latency"]], "estimate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[243, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_macs"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterface method)": [[243, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacemobilenetv3 method)": [[243, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfaceresnet50 method)": [[243, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacetransformerlt method)": [[243, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT.eval_subnet"]], "get_macs() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[243, "neural_compressor.experimental.nas.dynast.dynas_utils.get_macs"]], "get_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[243, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.get_subnet"]], "get_torchvision_model() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[243, "neural_compressor.experimental.nas.dynast.dynas_utils.get_torchvision_model"]], "measure_latency() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[243, "neural_compressor.experimental.nas.dynast.dynas_utils.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[243, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[243, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.transformerltrunner method)": [[243, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner.measure_latency"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[243, "module-neural_compressor.experimental.nas.dynast.dynas_utils"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[243, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.validate_macs"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[243, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.validate_macs"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.transformerltrunner method)": [[243, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner.validate_macs"]], "validate_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[243, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.validate_top1"]], "validate_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[243, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.validate_top1"]], "neural_compressor.experimental.nas.dynast": [[244, "module-neural_compressor.experimental.nas.dynast"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[245, "module-neural_compressor.experimental.nas.dynast.supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[246, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"]], "multiheadattentionsuper (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[247, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.multiheadattentionsuper method)": [[247, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper.forward"]], "get_incremental_state() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[247, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.get_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[247, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"]], "reorder_incremental_state() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.multiheadattentionsuper method)": [[247, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper.reorder_incremental_state"]], "set_incremental_state() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[247, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.set_incremental_state"]], "compute_bleu() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[248, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_bleu"]], "compute_latency() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[248, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_latency"]], "compute_macs() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[248, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[248, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"]], "transformerdecoder (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[249, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder"]], "transformerdecoderlayer (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[249, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer"]], "transformerencoder (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[249, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder"]], "transformerencoderlayer (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[249, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer"]], "transformersupernetwork (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[249, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerSuperNetwork"]], "extract_features() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[249, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.extract_features"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[249, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoderlayer method)": [[249, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[249, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoderlayer method)": [[249, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer.forward"]], "max_positions() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[249, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.max_positions"]], "max_positions() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[249, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.max_positions"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[249, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"]], "output_layer() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[249, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.output_layer"]], "reorder_encoder_out() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[249, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.reorder_encoder_out"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[249, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.upgrade_state_dict_named"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[249, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.upgrade_state_dict_named"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoderlayer method)": [[249, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer.upgrade_state_dict_named"]], "basicnas (class in neural_compressor.experimental.nas)": [[250, "neural_compressor.experimental.nas.BasicNAS"]], "dynas (class in neural_compressor.experimental.nas)": [[250, "neural_compressor.experimental.nas.DyNAS"]], "nas (class in neural_compressor.experimental.nas)": [[250, "neural_compressor.experimental.nas.NAS"]], "create_acc_predictor() (neural_compressor.experimental.nas.dynas method)": [[250, "neural_compressor.experimental.nas.DyNAS.create_acc_predictor"]], "create_latency_predictor() (neural_compressor.experimental.nas.dynas method)": [[250, "neural_compressor.experimental.nas.DyNAS.create_latency_predictor"]], "create_macs_predictor() (neural_compressor.experimental.nas.dynas method)": [[250, "neural_compressor.experimental.nas.DyNAS.create_macs_predictor"]], "estimate() (neural_compressor.experimental.nas.basicnas method)": [[250, "neural_compressor.experimental.nas.BasicNAS.estimate"]], "estimate() (neural_compressor.experimental.nas.dynas method)": [[250, "neural_compressor.experimental.nas.DyNAS.estimate"]], "execute() (neural_compressor.experimental.nas.basicnas method)": [[250, "neural_compressor.experimental.nas.BasicNAS.execute"]], "init_by_cfg() (neural_compressor.experimental.nas.basicnas method)": [[250, "neural_compressor.experimental.nas.BasicNAS.init_by_cfg"]], "init_cfg() (neural_compressor.experimental.nas.dynas method)": [[250, "neural_compressor.experimental.nas.DyNAS.init_cfg"]], "init_for_search() (neural_compressor.experimental.nas.dynas method)": [[250, "neural_compressor.experimental.nas.DyNAS.init_for_search"]], "neural_compressor.experimental.nas": [[250, "module-neural_compressor.experimental.nas"]], "pre_process() (neural_compressor.experimental.nas.basicnas method)": [[250, "neural_compressor.experimental.nas.BasicNAS.pre_process"]], "search() (neural_compressor.experimental.nas.dynas method)": [[250, "neural_compressor.experimental.nas.DyNAS.search"]], "select_model_arch() (neural_compressor.experimental.nas.dynas method)": [[250, "neural_compressor.experimental.nas.DyNAS.select_model_arch"]], "nas (class in neural_compressor.experimental.nas.nas)": [[251, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[251, "neural_compressor.experimental.nas.nas.NASBase"]], "count_model_parameters() (neural_compressor.experimental.nas.nas.nasbase method)": [[251, "neural_compressor.experimental.nas.nas.NASBase.count_model_parameters"]], "dump_search_results() (neural_compressor.experimental.nas.nas.nasbase method)": [[251, "neural_compressor.experimental.nas.nas.NASBase.dump_search_results"]], "estimate() (neural_compressor.experimental.nas.nas.nasbase method)": [[251, "neural_compressor.experimental.nas.nas.NASBase.estimate"]], "find_best_model_archs() (neural_compressor.experimental.nas.nas.nasbase method)": [[251, "neural_compressor.experimental.nas.nas.NASBase.find_best_model_archs"]], "init_search_cfg() (neural_compressor.experimental.nas.nas.nasbase method)": [[251, "neural_compressor.experimental.nas.nas.NASBase.init_search_cfg"]], "load_search_results() (neural_compressor.experimental.nas.nas.nasbase method)": [[251, "neural_compressor.experimental.nas.nas.NASBase.load_search_results"]], "metrics_conversion() (neural_compressor.experimental.nas.nas.nasbase method)": [[251, "neural_compressor.experimental.nas.nas.NASBase.metrics_conversion"]], "model_builder (neural_compressor.experimental.nas.nas.nasbase property)": [[251, "neural_compressor.experimental.nas.nas.NASBase.model_builder"]], "neural_compressor.experimental.nas.nas": [[251, "module-neural_compressor.experimental.nas.nas"]], "params_vec2params_dict() (neural_compressor.experimental.nas.nas.nasbase method)": [[251, "neural_compressor.experimental.nas.nas.NASBase.params_vec2params_dict"]], "search() (neural_compressor.experimental.nas.nas.nasbase method)": [[251, "neural_compressor.experimental.nas.nas.NASBase.search"]], "search_algorithm (neural_compressor.experimental.nas.nas.nasbase property)": [[251, "neural_compressor.experimental.nas.nas.NASBase.search_algorithm"]], "search_space (neural_compressor.experimental.nas.nas.nasbase property)": [[251, "neural_compressor.experimental.nas.nas.NASBase.search_space"]], "select_model_arch() (neural_compressor.experimental.nas.nas.nasbase method)": [[251, "neural_compressor.experimental.nas.nas.NASBase.select_model_arch"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[252, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[252, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[252, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[252, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[253, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[253, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[253, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[253, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "get_feedback() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[253, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.get_feedback"]], "get_feedback() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[253, "neural_compressor.experimental.nas.search_algorithms.Searcher.get_feedback"]], "indices2params_vec() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[253, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.indices2params_vec"]], "neural_compressor.experimental.nas.search_algorithms": [[253, "module-neural_compressor.experimental.nas.search_algorithms"]], "params_vec2params_dict() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[253, "neural_compressor.experimental.nas.search_algorithms.Searcher.params_vec2params_dict"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[253, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.gridsearcher method)": [[253, "neural_compressor.experimental.nas.search_algorithms.GridSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.randomsearcher method)": [[253, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[253, "neural_compressor.experimental.nas.search_algorithms.Searcher.suggest"]], "pruning (class in neural_compressor.experimental.pruning)": [[254, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[254, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[254, "neural_compressor.experimental.pruning.Pruning.conf"]], "evaluation_distributed (neural_compressor.experimental.pruning.pruning property)": [[254, "neural_compressor.experimental.pruning.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.pruning.pruning method)": [[254, "neural_compressor.experimental.pruning.Pruning.execute"]], "generate_hooks() (neural_compressor.experimental.pruning.pruning method)": [[254, "neural_compressor.experimental.pruning.Pruning.generate_hooks"]], "generate_pruners() (neural_compressor.experimental.pruning.pruning method)": [[254, "neural_compressor.experimental.pruning.Pruning.generate_pruners"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning.pruning method)": [[254, "neural_compressor.experimental.pruning.Pruning.get_sparsity_ratio"]], "neural_compressor.experimental.pruning": [[254, "module-neural_compressor.experimental.pruning"]], "on_after_compute_loss() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[254, "neural_compressor.experimental.pruning.TfPruningCallback.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[254, "neural_compressor.experimental.pruning.TfPruningCallback.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[254, "neural_compressor.experimental.pruning.TfPruningCallback.on_batch_end"]], "on_epoch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[254, "neural_compressor.experimental.pruning.TfPruningCallback.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[254, "neural_compressor.experimental.pruning.TfPruningCallback.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[254, "neural_compressor.experimental.pruning.TfPruningCallback.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[254, "neural_compressor.experimental.pruning.TfPruningCallback.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[254, "neural_compressor.experimental.pruning.TfPruningCallback.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[254, "neural_compressor.experimental.pruning.TfPruningCallback.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[254, "neural_compressor.experimental.pruning.TfPruningCallback.post_epoch_end"]], "pre_epoch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[254, "neural_compressor.experimental.pruning.TfPruningCallback.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.pruning.pruning method)": [[254, "neural_compressor.experimental.pruning.Pruning.pre_process"]], "prepare() (neural_compressor.experimental.pruning.pruning method)": [[254, "neural_compressor.experimental.pruning.Pruning.prepare"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[254, "neural_compressor.experimental.pruning.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning.pruning property)": [[254, "neural_compressor.experimental.pruning.Pruning.pruning_func"]], "train_distributed (neural_compressor.experimental.pruning.pruning property)": [[254, "neural_compressor.experimental.pruning.Pruning.train_distributed"]], "update_items_for_all_pruners() (neural_compressor.experimental.pruning.pruning method)": [[254, "neural_compressor.experimental.pruning.Pruning.update_items_for_all_pruners"]], "patterns (class in neural_compressor.experimental.pruning_recipes)": [[255, "neural_compressor.experimental.pruning_recipes.PATTERNS"]], "neural_compressor.experimental.pruning_recipes": [[255, "module-neural_compressor.experimental.pruning_recipes"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns attribute)": [[255, "neural_compressor.experimental.pruning_recipes.PATTERNS.patterns"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns class method)": [[255, "neural_compressor.experimental.pruning_recipes.PATTERNS.support_pattern"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns)": [[256, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS"]], "neural_compressor.experimental.pruning_recipes.patterns": [[256, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.patterns attribute)": [[256, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS.patterns"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns.patterns class method)": [[256, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS.support_pattern"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[257, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[257, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "compute_sparsity() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[257, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.compute_sparsity"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[257, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[257, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[257, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "reduce() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[257, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.reduce"]], "reshape() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[257, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.reshape"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns class method)": [[257, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.support_pattern"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[258, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[258, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[258, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[258, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[258, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[258, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "compute_sparsity() (neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.tilepatternbase method)": [[258, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase.compute_sparsity"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[258, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "repeat_mask() (neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.tilepatternbase method)": [[258, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase.repeat_mask"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[259, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[259, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[259, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "evaluation_distributed (neural_compressor.experimental.pruning_v2.pruning property)": [[259, "neural_compressor.experimental.pruning_v2.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.pruning_v2.pruning method)": [[259, "neural_compressor.experimental.pruning_v2.Pruning.execute"]], "generate_hooks() (neural_compressor.experimental.pruning_v2.pruning method)": [[259, "neural_compressor.experimental.pruning_v2.Pruning.generate_hooks"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning_v2.pruning method)": [[259, "neural_compressor.experimental.pruning_v2.Pruning.get_sparsity_ratio"]], "neural_compressor.experimental.pruning_v2": [[259, "module-neural_compressor.experimental.pruning_v2"]], "on_after_compute_loss() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[259, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[259, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[259, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_batch_end"]], "on_epoch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[259, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[259, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[259, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[259, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[259, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[259, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[259, "neural_compressor.experimental.pruning_v2.TfPruningCallback.post_epoch_end"]], "pre_epoch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[259, "neural_compressor.experimental.pruning_v2.TfPruningCallback.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.pruning_v2.pruning method)": [[259, "neural_compressor.experimental.pruning_v2.Pruning.pre_process"]], "prepare() (neural_compressor.experimental.pruning_v2.pruning method)": [[259, "neural_compressor.experimental.pruning_v2.Pruning.prepare"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[259, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning_v2.pruning property)": [[259, "neural_compressor.experimental.pruning_v2.Pruning.pruning_func"]], "train_distributed (neural_compressor.experimental.pruning_v2.pruning property)": [[259, "neural_compressor.experimental.pruning_v2.Pruning.train_distributed"]], "update_config() (neural_compressor.experimental.pruning_v2.pruning method)": [[259, "neural_compressor.experimental.pruning_v2.Pruning.update_config"]], "neural_compressor.experimental.pytorch_pruner": [[260, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[261, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[262, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[262, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[262, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[262, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[262, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[262, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_block_size_dict() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[262, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_block_size_dict"]], "get_block_size_dict() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[262, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_block_size_dict"]], "get_mask_single() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[262, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_mask_single"]], "get_masks() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[262, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[262, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks_global"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[262, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_masks_global"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[262, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_masks_global"]], "get_masks_local() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[262, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks_local"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[262, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[262, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[262, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[262, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_pattern_lock_masks"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[262, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[262, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[262, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_sparsity_ratio"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[262, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[262, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[262, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[262, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[263, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[263, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[263, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[263, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[263, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[263, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[263, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[264, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[264, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[264, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[264, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[264, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "check_is_pruned_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.check_is_pruned_step"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[264, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[264, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[264, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[264, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[264, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "mask_weights() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.mask_weights"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[264, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[264, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[264, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[264, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "on_after_eval() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.patternlockpruner method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.snipmomentumpruner method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.snippruner method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruner.patternlockpruner method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner.on_step_begin"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_train_end"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[264, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[264, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[264, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[264, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[264, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[264, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[264, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "update_scores() (neural_compressor.experimental.pytorch_pruner.pruner.magnitudepruner method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner.update_scores"]], "update_scores() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[264, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_scores"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[265, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[265, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[265, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.get_sparsity_ratio"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[265, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[265, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "on_after_eval() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[265, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[265, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[265, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[265, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[265, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[265, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[265, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[265, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[265, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[265, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_train_end"]], "prepare() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[265, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.prepare"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[265, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[265, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "update_items_for_all_pruners() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[265, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.update_items_for_all_pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[266, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[266, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[266, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[266, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[266, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[266, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[266, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.iterativescheduler method)": [[266, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.oneshotscheduler method)": [[266, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler method)": [[266, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.update_sparsity_ratio"]], "quantization (class in neural_compressor.experimental.quantization)": [[267, "neural_compressor.experimental.quantization.Quantization"]], "calib_dataloader (neural_compressor.experimental.quantization.quantization property)": [[267, "neural_compressor.experimental.quantization.Quantization.calib_dataloader"]], "dataset() (neural_compressor.experimental.quantization.quantization method)": [[267, "neural_compressor.experimental.quantization.Quantization.dataset"]], "distributed_execute() (neural_compressor.experimental.quantization.quantization method)": [[267, "neural_compressor.experimental.quantization.Quantization.distributed_execute"]], "execute() (neural_compressor.experimental.quantization.quantization method)": [[267, "neural_compressor.experimental.quantization.Quantization.execute"]], "metric (neural_compressor.experimental.quantization.quantization property)": [[267, "neural_compressor.experimental.quantization.Quantization.metric"]], "model (neural_compressor.experimental.quantization.quantization property)": [[267, "neural_compressor.experimental.quantization.Quantization.model"]], "neural_compressor.experimental.quantization": [[267, "module-neural_compressor.experimental.quantization"]], "objective (neural_compressor.experimental.quantization.quantization property)": [[267, "neural_compressor.experimental.quantization.Quantization.objective"]], "postprocess (neural_compressor.experimental.quantization.quantization property)": [[267, "neural_compressor.experimental.quantization.Quantization.postprocess"]], "pre_process() (neural_compressor.experimental.quantization.quantization method)": [[267, "neural_compressor.experimental.quantization.Quantization.pre_process"]], "q_func (neural_compressor.experimental.quantization.quantization property)": [[267, "neural_compressor.experimental.quantization.Quantization.q_func"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[268, "neural_compressor.experimental.scheduler.Scheduler"]], "append() (neural_compressor.experimental.scheduler.scheduler method)": [[268, "neural_compressor.experimental.scheduler.Scheduler.append"]], "combine() (neural_compressor.experimental.scheduler.scheduler method)": [[268, "neural_compressor.experimental.scheduler.Scheduler.combine"]], "eval_func (neural_compressor.experimental.scheduler.scheduler property)": [[268, "neural_compressor.experimental.scheduler.Scheduler.eval_func"]], "model (neural_compressor.experimental.scheduler.scheduler property)": [[268, "neural_compressor.experimental.scheduler.Scheduler.model"]], "neural_compressor.experimental.scheduler": [[268, "module-neural_compressor.experimental.scheduler"]], "train_func (neural_compressor.experimental.scheduler.scheduler property)": [[268, "neural_compressor.experimental.scheduler.Scheduler.train_func"]], "benchmark (class in neural_compressor)": [[269, "neural_compressor.Benchmark"]], "distillationconfig (class in neural_compressor)": [[269, "neural_compressor.DistillationConfig"]], "posttrainingquantconfig (class in neural_compressor)": [[269, "neural_compressor.PostTrainingQuantConfig"]], "quantizationawaretrainingconfig (class in neural_compressor)": [[269, "neural_compressor.QuantizationAwareTrainingConfig"]], "weightpruningconfig (class in neural_compressor)": [[269, "neural_compressor.WeightPruningConfig"]], "approach (neural_compressor.posttrainingquantconfig property)": [[269, "neural_compressor.PostTrainingQuantConfig.approach"]], "approach (neural_compressor.quantizationawaretrainingconfig property)": [[269, "neural_compressor.QuantizationAwareTrainingConfig.approach"]], "criterion (neural_compressor.distillationconfig property)": [[269, "neural_compressor.DistillationConfig.criterion"]], "dataloader() (neural_compressor.benchmark method)": [[269, "neural_compressor.Benchmark.dataloader"]], "metric() (neural_compressor.benchmark method)": [[269, "neural_compressor.Benchmark.metric"]], "neural_compressor": [[269, "module-neural_compressor"]], "optimizer (neural_compressor.distillationconfig property)": [[269, "neural_compressor.DistillationConfig.optimizer"]], "postprocess() (neural_compressor.benchmark method)": [[269, "neural_compressor.Benchmark.postprocess"]], "set_random_seed() (in module neural_compressor)": [[269, "neural_compressor.set_random_seed"]], "set_tensorboard() (in module neural_compressor)": [[269, "neural_compressor.set_tensorboard"]], "set_workspace() (in module neural_compressor)": [[269, "neural_compressor.set_workspace"]], "teacher_model (neural_compressor.distillationconfig property)": [[269, "neural_compressor.DistillationConfig.teacher_model"]], "tuning_criterion (neural_compressor.posttrainingquantconfig property)": [[269, "neural_compressor.PostTrainingQuantConfig.tuning_criterion"]], "weight_compression (neural_compressor.weightpruningconfig property)": [[269, "neural_compressor.WeightPruningConfig.weight_compression"]], "bleu (class in neural_compressor.metric.bleu)": [[270, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[270, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[270, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[270, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[270, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[270, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[270, "neural_compressor.metric.bleu.BLEU.predictions"]], "property_chars() (neural_compressor.metric.bleu.unicoderegex method)": [[270, "neural_compressor.metric.bleu.UnicodeRegex.property_chars"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[270, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "reset() (neural_compressor.metric.bleu.bleu method)": [[270, "neural_compressor.metric.bleu.BLEU.reset"]], "result() (neural_compressor.metric.bleu.bleu method)": [[270, "neural_compressor.metric.bleu.BLEU.result"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[270, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "update() (neural_compressor.metric.bleu.bleu method)": [[270, "neural_compressor.metric.bleu.BLEU.update"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[271, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[271, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[272, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[273, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[273, "neural_compressor.metric.coco_tools.COCOWrapper"]], "computemetrics() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[273, "neural_compressor.metric.coco_tools.COCOEvalWrapper.ComputeMetrics"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[273, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[273, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[273, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "getagnosticmode() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[273, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetAgnosticMode"]], "getcategory() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[273, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetCategory"]], "getcategoryidlist() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[273, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetCategoryIdList"]], "loadannotations() (neural_compressor.metric.coco_tools.cocowrapper method)": [[273, "neural_compressor.metric.coco_tools.COCOWrapper.LoadAnnotations"]], "accumulate() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[273, "neural_compressor.metric.coco_tools.COCOEvalWrapper.accumulate"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[273, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[273, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[273, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[274, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[274, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[274, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[274, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[274, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[275, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[275, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[275, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[275, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[275, "neural_compressor.metric.f1.normalize_answer"]], "basemetric (class in neural_compressor.metric)": [[276, "neural_compressor.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric)": [[276, "neural_compressor.metric.COCOmAPv2"]], "metrics (class in neural_compressor.metric)": [[276, "neural_compressor.metric.METRICS"]], "metric (class in neural_compressor.metric)": [[276, "neural_compressor.metric.Metric"]], "squadf1 (class in neural_compressor.metric)": [[276, "neural_compressor.metric.SquadF1"]], "tensorflowtopk (class in neural_compressor.metric)": [[276, "neural_compressor.metric.TensorflowTopK"]], "hvd (neural_compressor.metric.basemetric property)": [[276, "neural_compressor.metric.BaseMetric.hvd"]], "k (neural_compressor.metric.tensorflowtopk attribute)": [[276, "neural_compressor.metric.TensorflowTopK.k"]], "metric (neural_compressor.metric.basemetric property)": [[276, "neural_compressor.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.metric)": [[276, "neural_compressor.metric.metric_registry"]], "metrics (neural_compressor.metric.metrics attribute)": [[276, "neural_compressor.metric.METRICS.metrics"]], "neural_compressor.metric": [[276, "module-neural_compressor.metric"]], "num_correct (neural_compressor.metric.tensorflowtopk attribute)": [[276, "neural_compressor.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.tensorflowtopk attribute)": [[276, "neural_compressor.metric.TensorflowTopK.num_sample"]], "register() (neural_compressor.metric.metrics method)": [[276, "neural_compressor.metric.METRICS.register"]], "reset() (neural_compressor.metric.basemetric method)": [[276, "neural_compressor.metric.BaseMetric.reset"]], "reset() (neural_compressor.metric.cocomapv2 method)": [[276, "neural_compressor.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.metric.squadf1 method)": [[276, "neural_compressor.metric.SquadF1.reset"]], "reset() (neural_compressor.metric.tensorflowtopk method)": [[276, "neural_compressor.metric.TensorflowTopK.reset"]], "result() (neural_compressor.metric.basemetric method)": [[276, "neural_compressor.metric.BaseMetric.result"]], "result() (neural_compressor.metric.cocomapv2 method)": [[276, "neural_compressor.metric.COCOmAPv2.result"]], "result() (neural_compressor.metric.squadf1 method)": [[276, "neural_compressor.metric.SquadF1.result"]], "result() (neural_compressor.metric.tensorflowtopk method)": [[276, "neural_compressor.metric.TensorflowTopK.result"]], "update() (neural_compressor.metric.basemetric method)": [[276, "neural_compressor.metric.BaseMetric.update"]], "update() (neural_compressor.metric.cocomapv2 method)": [[276, "neural_compressor.metric.COCOmAPv2.update"]], "update() (neural_compressor.metric.squadf1 method)": [[276, "neural_compressor.metric.SquadF1.update"]], "update() (neural_compressor.metric.tensorflowtopk method)": [[276, "neural_compressor.metric.TensorflowTopK.update"]], "accuracy (class in neural_compressor.metric.metric)": [[277, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[277, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[277, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[277, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[277, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[277, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[277, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[277, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[277, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[277, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[277, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[277, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[277, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[277, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[277, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[277, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[277, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[277, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[277, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[277, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[277, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[277, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[277, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[277, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[277, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[277, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[277, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[277, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[277, "neural_compressor.metric.metric.MSE.compare_label"]], "compute() (neural_compressor.metric.metric.pytorchloss method)": [[277, "neural_compressor.metric.metric.PyTorchLoss.compute"]], "hvd (neural_compressor.metric.metric.basemetric property)": [[277, "neural_compressor.metric.metric.BaseMetric.hvd"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[277, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[277, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[277, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[277, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[277, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[277, "neural_compressor.metric.metric.mIOU"]], "metric (neural_compressor.metric.metric.basemetric property)": [[277, "neural_compressor.metric.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.metric.metric)": [[277, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[277, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[277, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[277, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[277, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[277, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[277, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[277, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[277, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[277, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[277, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[277, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[277, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[277, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[277, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[277, "neural_compressor.metric.metric.MSE.pred_list"]], "register() (neural_compressor.metric.metric.metrics method)": [[277, "neural_compressor.metric.metric.METRICS.register"]], "reset() (neural_compressor.metric.metric.accuracy method)": [[277, "neural_compressor.metric.metric.Accuracy.reset"]], "reset() (neural_compressor.metric.metric.basemetric method)": [[277, "neural_compressor.metric.metric.BaseMetric.reset"]], "reset() (neural_compressor.metric.metric.cocomapv2 method)": [[277, "neural_compressor.metric.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.metric.metric.f1 method)": [[277, "neural_compressor.metric.metric.F1.reset"]], "reset() (neural_compressor.metric.metric.generaltopk method)": [[277, "neural_compressor.metric.metric.GeneralTopK.reset"]], "reset() (neural_compressor.metric.metric.loss method)": [[277, "neural_compressor.metric.metric.Loss.reset"]], "reset() (neural_compressor.metric.metric.mae method)": [[277, "neural_compressor.metric.metric.MAE.reset"]], "reset() (neural_compressor.metric.metric.mse method)": [[277, "neural_compressor.metric.metric.MSE.reset"]], "reset() (neural_compressor.metric.metric.onnxrtglue method)": [[277, "neural_compressor.metric.metric.ONNXRTGLUE.reset"]], "reset() (neural_compressor.metric.metric.pytorchloss method)": [[277, "neural_compressor.metric.metric.PyTorchLoss.reset"]], "reset() (neural_compressor.metric.metric.rmse method)": [[277, "neural_compressor.metric.metric.RMSE.reset"]], "reset() (neural_compressor.metric.metric.roc method)": [[277, "neural_compressor.metric.metric.ROC.reset"]], "reset() (neural_compressor.metric.metric.squadf1 method)": [[277, "neural_compressor.metric.metric.SquadF1.reset"]], "reset() (neural_compressor.metric.metric.tensorflowmap method)": [[277, "neural_compressor.metric.metric.TensorflowMAP.reset"]], "reset() (neural_compressor.metric.metric.tensorflowtopk method)": [[277, "neural_compressor.metric.metric.TensorflowTopK.reset"]], "reset() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[277, "neural_compressor.metric.metric.WrapMXNetMetric.reset"]], "reset() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[277, "neural_compressor.metric.metric.WrapONNXRTMetric.reset"]], "reset() (neural_compressor.metric.metric.wrappytorchmetric method)": [[277, "neural_compressor.metric.metric.WrapPyTorchMetric.reset"]], "reset() (neural_compressor.metric.metric.miou method)": [[277, "neural_compressor.metric.metric.mIOU.reset"]], "result() (neural_compressor.metric.metric.accuracy method)": [[277, "neural_compressor.metric.metric.Accuracy.result"]], "result() (neural_compressor.metric.metric.basemetric method)": [[277, "neural_compressor.metric.metric.BaseMetric.result"]], "result() (neural_compressor.metric.metric.cocomapv2 method)": [[277, "neural_compressor.metric.metric.COCOmAPv2.result"]], "result() (neural_compressor.metric.metric.f1 method)": [[277, "neural_compressor.metric.metric.F1.result"]], "result() (neural_compressor.metric.metric.generaltopk method)": [[277, "neural_compressor.metric.metric.GeneralTopK.result"]], "result() (neural_compressor.metric.metric.loss method)": [[277, "neural_compressor.metric.metric.Loss.result"]], "result() (neural_compressor.metric.metric.mae method)": [[277, "neural_compressor.metric.metric.MAE.result"]], "result() (neural_compressor.metric.metric.mse method)": [[277, "neural_compressor.metric.metric.MSE.result"]], "result() (neural_compressor.metric.metric.onnxrtglue method)": [[277, "neural_compressor.metric.metric.ONNXRTGLUE.result"]], "result() (neural_compressor.metric.metric.rmse method)": [[277, "neural_compressor.metric.metric.RMSE.result"]], "result() (neural_compressor.metric.metric.roc method)": [[277, "neural_compressor.metric.metric.ROC.result"]], "result() (neural_compressor.metric.metric.squadf1 method)": [[277, "neural_compressor.metric.metric.SquadF1.result"]], "result() (neural_compressor.metric.metric.tensorflowmap method)": [[277, "neural_compressor.metric.metric.TensorflowMAP.result"]], "result() (neural_compressor.metric.metric.tensorflowtopk method)": [[277, "neural_compressor.metric.metric.TensorflowTopK.result"]], "result() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[277, "neural_compressor.metric.metric.WrapMXNetMetric.result"]], "result() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[277, "neural_compressor.metric.metric.WrapONNXRTMetric.result"]], "result() (neural_compressor.metric.metric.wrappytorchmetric method)": [[277, "neural_compressor.metric.metric.WrapPyTorchMetric.result"]], "result() (neural_compressor.metric.metric.miou method)": [[277, "neural_compressor.metric.metric.mIOU.result"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[277, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[277, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[277, "neural_compressor.metric.metric.Loss.sum"]], "update() (neural_compressor.metric.metric.accuracy method)": [[277, "neural_compressor.metric.metric.Accuracy.update"]], "update() (neural_compressor.metric.metric.basemetric method)": [[277, "neural_compressor.metric.metric.BaseMetric.update"]], "update() (neural_compressor.metric.metric.cocomapv2 method)": [[277, "neural_compressor.metric.metric.COCOmAPv2.update"]], "update() (neural_compressor.metric.metric.f1 method)": [[277, "neural_compressor.metric.metric.F1.update"]], "update() (neural_compressor.metric.metric.generaltopk method)": [[277, "neural_compressor.metric.metric.GeneralTopK.update"]], "update() (neural_compressor.metric.metric.loss method)": [[277, "neural_compressor.metric.metric.Loss.update"]], "update() (neural_compressor.metric.metric.mae method)": [[277, "neural_compressor.metric.metric.MAE.update"]], "update() (neural_compressor.metric.metric.mse method)": [[277, "neural_compressor.metric.metric.MSE.update"]], "update() (neural_compressor.metric.metric.onnxrtglue method)": [[277, "neural_compressor.metric.metric.ONNXRTGLUE.update"]], "update() (neural_compressor.metric.metric.pytorchloss method)": [[277, "neural_compressor.metric.metric.PyTorchLoss.update"]], "update() (neural_compressor.metric.metric.rmse method)": [[277, "neural_compressor.metric.metric.RMSE.update"]], "update() (neural_compressor.metric.metric.roc method)": [[277, "neural_compressor.metric.metric.ROC.update"]], "update() (neural_compressor.metric.metric.squadf1 method)": [[277, "neural_compressor.metric.metric.SquadF1.update"]], "update() (neural_compressor.metric.metric.tensorflowmap method)": [[277, "neural_compressor.metric.metric.TensorflowMAP.update"]], "update() (neural_compressor.metric.metric.tensorflowtopk method)": [[277, "neural_compressor.metric.metric.TensorflowTopK.update"]], "update() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[277, "neural_compressor.metric.metric.WrapMXNetMetric.update"]], "update() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[277, "neural_compressor.metric.metric.WrapONNXRTMetric.update"]], "update() (neural_compressor.metric.metric.wrappytorchmetric method)": [[277, "neural_compressor.metric.metric.WrapPyTorchMetric.update"]], "update() (neural_compressor.metric.metric.miou method)": [[277, "neural_compressor.metric.metric.mIOU.update"]], "fit() (in module neural_compressor.mix_precision)": [[278, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[278, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[279, "neural_compressor.model.base_model.BaseModel"]], "export() (neural_compressor.model.base_model.basemodel method)": [[279, "neural_compressor.model.base_model.BaseModel.export"]], "framework() (neural_compressor.model.base_model.basemodel method)": [[279, "neural_compressor.model.base_model.BaseModel.framework"]], "graph_info (neural_compressor.model.base_model.basemodel property)": [[279, "neural_compressor.model.base_model.BaseModel.graph_info"]], "model (neural_compressor.model.base_model.basemodel property)": [[279, "neural_compressor.model.base_model.BaseModel.model"]], "neural_compressor.model.base_model": [[279, "module-neural_compressor.model.base_model"]], "save() (neural_compressor.model.base_model.basemodel method)": [[279, "neural_compressor.model.base_model.BaseModel.save"]], "basemodel (class in neural_compressor.model)": [[280, "neural_compressor.model.BaseModel"]], "model (class in neural_compressor.model)": [[280, "neural_compressor.model.Model"]], "export() (neural_compressor.model.basemodel method)": [[280, "neural_compressor.model.BaseModel.export"]], "framework() (neural_compressor.model.basemodel method)": [[280, "neural_compressor.model.BaseModel.framework"]], "graph_info (neural_compressor.model.basemodel property)": [[280, "neural_compressor.model.BaseModel.graph_info"]], "model (neural_compressor.model.basemodel property)": [[280, "neural_compressor.model.BaseModel.model"]], "neural_compressor.model": [[280, "module-neural_compressor.model"]], "save() (neural_compressor.model.basemodel method)": [[280, "neural_compressor.model.BaseModel.save"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[281, "neural_compressor.model.keras_model.KerasModel"]], "framework() (neural_compressor.model.keras_model.kerasmodel method)": [[281, "neural_compressor.model.keras_model.KerasModel.framework"]], "graph_info (neural_compressor.model.keras_model.kerasmodel property)": [[281, "neural_compressor.model.keras_model.KerasModel.graph_info"]], "model (neural_compressor.model.keras_model.kerasmodel property)": [[281, "neural_compressor.model.keras_model.KerasModel.model"]], "neural_compressor.model.keras_model": [[281, "module-neural_compressor.model.keras_model"]], "q_config (neural_compressor.model.keras_model.kerasmodel property)": [[281, "neural_compressor.model.keras_model.KerasModel.q_config"]], "save() (neural_compressor.model.keras_model.kerasmodel method)": [[281, "neural_compressor.model.keras_model.KerasModel.save"]], "model (class in neural_compressor.model.model)": [[282, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[282, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[282, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[283, "neural_compressor.model.mxnet_model.MXNetModel"]], "framework() (neural_compressor.model.mxnet_model.mxnetmodel method)": [[283, "neural_compressor.model.mxnet_model.MXNetModel.framework"]], "model (neural_compressor.model.mxnet_model.mxnetmodel property)": [[283, "neural_compressor.model.mxnet_model.MXNetModel.model"]], "neural_compressor.model.mxnet_model": [[283, "module-neural_compressor.model.mxnet_model"]], "save() (neural_compressor.model.mxnet_model.mxnetmodel method)": [[283, "neural_compressor.model.mxnet_model.MXNetModel.save"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[284, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[284, "module-neural_compressor.model.nets_factory"]], "register() (neural_compressor.model.nets_factory.tfslimnetsfactory method)": [[284, "neural_compressor.model.nets_factory.TFSlimNetsFactory.register"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[285, "neural_compressor.model.onnx_model.ONNXModel"]], "add_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.add_initializer"]], "add_initializers() (neural_compressor.model.onnx_model.onnxmodel method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.add_initializers"]], "add_node() (neural_compressor.model.onnx_model.onnxmodel method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.add_node"]], "add_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.add_nodes"]], "add_tensors_to_outputs() (neural_compressor.model.onnx_model.onnxmodel method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.add_tensors_to_outputs"]], "export() (neural_compressor.model.onnx_model.onnxmodel method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.export"]], "find_node_by_name() (neural_compressor.model.onnx_model.onnxmodel method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.find_node_by_name"]], "find_nodes_by_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.find_nodes_by_initializer"]], "framework() (neural_compressor.model.onnx_model.onnxmodel method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.framework"]], "get_children() (neural_compressor.model.onnx_model.onnxmodel method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.get_children"]], "get_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.get_initializer"]], "get_nodes_chain() (neural_compressor.model.onnx_model.onnxmodel method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.get_nodes_chain"]], "get_parent() (neural_compressor.model.onnx_model.onnxmodel method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.get_parent"]], "get_parents() (neural_compressor.model.onnx_model.onnxmodel method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.get_parents"]], "get_scale_zero() (neural_compressor.model.onnx_model.onnxmodel method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.get_scale_zero"]], "graph() (neural_compressor.model.onnx_model.onnxmodel method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.graph"]], "graph_info (neural_compressor.model.onnx_model.onnxmodel property)": [[285, "neural_compressor.model.onnx_model.ONNXModel.graph_info"]], "initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.initializer"]], "input() (neural_compressor.model.onnx_model.onnxmodel method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.input"]], "input_name_to_nodes (neural_compressor.model.onnx_model.onnxmodel property)": [[285, "neural_compressor.model.onnx_model.ONNXModel.input_name_to_nodes"]], "ir_version() (neural_compressor.model.onnx_model.onnxmodel method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.ir_version"]], "is_large_model (neural_compressor.model.onnx_model.onnxmodel property)": [[285, "neural_compressor.model.onnx_model.ONNXModel.is_large_model"]], "match_first_parent() (neural_compressor.model.onnx_model.onnxmodel method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.match_first_parent"]], "match_parent() (neural_compressor.model.onnx_model.onnxmodel method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.match_parent"]], "match_parent_path() (neural_compressor.model.onnx_model.onnxmodel method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.match_parent_path"]], "model (neural_compressor.model.onnx_model.onnxmodel property)": [[285, "neural_compressor.model.onnx_model.ONNXModel.model"]], "model_path (neural_compressor.model.onnx_model.onnxmodel property)": [[285, "neural_compressor.model.onnx_model.ONNXModel.model_path"]], "neural_compressor.model.onnx_model": [[285, "module-neural_compressor.model.onnx_model"]], "nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.nodes"]], "opset_import() (neural_compressor.model.onnx_model.onnxmodel method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.opset_import"]], "output() (neural_compressor.model.onnx_model.onnxmodel method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.output"]], "output_name_to_node (neural_compressor.model.onnx_model.onnxmodel property)": [[285, "neural_compressor.model.onnx_model.ONNXModel.output_name_to_node"]], "q_config (neural_compressor.model.onnx_model.onnxmodel property)": [[285, "neural_compressor.model.onnx_model.ONNXModel.q_config"]], "remove_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.remove_initializer"]], "remove_initializers() (neural_compressor.model.onnx_model.onnxmodel method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.remove_initializers"]], "remove_node() (neural_compressor.model.onnx_model.onnxmodel method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.remove_node"]], "remove_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.remove_nodes"]], "remove_tensors_from_outputs() (neural_compressor.model.onnx_model.onnxmodel method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.remove_tensors_from_outputs"]], "remove_unused_constant() (neural_compressor.model.onnx_model.onnxmodel method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.remove_unused_constant"]], "replace_input_of_all_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.replace_input_of_all_nodes"]], "replace_node_input() (neural_compressor.model.onnx_model.onnxmodel static method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.replace_node_input"]], "replace_node_output() (neural_compressor.model.onnx_model.onnxmodel static method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.replace_node_output"]], "replace_output_of_all_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.replace_output_of_all_nodes"]], "save() (neural_compressor.model.onnx_model.onnxmodel method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.save"]], "save_model_to_file() (neural_compressor.model.onnx_model.onnxmodel method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.save_model_to_file"]], "set_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.set_initializer"]], "topological_sort() (neural_compressor.model.onnx_model.onnxmodel method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.topological_sort"]], "update() (neural_compressor.model.onnx_model.onnxmodel method)": [[285, "neural_compressor.model.onnx_model.ONNXModel.update"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[286, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[286, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[286, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[286, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[286, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "build_saved_model() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[286, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.build_saved_model"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[286, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[286, "neural_compressor.model.tensorflow_model.estimator_session"]], "framework() (neural_compressor.model.tensorflow_model.tensorflowbasemodel method)": [[286, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.framework"]], "frozen_graph_def (neural_compressor.model.tensorflow_model.tensorflowqatmodel property)": [[286, "neural_compressor.model.tensorflow_model.TensorflowQATModel.frozen_graph_def"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[286, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_all_weight_names() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[286, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.get_all_weight_names"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[286, "neural_compressor.model.tensorflow_model.get_model_type"]], "get_weight() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[286, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.get_weight"]], "graph (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[286, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.graph"]], "graph_def (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[286, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.graph_def"]], "graph_def (neural_compressor.model.tensorflow_model.tensorflowcheckpointmodel property)": [[286, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel.graph_def"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[286, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_info (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[286, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.graph_info"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[286, "neural_compressor.model.tensorflow_model.graph_session"]], "input_node_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[286, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.input_node_names"]], "input_tensor (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[286, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.input_tensor"]], "input_tensor_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[286, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.input_tensor_names"]], "iter_op (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[286, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.iter_op"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[286, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[286, "neural_compressor.model.tensorflow_model.load_saved_model"]], "model (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[286, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.model"]], "model (neural_compressor.model.tensorflow_model.tensorflowcheckpointmodel property)": [[286, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel.model"]], "model (neural_compressor.model.tensorflow_model.tensorflowqatmodel property)": [[286, "neural_compressor.model.tensorflow_model.TensorflowQATModel.model"]], "model (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel property)": [[286, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.model"]], "model_type (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[286, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.model_type"]], "name (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[286, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.name"]], "neural_compressor.model.tensorflow_model": [[286, "module-neural_compressor.model.tensorflow_model"]], "output_node_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[286, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.output_node_names"]], "output_tensor (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[286, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.output_tensor"]], "output_tensor_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[286, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.output_tensor_names"]], "q_config (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[286, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.q_config"]], "report_sparsity() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[286, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.report_sparsity"]], "save() (neural_compressor.model.tensorflow_model.tensorflowbasemodel method)": [[286, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.save"]], "save() (neural_compressor.model.tensorflow_model.tensorflowqatmodel method)": [[286, "neural_compressor.model.tensorflow_model.TensorflowQATModel.save"]], "save() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[286, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.save"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[286, "neural_compressor.model.tensorflow_model.saved_model_session"]], "sess (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[286, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.sess"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[286, "neural_compressor.model.tensorflow_model.slim_session"]], "update_weights() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[286, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.update_weights"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[286, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[286, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "weights (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[286, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.weights"]], "workspace_path (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[286, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.workspace_path"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[287, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[287, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[287, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[287, "neural_compressor.model.torch_model.PyTorchModel"]], "export() (neural_compressor.model.torch_model.pytorchmodel method)": [[287, "neural_compressor.model.torch_model.PyTorchModel.export"]], "export_to_bf16_onnx() (neural_compressor.model.torch_model.pytorchmodel method)": [[287, "neural_compressor.model.torch_model.PyTorchModel.export_to_bf16_onnx"]], "export_to_fp32_onnx() (neural_compressor.model.torch_model.pytorchmodel method)": [[287, "neural_compressor.model.torch_model.PyTorchModel.export_to_fp32_onnx"]], "export_to_int8_onnx() (neural_compressor.model.torch_model.pytorchmodel method)": [[287, "neural_compressor.model.torch_model.PyTorchModel.export_to_int8_onnx"]], "export_to_jit() (neural_compressor.model.torch_model.pytorchmodel method)": [[287, "neural_compressor.model.torch_model.PyTorchModel.export_to_jit"]], "forward() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[287, "neural_compressor.model.torch_model.PyTorchBaseModel.forward"]], "fp32_model (neural_compressor.model.torch_model.pytorchbasemodel property)": [[287, "neural_compressor.model.torch_model.PyTorchBaseModel.fp32_model"]], "framework() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[287, "neural_compressor.model.torch_model.PyTorchBaseModel.framework"]], "generate_forward_pre_hook() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[287, "neural_compressor.model.torch_model.PyTorchBaseModel.generate_forward_pre_hook"]], "get_all_weight_names() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[287, "neural_compressor.model.torch_model.PyTorchBaseModel.get_all_weight_names"]], "get_gradient() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[287, "neural_compressor.model.torch_model.PyTorchBaseModel.get_gradient"]], "get_inputs() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[287, "neural_compressor.model.torch_model.PyTorchBaseModel.get_inputs"]], "get_weight() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[287, "neural_compressor.model.torch_model.PyTorchBaseModel.get_weight"]], "graph_info (neural_compressor.model.torch_model.pytorchmodel property)": [[287, "neural_compressor.model.torch_model.PyTorchModel.graph_info"]], "load_quantized_state_dict() (neural_compressor.model.torch_model.pytorchmodel method)": [[287, "neural_compressor.model.torch_model.PyTorchModel.load_quantized_state_dict"]], "model (neural_compressor.model.torch_model.pytorchbasemodel property)": [[287, "neural_compressor.model.torch_model.PyTorchBaseModel.model"]], "neural_compressor.model.torch_model": [[287, "module-neural_compressor.model.torch_model"]], "prune_weights_() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[287, "neural_compressor.model.torch_model.PyTorchBaseModel.prune_weights_"]], "quantized_state_dict() (neural_compressor.model.torch_model.pytorchmodel method)": [[287, "neural_compressor.model.torch_model.PyTorchModel.quantized_state_dict"]], "register_forward_pre_hook() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[287, "neural_compressor.model.torch_model.PyTorchBaseModel.register_forward_pre_hook"]], "remove_hooks() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[287, "neural_compressor.model.torch_model.PyTorchBaseModel.remove_hooks"]], "report_sparsity() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[287, "neural_compressor.model.torch_model.PyTorchBaseModel.report_sparsity"]], "save() (neural_compressor.model.torch_model.ipexmodel method)": [[287, "neural_compressor.model.torch_model.IPEXModel.save"]], "save() (neural_compressor.model.torch_model.pytorchmodel method)": [[287, "neural_compressor.model.torch_model.PyTorchModel.save"]], "update_gradient() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[287, "neural_compressor.model.torch_model.PyTorchBaseModel.update_gradient"]], "update_weights() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[287, "neural_compressor.model.torch_model.PyTorchBaseModel.update_weights"]], "workspace_path (neural_compressor.model.torch_model.ipexmodel property)": [[287, "neural_compressor.model.torch_model.IPEXModel.workspace_path"]], "workspace_path (neural_compressor.model.torch_model.pytorchmodel property)": [[287, "neural_compressor.model.torch_model.PyTorchModel.workspace_path"]], "accuracy (class in neural_compressor.objective)": [[288, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[288, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[288, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[288, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[288, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[288, "neural_compressor.objective.Performance"]], "accuracy_meet_req() (neural_compressor.objective.multiobjective method)": [[288, "neural_compressor.objective.MultiObjective.accuracy_meet_req"]], "accuracy_meets() (neural_compressor.objective.multiobjective method)": [[288, "neural_compressor.objective.MultiObjective.accuracy_meets"]], "accuracy_target (neural_compressor.objective.multiobjective property)": [[288, "neural_compressor.objective.MultiObjective.accuracy_target"]], "baseline (neural_compressor.objective.multiobjective property)": [[288, "neural_compressor.objective.MultiObjective.baseline"]], "best_result() (neural_compressor.objective.multiobjective method)": [[288, "neural_compressor.objective.MultiObjective.best_result"]], "compare() (neural_compressor.objective.multiobjective method)": [[288, "neural_compressor.objective.MultiObjective.compare"]], "end() (neural_compressor.objective.accuracy method)": [[288, "neural_compressor.objective.Accuracy.end"]], "end() (neural_compressor.objective.footprint method)": [[288, "neural_compressor.objective.Footprint.end"]], "end() (neural_compressor.objective.modelsize method)": [[288, "neural_compressor.objective.ModelSize.end"]], "end() (neural_compressor.objective.multiobjective method)": [[288, "neural_compressor.objective.MultiObjective.end"]], "end() (neural_compressor.objective.objective method)": [[288, "neural_compressor.objective.Objective.end"]], "end() (neural_compressor.objective.performance method)": [[288, "neural_compressor.objective.Performance.end"]], "evaluate() (neural_compressor.objective.multiobjective method)": [[288, "neural_compressor.objective.MultiObjective.evaluate"]], "model (neural_compressor.objective.objective property)": [[288, "neural_compressor.objective.Objective.model"]], "neural_compressor.objective": [[288, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[288, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[288, "neural_compressor.objective.objective_registry"]], "reset() (neural_compressor.objective.multiobjective method)": [[288, "neural_compressor.objective.MultiObjective.reset"]], "reset() (neural_compressor.objective.objective method)": [[288, "neural_compressor.objective.Objective.reset"]], "result() (neural_compressor.objective.multiobjective method)": [[288, "neural_compressor.objective.MultiObjective.result"]], "result() (neural_compressor.objective.objective method)": [[288, "neural_compressor.objective.Objective.result"]], "result_list() (neural_compressor.objective.objective method)": [[288, "neural_compressor.objective.Objective.result_list"]], "set_model() (neural_compressor.objective.multiobjective method)": [[288, "neural_compressor.objective.MultiObjective.set_model"]], "start() (neural_compressor.objective.accuracy method)": [[288, "neural_compressor.objective.Accuracy.start"]], "start() (neural_compressor.objective.footprint method)": [[288, "neural_compressor.objective.Footprint.start"]], "start() (neural_compressor.objective.modelsize method)": [[288, "neural_compressor.objective.ModelSize.start"]], "start() (neural_compressor.objective.multiobjective method)": [[288, "neural_compressor.objective.MultiObjective.start"]], "start() (neural_compressor.objective.objective method)": [[288, "neural_compressor.objective.Objective.start"]], "start() (neural_compressor.objective.performance method)": [[288, "neural_compressor.objective.Performance.start"]], "gradientcriterion (class in neural_compressor.pruner.criteria)": [[289, "neural_compressor.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.pruner.criteria)": [[289, "neural_compressor.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.pruner.criteria)": [[289, "neural_compressor.pruner.criteria.PruningCriterion"]], "snipcriterion (class in neural_compressor.pruner.criteria)": [[289, "neural_compressor.pruner.criteria.SnipCriterion"]], "snipmomentumcriterion (class in neural_compressor.pruner.criteria)": [[289, "neural_compressor.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.pruner.criteria)": [[289, "neural_compressor.pruner.criteria.get_criterion"]], "neural_compressor.pruner.criteria": [[289, "module-neural_compressor.pruner.criteria"]], "on_after_optimizer_step() (neural_compressor.pruner.criteria.pruningcriterion method)": [[289, "neural_compressor.pruner.criteria.PruningCriterion.on_after_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.criteria.gradientcriterion method)": [[289, "neural_compressor.pruner.criteria.GradientCriterion.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.criteria.pruningcriterion method)": [[289, "neural_compressor.pruner.criteria.PruningCriterion.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.criteria.snipcriterion method)": [[289, "neural_compressor.pruner.criteria.SnipCriterion.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.criteria.snipmomentumcriterion method)": [[289, "neural_compressor.pruner.criteria.SnipMomentumCriterion.on_before_optimizer_step"]], "on_step_begin() (neural_compressor.pruner.criteria.magnitudecriterion method)": [[289, "neural_compressor.pruner.criteria.MagnitudeCriterion.on_step_begin"]], "on_step_begin() (neural_compressor.pruner.criteria.pruningcriterion method)": [[289, "neural_compressor.pruner.criteria.PruningCriterion.on_step_begin"]], "register_criterion() (in module neural_compressor.pruner.criteria)": [[289, "neural_compressor.pruner.criteria.register_criterion"]], "scores (neural_compressor.pruner.criteria.gradientcriterion attribute)": [[289, "neural_compressor.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.pruner.criteria.magnitudecriterion attribute)": [[289, "neural_compressor.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.pruner.criteria.pruningcriterion attribute)": [[289, "neural_compressor.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.pruner.criteria.snipcriterion attribute)": [[289, "neural_compressor.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.pruner.criteria.snipmomentumcriterion attribute)": [[289, "neural_compressor.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.pruner": [[290, "module-neural_compressor.pruner"]], "neural_compressor.pruner.logger": [[291, "module-neural_compressor.pruner.logger"]], "basepattern (class in neural_compressor.pruner.patterns)": [[292, "neural_compressor.pruner.patterns.BasePattern"]], "m (neural_compressor.pruner.patterns.patternninm attribute)": [[292, "neural_compressor.pruner.patterns.PatternNInM.M"]], "n (neural_compressor.pruner.patterns.patternninm attribute)": [[292, "neural_compressor.pruner.patterns.PatternNInM.N"]], "patternninm (class in neural_compressor.pruner.patterns)": [[292, "neural_compressor.pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.pruner.patterns)": [[292, "neural_compressor.pruner.patterns.PatternNxM"]], "adjust_ratio() (neural_compressor.pruner.patterns.basepattern method)": [[292, "neural_compressor.pruner.patterns.BasePattern.adjust_ratio"]], "block_size (neural_compressor.pruner.patterns.patternnxm attribute)": [[292, "neural_compressor.pruner.patterns.PatternNxM.block_size"]], "check_layer_validity() (neural_compressor.pruner.patterns.basepattern method)": [[292, "neural_compressor.pruner.patterns.BasePattern.check_layer_validity"]], "check_layer_validity() (neural_compressor.pruner.patterns.patternninm method)": [[292, "neural_compressor.pruner.patterns.PatternNInM.check_layer_validity"]], "check_layer_validity() (neural_compressor.pruner.patterns.patternnxm method)": [[292, "neural_compressor.pruner.patterns.PatternNxM.check_layer_validity"]], "config (neural_compressor.pruner.patterns.basepattern attribute)": [[292, "neural_compressor.pruner.patterns.BasePattern.config"]], "count_new_masked_cnts() (neural_compressor.pruner.patterns.patternnxm method)": [[292, "neural_compressor.pruner.patterns.PatternNxM.count_new_masked_cnts"]], "get_block_size_dict() (neural_compressor.pruner.patterns.basepattern method)": [[292, "neural_compressor.pruner.patterns.BasePattern.get_block_size_dict"]], "get_block_size_dict() (neural_compressor.pruner.patterns.patternnxm method)": [[292, "neural_compressor.pruner.patterns.PatternNxM.get_block_size_dict"]], "get_ele_mask_per_threshold() (neural_compressor.pruner.patterns.patternninm method)": [[292, "neural_compressor.pruner.patterns.PatternNInM.get_ele_mask_per_threshold"]], "get_least_ninm_mask_from_data() (neural_compressor.pruner.patterns.patternninm method)": [[292, "neural_compressor.pruner.patterns.PatternNInM.get_least_ninm_mask_from_data"]], "get_mask_per_threshold() (neural_compressor.pruner.patterns.patternnxm method)": [[292, "neural_compressor.pruner.patterns.PatternNxM.get_mask_per_threshold"]], "get_masks() (neural_compressor.pruner.patterns.basepattern method)": [[292, "neural_compressor.pruner.patterns.BasePattern.get_masks"]], "get_masks_global() (neural_compressor.pruner.patterns.basepattern method)": [[292, "neural_compressor.pruner.patterns.BasePattern.get_masks_global"]], "get_masks_global() (neural_compressor.pruner.patterns.patternninm method)": [[292, "neural_compressor.pruner.patterns.PatternNInM.get_masks_global"]], "get_masks_global() (neural_compressor.pruner.patterns.patternnxm method)": [[292, "neural_compressor.pruner.patterns.PatternNxM.get_masks_global"]], "get_masks_local() (neural_compressor.pruner.patterns.basepattern method)": [[292, "neural_compressor.pruner.patterns.BasePattern.get_masks_local"]], "get_pattern() (in module neural_compressor.pruner.patterns)": [[292, "neural_compressor.pruner.patterns.get_pattern"]], "get_pattern_lock_masks() (neural_compressor.pruner.patterns.basepattern method)": [[292, "neural_compressor.pruner.patterns.BasePattern.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.pruner.patterns.patternninm method)": [[292, "neural_compressor.pruner.patterns.PatternNInM.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.pruner.patterns.patternnxm method)": [[292, "neural_compressor.pruner.patterns.PatternNxM.get_pattern_lock_masks"]], "get_reduced_masks_from_data() (neural_compressor.pruner.patterns.basepattern method)": [[292, "neural_compressor.pruner.patterns.BasePattern.get_reduced_masks_from_data"]], "get_reduced_masks_from_data() (neural_compressor.pruner.patterns.patternninm method)": [[292, "neural_compressor.pruner.patterns.PatternNInM.get_reduced_masks_from_data"]], "get_reduced_masks_from_data() (neural_compressor.pruner.patterns.patternnxm method)": [[292, "neural_compressor.pruner.patterns.PatternNxM.get_reduced_masks_from_data"]], "get_single_mask_per_target_ratio() (neural_compressor.pruner.patterns.basepattern method)": [[292, "neural_compressor.pruner.patterns.BasePattern.get_single_mask_per_target_ratio"]], "get_sparsity_ratio() (neural_compressor.pruner.patterns.basepattern method)": [[292, "neural_compressor.pruner.patterns.BasePattern.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.pruner.patterns.patternninm method)": [[292, "neural_compressor.pruner.patterns.PatternNInM.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.pruner.patterns.patternnxm method)": [[292, "neural_compressor.pruner.patterns.PatternNxM.get_sparsity_ratio"]], "get_sparsity_ratio_each_layer() (neural_compressor.pruner.patterns.basepattern method)": [[292, "neural_compressor.pruner.patterns.BasePattern.get_sparsity_ratio_each_layer"]], "get_sparsity_ratio_progressive() (neural_compressor.pruner.patterns.patternnxm method)": [[292, "neural_compressor.pruner.patterns.PatternNxM.get_sparsity_ratio_progressive"]], "invalid_layers (neural_compressor.pruner.patterns.basepattern attribute)": [[292, "neural_compressor.pruner.patterns.BasePattern.invalid_layers"]], "is_global (neural_compressor.pruner.patterns.basepattern attribute)": [[292, "neural_compressor.pruner.patterns.BasePattern.is_global"]], "keep_mask_layers (neural_compressor.pruner.patterns.basepattern attribute)": [[292, "neural_compressor.pruner.patterns.BasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.pruner.patterns.basepattern attribute)": [[292, "neural_compressor.pruner.patterns.BasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.pruner.patterns.basepattern attribute)": [[292, "neural_compressor.pruner.patterns.BasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.pruner.patterns.basepattern attribute)": [[292, "neural_compressor.pruner.patterns.BasePattern.modules"]], "neural_compressor.pruner.patterns": [[292, "module-neural_compressor.pruner.patterns"]], "pattern (neural_compressor.pruner.patterns.basepattern attribute)": [[292, "neural_compressor.pruner.patterns.BasePattern.pattern"]], "reduce_scores() (neural_compressor.pruner.patterns.patternninm method)": [[292, "neural_compressor.pruner.patterns.PatternNInM.reduce_scores"]], "reduce_scores() (neural_compressor.pruner.patterns.patternnxm method)": [[292, "neural_compressor.pruner.patterns.PatternNxM.reduce_scores"]], "reduce_tensor() (neural_compressor.pruner.patterns.basepattern method)": [[292, "neural_compressor.pruner.patterns.BasePattern.reduce_tensor"]], "register_pattern() (in module neural_compressor.pruner.patterns)": [[292, "neural_compressor.pruner.patterns.register_pattern"]], "reshape_orig_to_pattern() (neural_compressor.pruner.patterns.patternninm method)": [[292, "neural_compressor.pruner.patterns.PatternNInM.reshape_orig_to_pattern"]], "reshape_orig_to_pattern() (neural_compressor.pruner.patterns.patternnxm method)": [[292, "neural_compressor.pruner.patterns.PatternNxM.reshape_orig_to_pattern"]], "reshape_reduced_to_orig() (neural_compressor.pruner.patterns.patternninm method)": [[292, "neural_compressor.pruner.patterns.PatternNInM.reshape_reduced_to_orig"]], "reshape_reduced_to_orig() (neural_compressor.pruner.patterns.patternnxm method)": [[292, "neural_compressor.pruner.patterns.PatternNxM.reshape_reduced_to_orig"]], "target_sparsity (neural_compressor.pruner.patterns.basepattern attribute)": [[292, "neural_compressor.pruner.patterns.BasePattern.target_sparsity"]], "update_new_added_masks() (neural_compressor.pruner.patterns.patternnxm method)": [[292, "neural_compressor.pruner.patterns.PatternNxM.update_new_added_masks"]], "update_progressive_masks() (neural_compressor.pruner.patterns.patternnxm method)": [[292, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks"]], "update_progressive_masks_global() (neural_compressor.pruner.patterns.patternnxm method)": [[292, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_global"]], "update_progressive_masks_linear() (neural_compressor.pruner.patterns.patternnxm method)": [[292, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_linear"]], "update_progressive_masks_local() (neural_compressor.pruner.patterns.patternnxm method)": [[292, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_local"]], "update_progressive_masks_scores() (neural_compressor.pruner.patterns.patternnxm method)": [[292, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_scores"]], "update_residual_cnt() (neural_compressor.pruner.patterns.basepattern method)": [[292, "neural_compressor.pruner.patterns.BasePattern.update_residual_cnt"]], "gradientsensitivitypruner (class in neural_compressor.pruner.pruner_legacy.gradient_sensitivity)": [[293, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "compute_mask() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[293, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.compute_mask"]], "neural_compressor.pruner.pruner_legacy.gradient_sensitivity": [[293, "module-neural_compressor.pruner.pruner_legacy.gradient_sensitivity"]], "on_epoch_begin() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[293, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[293, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[293, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[293, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.on_step_end"]], "parse_weight_name() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[293, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.parse_weight_name"]], "prune_by_importance() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[293, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.prune_by_importance"]], "prune_weight() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[293, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.prune_weight"]], "update_importance_abs() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[293, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.update_importance_abs"]], "update_importance_elementwise() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[293, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.update_importance_elementwise"]], "update_importance_weighted() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[293, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.update_importance_weighted"]], "grouplassopruner (class in neural_compressor.pruner.pruner_legacy.group_lasso)": [[294, "neural_compressor.pruner.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.pruner.pruner_legacy.group_lasso": [[294, "module-neural_compressor.pruner.pruner_legacy.group_lasso"]], "on_before_optimizer_step() (neural_compressor.pruner.pruner_legacy.group_lasso.grouplassopruner method)": [[294, "neural_compressor.pruner.pruner_legacy.group_lasso.GroupLassoPruner.on_before_optimizer_step"]], "neural_compressor.pruner.pruner_legacy": [[295, "module-neural_compressor.pruner.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.pruner.pruner_legacy.magnitude)": [[296, "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner"]], "compute_mask() (neural_compressor.pruner.pruner_legacy.magnitude.basicmagnitudepruner method)": [[296, "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner.compute_mask"]], "neural_compressor.pruner.pruner_legacy.magnitude": [[296, "module-neural_compressor.pruner.pruner_legacy.magnitude"]], "on_epoch_begin() (neural_compressor.pruner.pruner_legacy.magnitude.basicmagnitudepruner method)": [[296, "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruner_legacy.magnitude.basicmagnitudepruner method)": [[296, "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruner_legacy.magnitude.basicmagnitudepruner method)": [[296, "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruner_legacy.magnitude.basicmagnitudepruner method)": [[296, "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner.on_step_end"]], "patternlockpruner (class in neural_compressor.pruner.pruner_legacy.pattern_lock)": [[297, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner"]], "compute_mask() (neural_compressor.pruner.pruner_legacy.pattern_lock.patternlockpruner method)": [[297, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner.compute_mask"]], "neural_compressor.pruner.pruner_legacy.pattern_lock": [[297, "module-neural_compressor.pruner.pruner_legacy.pattern_lock"]], "on_epoch_begin() (neural_compressor.pruner.pruner_legacy.pattern_lock.patternlockpruner method)": [[297, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruner_legacy.pattern_lock.patternlockpruner method)": [[297, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruner_legacy.pattern_lock.patternlockpruner method)": [[297, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruner_legacy.pattern_lock.patternlockpruner method)": [[297, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner.on_step_end"]], "update_weights() (neural_compressor.pruner.pruner_legacy.pattern_lock.patternlockpruner method)": [[297, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner.update_weights"]], "pruner (class in neural_compressor.pruner.pruner_legacy.pruner)": [[298, "neural_compressor.pruner.pruner_legacy.pruner.Pruner"]], "neural_compressor.pruner.pruner_legacy.pruner": [[298, "module-neural_compressor.pruner.pruner_legacy.pruner"]], "on_before_optimizer_step() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[298, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[298, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[298, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[298, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[298, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_step_end"]], "on_train_begin() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[298, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_train_begin"]], "on_train_end() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[298, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_train_end"]], "pruner_registry() (in module neural_compressor.pruner.pruner_legacy.pruner)": [[298, "neural_compressor.pruner.pruner_legacy.pruner.pruner_registry"]], "update_sparsity() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[298, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.update_sparsity"]], "basepruner (class in neural_compressor.pruner.pruners)": [[299, "neural_compressor.pruner.pruners.BasePruner"]], "basicpruner (class in neural_compressor.pruner.pruners)": [[299, "neural_compressor.pruner.pruners.BasicPruner"]], "patternlockpruner (class in neural_compressor.pruner.pruners)": [[299, "neural_compressor.pruner.pruners.PatternLockPruner"]], "progressivepruner (class in neural_compressor.pruner.pruners)": [[299, "neural_compressor.pruner.pruners.ProgressivePruner"]], "check_is_pruned_progressive_step() (neural_compressor.pruner.pruners.progressivepruner method)": [[299, "neural_compressor.pruner.pruners.ProgressivePruner.check_is_pruned_progressive_step"]], "check_is_pruned_step() (neural_compressor.pruner.pruners.basepruner method)": [[299, "neural_compressor.pruner.pruners.BasePruner.check_is_pruned_step"]], "check_progressive_validity() (neural_compressor.pruner.pruners.progressivepruner method)": [[299, "neural_compressor.pruner.pruners.ProgressivePruner.check_progressive_validity"]], "config (neural_compressor.pruner.pruners.basepruner attribute)": [[299, "neural_compressor.pruner.pruners.BasePruner.config"]], "criterion (neural_compressor.pruner.pruners.basicpruner attribute)": [[299, "neural_compressor.pruner.pruners.BasicPruner.criterion"]], "current_sparsity_ratio (neural_compressor.pruner.pruners.basepruner attribute)": [[299, "neural_compressor.pruner.pruners.BasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.pruner.pruners.basepruner attribute)": [[299, "neural_compressor.pruner.pruners.BasePruner.end_step"]], "get_pruner() (in module neural_compressor.pruner.pruners)": [[299, "neural_compressor.pruner.pruners.get_pruner"]], "global_step (neural_compressor.pruner.pruners.basepruner attribute)": [[299, "neural_compressor.pruner.pruners.BasePruner.global_step"]], "mask_weights() (neural_compressor.pruner.pruners.basepruner method)": [[299, "neural_compressor.pruner.pruners.BasePruner.mask_weights"]], "mask_weights_general() (neural_compressor.pruner.pruners.basepruner method)": [[299, "neural_compressor.pruner.pruners.BasePruner.mask_weights_general"]], "masks (neural_compressor.pruner.pruners.basepruner attribute)": [[299, "neural_compressor.pruner.pruners.BasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.pruner.pruners.basepruner attribute)": [[299, "neural_compressor.pruner.pruners.BasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.pruner.pruners.basepruner attribute)": [[299, "neural_compressor.pruner.pruners.BasePruner.modules"]], "neural_compressor.pruner.pruners": [[299, "module-neural_compressor.pruner.pruners"]], "on_after_eval() (neural_compressor.pruner.pruners.basepruner method)": [[299, "neural_compressor.pruner.pruners.BasePruner.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.basepruner method)": [[299, "neural_compressor.pruner.pruners.BasePruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.basicpruner method)": [[299, "neural_compressor.pruner.pruners.BasicPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.patternlockpruner method)": [[299, "neural_compressor.pruner.pruners.PatternLockPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.progressivepruner method)": [[299, "neural_compressor.pruner.pruners.ProgressivePruner.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.pruner.pruners.basepruner method)": [[299, "neural_compressor.pruner.pruners.BasePruner.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.pruner.pruners.basepruner method)": [[299, "neural_compressor.pruner.pruners.BasePruner.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.pruners.basicpruner method)": [[299, "neural_compressor.pruner.pruners.BasicPruner.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.pruners.progressivepruner method)": [[299, "neural_compressor.pruner.pruners.ProgressivePruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.pruner.pruners.basepruner method)": [[299, "neural_compressor.pruner.pruners.BasePruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruners.basepruner method)": [[299, "neural_compressor.pruner.pruners.BasePruner.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruners.basepruner method)": [[299, "neural_compressor.pruner.pruners.BasePruner.on_step_begin"]], "on_step_begin() (neural_compressor.pruner.pruners.progressivepruner method)": [[299, "neural_compressor.pruner.pruners.ProgressivePruner.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruners.basepruner method)": [[299, "neural_compressor.pruner.pruners.BasePruner.on_step_end"]], "on_train_begin() (neural_compressor.pruner.pruners.basepruner method)": [[299, "neural_compressor.pruner.pruners.BasePruner.on_train_begin"]], "on_train_end() (neural_compressor.pruner.pruners.basepruner method)": [[299, "neural_compressor.pruner.pruners.BasePruner.on_train_end"]], "parse_valid_pruner_types() (in module neural_compressor.pruner.pruners)": [[299, "neural_compressor.pruner.pruners.parse_valid_pruner_types"]], "pattern (neural_compressor.pruner.pruners.basepruner attribute)": [[299, "neural_compressor.pruner.pruners.BasePruner.pattern"]], "pattern (neural_compressor.pruner.pruners.basicpruner attribute)": [[299, "neural_compressor.pruner.pruners.BasicPruner.pattern"]], "print_progressive_sparsity() (neural_compressor.pruner.pruners.progressivepruner method)": [[299, "neural_compressor.pruner.pruners.ProgressivePruner.print_progressive_sparsity"]], "pruning_frequency (neural_compressor.pruner.pruners.basepruner attribute)": [[299, "neural_compressor.pruner.pruners.BasePruner.pruning_frequency"]], "reg (neural_compressor.pruner.pruners.basicpruner attribute)": [[299, "neural_compressor.pruner.pruners.BasicPruner.reg"]], "register_pruner() (in module neural_compressor.pruner.pruners)": [[299, "neural_compressor.pruner.pruners.register_pruner"]], "scheduler (neural_compressor.pruner.pruners.basepruner attribute)": [[299, "neural_compressor.pruner.pruners.BasePruner.scheduler"]], "scheduler (neural_compressor.pruner.pruners.basicpruner attribute)": [[299, "neural_compressor.pruner.pruners.BasicPruner.scheduler"]], "scores (neural_compressor.pruner.pruners.basepruner attribute)": [[299, "neural_compressor.pruner.pruners.BasePruner.scores"]], "set_global_step() (neural_compressor.pruner.pruners.basicpruner method)": [[299, "neural_compressor.pruner.pruners.BasicPruner.set_global_step"]], "start_step (neural_compressor.pruner.pruners.basepruner attribute)": [[299, "neural_compressor.pruner.pruners.BasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.pruner.pruners.basepruner attribute)": [[299, "neural_compressor.pruner.pruners.BasePruner.target_sparsity_ratio"]], "update_masks() (neural_compressor.pruner.pruners.basepruner method)": [[299, "neural_compressor.pruner.pruners.BasePruner.update_masks"]], "update_masks() (neural_compressor.pruner.pruners.basicpruner method)": [[299, "neural_compressor.pruner.pruners.BasicPruner.update_masks"]], "update_masks() (neural_compressor.pruner.pruners.patternlockpruner method)": [[299, "neural_compressor.pruner.pruners.PatternLockPruner.update_masks"]], "update_masks_progressive() (neural_compressor.pruner.pruners.progressivepruner method)": [[299, "neural_compressor.pruner.pruners.ProgressivePruner.update_masks_progressive"]], "pruning (class in neural_compressor.pruner.pruning)": [[300, "neural_compressor.pruner.pruning.Pruning"]], "config_file_path (neural_compressor.pruner.pruning.pruning attribute)": [[300, "neural_compressor.pruner.pruning.Pruning.config_file_path"]], "get_sparsity_ratio() (neural_compressor.pruner.pruning.pruning method)": [[300, "neural_compressor.pruner.pruning.Pruning.get_sparsity_ratio"]], "model (neural_compressor.pruner.pruning.pruning attribute)": [[300, "neural_compressor.pruner.pruning.Pruning.model"]], "model (neural_compressor.pruner.pruning.pruning property)": [[300, "id0"]], "neural_compressor.pruner.pruning": [[300, "module-neural_compressor.pruner.pruning"]], "on_after_eval() (neural_compressor.pruner.pruning.pruning method)": [[300, "neural_compressor.pruner.pruning.Pruning.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.pruner.pruning.pruning method)": [[300, "neural_compressor.pruner.pruning.Pruning.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.pruner.pruning.pruning method)": [[300, "neural_compressor.pruner.pruning.Pruning.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.pruner.pruning.pruning method)": [[300, "neural_compressor.pruner.pruning.Pruning.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.pruner.pruning.pruning method)": [[300, "neural_compressor.pruner.pruning.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruning.pruning method)": [[300, "neural_compressor.pruner.pruning.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruning.pruning method)": [[300, "neural_compressor.pruner.pruning.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruning.pruning method)": [[300, "neural_compressor.pruner.pruning.Pruning.on_step_end"]], "on_train_begin() (neural_compressor.pruner.pruning.pruning method)": [[300, "neural_compressor.pruner.pruning.Pruning.on_train_begin"]], "on_train_end() (neural_compressor.pruner.pruning.pruning method)": [[300, "neural_compressor.pruner.pruning.Pruning.on_train_end"]], "pruner_info (neural_compressor.pruner.pruning.pruning attribute)": [[300, "neural_compressor.pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.pruner.pruning.pruning attribute)": [[300, "neural_compressor.pruner.pruning.Pruning.pruners"]], "update_config() (neural_compressor.pruner.pruning.pruning method)": [[300, "neural_compressor.pruner.pruning.Pruning.update_config"]], "basereg (class in neural_compressor.pruner.regs)": [[301, "neural_compressor.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.pruner.regs)": [[301, "neural_compressor.pruner.regs.GroupLasso"]], "alpha (neural_compressor.pruner.regs.grouplasso attribute)": [[301, "neural_compressor.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.pruner.regs)": [[301, "neural_compressor.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.pruner.regs)": [[301, "neural_compressor.pruner.regs.get_reg_type"]], "neural_compressor.pruner.regs": [[301, "module-neural_compressor.pruner.regs"]], "on_after_optimizer_step() (neural_compressor.pruner.regs.basereg method)": [[301, "neural_compressor.pruner.regs.BaseReg.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.regs.grouplasso method)": [[301, "neural_compressor.pruner.regs.GroupLasso.on_after_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.regs.basereg method)": [[301, "neural_compressor.pruner.regs.BaseReg.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.regs.grouplasso method)": [[301, "neural_compressor.pruner.regs.GroupLasso.on_before_optimizer_step"]], "reg_terms (neural_compressor.pruner.regs.grouplasso attribute)": [[301, "neural_compressor.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.pruner.regs)": [[301, "neural_compressor.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.pruner.schedulers)": [[302, "neural_compressor.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.pruner.schedulers)": [[302, "neural_compressor.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.pruner.schedulers)": [[302, "neural_compressor.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.pruner.schedulers.pruningscheduler attribute)": [[302, "neural_compressor.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.pruner.schedulers)": [[302, "neural_compressor.pruner.schedulers.get_scheduler"]], "neural_compressor.pruner.schedulers": [[302, "module-neural_compressor.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.pruner.schedulers)": [[302, "neural_compressor.pruner.schedulers.register_scheduler"]], "update_sparsity_ratio() (neural_compressor.pruner.schedulers.iterativescheduler method)": [[302, "neural_compressor.pruner.schedulers.IterativeScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.pruner.schedulers.oneshotscheduler method)": [[302, "neural_compressor.pruner.schedulers.OneshotScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.pruner.schedulers.pruningscheduler method)": [[302, "neural_compressor.pruner.schedulers.PruningScheduler.update_sparsity_ratio"]], "check_config() (in module neural_compressor.pruner.utils)": [[303, "neural_compressor.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.pruner.utils)": [[303, "neural_compressor.pruner.utils.check_key_validity"]], "generate_pruner_config() (in module neural_compressor.pruner.utils)": [[303, "neural_compressor.pruner.utils.generate_pruner_config"]], "neural_compressor.pruner.utils": [[303, "module-neural_compressor.pruner.utils"]], "parse_to_prune() (in module neural_compressor.pruner.utils)": [[303, "neural_compressor.pruner.utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.pruner.utils)": [[303, "neural_compressor.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.pruner.utils)": [[303, "neural_compressor.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.pruner.utils)": [[303, "neural_compressor.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.pruner.utils)": [[303, "neural_compressor.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.pruner.utils)": [[303, "neural_compressor.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.pruner.utils)": [[303, "neural_compressor.pruner.utils.update_params"]], "fit() (in module neural_compressor.quantization)": [[304, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[304, "module-neural_compressor.quantization"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[305, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[305, "module-neural_compressor.strategy.auto_mixed_precision"]], "next_tune_cfg() (neural_compressor.strategy.auto_mixed_precision.automixedprecisiontunestrategy method)": [[305, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy.next_tune_cfg"]], "traverse() (neural_compressor.strategy.auto_mixed_precision.automixedprecisiontunestrategy method)": [[305, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy.traverse"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[306, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "distributed_next_tune_cfg_lst() (neural_compressor.strategy.basic.basictunestrategy method)": [[306, "neural_compressor.strategy.basic.BasicTuneStrategy.distributed_next_tune_cfg_lst"]], "neural_compressor.strategy.basic": [[306, "module-neural_compressor.strategy.basic"]], "next_tune_cfg() (neural_compressor.strategy.basic.basictunestrategy method)": [[306, "neural_compressor.strategy.basic.BasicTuneStrategy.next_tune_cfg"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[307, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[307, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[307, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[307, "neural_compressor.strategy.bayesian.acq_max"]], "array_to_params() (neural_compressor.strategy.bayesian.targetspace method)": [[307, "neural_compressor.strategy.bayesian.TargetSpace.array_to_params"]], "bounds (neural_compressor.strategy.bayesian.targetspace property)": [[307, "neural_compressor.strategy.bayesian.TargetSpace.bounds"]], "dim (neural_compressor.strategy.bayesian.targetspace property)": [[307, "neural_compressor.strategy.bayesian.TargetSpace.dim"]], "empty (neural_compressor.strategy.bayesian.targetspace property)": [[307, "neural_compressor.strategy.bayesian.TargetSpace.empty"]], "gen_next_params() (neural_compressor.strategy.bayesian.bayesianoptimization method)": [[307, "neural_compressor.strategy.bayesian.BayesianOptimization.gen_next_params"]], "get_target() (neural_compressor.strategy.bayesian.targetspace method)": [[307, "neural_compressor.strategy.bayesian.TargetSpace.get_target"]], "keys (neural_compressor.strategy.bayesian.targetspace property)": [[307, "neural_compressor.strategy.bayesian.TargetSpace.keys"]], "max (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[307, "neural_compressor.strategy.bayesian.BayesianOptimization.max"]], "max() (neural_compressor.strategy.bayesian.targetspace method)": [[307, "neural_compressor.strategy.bayesian.TargetSpace.max"]], "neural_compressor.strategy.bayesian": [[307, "module-neural_compressor.strategy.bayesian"]], "next_tune_cfg() (neural_compressor.strategy.bayesian.bayesiantunestrategy method)": [[307, "neural_compressor.strategy.bayesian.BayesianTuneStrategy.next_tune_cfg"]], "params (neural_compressor.strategy.bayesian.targetspace property)": [[307, "neural_compressor.strategy.bayesian.TargetSpace.params"]], "params_to_array() (neural_compressor.strategy.bayesian.targetspace method)": [[307, "neural_compressor.strategy.bayesian.TargetSpace.params_to_array"]], "random_sample() (neural_compressor.strategy.bayesian.targetspace method)": [[307, "neural_compressor.strategy.bayesian.TargetSpace.random_sample"]], "register() (neural_compressor.strategy.bayesian.targetspace method)": [[307, "neural_compressor.strategy.bayesian.TargetSpace.register"]], "res (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[307, "neural_compressor.strategy.bayesian.BayesianOptimization.res"]], "res() (neural_compressor.strategy.bayesian.targetspace method)": [[307, "neural_compressor.strategy.bayesian.TargetSpace.res"]], "space (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[307, "neural_compressor.strategy.bayesian.BayesianOptimization.space"]], "suggest() (neural_compressor.strategy.bayesian.bayesianoptimization method)": [[307, "neural_compressor.strategy.bayesian.BayesianOptimization.suggest"]], "target (neural_compressor.strategy.bayesian.targetspace property)": [[307, "neural_compressor.strategy.bayesian.TargetSpace.target"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[308, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[308, "module-neural_compressor.strategy.conservative"]], "next_tune_cfg() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[308, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.next_tune_cfg"]], "stop() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[308, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.stop"]], "traverse() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[308, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.traverse"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[309, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[309, "module-neural_compressor.strategy.exhaustive"]], "next_tune_cfg() (neural_compressor.strategy.exhaustive.exhaustivetunestrategy method)": [[309, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy.next_tune_cfg"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[310, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[310, "module-neural_compressor.strategy.hawq_v2"]], "next_tune_cfg() (neural_compressor.strategy.hawq_v2.hawq_v2tunestrategy method)": [[310, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy.next_tune_cfg"]], "neural_compressor.strategy": [[311, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[312, "neural_compressor.strategy.mse.MSETuneStrategy"]], "mse_impact_lst() (neural_compressor.strategy.mse.msetunestrategy method)": [[312, "neural_compressor.strategy.mse.MSETuneStrategy.mse_impact_lst"]], "neural_compressor.strategy.mse": [[312, "module-neural_compressor.strategy.mse"]], "next_tune_cfg() (neural_compressor.strategy.mse.msetunestrategy method)": [[312, "neural_compressor.strategy.mse.MSETuneStrategy.next_tune_cfg"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[313, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[313, "module-neural_compressor.strategy.mse_v2"]], "next_tune_cfg() (neural_compressor.strategy.mse_v2.mse_v2tunestrategy method)": [[313, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy.next_tune_cfg"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[314, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[314, "module-neural_compressor.strategy.random"]], "next_tune_cfg() (neural_compressor.strategy.random.randomtunestrategy method)": [[314, "neural_compressor.strategy.random.RandomTuneStrategy.next_tune_cfg"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[315, "neural_compressor.strategy.strategy.TuneStrategy"]], "deploy_config() (neural_compressor.strategy.strategy.tunestrategy method)": [[315, "neural_compressor.strategy.strategy.TuneStrategy.deploy_config"]], "distributed_next_tune_cfg_lst() (neural_compressor.strategy.strategy.tunestrategy method)": [[315, "neural_compressor.strategy.strategy.TuneStrategy.distributed_next_tune_cfg_lst"]], "distributed_traverse() (neural_compressor.strategy.strategy.tunestrategy method)": [[315, "neural_compressor.strategy.strategy.TuneStrategy.distributed_traverse"]], "evaluation_result (neural_compressor.strategy.strategy.tunestrategy property)": [[315, "neural_compressor.strategy.strategy.TuneStrategy.evaluation_result"]], "initial_best_acc() (neural_compressor.strategy.strategy.tunestrategy method)": [[315, "neural_compressor.strategy.strategy.TuneStrategy.initial_best_acc"]], "initial_tuning_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[315, "neural_compressor.strategy.strategy.TuneStrategy.initial_tuning_cfg"]], "master_worker_handle() (neural_compressor.strategy.strategy.tunestrategy method)": [[315, "neural_compressor.strategy.strategy.TuneStrategy.master_worker_handle"]], "meet_acc_req() (neural_compressor.strategy.strategy.tunestrategy method)": [[315, "neural_compressor.strategy.strategy.TuneStrategy.meet_acc_req"]], "neural_compressor.strategy.strategy": [[315, "module-neural_compressor.strategy.strategy"]], "next_tune_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[315, "neural_compressor.strategy.strategy.TuneStrategy.next_tune_cfg"]], "set_q_func() (neural_compressor.strategy.strategy.tunestrategy method)": [[315, "neural_compressor.strategy.strategy.TuneStrategy.set_q_func"]], "set_tuning_space() (neural_compressor.strategy.strategy.tunestrategy method)": [[315, "neural_compressor.strategy.strategy.TuneStrategy.set_tuning_space"]], "setup_resume() (neural_compressor.strategy.strategy.tunestrategy method)": [[315, "neural_compressor.strategy.strategy.TuneStrategy.setup_resume"]], "show_baseline_info() (neural_compressor.strategy.strategy.tunestrategy method)": [[315, "neural_compressor.strategy.strategy.TuneStrategy.show_baseline_info"]], "slave_worker_handle() (neural_compressor.strategy.strategy.tunestrategy method)": [[315, "neural_compressor.strategy.strategy.TuneStrategy.slave_worker_handle"]], "stop() (neural_compressor.strategy.strategy.tunestrategy method)": [[315, "neural_compressor.strategy.strategy.TuneStrategy.stop"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[315, "neural_compressor.strategy.strategy.strategy_registry"]], "traverse() (neural_compressor.strategy.strategy.tunestrategy method)": [[315, "neural_compressor.strategy.strategy.TuneStrategy.traverse"]], "update_best_op_tuning_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[315, "neural_compressor.strategy.strategy.TuneStrategy.update_best_op_tuning_cfg"]], "neural_compressor.strategy.utils.constant": [[316, "module-neural_compressor.strategy.utils.constant"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils)": [[317, "neural_compressor.strategy.utils.FallbackTuningSampler"]], "optuningconfig (class in neural_compressor.strategy.utils)": [[317, "neural_compressor.strategy.utils.OpTuningConfig"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils)": [[317, "neural_compressor.strategy.utils.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils)": [[317, "neural_compressor.strategy.utils.OpWiseTuningSampler"]], "tuningitem (class in neural_compressor.strategy.utils)": [[317, "neural_compressor.strategy.utils.TuningItem"]], "tuningsampler (class in neural_compressor.strategy.utils)": [[317, "neural_compressor.strategy.utils.TuningSampler"]], "tuningspace (class in neural_compressor.strategy.utils)": [[317, "neural_compressor.strategy.utils.TuningSpace"]], "append() (neural_compressor.strategy.utils.tuningitem method)": [[317, "neural_compressor.strategy.utils.TuningItem.append"]], "from_state() (neural_compressor.strategy.utils.optuningconfig class method)": [[317, "neural_compressor.strategy.utils.OpTuningConfig.from_state"]], "get_default_config() (neural_compressor.strategy.utils.tuningspace method)": [[317, "neural_compressor.strategy.utils.TuningSpace.get_default_config"]], "get_default_full_path() (neural_compressor.strategy.utils.tuningspace method)": [[317, "neural_compressor.strategy.utils.TuningSpace.get_default_full_path"]], "get_details() (neural_compressor.strategy.utils.tuningitem method)": [[317, "neural_compressor.strategy.utils.TuningItem.get_details"]], "get_item_by_path() (neural_compressor.strategy.utils.tuningspace method)": [[317, "neural_compressor.strategy.utils.TuningSpace.get_item_by_path"]], "get_op_default_path_by_pattern() (neural_compressor.strategy.utils.tuningspace method)": [[317, "neural_compressor.strategy.utils.TuningSpace.get_op_default_path_by_pattern"]], "get_option_by_name() (neural_compressor.strategy.utils.tuningitem method)": [[317, "neural_compressor.strategy.utils.TuningItem.get_option_by_name"]], "get_options_name() (neural_compressor.strategy.utils.tuningitem method)": [[317, "neural_compressor.strategy.utils.TuningItem.get_options_name"]], "get_opwise_candidate() (neural_compressor.strategy.utils.opwisetuningsampler method)": [[317, "neural_compressor.strategy.utils.OpWiseTuningSampler.get_opwise_candidate"]], "get_state() (neural_compressor.strategy.utils.optuningconfig method)": [[317, "neural_compressor.strategy.utils.OpTuningConfig.get_state"]], "neural_compressor.strategy.utils": [[317, "module-neural_compressor.strategy.utils"]], "options (neural_compressor.strategy.utils.tuningitem property)": [[317, "neural_compressor.strategy.utils.TuningItem.options"]], "query_item_option() (neural_compressor.strategy.utils.tuningspace method)": [[317, "neural_compressor.strategy.utils.TuningSpace.query_item_option"]], "query_items_by_quant_mode() (neural_compressor.strategy.utils.tuningspace method)": [[317, "neural_compressor.strategy.utils.TuningSpace.query_items_by_quant_mode"]], "query_quant_mode_item_by_full_path() (neural_compressor.strategy.utils.tuningspace method)": [[317, "neural_compressor.strategy.utils.TuningSpace.query_quant_mode_item_by_full_path"]], "remove() (neural_compressor.strategy.utils.tuningitem method)": [[317, "neural_compressor.strategy.utils.TuningItem.remove"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[318, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[318, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[318, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[318, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[318, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[318, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "get_opwise_candidate() (neural_compressor.strategy.utils.tuning_sampler.opwisetuningsampler method)": [[318, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler.get_opwise_candidate"]], "neural_compressor.strategy.utils.tuning_sampler": [[318, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[319, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[319, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "append() (neural_compressor.strategy.utils.tuning_space.tuningitem method)": [[319, "neural_compressor.strategy.utils.tuning_space.TuningItem.append"]], "get_default_config() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[319, "neural_compressor.strategy.utils.tuning_space.TuningSpace.get_default_config"]], "get_default_full_path() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[319, "neural_compressor.strategy.utils.tuning_space.TuningSpace.get_default_full_path"]], "get_details() (neural_compressor.strategy.utils.tuning_space.tuningitem method)": [[319, "neural_compressor.strategy.utils.tuning_space.TuningItem.get_details"]], "get_item_by_path() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[319, "neural_compressor.strategy.utils.tuning_space.TuningSpace.get_item_by_path"]], "get_op_default_path_by_pattern() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[319, "neural_compressor.strategy.utils.tuning_space.TuningSpace.get_op_default_path_by_pattern"]], "get_op_mode_by_query_order() (in module neural_compressor.strategy.utils.tuning_space)": [[319, "neural_compressor.strategy.utils.tuning_space.get_op_mode_by_query_order"]], "get_option_by_name() (neural_compressor.strategy.utils.tuning_space.tuningitem method)": [[319, "neural_compressor.strategy.utils.tuning_space.TuningItem.get_option_by_name"]], "get_options_name() (neural_compressor.strategy.utils.tuning_space.tuningitem method)": [[319, "neural_compressor.strategy.utils.tuning_space.TuningItem.get_options_name"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[319, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[319, "module-neural_compressor.strategy.utils.tuning_space"]], "options (neural_compressor.strategy.utils.tuning_space.tuningitem property)": [[319, "neural_compressor.strategy.utils.tuning_space.TuningItem.options"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[319, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[319, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[319, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "query_item_option() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[319, "neural_compressor.strategy.utils.tuning_space.TuningSpace.query_item_option"]], "query_items_by_quant_mode() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[319, "neural_compressor.strategy.utils.tuning_space.TuningSpace.query_items_by_quant_mode"]], "query_quant_mode_item_by_full_path() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[319, "neural_compressor.strategy.utils.tuning_space.TuningSpace.query_quant_mode_item_by_full_path"]], "remove() (neural_compressor.strategy.utils.tuning_space.tuningitem method)": [[319, "neural_compressor.strategy.utils.tuning_space.TuningItem.remove"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[320, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "from_state() (neural_compressor.strategy.utils.tuning_structs.optuningconfig class method)": [[320, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig.from_state"]], "get_state() (neural_compressor.strategy.utils.tuning_structs.optuningconfig method)": [[320, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig.get_state"]], "neural_compressor.strategy.utils.tuning_structs": [[320, "module-neural_compressor.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.util)": [[321, "neural_compressor.strategy.utils.util.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.strategy.utils.util)": [[321, "neural_compressor.strategy.utils.util.extract_data_type"]], "neural_compressor.strategy.utils.util": [[321, "module-neural_compressor.strategy.utils.util"]], "reverted_data_type() (in module neural_compressor.strategy.utils.util)": [[321, "neural_compressor.strategy.utils.util.reverted_data_type"]], "compressionmanager (class in neural_compressor.training)": [[322, "neural_compressor.training.CompressionManager"]], "compressionmanager.callbacks (class in neural_compressor.training)": [[322, "neural_compressor.training.CompressionManager.CallBacks"]], "export() (neural_compressor.training.compressionmanager method)": [[322, "neural_compressor.training.CompressionManager.export"]], "neural_compressor.training": [[322, "module-neural_compressor.training"]], "on_after_compute_loss() (neural_compressor.training.compressionmanager.callbacks method)": [[322, "neural_compressor.training.CompressionManager.CallBacks.on_after_compute_loss"]], "on_after_optimizer_step() (neural_compressor.training.compressionmanager.callbacks method)": [[322, "neural_compressor.training.CompressionManager.CallBacks.on_after_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.training.compressionmanager.callbacks method)": [[322, "neural_compressor.training.CompressionManager.CallBacks.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.training.compressionmanager.callbacks method)": [[322, "neural_compressor.training.CompressionManager.CallBacks.on_epoch_begin"]], "on_epoch_end() (neural_compressor.training.compressionmanager.callbacks method)": [[322, "neural_compressor.training.CompressionManager.CallBacks.on_epoch_end"]], "on_step_begin() (neural_compressor.training.compressionmanager.callbacks method)": [[322, "neural_compressor.training.CompressionManager.CallBacks.on_step_begin"]], "on_step_end() (neural_compressor.training.compressionmanager.callbacks method)": [[322, "neural_compressor.training.CompressionManager.CallBacks.on_step_end"]], "on_train_begin() (neural_compressor.training.compressionmanager.callbacks method)": [[322, "neural_compressor.training.CompressionManager.CallBacks.on_train_begin"]], "on_train_end() (neural_compressor.training.compressionmanager.callbacks method)": [[322, "neural_compressor.training.CompressionManager.CallBacks.on_train_end"]], "prepare_compression() (in module neural_compressor.training)": [[322, "neural_compressor.training.prepare_compression"]], "save() (neural_compressor.training.compressionmanager method)": [[322, "neural_compressor.training.CompressionManager.save"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[323, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "collect() (neural_compressor.utils.collect_layer_histogram.layerhistogramcollector method)": [[323, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector.collect"]], "neural_compressor.utils.collect_layer_histogram": [[323, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[324, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[325, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[325, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[325, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[325, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[325, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[325, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[325, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[325, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[325, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[325, "module-neural_compressor.utils.create_obj_from_config"]], "layerhistogramcollector (class in neural_compressor.utils)": [[326, "neural_compressor.utils.LayerHistogramCollector"]], "collect() (neural_compressor.utils.layerhistogramcollector method)": [[326, "neural_compressor.utils.LayerHistogramCollector.collect"]], "debug() (in module neural_compressor.utils)": [[326, "neural_compressor.utils.debug"]], "error() (in module neural_compressor.utils)": [[326, "neural_compressor.utils.error"]], "fatal() (in module neural_compressor.utils)": [[326, "neural_compressor.utils.fatal"]], "info() (in module neural_compressor.utils)": [[326, "neural_compressor.utils.info"]], "log() (in module neural_compressor.utils)": [[326, "neural_compressor.utils.log"]], "neural_compressor.utils": [[326, "module-neural_compressor.utils"]], "set_random_seed() (in module neural_compressor.utils)": [[326, "neural_compressor.utils.set_random_seed"]], "warn() (in module neural_compressor.utils)": [[326, "neural_compressor.utils.warn"]], "warning() (in module neural_compressor.utils)": [[326, "neural_compressor.utils.warning"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[327, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "expand_quantized_bins() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[327, "neural_compressor.utils.kl_divergence.KL_Divergence.expand_quantized_bins"]], "get_threshold() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[327, "neural_compressor.utils.kl_divergence.KL_Divergence.get_threshold"]], "neural_compressor.utils.kl_divergence": [[327, "module-neural_compressor.utils.kl_divergence"]], "safe_entropy() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[327, "neural_compressor.utils.kl_divergence.KL_Divergence.safe_entropy"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[328, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "from_pretrained() (neural_compressor.utils.load_huggingface.optimizedmodel class method)": [[328, "neural_compressor.utils.load_huggingface.OptimizedModel.from_pretrained"]], "neural_compressor.utils.load_huggingface": [[328, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[328, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[329, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[329, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[329, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[329, "neural_compressor.utils.logger.fatal"]], "get_logger() (neural_compressor.utils.logger.logger method)": [[329, "neural_compressor.utils.logger.Logger.get_logger"]], "info() (in module neural_compressor.utils.logger)": [[329, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[329, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[329, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[329, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[329, "neural_compressor.utils.logger.warning"]], "neural_compressor.utils.options": [[330, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[330, "neural_compressor.utils.options.onnxrt"]], "load() (in module neural_compressor.utils.pytorch)": [[331, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[331, "module-neural_compressor.utils.pytorch"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[332, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[332, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[332, "neural_compressor.utils.utility.Dequantize"]], "dequantizeweight() (in module neural_compressor.utils.utility)": [[332, "neural_compressor.utils.utility.DequantizeWeight"]], "global_state (class in neural_compressor.utils.utility)": [[332, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[332, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[332, "neural_compressor.utils.utility.MODE"]], "statistics (class in neural_compressor.utils.utility)": [[332, "neural_compressor.utils.utility.Statistics"]], "bf16 (neural_compressor.utils.utility.cpuinfo property)": [[332, "neural_compressor.utils.utility.CpuInfo.bf16"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[332, "neural_compressor.utils.utility.combine_histogram"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[332, "neural_compressor.utils.utility.compute_sparsity"]], "cores_per_socket (neural_compressor.utils.utility.cpuinfo property)": [[332, "neural_compressor.utils.utility.CpuInfo.cores_per_socket"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[332, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[332, "neural_compressor.utils.utility.dump_elapsed_time"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[332, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[332, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[332, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (neural_compressor.utils.utility.cpuinfo method)": [[332, "neural_compressor.utils.utility.CpuInfo.get_number_of_sockets"]], "get_size() (in module neural_compressor.utils.utility)": [[332, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[332, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[332, "neural_compressor.utils.utility.get_tuning_history"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[332, "neural_compressor.utils.utility.load_data_from_pkl"]], "neural_compressor.utils.utility": [[332, "module-neural_compressor.utils.utility"]], "print_stat() (neural_compressor.utils.utility.statistics method)": [[332, "neural_compressor.utils.utility.Statistics.print_stat"]], "recover() (in module neural_compressor.utils.utility)": [[332, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[332, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[332, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[332, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[332, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[332, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[332, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[332, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[332, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[332, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[332, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[332, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[332, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[332, "neural_compressor.utils.utility.version1_lte_version2"]], "vnni (neural_compressor.utils.utility.cpuinfo property)": [[332, "neural_compressor.utils.utility.CpuInfo.vnni"]], "benchmark (class in neural_compressor.ux.components.benchmark.benchmark)": [[333, "neural_compressor.ux.components.benchmark.benchmark.Benchmark"]], "dataloaderinterface (class in neural_compressor.ux.components.benchmark.benchmark)": [[333, "neural_compressor.ux.components.benchmark.benchmark.DataloaderInterface"]], "config_filename (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[333, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.config_filename"]], "configuration_data (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[333, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.configuration_data"]], "execute() (neural_compressor.ux.components.benchmark.benchmark.benchmark method)": [[333, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.execute"]], "generate_config() (neural_compressor.ux.components.benchmark.benchmark.benchmark method)": [[333, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.generate_config"]], "neural_compressor.ux.components.benchmark.benchmark": [[333, "module-neural_compressor.ux.components.benchmark.benchmark"]], "workdir (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[333, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.workdir"]], "benchmark_model() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[334, "neural_compressor.ux.components.benchmark.benchmark_model.benchmark_model"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[334, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "parse_args() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[334, "neural_compressor.ux.components.benchmark.benchmark_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[334, "neural_compressor.ux.components.benchmark.benchmark_model.set_eager_execution"]], "benchmark_result_update() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[335, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update"]], "benchmark_result_update_pytorch_script() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[335, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update_pytorch_script"]], "execute_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[335, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_benchmark"]], "execute_real_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[335, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_real_benchmark"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[335, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "pytorch_script_bench_optimizations() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[335, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_optimizations"]], "pytorch_script_bench_original_model() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[335, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_original_model"]], "benchmarks (class in neural_compressor.ux.components.benchmark)": [[336, "neural_compressor.ux.components.benchmark.Benchmarks"]], "neural_compressor.ux.components.benchmark": [[336, "module-neural_compressor.ux.components.benchmark"]], "benchmarkconfiggenerator (class in neural_compressor.ux.components.config_generator.benchmark_config_generator)": [[337, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[337, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate"]], "generate_accuracy_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[337, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_accuracy_config"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[337, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_evaluation_config"]], "generate_performance_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[337, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_performance_config"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[337, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "configgenerator (class in neural_compressor.ux.components.config_generator.config_generator)": [[338, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[338, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate"]], "generate_dataloader_config() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[338, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate_dataloader_config"]], "generate_model_config() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[338, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate_model_config"]], "get_predefined_config_path() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[338, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.get_predefined_config_path"]], "neural_compressor.ux.components.config_generator.config_generator": [[338, "module-neural_compressor.ux.components.config_generator.config_generator"]], "graphoptimizationconfiggenerator (class in neural_compressor.ux.components.config_generator.graph_optimization_config_generator)": [[339, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[339, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[339, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate_evaluation_config"]], "generate_graph_optimization_config() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[339, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate_graph_optimization_config"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[339, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[340, "module-neural_compressor.ux.components.config_generator"]], "mixedprecisionconfiggenerator (class in neural_compressor.ux.components.config_generator.mixed_precision_config_generator)": [[341, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[341, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[341, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate_evaluation_config"]], "generate_mixed_precision_config() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[341, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate_mixed_precision_config"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[341, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "profilingconfiggenerator (class in neural_compressor.ux.components.config_generator.profiling_config_generator)": [[342, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.profiling_config_generator.profilingconfiggenerator method)": [[342, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator.generate"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[342, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "pruningconfiggenerator (class in neural_compressor.ux.components.config_generator.pruning_config_generator)": [[343, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[343, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[343, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate_evaluation_config"]], "generate_pruning_config() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[343, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate_pruning_config"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[343, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "quantizationconfiggenerator (class in neural_compressor.ux.components.config_generator.quantization_config_generator)": [[344, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[344, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[344, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_evaluation_config"]], "generate_quantization_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[344, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_quantization_config"]], "generate_tuning_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[344, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_tuning_config"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[344, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "configurationparser (class in neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[345, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser"]], "get_param_type() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[345, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.get_param_type"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[345, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "normalize_string_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[345, "neural_compressor.ux.components.configuration_wizard.configuration_parser.normalize_string_list"]], "parse() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[345, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse"]], "parse_dataloader() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[345, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_dataloader"]], "parse_evaluation_data() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[345, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_evaluation_data"]], "parse_list_value() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[345, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_list_value"]], "parse_metric() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[345, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_metric"]], "parse_multidim_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[345, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_multidim_list"]], "parse_transforms() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[345, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_transforms"]], "parse_value() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser static method)": [[345, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_value"]], "get_boundary_nodes() (in module neural_compressor.ux.components.configuration_wizard.get_boundary_nodes)": [[346, "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[346, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "get_predefined_configuration() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[347, "neural_compressor.ux.components.configuration_wizard.get_configuration.get_predefined_configuration"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[347, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "update_config_to_machine_specification() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[347, "neural_compressor.ux.components.configuration_wizard.get_configuration.update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard": [[348, "module-neural_compressor.ux.components.configuration_wizard"]], "feeder (class in neural_compressor.ux.components.configuration_wizard.params_feeder)": [[349, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder"]], "feed() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[349, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.feed"]], "get_dataloaders() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[349, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_dataloaders"]], "get_domains() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[349, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_domains"]], "get_frameworks() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[349, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_frameworks"]], "get_metrics() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[349, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_metrics"]], "get_models() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[349, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_models"]], "get_objectives() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[349, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_objectives"]], "get_possible_values() (in module neural_compressor.ux.components.configuration_wizard.params_feeder)": [[349, "neural_compressor.ux.components.configuration_wizard.params_feeder.get_possible_values"]], "get_precisions() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[349, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_precisions"]], "get_quantization_approaches() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[349, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_quantization_approaches"]], "get_strategies() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[349, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_strategies"]], "get_transforms() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[349, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_transforms"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[349, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "pruningconfigparser (class in neural_compressor.ux.components.configuration_wizard.pruning_config_parser)": [[350, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser"]], "generate_tree() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[350, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.generate_tree"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[350, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "parse() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[350, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.parse"]], "parse_entry() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[350, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.parse_entry"]], "dbmanager (class in neural_compressor.ux.components.db_manager.db_manager)": [[351, "neural_compressor.ux.components.db_manager.db_manager.DBManager"]], "create_all() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[351, "neural_compressor.ux.components.db_manager.db_manager.DBManager.create_all"]], "create_sqlalchemy_engine() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[351, "neural_compressor.ux.components.db_manager.db_manager.DBManager.create_sqlalchemy_engine"]], "engine (neural_compressor.ux.components.db_manager.db_manager.dbmanager property)": [[351, "neural_compressor.ux.components.db_manager.db_manager.DBManager.engine"]], "initialize_database() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[351, "neural_compressor.ux.components.db_manager.db_manager.DBManager.initialize_database"]], "neural_compressor.ux.components.db_manager.db_manager": [[351, "module-neural_compressor.ux.components.db_manager.db_manager"]], "benchmark (class in neural_compressor.ux.components.db_manager.db_models.benchmark)": [[352, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark"]], "add() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[352, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[352, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[352, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.clean_status"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[352, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.delete_benchmark"]], "details() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[352, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[352, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.list"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[352, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "update_batch_size() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[352, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_batch_size"]], "update_config_path() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[352, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_config_path"]], "update_cores_per_instance() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[352, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_cores_per_instance"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[352, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[352, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[352, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[352, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_log_path"]], "update_mode() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[352, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_mode"]], "update_number_of_instance() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[352, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_number_of_instance"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[352, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_status"]], "benchmarkresult (class in neural_compressor.ux.components.db_manager.db_models.benchmark_result)": [[353, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult"]], "add() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[353, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[353, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.build_info"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[353, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "update_accuracy() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[353, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.update_accuracy"]], "update_performance() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[353, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.update_performance"]], "dataloader (class in neural_compressor.ux.components.db_manager.db_models.dataloader)": [[354, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.dataloader)": [[354, "neural_compressor.ux.components.db_manager.db_models.dataloader.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[354, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.list"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[354, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[354, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[354, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.query_to_list"]], "update_params() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[354, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.update_params"]], "dataset (class in neural_compressor.ux.components.db_manager.db_models.dataset)": [[355, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset"]], "add() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[355, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[355, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.build_info"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[355, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.delete_dataset"]], "details() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[355, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[355, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.list"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[355, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "update_template_path() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[355, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.update_template_path"]], "domain (class in neural_compressor.ux.components.db_manager.db_models.domain)": [[356, "neural_compressor.ux.components.db_manager.db_models.domain.Domain"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain)": [[356, "neural_compressor.ux.components.db_manager.db_models.domain.fill_dictionary"]], "get_domain_id() (neural_compressor.ux.components.db_manager.db_models.domain.domain static method)": [[356, "neural_compressor.ux.components.db_manager.db_models.domain.Domain.get_domain_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.domain.domain static method)": [[356, "neural_compressor.ux.components.db_manager.db_models.domain.Domain.list"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[356, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "domainflavour (class in neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[357, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[357, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.fill_dictionary"]], "get_domain_flavour_id() (neural_compressor.ux.components.db_manager.db_models.domain_flavour.domainflavour static method)": [[357, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour.get_domain_flavour_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.domain_flavour.domainflavour static method)": [[357, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour.list"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[357, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "example (class in neural_compressor.ux.components.db_manager.db_models.example)": [[358, "neural_compressor.ux.components.db_manager.db_models.example.Example"]], "neural_compressor.ux.components.db_manager.db_models.example": [[358, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "framework (class in neural_compressor.ux.components.db_manager.db_models.framework)": [[359, "neural_compressor.ux.components.db_manager.db_models.framework.Framework"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.framework)": [[359, "neural_compressor.ux.components.db_manager.db_models.framework.fill_dictionary"]], "get_framework_id() (neural_compressor.ux.components.db_manager.db_models.framework.framework static method)": [[359, "neural_compressor.ux.components.db_manager.db_models.framework.Framework.get_framework_id"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[359, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[360, "module-neural_compressor.ux.components.db_manager.db_models"]], "metric (class in neural_compressor.ux.components.db_manager.db_models.metric)": [[361, "neural_compressor.ux.components.db_manager.db_models.metric.Metric"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.metric)": [[361, "neural_compressor.ux.components.db_manager.db_models.metric.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[361, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.list"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[361, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[361, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[361, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.query_to_list"]], "model (class in neural_compressor.ux.components.db_manager.db_models.model)": [[362, "neural_compressor.ux.components.db_manager.db_models.model.Model"]], "add() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[362, "neural_compressor.ux.components.db_manager.db_models.model.Model.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[362, "neural_compressor.ux.components.db_manager.db_models.model.Model.build_info"]], "delete_model() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[362, "neural_compressor.ux.components.db_manager.db_models.model.Model.delete_model"]], "details() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[362, "neural_compressor.ux.components.db_manager.db_models.model.Model.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[362, "neural_compressor.ux.components.db_manager.db_models.model.Model.list"]], "neural_compressor.ux.components.db_manager.db_models.model": [[362, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "optimization (class in neural_compressor.ux.components.db_manager.db_models.optimization)": [[363, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization"]], "add() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.clean_status"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.delete_optimization"]], "details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.details"]], "get_optimization_by_project_and_model() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.get_optimization_by_project_and_model"]], "get_pinned_benchmarks() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.get_pinned_benchmarks"]], "list() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.list"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[363, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.pin_performance_benchmark"]], "unpin_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.unpin_benchmark"]], "update_batch_size() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_batch_size"]], "update_config_path() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_config_path"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_log_path"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_optimized_model"]], "update_precision() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_precision"]], "update_pruning_details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_pruning_details"]], "update_sampling_size() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_sampling_size"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_status"]], "update_tuning_details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_tuning_details"]], "optimizationtype (class in neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[364, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType"]], "add() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.add"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[364, "neural_compressor.ux.components.db_manager.db_models.optimization_type.fill_dictionary"]], "get_optimization_type_by_id() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_by_id"]], "get_optimization_type_by_name() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_by_name"]], "get_optimization_type_for_precision() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_for_precision"]], "get_optimization_type_id() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.list"]], "list_for_precision() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.list_for_precision"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[364, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "precision (class in neural_compressor.ux.components.db_manager.db_models.precision)": [[365, "neural_compressor.ux.components.db_manager.db_models.precision.Precision"]], "add() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[365, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.add"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.precision)": [[365, "neural_compressor.ux.components.db_manager.db_models.precision.fill_dictionary"]], "get_precision_by_id() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[365, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_by_id"]], "get_precision_by_name() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[365, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_by_name"]], "get_precision_id() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[365, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[365, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.list"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[365, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "profiling (class in neural_compressor.ux.components.db_manager.db_models.profiling)": [[366, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling"]], "add() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.clean_status"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.delete_profiling"]], "details() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.list"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[366, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_log_path"]], "update_num_threads() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_num_threads"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_status"]], "profilingresult (class in neural_compressor.ux.components.db_manager.db_models.profiling_result)": [[367, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult"]], "add() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[367, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[367, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.build_info"]], "bulk_add() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[367, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.bulk_add"]], "delete_results() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[367, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.delete_results"]], "get_results() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[367, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.get_results"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[367, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "project (class in neural_compressor.ux.components.db_manager.db_models.project)": [[368, "neural_compressor.ux.components.db_manager.db_models.project.Project"]], "create_project() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[368, "neural_compressor.ux.components.db_manager.db_models.project.Project.create_project"]], "delete_project() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[368, "neural_compressor.ux.components.db_manager.db_models.project.Project.delete_project"]], "get_model_by_name() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[368, "neural_compressor.ux.components.db_manager.db_models.project.Project.get_model_by_name"]], "list_projects() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[368, "neural_compressor.ux.components.db_manager.db_models.project.Project.list_projects"]], "neural_compressor.ux.components.db_manager.db_models.project": [[368, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "project_details() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[368, "neural_compressor.ux.components.db_manager.db_models.project.Project.project_details"]], "update_notes() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[368, "neural_compressor.ux.components.db_manager.db_models.project.Project.update_notes"]], "pruningdetails (class in neural_compressor.ux.components.db_manager.db_models.pruning_details)": [[369, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails"]], "add() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[369, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[369, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.build_info"]], "delete_pruning_details() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[369, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.delete_pruning_details"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[369, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "update() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[369, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.update"]], "transform (class in neural_compressor.ux.components.db_manager.db_models.transform)": [[370, "neural_compressor.ux.components.db_manager.db_models.transform.Transform"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.transform)": [[370, "neural_compressor.ux.components.db_manager.db_models.transform.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[370, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list"]], "list_by_domain() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[370, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list_by_domain"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[370, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[370, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[370, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.query_to_list"]], "tuningdetails (class in neural_compressor.ux.components.db_manager.db_models.tuning_details)": [[371, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails"]], "add() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[371, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.add"]], "delete_tuning_details() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[371, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.delete_tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[371, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "update() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[371, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.update"]], "update_tuning_history() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[371, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.update_tuning_history"]], "tuninghistory (class in neural_compressor.ux.components.db_manager.db_models.tuning_history)": [[372, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory"]], "add() (neural_compressor.ux.components.db_manager.db_models.tuning_history.tuninghistory static method)": [[372, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.tuning_history.tuninghistory static method)": [[372, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory.build_info"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[372, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[373, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface"]], "add_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[373, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.add_benchmark"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[373, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.add_result"]], "before_delete_benchmark_entry() (in module neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[373, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.before_delete_benchmark_entry"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[373, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.clean_status"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[373, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.delete_benchmark"]], "edit_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[373, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.edit_benchmark"]], "get_benchmark_details() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[373, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.get_benchmark_details"]], "list_benchmarks() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[373, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.list_benchmarks"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[373, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "parse_benchmark_data() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[373, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.parse_benchmark_data"]], "parse_benchmark_edit_data() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[373, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.parse_benchmark_edit_data"]], "update_benchmark_accuracy() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[373, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_accuracy"]], "update_benchmark_duration() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[373, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_duration"]], "update_benchmark_performance() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[373, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_performance"]], "update_benchmark_status() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[373, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_status"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[373, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_execution_command"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[373, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_paths"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[374, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface"]], "add_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[374, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.add_dataset"]], "check_if_custom_metric_or_dataloader() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[374, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.check_if_custom_metric_or_dataloader"]], "dataloader_path() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[374, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.dataloader_path"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[374, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.delete_dataset"]], "generate_custom_template() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[374, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.generate_custom_template"]], "generate_template() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[374, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.generate_template"]], "get_dataset_details() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[374, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.get_dataset_details"]], "get_predefined_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[374, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.get_predefined_dataset"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[374, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[374, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_precision_optimization_types_association"]], "list_datasets() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[374, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.list_datasets"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[374, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "parse_dataset_data() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[374, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.parse_dataset_data"]], "prepare_predefined_dataloader() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[374, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.prepare_predefined_dataloader"]], "prepare_predefined_transform() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[374, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.prepare_predefined_transform"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[374, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[374, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[374, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.set_database_version"]], "set_template_path() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[374, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.set_template_path"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[375, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[375, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_precision_optimization_types_association"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[375, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[375, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[375, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[375, "neural_compressor.ux.components.db_manager.db_operations.db_operations.set_database_version"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface)": [[376, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface"]], "generate_optimization() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.generate_optimization"]], "get_op_details() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.get_op_details"]], "get_op_list() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.get_op_list"]], "histogram() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.histogram"]], "model_wise_params() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.model_wise_params"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[376, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "parse_model_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_model_wise_config"]], "parse_op_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_op_wise_config"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_optimization_data"]], "parse_wise_parameters() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_wise_parameters"]], "set_op_wise_pattern_precision() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.set_op_wise_pattern_precision"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface)": [[377, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface"]], "list_dataloaders() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[377, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_dataloaders"]], "list_dataloaders_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[377, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_dataloaders_by_framework"]], "list_domain_flavours() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[377, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_domain_flavours"]], "list_domains() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[377, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_domains"]], "list_metrics() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[377, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_metrics"]], "list_metrics_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[377, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_metrics_by_framework"]], "list_optimization_types() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[377, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_optimization_types"]], "list_optimization_types_for_precision() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[377, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_optimization_types_for_precision"]], "list_precisions() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[377, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_precisions"]], "list_transforms() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[377, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms"]], "list_transforms_by_domain() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[377, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms_by_domain"]], "list_transforms_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[377, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[377, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.examples_api_interface)": [[378, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.examplesapiinterface static method)": [[378, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface.create_project"]], "get_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.examplesapiinterface static method)": [[378, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface.get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[378, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[379, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[379, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[379, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[379, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[379, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[379, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[379, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[379, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[379, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface"]], "add_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.add_benchmark"]], "add_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.add_dataset"]], "add_dummy_dataset() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.add_dummy_dataset"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.add_model"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.add_model"]], "add_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_optimization"]], "add_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.add_profiling"]], "add_pruning_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_pruning_optimization"]], "add_quantization_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_quantization_optimization"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.add_result"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.add_result"]], "add_standard_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_standard_optimization"]], "add_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_tuning_history"]], "bulk_add_results() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.bulk_add_results"]], "check_if_custom_metric_or_dataloader() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.check_if_custom_metric_or_dataloader"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.clean_status"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.clean_status"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.clean_status"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.examplesapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface.create_project"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.create_project"]], "dataloader_path() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.dataloader_path"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.delete_benchmark"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.delete_dataset"]], "delete_model() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.delete_model"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.delete_optimization"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.delete_profiling"]], "delete_project() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.delete_project"]], "edit_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.edit_benchmark"]], "edit_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_optimization"]], "edit_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.edit_profiling"]], "edit_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_pruning_details"]], "edit_tuning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_tuning_details"]], "generate_custom_template() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.generate_custom_template"]], "generate_optimization() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.generate_optimization"]], "generate_template() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.generate_template"]], "get_benchmark_details() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.get_benchmark_details"]], "get_dataset_details() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.get_dataset_details"]], "get_model_details() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.get_model_details"]], "get_op_details() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.get_op_details"]], "get_op_list() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.get_op_list"]], "get_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.examplesapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface.get_optimization_data"]], "get_optimization_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.get_optimization_details"]], "get_predefined_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.get_predefined_dataset"]], "get_profiling_details() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.get_profiling_details"]], "get_project_details() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.get_project_details"]], "get_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.get_pruning_details"]], "histogram() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.histogram"]], "list_benchmarks() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.list_benchmarks"]], "list_dataloaders() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_dataloaders"]], "list_dataloaders_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_dataloaders_by_framework"]], "list_datasets() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.list_datasets"]], "list_domain_flavours() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_domain_flavours"]], "list_domains() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_domains"]], "list_metrics() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_metrics"]], "list_metrics_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_metrics_by_framework"]], "list_models() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.list_models"]], "list_optimization_types() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_optimization_types"]], "list_optimization_types_for_precision() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_optimization_types_for_precision"]], "list_optimizations() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.list_optimizations"]], "list_precisions() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_precisions"]], "list_profilings() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.list_profilings"]], "list_projects() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.list_projects"]], "list_transforms() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms"]], "list_transforms_by_domain() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms_by_domain"]], "list_transforms_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms_by_framework"]], "load_pruning_details_config() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.load_pruning_details_config"]], "model_wise_params() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.model_wise_params"]], "neural_compressor.ux.components.db_manager.db_operations": [[379, "module-neural_compressor.ux.components.db_manager.db_operations"]], "parse_benchmark_data() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.parse_benchmark_data"]], "parse_benchmark_edit_data() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.parse_benchmark_edit_data"]], "parse_dataset_data() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.parse_dataset_data"]], "parse_model_data() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.parse_model_data"]], "parse_model_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_model_wise_config"]], "parse_op_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_op_wise_config"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_optimization_data"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_optimization_data"]], "parse_optimization_edit_data() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_optimization_edit_data"]], "parse_profiling_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_data"]], "parse_profiling_edit_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_edit_data"]], "parse_profiling_result_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_result_data"]], "parse_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_tuning_history"]], "parse_wise_parameters() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_wise_parameters"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.pin_performance_benchmark"]], "prepare_predefined_dataloader() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.prepare_predefined_dataloader"]], "prepare_predefined_transform() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.prepare_predefined_transform"]], "set_op_wise_pattern_precision() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.set_op_wise_pattern_precision"]], "set_template_path() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.set_template_path"]], "update_benchmark_accuracy() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_accuracy"]], "update_benchmark_duration() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_duration"]], "update_benchmark_performance() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_performance"]], "update_benchmark_status() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_status"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_execution_command"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_execution_command"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_log_path"]], "update_optimization_duration() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimization_duration"]], "update_optimization_status() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimization_status"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimized_model"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_paths"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_paths"]], "update_profiling_duration() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_profiling_duration"]], "update_profiling_status() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_profiling_status"]], "update_project_notes() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.update_project_notes"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.model_api_interface)": [[380, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.add_model"]], "delete_model() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.delete_model"]], "get_model_details() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.get_model_details"]], "list_models() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.list_models"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[380, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "parse_model_data() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.parse_model_data"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface)": [[381, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface"]], "add_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_optimization"]], "add_pruning_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_pruning_optimization"]], "add_quantization_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_quantization_optimization"]], "add_standard_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_standard_optimization"]], "add_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_tuning_history"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.clean_status"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.delete_optimization"]], "edit_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_optimization"]], "edit_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_pruning_details"]], "edit_tuning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_tuning_details"]], "get_optimization_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.get_optimization_details"]], "get_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.get_pruning_details"]], "list_optimizations() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.list_optimizations"]], "load_pruning_details_config() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.load_pruning_details_config"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[381, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_optimization_data"]], "parse_optimization_edit_data() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_optimization_edit_data"]], "parse_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_tuning_history"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.pin_performance_benchmark"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_execution_command"]], "update_optimization_duration() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimization_duration"]], "update_optimization_status() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimization_status"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimized_model"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_paths"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface)": [[382, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface"]], "add_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.add_profiling"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.add_result"]], "bulk_add_results() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.bulk_add_results"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.clean_status"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.delete_profiling"]], "edit_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.edit_profiling"]], "get_profiling_details() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.get_profiling_details"]], "list_profilings() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.list_profilings"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[382, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "parse_profiling_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_data"]], "parse_profiling_edit_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_edit_data"]], "parse_profiling_result_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_result_data"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_log_path"]], "update_profiling_duration() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_profiling_duration"]], "update_profiling_status() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_profiling_status"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.project_api_interface)": [[383, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface"]], "add_dummy_dataset() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.add_dummy_dataset"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.add_model"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.create_project"]], "delete_project() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.delete_project"]], "get_project_details() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.get_project_details"]], "list_projects() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.list_projects"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[383, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "update_project_notes() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.update_project_notes"]], "dbmanager (class in neural_compressor.ux.components.db_manager)": [[384, "neural_compressor.ux.components.db_manager.DBManager"]], "create_all() (neural_compressor.ux.components.db_manager.dbmanager method)": [[384, "neural_compressor.ux.components.db_manager.DBManager.create_all"]], "create_sqlalchemy_engine() (neural_compressor.ux.components.db_manager.dbmanager method)": [[384, "neural_compressor.ux.components.db_manager.DBManager.create_sqlalchemy_engine"]], "engine (neural_compressor.ux.components.db_manager.dbmanager property)": [[384, "neural_compressor.ux.components.db_manager.DBManager.engine"]], "initialize_database() (neural_compressor.ux.components.db_manager.dbmanager method)": [[384, "neural_compressor.ux.components.db_manager.DBManager.initialize_database"]], "neural_compressor.ux.components.db_manager": [[384, "module-neural_compressor.ux.components.db_manager"]], "benchmarkaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[385, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkAddParamsInterface"]], "benchmarkeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[385, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkEditParamsInterface"]], "datasetaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[385, "neural_compressor.ux.components.db_manager.params_interfaces.DatasetAddParamsInterface"]], "diagnosisoptimizationparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[385, "neural_compressor.ux.components.db_manager.params_interfaces.DiagnosisOptimizationParamsInterface"]], "modeladdparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[385, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface"]], "optimizationaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[385, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationAddParamsInterface"]], "optimizationeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[385, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationEditParamsInterface"]], "profilingaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[385, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingAddParamsInterface"]], "profilingeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[385, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingEditParamsInterface"]], "profilingresultaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[385, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingResultAddParamsInterface"]], "tuninghistoryinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[385, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface"]], "tuninghistoryiteminterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[385, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[385, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "parse_nodes() (neural_compressor.ux.components.db_manager.params_interfaces.modeladdparamsinterface static method)": [[385, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface.parse_nodes"]], "serialize() (neural_compressor.ux.components.db_manager.params_interfaces.tuninghistoryinterface method)": [[385, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface.serialize"]], "serialize() (neural_compressor.ux.components.db_manager.params_interfaces.tuninghistoryiteminterface method)": [[385, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface.serialize"]], "get_framework_dataloaders_config() (in module neural_compressor.ux.components.db_manager.utils)": [[386, "neural_compressor.ux.components.db_manager.utils.get_framework_dataloaders_config"]], "get_framework_transforms_config() (in module neural_compressor.ux.components.db_manager.utils)": [[386, "neural_compressor.ux.components.db_manager.utils.get_framework_transforms_config"]], "neural_compressor.ux.components.db_manager.utils": [[386, "module-neural_compressor.ux.components.db_manager.utils"]], "update_dataloaders_params() (in module neural_compressor.ux.components.db_manager.utils)": [[386, "neural_compressor.ux.components.db_manager.utils.update_dataloaders_params"]], "diagnosis (class in neural_compressor.ux.components.diagnosis.diagnosis)": [[387, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis"]], "calculate_mse() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[387, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.calculate_mse"]], "get_histogram_data() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[387, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_histogram_data"]], "get_op_details() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[387, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_op_details"]], "get_op_list() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[387, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_op_list"]], "get_tensors_info() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[387, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_tensors_info"]], "load_quantization_config() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[387, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.load_quantization_config"]], "mse_metric_gap() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis static method)": [[387, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.mse_metric_gap"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[387, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "diagnosisfactory (class in neural_compressor.ux.components.diagnosis.factory)": [[388, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory"]], "get_diagnosis() (neural_compressor.ux.components.diagnosis.factory.diagnosisfactory static method)": [[388, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory.get_diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[388, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[389, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[390, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "onnxrtdiagnosis (class in neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis)": [[391, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis"]], "model (neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.onnxrtdiagnosis property)": [[391, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis.model"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[391, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "opactivation (class in neural_compressor.ux.components.diagnosis.op_details)": [[392, "neural_compressor.ux.components.diagnosis.op_details.OpActivation"]], "opdetails (class in neural_compressor.ux.components.diagnosis.op_details)": [[392, "neural_compressor.ux.components.diagnosis.op_details.OpDetails"]], "oppattern (class in neural_compressor.ux.components.diagnosis.op_details)": [[392, "neural_compressor.ux.components.diagnosis.op_details.OpPattern"]], "opweights (class in neural_compressor.ux.components.diagnosis.op_details)": [[392, "neural_compressor.ux.components.diagnosis.op_details.OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details": [[392, "module-neural_compressor.ux.components.diagnosis.op_details"]], "serialize() (neural_compressor.ux.components.diagnosis.op_details.opdetails method)": [[392, "neural_compressor.ux.components.diagnosis.op_details.OpDetails.serialize"]], "opentry (class in neural_compressor.ux.components.diagnosis.op_entry)": [[393, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry": [[393, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "serialize() (neural_compressor.ux.components.diagnosis.op_entry.opentry method)": [[393, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry.serialize"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[394, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "tensorflowdiagnosis (class in neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis)": [[395, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis"]], "model (neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.tensorflowdiagnosis property)": [[395, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis.model"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[395, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "create_dir_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[396, "neural_compressor.ux.components.file_browser.file_browser.create_dir_entry"]], "create_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[396, "neural_compressor.ux.components.file_browser.file_browser.create_entry"]], "create_file_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[396, "neural_compressor.ux.components.file_browser.file_browser.create_file_entry"]], "filter_requested_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[396, "neural_compressor.ux.components.file_browser.file_browser.filter_requested_entries"]], "get_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[396, "neural_compressor.ux.components.file_browser.file_browser.get_directory_entries"]], "get_filter_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[396, "neural_compressor.ux.components.file_browser.file_browser.get_filter_value"]], "get_non_hidden_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[396, "neural_compressor.ux.components.file_browser.file_browser.get_non_hidden_directory_entries"]], "get_requested_path() (in module neural_compressor.ux.components.file_browser.file_browser)": [[396, "neural_compressor.ux.components.file_browser.file_browser.get_requested_path"]], "get_setting_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[396, "neural_compressor.ux.components.file_browser.file_browser.get_setting_value"]], "is_dataset_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[396, "neural_compressor.ux.components.file_browser.file_browser.is_dataset_or_directory_entry"]], "is_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[396, "neural_compressor.ux.components.file_browser.file_browser.is_directory_entry"]], "is_model_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[396, "neural_compressor.ux.components.file_browser.file_browser.is_model_or_directory_entry"]], "neural_compressor.ux.components.file_browser.file_browser": [[396, "module-neural_compressor.ux.components.file_browser.file_browser"]], "should_show_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[396, "neural_compressor.ux.components.file_browser.file_browser.should_show_files"]], "should_show_only_model_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[396, "neural_compressor.ux.components.file_browser.file_browser.should_show_only_model_files"]], "sort_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[396, "neural_compressor.ux.components.file_browser.file_browser.sort_entries"]], "neural_compressor.ux.components.file_browser": [[397, "module-neural_compressor.ux.components.file_browser"]], "attribute (class in neural_compressor.ux.components.graph.attribute)": [[398, "neural_compressor.ux.components.graph.attribute.Attribute"]], "neural_compressor.ux.components.graph.attribute": [[398, "module-neural_compressor.ux.components.graph.attribute"]], "collapser (class in neural_compressor.ux.components.graph.collapser)": [[399, "neural_compressor.ux.components.graph.collapser.Collapser"]], "collapse() (neural_compressor.ux.components.graph.collapser.collapser method)": [[399, "neural_compressor.ux.components.graph.collapser.Collapser.collapse"]], "neural_compressor.ux.components.graph.collapser": [[399, "module-neural_compressor.ux.components.graph.collapser"]], "edge (class in neural_compressor.ux.components.graph.edge)": [[400, "neural_compressor.ux.components.graph.edge.Edge"]], "neural_compressor.ux.components.graph.edge": [[400, "module-neural_compressor.ux.components.graph.edge"]], "source (neural_compressor.ux.components.graph.edge.edge property)": [[400, "neural_compressor.ux.components.graph.edge.Edge.source"]], "target (neural_compressor.ux.components.graph.edge.edge property)": [[400, "neural_compressor.ux.components.graph.edge.Edge.target"]], "graph (class in neural_compressor.ux.components.graph.graph)": [[401, "neural_compressor.ux.components.graph.graph.Graph"]], "add_edge() (neural_compressor.ux.components.graph.graph.graph method)": [[401, "neural_compressor.ux.components.graph.graph.Graph.add_edge"]], "add_node() (neural_compressor.ux.components.graph.graph.graph method)": [[401, "neural_compressor.ux.components.graph.graph.Graph.add_node"]], "edges (neural_compressor.ux.components.graph.graph.graph property)": [[401, "neural_compressor.ux.components.graph.graph.Graph.edges"]], "get_node() (neural_compressor.ux.components.graph.graph.graph method)": [[401, "neural_compressor.ux.components.graph.graph.Graph.get_node"]], "get_target_nodes() (neural_compressor.ux.components.graph.graph.graph method)": [[401, "neural_compressor.ux.components.graph.graph.Graph.get_target_nodes"]], "highlight_pattern() (neural_compressor.ux.components.graph.graph.graph method)": [[401, "neural_compressor.ux.components.graph.graph.Graph.highlight_pattern"]], "neural_compressor.ux.components.graph.graph": [[401, "module-neural_compressor.ux.components.graph.graph"]], "nodes (neural_compressor.ux.components.graph.graph.graph property)": [[401, "neural_compressor.ux.components.graph.graph.Graph.nodes"]], "graphreader (class in neural_compressor.ux.components.graph.graph_reader)": [[402, "neural_compressor.ux.components.graph.graph_reader.GraphReader"]], "find_pattern_in_graph() (neural_compressor.ux.components.graph.graph_reader.graphreader method)": [[402, "neural_compressor.ux.components.graph.graph_reader.GraphReader.find_pattern_in_graph"]], "neural_compressor.ux.components.graph.graph_reader": [[402, "module-neural_compressor.ux.components.graph.graph_reader"]], "read() (neural_compressor.ux.components.graph.graph_reader.graphreader method)": [[402, "neural_compressor.ux.components.graph.graph_reader.GraphReader.read"]], "neural_compressor.ux.components.graph": [[403, "module-neural_compressor.ux.components.graph"]], "groupnode (class in neural_compressor.ux.components.graph.node)": [[404, "neural_compressor.ux.components.graph.node.GroupNode"]], "node (class in neural_compressor.ux.components.graph.node)": [[404, "neural_compressor.ux.components.graph.node.Node"]], "neural_compressor.ux.components.graph.node": [[404, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[405, "module-neural_compressor.ux.components.graph.reader"]], "onnxrtreader (class in neural_compressor.ux.components.graph.reader.onnxrt_reader)": [[406, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[406, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "read() (neural_compressor.ux.components.graph.reader.onnxrt_reader.onnxrtreader method)": [[406, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader.read"]], "tensorflowreader (class in neural_compressor.ux.components.graph.reader.tensorflow_reader)": [[407, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[407, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "read() (neural_compressor.ux.components.graph.reader.tensorflow_reader.tensorflowreader method)": [[407, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader.read"]], "neural_compressor.ux.components": [[408, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[409, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[410, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[411, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[412, "module-neural_compressor.ux.components.jobs_management.request"]], "get_default_path() (in module neural_compressor.ux.components.manage_workspace)": [[413, "neural_compressor.ux.components.manage_workspace.get_default_path"]], "neural_compressor.ux.components.manage_workspace": [[413, "module-neural_compressor.ux.components.manage_workspace"]], "domain (class in neural_compressor.ux.components.model.domain)": [[414, "neural_compressor.ux.components.model.domain.Domain"]], "neural_compressor.ux.components.model.domain": [[414, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[415, "module-neural_compressor.ux.components.model"]], "model (class in neural_compressor.ux.components.model.model)": [[416, "neural_compressor.ux.components.model.model.Model"]], "domain (neural_compressor.ux.components.model.model.model property)": [[416, "neural_compressor.ux.components.model.model.Model.domain"]], "ensure_supported_path() (neural_compressor.ux.components.model.model.model method)": [[416, "neural_compressor.ux.components.model.model.Model.ensure_supported_path"]], "get_framework_name() (neural_compressor.ux.components.model.model.model static method)": [[416, "neural_compressor.ux.components.model.model.Model.get_framework_name"]], "get_input_nodes() (neural_compressor.ux.components.model.model.model method)": [[416, "neural_compressor.ux.components.model.model.Model.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.model.model method)": [[416, "neural_compressor.ux.components.model.model.Model.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.model.model method)": [[416, "neural_compressor.ux.components.model.model.Model.get_output_nodes"]], "get_tensors_info() (neural_compressor.ux.components.model.model.model method)": [[416, "neural_compressor.ux.components.model.model.Model.get_tensors_info"]], "guard_requirements_installed() (neural_compressor.ux.components.model.model.model method)": [[416, "neural_compressor.ux.components.model.model.Model.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.model.model property)": [[416, "neural_compressor.ux.components.model.model.Model.input_shape"]], "neural_compressor.ux.components.model.model": [[416, "module-neural_compressor.ux.components.model.model"]], "shape_elements_order (neural_compressor.ux.components.model.model.model property)": [[416, "neural_compressor.ux.components.model.model.Model.shape_elements_order"]], "supports_graph (neural_compressor.ux.components.model.model.model property)": [[416, "neural_compressor.ux.components.model.model.Model.supports_graph"]], "supports_path() (neural_compressor.ux.components.model.model.model static method)": [[416, "neural_compressor.ux.components.model.model.Model.supports_path"]], "supports_profiling (neural_compressor.ux.components.model.model.model property)": [[416, "neural_compressor.ux.components.model.model.Model.supports_profiling"]], "supports_pruning (neural_compressor.ux.components.model.model.model property)": [[416, "neural_compressor.ux.components.model.model.Model.supports_pruning"]], "get_model_type() (in module neural_compressor.ux.components.model.model_type_getter)": [[417, "neural_compressor.ux.components.model.model_type_getter.get_model_type"]], "neural_compressor.ux.components.model.model_type_getter": [[417, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[418, "module-neural_compressor.ux.components.model.onnxrt"]], "onnxrtmodel (class in neural_compressor.ux.components.model.onnxrt.model)": [[419, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel"]], "domain (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[419, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.domain"]], "filtered_input_nodes (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[419, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.filtered_input_nodes"]], "get_framework_name() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel static method)": [[419, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.get_framework_name"]], "get_model_graph() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel method)": [[419, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.get_model_graph"]], "guard_requirements_installed() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel method)": [[419, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[419, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.input_shape"]], "nc_model_instance (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[419, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.nc_model_instance"]], "neural_compressor.ux.components.model.onnxrt.model": [[419, "module-neural_compressor.ux.components.model.onnxrt.model"]], "remove_number_of_samples_from_shape() (in module neural_compressor.ux.components.model.onnxrt.model)": [[419, "neural_compressor.ux.components.model.onnxrt.model.remove_number_of_samples_from_shape"]], "shape_elements_order (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[419, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.shape_elements_order"]], "supports_path() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel static method)": [[419, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.supports_path"]], "neural_compressor.ux.components.model.pytorch": [[420, "module-neural_compressor.ux.components.model.pytorch"]], "pytorchscriptmodel (class in neural_compressor.ux.components.model.pytorch.model)": [[421, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel"]], "get_framework_name() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel static method)": [[421, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.get_framework_name"]], "guard_requirements_installed() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel method)": [[421, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.guard_requirements_installed"]], "neural_compressor.ux.components.model.pytorch.model": [[421, "module-neural_compressor.ux.components.model.pytorch.model"]], "supports_path() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel static method)": [[421, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.supports_path"]], "modelrepository (class in neural_compressor.ux.components.model.repository)": [[422, "neural_compressor.ux.components.model.repository.ModelRepository"]], "get_framework_from_path() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[422, "neural_compressor.ux.components.model.repository.ModelRepository.get_framework_from_path"]], "get_frameworks() (neural_compressor.ux.components.model.repository.modelrepository method)": [[422, "neural_compressor.ux.components.model.repository.ModelRepository.get_frameworks"]], "get_model() (neural_compressor.ux.components.model.repository.modelrepository method)": [[422, "neural_compressor.ux.components.model.repository.ModelRepository.get_model"]], "get_supported_frameworks() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[422, "neural_compressor.ux.components.model.repository.ModelRepository.get_supported_frameworks"]], "is_model_path() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[422, "neural_compressor.ux.components.model.repository.ModelRepository.is_model_path"]], "neural_compressor.ux.components.model.repository": [[422, "module-neural_compressor.ux.components.model.repository"]], "shape (class in neural_compressor.ux.components.model.shape)": [[423, "neural_compressor.ux.components.model.shape.Shape"]], "neural_compressor.ux.components.model.shape": [[423, "module-neural_compressor.ux.components.model.shape"]], "serialize() (neural_compressor.ux.components.model.shape.shape method)": [[423, "neural_compressor.ux.components.model.shape.Shape.serialize"]], "frozenpbmodel (class in neural_compressor.ux.components.model.tensorflow.frozen_pb)": [[424, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[424, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.frozen_pb.frozenpbmodel static method)": [[424, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel.supports_path"]], "supports_profiling (neural_compressor.ux.components.model.tensorflow.frozen_pb.frozenpbmodel property)": [[424, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel.supports_profiling"]], "neural_compressor.ux.components.model.tensorflow": [[425, "module-neural_compressor.ux.components.model.tensorflow"]], "kerasmodel (class in neural_compressor.ux.components.model.tensorflow.keras)": [[426, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel method)": [[426, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.get_input_nodes"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel method)": [[426, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.get_output_nodes"]], "neural_compressor.ux.components.model.tensorflow.keras": [[426, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel static method)": [[426, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.supports_path"]], "metagraphmodel (class in neural_compressor.ux.components.model.tensorflow.meta_graph)": [[427, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[427, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[427, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[427, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_output_nodes"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[427, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel static method)": [[427, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.supports_path"]], "tensorflowmodel (class in neural_compressor.ux.components.model.tensorflow.model)": [[428, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel"]], "get_framework_name() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel static method)": [[428, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_framework_name"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[428, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[428, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[428, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_output_nodes"]], "guard_requirements_installed() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[428, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[428, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.input_shape"]], "nc_model_instance (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[428, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.nc_model_instance"]], "neural_compressor.ux.components.model.tensorflow.model": [[428, "module-neural_compressor.ux.components.model.tensorflow.model"]], "shape_elements_order (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[428, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.shape_elements_order"]], "supports_pruning (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[428, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.supports_pruning"]], "savedmodelmodel (class in neural_compressor.ux.components.model.tensorflow.saved_model)": [[429, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[429, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.saved_model.savedmodelmodel static method)": [[429, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel.supports_path"]], "get_input_shape() (in module neural_compressor.ux.components.model.tensorflow.utils)": [[430, "neural_compressor.ux.components.model.tensorflow.utils.get_input_shape"]], "neural_compressor.ux.components.model.tensorflow.utils": [[430, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "download_config() (in module neural_compressor.ux.components.model_zoo.download_config)": [[431, "neural_compressor.ux.components.model_zoo.download_config.download_config"]], "neural_compressor.ux.components.model_zoo.download_config": [[431, "module-neural_compressor.ux.components.model_zoo.download_config"]], "download_model() (in module neural_compressor.ux.components.model_zoo.download_model)": [[432, "neural_compressor.ux.components.model_zoo.download_model.download_model"]], "neural_compressor.ux.components.model_zoo.download_model": [[432, "module-neural_compressor.ux.components.model_zoo.download_model"]], "downloader (class in neural_compressor.ux.components.model_zoo.downloader)": [[433, "neural_compressor.ux.components.model_zoo.downloader.Downloader"]], "download() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[433, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download"]], "download_config() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[433, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_config"]], "download_file() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[433, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_file"]], "download_model() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[433, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_model"]], "download_yaml_config() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[433, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_yaml_config"]], "get_yaml_url() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[433, "neural_compressor.ux.components.model_zoo.downloader.Downloader.get_yaml_url"]], "neural_compressor.ux.components.model_zoo.downloader": [[433, "module-neural_compressor.ux.components.model_zoo.downloader"]], "unpack_archive() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[433, "neural_compressor.ux.components.model_zoo.downloader.Downloader.unpack_archive"]], "neural_compressor.ux.components.model_zoo": [[434, "module-neural_compressor.ux.components.model_zoo"]], "check_version() (in module neural_compressor.ux.components.model_zoo.list_models)": [[435, "neural_compressor.ux.components.model_zoo.list_models.check_version"]], "get_available_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[435, "neural_compressor.ux.components.model_zoo.list_models.get_available_models"]], "get_framework_module_name() (in module neural_compressor.ux.components.model_zoo.list_models)": [[435, "neural_compressor.ux.components.model_zoo.list_models.get_framework_module_name"]], "get_installed_frameworks() (in module neural_compressor.ux.components.model_zoo.list_models)": [[435, "neural_compressor.ux.components.model_zoo.list_models.get_installed_frameworks"]], "list_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[435, "neural_compressor.ux.components.model_zoo.list_models.list_models"]], "neural_compressor.ux.components.model_zoo.list_models": [[435, "module-neural_compressor.ux.components.model_zoo.list_models"]], "validate_model_list() (in module neural_compressor.ux.components.model_zoo.list_models)": [[435, "neural_compressor.ux.components.model_zoo.list_models.validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[436, "module-neural_compressor.ux.components.names_mapper"]], "mappingdirection (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[437, "neural_compressor.ux.components.names_mapper.names_mapper.MappingDirection"]], "namesmapper (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[437, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper"]], "domain_flavour_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[437, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.domain_flavour_mappings"]], "domain_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[437, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.domain_mappings"]], "framework_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[437, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.framework_mappings"]], "map_name() (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper method)": [[437, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.map_name"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[437, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "precision_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[437, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.precision_mappings"]], "check_if_collect_tuning_history() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[438, "neural_compressor.ux.components.optimization.execute_optimization.check_if_collect_tuning_history"]], "execute_optimization() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[438, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization"]], "execute_optimization_pytorch_script() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[438, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_pytorch_script"]], "execute_optimization_regular() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[438, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_regular"]], "neural_compressor.ux.components.optimization.execute_optimization": [[438, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "parse_logs() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[438, "neural_compressor.ux.components.optimization.execute_optimization.parse_logs"]], "parse_model_data_to_bench_names() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[438, "neural_compressor.ux.components.optimization.execute_optimization.parse_model_data_to_bench_names"]], "optimizationfactory (class in neural_compressor.ux.components.optimization.factory)": [[439, "neural_compressor.ux.components.optimization.factory.OptimizationFactory"]], "get_optimization() (neural_compressor.ux.components.optimization.factory.optimizationfactory static method)": [[439, "neural_compressor.ux.components.optimization.factory.OptimizationFactory.get_optimization"]], "neural_compressor.ux.components.optimization.factory": [[439, "module-neural_compressor.ux.components.optimization.factory"]], "graphoptimization (class in neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization)": [[440, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization"]], "configuration_data (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[440, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization method)": [[440, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.execute"]], "generate_config() (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization method)": [[440, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.generate_config"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[440, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "optimization_script (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[440, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[440, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.parameters"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[441, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[442, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[442, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[442, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[442, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[442, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.set_eager_execution"]], "optimizations (class in neural_compressor.ux.components.optimization)": [[443, "neural_compressor.ux.components.optimization.Optimizations"]], "neural_compressor.ux.components.optimization": [[443, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[444, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "mixedprecision (class in neural_compressor.ux.components.optimization.mixed_precision.mixed_precision)": [[445, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision"]], "configuration_data (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[445, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision method)": [[445, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.execute"]], "generate_config() (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision method)": [[445, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.generate_config"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[445, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "optimization_script (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[445, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[445, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.parameters"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[446, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[446, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[446, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[446, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[446, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[447, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[448, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "optimize_pt_script() (in module neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model)": [[448, "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model.optimize_pt_script"]], "dataloaderinterface (class in neural_compressor.ux.components.optimization.optimization)": [[449, "neural_compressor.ux.components.optimization.optimization.DataloaderInterface"]], "optimization (class in neural_compressor.ux.components.optimization.optimization)": [[449, "neural_compressor.ux.components.optimization.optimization.Optimization"]], "optimizationinterface (class in neural_compressor.ux.components.optimization.optimization)": [[449, "neural_compressor.ux.components.optimization.optimization.OptimizationInterface"]], "command (neural_compressor.ux.components.optimization.optimization.optimization property)": [[449, "neural_compressor.ux.components.optimization.optimization.Optimization.command"]], "config_filename (neural_compressor.ux.components.optimization.optimization.optimization property)": [[449, "neural_compressor.ux.components.optimization.optimization.Optimization.config_filename"]], "configuration_data (neural_compressor.ux.components.optimization.optimization.optimization property)": [[449, "neural_compressor.ux.components.optimization.optimization.Optimization.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.optimization.optimization method)": [[449, "neural_compressor.ux.components.optimization.optimization.Optimization.execute"]], "generate_config() (neural_compressor.ux.components.optimization.optimization.optimization method)": [[449, "neural_compressor.ux.components.optimization.optimization.Optimization.generate_config"]], "neural_compressor.ux.components.optimization.optimization": [[449, "module-neural_compressor.ux.components.optimization.optimization"]], "optimization_script (neural_compressor.ux.components.optimization.optimization.optimization property)": [[449, "neural_compressor.ux.components.optimization.optimization.Optimization.optimization_script"]], "output_model_dir (neural_compressor.ux.components.optimization.optimization.optimization property)": [[449, "neural_compressor.ux.components.optimization.optimization.Optimization.output_model_dir"]], "output_model_name (neural_compressor.ux.components.optimization.optimization.optimization property)": [[449, "neural_compressor.ux.components.optimization.optimization.Optimization.output_model_name"]], "parameters (neural_compressor.ux.components.optimization.optimization.optimization property)": [[449, "neural_compressor.ux.components.optimization.optimization.Optimization.parameters"]], "workdir (neural_compressor.ux.components.optimization.optimization.optimization property)": [[449, "neural_compressor.ux.components.optimization.optimization.Optimization.workdir"]], "neural_compressor.ux.components.optimization.pruning": [[450, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[451, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "optimize_model() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[451, "neural_compressor.ux.components.optimization.pruning.optimize_model.optimize_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[451, "neural_compressor.ux.components.optimization.pruning.optimize_model.parse_args"]], "pruning (class in neural_compressor.ux.components.optimization.pruning.pruning)": [[452, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning"]], "configuration_data (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[452, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.pruning.pruning.pruning method)": [[452, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.execute"]], "generate_config() (neural_compressor.ux.components.optimization.pruning.pruning.pruning method)": [[452, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.generate_config"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[452, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "optimization_script (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[452, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[452, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.parameters"]], "neural_compressor.ux.components.optimization.tune": [[453, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[454, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[454, "neural_compressor.ux.components.optimization.tune.tune_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[454, "neural_compressor.ux.components.optimization.tune.tune_model.set_eager_execution"]], "tune_model() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[454, "neural_compressor.ux.components.optimization.tune.tune_model.tune_model"]], "accuracycriterion (class in neural_compressor.ux.components.optimization.tune.tuning)": [[455, "neural_compressor.ux.components.optimization.tune.tuning.AccuracyCriterion"]], "tuning (class in neural_compressor.ux.components.optimization.tune.tuning)": [[455, "neural_compressor.ux.components.optimization.tune.tuning.Tuning"]], "tuningdetails (class in neural_compressor.ux.components.optimization.tune.tuning)": [[455, "neural_compressor.ux.components.optimization.tune.tuning.TuningDetails"]], "configuration_data (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[455, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.tune.tuning.tuning method)": [[455, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.execute"]], "generate_config() (neural_compressor.ux.components.optimization.tune.tuning.tuning method)": [[455, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.generate_config"]], "neural_compressor.ux.components.optimization.tune.tuning": [[455, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "optimization_script (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[455, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[455, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.parameters"]], "tuninghistory (class in neural_compressor.ux.components.optimization.tuning_history)": [[456, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory"]], "watcher (class in neural_compressor.ux.components.optimization.tuning_history)": [[456, "neural_compressor.ux.components.optimization.tuning_history.Watcher"]], "history_file_modification_time() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[456, "neural_compressor.ux.components.optimization.tuning_history.Watcher.history_file_modification_time"]], "neural_compressor.ux.components.optimization.tuning_history": [[456, "module-neural_compressor.ux.components.optimization.tuning_history"]], "send_history_snapshot() (neural_compressor.ux.components.optimization.tuning_history.tuninghistory static method)": [[456, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory.send_history_snapshot"]], "stop() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[456, "neural_compressor.ux.components.optimization.tuning_history.Watcher.stop"]], "tuning_history() (in module neural_compressor.ux.components.optimization.tuning_history)": [[456, "neural_compressor.ux.components.optimization.tuning_history.tuning_history"]], "tuning_history_path() (in module neural_compressor.ux.components.optimization.tuning_history)": [[456, "neural_compressor.ux.components.optimization.tuning_history.tuning_history_path"]], "was_history_file_changed() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[456, "neural_compressor.ux.components.optimization.tuning_history.Watcher.was_history_file_changed"]], "execute_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[457, "neural_compressor.ux.components.profiling.execute_profiling.execute_profiling"]], "execute_real_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[457, "neural_compressor.ux.components.profiling.execute_profiling.execute_real_profiling"]], "neural_compressor.ux.components.profiling.execute_profiling": [[457, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "profilerfactory (class in neural_compressor.ux.components.profiling.factory)": [[458, "neural_compressor.ux.components.profiling.factory.ProfilerFactory"]], "get_profiler() (neural_compressor.ux.components.profiling.factory.profilerfactory static method)": [[458, "neural_compressor.ux.components.profiling.factory.ProfilerFactory.get_profiler"]], "neural_compressor.ux.components.profiling.factory": [[458, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[459, "module-neural_compressor.ux.components.profiling"]], "load_profiling_details() (in module neural_compressor.ux.components.profiling.profile_model)": [[460, "neural_compressor.ux.components.profiling.profile_model.load_profiling_details"]], "neural_compressor.ux.components.profiling.profile_model": [[460, "module-neural_compressor.ux.components.profiling.profile_model"]], "parse_args() (in module neural_compressor.ux.components.profiling.profile_model)": [[460, "neural_compressor.ux.components.profiling.profile_model.parse_args"]], "profiler (class in neural_compressor.ux.components.profiling.profiler)": [[461, "neural_compressor.ux.components.profiling.profiler.Profiler"]], "neural_compressor.ux.components.profiling.profiler": [[461, "module-neural_compressor.ux.components.profiling.profiler"]], "profile_model() (neural_compressor.ux.components.profiling.profiler.profiler method)": [[461, "neural_compressor.ux.components.profiling.profiler.Profiler.profile_model"]], "dataloaderinterface (class in neural_compressor.ux.components.profiling.profiling)": [[462, "neural_compressor.ux.components.profiling.profiling.DataloaderInterface"]], "profiling (class in neural_compressor.ux.components.profiling.profiling)": [[462, "neural_compressor.ux.components.profiling.profiling.Profiling"]], "config_filename (neural_compressor.ux.components.profiling.profiling.profiling property)": [[462, "neural_compressor.ux.components.profiling.profiling.Profiling.config_filename"]], "config_path (neural_compressor.ux.components.profiling.profiling.profiling property)": [[462, "neural_compressor.ux.components.profiling.profiling.Profiling.config_path"]], "execute() (neural_compressor.ux.components.profiling.profiling.profiling method)": [[462, "neural_compressor.ux.components.profiling.profiling.Profiling.execute"]], "generate_config() (neural_compressor.ux.components.profiling.profiling.profiling method)": [[462, "neural_compressor.ux.components.profiling.profiling.Profiling.generate_config"]], "neural_compressor.ux.components.profiling.profiling": [[462, "module-neural_compressor.ux.components.profiling.profiling"]], "profiling_data (neural_compressor.ux.components.profiling.profiling.profiling property)": [[462, "neural_compressor.ux.components.profiling.profiling.Profiling.profiling_data"]], "workdir (neural_compressor.ux.components.profiling.profiling.profiling property)": [[462, "neural_compressor.ux.components.profiling.profiling.Profiling.workdir"]], "profilerfactory (class in neural_compressor.ux.components.profiling.tensorflow_profiler.factory)": [[463, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory"]], "get_profiler() (neural_compressor.ux.components.profiling.tensorflow_profiler.factory.profilerfactory static method)": [[463, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory.get_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[463, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[464, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "profiler (class in neural_compressor.ux.components.profiling.tensorflow_profiler.profiler)": [[465, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler"]], "build_dataloader() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[465, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.build_dataloader"]], "convert_nodes_to_list() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler static method)": [[465, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.convert_nodes_to_list"]], "create_tf_config() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[465, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.create_tf_config"]], "get_node_by_name() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler static method)": [[465, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.get_node_by_name"]], "initialize_graph() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[465, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.initialize_graph"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[465, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "profile_model() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[465, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.profile_model"]], "delete_assign() (in module neural_compressor.ux.components.profiling.tensorflow_profiler.utils)": [[466, "neural_compressor.ux.components.profiling.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[466, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "main() (in module neural_compressor.ux.inc_bench)": [[467, "neural_compressor.ux.inc_bench.main"]], "neural_compressor.ux.inc_bench": [[467, "module-neural_compressor.ux.inc_bench"]], "prepare_environment() (in module neural_compressor.ux.inc_bench)": [[467, "neural_compressor.ux.inc_bench.prepare_environment"]], "neural_compressor.ux": [[468, "module-neural_compressor.ux"]], "domainflavours (class in neural_compressor.ux.utils.consts)": [[469, "neural_compressor.ux.utils.consts.DomainFlavours"]], "domains (class in neural_compressor.ux.utils.consts)": [[469, "neural_compressor.ux.utils.consts.Domains"]], "executionstatus (class in neural_compressor.ux.utils.consts)": [[469, "neural_compressor.ux.utils.consts.ExecutionStatus"]], "frameworks (class in neural_compressor.ux.utils.consts)": [[469, "neural_compressor.ux.utils.consts.Frameworks"]], "optimizationtypes (class in neural_compressor.ux.utils.consts)": [[469, "neural_compressor.ux.utils.consts.OptimizationTypes"]], "precisions (class in neural_compressor.ux.utils.consts)": [[469, "neural_compressor.ux.utils.consts.Precisions"]], "strategies (class in neural_compressor.ux.utils.consts)": [[469, "neural_compressor.ux.utils.consts.Strategies"]], "neural_compressor.ux.utils.consts": [[469, "module-neural_compressor.ux.utils.consts"]], "environment (class in neural_compressor.ux.utils.environment)": [[470, "neural_compressor.ux.utils.environment.Environment"]], "clean_workloads_wip_status() (neural_compressor.ux.utils.environment.environment static method)": [[470, "neural_compressor.ux.utils.environment.Environment.clean_workloads_wip_status"]], "ensure_workdir_exists_and_writeable() (neural_compressor.ux.utils.environment.environment static method)": [[470, "neural_compressor.ux.utils.environment.Environment.ensure_workdir_exists_and_writeable"]], "migrate_database() (neural_compressor.ux.utils.environment.environment static method)": [[470, "neural_compressor.ux.utils.environment.Environment.migrate_database"]], "neural_compressor.ux.utils.environment": [[470, "module-neural_compressor.ux.utils.environment"]], "accessdeniedexception": [[471, "neural_compressor.ux.utils.exceptions.AccessDeniedException"]], "clienterrorexception": [[471, "neural_compressor.ux.utils.exceptions.ClientErrorException"]], "internalexception": [[471, "neural_compressor.ux.utils.exceptions.InternalException"]], "notfoundexception": [[471, "neural_compressor.ux.utils.exceptions.NotFoundException"]], "neural_compressor.ux.utils.exceptions": [[471, "module-neural_compressor.ux.utils.exceptions"]], "executor (class in neural_compressor.ux.utils.executor)": [[472, "neural_compressor.ux.utils.executor.Executor"]], "additional_log_names (neural_compressor.ux.utils.executor.executor property)": [[472, "neural_compressor.ux.utils.executor.Executor.additional_log_names"]], "call() (neural_compressor.ux.utils.executor.executor method)": [[472, "neural_compressor.ux.utils.executor.Executor.call"]], "call_one() (neural_compressor.ux.utils.executor.executor method)": [[472, "neural_compressor.ux.utils.executor.Executor.call_one"]], "is_multi_commands() (neural_compressor.ux.utils.executor.executor static method)": [[472, "neural_compressor.ux.utils.executor.Executor.is_multi_commands"]], "log_name (neural_compressor.ux.utils.executor.executor property)": [[472, "neural_compressor.ux.utils.executor.Executor.log_name"]], "neural_compressor.ux.utils.executor": [[472, "module-neural_compressor.ux.utils.executor"]], "process_duration (neural_compressor.ux.utils.executor.executor property)": [[472, "neural_compressor.ux.utils.executor.Executor.process_duration"]], "refresh_workdir() (neural_compressor.ux.utils.executor.executor method)": [[472, "neural_compressor.ux.utils.executor.Executor.refresh_workdir"]], "request_id (neural_compressor.ux.utils.executor.executor property)": [[472, "neural_compressor.ux.utils.executor.Executor.request_id"]], "workdir (neural_compressor.ux.utils.executor.executor property)": [[472, "neural_compressor.ux.utils.executor.Executor.workdir"]], "expiringdict (class in neural_compressor.ux.utils.expiring_dict)": [[473, "neural_compressor.ux.utils.expiring_dict.ExpiringDict"]], "expiringdictitem (class in neural_compressor.ux.utils.expiring_dict)": [[473, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem"]], "is_expired() (neural_compressor.ux.utils.expiring_dict.expiringdictitem method)": [[473, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem.is_expired"]], "neural_compressor.ux.utils.expiring_dict": [[473, "module-neural_compressor.ux.utils.expiring_dict"]], "githubinfo (class in neural_compressor.ux.utils.github_info)": [[474, "neural_compressor.ux.utils.github_info.GithubInfo"]], "neural_compressor.ux.utils.github_info": [[474, "module-neural_compressor.ux.utils.github_info"]], "tag() (neural_compressor.ux.utils.github_info.githubinfo class method)": [[474, "neural_compressor.ux.utils.github_info.GithubInfo.tag"]], "hwinfo (class in neural_compressor.ux.utils.hw_info)": [[475, "neural_compressor.ux.utils.hw_info.HWInfo"]], "get_bios_version() (in module neural_compressor.ux.utils.hw_info)": [[475, "neural_compressor.ux.utils.hw_info.get_bios_version"]], "get_distribution() (in module neural_compressor.ux.utils.hw_info)": [[475, "neural_compressor.ux.utils.hw_info.get_distribution"]], "get_framework_dependency_info() (in module neural_compressor.ux.utils.hw_info)": [[475, "neural_compressor.ux.utils.hw_info.get_framework_dependency_info"]], "get_framework_info() (in module neural_compressor.ux.utils.hw_info)": [[475, "neural_compressor.ux.utils.hw_info.get_framework_info"]], "get_kernel_version() (in module neural_compressor.ux.utils.hw_info)": [[475, "neural_compressor.ux.utils.hw_info.get_kernel_version"]], "get_number_of_sockets() (in module neural_compressor.ux.utils.hw_info)": [[475, "neural_compressor.ux.utils.hw_info.get_number_of_sockets"]], "initialize() (neural_compressor.ux.utils.hw_info.hwinfo method)": [[475, "neural_compressor.ux.utils.hw_info.HWInfo.initialize"]], "is_turbo_boost_enabled() (in module neural_compressor.ux.utils.hw_info)": [[475, "neural_compressor.ux.utils.hw_info.is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info": [[475, "module-neural_compressor.ux.utils.hw_info"]], "serialize() (neural_compressor.ux.utils.hw_info.hwinfo method)": [[475, "neural_compressor.ux.utils.hw_info.HWInfo.serialize"]], "neural_compressor.ux.utils": [[476, "module-neural_compressor.ux.utils"]], "jsonserializer (class in neural_compressor.ux.utils.json_serializer)": [[477, "neural_compressor.ux.utils.json_serializer.JsonSerializer"]], "neural_compressor.ux.utils.json_serializer": [[477, "module-neural_compressor.ux.utils.json_serializer"]], "serialize() (neural_compressor.ux.utils.json_serializer.jsonserializer method)": [[477, "neural_compressor.ux.utils.json_serializer.JsonSerializer.serialize"]], "serialize_item() (neural_compressor.ux.utils.json_serializer.jsonserializer static method)": [[477, "neural_compressor.ux.utils.json_serializer.JsonSerializer.serialize_item"]], "change_log_level() (in module neural_compressor.ux.utils.logger)": [[478, "neural_compressor.ux.utils.logger.change_log_level"]], "neural_compressor.ux.utils.logger": [[478, "module-neural_compressor.ux.utils.logger"]], "accuracyparser (class in neural_compressor.ux.utils.parser)": [[479, "neural_compressor.ux.utils.parser.AccuracyParser"]], "benchmarkparserfactory (class in neural_compressor.ux.utils.parser)": [[479, "neural_compressor.ux.utils.parser.BenchmarkParserFactory"]], "optimizationparser (class in neural_compressor.ux.utils.parser)": [[479, "neural_compressor.ux.utils.parser.OptimizationParser"]], "parser (class in neural_compressor.ux.utils.parser)": [[479, "neural_compressor.ux.utils.parser.Parser"]], "performanceparser (class in neural_compressor.ux.utils.parser)": [[479, "neural_compressor.ux.utils.parser.PerformanceParser"]], "profilingparser (class in neural_compressor.ux.utils.parser)": [[479, "neural_compressor.ux.utils.parser.ProfilingParser"]], "get_parser() (neural_compressor.ux.utils.parser.benchmarkparserfactory static method)": [[479, "neural_compressor.ux.utils.parser.BenchmarkParserFactory.get_parser"]], "neural_compressor.ux.utils.parser": [[479, "module-neural_compressor.ux.utils.parser"]], "patterns (neural_compressor.ux.utils.parser.accuracyparser property)": [[479, "neural_compressor.ux.utils.parser.AccuracyParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.optimizationparser property)": [[479, "neural_compressor.ux.utils.parser.OptimizationParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.parser property)": [[479, "neural_compressor.ux.utils.parser.Parser.patterns"]], "patterns (neural_compressor.ux.utils.parser.performanceparser property)": [[479, "neural_compressor.ux.utils.parser.PerformanceParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.profilingparser property)": [[479, "neural_compressor.ux.utils.parser.ProfilingParser.patterns"]], "process() (neural_compressor.ux.utils.parser.accuracyparser method)": [[479, "neural_compressor.ux.utils.parser.AccuracyParser.process"]], "process() (neural_compressor.ux.utils.parser.optimizationparser method)": [[479, "neural_compressor.ux.utils.parser.OptimizationParser.process"]], "process() (neural_compressor.ux.utils.parser.parser method)": [[479, "neural_compressor.ux.utils.parser.Parser.process"]], "process() (neural_compressor.ux.utils.parser.performanceparser method)": [[479, "neural_compressor.ux.utils.parser.PerformanceParser.process"]], "process() (neural_compressor.ux.utils.parser.profilingparser method)": [[479, "neural_compressor.ux.utils.parser.ProfilingParser.process"]], "summarize_partial() (neural_compressor.ux.utils.parser.performanceparser method)": [[479, "neural_compressor.ux.utils.parser.PerformanceParser.summarize_partial"]], "summarize_value() (neural_compressor.ux.utils.parser.performanceparser static method)": [[479, "neural_compressor.ux.utils.parser.PerformanceParser.summarize_value"]], "unify_time() (neural_compressor.ux.utils.parser.profilingparser static method)": [[479, "neural_compressor.ux.utils.parser.ProfilingParser.unify_time"]], "update_partial() (neural_compressor.ux.utils.parser.performanceparser static method)": [[479, "neural_compressor.ux.utils.parser.PerformanceParser.update_partial"]], "proc (class in neural_compressor.ux.utils.proc)": [[480, "neural_compressor.ux.utils.proc.Proc"]], "info (neural_compressor.ux.utils.proc.proc property)": [[480, "neural_compressor.ux.utils.proc.Proc.info"]], "info_path (neural_compressor.ux.utils.proc.proc property)": [[480, "neural_compressor.ux.utils.proc.Proc.info_path"]], "is_ok (neural_compressor.ux.utils.proc.proc property)": [[480, "neural_compressor.ux.utils.proc.Proc.is_ok"]], "neural_compressor.ux.utils.proc": [[480, "module-neural_compressor.ux.utils.proc"]], "output (neural_compressor.ux.utils.proc.proc property)": [[480, "neural_compressor.ux.utils.proc.Proc.output"]], "output_path (neural_compressor.ux.utils.proc.proc property)": [[480, "neural_compressor.ux.utils.proc.Proc.output_path"]], "remove_logs() (neural_compressor.ux.utils.proc.proc method)": [[480, "neural_compressor.ux.utils.proc.Proc.remove_logs"]], "run() (neural_compressor.ux.utils.proc.proc method)": [[480, "neural_compressor.ux.utils.proc.Proc.run"]], "tail (neural_compressor.ux.utils.proc.proc property)": [[480, "neural_compressor.ux.utils.proc.Proc.tail"]], "ncprocesses (class in neural_compressor.ux.utils.processes)": [[481, "neural_compressor.ux.utils.processes.NCProcesses"]], "is_ok (neural_compressor.ux.utils.processes.ncprocesses property)": [[481, "neural_compressor.ux.utils.processes.NCProcesses.is_ok"]], "neural_compressor.ux.utils.processes": [[481, "module-neural_compressor.ux.utils.processes"]], "remove_successful_logs() (neural_compressor.ux.utils.processes.ncprocesses method)": [[481, "neural_compressor.ux.utils.processes.NCProcesses.remove_successful_logs"]], "return_code_all() (neural_compressor.ux.utils.processes.ncprocesses method)": [[481, "neural_compressor.ux.utils.processes.NCProcesses.return_code_all"]], "singleton (class in neural_compressor.ux.utils.singleton)": [[482, "neural_compressor.ux.utils.singleton.Singleton"]], "neural_compressor.ux.utils.singleton": [[482, "module-neural_compressor.ux.utils.singleton"]], "get_status_update_function() (in module neural_compressor.ux.utils.status_updates)": [[483, "neural_compressor.ux.utils.status_updates.get_status_update_function"]], "neural_compressor.ux.utils.status_updates": [[483, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[484, "module-neural_compressor.ux.utils.templates"]], "metric (class in neural_compressor.ux.utils.templates.metric)": [[485, "neural_compressor.ux.utils.templates.metric.Metric"]], "acc_input_model (neural_compressor.ux.utils.templates.metric.metric property)": [[485, "neural_compressor.ux.utils.templates.metric.Metric.acc_input_model"]], "acc_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[485, "neural_compressor.ux.utils.templates.metric.Metric.acc_optimized_model"]], "accuracy (neural_compressor.ux.utils.templates.metric.metric property)": [[485, "neural_compressor.ux.utils.templates.metric.Metric.accuracy"]], "calculate_throughput() (neural_compressor.ux.utils.templates.metric.metric static method)": [[485, "neural_compressor.ux.utils.templates.metric.Metric.calculate_throughput"]], "insert_data() (neural_compressor.ux.utils.templates.metric.metric method)": [[485, "neural_compressor.ux.utils.templates.metric.Metric.insert_data"]], "latency (neural_compressor.ux.utils.templates.metric.metric property)": [[485, "neural_compressor.ux.utils.templates.metric.Metric.latency"]], "neural_compressor.ux.utils.templates.metric": [[485, "module-neural_compressor.ux.utils.templates.metric"]], "optimization_time (neural_compressor.ux.utils.templates.metric.metric property)": [[485, "neural_compressor.ux.utils.templates.metric.Metric.optimization_time"]], "path_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[485, "neural_compressor.ux.utils.templates.metric.Metric.path_optimized_model"]], "profiling_data (neural_compressor.ux.utils.templates.metric.metric property)": [[485, "neural_compressor.ux.utils.templates.metric.Metric.profiling_data"]], "size_input_model (neural_compressor.ux.utils.templates.metric.metric property)": [[485, "neural_compressor.ux.utils.templates.metric.Metric.size_input_model"]], "size_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[485, "neural_compressor.ux.utils.templates.metric.Metric.size_optimized_model"]], "throughput (neural_compressor.ux.utils.templates.metric.metric property)": [[485, "neural_compressor.ux.utils.templates.metric.Metric.throughput"]], "workdir (class in neural_compressor.ux.utils.templates.workdir)": [[486, "neural_compressor.ux.utils.templates.workdir.Workdir"]], "clean_logs() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[486, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_logs"]], "clean_status() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[486, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_status"]], "ensure_working_path_exists() (neural_compressor.ux.utils.templates.workdir.workdir method)": [[486, "neural_compressor.ux.utils.templates.workdir.Workdir.ensure_working_path_exists"]], "neural_compressor.ux.utils.templates.workdir": [[486, "module-neural_compressor.ux.utils.templates.workdir"]], "check_module() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.check_module"]], "deprecated() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.deprecated"]], "determine_ip() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.determine_ip"]], "export_to_csv() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.export_to_csv"]], "filter_transforms() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.filter_transforms"]], "get_dataset_path() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.get_dataset_path"]], "get_default_pruning_config_path() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.get_default_pruning_config_path"]], "get_file_extension() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.get_file_extension"]], "get_framework_from_path() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.get_framework_from_path"]], "get_height_width_from_size() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.get_height_width_from_size"]], "get_metrics_dict() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.get_metrics_dict"]], "get_model_zoo_config_path() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.get_model_zoo_config_path"]], "get_model_zoo_model_path() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.get_model_zoo_model_path"]], "get_module_version() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.get_module_version"]], "get_predefined_config_path() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.get_predefined_config_path"]], "get_shape_from_transforms() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.get_shape_from_transforms"]], "get_size() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.get_size"]], "is_dataset_file() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.is_dataset_file"]], "is_development_env() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.is_development_env"]], "is_hidden() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.is_hidden"]], "load_dataloader_config() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.load_dataloader_config"]], "load_help_nc_params() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.load_help_nc_params"]], "load_metrics_config() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.load_metrics_config"]], "load_model_config() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.load_model_config"]], "load_model_wise_params() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.load_model_wise_params"]], "load_precisions_config() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.load_precisions_config"]], "load_pruning_details_config() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.load_pruning_details_config"]], "load_transforms_config() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.load_transforms_config"]], "load_transforms_filter_config() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.load_transforms_filter_config"]], "neural_compressor.ux.utils.utils": [[487, "module-neural_compressor.ux.utils.utils"]], "normalize_domain() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.normalize_domain"]], "normalize_framework() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.normalize_framework"]], "normalize_string() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.normalize_string"]], "parse_bool_value() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.parse_bool_value"]], "parse_to_float_list() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.parse_to_float_list"]], "parse_to_string_list() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.parse_to_string_list"]], "parse_version() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.parse_version"]], "release_tag() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.release_tag"]], "replace_with_values() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.replace_with_values"]], "verify_file_path() (in module neural_compressor.ux.utils.utils)": [[487, "neural_compressor.ux.utils.utils.verify_file_path"]], "config (class in neural_compressor.ux.utils.workload.config)": [[488, "neural_compressor.ux.utils.workload.config.Config"]], "dump() (neural_compressor.ux.utils.workload.config.config method)": [[488, "neural_compressor.ux.utils.workload.config.Config.dump"]], "get_performance_configs() (neural_compressor.ux.utils.workload.config.config method)": [[488, "neural_compressor.ux.utils.workload.config.Config.get_performance_configs"]], "get_performance_cores_per_instance() (neural_compressor.ux.utils.workload.config.config method)": [[488, "neural_compressor.ux.utils.workload.config.Config.get_performance_cores_per_instance"]], "get_performance_num_of_instance() (neural_compressor.ux.utils.workload.config.config method)": [[488, "neural_compressor.ux.utils.workload.config.Config.get_performance_num_of_instance"]], "initialize() (neural_compressor.ux.utils.workload.config.config method)": [[488, "neural_compressor.ux.utils.workload.config.Config.initialize"]], "load() (neural_compressor.ux.utils.workload.config.config method)": [[488, "neural_compressor.ux.utils.workload.config.Config.load"]], "neural_compressor.ux.utils.workload.config": [[488, "module-neural_compressor.ux.utils.workload.config"]], "process_transform() (neural_compressor.ux.utils.workload.config.config static method)": [[488, "neural_compressor.ux.utils.workload.config.Config.process_transform"]], "remove_accuracy_metric() (neural_compressor.ux.utils.workload.config.config method)": [[488, "neural_compressor.ux.utils.workload.config.Config.remove_accuracy_metric"]], "remove_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[488, "neural_compressor.ux.utils.workload.config.Config.remove_dataloader"]], "set_accuracy_and_performance_batch_sizes() (neural_compressor.ux.utils.workload.config.config method)": [[488, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_and_performance_batch_sizes"]], "set_accuracy_goal() (neural_compressor.ux.utils.workload.config.config method)": [[488, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_goal"]], "set_accuracy_metric() (neural_compressor.ux.utils.workload.config.config method)": [[488, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_metric"]], "set_evaluation_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[488, "neural_compressor.ux.utils.workload.config.Config.set_evaluation_dataloader"]], "set_evaluation_dataset_path() (neural_compressor.ux.utils.workload.config.config method)": [[488, "neural_compressor.ux.utils.workload.config.Config.set_evaluation_dataset_path"]], "set_inputs() (neural_compressor.ux.utils.workload.config.config method)": [[488, "neural_compressor.ux.utils.workload.config.Config.set_inputs"]], "set_optimization_precision() (neural_compressor.ux.utils.workload.config.config method)": [[488, "neural_compressor.ux.utils.workload.config.Config.set_optimization_precision"]], "set_outputs() (neural_compressor.ux.utils.workload.config.config method)": [[488, "neural_compressor.ux.utils.workload.config.Config.set_outputs"]], "set_performance_cores_per_instance() (neural_compressor.ux.utils.workload.config.config method)": [[488, "neural_compressor.ux.utils.workload.config.Config.set_performance_cores_per_instance"]], "set_performance_iterations() (neural_compressor.ux.utils.workload.config.config method)": [[488, "neural_compressor.ux.utils.workload.config.Config.set_performance_iterations"]], "set_performance_num_of_instance() (neural_compressor.ux.utils.workload.config.config method)": [[488, "neural_compressor.ux.utils.workload.config.Config.set_performance_num_of_instance"]], "set_performance_warmup() (neural_compressor.ux.utils.workload.config.config method)": [[488, "neural_compressor.ux.utils.workload.config.Config.set_performance_warmup"]], "set_quantization_approach() (neural_compressor.ux.utils.workload.config.config method)": [[488, "neural_compressor.ux.utils.workload.config.Config.set_quantization_approach"]], "set_quantization_batch_size() (neural_compressor.ux.utils.workload.config.config method)": [[488, "neural_compressor.ux.utils.workload.config.Config.set_quantization_batch_size"]], "set_quantization_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[488, "neural_compressor.ux.utils.workload.config.Config.set_quantization_dataloader"]], "set_quantization_dataset_path() (neural_compressor.ux.utils.workload.config.config method)": [[488, "neural_compressor.ux.utils.workload.config.Config.set_quantization_dataset_path"]], "set_quantization_sampling_size() (neural_compressor.ux.utils.workload.config.config method)": [[488, "neural_compressor.ux.utils.workload.config.Config.set_quantization_sampling_size"]], "set_transform() (neural_compressor.ux.utils.workload.config.config method)": [[488, "neural_compressor.ux.utils.workload.config.Config.set_transform"]], "set_workspace() (neural_compressor.ux.utils.workload.config.config method)": [[488, "neural_compressor.ux.utils.workload.config.Config.set_workspace"]], "dataloader (class in neural_compressor.ux.utils.workload.dataloader)": [[489, "neural_compressor.ux.utils.workload.dataloader.Dataloader"]], "dataset (class in neural_compressor.ux.utils.workload.dataloader)": [[489, "neural_compressor.ux.utils.workload.dataloader.Dataset"]], "filter (class in neural_compressor.ux.utils.workload.dataloader)": [[489, "neural_compressor.ux.utils.workload.dataloader.Filter"]], "labelbalance (class in neural_compressor.ux.utils.workload.dataloader)": [[489, "neural_compressor.ux.utils.workload.dataloader.LabelBalance"]], "transform (class in neural_compressor.ux.utils.workload.dataloader)": [[489, "neural_compressor.ux.utils.workload.dataloader.Transform"]], "is_dummy() (neural_compressor.ux.utils.workload.dataloader.dataset method)": [[489, "neural_compressor.ux.utils.workload.dataloader.Dataset.is_dummy"]], "neural_compressor.ux.utils.workload.dataloader": [[489, "module-neural_compressor.ux.utils.workload.dataloader"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[489, "neural_compressor.ux.utils.workload.dataloader.Dataloader.serialize"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.dataset method)": [[489, "neural_compressor.ux.utils.workload.dataloader.Dataset.serialize"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.transform method)": [[489, "neural_compressor.ux.utils.workload.dataloader.Transform.serialize"]], "set_dataset() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[489, "neural_compressor.ux.utils.workload.dataloader.Dataloader.set_dataset"]], "set_transforms_from_list() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[489, "neural_compressor.ux.utils.workload.dataloader.Dataloader.set_transforms_from_list"]], "accuracy (class in neural_compressor.ux.utils.workload.evaluation)": [[490, "neural_compressor.ux.utils.workload.evaluation.Accuracy"]], "configs (class in neural_compressor.ux.utils.workload.evaluation)": [[490, "neural_compressor.ux.utils.workload.evaluation.Configs"]], "evaluation (class in neural_compressor.ux.utils.workload.evaluation)": [[490, "neural_compressor.ux.utils.workload.evaluation.Evaluation"]], "metric (class in neural_compressor.ux.utils.workload.evaluation)": [[490, "neural_compressor.ux.utils.workload.evaluation.Metric"]], "performance (class in neural_compressor.ux.utils.workload.evaluation)": [[490, "neural_compressor.ux.utils.workload.evaluation.Performance"]], "postprocess (class in neural_compressor.ux.utils.workload.evaluation)": [[490, "neural_compressor.ux.utils.workload.evaluation.Postprocess"]], "postprocessschema (class in neural_compressor.ux.utils.workload.evaluation)": [[490, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema"]], "get_label_shift_value() (neural_compressor.ux.utils.workload.evaluation.postprocessschema static method)": [[490, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema.get_label_shift_value"]], "name (neural_compressor.ux.utils.workload.evaluation.metric property)": [[490, "neural_compressor.ux.utils.workload.evaluation.Metric.name"]], "neural_compressor.ux.utils.workload.evaluation": [[490, "module-neural_compressor.ux.utils.workload.evaluation"]], "param (neural_compressor.ux.utils.workload.evaluation.metric property)": [[490, "neural_compressor.ux.utils.workload.evaluation.Metric.param"]], "serialize() (neural_compressor.ux.utils.workload.evaluation.metric method)": [[490, "neural_compressor.ux.utils.workload.evaluation.Metric.serialize"]], "set_accuracy_postprocess_transforms() (neural_compressor.ux.utils.workload.evaluation.evaluation method)": [[490, "neural_compressor.ux.utils.workload.evaluation.Evaluation.set_accuracy_postprocess_transforms"]], "graphoptimization (class in neural_compressor.ux.utils.workload.graph_optimization)": [[491, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization": [[491, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "set_precisions() (neural_compressor.ux.utils.workload.graph_optimization.graphoptimization method)": [[491, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization.set_precisions"]], "neural_compressor.ux.utils.workload": [[492, "module-neural_compressor.ux.utils.workload"]], "mixedprecision (class in neural_compressor.ux.utils.workload.mixed_precision)": [[493, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision": [[493, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "set_precisions() (neural_compressor.ux.utils.workload.mixed_precision.mixedprecision method)": [[493, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision.set_precisions"]], "model (class in neural_compressor.ux.utils.workload.model)": [[494, "neural_compressor.ux.utils.workload.model.Model"]], "inputs (neural_compressor.ux.utils.workload.model.model property)": [[494, "neural_compressor.ux.utils.workload.model.Model.inputs"]], "neural_compressor.ux.utils.workload.model": [[494, "module-neural_compressor.ux.utils.workload.model"]], "outputs (neural_compressor.ux.utils.workload.model.model property)": [[494, "neural_compressor.ux.utils.workload.model.Model.outputs"]], "serialize() (neural_compressor.ux.utils.workload.model.model method)": [[494, "neural_compressor.ux.utils.workload.model.Model.serialize"]], "adamoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[495, "neural_compressor.ux.utils.workload.pruning.AdamOptimizer"]], "adamwoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[495, "neural_compressor.ux.utils.workload.pruning.AdamWOptimizer"]], "approach (class in neural_compressor.ux.utils.workload.pruning)": [[495, "neural_compressor.ux.utils.workload.pruning.Approach"]], "criterion (class in neural_compressor.ux.utils.workload.pruning)": [[495, "neural_compressor.ux.utils.workload.pruning.Criterion"]], "crossentropylosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[495, "neural_compressor.ux.utils.workload.pruning.CrossEntropyLossCriterion"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[495, "neural_compressor.ux.utils.workload.pruning.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationlosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[495, "neural_compressor.ux.utils.workload.pruning.KnowledgeDistillationLossCriterion"]], "optimizer (class in neural_compressor.ux.utils.workload.pruning)": [[495, "neural_compressor.ux.utils.workload.pruning.Optimizer"]], "pruning (class in neural_compressor.ux.utils.workload.pruning)": [[495, "neural_compressor.ux.utils.workload.pruning.Pruning"]], "sgdoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[495, "neural_compressor.ux.utils.workload.pruning.SGDOptimizer"]], "selfknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[495, "neural_compressor.ux.utils.workload.pruning.SelfKnowledgeDistillationLoss"]], "sparsecategoricalcrossentropycriterion (class in neural_compressor.ux.utils.workload.pruning)": [[495, "neural_compressor.ux.utils.workload.pruning.SparseCategoricalCrossentropyCriterion"]], "train (class in neural_compressor.ux.utils.workload.pruning)": [[495, "neural_compressor.ux.utils.workload.pruning.Train"]], "weightcompressionapproach (class in neural_compressor.ux.utils.workload.pruning)": [[495, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach"]], "initialize_pruners() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach static method)": [[495, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.initialize_pruners"]], "neural_compressor.ux.utils.workload.pruning": [[495, "module-neural_compressor.ux.utils.workload.pruning"]], "parse_dict_value_to_float() (in module neural_compressor.ux.utils.workload.pruning)": [[495, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_float"]], "parse_dict_value_to_int() (in module neural_compressor.ux.utils.workload.pruning)": [[495, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_int"]], "serialize() (neural_compressor.ux.utils.workload.pruning.train method)": [[495, "neural_compressor.ux.utils.workload.pruning.Train.serialize"]], "serialize() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach method)": [[495, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.serialize"]], "serialize_pruner() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach static method)": [[495, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.serialize_pruner"]], "set_postprocess_transforms() (neural_compressor.ux.utils.workload.pruning.train method)": [[495, "neural_compressor.ux.utils.workload.pruning.Train.set_postprocess_transforms"]], "advance (class in neural_compressor.ux.utils.workload.quantization)": [[496, "neural_compressor.ux.utils.workload.quantization.Advance"]], "calibration (class in neural_compressor.ux.utils.workload.quantization)": [[496, "neural_compressor.ux.utils.workload.quantization.Calibration"]], "quantization (class in neural_compressor.ux.utils.workload.quantization)": [[496, "neural_compressor.ux.utils.workload.quantization.Quantization"]], "wiseconfig (class in neural_compressor.ux.utils.workload.quantization)": [[496, "neural_compressor.ux.utils.workload.quantization.WiseConfig"]], "wiseconfigdetails (class in neural_compressor.ux.utils.workload.quantization)": [[496, "neural_compressor.ux.utils.workload.quantization.WiseConfigDetails"]], "neural_compressor.ux.utils.workload.quantization": [[496, "module-neural_compressor.ux.utils.workload.quantization"]], "acccriterion (class in neural_compressor.ux.utils.workload.tuning)": [[497, "neural_compressor.ux.utils.workload.tuning.AccCriterion"]], "diagnosis (class in neural_compressor.ux.utils.workload.tuning)": [[497, "neural_compressor.ux.utils.workload.tuning.Diagnosis"]], "exitpolicy (class in neural_compressor.ux.utils.workload.tuning)": [[497, "neural_compressor.ux.utils.workload.tuning.ExitPolicy"]], "multiobjectives (class in neural_compressor.ux.utils.workload.tuning)": [[497, "neural_compressor.ux.utils.workload.tuning.MultiObjectives"]], "strategy (class in neural_compressor.ux.utils.workload.tuning)": [[497, "neural_compressor.ux.utils.workload.tuning.Strategy"]], "tuning (class in neural_compressor.ux.utils.workload.tuning)": [[497, "neural_compressor.ux.utils.workload.tuning.Tuning"]], "workspace (class in neural_compressor.ux.utils.workload.tuning)": [[497, "neural_compressor.ux.utils.workload.tuning.Workspace"]], "neural_compressor.ux.utils.workload.tuning": [[497, "module-neural_compressor.ux.utils.workload.tuning"]], "objective (neural_compressor.ux.utils.workload.tuning.multiobjectives property)": [[497, "neural_compressor.ux.utils.workload.tuning.MultiObjectives.objective"]], "set_max_trials() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[497, "neural_compressor.ux.utils.workload.tuning.Tuning.set_max_trials"]], "set_performance_only() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[497, "neural_compressor.ux.utils.workload.tuning.Tuning.set_performance_only"]], "set_random_seed() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[497, "neural_compressor.ux.utils.workload.tuning.Tuning.set_random_seed"]], "set_timeout() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[497, "neural_compressor.ux.utils.workload.tuning.Tuning.set_timeout"]], "set_workspace() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[497, "neural_compressor.ux.utils.workload.tuning.Tuning.set_workspace"]], "weight (neural_compressor.ux.utils.workload.tuning.multiobjectives property)": [[497, "neural_compressor.ux.utils.workload.tuning.MultiObjectives.weight"]], "float_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[498, "neural_compressor.ux.utils.yaml_utils.float_representer"]], "neural_compressor.ux.utils.yaml_utils": [[498, "module-neural_compressor.ux.utils.yaml_utils"]], "pruner_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[498, "neural_compressor.ux.utils.yaml_utils.pruner_representer"]], "message (class in neural_compressor.ux.web.communication)": [[499, "neural_compressor.ux.web.communication.Message"]], "messagequeue (class in neural_compressor.ux.web.communication)": [[499, "neural_compressor.ux.web.communication.MessageQueue"]], "request (class in neural_compressor.ux.web.communication)": [[499, "neural_compressor.ux.web.communication.Request"]], "response (class in neural_compressor.ux.web.communication)": [[499, "neural_compressor.ux.web.communication.Response"]], "create_simple_response() (in module neural_compressor.ux.web.communication)": [[499, "neural_compressor.ux.web.communication.create_simple_response"]], "data (neural_compressor.ux.web.communication.message property)": [[499, "neural_compressor.ux.web.communication.Message.data"]], "get() (neural_compressor.ux.web.communication.messagequeue method)": [[499, "neural_compressor.ux.web.communication.MessageQueue.get"]], "neural_compressor.ux.web.communication": [[499, "module-neural_compressor.ux.web.communication"]], "post_error() (neural_compressor.ux.web.communication.messagequeue method)": [[499, "neural_compressor.ux.web.communication.MessageQueue.post_error"]], "post_failure() (neural_compressor.ux.web.communication.messagequeue method)": [[499, "neural_compressor.ux.web.communication.MessageQueue.post_failure"]], "post_success() (neural_compressor.ux.web.communication.messagequeue method)": [[499, "neural_compressor.ux.web.communication.MessageQueue.post_success"]], "status (neural_compressor.ux.web.communication.message property)": [[499, "neural_compressor.ux.web.communication.Message.status"]], "subject (neural_compressor.ux.web.communication.message property)": [[499, "neural_compressor.ux.web.communication.Message.subject"]], "configuration (class in neural_compressor.ux.web.configuration)": [[500, "neural_compressor.ux.web.configuration.Configuration"]], "determine_gui_port() (neural_compressor.ux.web.configuration.configuration method)": [[500, "neural_compressor.ux.web.configuration.Configuration.determine_gui_port"]], "determine_log_level() (neural_compressor.ux.web.configuration.configuration method)": [[500, "neural_compressor.ux.web.configuration.Configuration.determine_log_level"]], "determine_server_port() (neural_compressor.ux.web.configuration.configuration method)": [[500, "neural_compressor.ux.web.configuration.Configuration.determine_server_port"]], "determine_url_prefix() (neural_compressor.ux.web.configuration.configuration static method)": [[500, "neural_compressor.ux.web.configuration.Configuration.determine_url_prefix"]], "determine_values_from_environment() (neural_compressor.ux.web.configuration.configuration method)": [[500, "neural_compressor.ux.web.configuration.Configuration.determine_values_from_environment"]], "dump_token_to_file() (neural_compressor.ux.web.configuration.configuration method)": [[500, "neural_compressor.ux.web.configuration.Configuration.dump_token_to_file"]], "get_command_line_args() (neural_compressor.ux.web.configuration.configuration method)": [[500, "neural_compressor.ux.web.configuration.Configuration.get_command_line_args"]], "get_url() (neural_compressor.ux.web.configuration.configuration method)": [[500, "neural_compressor.ux.web.configuration.Configuration.get_url"]], "global_config_directory (neural_compressor.ux.web.configuration.configuration property)": [[500, "neural_compressor.ux.web.configuration.Configuration.global_config_directory"]], "is_port_taken() (neural_compressor.ux.web.configuration.configuration method)": [[500, "neural_compressor.ux.web.configuration.Configuration.is_port_taken"]], "neural_compressor.ux.web.configuration": [[500, "module-neural_compressor.ux.web.configuration"]], "set_up() (neural_compressor.ux.web.configuration.configuration method)": [[500, "neural_compressor.ux.web.configuration.Configuration.set_up"]], "servicenotfoundexception (class in neural_compressor.ux.web.exceptions)": [[501, "neural_compressor.ux.web.exceptions.ServiceNotFoundException"]], "neural_compressor.ux.web.exceptions": [[501, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[502, "module-neural_compressor.ux.web"]], "deferredroutingdefinition (class in neural_compressor.ux.web.router)": [[503, "neural_compressor.ux.web.router.DeferredRoutingDefinition"]], "deferredsubprocessroutingdefinition (class in neural_compressor.ux.web.router)": [[503, "neural_compressor.ux.web.router.DeferredSubprocessRoutingDefinition"]], "realtimeroutingdefinition (class in neural_compressor.ux.web.router)": [[503, "neural_compressor.ux.web.router.RealtimeRoutingDefinition"]], "router (class in neural_compressor.ux.web.router)": [[503, "neural_compressor.ux.web.router.Router"]], "routingdefinition (class in neural_compressor.ux.web.router)": [[503, "neural_compressor.ux.web.router.RoutingDefinition"]], "find_pattern_in_graph() (in module neural_compressor.ux.web.router)": [[503, "neural_compressor.ux.web.router.find_pattern_in_graph"]], "get_model_graph() (in module neural_compressor.ux.web.router)": [[503, "neural_compressor.ux.web.router.get_model_graph"]], "get_system_info() (in module neural_compressor.ux.web.router)": [[503, "neural_compressor.ux.web.router.get_system_info"]], "handle() (neural_compressor.ux.web.router.router method)": [[503, "neural_compressor.ux.web.router.Router.handle"]], "neural_compressor.ux.web.router": [[503, "module-neural_compressor.ux.web.router"]], "allow_api_call() (in module neural_compressor.ux.web.server)": [[504, "neural_compressor.ux.web.server.allow_api_call"]], "block_iframe() (in module neural_compressor.ux.web.server)": [[504, "neural_compressor.ux.web.server.block_iframe"]], "block_sniffing() (in module neural_compressor.ux.web.server)": [[504, "neural_compressor.ux.web.server.block_sniffing"]], "build_parameters() (in module neural_compressor.ux.web.server)": [[504, "neural_compressor.ux.web.server.build_parameters"]], "disable_cache() (in module neural_compressor.ux.web.server)": [[504, "neural_compressor.ux.web.server.disable_cache"]], "get_tls_args() (in module neural_compressor.ux.web.server)": [[504, "neural_compressor.ux.web.server.get_tls_args"]], "handle_api_call() (in module neural_compressor.ux.web.server)": [[504, "neural_compressor.ux.web.server.handle_api_call"]], "neural_compressor.ux.web.server": [[504, "module-neural_compressor.ux.web.server"]], "page_not_found() (in module neural_compressor.ux.web.server)": [[504, "neural_compressor.ux.web.server.page_not_found"]], "require_api_token() (in module neural_compressor.ux.web.server)": [[504, "neural_compressor.ux.web.server.require_api_token"]], "root() (in module neural_compressor.ux.web.server)": [[504, "neural_compressor.ux.web.server.root"]], "run_server() (in module neural_compressor.ux.web.server)": [[504, "neural_compressor.ux.web.server.run_server"]], "web_socket_publisher() (in module neural_compressor.ux.web.server)": [[504, "neural_compressor.ux.web.server.web_socket_publisher"]], "benchmarkservice (class in neural_compressor.ux.web.service.benchmark)": [[505, "neural_compressor.ux.web.service.benchmark.BenchmarkService"]], "neural_compressor.ux.web.service.benchmark": [[505, "module-neural_compressor.ux.web.service.benchmark"]], "historysnapshotparser (class in neural_compressor.ux.web.service.history_snapshot_parser)": [[506, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser"]], "extract_accuracy() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[506, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.extract_accuracy"]], "extract_performance() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[506, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.extract_performance"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[506, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "parse_history_item() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[506, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.parse_history_item"]], "parse_history_snapshot() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[506, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.parse_history_snapshot"]], "neural_compressor.ux.web.service": [[507, "module-neural_compressor.ux.web.service"]], "modelservice (class in neural_compressor.ux.web.service.model)": [[508, "neural_compressor.ux.web.service.model.ModelService"]], "get_model() (neural_compressor.ux.web.service.model.modelservice class method)": [[508, "neural_compressor.ux.web.service.model.ModelService.get_model"]], "neural_compressor.ux.web.service.model": [[508, "module-neural_compressor.ux.web.service.model"]], "optimizationservice (class in neural_compressor.ux.web.service.optimization)": [[509, "neural_compressor.ux.web.service.optimization.OptimizationService"]], "neural_compressor.ux.web.service.optimization": [[509, "module-neural_compressor.ux.web.service.optimization"]], "profilingservice (class in neural_compressor.ux.web.service.profiling)": [[510, "neural_compressor.ux.web.service.profiling.ProfilingService"]], "generate_csv() (neural_compressor.ux.web.service.profiling.profilingservice class method)": [[510, "neural_compressor.ux.web.service.profiling.ProfilingService.generate_csv"]], "neural_compressor.ux.web.service.profiling": [[510, "module-neural_compressor.ux.web.service.profiling"]], "requestdataprocessor (class in neural_compressor.ux.web.service.request_data_processor)": [[511, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor"]], "get_string_value() (neural_compressor.ux.web.service.request_data_processor.requestdataprocessor static method)": [[511, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor.get_string_value"]], "neural_compressor.ux.web.service.request_data_processor": [[511, "module-neural_compressor.ux.web.service.request_data_processor"]], "responsegenerator (class in neural_compressor.ux.web.service.response_generator)": [[512, "neural_compressor.ux.web.service.response_generator.ResponseGenerator"]], "add_refresh() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[512, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.add_refresh"]], "from_exception() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[512, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.from_exception"]], "get_status_code_for_exception() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[512, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.get_status_code_for_exception"]], "neural_compressor.ux.web.service.response_generator": [[512, "module-neural_compressor.ux.web.service.response_generator"]], "serve_from_filesystem() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[512, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.serve_from_filesystem"]], "workloadservice (class in neural_compressor.ux.web.service.workload)": [[513, "neural_compressor.ux.web.service.workload.WorkloadService"]], "get_code_template() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[513, "neural_compressor.ux.web.service.workload.WorkloadService.get_code_template"]], "get_config() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[513, "neural_compressor.ux.web.service.workload.WorkloadService.get_config"]], "get_output() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[513, "neural_compressor.ux.web.service.workload.WorkloadService.get_output"]], "neural_compressor.ux.web.service.workload": [[513, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[514, "module-neural_compressor.version"]]}})