Search.setIndex({"docnames": ["autoapi/block_mask/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/compression/pruning/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/profiling/parser/factory/index", "autoapi/neural_compressor/profiling/parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index", "autoapi/neural_compressor/profiling/parser/parser/index", "autoapi/neural_compressor/profiling/parser/result/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index", "autoapi/neural_compressor/profiling/profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index", "autoapi/neural_compressor/profiling/profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/template/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/objective", "docs/source/orchestration", "docs/source/platform_configuration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_mixed_precision", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/block_mask/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/compression/pruning/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/profiling/parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/result/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index.rst", "autoapi/neural_compressor/profiling/profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index.rst", "autoapi/neural_compressor/profiling/profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/template/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/platform_configuration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_mixed_precision.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.reduce</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.unary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_scaler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.pattern_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.auto_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.pattern_analyzer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.weight_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template.api_doc_example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.neural_insights_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.weights_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "DataLoader", "Dataset", "Design", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Objective", "Optimization Orchestration", "SYSTEM CONFIGURATION", "Pruning", "Full Publications/Events (60)", "Pythonic Style Access for Configurations", "Quantization", "Turn OFF Auto Mixed Precision during Quantization", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"block": [0, 152, 166, 172, 173, 176, 293, 334, 376, 427, 453, 456, 463], "mask": [0, 172, 173, 196, 240, 266, 295, 319, 456, 469], "adaptor_registri": [1, 399], "cl": [1, 156, 163, 172, 173, 174, 175, 198, 205, 213, 215, 220, 242, 249, 255, 277, 284, 288, 293, 295, 297, 308, 323, 334, 369, 389], "sourc": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 166, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 252, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284, 285, 288, 289, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 336, 338, 340, 341, 342, 343, 345, 346, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 372, 373, 374, 375, 376, 378, 379, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 395, 398, 429, 431, 444, 446, 448, 449, 451, 457], "The": [1, 3, 11, 14, 16, 34, 52, 73, 112, 118, 120, 139, 147, 155, 156, 161, 162, 163, 166, 170, 172, 173, 174, 175, 176, 177, 178, 180, 181, 184, 185, 186, 196, 197, 198, 199, 200, 204, 205, 213, 215, 218, 220, 223, 225, 228, 229, 230, 240, 241, 242, 243, 244, 248, 249, 255, 256, 261, 263, 264, 265, 267, 268, 270, 272, 273, 274, 276, 277, 279, 280, 282, 283, 284, 285, 288, 290, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 305, 306, 307, 308, 312, 314, 316, 317, 318, 320, 321, 323, 324, 332, 334, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 373, 375, 376, 378, 379, 381, 383, 384, 388, 389, 390, 393, 395, 396, 399, 400, 402, 406, 409, 412, 414, 415, 416, 418, 420, 422, 424, 426, 427, 428, 430, 431, 432, 433, 436, 437, 439, 442, 444, 445, 446, 448, 449, 451, 452, 453, 454, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469], "decor": [1, 16, 34, 66, 67, 69, 147, 156, 172, 173, 175, 213, 220, 255, 270, 277, 284, 288, 293, 295, 297, 308, 311, 323, 334, 369, 372, 389, 395, 396, 399, 466], "us": [1, 13, 16, 34, 42, 43, 47, 48, 69, 102, 104, 115, 140, 149, 155, 161, 163, 166, 170, 172, 173, 175, 177, 178, 180, 181, 184, 185, 194, 195, 196, 197, 198, 199, 200, 203, 212, 213, 214, 215, 220, 228, 229, 238, 239, 240, 241, 242, 243, 244, 247, 254, 255, 259, 260, 261, 263, 264, 266, 270, 271, 272, 277, 284, 285, 288, 290, 293, 295, 296, 297, 298, 299, 302, 305, 308, 311, 312, 316, 317, 319, 323, 334, 351, 356, 357, 361, 364, 366, 369, 372, 373, 376, 379, 380, 381, 382, 389, 393, 394, 395, 396, 399, 414, 415, 416, 418, 419, 420, 422, 424, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 442, 444, 446, 448, 449, 451, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469], "regist": [1, 16, 34, 156, 163, 166, 172, 173, 174, 175, 198, 205, 213, 215, 220, 242, 249, 255, 270, 277, 284, 288, 293, 295, 297, 308, 311, 323, 334, 369, 372, 386, 396, 399, 416, 420, 430, 431, 452, 453, 463, 466], "all": [1, 13, 16, 34, 44, 62, 96, 155, 156, 158, 161, 162, 172, 173, 176, 180, 181, 186, 187, 194, 198, 205, 213, 214, 220, 223, 225, 230, 238, 242, 249, 255, 263, 266, 268, 270, 277, 284, 288, 289, 293, 299, 308, 311, 316, 319, 321, 323, 325, 334, 369, 372, 375, 381, 389, 393, 398, 399, 415, 416, 420, 424, 428, 431, 434, 442, 445, 446, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 463, 465, 466], "subclass": [1, 16, 34, 156, 172, 173, 175, 191, 195, 198, 205, 213, 220, 235, 239, 242, 249, 255, 270, 277, 284, 288, 293, 295, 297, 308, 311, 323, 334, 369, 372, 399], "paramet": [1, 11, 13, 14, 16, 42, 43, 44, 66, 67, 69, 85, 104, 115, 131, 139, 140, 147, 148, 149, 153, 154, 155, 156, 161, 162, 163, 166, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 184, 185, 195, 196, 198, 205, 209, 213, 215, 220, 225, 228, 229, 239, 240, 242, 249, 252, 255, 256, 258, 259, 260, 261, 263, 264, 266, 267, 268, 270, 272, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284, 285, 288, 290, 293, 294, 295, 296, 297, 298, 302, 308, 312, 314, 316, 317, 319, 320, 321, 323, 324, 328, 332, 334, 351, 356, 357, 361, 369, 373, 375, 376, 378, 381, 385, 386, 388, 389, 395, 415, 416, 418, 420, 427, 430, 431, 445, 451, 452, 456, 459, 462, 463, 465, 466, 468], "framework_specific_info": [1, 3, 11, 14, 44, 46, 399], "base": [1, 13, 16, 34, 45, 46, 85, 104, 115, 119, 121, 131, 143, 149, 152, 155, 156, 162, 166, 181, 186, 189, 194, 196, 198, 205, 213, 223, 230, 233, 238, 240, 242, 249, 255, 270, 276, 278, 284, 285, 288, 290, 295, 305, 308, 312, 323, 325, 332, 333, 334, 366, 369, 373, 396, 398, 399, 416, 419, 420, 424, 431, 439, 440, 442, 451, 455, 456, 459, 462, 464, 466, 469], "framework": [1, 3, 11, 13, 14, 44, 161, 163, 173, 182, 183, 187, 188, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 207, 210, 213, 215, 216, 220, 226, 227, 231, 232, 234, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 251, 253, 255, 261, 270, 271, 298, 306, 312, 323, 324, 325, 326, 328, 367, 373, 381, 398, 399, 420, 421, 425, 426, 427, 428, 430, 431, 432, 456, 457, 459, 464, 465, 466, 467, 468], "layer": [1, 3, 11, 14, 45, 46, 115, 116, 117, 118, 120, 121, 153, 159, 163, 168, 170, 171, 172, 173, 176, 180, 181, 215, 222, 293, 294, 379, 381, 389, 399, 419, 427, 456, 461], "mxnet_util": 2, "util": [2, 12, 17, 104, 109, 110, 138, 141, 148, 149, 150, 154, 165, 167, 170, 180, 181, 222, 262, 264, 294, 304, 315, 317, 349, 354, 365, 400, 420, 431, 434, 459, 466, 467], "ox_util": 2, "oper": [2, 17, 43, 103, 109, 139, 147, 170, 171, 172, 180, 181, 209, 252, 293, 351, 356, 395, 414, 415, 422, 451, 459, 463, 465, 466], "activ": [2, 17, 29, 140, 155, 180, 181, 222, 312, 373, 399, 419, 424, 431, 452, 455, 458, 459, 463, 464, 468], "argmax": [2, 17, 29], "attent": [2, 17, 29, 152, 168, 170, 173, 180, 181, 196, 240, 393, 418, 456], "binary_op": [2, 17, 29], "concat": [2, 17, 29, 146], "conv": [2, 17, 29, 57, 61, 65, 70, 71, 72, 91, 108, 159, 180, 181, 395, 431, 456, 458, 459, 466], "direct_q8": [2, 17, 29], "embed_layernorm": [2, 17, 29], "gather": [2, 13, 17, 29, 180, 181, 293], "gavgpool": [2, 17, 29], "gemm": [2, 17, 29, 180, 181], "lstm": [2, 17, 29], "matmul": [2, 17, 29, 51, 58, 64, 72, 93, 108, 127, 136, 172, 180, 181, 293, 424, 466], "maxpool": [2, 17, 29, 128, 137, 424], "norm": [2, 17, 29], "op": [2, 13, 17, 29, 44, 51, 56, 64, 65, 66, 67, 68, 69, 70, 71, 73, 77, 80, 84, 87, 90, 91, 92, 93, 95, 104, 106, 108, 122, 123, 124, 130, 132, 133, 134, 135, 140, 142, 145, 147, 148, 149, 154, 155, 159, 170, 180, 181, 305, 312, 313, 351, 356, 362, 364, 366, 373, 374, 383, 389, 399, 424, 431, 432, 456, 459, 460, 461, 463, 464, 466, 468], "pad": [2, 17, 29, 70, 71, 196, 213, 240, 255, 416, 465], "pool": [2, 17, 29], "reduc": [2, 17, 29, 180, 181, 399, 419, 431, 432, 451, 452, 456, 457, 459, 460, 463, 466, 468], "resiz": [2, 17, 29, 196, 197, 209, 213, 240, 241, 252, 255, 415, 416, 465], "split": [2, 17, 29, 43, 81, 212, 213, 254, 255, 395, 463, 465], "unary_op": [2, 17, 29], "calibr": [2, 11, 13, 14, 17, 48, 88, 89, 139, 155, 161, 180, 181, 184, 185, 228, 229, 261, 298, 357, 383, 399, 415, 416, 426, 427, 459, 466, 468], "quantiz": [2, 11, 13, 14, 16, 17, 42, 43, 47, 48, 87, 91, 93, 95, 98, 106, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 148, 149, 153, 155, 159, 161, 162, 180, 181, 184, 185, 209, 216, 223, 228, 229, 252, 260, 261, 262, 272, 299, 305, 311, 315, 362, 364, 366, 378, 379, 383, 388, 389, 399, 404, 415, 416, 420, 421, 424, 426, 427, 430, 432, 433, 434, 439, 441, 442, 445, 454, 457, 461, 464, 465, 466, 467, 468], "smooth_quant": [2, 17, 158, 180, 181, 315, 459, 463], "tf_util": 2, "graph_rewrit": [2, 110], "bf16": [2, 56, 86, 110, 148, 180, 181, 312, 373, 399, 424, 431, 432, 436, 441, 445, 451, 460, 466], "gener": [2, 13, 47, 48, 86, 110, 121, 147, 155, 161, 170, 176, 184, 185, 186, 195, 198, 199, 200, 201, 213, 228, 229, 230, 239, 242, 243, 244, 245, 255, 263, 271, 302, 316, 324, 352, 357, 361, 376, 378, 395, 399, 415, 418, 430, 431, 432, 434, 439, 444, 446, 448, 449, 451, 453, 455, 456, 457, 459, 460, 463, 464, 465, 466], "int8": [2, 18, 19, 43, 86, 110, 122, 123, 124, 130, 132, 133, 134, 135, 142, 147, 160, 161, 180, 181, 209, 252, 258, 259, 260, 312, 314, 373, 375, 388, 389, 395, 399, 414, 416, 419, 424, 431, 436, 439, 441, 442, 445, 451, 458, 459, 460, 461, 462, 463, 464, 465, 468], "onnx": [2, 14, 15, 16, 29, 41, 43, 86, 110, 141, 159, 180, 181, 192, 236, 258, 259, 260, 324, 331, 351, 387, 398, 399, 400, 415, 421, 422, 424, 425, 427, 433, 436, 441, 442, 457, 458, 463, 466], "qdq": [2, 42, 86, 110, 111, 112, 141, 155, 180, 181, 258, 259, 260, 399, 422, 427, 441, 442, 459, 463], "graph_bas": [2, 86, 110], "quantize_graph": [2, 110], "qat": [2, 110, 111, 154, 181, 272, 332, 419, 420, 427, 431, 459], "quantize_graph_bas": [2, 110, 111], "quantize_graph_bn": [2, 110, 111], "quantize_graph_concatv2": [2, 110, 111], "quantize_graph_conv": [2, 110, 111], "quantize_graph_for_intel_cpu": [2, 110, 111], "quantize_graph_matmul": [2, 110, 111], "quantize_graph_pool": [2, 110, 111], "transform_graph": [2, 110], "bias_correct": [2, 110, 144], "graph_transform_bas": [2, 110, 144], "insert_log": [2, 110, 144], "rerange_quantized_concat": [2, 110, 144], "graph_convert": [2, 110], "graph_converter_without_calib": [2, 110], "graph_util": [2, 110], "quantize_graph_common": [2, 110], "smooth_quant_calibr": [2, 110], "smooth_quant_scal": [2, 110], "tf2onnx_convert": [2, 110], "torch_util": [2, 217, 262, 315, 463], "bf16_convert": [2, 50, 86, 110, 150], "hawq_metr": [2, 150], "model_wrapp": [2, 15, 150], "pattern_detector": [2, 150], "symbolic_trac": [2, 150], "tensorflow": [2, 50, 52, 74, 75, 76, 86, 94, 100, 101, 102, 103, 104, 105, 109, 110, 111, 113, 116, 129, 139, 140, 141, 144, 147, 180, 181, 195, 196, 197, 198, 201, 203, 205, 213, 215, 220, 239, 240, 241, 242, 245, 247, 249, 255, 259, 260, 261, 264, 266, 270, 271, 272, 298, 306, 317, 319, 323, 324, 332, 350, 351, 355, 356, 357, 367, 389, 396, 398, 399, 415, 418, 419, 421, 424, 425, 427, 428, 431, 433, 441, 442, 456, 457, 458, 462, 466, 468], "kerasadaptor": 3, "mxnetadaptor": 11, "do": [11, 14, 162, 180, 181, 195, 196, 239, 240, 256, 260, 263, 266, 296, 316, 319, 388, 393, 416, 420, 424, 427, 430, 431, 446, 449, 456, 460, 461, 463, 466], "inspect": [11, 14, 461, 464], "tensor": [11, 13, 14, 15, 16, 43, 69, 104, 147, 149, 155, 166, 172, 173, 174, 181, 213, 255, 258, 260, 293, 295, 305, 332, 366, 389, 395, 416, 456, 459, 461, 464, 465, 466], "dict": [11, 13, 14, 44, 115, 147, 148, 149, 155, 156, 161, 166, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 184, 185, 195, 214, 220, 228, 229, 239, 258, 260, 265, 266, 267, 268, 270, 273, 276, 277, 278, 285, 288, 290, 293, 294, 295, 296, 297, 302, 305, 311, 314, 318, 319, 320, 321, 323, 324, 332, 357, 372, 375, 376, 378, 379, 381, 388, 389, 395, 422, 430, 456, 458, 459, 463, 464, 466], "specif": [11, 14, 42, 45, 103, 115, 161, 176, 180, 181, 196, 197, 198, 199, 203, 205, 220, 240, 241, 242, 243, 247, 249, 272, 279, 280, 282, 283, 284, 323, 357, 386, 393, 396, 399, 418, 424, 426, 430, 431, 432, 433, 434, 438, 439, 441, 445, 451, 453, 456, 458, 466, 468], "configur": [11, 13, 14, 44, 117, 148, 155, 161, 176, 177, 180, 181, 184, 185, 187, 198, 201, 214, 219, 228, 229, 242, 245, 256, 260, 261, 272, 273, 274, 276, 285, 290, 294, 298, 299, 305, 323, 324, 334, 357, 366, 378, 380, 381, 387, 388, 395, 396, 399, 416, 430, 431, 438, 452, 453, 456, 459, 461, 465, 466, 469], "mxnet": [12, 13, 16, 181, 191, 195, 198, 201, 205, 213, 235, 239, 242, 245, 249, 255, 261, 270, 298, 323, 324, 329, 357, 398, 399, 415, 421, 424, 427, 428, 431, 432, 433, 458, 466, 468], "init": [12, 17, 42, 158, 164, 167, 169, 416, 430], "optyp": [13, 180, 181, 258], "enum": 13, "type": [13, 16, 42, 43, 44, 73, 95, 104, 115, 121, 131, 139, 147, 148, 149, 155, 156, 163, 170, 171, 172, 173, 174, 175, 176, 178, 180, 181, 194, 196, 198, 205, 213, 215, 220, 238, 240, 242, 249, 255, 263, 264, 266, 270, 277, 284, 288, 293, 295, 297, 302, 308, 312, 314, 316, 317, 319, 323, 332, 334, 361, 362, 369, 373, 375, 376, 388, 389, 394, 399, 416, 420, 422, 424, 427, 431, 432, 452, 459, 462, 465, 466, 468], "isiter": 13, "obj": [13, 104, 176, 195, 225, 239, 256, 261, 272, 273, 274, 276, 285, 290, 294, 298, 324, 334, 357, 378, 381, 389], "bool": [13, 42, 140, 147, 154, 155, 172, 180, 181, 196, 198, 209, 213, 240, 242, 252, 255, 260, 264, 270, 293, 311, 317, 323, 372, 376, 388, 389, 416, 430, 458, 465], "check": [13, 66, 67, 104, 147, 155, 176, 187, 198, 242, 258, 294, 388, 389, 394, 398, 420, 428, 435, 437, 439, 446, 449, 450, 461], "whether": [13, 104, 115, 147, 172, 180, 181, 194, 196, 209, 213, 238, 240, 252, 255, 264, 266, 270, 293, 317, 319, 323, 381, 388, 389, 399, 416, 430, 459, 463, 465], "object": [13, 42, 43, 44, 73, 85, 104, 115, 131, 148, 149, 154, 155, 161, 162, 166, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 184, 185, 186, 196, 197, 198, 213, 214, 216, 225, 228, 229, 230, 240, 241, 242, 255, 256, 261, 266, 274, 276, 279, 280, 282, 283, 284, 285, 290, 293, 294, 295, 296, 297, 298, 302, 315, 319, 323, 324, 332, 333, 351, 356, 357, 361, 375, 378, 381, 388, 389, 395, 396, 404, 414, 415, 416, 423, 430, 431, 433, 454, 456, 458, 459, 465, 466, 467, 469], "i": [13, 43, 44, 47, 48, 52, 53, 56, 59, 63, 69, 81, 84, 104, 131, 142, 147, 149, 154, 155, 160, 161, 162, 166, 170, 171, 173, 174, 176, 180, 181, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 203, 205, 209, 213, 214, 216, 220, 222, 223, 228, 229, 230, 238, 239, 240, 241, 242, 243, 244, 247, 249, 252, 255, 263, 266, 268, 270, 272, 277, 285, 290, 294, 295, 299, 306, 316, 319, 321, 323, 324, 334, 340, 341, 345, 357, 362, 367, 376, 378, 388, 389, 393, 394, 395, 396, 399, 400, 402, 406, 409, 412, 414, 415, 416, 418, 419, 420, 422, 423, 424, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 442, 444, 445, 446, 448, 449, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469], "iter": [13, 15, 104, 139, 147, 161, 171, 173, 175, 180, 181, 184, 185, 189, 194, 198, 199, 216, 228, 229, 233, 238, 242, 243, 295, 297, 324, 357, 378, 381, 395, 396, 399, 414, 416, 431, 456, 458, 459, 464, 466, 468], "return": [13, 16, 44, 52, 66, 67, 69, 73, 104, 115, 147, 148, 149, 154, 155, 156, 161, 163, 170, 172, 173, 174, 175, 176, 178, 184, 185, 198, 205, 209, 213, 214, 215, 220, 225, 228, 229, 242, 249, 252, 255, 263, 264, 266, 267, 268, 270, 276, 277, 284, 288, 293, 294, 295, 297, 302, 308, 312, 314, 316, 317, 319, 320, 321, 323, 324, 328, 332, 334, 351, 356, 357, 361, 369, 373, 375, 376, 378, 381, 386, 388, 389, 395, 396, 416, 420, 430, 433, 453, 456, 459, 463, 464, 466], "true": [13, 84, 112, 145, 147, 161, 180, 181, 194, 196, 198, 199, 212, 213, 214, 238, 240, 242, 243, 254, 255, 260, 264, 270, 288, 311, 317, 323, 334, 357, 372, 376, 381, 388, 389, 416, 420, 424, 430, 431, 434, 437, 438, 458, 459, 463, 464, 465, 466, 468], "els": [13, 147, 181, 194, 238, 334, 386, 439, 464], "fals": [13, 15, 41, 42, 46, 47, 48, 70, 71, 88, 91, 98, 101, 102, 104, 112, 130, 135, 142, 145, 146, 147, 154, 155, 161, 163, 180, 181, 186, 188, 196, 198, 209, 213, 214, 215, 216, 222, 230, 232, 240, 242, 252, 255, 266, 270, 319, 323, 334, 357, 376, 381, 389, 399, 416, 424, 430, 431, 444, 448, 458, 459, 463, 464, 465, 468], "boolean": 13, "ensure_list": 13, "x": [13, 53, 73, 171, 180, 181, 195, 213, 239, 255, 302, 361, 376, 420, 432, 433, 459, 463, 464, 465, 467], "ensur": [13, 213, 255, 302, 361, 420, 459, 465], "list": [13, 42, 43, 52, 104, 139, 147, 148, 149, 152, 155, 161, 170, 171, 172, 173, 180, 181, 184, 185, 189, 196, 209, 213, 214, 228, 229, 233, 240, 252, 255, 259, 260, 263, 264, 266, 267, 268, 270, 277, 285, 290, 293, 296, 311, 316, 317, 319, 320, 321, 323, 324, 332, 340, 341, 345, 357, 372, 376, 378, 379, 389, 395, 398, 399, 416, 422, 424, 428, 431, 434, 439, 441, 444, 445, 448, 453, 456, 458, 459, 460, 463, 464, 466], "input": [13, 15, 42, 43, 44, 52, 59, 63, 66, 67, 69, 70, 71, 73, 81, 82, 84, 85, 104, 108, 109, 115, 121, 140, 147, 148, 153, 154, 155, 159, 170, 171, 180, 181, 184, 185, 196, 197, 198, 200, 209, 212, 213, 218, 228, 229, 240, 241, 242, 244, 252, 254, 255, 258, 259, 260, 323, 324, 328, 332, 357, 378, 386, 388, 389, 396, 399, 414, 415, 416, 418, 419, 420, 422, 424, 426, 430, 431, 433, 434, 439, 456, 458, 459, 463, 464, 465, 468], "check_mx_vers": 13, "version": [13, 52, 103, 155, 170, 181, 259, 260, 315, 393, 395, 399, 424, 428, 429, 431, 444, 446, 448, 449, 455, 457, 463, 466, 467], "str": [13, 42, 139, 148, 149, 152, 153, 154, 155, 156, 163, 170, 180, 181, 196, 197, 198, 205, 209, 213, 215, 219, 220, 240, 241, 242, 249, 252, 255, 259, 260, 263, 264, 266, 268, 270, 277, 288, 311, 314, 316, 317, 319, 321, 323, 342, 350, 352, 355, 356, 372, 375, 376, 381, 386, 389, 390, 416, 430, 458, 464, 465], "mx": 13, "__version__": 13, "combine_cap": 13, "current": [13, 69, 103, 153, 166, 170, 172, 173, 180, 181, 272, 279, 280, 282, 283, 284, 293, 295, 302, 306, 361, 367, 389, 395, 396, 399, 420, 424, 430, 431, 434, 438, 451, 453, 456, 459, 463, 466], "new": [13, 16, 147, 153, 161, 186, 198, 213, 214, 230, 242, 255, 294, 334, 394, 420, 431, 432, 445, 451, 452, 456, 457, 459, 461, 462, 465, 467, 468], "combin": [13, 155, 180, 181, 184, 185, 209, 223, 228, 229, 252, 324, 357, 378, 389, 395, 399, 427, 431, 454, 457, 459, 460, 465, 466], "capabl": [13, 46, 312, 373, 414, 424, 431, 432, 442, 456, 458, 459, 466, 468], "contain": [13, 66, 67, 69, 73, 138, 147, 149, 155, 161, 162, 170, 172, 173, 175, 176, 180, 181, 184, 185, 196, 197, 198, 228, 229, 240, 241, 242, 256, 260, 261, 266, 267, 268, 272, 285, 288, 290, 293, 294, 295, 296, 297, 298, 319, 320, 321, 324, 357, 378, 381, 388, 416, 418, 427, 430, 452, 456, 464, 466, 467], "make_nc_model": 13, "target": [13, 42, 43, 101, 170, 175, 176, 181, 294, 297, 302, 361, 416, 420, 431, 456, 464, 465, 466, 468], "sym_model": 13, "ctx": 13, "input_desc": 13, "convert": [13, 43, 47, 48, 49, 51, 52, 53, 54, 55, 65, 73, 85, 98, 99, 101, 102, 103, 104, 130, 135, 141, 148, 155, 170, 180, 181, 196, 209, 212, 213, 240, 252, 254, 255, 259, 266, 272, 294, 312, 319, 373, 376, 395, 431, 432, 436, 459, 460, 463, 465, 466], "symbol": [13, 148, 154, 155, 263, 316, 324, 357, 395, 433], "model": [13, 15, 16, 29, 41, 42, 43, 44, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 115, 117, 139, 140, 141, 147, 148, 149, 152, 153, 154, 155, 159, 161, 162, 168, 170, 173, 175, 176, 180, 181, 184, 185, 192, 195, 196, 198, 213, 214, 217, 218, 225, 228, 229, 236, 239, 240, 242, 255, 256, 258, 259, 260, 261, 262, 270, 271, 272, 273, 276, 279, 280, 282, 283, 284, 285, 290, 294, 295, 296, 297, 298, 299, 302, 303, 305, 307, 308, 315, 323, 324, 334, 350, 355, 356, 357, 358, 361, 362, 363, 366, 368, 369, 375, 376, 378, 384, 386, 388, 389, 391, 395, 396, 398, 399, 404, 414, 415, 416, 418, 419, 420, 421, 426, 427, 429, 430, 432, 434, 439, 441, 442, 445, 451, 453, 454, 455, 457, 459, 461, 462, 464, 465, 466, 467, 468], "an": [13, 66, 67, 69, 104, 140, 142, 149, 155, 160, 173, 180, 181, 189, 194, 198, 213, 217, 222, 233, 238, 242, 255, 262, 263, 267, 268, 276, 277, 299, 315, 316, 320, 321, 324, 351, 356, 357, 376, 378, 389, 391, 393, 395, 396, 398, 399, 415, 416, 417, 422, 430, 431, 432, 434, 438, 439, 442, 451, 453, 456, 457, 459, 462, 463, 464, 465, 466], "neural": [13, 149, 161, 162, 172, 180, 181, 208, 209, 210, 213, 214, 217, 220, 223, 252, 253, 255, 257, 262, 269, 270, 272, 285, 290, 293, 296, 298, 299, 304, 310, 315, 322, 323, 324, 328, 335, 357, 364, 365, 371, 386, 391, 394, 399, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 429, 430, 432, 433, 435, 436, 439, 441, 442, 444, 446, 448, 449, 450, 453, 454, 457, 459, 461, 463, 464, 465, 466, 468, 469], "compressor": [13, 161, 162, 172, 180, 181, 208, 209, 210, 213, 214, 217, 220, 223, 252, 253, 255, 257, 262, 269, 270, 272, 293, 296, 298, 299, 304, 310, 315, 322, 323, 324, 328, 335, 357, 365, 371, 386, 391, 394, 396, 399, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 429, 430, 432, 433, 434, 435, 439, 441, 442, 444, 446, 448, 449, 450, 453, 454, 456, 457, 459, 461, 463, 464, 465, 466, 467, 468, 469], "tupl": [13, 104, 147, 155, 181, 184, 185, 209, 213, 228, 229, 252, 255, 260, 311, 324, 357, 372, 378, 416, 430, 431, 459, 465], "symnet": 13, "arg": [13, 52, 104, 196, 197, 198, 240, 241, 242, 293, 302, 361, 376, 384, 385, 415, 416, 420, 431, 440, 459, 463, 464, 465], "aux": 13, "data": [13, 42, 43, 54, 104, 139, 147, 149, 153, 155, 159, 170, 180, 181, 184, 185, 214, 216, 228, 229, 262, 302, 312, 314, 315, 324, 350, 355, 357, 361, 373, 375, 378, 381, 386, 389, 398, 399, 415, 416, 420, 424, 425, 428, 430, 431, 432, 459, 460, 461, 462, 463, 464, 465, 466], "descript": [13, 131, 376, 394, 395, 463], "ncmodel": 13, "fuse": [13, 57, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 90, 91, 92, 93, 95, 130, 135, 154, 155, 159, 395, 463, 464], "suppli": 13, "get_framework_nam": 13, "get": [13, 42, 44, 66, 67, 69, 103, 104, 147, 153, 155, 161, 166, 168, 170, 172, 173, 174, 175, 178, 181, 189, 213, 214, 220, 222, 233, 255, 293, 295, 297, 305, 312, 314, 323, 332, 357, 366, 373, 375, 381, 389, 423, 427, 428, 431, 437, 463, 466, 467, 470], "name": [13, 43, 44, 52, 66, 67, 69, 103, 104, 109, 115, 139, 147, 148, 149, 153, 154, 155, 156, 161, 166, 170, 172, 173, 174, 175, 178, 180, 181, 196, 197, 198, 201, 205, 211, 213, 214, 218, 221, 222, 240, 241, 242, 245, 249, 255, 258, 259, 260, 265, 270, 288, 293, 295, 297, 312, 314, 318, 323, 328, 332, 334, 357, 373, 375, 379, 381, 389, 395, 416, 420, 422, 424, 429, 430, 431, 433, 437, 444, 448, 452, 455, 456, 459, 461, 462, 464, 466, 468, 469], "context": [13, 389, 458], "prepare_model_data": 13, "nc_model": [13, 285, 290], "data_x": 13, "prepar": [13, 155, 395, 398, 416, 420, 425, 459], "dataload": [13, 15, 42, 139, 140, 149, 153, 155, 161, 168, 170, 184, 185, 196, 207, 217, 228, 229, 240, 251, 256, 262, 285, 290, 299, 315, 350, 355, 357, 378, 381, 395, 398, 399, 418, 419, 420, 425, 426, 430, 431, 432, 454, 459, 460, 463, 464, 465, 468], "need": [13, 42, 104, 108, 153, 161, 170, 181, 184, 185, 186, 194, 195, 198, 205, 213, 216, 218, 219, 228, 229, 230, 238, 239, 242, 249, 255, 299, 305, 323, 324, 334, 357, 366, 378, 388, 389, 395, 399, 415, 416, 418, 420, 427, 431, 432, 434, 436, 437, 440, 444, 445, 446, 448, 449, 451, 452, 456, 458, 459, 460, 461, 463, 465, 466, 468], "run": [13, 139, 147, 161, 173, 176, 180, 181, 184, 185, 195, 212, 214, 228, 229, 239, 254, 294, 295, 302, 324, 357, 361, 378, 394, 399, 414, 420, 423, 424, 431, 432, 434, 436, 438, 439, 440, 442, 444, 445, 446, 448, 449, 451, 457, 459, 461, 462, 464, 466, 468], "loader": [13, 139, 184, 185, 228, 229, 324, 357, 378, 384, 459], "dataloaderwrap": 13, "prepare_model": 13, "create_data_exampl": 13, "creat": [13, 16, 104, 180, 181, 186, 196, 198, 216, 230, 240, 242, 266, 276, 277, 312, 319, 351, 356, 373, 376, 381, 393, 396, 399, 416, 433, 444, 446, 448, 449, 452, 459, 462, 464, 466], "exampl": [13, 149, 155, 161, 170, 171, 180, 181, 196, 197, 198, 209, 213, 240, 241, 242, 252, 255, 266, 267, 268, 270, 296, 319, 320, 321, 323, 324, 334, 357, 376, 378, 393, 394, 398, 404, 426, 427, 434, 437, 438, 439, 442, 460, 461, 465, 466, 467, 470], "prepare_dataload": 13, "io": 13, "ndarray_to_devic": 13, "ndarrai": [13, 42, 66, 67, 69, 213, 255, 379, 423, 465], "devic": [13, 78, 88, 89, 90, 91, 92, 93, 96, 106, 130, 135, 146, 170, 171, 180, 181, 418, 431, 432, 434, 437, 442, 451, 458], "is_model_quant": 13, "query_quantizable_nod": 13, "queri": [13, 46, 147, 155, 170, 180, 181, 459], "node": [13, 42, 43, 49, 52, 53, 54, 55, 59, 61, 63, 66, 67, 69, 73, 76, 79, 81, 82, 83, 97, 101, 102, 104, 109, 131, 139, 147, 170, 258, 332, 356, 399, 420, 464, 466], "given": [13, 16, 66, 67, 69, 103, 104, 115, 147, 155, 213, 255, 266, 319, 357, 396, 456, 463, 465], "map": [13, 43, 104, 147, 181, 213, 255, 258, 261, 265, 267, 268, 270, 285, 290, 295, 298, 318, 320, 321, 323, 416, 420, 430, 431, 444, 448, 456, 459], "quantize_sym_model": 13, "qconfig": [13, 464], "accord": [13, 121, 155, 161, 180, 181, 196, 197, 198, 213, 240, 241, 242, 255, 305, 364, 366, 381, 396, 399, 416, 420, 456, 460, 463, 465, 466], "run_forward": 13, "b_filter": 13, "collector": [13, 149, 379], "none": [13, 41, 43, 44, 46, 47, 48, 62, 88, 101, 103, 104, 109, 115, 141, 147, 149, 153, 155, 161, 162, 163, 168, 170, 172, 176, 177, 178, 180, 181, 184, 185, 186, 188, 194, 196, 197, 198, 199, 200, 201, 203, 209, 213, 214, 215, 216, 223, 225, 228, 229, 230, 232, 238, 240, 241, 242, 243, 244, 245, 247, 252, 255, 256, 259, 260, 261, 266, 270, 271, 272, 273, 276, 285, 290, 294, 298, 302, 303, 305, 307, 308, 312, 319, 323, 324, 334, 350, 355, 356, 357, 358, 361, 362, 363, 366, 368, 369, 373, 376, 378, 379, 381, 386, 388, 389, 399, 416, 430, 459, 464, 465, 466], "pre_batch": 13, "post_batch": 13, "forward": [13, 398, 431, 456, 458, 459, 463, 464], "propag": [13, 99], "filter": [13, 196, 197, 198, 199, 200, 201, 203, 207, 240, 241, 242, 243, 244, 245, 247, 251, 262, 315, 389, 415, 416, 427, 456, 464], "which": [13, 42, 54, 82, 109, 149, 153, 166, 170, 171, 172, 173, 175, 176, 180, 181, 196, 197, 198, 209, 214, 240, 241, 242, 252, 263, 268, 277, 279, 280, 282, 283, 284, 288, 293, 294, 295, 297, 302, 316, 321, 323, 328, 334, 357, 361, 389, 393, 395, 396, 399, 415, 416, 418, 420, 423, 424, 427, 430, 431, 432, 433, 435, 439, 442, 445, 451, 452, 454, 456, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468], "batch": [13, 155, 186, 188, 189, 194, 195, 216, 230, 232, 233, 238, 239, 378, 415, 418, 419, 431, 454, 456, 465, 466, 469], "infer": [13, 104, 170, 261, 298, 332, 334, 357, 378, 399, 418, 419, 431, 432, 451, 453, 456, 457, 459, 463, 464, 466], "collect": [13, 16, 43, 211, 213, 216, 218, 219, 221, 255, 268, 270, 321, 323, 379, 389, 459, 464, 466], "inform": [13, 149, 166, 170, 172, 173, 174, 175, 176, 181, 184, 185, 216, 218, 219, 228, 229, 293, 295, 296, 297, 299, 323, 389, 393, 394, 397, 398, 399, 400, 402, 406, 409, 412, 418, 424, 431, 433, 446, 449, 452, 456, 460, 461, 464, 468, 469, 470], "dure": [13, 139, 172, 175, 180, 181, 293, 297, 334, 389, 431, 432, 433, 453, 454, 456, 459, 463, 464, 468], "call": [13, 42, 153, 156, 170, 173, 266, 295, 319, 395, 396, 399, 415, 426, 440, 442, 452, 459, 463, 464, 465], "prior": [13, 87, 466], "after": [13, 77, 155, 168, 172, 173, 180, 181, 196, 209, 213, 216, 240, 252, 255, 295, 362, 376, 396, 415, 416, 418, 419, 422, 427, 430, 431, 444, 445, 448, 452, 453, 454, 456, 459, 460, 462, 463, 464, 465, 466], "count": [13, 396, 416], "int": [13, 16, 42, 43, 104, 139, 147, 152, 155, 168, 180, 181, 195, 196, 197, 209, 213, 239, 240, 241, 252, 255, 259, 260, 264, 266, 270, 277, 317, 319, 323, 342, 351, 356, 376, 389, 416, 430, 431, 458, 465], "make_symbol_block": 13, "gluon": [13, 324, 357, 433], "symbolblock": 13, "make_modul": 13, "parse_tune_config": 13, "tune_cfg": [13, 147, 148, 155, 399, 466], "quantizable_nod": 13, "strategi": [13, 155, 173, 180, 181, 182, 198, 226, 242, 262, 315, 398, 399, 404, 420, 427, 431, 439, 451, 457, 458, 459, 460, 461, 467, 468], "config": [13, 114, 115, 117, 121, 155, 161, 166, 168, 172, 173, 174, 175, 176, 180, 184, 185, 196, 225, 228, 229, 240, 279, 280, 282, 283, 284, 285, 290, 293, 294, 295, 296, 297, 312, 313, 315, 324, 351, 356, 373, 374, 376, 378, 381, 388, 389, 396, 398, 404, 414, 418, 419, 420, 422, 425, 427, 431, 432, 433, 454, 456, 458, 459, 460, 462, 464, 466], "tune": [13, 44, 161, 180, 181, 184, 185, 196, 198, 228, 229, 240, 242, 261, 298, 300, 301, 302, 303, 305, 306, 307, 308, 311, 312, 313, 314, 324, 334, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 372, 373, 374, 375, 378, 389, 399, 415, 416, 420, 427, 429, 431, 432, 451, 453, 456, 457, 460, 461, 462, 464, 468], "from": [13, 43, 44, 60, 66, 67, 69, 104, 147, 153, 155, 161, 162, 163, 166, 172, 173, 174, 175, 176, 180, 181, 184, 185, 186, 189, 193, 196, 197, 198, 199, 200, 201, 203, 208, 209, 215, 216, 219, 228, 229, 230, 233, 237, 240, 241, 242, 243, 244, 245, 247, 252, 256, 258, 259, 260, 263, 266, 267, 268, 272, 277, 293, 294, 295, 297, 312, 314, 316, 319, 320, 321, 324, 332, 334, 357, 373, 375, 376, 378, 381, 388, 389, 393, 395, 396, 399, 414, 415, 416, 418, 419, 420, 421, 422, 423, 425, 427, 430, 432, 433, 434, 438, 439, 440, 442, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467], "distribute_calib_tensor": 13, "calib_tensor": 13, "calib_cfg": 13, "tensor_to_nod": 13, "distribut": [13, 16, 142, 160, 180, 181, 186, 188, 189, 194, 216, 230, 232, 233, 238, 383, 398, 418, 428, 446, 449, 457, 459, 461, 463, 467, 469], "depend": [13, 184, 185, 214, 228, 229, 324, 357, 378, 394, 423, 424, 458, 459, 466], "algorithm": [13, 155, 177, 263, 270, 278, 315, 316, 323, 381, 383, 396, 399, 418, 419, 424, 427, 440, 445, 456, 459, 464, 468], "set": [13, 43, 56, 95, 104, 114, 147, 153, 155, 161, 176, 178, 180, 181, 184, 185, 186, 196, 198, 201, 213, 214, 219, 220, 228, 229, 230, 240, 242, 245, 255, 266, 272, 285, 290, 294, 299, 319, 323, 324, 332, 356, 357, 376, 378, 386, 389, 393, 396, 414, 416, 418, 420, 422, 424, 426, 427, 428, 430, 431, 432, 434, 436, 438, 452, 456, 458, 459, 462, 463, 466, 468], "kl": [13, 16, 180, 181, 379, 383, 424, 431, 466, 468], "minmax": [13, 16, 424, 459, 468], "calib_model": 13, "qsym_model": 13, "calib_data": 13, "calibdata": 13, "threshold": [13, 157, 379, 383, 430], "amp_convert": 13, "amp_cfg": 13, "support": [13, 42, 43, 96, 103, 153, 159, 163, 172, 173, 180, 181, 184, 185, 195, 196, 198, 205, 209, 213, 215, 216, 217, 220, 225, 228, 229, 239, 240, 242, 249, 252, 255, 262, 270, 272, 277, 293, 295, 299, 306, 312, 315, 323, 324, 328, 334, 357, 367, 373, 376, 378, 381, 383, 389, 391, 398, 431, 434, 439, 442, 445, 451, 457, 460, 462, 466, 467], "amp": [13, 434, 441, 455], "wrap": [13, 104, 115, 163, 215, 266, 319, 395, 420, 446, 449], "dataiterload": 13, "data_it": [13, 170], "collectorbas": 13, "calibcollector": 13, "include_tensors_kl": 13, "include_tensors_minmax": 13, "num_bin": [13, 16, 379], "8001": [13, 379], "tensorcollector": 13, "include_nod": 13, "qtensor_to_tensor": 13, "build": [13, 42, 114, 156, 157, 159, 160, 273, 276, 327, 329, 331, 332, 333, 399, 428, 433, 444, 446, 448, 449, 452, 457, 462, 466], "up": [13, 99, 213, 255, 294, 420, 421, 424, 427, 442, 446, 449, 451, 457, 458, 459, 462, 465, 466, 468], "namecollector": 13, "cache_kl": 13, "cache_minmax": 13, "tensors_kl": 13, "tensors_minmax": 13, "onnxruntimeadaptor": 14, "rt": 14, "onnxrt_qlinearopsadaptor": [14, 399], "onnxrt_integeropsadaptor": 14, "onnxrt_qdqadaptor": 14, "onnxrtaug": 15, "dump_op_typ": 15, "black_nod": [15, 139], "white_nod": 15, "backend": [15, 41, 42, 45, 159, 180, 181, 182, 183, 187, 188, 192, 196, 197, 199, 200, 201, 202, 203, 207, 210, 213, 219, 220, 226, 227, 231, 232, 234, 236, 240, 241, 243, 244, 245, 246, 247, 251, 253, 255, 271, 306, 324, 325, 326, 328, 367, 395, 420, 426, 427, 431, 432, 440, 458, 465, 468], "cpuexecutionprovid": [15, 41, 42, 459], "reduce_rang": [15, 41, 42, 180, 181, 458], "augment": 15, "dump": [15, 161, 260, 389, 459, 464], "calib_registri": 16, "calib_method": 16, "calibratorbas": 16, "minmaxcalibr": 16, "percentilecalibr": 16, "2048": [16, 389], "percentil": [16, 139], "99": [16, 463, 469], "999": [16, 468, 469], "option": [16, 104, 172, 180, 181, 184, 185, 196, 213, 228, 229, 240, 255, 259, 260, 266, 272, 293, 299, 312, 315, 319, 323, 324, 357, 373, 376, 378, 382, 389, 416, 424, 428, 431, 445, 456, 459, 462, 465, 466, 468], "number": [16, 66, 67, 104, 139, 155, 168, 172, 180, 181, 194, 197, 209, 213, 238, 241, 252, 255, 267, 268, 270, 293, 302, 320, 321, 323, 351, 356, 361, 376, 381, 389, 414, 416, 420, 430, 456, 459, 462, 465, 466], "bin": [16, 389, 423], "histogram": [16, 379, 389, 464], "valu": [16, 43, 54, 66, 67, 69, 88, 89, 104, 142, 147, 155, 160, 161, 166, 170, 171, 176, 177, 178, 180, 181, 184, 185, 196, 199, 200, 209, 213, 214, 228, 229, 240, 243, 244, 252, 255, 266, 270, 294, 302, 305, 312, 319, 323, 324, 357, 361, 366, 373, 376, 378, 379, 381, 389, 395, 416, 424, 430, 431, 437, 453, 456, 458, 459, 463, 465, 466, 468], "default": [16, 96, 147, 176, 178, 180, 181, 184, 185, 188, 196, 197, 198, 209, 213, 228, 229, 232, 240, 241, 242, 252, 255, 259, 260, 263, 272, 294, 314, 316, 323, 332, 375, 381, 389, 395, 399, 416, 424, 427, 428, 430, 431, 432, 439, 442, 444, 448, 453, 456, 458, 459, 460, 462, 463, 465, 466, 468], "float": [16, 43, 139, 140, 149, 172, 173, 174, 176, 180, 181, 196, 209, 240, 252, 264, 266, 267, 268, 295, 317, 319, 320, 321, 376, 386, 389, 416, 430, 458, 459, 463, 465], "A": [16, 53, 73, 74, 102, 115, 139, 140, 147, 155, 162, 166, 170, 172, 173, 174, 175, 176, 180, 181, 198, 213, 216, 218, 219, 225, 242, 255, 256, 263, 266, 267, 268, 270, 273, 276, 277, 278, 285, 288, 290, 293, 294, 295, 296, 297, 302, 316, 319, 320, 321, 323, 324, 328, 332, 361, 378, 389, 416, 421, 424, 430, 431, 433, 444, 445, 448, 451, 456, 457, 459, 463, 465, 466, 468], "between": [16, 42, 142, 160, 173, 180, 181, 213, 255, 267, 270, 320, 323, 351, 356, 389, 395, 399, 418, 427, 430, 431, 442, 459, 461, 462, 463, 465, 466], "0": [16, 43, 52, 89, 104, 147, 155, 157, 159, 163, 168, 180, 181, 186, 188, 196, 199, 200, 203, 209, 213, 215, 216, 230, 232, 240, 243, 244, 247, 252, 255, 260, 261, 270, 277, 285, 290, 298, 323, 334, 357, 362, 376, 395, 416, 418, 420, 422, 423, 424, 428, 429, 430, 431, 432, 437, 439, 444, 448, 455, 456, 458, 459, 461, 462, 463, 464, 465, 466, 468], "100": [16, 161, 180, 181, 198, 242, 376, 414, 416, 420, 426, 431, 458, 459, 463, 465, 466, 468, 469], "klcalibr": 16, "128": [16, 196, 199, 200, 213, 240, 243, 244, 255, 416, 431, 459, 465], "num_quantized_bin": 16, "histogramcollector": 16, "collctor": 16, "smooth_distribut": 16, "p": [16, 452], "ep": [16, 160, 432], "0001": [16, 180, 181, 418, 431, 458], "smooth": [16, 139, 140, 147, 153, 159, 180, 181, 311, 456], "discret": [16, 466], "mai": [16, 147, 279, 280, 282, 283, 284, 376, 393, 394, 398, 415, 422, 423, 429, 432, 444, 448, 455, 457, 459, 466], "have": [16, 73, 82, 140, 147, 171, 172, 173, 194, 216, 238, 263, 266, 293, 295, 316, 319, 323, 357, 375, 376, 393, 394, 415, 416, 420, 424, 429, 430, 431, 432, 434, 451, 453, 456, 459, 463, 466], "been": [16, 172, 173, 263, 293, 295, 316, 394, 396, 418, 431, 432, 451, 463], "normal": [16, 33, 213, 255, 268, 321, 431, 453, 463, 465], "1": [16, 42, 43, 53, 73, 88, 104, 108, 112, 145, 147, 153, 155, 157, 159, 160, 161, 163, 173, 180, 181, 186, 188, 195, 196, 197, 199, 200, 203, 204, 209, 213, 214, 215, 216, 230, 232, 239, 240, 241, 243, 244, 247, 248, 252, 255, 261, 266, 267, 268, 270, 285, 290, 295, 298, 299, 319, 320, 321, 323, 334, 357, 376, 381, 393, 395, 398, 399, 415, 416, 418, 422, 424, 425, 428, 430, 432, 435, 437, 453, 454, 455, 456, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468], "replac": [16, 153, 268, 321, 420, 431, 442, 461], "zero": [16, 43, 173, 176, 213, 255, 295, 389, 398, 456, 459, 463, 465, 466], "multipli": 16, "scale": [16, 43, 99, 140, 142, 153, 155, 159, 160, 209, 213, 252, 255, 459, 462, 463, 465, 466], "factor": [16, 140, 455, 463, 469], "take": [16, 172, 181, 184, 185, 189, 213, 218, 228, 229, 233, 255, 293, 302, 323, 324, 357, 361, 378, 393, 395, 396, 415, 418, 424, 431, 451, 456, 459, 460, 465, 466, 468], "correspond": [16, 149, 170, 173, 180, 181, 196, 240, 263, 266, 270, 316, 319, 323, 381, 389, 399, 424, 431, 456, 458, 459, 462, 463, 466], "amount": 16, "off": [16, 66, 67, 69, 394], "non": [16, 294, 389, 395, 455, 466], "ref": [16, 147], "http": [16, 149, 166, 172, 173, 196, 198, 240, 242, 263, 264, 266, 267, 268, 293, 295, 296, 316, 317, 319, 320, 321, 323, 357, 395, 398, 416, 425, 428, 429, 431, 440, 446, 449, 461], "hanj": 16, "c": [16, 73, 198, 242, 416, 423, 428, 466], "illinoi": 16, "edu": [16, 198, 242, 416], "cs412": 16, "bk3": 16, "diverg": [16, 379, 383, 418, 466], "pdf": 16, "github": [16, 149, 172, 196, 240, 263, 264, 267, 268, 293, 296, 316, 317, 320, 321, 323, 357, 394, 416, 421, 428, 429, 431, 440, 446, 449, 461], "com": [16, 149, 172, 196, 240, 263, 264, 267, 268, 293, 296, 316, 317, 320, 321, 323, 357, 393, 398, 416, 425, 428, 429, 431, 434, 440, 461, 462, 469], "apach": [16, 429], "incub": 16, "blob": [16, 149, 172, 263, 264, 267, 268, 293, 316, 317, 320, 321, 323, 357, 431, 440], "master": [16, 172, 263, 264, 267, 268, 293, 296, 316, 317, 320, 321, 323, 357, 431, 466], "python": [16, 74, 147, 198, 217, 242, 262, 315, 376, 389, 391, 394, 395, 416, 420, 423, 428, 431, 436, 442, 445, 451, 457, 465], "contrib": [16, 262, 315], "py": [16, 147, 149, 161, 173, 180, 181, 264, 266, 267, 268, 295, 317, 319, 320, 321, 376, 395, 399, 420, 428, 431, 436, 438, 439, 440, 446, 449, 459, 461, 464], "microsoft": [16, 399], "onnxruntim": [16, 180, 181, 192, 198, 205, 236, 242, 249, 271, 351, 399, 427, 428, 432, 458], "main": [16, 220, 296, 395, 420, 431, 438, 440, 452, 456, 459], "tool": [16, 147, 259, 389, 398, 399, 431, 444, 448, 456, 457, 459], "arrai": [16, 43, 147, 213, 255, 266, 277, 319, 389, 465], "small": [16, 66, 67, 68, 364, 396, 456, 466], "probabl": [16, 180, 181, 383], "activationoper": 18, "onnx_quant": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "onnx_nod": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 86, 100, 110], "removableactivationoper": 18, "remov": [18, 43, 55, 56, 59, 73, 79, 82, 83, 84, 95, 97, 139, 168, 173, 268, 321, 393, 394, 431, 444, 448, 456, 464], "qactivationoper": 18, "children": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39], "initi": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 42, 43, 104, 115, 147, 163, 173, 184, 185, 193, 196, 215, 228, 229, 237, 240, 294, 295, 312, 357, 373, 378, 396, 415, 416, 430, 450, 456, 459, 463, 466], "qoper": [18, 34, 180, 181], "format": [18, 43, 52, 147, 180, 181, 196, 197, 198, 240, 241, 242, 260, 266, 272, 312, 319, 373, 376, 416, 420, 422, 430, 431, 432, 433, 434, 459], "float16activationoper": 18, "float16": [18, 21, 43, 416], "argmaxoper": 19, "qargmaxoper": 19, "attentionoper": 20, "qattentionoper": 20, "qattent": 20, "binari": [21, 147, 270, 323, 423, 430, 446, 449], "binaryoper": 21, "qbinaryoper": 21, "qbinari": 21, "float16binaryoper": 21, "concatoper": 22, "qconcatoper": 22, "qconcat": 22, "convoper": 23, "qconvoper": 23, "qlinearconv": 23, "direct8bit": 24, "direct8bitoper": 24, "qdirectoper": 24, "qdirect": 24, "embedlayernorm": 25, "embedlayernormalizationoper": 25, "qembedlayernormalizationoper": 25, "qembedlayernorm": 25, "gatheroper": 26, "qgatheroper": 26, "qgather": 26, "globalaveragepool": 27, "globalaveragepooloper": 27, "qglobalaveragepooloper": 27, "qlinearglobalaveragepool": 27, "gemmoper": 28, "qgemmoper": 28, "qgemm": 28, "lstmoper": 30, "matmuloper": 31, "qmatmuloper": 31, "qlinearmatmul": 31, "fusedmatmuloper": 31, "fusedmatmul": 31, "maxpooloper": 32, "qmaxpooloper": 32, "qmaxpool": 32, "batchnormalizationoper": 33, "batchnorm": [33, 61, 66, 120, 395, 463], "normalizationoper": 33, "op_registri": 34, "op_typ": [34, 139, 147, 313, 374], "qop_registri": 34, "padoper": 35, "qpadoper": 35, "qpad": 35, "averagepool": 36, "pooloper": 36, "qpooloper": 36, "qlinearaveragepool": 36, "reduceoper": 37, "resizeoper": 38, "qresizeoper": 38, "qresiz": 38, "splitoper": 39, "qsplitoper": 39, "qsplit": 39, "unari": 40, "unaryoper": 40, "q_config": [41, 260, 399], "mode": [41, 42, 43, 44, 109, 153, 205, 249, 266, 312, 319, 332, 373, 386, 389, 399, 427, 444, 448, 459, 460, 466], "static": [41, 42, 46, 153, 159, 170, 181, 312, 357, 373, 399, 422, 427, 431, 434, 439, 440, 441, 442, 445, 451, 463, 466, 469], "quantization_param": 41, "op_types_to_quant": 41, "fallback_list": 41, "fp32": [41, 42, 78, 130, 135, 142, 155, 160, 180, 181, 184, 185, 228, 229, 259, 260, 270, 305, 312, 323, 362, 366, 373, 381, 388, 389, 398, 399, 424, 425, 430, 431, 432, 441, 458, 459, 460, 461, 462, 463, 464, 466, 468, 469], "add_qdq_pair_to_weight": [41, 180, 181, 459], "optypes_to_exclude_output_qu": [41, 180, 181, 459], "dedicated_qdq_pair": [41, 180, 181, 459], "smoothquant": [42, 153, 155, 159, 398, 457, 467], "onnxrt": [42, 43, 196, 198, 205, 213, 240, 242, 249, 255, 270, 323, 350, 387, 399, 432, 459], "get_quant_dequant_output": 42, "input_data": [42, 415], "output_data": 42, "loss": [42, 163, 180, 181, 215, 261, 270, 285, 290, 298, 323, 378, 418, 419, 420, 421, 430, 431, 432, 442, 454, 456, 459, 463, 466, 468], "output": [42, 43, 52, 56, 58, 73, 97, 104, 109, 147, 155, 170, 171, 172, 178, 180, 181, 184, 185, 218, 222, 228, 229, 259, 260, 263, 293, 316, 323, 324, 332, 357, 378, 384, 385, 389, 395, 399, 418, 419, 420, 422, 424, 426, 430, 431, 433, 442, 451, 452, 454, 456, 458, 459, 463, 464, 465, 466, 468], "numpi": [42, 43, 66, 67, 69, 104, 147, 213, 255, 266, 277, 319, 423, 465], "7": [42, 161, 180, 181, 334, 414, 423, 424, 428, 431, 456, 459, 461, 463, 466, 469], "bit": [42, 180, 181, 419, 432, 457, 459, 463], "execut": [42, 43, 52, 161, 173, 180, 181, 295, 299, 301, 356, 357, 358, 360, 378, 381, 388, 389, 418, 419, 431, 432, 436, 437, 444, 445, 448, 451, 452, 454, 456, 459, 462, 466, 469], "provid": [42, 43, 101, 104, 109, 170, 184, 185, 213, 228, 229, 255, 261, 266, 285, 290, 298, 299, 319, 324, 357, 378, 382, 384, 396, 398, 399, 414, 415, 419, 420, 421, 427, 428, 431, 432, 433, 434, 438, 442, 445, 451, 452, 456, 458, 459, 464, 466, 467, 468, 469], "make_sub_graph": 42, "opset": [42, 101, 103, 104, 181, 259, 260, 422], "ir_vers": 42, "thi": [42, 44, 85, 109, 131, 138, 142, 146, 149, 155, 160, 162, 168, 170, 172, 173, 174, 175, 180, 181, 184, 185, 195, 196, 197, 198, 199, 200, 201, 203, 213, 216, 222, 223, 228, 229, 239, 240, 241, 242, 243, 244, 245, 247, 255, 263, 266, 267, 268, 270, 279, 280, 282, 283, 284, 285, 290, 293, 295, 297, 298, 299, 302, 305, 316, 319, 320, 321, 323, 324, 334, 357, 361, 366, 376, 378, 388, 389, 393, 394, 395, 396, 399, 415, 416, 418, 419, 420, 422, 423, 424, 427, 429, 430, 431, 432, 433, 434, 436, 437, 439, 440, 442, 444, 446, 448, 449, 450, 451, 452, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467], "quant_dequant_data": 42, "qtype": [42, 43, 399], "3": [42, 147, 173, 181, 198, 213, 242, 255, 266, 319, 376, 395, 396, 398, 415, 416, 418, 420, 422, 424, 425, 428, 430, 431, 432, 434, 438, 442, 444, 448, 453, 458, 459, 462, 463, 465, 466, 469], "scheme": [42, 43, 155, 399, 415, 424, 442, 466, 468], "sym": [42, 43, 424, 459, 468], "dequant": [42, 43, 56, 87, 90, 91, 92, 93, 95, 149, 155, 389, 395, 463, 464], "asym": [42, 43, 424, 468], "ortsmoothqu": 42, "fake": [42, 112, 153, 159, 375, 431, 459, 463], "channel": [42, 43, 142, 153, 159, 160, 168, 171, 172, 180, 181, 209, 213, 252, 255, 293, 399, 427, 428, 434, 436, 441, 456, 465, 469], "For": [42, 159, 170, 171, 172, 181, 198, 213, 242, 255, 267, 268, 270, 293, 296, 320, 321, 323, 324, 357, 393, 395, 397, 399, 418, 419, 420, 422, 424, 427, 434, 436, 437, 439, 442, 456, 460, 463, 464, 466, 468, 469], "more": [42, 147, 153, 159, 172, 213, 255, 293, 396, 397, 398, 416, 418, 420, 422, 425, 427, 428, 430, 431, 432, 434, 442, 446, 449, 453, 454, 456, 460, 463, 466, 467, 469], "detail": [42, 153, 159, 170, 213, 255, 389, 390, 393, 394, 398, 418, 424, 425, 426, 430, 431, 432, 434, 442, 451, 456, 461, 462, 464, 466, 467, 469], "pleas": [42, 149, 153, 159, 166, 172, 173, 180, 181, 196, 197, 198, 201, 240, 241, 242, 245, 293, 295, 296, 323, 357, 376, 395, 396, 397, 398, 399, 414, 416, 419, 420, 422, 428, 430, 432, 434, 435, 439, 442, 456, 459, 460, 461, 462, 463, 467], "refer": [42, 149, 153, 159, 166, 172, 173, 176, 180, 181, 196, 240, 263, 264, 270, 293, 295, 296, 316, 317, 323, 357, 376, 395, 399, 414, 415, 416, 419, 420, 422, 426, 428, 429, 430, 431, 432, 434, 439, 442, 453, 458, 461, 465, 466], "accur": [42, 153, 159, 463], "effici": [42, 153, 159, 396, 415, 418, 434, 454, 457, 463, 466], "post": [42, 96, 97, 153, 159, 173, 181, 184, 185, 228, 229, 357, 393, 398, 399, 419, 420, 422, 427, 428, 434, 440, 451, 456, 457, 463, 464, 466], "train": [42, 55, 79, 153, 159, 162, 173, 180, 181, 184, 185, 196, 198, 213, 223, 228, 229, 240, 242, 255, 256, 272, 295, 315, 357, 381, 396, 398, 399, 404, 416, 418, 419, 422, 427, 432, 434, 440, 451, 454, 456, 457, 462, 463, 466, 468], "larg": [42, 153, 159, 398, 415, 418, 431, 456, 457, 463, 469], "languag": [42, 153, 159, 263, 316, 393, 398, 422, 456, 457, 463], "2": [42, 43, 52, 73, 104, 108, 153, 157, 159, 161, 172, 173, 180, 181, 197, 214, 241, 266, 268, 270, 295, 302, 319, 321, 323, 334, 361, 376, 395, 399, 416, 418, 422, 424, 425, 427, 428, 429, 430, 432, 453, 455, 456, 459, 461, 462, 463, 465, 466, 467], "spiq": [42, 153, 159, 463], "free": [42, 153, 159, 173, 184, 185, 228, 229, 357, 393, 398, 430, 440, 445, 453, 462, 463], "per": [42, 43, 153, 159, 161, 180, 181, 214, 383, 399, 455, 460, 469], "we": [42, 43, 66, 67, 69, 73, 85, 142, 153, 159, 160, 161, 170, 173, 180, 181, 195, 214, 216, 239, 263, 266, 316, 319, 364, 393, 395, 399, 415, 420, 422, 424, 430, 431, 438, 439, 442, 446, 449, 451, 452, 453, 454, 456, 458, 459, 462, 463, 464, 466, 467], "onli": [42, 52, 62, 69, 85, 108, 114, 142, 153, 159, 160, 161, 172, 173, 180, 181, 196, 214, 216, 220, 240, 272, 293, 295, 306, 357, 367, 376, 389, 398, 399, 414, 415, 418, 420, 423, 424, 431, 432, 439, 452, 456, 457, 458, 459, 463, 464, 466, 468], "inplac": [42, 153], "mean": [42, 153, 172, 173, 180, 181, 209, 213, 252, 255, 268, 270, 293, 305, 321, 323, 366, 395, 415, 420, 424, 430, 431, 437, 456, 459, 463, 465, 466, 468], "weight": [42, 43, 59, 60, 121, 140, 142, 147, 149, 153, 160, 166, 171, 172, 173, 174, 180, 181, 293, 295, 312, 323, 357, 364, 373, 389, 390, 399, 419, 424, 426, 430, 431, 453, 456, 458, 459, 463, 464, 466, 468], "chang": [42, 95, 142, 153, 160, 173, 175, 180, 181, 295, 297, 364, 389, 394, 415, 420, 423, 429, 430, 431, 434, 444, 445, 448, 451, 456, 464, 465, 466], "you": [42, 153, 180, 181, 194, 196, 238, 240, 295, 323, 357, 394, 395, 416, 420, 428, 429, 430, 434, 436, 437, 439, 444, 448, 451, 452, 456, 459, 461, 462, 463, 464, 467], "can": [42, 142, 149, 153, 160, 170, 171, 172, 173, 175, 180, 181, 184, 185, 195, 198, 213, 214, 216, 228, 229, 239, 242, 255, 266, 268, 270, 293, 295, 297, 319, 321, 323, 324, 334, 357, 378, 389, 395, 396, 398, 399, 414, 415, 416, 418, 419, 420, 422, 424, 427, 428, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 442, 444, 445, 446, 448, 449, 451, 452, 453, 454, 455, 456, 458, 459, 460, 462, 463, 464, 465, 466, 468, 469], "recov": [42, 153, 389, 399, 419, 463], "helper": [43, 44, 109, 115, 147, 155, 196, 197, 198, 212, 240, 241, 242, 254, 258, 259, 260, 332, 387], "dtype_to_nam": 43, "dtype_map": 43, "dtype": [43, 101, 104, 180, 181, 199, 200, 209, 213, 243, 244, 252, 255, 416, 422, 424, 434, 458, 459, 463, 464, 465, 468], "its": [43, 59, 95, 147, 149, 170, 173, 181, 192, 198, 213, 236, 242, 255, 258, 264, 265, 295, 302, 317, 318, 361, 393, 416, 418, 429, 430, 432, 442, 444, 448, 451, 452, 455, 456, 462, 465, 466], "string": [43, 44, 115, 147, 161, 163, 170, 172, 173, 174, 175, 176, 177, 180, 181, 198, 215, 220, 242, 256, 261, 263, 266, 272, 273, 274, 276, 277, 285, 290, 293, 294, 295, 296, 297, 298, 316, 319, 328, 332, 381, 386, 389, 430, 463, 465], "represent": [43, 393, 395, 419, 456, 459], "quanttyp": 43, "repres": [43, 172, 173, 174, 176, 198, 203, 242, 247, 266, 268, 270, 319, 321, 323, 393, 416, 422, 456, 459, 466], "make_quant_nod": 43, "make": [43, 104, 142, 160, 172, 173, 175, 194, 238, 293, 295, 297, 389, 393, 394, 399, 414, 415, 424, 430, 431, 439, 444, 448, 451, 459, 460, 462, 463, 466], "quantizelinear": 43, "make_dquant_nod": 43, "axi": [43, 181], "dequantizelinear": 43, "is_b_transpos": 43, "wheter": 43, "inuput": 43, "b": [43, 73, 196, 240, 416, 430, 456, 463, 466], "transpos": [43, 72, 172, 213, 255, 259, 293, 465], "split_shared_bia": 43, "share": [43, 81, 97, 108, 140, 423, 424, 463, 466], "float_to_float16": 43, "float_to_bfloat16": 43, "bfloat16": [43, 432, 434, 442, 460], "cast_tensor": 43, "tensorproto": [43, 104], "remove_init_from_model_input": 43, "collate_pr": 43, "result": [43, 147, 149, 155, 209, 213, 252, 255, 263, 266, 267, 268, 270, 316, 319, 320, 321, 323, 337, 357, 364, 378, 388, 389, 393, 396, 398, 415, 418, 420, 427, 429, 430, 431, 439, 440, 451, 452, 453, 456, 457, 459, 462, 463, 464, 465, 466, 467, 469], "quantize_data_with_scale_zero": 43, "zero_point": 43, "point": [43, 209, 252, 267, 268, 277, 302, 320, 321, 361, 430, 451, 459, 463, 465, 466], "To": [43, 266, 319, 334, 394, 416, 420, 432, 435, 438, 444, 446, 448, 449, 458, 460, 461, 463, 466, 468], "pack": [43, 60], "comput": [43, 104, 149, 155, 263, 264, 267, 268, 270, 316, 317, 320, 321, 323, 378, 389, 419, 422, 430, 431, 432, 434, 445, 456, 457, 459, 463, 466], "linear": [43, 159, 168, 170, 171, 172, 173, 176, 180, 181, 293, 395, 418, 422, 431, 456, 463, 466], "transform": [43, 49, 142, 144, 145, 146, 152, 173, 196, 197, 198, 199, 200, 201, 203, 205, 207, 240, 241, 242, 243, 244, 245, 247, 249, 251, 262, 315, 395, 396, 415, 416, 418, 419, 420, 421, 425, 431, 434, 439, 440, 441, 442, 456, 457, 460, 463, 464, 468, 469], "when": [43, 52, 63, 69, 147, 171, 173, 176, 180, 181, 196, 197, 205, 213, 240, 241, 249, 255, 264, 294, 295, 317, 357, 378, 393, 396, 415, 416, 431, 442, 444, 445, 448, 452, 456, 459, 463, 465, 466], "uint8": [43, 209, 252, 266, 314, 319, 375, 399, 416, 424, 458, 459, 465, 468], "rmin": [43, 459], "rmax": [43, 459], "m": [43, 149, 172, 180, 181, 293, 418, 428, 434, 436, 439, 442, 446, 449, 456, 469], "where": [43, 180, 181, 266, 270, 319, 323, 375, 389, 418, 444, 448, 452, 463, 464], "max": [43, 103, 142, 160, 180, 181, 213, 255, 267, 268, 302, 320, 321, 361, 389, 398, 428, 431, 456, 459, 463, 465, 466], "ab": [43, 166, 173, 295, 459, 463], "np": [43, 213, 255, 302, 361, 420, 465, 466], "calculate_scale_zp": 43, "quantize_rang": 43, "calcul": [43, 59, 155, 166, 176, 181, 199, 200, 243, 244, 267, 268, 293, 295, 305, 320, 321, 366, 379, 389, 416, 430, 431, 442, 453, 456, 459, 462, 463, 466, 468], "quantize_data": 43, "add": [43, 51, 63, 108, 118, 147, 176, 180, 181, 196, 198, 220, 240, 242, 294, 312, 373, 394, 395, 415, 416, 420, 422, 424, 430, 431, 432, 446, 449, 462, 464, 466], "necessari": [43, 393, 396, 433, 452, 456, 462, 466], "intermedi": [43, 149, 163, 180, 181, 215, 395, 427, 459], "trasnform": 43, "full": [43, 196, 197, 198, 240, 241, 242, 389, 398, 416, 423, 429, 452, 456], "equat": [43, 268, 270, 321, 323, 459, 463], "r": [43, 142, 160, 428, 452, 455, 459, 469], "": [43, 104, 142, 147, 160, 170, 171, 172, 173, 177, 178, 180, 181, 195, 198, 212, 213, 214, 216, 218, 225, 239, 242, 254, 255, 268, 293, 295, 321, 323, 324, 328, 357, 386, 389, 393, 396, 418, 420, 422, 424, 427, 431, 432, 439, 442, 444, 448, 451, 454, 455, 456, 457, 458, 459, 461, 462, 463, 466, 468], "q": [43, 106, 108, 130, 463], "z": [43, 418, 463], "real": [43, 199, 216, 243, 420, 457, 459], "origin": [43, 153, 155, 170, 173, 176, 181, 196, 213, 214, 240, 255, 279, 280, 282, 283, 284, 294, 295, 314, 362, 375, 389, 394, 416, 439, 456, 459, 465, 466, 468], "quantize_data_per_channel": 43, "dequantize_data_with_scale_zero": 43, "tensor_valu": 43, "scale_valu": 43, "zo_valu": 43, "sacal": 43, "dequantize_data": 43, "valueinfo": 43, "tensor_nam": [43, 147], "new_dtyp": 43, "cast": [43, 56, 460, 465], "info": [43, 155, 172, 176, 211, 216, 221, 293, 328, 385, 389, 395, 433], "quantizedvalu": 43, "new_quantized_nam": 43, "scale_nam": 43, "zero_point_nam": 43, "quantized_value_typ": 43, "quint8": 43, "linearli": 43, "intial": 43, "quantizediniti": 43, "quantized_data": 43, "quantizationmod": 43, "quantizedvaluetyp": 43, "quantformat": 43, "quantize_nparrai": 43, "arr": [43, 389], "low": [43, 184, 185, 199, 200, 228, 229, 243, 244, 261, 271, 298, 324, 399, 414, 416, 420, 431, 432, 457, 459, 463, 466], "high": [43, 199, 200, 243, 244, 416, 428, 457, 466], "attribute_to_kwarg": 43, "attribut": [43, 82, 103, 104, 147, 155, 170, 177, 178, 181, 389, 399, 415, 424, 426, 431, 458, 468], "kwarg": [43, 104, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 134, 136, 168, 180, 181, 198, 211, 213, 218, 221, 242, 255, 311, 313, 323, 324, 325, 327, 329, 331, 332, 333, 357, 372, 374, 376, 378, 384, 385, 388, 389, 415], "make_nod": 43, "find_by_nam": 43, "item_list": 43, "find": [43, 66, 67, 69, 104, 147, 270, 277, 302, 323, 361, 389, 399, 437, 444, 448, 451, 452, 462, 464, 466], "item": [43, 176, 178, 180, 181, 212, 254, 294, 312, 373, 420, 456, 463, 466], "trt_env_setup": 43, "environ": [43, 161, 214, 393, 414, 444, 448, 451, 466], "variabl": [43, 161, 174, 180, 181, 198, 214, 242, 302, 361, 428, 456, 466], "tensorrt": [43, 459], "get_ops_recurs": 44, "prefix": [44, 147, 148, 154, 161, 434, 439, 464], "graph_info": 44, "templateadaptor": 44, "tampl": 44, "dictionari": [44, 66, 67, 69, 147, 148, 149, 155, 177, 178, 180, 181, 212, 254, 266, 273, 276, 278, 319, 389], "yaml": [44, 176, 177, 178, 181, 184, 185, 196, 198, 214, 228, 229, 240, 242, 256, 261, 272, 273, 274, 276, 285, 290, 298, 299, 388, 389, 399, 426, 430, 431, 453, 458, 464, 465], "file": [44, 104, 147, 155, 158, 176, 177, 180, 181, 184, 185, 196, 197, 198, 201, 212, 213, 219, 222, 228, 229, 240, 241, 242, 245, 254, 255, 256, 261, 266, 272, 273, 274, 276, 285, 290, 294, 296, 298, 299, 319, 324, 334, 340, 341, 345, 357, 388, 389, 396, 399, 420, 423, 426, 429, 430, 431, 433, 437, 446, 449, 450, 451, 452, 453, 458, 459, 464, 465], "pytorchadaptor": 44, "api": [44, 69, 74, 109, 224, 261, 266, 298, 311, 312, 319, 323, 357, 372, 373, 376, 389, 394, 395, 400, 402, 406, 409, 412, 422, 427, 431, 436, 440, 441, 442, 461, 462, 466, 470], "pytorch_ipexadaptor": 44, "intel": [44, 172, 217, 220, 257, 262, 269, 270, 293, 296, 304, 310, 315, 322, 323, 335, 357, 365, 371, 391, 393, 394, 396, 397, 399, 415, 416, 417, 418, 419, 421, 422, 424, 425, 429, 432, 433, 434, 439, 441, 442, 453, 454, 455, 456, 457, 459, 460, 461, 463, 464, 466, 467, 468], "extens": [44, 389, 396, 398, 399, 424, 427, 428, 431, 432, 433, 435, 440, 441, 442, 446, 449, 450, 456, 457, 459, 463, 466, 467, 468], "ipex": [44, 155, 180, 181, 427, 431, 436, 440, 441, 463, 469], "pytorch_fxadaptor": 44, "fx": [44, 155, 180, 306, 367, 427, 440, 441, 457, 459, 460, 469], "graph": [44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 116, 129, 131, 135, 138, 141, 142, 144, 145, 146, 147, 170, 195, 239, 261, 325, 332, 356, 395, 399, 416, 418, 420, 426, 430, 433, 434, 459, 460, 464], "querybackendcap": [45, 399], "defin": [45, 85, 149, 151, 170, 172, 173, 174, 175, 180, 181, 184, 185, 228, 229, 273, 274, 276, 277, 278, 285, 290, 293, 294, 295, 297, 324, 357, 378, 388, 393, 396, 399, 415, 416, 418, 419, 424, 427, 430, 431, 452, 454, 456, 459, 462, 463, 464, 466, 468], "interfac": [45, 85, 112, 177, 261, 285, 290, 298, 299, 381, 427, 431, 442, 455, 459, 461], "each": [45, 140, 147, 149, 180, 181, 194, 198, 201, 209, 213, 238, 242, 245, 252, 255, 264, 266, 267, 268, 305, 317, 319, 320, 321, 366, 394, 399, 416, 418, 419, 424, 431, 432, 436, 442, 445, 451, 453, 456, 462, 463, 464, 465, 466, 467], "adapt": [45, 393, 398, 416, 442, 457], "should": [45, 53, 114, 115, 162, 168, 170, 180, 181, 184, 185, 194, 196, 198, 213, 218, 228, 229, 238, 240, 242, 255, 264, 317, 323, 324, 357, 376, 378, 389, 395, 396, 399, 416, 418, 420, 430, 431, 432, 437, 446, 449, 451, 453, 456, 459, 465, 466, 468], "implement": [45, 109, 142, 146, 184, 185, 191, 194, 195, 196, 198, 228, 229, 235, 238, 239, 240, 242, 263, 316, 324, 334, 357, 364, 378, 415, 416, 431, 442, 452, 456, 459, 461, 464, 466, 468], "inherit": [45, 162, 163, 173, 175, 180, 193, 213, 215, 223, 237, 255, 295, 297, 396, 399, 416], "own": [45, 73, 194, 213, 238, 255, 334, 396, 415, 416, 427, 430, 453, 462, 467], "tensorflowadaptor": 46, "stock": [46, 440, 463], "spr": 46, "tensorflow_itexadaptor": 46, "itex": [46, 108, 180, 181, 259, 459], "tensorflowqueri": [46, 399], "local_config_fil": 46, "performance_onli": [46, 47, 48, 106, 130, 135, 146, 180, 431], "itex_mod": [46, 47, 88, 106, 130, 135], "quant_mod": [46, 312, 373], "graphconvert": 47, "qt_config": 47, "recip": [47, 170, 180, 181, 261, 298, 431, 463, 466], "int8_sequ": 47, "fp32_op": [47, 49, 106], "bf16_op": [47, 49, 106, 460], "data_load": [47, 48, 399], "fake_qu": [47, 87, 106, 130, 135], "qdq_enabl": 47, "new_api": [47, 48, 70, 71, 76, 78, 91, 98, 130, 135, 142], "use_bf16": [47, 48, 180, 458], "without": [48, 89, 147, 173, 213, 255, 295, 314, 375, 393, 415, 418, 420, 430, 431, 442, 456, 457, 458, 466, 467], "graphconverterwithoutcalib": 48, "recover_config": 48, "rewrit": [49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 105, 106, 107, 108, 225], "bf16convert": [49, 460], "biasadd": [51, 58, 63, 65, 108, 424], "convertaddtobiasaddoptim": 51, "conv2d": [51, 58, 59, 60, 64, 65, 70, 124, 134, 142, 422, 424, 463, 464, 466], "addv2": [51, 68, 424], "layout": 52, "convertlayoutoptim": 52, "optim": [52, 73, 74, 78, 79, 115, 117, 170, 173, 177, 180, 181, 217, 223, 225, 261, 262, 278, 298, 302, 315, 361, 378, 379, 386, 389, 396, 398, 414, 418, 419, 420, 424, 425, 427, 428, 431, 433, 434, 436, 438, 439, 442, 445, 455, 456, 457, 458, 459, 460, 462, 463, 464, 466, 468], "nchw": 52, "nhwc": 52, "It": [52, 162, 172, 184, 185, 222, 228, 229, 268, 270, 277, 293, 298, 305, 321, 323, 324, 357, 362, 366, 378, 399, 418, 431, 437, 440, 445, 451, 452, 456, 459, 462, 466, 468], "exist": [52, 161, 178, 214, 332, 422, 430, 438, 466], "4": [52, 161, 172, 180, 181, 205, 208, 209, 213, 249, 252, 255, 263, 264, 266, 316, 317, 319, 376, 393, 399, 414, 420, 421, 424, 427, 428, 430, 431, 439, 455, 456, 459, 463, 465, 466, 469], "abov": [52, 399, 418, 456, 459, 463], "graph_def": [52, 147, 259, 324, 332, 356, 357], "leakyrelu": [53, 463], "convertleakyreluoptim": 53, "below": [53, 65, 73, 180, 181, 299, 323, 357, 394, 395, 398, 399, 415, 418, 420, 426, 430, 434, 436, 444, 445, 448, 451, 453, 454, 456, 458, 459, 462, 463, 464, 466, 467], "subgraph": [53, 65, 104, 154], "mul": [53, 64, 65, 68, 159, 422, 463], "maximum": [53, 172, 173, 180, 181, 196, 213, 240, 255, 264, 295, 302, 317, 361, 416, 431, 456, 459, 465], "note": [53, 172, 266, 306, 319, 367, 396, 420, 422, 424, 428, 431, 436, 439, 444, 448, 451, 456, 459, 463, 464, 466, 467, 468], "coeffici": [53, 456], "less": [53, 147, 180, 181, 389, 414, 418, 431, 456], "than": [53, 147, 196, 213, 240, 255, 389, 396, 398, 414, 416, 426, 430, 453, 454, 456, 459, 462, 465, 466], "convers": [53, 181, 272, 399, 431, 432, 459, 460, 463], "valid": [53, 66, 67, 104, 173, 176, 180, 181, 198, 242, 266, 294, 295, 319, 332, 394, 396, 398, 399, 416, 418, 421, 424, 427, 429, 431, 442, 456, 459, 461], "nan": 54, "random": [54, 147, 180, 181, 209, 213, 252, 255, 262, 278, 302, 304, 315, 361, 365, 389, 394, 396, 431, 458, 465, 468], "convertnantorandom": 54, "const": [54, 55, 62, 63, 66, 67, 69, 81, 97], "consist": [54, 62, 394, 395, 463, 466], "placehold": [55, 194, 238], "convertplaceholdertoconst": 55, "rerewrit": 56, "dequantizecastoptim": 56, "b16": 56, "dilat": 57, "contract": 57, "dilatedcontract": 57, "spacetobatchnd": 57, "batchtospacend": 57, "pattern": [57, 58, 60, 77, 95, 106, 107, 108, 130, 135, 155, 165, 167, 170, 171, 173, 174, 177, 180, 181, 198, 242, 262, 283, 284, 286, 291, 295, 312, 315, 373, 399, 416, 424, 427, 431, 452, 454, 458, 463, 469], "inject": [58, 431], "dummi": [58, 170, 199, 200, 243, 244, 270, 323, 398, 416, 425, 430, 431], "injectdummybiasaddoptim": 58, "fusion": [58, 60, 69, 77, 108, 125, 126, 127, 130, 131, 132, 136, 395, 399, 424], "expanddim": 59, "expanddimsoptim": 59, "next": [59, 189, 233, 376, 396, 458, 466], "featch": 60, "reshap": [60, 66, 67, 72, 463], "fetchweightfromreshapeoptim": 60, "handl": [60, 147, 153, 159, 385, 395, 397, 415, 463], "fold": [61, 62, 260, 424, 463], "foldbatchnormnodesoptim": 61, "graphfoldconstantoptim": 62, "sequenc": [62, 104, 171, 172, 180, 181, 196, 212, 213, 240, 254, 255, 264, 268, 293, 317, 321, 399, 416, 424, 456, 465], "self": [62, 170, 180, 181, 334, 399, 415, 416, 427, 430, 462, 464, 466], "supported_op_typ": 62, "fusebiasaddandaddoptim": 63, "second": [63, 171, 180, 181, 196, 240, 362, 389, 431, 444, 448, 452, 463, 466, 468], "columnwis": 64, "fusecolumnwisemuloptim": 64, "depthwiseconv2dn": [64, 70, 124, 134, 424], "math": [65, 459], "fuseconvwithmathoptim": 65, "elimin": 65, "sub": [65, 155, 161, 170, 214, 396, 466], "realdiv": [65, 68], "decompos": [66, 67], "fusedecomposedbnoptim": 66, "input_graph_def": [66, 67, 69], "node_name_from_input": [66, 67, 69], "node_nam": [66, 67, 69, 147, 332, 342], "strip": [66, 67, 69, 82, 83, 147, 464], "port": [66, 67, 69], "other": [66, 67, 69, 153, 159, 195, 239, 268, 321, 332, 393, 394, 395, 424, 427, 429, 431, 433, 453, 455, 456, 459, 463, 465, 466, 469], "underli": [66, 67, 69], "node_from_map": [66, 67, 69], "node_map": [66, 67, 69], "pull": [66, 67, 69], "def": [66, 67, 69, 184, 185, 228, 229, 357, 376, 378, 395, 399, 415, 416, 418, 419, 420, 430, 431, 459, 463, 464, 466], "entri": [66, 67, 69, 149, 220, 261, 299, 389, 429], "index": [66, 67, 69, 104, 161, 181, 189, 194, 198, 233, 238, 242, 277, 389, 416, 430, 452, 463], "everi": [66, 67, 69, 172, 173, 180, 181, 293, 295, 399, 439, 444, 448, 466], "identifi": [66, 67, 69, 266, 319, 332, 456], "want": [66, 67, 69, 170, 180, 181, 194, 196, 238, 240, 295, 362, 378, 395, 399, 416, 420, 430, 431, 432, 439, 451, 452, 453, 462, 464, 466], "nodedef": [66, 67, 69], "rais": [66, 67, 69, 104, 172, 173, 176, 266, 293, 294, 295, 319, 324, 376, 398, 456, 457], "valueerror": [66, 67, 69, 266, 319, 376, 423], "If": [66, 67, 69, 73, 161, 180, 181, 184, 185, 198, 213, 228, 229, 242, 255, 294, 324, 357, 376, 378, 394, 395, 414, 416, 420, 428, 429, 430, 431, 432, 437, 445, 446, 449, 451, 453, 459, 462, 463, 464, 465, 466], "isn": [66, 67, 69], "t": [66, 67, 69, 142, 160, 172, 180, 181, 213, 216, 255, 268, 321, 395, 399, 418, 420, 431, 452, 456, 459, 466, 468], "present": [66, 67, 69, 457, 463], "values_from_const": [66, 67, 69], "node_def": [66, 67, 69], "extract": [66, 67, 69, 147, 170, 198, 242, 314, 375, 416], "ha": [66, 67, 69, 73, 172, 173, 214, 263, 293, 295, 316, 376, 394, 396, 399, 415, 422, 427, 431, 432, 437, 451, 456, 458, 459, 460, 462, 463, 466], "access": [66, 67, 69, 177, 178, 181, 384, 389, 446, 449], "valid_reshape_input": [66, 67], "reshape_in0_ndef": [66, 67], "reshape_in1_ndef": [66, 67], "ar": [66, 67, 104, 155, 172, 173, 180, 181, 196, 213, 240, 255, 266, 270, 277, 293, 294, 295, 299, 301, 302, 319, 323, 358, 360, 361, 375, 376, 381, 388, 389, 393, 394, 395, 396, 398, 399, 415, 416, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 437, 439, 442, 445, 451, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 468], "bypass_reshap": [66, 67], "input_node_map": [66, 67], "input_nam": [66, 67, 101, 141, 181, 259, 260, 422], "get_const_dim_count": [66, 67], "dimens": [66, 67, 104, 188, 213, 232, 255, 416, 418, 465], "instancenorm": [67, 463], "fusedecomposedinoptim": 67, "gelu": 68, "fusegeluoptim": 68, "sqrt": 68, "erf": 68, "samll": 69, "layernorm": [69, 463], "fuselayernormoptim": 69, "remap": 69, "smaller": [69, 213, 255, 418, 431, 456, 465], "case": [69, 73, 161, 181, 195, 212, 213, 214, 239, 254, 255, 261, 285, 290, 298, 334, 415, 418, 419, 420, 424, 426, 430, 435, 439, 451, 452, 453, 456, 457, 459, 461, 465, 467, 468, 469], "fusedbatcnormv3": 69, "And": [69, 395, 414, 431, 437, 463], "further": [69, 181, 393, 432, 433, 434, 436, 445, 451, 459], "restrict": [69, 180, 181, 456, 462], "2d": [69, 463], "3d": [69, 457, 463], "kera": [69, 115, 181, 198, 205, 220, 242, 249, 327, 332, 420, 433, 441, 442, 469], "fusepadwithconv2doptim": 70, "excluded_op_nam": [70, 71, 177, 180, 181, 431, 456], "cfg": [70, 71, 155, 177, 312, 373, 381], "itex_qdq_mod": [70, 71], "conv3d": [70, 124], "fusepadwithfp32conv2doptim": 71, "fusetransposereshapeoptim": 72, "cse": [73, 97], "graphcseoptim": 73, "introduc": [73, 394, 399, 424, 431, 459, 461, 463, 467], "ident": [73, 79, 171, 393, 418], "three": [73, 176, 196, 240, 301, 358, 360, 395, 399, 415, 428, 432, 445, 454, 459, 460, 462, 463, 464], "d": [73, 155, 418, 426, 452, 469], "those": [73, 305, 366, 389, 418, 419, 426, 431, 454, 456, 459, 466], "child": [73, 464], "b1": 73, "c1c2": 73, "d1": [73, 389], "c1": 73, "c2": 73, "memori": [73, 261, 285, 290, 298, 334, 389, 415, 419, 431, 432, 434, 453, 456, 459, 463, 466], "bound": [73, 161, 213, 255, 266, 302, 319, 361, 430, 465], "like": [73, 95, 97, 147, 170, 176, 181, 184, 185, 186, 198, 228, 229, 230, 242, 261, 270, 295, 298, 299, 323, 332, 357, 378, 394, 395, 396, 399, 418, 419, 427, 439, 454, 456, 459, 461, 463, 466], "relu": [73, 77, 108, 395, 424, 463, 464], "relu6": [73, 424], "updat": [73, 155, 166, 172, 176, 295, 323, 357, 386, 423, 430, 431, 437, 442, 445, 455, 456, 463, 466, 467], "graphdef": [73, 147, 332, 356, 433], "grappler": [74, 424], "grappleroptim": 74, "input_output_nam": 74, "opt_cfg": 74, "wrapper": [74, 101, 102, 103, 104, 121, 139, 148, 163, 195, 213, 215, 216, 218, 219, 225, 239, 255, 266, 270, 319, 323, 328, 332, 460], "leverag": [74, 396, 398, 418, 422, 434, 451, 454, 459, 466], "built": [74, 182, 183, 187, 192, 196, 197, 202, 204, 206, 207, 209, 210, 213, 218, 220, 226, 227, 231, 234, 236, 240, 241, 246, 248, 250, 251, 252, 253, 255, 299, 323, 326, 334, 357, 378, 396, 399, 416, 420, 431, 444, 448, 453, 459, 465, 466, 468], "convert_add_to_biasadd": [75, 86, 110], "convert_layout": [75, 86, 110], "convert_leakyrelu": [75, 86, 110], "convert_nan_to_random": [75, 86, 110], "convert_placeholder_to_const": [75, 86, 110], "dequantize_cast_optim": [75, 86, 110], "dilated_contract": [75, 86, 110], "dummy_biasadd": [75, 86, 110], "expanddims_optim": [75, 86, 110], "fetch_weight_from_reshap": [75, 86, 110], "fold_batch_norm": [75, 86, 110], "fold_const": [75, 86, 110], "fuse_biasadd_add": [75, 86, 110], "fuse_column_wise_mul": [75, 86, 110], "fuse_conv_with_math": [75, 86, 110], "fuse_decomposed_bn": [75, 86, 110], "fuse_decomposed_in": [75, 86, 110], "fuse_gelu": [75, 86, 110], "fuse_layer_norm": [75, 86, 110], "fuse_pad_with_conv": [75, 86, 110], "fuse_pad_with_fp32_conv": [75, 86, 110], "fuse_reshape_transpos": [75, 86, 110], "graph_cse_optim": [75, 86, 110], "grappler_pass": [75, 86, 110], "insert_print_nod": [75, 86, 110], "move_squeeze_after_relu": [75, 86, 110], "pre_optim": [75, 86, 110], "remove_training_nod": [75, 86, 110], "rename_batch_norm": [75, 86, 110], "split_shared_input": [75, 86, 110], "strip_equivalent_nod": [75, 86, 110, 147], "strip_unused_nod": [75, 86, 110, 147], "switch_optim": [75, 86, 110], "insert": [76, 104, 106, 108, 112, 145, 153, 159, 395, 427, 431, 434, 456, 459, 460, 463, 464], "print": [76, 149, 170, 270, 323, 376, 389, 420, 430, 431, 456, 463, 466], "insertprintminmaxnod": 76, "pre_node_nam": 76, "post_node_nam": 76, "pass": [76, 147, 161, 323, 357, 389, 395, 399, 414, 416, 418, 419, 420, 426, 430, 431, 452, 456, 458, 459, 460, 463, 468], "sampl": [76, 180, 181, 189, 194, 196, 197, 198, 209, 213, 233, 238, 240, 241, 242, 252, 255, 270, 277, 302, 323, 361, 396, 398, 416, 421, 427, 452, 459, 465, 466, 468, 469], "move": [77, 395, 458, 461], "squeez": [77, 395], "movesqueezeafterreluoptim": 77, "match": [77, 101, 170, 266, 267, 319, 320, 418, 452], "pre": [78, 115, 170, 184, 185, 196, 228, 229, 240, 324, 357, 378, 416, 418, 419, 431, 432, 439, 456, 457, 459, 464, 466], "entranc": [78, 187], "preoptim": 78, "removetrainingnodesoptim": 79, "protected_nod": 79, "types_to_splic": 79, "checknumer": 79, "stopgradi": 79, "renam": [80, 461], "fusedbatchnorm": 80, "fusedbatchnormv2": 80, "renamebatchnormoptim": 80, "splitsharedinputoptim": 81, "equival": [82, 463], "stripequivalentnodesoptim": 82, "output_node_nam": [82, 83, 130, 131, 135, 147], "same": [82, 140, 147, 173, 181, 196, 213, 240, 255, 266, 319, 389, 399, 414, 415, 416, 418, 420, 424, 431, 435, 439, 444, 448, 455, 456, 458, 459, 463, 464, 465, 466], "unus": [83, 147], "stripunusednodesoptim": 83, "input_node_nam": [83, 130, 135, 147], "switch": [84, 434, 464], "switchoptim": 84, "condit": [84, 196, 197, 198, 213, 240, 241, 242, 255, 301, 358, 360, 416, 429, 465, 466], "graphrewriterbas": 85, "abstract": [85, 162, 213, 255, 256, 261, 298, 399, 426], "freeze_fake_qu": [86, 94, 110], "freeze_valu": [86, 94, 110], "freeze_value_without_calib": [86, 94, 110], "fuse_conv_redundant_dequant": [86, 94, 110], "fuse_conv_requant": [86, 94, 110], "fuse_matmul_redundant_dequant": [86, 94, 110], "fuse_matmul_requant": [86, 94, 110], "meta_op_optim": [86, 94, 110], "post_hostconst_convert": [86, 94, 110], "post_quantized_op_cs": [86, 94, 110], "rnn_convert": [86, 94, 110], "scale_propag": [86, 94, 110], "onnx_graph": [86, 100, 110], "onnx_schema": [86, 100, 110], "tf2onnx_util": [86, 100, 110], "insert_qdq_pattern": [86, 105, 110], "merge_duplicated_qdq": [86, 105, 110], "share_qdq_y_pattern": [86, 105, 110], "freez": [87, 88, 89, 434, 456], "fakequ": 87, "freezefakequantopoptim": 87, "follow": [87, 109, 171, 198, 242, 263, 266, 316, 319, 393, 394, 395, 396, 399, 415, 416, 418, 419, 420, 422, 424, 428, 429, 430, 431, 432, 433, 434, 435, 436, 444, 448, 454, 456, 458, 459, 463, 464, 466], "freezevaluetransform": 88, "max_min_data": [88, 89], "postfix": [88, 89], "tensor_data": [88, 389, 390], "th": [88, 89], "gpu": [88, 89, 96, 180, 181, 398, 414, 427, 431, 432, 436, 442, 451, 458, 459], "freezevaluewithoutcalibtransform": 89, "95": [89, 270, 323, 430, 463, 469], "quantizedconv": [90, 91], "quantizeddeconv": 90, "redund": [90, 92], "fuseconvredundantdequantizetransform": 90, "cpu": [90, 91, 92, 93, 180, 181, 389, 398, 414, 427, 431, 432, 434, 436, 442, 451, 455, 457, 458, 459, 460, 464], "_quantizedconv": 90, "_quantizeddeconv": 90, "successor": [90, 91, 92, 93], "requant": [91, 93, 464], "fuseconvrequantizetransform": 91, "quantizedmatmul": [92, 93], "fusematmulredundantdequantizetransform": 92, "_quantizedmatmul": [92, 93], "fusematmulrequantizedequantizetransform": 93, "quantizedmatmulwithbiasanddequant": 93, "fusematmulrequantizetransform": 93, "fusematmulrequantizedequantizenewapitransform": 93, "fusematmulrequantizenewapitransform": 93, "newapi": 93, "meta": [95, 457], "metainfochangingmemopoptim": 95, "metaop": 95, "With": [95, 334, 395, 398, 399, 415, 431, 439, 444, 448, 452, 453, 456, 457, 462, 463, 466, 469], "better": [95, 180, 181, 184, 185, 228, 229, 277, 324, 357, 378, 419, 430, 432, 456, 457, 459, 462, 466], "perform": [95, 139, 161, 174, 180, 181, 196, 208, 209, 214, 240, 252, 261, 285, 290, 298, 305, 323, 334, 357, 362, 366, 395, 396, 399, 414, 415, 416, 417, 419, 421, 422, 427, 428, 430, 431, 432, 433, 434, 436, 440, 442, 445, 451, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 466, 468, 469], "hostconst": 96, "posthostconstconvert": 96, "just": [96, 186, 211, 213, 216, 218, 219, 221, 230, 255, 334, 396, 431, 441, 445, 451, 454, 459, 463, 465, 466], "postcseoptim": 97, "duplic": [97, 107, 302, 361], "quantizev2": 97, "decreas": [97, 456], "size": [97, 172, 188, 189, 195, 198, 204, 209, 213, 232, 233, 239, 242, 248, 252, 255, 293, 334, 389, 393, 415, 416, 420, 423, 431, 451, 452, 453, 456, 463, 465, 468, 469], "rnn": 98, "quantizedrnnconvert": 98, "calibration_data": [98, 106], "rnn_detail": 98, "scalepropagationtransform": 99, "direct": [99, 172, 293, 456], "export": [100, 181, 262, 266, 315, 319, 398, 425, 437, 452, 464, 467], "onnxgraph": 101, "output_shap": 101, "extra_opset": 101, "output_nam": [101, 141, 181, 259, 260, 422], "is_subgraph": 101, "graph_nam": 101, "manipul": [101, 102], "onnxnod": 102, "skip_convers": 102, "schema": 103, "onnxopschema": 103, "domain": [103, 104, 180, 181, 456, 466], "since_vers": 103, "get_schema": 103, "max_inclusive_opset_vers": 103, "within": [103, 173, 261, 266, 298, 319, 332, 351, 356, 393, 395, 432, 444, 448, 451, 457, 463], "get_max_supported_opset_vers": 103, "packag": [103, 399, 423, 428, 451, 452, 457, 461, 466], "set_nam": 104, "find_opset": 104, "assert_error": 104, "bool_val": 104, "error_msg": 104, "error": [104, 149, 270, 305, 323, 366, 385, 430, 435, 463, 466], "messag": [104, 145, 466], "map_numpy_to_onnx_dtyp": 104, "np_dtype": 104, "map_onnx_to_numpy_typ": 104, "onnx_typ": 104, "add_port_to_nam": 104, "nr": 104, "get_tensorflow_node_attr": 104, "pars": [104, 155, 196, 197, 209, 213, 240, 241, 252, 255, 340, 341, 345, 465], "get_tensorflow_tensor_shap": 104, "shape": [104, 147, 172, 199, 200, 209, 213, 243, 244, 252, 255, 266, 319, 398, 416, 424, 425, 431, 463, 465], "get_tensorflow_node_shape_attr": 104, "attr": [104, 147, 170], "map_tensorflow_dtyp": 104, "get_tensorflow_tensor_data": 104, "convert_tensorflow_tensor_to_onnx": 104, "read_tensorflow_node_attr": 104, "read": [104, 147, 201, 213, 245, 255, 294, 416, 460, 462], "infer_onnx_shape_dtyp": 104, "opset_vers": [104, 141, 181, 259, 260, 422], "input_shap": [104, 200, 244, 415, 416], "input_dtyp": 104, "sometim": [104, 395, 459], "so": [104, 213, 255, 375, 395, 399, 423, 427, 430, 437, 439, 459, 460, 463, 464, 465, 467], "make_onnx_shap": 104, "seqtyp": 104, "tensor_dtyp": 104, "around": 104, "signifi": 104, "make_onnx_inputs_output": 104, "elem_typ": 104, "text": [104, 212, 213, 254, 255, 263, 268, 296, 316, 321, 422, 429, 440, 456, 457, 463, 465, 469], "datatyp": [104, 155, 460, 466], "save_protobuf": 104, "path": [104, 147, 155, 170, 176, 177, 196, 197, 198, 213, 240, 241, 242, 255, 256, 259, 260, 261, 272, 273, 274, 276, 285, 290, 294, 296, 298, 299, 312, 324, 332, 356, 357, 373, 386, 389, 395, 396, 399, 415, 416, 420, 426, 430, 431, 432, 433, 437, 440, 451, 454, 465, 468], "as_text": 104, "save": [104, 176, 180, 181, 198, 225, 242, 259, 260, 299, 332, 357, 378, 379, 384, 389, 395, 399, 415, 426, 431, 432, 433, 435, 439, 444, 448, 454, 459, 463], "protobuf": 104, "is_onnx_domain": 104, "is_list_or_tupl": 104, "are_shapes_equ": 104, "src": [104, 452], "dest": 104, "equal": [104, 142, 147, 160, 376, 389, 430, 456], "get_subgraphs_from_onnx": 104, "model_proto": 104, "over": [104, 198, 242, 270, 323, 421, 425, 427, 430, 442, 451, 458, 463, 466], "df": 104, "initialize_name_count": 104, "avoid": [104, 196, 240, 395, 464], "conflict": [104, 423], "counter": 104, "make_nam": 104, "get_index_from_strided_slice_of_shap": 104, "outputs_to_valu": 104, "stride": [104, 213, 255, 465], "slice": 104, "compute_const_folding_using_tf": 104, "g": [104, 172, 180, 181, 418, 421, 425, 434, 439, 456, 461, 463, 466], "const_node_valu": 104, "graph_output": 104, "constant": [104, 260, 262, 302, 304, 310, 315, 361, 365, 371, 382, 415, 424, 465], "tf": [104, 115, 147, 195, 196, 197, 198, 213, 239, 240, 241, 242, 255, 330, 332, 420, 433, 457, 460, 465], "generategraphwithqdqpattern": 106, "op_wise_config": [106, 130, 135], "quantized_nod": 106, "dq": [106, 108, 130, 463], "pair": [106, 180, 181, 415, 431, 432], "befor": [106, 108, 159, 172, 173, 175, 180, 181, 196, 240, 293, 295, 297, 394, 416, 418, 419, 420, 423, 424, 428, 431, 446, 449, 459, 462, 464, 466], "merg": [107, 188, 232, 312, 373, 446, 449, 464, 466], "mergeduplicatedqdqoptim": 107, "y": [108, 180, 181, 213, 255, 302, 361, 423, 437, 463, 465], "shareqdqforitexypatternoptim": 108, "one": [108, 109, 114, 155, 161, 172, 173, 175, 213, 223, 255, 263, 266, 270, 272, 293, 296, 297, 316, 319, 323, 396, 399, 418, 419, 420, 424, 425, 427, 428, 430, 431, 432, 434, 435, 439, 440, 442, 444, 445, 448, 451, 452, 453, 454, 456, 458, 459, 461, 463, 465, 466], "enabl": [108, 149, 173, 180, 181, 295, 420, 428, 432, 434, 436, 439, 440, 442, 455, 456, 457, 466], "break": [108, 420, 431], "graphanalyz": 109, "extend_engin": 109, "analyz": [109, 170, 332, 462, 463, 464], "under": [109, 180, 181, 198, 242, 388, 396, 416, 429, 430, 431, 434, 439, 440, 451, 454, 456, 463, 464, 466], "singleton": [109, 389], "specifi": [109, 155, 161, 180, 181, 184, 185, 213, 214, 228, 229, 255, 261, 266, 270, 273, 276, 285, 290, 298, 299, 319, 323, 324, 357, 376, 378, 388, 389, 420, 424, 430, 431, 439, 453, 458, 465, 466, 468], "graphrewriterhelp": 109, "encapsul": [109, 184, 185, 228, 229, 324, 357, 378, 433], "quantize_lay": [110, 111, 113], "fake_quant": [110, 111, 113], "quantize_config": [110, 111, 113], "quantize_help": [110, 111, 113], "quantize_wrapp": [110, 111, 113], "fuse_qdq_bn": [110, 111, 129], "fuse_qdq_concatv2": [110, 111, 129], "fuse_qdq_conv": [110, 111, 129], "fuse_qdq_deconv": [110, 111, 129], "fuse_qdq_in": [110, 111, 129], "fuse_qdq_matmul": [110, 111, 129], "fuse_qdq_pool": [110, 111, 129], "optimize_qdq": [110, 111, 129], "optimize_lay": [111, 113, 116], "quantize_layer_add": [111, 113, 116], "quantize_layer_bas": [111, 113, 116], "quantize_layer_bn": [111, 113, 116], "fakequantizebas": 112, "abc": [112, 268, 321, 399, 464, 466], "appli": [112, 125, 126, 127, 130, 132, 136, 162, 173, 223, 264, 317, 393, 431, 434, 436, 442, 451, 454, 456, 459, 460, 462, 463, 466, 467, 468], "fakequant": 112, "per_channel": [112, 424, 459, 468], "num_bit": [112, 155, 463], "8": [112, 180, 181, 212, 254, 395, 424, 428, 456, 457, 463, 466, 469], "channel_axi": [112, 157, 160], "symmetr": [112, 459, 465, 466], "narrow_rang": 112, "quantizeconfig": [114, 115], "custom": [114, 161, 299, 323, 334, 388, 414, 418, 419, 434, 456, 462], "There": [114, 299, 301, 358, 360, 418, 424, 427, 430, 431, 432, 434, 463, 466, 468], "instanc": [114, 115, 161, 180, 181, 184, 185, 214, 228, 229, 267, 268, 270, 273, 276, 279, 280, 282, 283, 284, 302, 314, 320, 321, 323, 324, 357, 361, 375, 378, 386, 389, 393, 395, 399, 414, 431, 436, 442, 468, 469], "global": [114, 172, 180, 181, 279, 280, 282, 283, 284, 293, 389, 395, 431, 456, 458, 466], "class": [115, 151, 155, 277, 324, 357, 395, 396, 415, 416, 418, 430, 431, 442, 453, 454, 459, 461, 464, 466, 468], "init_quantize_config": 115, "quantize_recip": 115, "begin": [115, 173, 295, 418, 419, 431, 456, 466], "process": [115, 139, 149, 161, 172, 173, 175, 176, 180, 181, 184, 185, 196, 197, 198, 209, 213, 214, 228, 229, 240, 241, 242, 252, 255, 293, 295, 297, 301, 302, 324, 357, 358, 360, 361, 378, 388, 389, 396, 399, 415, 416, 418, 419, 420, 422, 431, 435, 454, 456, 459, 463, 464, 465, 468], "model_nam": [115, 180, 181], "special": [115, 170, 334, 395, 415, 430, 431, 453, 456, 467], "decid": [115, 180, 181, 264, 295, 317, 399, 431, 459, 461, 466], "qat_clone_funct": 115, "leav": [115, 445], "quantizewrapp": [115, 121], "wrapped_lay": 115, "config_quantizable_lay": 117, "quantizelayeradd": 118, "quantizelay": 119, "quantizelayerbas": 119, "quantizelayerbatchnorm": 120, "quantizewrapperbas": 121, "fusedbatchnormv3": [122, 132], "fusenodestartwithfusedbatchnormv3": [122, 132], "_quantizedfusedbatchnorm": 122, "concatv2": [123, 133, 146, 424], "fusenodestartwithconcatv2": [123, 133], "quantizedconcatv2": [123, 133], "fusenodestartwithconv2d": [124, 134], "conv2dbackpropinput": 125, "conv3dbackpropinputv2": 125, "fusenodestartwithdeconv2d": 125, "fusedinstancenorm": 126, "fusenodestartwithfusedinstancenorm": 126, "batchmatmul": 127, "batchmatmulv2": 127, "fusenodestartwithmatmul": [127, 136], "avgpool": [128, 137, 424], "fusenodestartwithpool": [128, 137], "optimizeqdqgraph": 130, "input_graph": [130, 135, 142, 352, 356, 399], "op_wise_sequ": [130, 135], "quantizegraph": 131, "quantizegraphbas": 131, "quantizenodebas": 131, "quantizegraphforintel": 135, "common": [138, 181, 211, 262, 272, 276, 277, 278, 315, 381, 393, 416, 419, 420, 422, 426, 428, 431, 459, 463], "herlper": 138, "quantizegraphhelp": 138, "sever": [138, 175, 213, 255, 297, 396, 418, 419, 427, 431, 432, 444, 448, 456, 458, 463, 465, 466, 468], "staticmethod": 138, "function": [138, 180, 181, 184, 185, 197, 228, 229, 241, 273, 276, 285, 290, 395, 396, 399, 414, 415, 418, 419, 422, 426, 427, 428, 430, 431, 432, 442, 452, 456, 459, 462, 463, 464, 466, 467], "smoothquantcalibr": 139, "dataset": [139, 140, 155, 184, 185, 186, 188, 189, 193, 194, 195, 207, 216, 228, 229, 230, 232, 233, 237, 238, 239, 251, 262, 266, 267, 268, 270, 299, 315, 319, 320, 321, 323, 324, 357, 378, 381, 396, 398, 399, 415, 420, 425, 430, 431, 439, 456, 459, 461, 463, 466, 468, 469], "outlier": [139, 463], "ignor": [139, 389, 416, 463], "smoothquantscal": 140, "alpha": [140, 159, 166, 174, 459], "scales_per_op": 140, "method": [140, 142, 155, 174, 180, 181, 189, 194, 195, 196, 198, 205, 213, 216, 233, 238, 239, 240, 242, 249, 255, 276, 277, 278, 312, 373, 375, 381, 382, 384, 385, 395, 396, 398, 416, 418, 419, 430, 431, 454, 456, 459, 460, 463, 465, 466], "individu": [140, 172, 293, 351, 356, 393, 456, 463], "tensorflowqdqtoonnxqdqconvert": 141, "shape_overrid": 141, "inputs_as_nchw": [141, 259], "default_opset_vers": 141, "bia": [142, 180, 181, 464], "correct": [142, 160, 176, 180, 181, 266, 267, 268, 270, 294, 319, 320, 321, 323, 393, 434], "biascorrect": 142, "fp32_graph": 142, "weight_empir": 142, "Will": [142, 418, 427], "our": [142, 155, 180, 181, 396, 398, 422, 431, 452, 462, 467], "task": [142, 196, 203, 240, 247, 270, 323, 416, 418, 419, 422, 427, 430, 431, 456, 463], "close": [142, 160], "w_int8": [142, 160], "u": [142, 160, 398, 434], "w_fp32": [142, 160], "varianc": [142, 160], "ratio": [142, 160, 172, 173, 176, 180, 181, 209, 213, 252, 255, 295, 416, 431, 456, 465, 469], "differ": [142, 156, 160, 163, 180, 181, 189, 198, 213, 215, 233, 242, 255, 261, 270, 276, 278, 287, 298, 323, 334, 383, 393, 395, 396, 415, 416, 418, 420, 421, 426, 427, 430, 431, 433, 444, 448, 453, 456, 459, 463, 464, 465, 466], "wise": [142, 160, 180, 181, 302, 305, 361, 362, 366, 427, 456, 464, 466, 468], "minim": [142, 160, 302, 361, 418, 421, 430, 431, 444, 448, 456, 459, 466], "round": [142, 160, 459, 463], "scale_c": [142, 160], "shift": [142, 160, 209, 252, 452, 465], "notic": [142, 160, 214, 429, 461], "first": [142, 160, 171, 178, 180, 181, 196, 240, 266, 312, 319, 362, 373, 389, 395, 396, 399, 416, 428, 432, 436, 445, 446, 449, 452, 458, 459, 460, 462, 463, 464, 466, 468], "empir": [142, 160], "solut": [142, 160, 398, 399, 423, 436, 440, 445, 457, 463, 466], "don": [142, 160, 172, 180, 181, 395, 456, 466], "min": [142, 160, 389, 456, 459, 463, 465, 466], "graphtransform": 143, "graphtransformbas": 143, "input_pb": [143, 145, 146], "log": [145, 161, 170, 340, 341, 345, 385, 395, 442, 462, 464, 466], "insertlog": 145, "node_name_list": 145, "show_nam": 145, "show_op": 145, "first_n": 145, "summar": [145, 418], "1024": [145, 198, 242, 437], "dump_fp32": 145, "rerang": 146, "rerangequantizedconcat": 146, "rerange_quant": 146, "version1_lt_version2": [147, 389], "version1": [147, 389], "version2": [147, 389], "version1_gt_version2": [147, 389], "greater": [147, 389, 456, 466], "version1_eq_version2": [147, 389], "version1_gte_version2": [147, 389], "version1_lte_version2": [147, 389], "disable_random": 147, "seed": [147, 180, 181, 278, 389, 431, 468], "disabl": [147, 180, 181, 393, 451, 460], "read_graph": 147, "in_graph": 147, "in_graph_is_binari": 147, "write_graph": 147, "out_graph_def": 147, "out_graph_fil": 147, "write": [147, 205, 249, 389, 420, 426, 431, 434, 464], "is_ckpt_format": 147, "model_path": 147, "ckpt": [147, 324, 332, 357, 469], "folder": [147, 198, 203, 242, 247, 324, 357, 388, 416, 439, 444, 448, 464], "is_saved_model_format": 147, "saved_model": [147, 272], "get_estimator_graph": 147, "estim": [147, 270, 323, 332, 466], "input_fn": [147, 332], "get_tensor_by_nam": 147, "try_cnt": 147, "consid": [147, 270, 323, 393, 418, 452, 466], "import": [147, 161, 180, 181, 272, 324, 334, 357, 376, 378, 389, 395, 396, 398, 414, 415, 416, 418, 419, 420, 422, 425, 430, 431, 432, 433, 434, 438, 440, 453, 454, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466], "scope": [147, 431], "onc": [147, 175, 220, 297, 301, 358, 360, 415, 451, 456, 457, 466, 469], "both": [147, 181, 393, 396, 399, 419, 431, 435, 456, 458, 459, 463, 466], "compat": [147, 332, 420, 433, 446, 449, 451, 461], "v1": [147, 208, 209, 252, 267, 268, 270, 320, 321, 323, 332, 420, 422, 423, 430, 433, 456, 461, 462, 469], "suffix": 147, "time": [147, 180, 181, 213, 255, 270, 302, 323, 334, 361, 389, 420, 423, 431, 439, 441, 444, 448, 451, 452, 453, 456, 457, 459, 462, 464, 465, 466], "got": [147, 423, 464], "iterator_sess_run": 147, "sess": [147, 332], "iter_op": 147, "feed_dict": [147, 195, 239], "output_tensor": [147, 332], "measur": [147, 214, 324, 383, 396, 399, 414, 418, 430, 431, 464, 466], "integr": [147, 163, 215, 399, 431, 452], "session": [147, 195, 239, 332, 431, 464], "makeiter": 147, "feed": [147, 195, 239, 418, 456], "end": [147, 173, 180, 181, 196, 212, 213, 240, 254, 255, 295, 301, 358, 360, 399, 418, 419, 424, 428, 431, 445, 453, 456, 464, 465, 466], "predict": [147, 213, 218, 255, 263, 267, 268, 270, 316, 320, 321, 323, 357, 396, 418, 430, 442, 463, 464, 465], "pred": [147, 270, 323, 430], "collate_tf_pr": 147, "collat": [147, 155], "tbe": 147, "get_input_output_node_nam": 147, "fix_ref_type_of_graph_def": 147, "fix": [147, 173, 196, 240, 295, 394, 416, 438, 456, 463, 466], "strip_unused_lib": 147, "offici": [147, 263, 267, 268, 316, 320, 321, 393, 430, 463], "r1": 147, "15": [147, 424, 469], "branch": 147, "get_graph_def": 147, "auto_input_output": 147, "get_model_input_shap": 147, "inout": 147, "get_tensor_val_from_graph_nod": 147, "graph_node_name_map": 147, "kei": [147, 149, 153, 170, 176, 178, 180, 181, 277, 294, 332, 376, 379, 381, 389, 398, 457, 464, 466], "val": [147, 176, 198, 201, 242, 245, 294, 431], "tensor_v": 147, "int8_node_name_revers": 147, "revers": 147, "tf_diagnosis_help": 147, "fp32_model": [147, 149, 155, 389, 399], "quan_model": 147, "save_path": [147, 259, 260, 399, 433], "diagnosi": [147, 180, 181, 431], "generate_feed_dict": 147, "input_tensor": [147, 332], "get_weight_from_input_tensor": 147, "input_tensor_nam": [147, 332], "associ": [147, 266, 319], "quant": [147, 155, 180, 181, 312, 373, 395, 431, 459], "search": [147, 170, 173, 177, 184, 185, 228, 229, 261, 263, 273, 276, 277, 278, 298, 302, 316, 361, 398, 425, 427, 430, 434, 435, 445, 457, 464, 466, 467], "look": [147, 398, 399, 424, 430, 468], "sq_weight_tensor": 147, "sq_weights_nod": 147, "two": [147, 149, 161, 171, 172, 173, 175, 198, 203, 214, 242, 247, 266, 293, 297, 299, 306, 319, 367, 389, 395, 396, 416, 418, 420, 422, 424, 430, 431, 432, 459, 460, 462, 466, 468], "torch": [148, 149, 150, 151, 152, 153, 154, 155, 159, 170, 171, 172, 173, 177, 180, 181, 225, 260, 324, 357, 388, 395, 398, 400, 418, 420, 422, 431, 432, 433, 434, 439, 442, 459, 463, 464], "bf16modulewrapp": 148, "bf16modul": 148, "mix": [148, 180, 181, 300, 312, 324, 359, 373, 398, 399, 404, 427, 434, 440, 441, 442, 467], "precis": [148, 180, 181, 184, 185, 228, 229, 261, 268, 270, 271, 298, 300, 312, 321, 323, 324, 334, 359, 362, 373, 398, 399, 404, 414, 419, 420, 424, 427, 434, 440, 441, 442, 457, 458, 459, 463, 466, 467], "mixed_precision_model": 148, "bf16_symbolic_trac": 148, "fx_sub_module_list": 148, "trace": [148, 149, 154, 155, 170, 180, 181, 260, 364, 395, 441, 466], "_description_": 148, "hessian": [149, 364, 466], "awar": [149, 162, 181, 223, 272, 293, 364, 378, 399, 419, 420, 422, 427, 432, 451, 454, 466], "node_collector": 149, "hook": [149, 162, 222, 223, 285, 290, 381, 418, 419, 431, 456, 463, 464], "record": [149, 155, 163, 196, 197, 198, 204, 215, 222, 240, 241, 242, 248, 389, 416, 462, 464, 466], "hessiantrac": 149, "q_model": [149, 181, 272, 357, 395, 398, 415, 416, 420, 422, 425, 426, 430, 431, 433, 459, 460], "criterion": [149, 162, 164, 165, 166, 172, 173, 180, 181, 217, 220, 262, 315, 418, 419, 431, 456, 459, 466, 468], "yao": 149, "zhewei": 149, "et": [149, 463], "al": [149, 463], "pyhessian": 149, "network": [149, 166, 172, 295, 364, 396, 418, 419, 422, 431, 455, 457, 459, 463, 466], "through": [149, 184, 185, 228, 229, 323, 324, 357, 398, 414, 424, 426, 427, 430, 437, 453, 454, 456, 458, 459, 463], "len": [149, 181, 213, 255, 416, 420, 465], "2020": 149, "ieee": [149, 432, 463], "intern": [149, 312, 373, 415, 416, 456], "confer": [149, 456, 463], "big": 149, "dong": 149, "zhen": 149, "hawq": [149, 364, 466], "v2": [149, 364, 420, 422, 423, 428, 440, 461, 466, 469], "advanc": [149, 180, 181, 393, 398, 404, 459, 468], "system": [149, 161, 214, 389, 414, 437], "33": [149, 469], "18518": 149, "18529": 149, "openvinotoolkit": 149, "nncf": 149, "develop": [149, 334, 394, 395, 428, 431, 432, 434, 440, 451, 456, 457, 460, 462], "hessian_trac": 149, "compare_weight": 149, "float_dict": 149, "ani": [149, 266, 268, 311, 319, 321, 351, 356, 372, 376, 386, 389, 393, 394, 398, 415, 420, 434, 439, 452, 456, 462], "quantized_dict": 149, "compar": [149, 270, 323, 389, 419, 430, 456, 459, 462, 464, 466], "being": [149, 266, 319], "wt_compare_dict": 149, "float_model": 149, "state_dict": [149, 420, 464], "qmodel": 149, "compute_error": 149, "state": [149, 171, 437, 456], "weight_dict": 149, "hawq_top": 149, "enable_act": 149, "modul": [150, 151, 275, 281, 291, 292, 395, 415, 418, 427, 430, 431, 433, 456, 458, 460, 464, 467], "nn": [151, 153, 155, 170, 171, 173, 180, 181, 225, 260, 324, 357, 388, 395, 418, 431, 433, 463, 464], "detector": 152, "transformerbasedmodelblockpatterndetector": 152, "pattern_lst": 152, "block_pattern": 152, "detect": [152, 155, 170, 180, 181, 266, 270, 319, 323, 328, 395, 434, 441, 442, 456], "ffn": 152, "get_modul": 153, "set_modul": [153, 155], "new_modul": [153, 155], "torchsmoothqu": [153, 463], "example_input": [153, 155, 180, 181, 260, 422], "q_func": [153, 184, 185, 228, 229, 302, 303, 305, 307, 308, 358, 361, 362, 363, 366, 368, 369, 399, 431, 466], "traced_model": [153, 154], "whose": [153, 159, 172, 294, 426, 463, 466], "could": [153, 159, 172, 184, 185, 198, 228, 229, 242, 299, 324, 357, 378, 393, 395, 419, 431, 454, 456, 459, 463, 467], "absorb": [153, 159], "later": [153, 159, 464], "graphtrac": 153, "trace_and_fuse_sub_graph": 154, "is_qat": 154, "get_embedding_contigu": 155, "embed": [155, 456], "contigu": 155, "is_fused_modul": 155, "_propagate_qconfig_help": 155, "collate_torch_pr": 155, "fetch": [155, 158, 189, 233, 416], "collate_result": 155, "input2tupl": 155, "append_attr": 155, "fx_model": 155, "fx_white_list": 155, "append": [155, 299, 302, 361, 395, 419, 431, 454], "graphmodul": [155, 395, 460], "addit": [155, 181, 378, 418, 445, 461], "dir": [155, 196, 240, 388, 416, 423, 426], "generate_activation_observ": 155, "observ": [155, 462, 464, 466], "what": [155, 173, 194, 238, 323, 357, 378, 393], "check_cfg_and_qconfig": 155, "op_infos_from_cfg": 155, "output_tensor_ids_op_nam": 155, "paser_cfg": 155, "ops_nam": 155, "get_quantizable_ops_from_cfg": 155, "input_tensor_ids_op_nam": 155, "update_sq_scal": 155, "ipex_config_path": 155, "smoothquant_scale_info": 155, "ipex_config": 155, "json": [155, 197, 213, 241, 255, 416, 433, 452, 465], "temporari": [155, 389, 393], "auto_copi": 155, "fetch_modul": 155, "op_nam": [155, 177, 180, 181, 313, 374, 389, 390, 431, 456, 464], "simple_infer": 155, "get_example_input": 155, "example_inp": 155, "get_fallback_ord": 155, "confidence_batch": [155, 466], "fallback": [155, 305, 306, 364, 366, 367, 422, 432, 460, 466], "requantize_cfg": 155, "fall": 155, "back": [155, 213, 219, 255, 451], "order": [155, 263, 264, 299, 302, 305, 314, 316, 317, 361, 366, 375, 395, 430, 458, 463, 464, 466], "confid": 155, "ordered_op": 155, "get_mse_order_per_fp32": 155, "mse": [155, 180, 181, 262, 270, 304, 315, 323, 357, 365, 389, 430, 458, 461], "influenc": [155, 456], "last": [155, 166, 176, 180, 181, 432, 434, 436, 441, 445, 459, 463], "fallback_ord": 155, "get_mse_order_per_int8": 155, "get_torch_vers": 155, "match_datatype_pattern": 155, "calculate_quant_min_max": 155, "unsign": [155, 314, 375], "qmin": 155, "qmax": 155, "get_depth": 155, "depth": [155, 418, 460], "get_dict_at_depth": 155, "target_depth": 155, "nest": [155, 178], "get_element_under_depth": 155, "ops_lst": 155, "get_op_type_by_nam": 155, "quantizable_op": 155, "algorithm_registri": 156, "algorithm_typ": 156, "locat": [156, 176, 213, 255, 420, 437, 444, 448, 451, 459, 461, 465, 468], "registr": [156, 198, 205, 213, 242, 249, 255, 288], "algorithmschedul": 156, "conf": [156, 161, 162, 181, 184, 185, 214, 228, 229, 272, 279, 280, 282, 283, 284, 285, 290, 302, 303, 305, 307, 308, 312, 324, 334, 357, 358, 361, 362, 363, 366, 368, 369, 373, 376, 378, 395, 396, 398, 414, 418, 425, 426, 431, 432, 433, 454, 459, 460, 462, 463, 466], "control": [156, 180, 181, 395, 431, 456, 466], "phase": [156, 396, 431, 456, 459, 460, 466], "fastbiascorrect": [157, 160], "fast_bias_correct": [158, 180, 181, 315, 459], "weight_correct": [158, 180, 181, 315, 459], "5": [159, 163, 180, 181, 200, 209, 215, 244, 252, 270, 323, 357, 399, 416, 422, 424, 430, 431, 455, 456, 458, 459, 463, 465, 466, 468, 469], "kernel": [159, 180, 181, 399, 455, 466], "futur": [159, 184, 185, 216, 228, 229, 427, 431, 442, 467], "weightcorrect": 160, "1e": [160, 463, 468], "05": [160, 181, 270, 323, 430, 463, 469], "evalu": [161, 162, 172, 180, 184, 185, 196, 214, 228, 229, 240, 256, 263, 266, 267, 268, 270, 272, 316, 319, 320, 321, 323, 324, 334, 357, 378, 381, 396, 399, 415, 416, 418, 419, 426, 427, 430, 431, 432, 434, 440, 442, 445, 451, 453, 456, 459, 462, 464, 466, 468], "set_env_var": [161, 214], "env_var": [161, 214], "overwrite_exist": [161, 214], "env": [161, 214, 423], "alreadi": [161, 198, 212, 214, 242, 254, 399, 416, 427, 446, 449, 466], "param": [161, 186, 214, 220, 230, 270, 302, 323, 361, 389, 399, 433, 466], "set_all_env_var": [161, 214], "physic": [161, 214, 393, 414], "core": [161, 180, 181, 214, 414, 429, 444, 448, 455, 469], "get_architectur": [161, 214], "architectur": [161, 214, 273, 276, 398, 414, 418, 431, 456, 457, 467], "get_threads_per_cor": [161, 214], "thread": [161, 180, 181, 214, 351, 356, 415, 455], "get_thread": [161, 214], "get_physical_id": [161, 214], "socket": [161, 214, 389, 455, 469], "get_core_id": [161, 214], "id": [161, 212, 214, 254, 263, 265, 266, 267, 268, 316, 318, 319, 320, 321, 430, 462, 466], "get_bounded_thread": [161, 214], "core_id": [161, 214], "bind": [161, 214], "run_inst": 161, "b_dataload": [161, 180, 181, 414, 431], "b_func": [161, 414], "benchmarkconfig": [161, 180, 181, 414, 431], "accuraci": [161, 176, 180, 181, 184, 185, 228, 229, 256, 261, 270, 285, 290, 298, 323, 324, 334, 357, 362, 376, 378, 386, 395, 398, 415, 416, 419, 420, 421, 422, 430, 431, 432, 442, 451, 453, 454, 456, 457, 458, 461, 462, 463, 464, 468, 469], "goal": [161, 256, 261, 285, 290, 298, 324, 357, 415, 454, 459, 466], "prefer": [161, 261, 298, 357, 456], "space": [161, 173, 180, 181, 184, 185, 228, 229, 261, 268, 273, 276, 277, 278, 298, 302, 305, 312, 321, 324, 357, 361, 366, 373, 393, 394, 396, 399, 456, 459, 468], "etc": [161, 162, 212, 254, 256, 261, 268, 285, 290, 298, 321, 324, 357, 388, 418, 427, 456, 462, 466], "user": [161, 170, 173, 176, 180, 181, 184, 185, 198, 201, 205, 213, 214, 220, 225, 228, 229, 242, 245, 249, 255, 261, 285, 290, 296, 298, 299, 323, 324, 334, 357, 362, 378, 389, 395, 396, 399, 404, 414, 418, 419, 422, 424, 427, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 442, 445, 451, 453, 454, 456, 457, 459, 460, 461, 463, 464, 465, 466, 470], "generate_prefix": 161, "core_list": 161, "command": [161, 214, 378, 420, 434, 436, 439, 444, 448, 452], "numactl": [161, 423, 437, 445], "call_on": 161, "cmd": [161, 452], "log_fil": [161, 350, 355], "window": [161, 414, 451, 452], "config_inst": 161, "raw_cmd": 161, "multi": [161, 168, 170, 173, 266, 319, 323, 357, 396, 415, 416, 427, 431, 453, 456, 459, 466], "trigger": [161, 173, 295, 394], "raw": [161, 197, 201, 204, 241, 245, 248, 305, 366, 430, 466], "summary_benchmark": 161, "summari": [161, 378, 446, 449, 455, 464], "profil": [161, 315], "benchmark_with_raw_cmd": 161, "commend": 161, "fit_with_raw_cmd": 161, "cores_per_inst": [161, 180, 181, 414, 431, 458], "num_of_inst": [161, 180, 181, 414, 431, 458], "test": [161, 180, 181, 213, 255, 394, 398, 428, 469], "fit": [161, 172, 180, 181, 302, 324, 357, 361, 376, 378, 395, 398, 414, 415, 416, 420, 425, 426, 430, 431, 432, 433, 456, 459, 460], "pb": [161, 180, 181, 324, 332, 357, 398, 414, 420, 425, 431, 433, 464, 469], "eval_dataload": [161, 180, 181, 184, 185, 228, 229, 299, 302, 303, 305, 307, 308, 324, 357, 358, 361, 362, 363, 366, 368, 369, 378, 398, 414, 425, 426, 431, 459, 466], "compon": [162, 256, 262, 299, 315, 395, 420, 428, 429, 434, 451, 454, 455], "quantizationawaretrainingcallback": 162, "pruningcallback": 162, "distillationcallback": 162, "basecallback": 162, "design": [162, 195, 218, 223, 239, 323, 362, 396, 398, 431, 439, 442, 456, 459, 467], "mainli": [162, 175, 223, 297, 431, 456, 459], "prune": [162, 166, 167, 168, 171, 172, 173, 174, 175, 176, 180, 181, 223, 224, 262, 279, 280, 282, 283, 284, 288, 290, 291, 293, 294, 295, 297, 299, 315, 389, 398, 420, 421, 424, 425, 427, 454, 457, 467, 468], "distil": [162, 165, 180, 181, 215, 222, 223, 262, 315, 398, 421, 425, 427, 454, 467, 468], "In": [162, 172, 173, 174, 181, 195, 223, 239, 266, 293, 295, 319, 334, 393, 395, 396, 398, 399, 415, 416, 418, 419, 420, 430, 431, 441, 444, 445, 448, 453, 454, 456, 459, 460, 462, 463, 464, 465, 466], "adaptor": [162, 180, 181, 314, 375, 381, 398, 427, 460, 461, 463, 464, 467], "deriv": [162, 166, 172, 173, 174, 175, 256, 293, 295, 297], "pipelin": [162, 256, 273, 274, 299, 419, 431, 454], "knowledg": [162, 163, 180, 181, 215, 256, 419, 421, 425, 427, 431, 433, 468], "transfer": [162, 203, 247, 256, 416, 418, 419, 431, 463], "teacher": [162, 180, 181, 256, 418, 419, 431, 469], "student": [162, 180, 181, 196, 222, 240, 256, 416, 418, 419, 469], "distillation_conf": [162, 177, 256], "_epoch_ran": [162, 256], "integ": [162, 172, 173, 180, 181, 256, 266, 270, 277, 293, 295, 319, 323, 376, 399, 459, 463, 466], "indic": [162, 180, 181, 189, 194, 196, 233, 238, 240, 256, 266, 277, 319, 395, 423, 464], "how": [162, 166, 172, 173, 180, 181, 213, 255, 256, 293, 394, 395, 397, 399, 415, 416, 418, 419, 420, 426, 431, 445, 446, 449, 450, 451, 456, 459, 463, 465, 466, 467, 468], "much": [162, 166, 180, 181, 213, 255, 256, 418, 445, 463, 465], "epoch": [162, 173, 256, 295, 378, 418, 419, 420, 431, 454, 456, 468], "ran": [162, 256], "eval_frequ": [162, 256], "frequenc": [162, 173, 180, 181, 256, 295, 431, 455, 456, 468], "term": [162, 173, 174, 256, 394, 418, 429, 430, 453, 454, 466], "best_scor": [162, 256], "best": [162, 213, 255, 256, 261, 298, 305, 366, 393, 396, 428, 434, 440, 451, 453, 459, 465, 466], "metric": [162, 180, 181, 184, 185, 217, 228, 229, 256, 261, 262, 277, 285, 290, 298, 299, 315, 324, 357, 378, 381, 396, 399, 415, 416, 420, 431, 432, 459, 462, 464, 466, 467, 468, 469], "best_model": [162, 256], "found": [162, 256, 398, 418, 432, 439, 463, 466, 469], "critet": [163, 215], "includ": [163, 166, 170, 172, 174, 180, 181, 196, 198, 205, 213, 215, 240, 242, 249, 255, 261, 271, 293, 298, 376, 389, 393, 394, 399, 416, 428, 429, 430, 431, 432, 434, 437, 440, 445, 456, 459, 460, 464, 466], "tensorflowknowledgedistillationloss": [163, 215], "pytorchknowledgedistillationloss": [163, 215, 431], "pytorchintermediatelayersknowledgedistillationloss": [163, 215], "tensorflowcriterion": [163, 215], "pytorchcriterion": [163, 215], "criterion_registri": [163, 215], "criterion_typ": [163, 215], "registry_criterion": [163, 215], "knowledgedistillationframework": [163, 215], "student_model": [163, 181, 215, 431], "teacher_model": [163, 180, 181, 215, 418, 419, 431], "knowledgedistillationloss": [163, 215, 431, 468], "temperatur": [163, 180, 181, 215, 431, 468], "loss_typ": [163, 180, 181, 215, 431, 468], "ce": [163, 180, 181, 215, 431, 468], "loss_weight": [163, 180, 181, 215, 431, 468], "pytorchknowledgedistillationlosswrapp": [163, 215], "param_dict": [163, 215, 220], "tensorflowknowledgedistillationlosswrapp": [163, 215], "tensorflowknowledgedistillationlossextern": [163, 215], "intermediatelayersknowledgedistillationloss": [163, 215], "layer_map": [163, 181, 215, 418], "add_origin_loss": [163, 181, 215], "pytorch": [163, 170, 172, 180, 181, 195, 196, 198, 201, 205, 213, 215, 220, 222, 239, 240, 242, 245, 249, 255, 260, 261, 270, 271, 291, 293, 296, 298, 306, 315, 323, 324, 333, 357, 367, 382, 389, 395, 396, 398, 399, 415, 418, 419, 421, 424, 427, 428, 431, 433, 434, 436, 439, 440, 441, 442, 451, 456, 457, 458, 461, 463, 466, 468], "pytorchintermediatelayersknowledgedistillationlosswrapp": [163, 215], "selfknowledgedistillationloss": [163, 215], "selfknowledg": [163, 215], "pytorchselfknowledgedistillationloss": [163, 215], "pytorchselfknowledgedistillationlosswrapp": [163, 215], "pruner": [165, 262, 279, 280, 281, 282, 283, 285, 290, 291, 293, 296, 315, 431, 456, 468], "model_slim": [165, 167], "auto_slim": [165, 167, 169], "pattern_analyz": [165, 167, 169], "weight_slim": [165, 167, 169], "criteria": [165, 167, 180, 181, 261, 285, 290, 293, 295, 298, 395, 451, 463], "reg": [165, 167, 173], "schedul": [165, 167, 173, 174, 180, 181, 262, 291, 295, 315, 431, 454], "callback": [165, 285, 290, 378, 381, 395, 431, 454, 456, 459], "register_criterion": 166, "registri": [166, 172, 173, 174, 175, 293, 295, 297, 396], "get_criterion": 166, "pruningcriterion": 166, "about": [166, 389, 393, 415, 431, 460, 466, 467, 469], "module_nam": [166, 173, 174, 295, 389], "store": [166, 170, 173, 174, 180, 181, 198, 242, 288, 295, 426], "score": [166, 172, 173, 180, 181, 263, 264, 266, 267, 268, 270, 295, 316, 317, 319, 320, 321, 323, 364, 381, 395, 430, 453, 456, 462, 466], "magnitudecriterion": 166, "magnitud": [166, 180, 181, 262, 270, 281, 315, 323, 427, 456], "criterion_class": 166, "determin": [166, 172, 173, 180, 181, 383, 393, 395, 456, 459, 463], "gradientcriterion": 166, "gradient": [166, 279, 427, 431, 456, 469], "absolut": [166, 180, 181, 270, 323, 430, 431, 455, 456, 459, 466], "snipcriterion": 166, "snip": [166, 180, 181, 295, 427, 456, 469], "product": [166, 398, 427, 432, 434, 435, 451, 455, 457, 459, 462, 466], "singl": [166, 175, 180, 181, 189, 196, 213, 233, 240, 255, 266, 295, 297, 319, 323, 357, 395, 416, 428, 456], "shot": [166, 173, 175, 223, 295, 297, 396, 427, 431, 456, 457], "connect": [166, 295, 451, 455, 456, 462], "sensit": [166, 279, 295, 427, 456], "arxiv": [166, 173, 295, 456, 463], "org": [166, 173, 266, 295, 319, 394, 395, 428, 446, 449], "1810": [166, 295], "02340": [166, 295], "snipmomentumcriterion": 166, "snip_momentum": [166, 180, 181, 431, 456], "momentum": [166, 295, 427, 431, 456, 468], "mechan": [166, 456, 462, 467], "preserv": 166, "step": [166, 172, 173, 175, 180, 181, 293, 295, 297, 378, 418, 419, 420, 422, 431, 446, 449, 451, 454, 456, 458, 460, 462, 463, 464, 466], "beta": 166, "snipmomentumblockcriterion": 166, "snip_momentum_block": 166, "retrainfreecriterion": 166, "retrain_fre": [166, 173], "auto": [168, 170, 180, 181, 300, 315, 359, 365, 389, 395, 434, 437, 439, 441, 442, 456, 459], "slim": [168, 169, 170, 266, 319, 330, 332, 433, 456], "round_multipli": 168, "32": [168, 420, 426, 455, 463, 469], "spars": [168, 173, 295, 416, 457], "automat": [168, 170, 171, 180, 181, 198, 201, 208, 209, 242, 245, 252, 261, 271, 298, 395, 398, 414, 416, 427, 431, 432, 434, 436, 439, 440, 442, 444, 445, 446, 448, 449, 451, 454, 456, 459, 463, 465, 466], "model_slim_ffn2": 168, "some": [168, 170, 180, 181, 196, 240, 294, 416, 422, 428, 430, 431, 432, 453, 456, 459, 460, 463, 464, 466], "part": [168, 173, 293, 295, 395, 428, 432, 446, 449, 456, 463, 467], "perman": [168, 393, 456], "obtain": [168, 170, 173, 174, 176, 294, 395, 456, 462, 463, 466], "acceler": [168, 418, 431, 434, 442, 451, 456, 457, 460, 463, 466], "directli": [168, 180, 181, 195, 239, 266, 270, 294, 319, 323, 430, 431, 438, 456, 458, 459, 464], "sprase": 168, "multipl": [168, 180, 181, 182, 183, 187, 188, 196, 197, 199, 200, 201, 202, 203, 207, 210, 213, 220, 226, 227, 231, 232, 234, 240, 241, 243, 244, 245, 246, 247, 251, 253, 255, 271, 324, 325, 326, 328, 334, 414, 416, 422, 431, 454, 456, 462, 463, 466], "model_slim_mha": 168, "parse_auto_slim_config": 168, "ffn2_sparsiti": 168, "mha_spars": 168, "generate_ffn2_pruning_config": 168, "consecut": [168, 170, 171, 456], "generate_mha_pruning_config": 168, "head": [168, 170, 173, 176, 456], "get_attribut": 170, "level": [170, 362, 376, 385, 393, 463, 466], "descent": 170, "get_common_modul": 170, "layer1": [170, 180, 181, 431, 456, 459], "layer2": [170, 431, 456, 459], "nearest": [170, 213, 255, 465], "father": 170, "print_iter": 170, "recipesearch": 170, "searcher": [170, 278], "root": [170, 196, 197, 198, 201, 240, 241, 242, 245, 270, 323, 415, 416, 420, 430, 431, 468], "levelwis": 170, "wai": [170, 197, 198, 201, 241, 242, 245, 396, 415, 416, 430, 431, 434, 437, 452, 454, 456, 459, 463, 466, 468], "huggingfac": [170, 196, 240, 384, 416, 421, 425, 439, 440, 441, 442, 463], "bert": [170, 181, 192, 195, 196, 213, 236, 239, 240, 255, 398, 416, 418, 430, 439, 456, 465, 469], "recipe_sampl": 170, "bertattent": 170, "dens": [170, 175, 180, 181, 297, 456, 469], "infom": [170, 216], "basic": [170, 172, 180, 181, 212, 254, 262, 273, 293, 304, 308, 311, 315, 365, 369, 372, 378, 427, 428, 431, 458, 462], "searching_result": 170, "jitbasicsearch": 170, "placeholder_shap": 170, "placeholder_dtyp": 170, "By": [170, 180, 181, 263, 316, 398, 430, 433, 444, 445, 448, 457, 466], "jit": [170, 180, 434, 436, 441, 463, 464], "script": [170, 263, 264, 267, 268, 316, 317, 320, 321, 420, 427, 434, 438, 441, 442, 445, 457], "them": [170, 196, 240, 395, 415, 422, 424, 426, 454, 456, 466], "static_graph": 170, "flatten_static_graph": 170, "target_lay": 170, "linear2linearsearch": 170, "target_op_lut": 170, "lookup": 170, "tabl": [170, 389, 422, 469], "code": [170, 184, 185, 214, 228, 229, 272, 296, 299, 357, 378, 395, 398, 399, 415, 416, 418, 419, 420, 426, 427, 429, 430, 434, 436, 438, 439, 440, 442, 445, 451, 453, 454, 456, 457, 458, 459, 462, 463, 464, 465], "current_pattern": 170, "statu": [170, 386, 393, 415, 453, 456], "selfmhasearch": 170, "classifierheadsearch": 170, "final": [170, 173, 176, 295, 431, 437, 453, 456, 459, 461, 466], "classifi": [170, 176, 196, 240, 270, 323, 416, 418], "squeezer": 171, "postcompressionutil": 171, "librari": [171, 217, 262, 315, 351, 391, 394, 398, 428, 431, 436, 445, 451, 457, 459], "relat": [171, 174, 256, 266, 285, 290, 293, 319, 381, 434, 456, 468], "linearcompress": 171, "root_linear": 171, "target_linear": 171, "also": [171, 195, 198, 213, 239, 242, 255, 263, 316, 323, 334, 357, 394, 396, 399, 415, 421, 425, 427, 430, 431, 434, 439, 444, 445, 448, 451, 452, 453, 456, 457, 459, 460, 463, 466], "while": [171, 173, 176, 295, 302, 361, 399, 416, 421, 427, 432, 434, 439, 451, 458, 459, 463], "hidden": [171, 172, 293, 399], "structur": [171, 173, 180, 181, 295, 313, 374, 427, 450, 452, 456, 459, 464, 467, 469], "layer_1": 171, "act_fn": 171, "layer_2": 171, "linearcompressioniter": 171, "linear_pattern": 171, "register_pattern": [172, 293], "sure": [172, 173, 175, 293, 295, 297, 414], "get_pattern": [172, 293], "assertionerror": [172, 173, 176, 293, 294, 295, 324], "basepattern": [172, 174], "unit": [172, 293, 394, 456], "e": [172, 180, 181, 393, 418, 421, 425, 434, 439, 440, 444, 448, 456, 463, 466], "4x1": [172, 180, 181, 289, 431, 456, 469], "is_glob": [172, 293], "local": [172, 180, 181, 293, 389, 444, 448, 456, 462], "contrast": [172, 293, 465], "keep_mask_lay": 172, "invalid_lay": 172, "max_sparsity_ratio_per_op": [172, 173, 177, 180, 181, 431, 456], "sparsiti": [172, 173, 175, 176, 180, 181, 295, 297, 389, 398, 416, 427, 431, 467, 469], "reach": [172, 175, 180, 181, 297, 394, 398, 415, 456, 466], "min_sparsity_ratio_per_op": [172, 177, 180, 181, 431, 456], "minimum": [172, 180, 181, 431, 442, 456, 466], "target_spars": [172, 177, 180, 181, 431, 456, 458, 468], "patternnxm": [172, 293], "nxm": [172, 173, 180, 181, 289, 293, 456], "kept": [172, 293], "block_siz": [172, 293], "height": [172, 209, 213, 252, 255, 293, 420, 465, 468], "width": [172, 209, 213, 252, 255, 293, 420, 456, 459, 465, 468], "vertic": [172, 213, 255, 293, 465], "becaus": [172, 213, 255, 293, 395, 459, 463, 465, 466], "patternninm": [172, 293], "n": [172, 180, 181, 197, 213, 241, 255, 264, 293, 317, 376, 416, 418, 456, 459, 463, 465], "out": [172, 180, 181, 196, 197, 198, 240, 241, 242, 261, 293, 298, 394, 395, 398, 416, 434, 439, 444, 445, 446, 448, 449, 451, 456, 458, 459], "continu": [172, 266, 293, 319, 396, 431, 452, 456], "doc": [172, 180, 181, 293, 311, 312, 323, 357, 372, 373, 376, 389, 430, 431, 446, 449], "md": [172, 180, 181, 293, 323, 357, 420, 459], "element": [172, 176, 194, 238, 266, 293, 319, 389, 416, 427, 430, 456, 463], "patternmha": 172, "register_prun": [173, 295], "parse_valid_pruner_typ": 173, "get_prun": [173, 295], "cuurent": [173, 295], "baseprun": 173, "current_sparsity_ratio": [173, 295], "global_step": [173, 295], "total": [173, 213, 255, 270, 295, 323, 416, 456, 465], "start_step": [173, 177, 180, 181, 295, 431, 456, 458], "end_step": [173, 177, 180, 181, 295, 431, 456, 458], "pruning_frequ": [173, 177, 180, 181, 431, 456], "target_sparsity_ratio": [173, 295], "show": [173, 389, 393, 418, 420, 431, 437, 452, 463, 466, 467], "basicprun": 173, "arrang": [173, 197, 198, 201, 241, 242, 245, 416, 456], "proce": 173, "regul": 173, "patternlockprun": [173, 283, 295], "parent": [173, 175, 289, 295, 297, 464], "blockmaskprun": 173, "grad": 173, "retrainfreeprun": 173, "pruner_class": 173, "rearrang": 173, "fast": [173, 180, 181, 398, 457], "retrain": [173, 419, 456], "effect": [173, 398, 399, 457], "2204": 173, "09656": 173, "progressiveprun": 173, "interpol": [173, 213, 255, 430, 456, 465], "fine": [173, 196, 240, 416, 437, 456, 457, 459], "grain": [173, 456, 457, 466], "improv": [173, 394, 431, 434, 451, 452, 456, 457, 459, 460, 466, 469], "ad": [173, 196, 240, 263, 302, 316, 361, 432, 434, 439, 442, 446, 449, 456, 464], "interv": [173, 456], "multiheadattentionprun": 173, "mha_modul": 173, "partial": [173, 456, 459], "qkv": 173, "feedward": 173, "simultan": [173, 434, 454, 458], "qkv_name": 173, "query_layer_nam": 173, "key_layer_nam": 173, "value_layer_nam": 173, "ffn_name": 173, "attention_ffn_nam": 173, "mha_nam": 173, "keep": [173, 176, 294, 362, 395, 399, 450, 451, 461], "qkv_modul": 173, "ffn_modul": 173, "mha": 173, "regular": [174, 263, 294, 316], "register_reg": 174, "regulariz": 174, "get_reg_typ": 174, "get_reg": 174, "basereg": 174, "grouplasso": 174, "coeff": 174, "group": [174, 280, 427, 456, 464, 465, 466, 469], "lasso": [174, 280, 427, 456], "select": [174, 181, 196, 240, 395, 396, 427, 428, 451, 456, 459, 464, 466], "reg_term": 174, "coeffient": 174, "register_schedul": [175, 297], "get_schedul": [175, 297], "pruningschedul": 175, "gradual": [175, 297, 456], "oneshotschedul": [175, 297], "iterativeschedul": [175, 297], "get_sparsity_ratio": 176, "elementwise_over_matmul_gemm_conv": 176, "elementwise_over_al": 176, "blockwise_over_matmul_gemm_conv": 176, "check_config": [176, 294], "prune_config": [176, 294], "everyth": [176, 294, 439], "reset_none_to_default": 176, "undefin": [176, 294], "update_param": 176, "process_weight_config": 176, "global_config": [176, 279, 280, 282, 283, 284], "local_config": [176, 180, 181, 279, 280, 282, 283, 284], "default_config": 176, "pruners_info": 176, "process_yaml_config": 176, "check_key_valid": 176, "template_config": 176, "user_config": 176, "process_and_check_config": [176, 294], "process_config": [176, 294], "parse_last_linear": 176, "often": [176, 415, 418, 454, 456], "act": [176, 194, 238, 393], "might": [176, 395, 466], "caus": [176, 435, 456], "drop": [176, 266, 294, 319, 431, 432, 445, 456, 469], "parse_to_prun": [176, 294], "generate_pruner_config": 176, "dotdict": [176, 177, 181, 334, 389], "prunerv2": 177, "pruning_typ": [177, 180, 181, 431, 456], "pruning_scop": [177, 180, 181, 431, 456], "sparsity_decay_typ": [177, 180, 181, 431, 456], "pruning_op_typ": [177, 180, 181, 431, 456], "reg_typ": 177, "criterion_reduce_typ": 177, "resume_from_pruned_checkpoint": 177, "similiar": 177, "cfg_fname": 177, "parser": 177, "quantization_conf": 177, "pruning_conf": 177, "graph_optimization_conf": [177, 261], "mixedprecision_conf": 177, "benchmark_conf": 177, "nasconfig": [177, 181, 274, 276, 396], "approach": [177, 180, 181, 273, 274, 276, 395, 396, 398, 415, 416, 418, 427, 431, 439, 451, 457, 458, 466, 468], "search_spac": [177, 181, 273, 276, 277, 278], "search_algorithm": [177, 181, 262, 275, 315, 396], "na": [177, 181, 262, 315, 328, 427], "procedur": [177, 396, 456], "defaultconf": 177, "instead": [177, 178, 181, 195, 239, 389, 437, 439, 442, 456], "notat": [177, 178, 181, 389], "deep_get": [178, 334], "dot": [178, 432, 459], "eg": [178, 198, 242, 416, 458], "person": [178, 393, 457], "john": 178, "deep": [178, 398, 399, 415, 427, 428, 431, 432, 434, 436, 439, 440, 442, 445, 451, 457, 459, 466, 467, 469], "deep_set": [178, 334], "sex": [178, 393], "male": 178, "pythonic_config": 179, "random_se": [180, 181, 302, 361, 431, 468], "1978": [180, 181], "workspac": [180, 181, 388, 389, 433], "default_workspac": [180, 181], "resume_from": [180, 181, 389], "tensorboard": [180, 181, 381, 389, 399, 431], "set_random_se": [180, 181, 389], "set_workspac": [180, 181, 389], "set_resume_from": [180, 181, 389], "set_tensorboard": [180, 181, 389], "directori": [180, 181, 197, 198, 241, 242, 332, 384, 386, 388, 389, 416, 420, 423, 444, 446, 448, 449, 464], "histori": [180, 181, 388, 389, 451, 466], "nc_workspac": [180, 181], "datetim": [180, 181], "now": [180, 181, 213, 255, 395, 396, 416, 420, 442, 458, 465, 466], "strftime": [180, 181], "d_": [180, 181], "h": [180, 181, 213, 255, 420, 465], "resum": [180, 181, 184, 185, 228, 229, 303, 307, 308, 358, 361, 362, 363, 366, 368, 369], "wa": [180, 181, 399, 431, 457, 466], "flag": [180, 181, 264, 317], "visual": [180, 181, 398, 442, 451, 462, 464, 466, 467], "displai": [180, 181, 311, 312, 372, 373, 389, 451], "2022": [180, 181, 398, 429, 463], "workspace_path": [180, 181], "accuracycriterion": [180, 181, 431, 466], "higher_is_bett": [180, 181, 323, 357, 430, 466, 468], "rel": [180, 181, 334, 431, 458, 466, 468, 469], "tolerable_loss": [180, 181, 431, 466], "01": [180, 181, 431, 455, 458, 466, 468, 469], "higher": [180, 181, 184, 185, 228, 229, 277, 324, 357, 378, 395, 418, 422, 430, 456, 459, 462], "accept": [180, 181, 376, 393, 414], "accuracy_criterion": [180, 181, 334, 431, 453, 458, 466, 468], "avail": [180, 181, 328, 400, 402, 406, 409, 412, 421, 423, 425, 427, 444, 448, 455, 456, 466, 469], "warmup": [180, 181, 414, 431, 458], "inter_num_of_thread": [180, 181, 351, 356, 431, 458], "intra_num_of_thread": [180, 181, 351, 356, 431, 458], "benchmark": [180, 181, 216, 262, 299, 315, 334, 389, 398, 404, 433, 434, 438, 442, 445, 451, 466, 467, 468, 469], "empti": [180, 181, 437], "onnxrt_trt_ep": [180, 181, 459], "onnxrt_cuda_ep": [180, 181, 432, 459], "inter": [180, 181, 194, 198, 238, 242], "intra": [180, 181], "quantizationconfig": 180, "post_training_static_qu": [180, 415, 416, 431, 458, 466], "calibration_sampling_s": [180, 181, 431], "op_type_dict": [180, 181, 458, 459, 466], "op_name_dict": [180, 181, 431, 459, 466], "strategy_kwarg": [180, 181, 462, 466], "timeout": [180, 181, 431, 458, 466, 468], "max_trial": [180, 181, 431, 466], "quant_level": [180, 181, 466], "posttrainingquantconfig": [180, 181, 357, 395, 398, 415, 422, 425, 431, 433, 459, 460, 462, 463, 466], "quantizationawaretrainingconfig": [180, 181, 378, 395, 419, 422, 431, 459, 460, 466], "requir": [180, 181, 187, 299, 332, 356, 395, 399, 414, 415, 419, 420, 424, 431, 432, 433, 435, 445, 451, 455, 456, 459, 461, 462, 463, 464, 466, 468], "cv": [180, 181, 456], "object_detect": [180, 181, 266, 319], "nlp": [180, 181, 296, 439, 456, 459], "recommendation_system": [180, 181], "explicitli": [180, 181, 426, 456], "overrid": [180, 181, 389], "quantiztaion": [180, 181], "smooth_quant_arg": [180, 181, 459, 463], "gemm_to_matmul": [180, 181, 459], "graph_optimization_level": [180, 181, 458, 459], "disable_al": [180, 181, 458], "enable_bas": [180, 181], "enable_extend": [180, 181], "enable_al": [180, 181], "first_conv_or_matmul_quant": [180, 181, 459], "last_conv_or_matmul_quant": [180, 181, 459], "pre_post_process_quant": [180, 181, 459], "preprocess": [180, 181, 196, 213, 240, 255, 381, 420, 465], "postprocess": [180, 181, 207, 210, 213, 217, 255, 262, 315, 323, 357, 381, 399, 431, 464, 465], "vaild": [180, 181], "dedic": [180, 181], "quant_format": [180, 181, 260, 422], "constraint": [180, 181, 261, 298, 431, 456, 462, 466, 468], "conv1": [180, 181, 459, 468], "tuning_strategi": [180, 181], "guarante": [180, 181, 431], "models": [180, 181, 334, 431, 453, 458], "footprint": [180, 181, 261, 285, 290, 298, 334, 419, 431, 453, 456, 458], "earli": [180, 181, 431, 459, 466, 468], "stop": [180, 181, 431, 466, 467, 468], "field": [180, 181, 198, 242, 266, 319, 395, 399, 420, 431, 462, 466, 468], "exit": [180, 181, 301, 358, 360, 431, 432, 468], "excluded_precis": [180, 181, 460], "exclud": [180, 181, 399, 432, 460], "conserv": [180, 181, 315, 365], "use_distributed_tun": 180, "weightpruningconfig": [180, 181, 225, 431, 454, 456], "pruning_config": [180, 181, 431], "9": [180, 181, 395, 428, 431, 456, 458, 463, 466, 468], "98": [180, 181, 431, 456, 458, 469], "exp": [180, 181, 431, 456], "link": [180, 181, 196, 240, 323, 357, 416, 422, 444, 448, 451, 469], "90": [180, 181, 468, 469], "magnitude_progress": [180, 181], "snip_progress": [180, 181], "snip_momentum_progress": [180, 181], "pattern_lock": [180, 181, 262, 281, 315], "most": [180, 181, 270, 323, 431, 432, 456, 459, 463, 466], "feasibl": [180, 181], "situat": [180, 181, 420, 456], "unstructur": [180, 181, 289, 427, 456, 469], "8x1": [180, 181], "channelx1": [180, 181, 456], "1xchannel": [180, 181, 456], "itrex": [180, 181], "start": [180, 181, 213, 255, 266, 319, 362, 428, 465, 466, 467, 470], "togeth": [180, 181, 213, 255, 418, 428, 438, 457, 464, 465], "sort": [180, 181, 305, 366, 466], "sinc": [180, 181, 261, 263, 285, 290, 298, 316, 418, 422, 428, 430, 445, 451, 454], "lead": [180, 181, 418, 431, 432, 456, 463], "increas": [180, 181, 417, 427, 434, 451, 466], "cube": [180, 181, 456], "6": [180, 181, 398, 424, 459, 463, 466, 469], "update_config": [180, 181], "10": [180, 181, 198, 242, 302, 361, 398, 414, 416, 422, 428, 431, 456, 458, 465, 466, 469], "knowledgedistillationlossconfig": [180, 181, 418, 419, 431, 454], "hyperparamet": [180, 181, 311, 462, 463, 466], "entropi": [180, 181, 466], "length": [180, 181, 196, 213, 240, 255, 266, 319, 398, 416, 430, 457, 459, 465], "groundtruth": [180, 181, 266, 319], "label": [180, 181, 184, 185, 196, 198, 199, 200, 201, 204, 209, 213, 218, 228, 229, 240, 242, 243, 244, 245, 248, 252, 255, 263, 265, 270, 316, 318, 323, 324, 357, 378, 395, 415, 416, 430, 431, 459, 465], "tpye": [180, 181], "sum": [180, 181, 270, 323, 418], "distillationconfig": [180, 181, 378, 418, 419, 431, 454], "prepare_compress": [180, 181, 378, 395, 418, 419, 431, 454, 456, 459], "criterion_conf": [180, 181], "d_conf": [180, 181, 419, 431, 454], "compression_manag": [180, 181, 378, 395, 418, 419, 431, 454, 456, 459], "sgd": [180, 181, 220, 418, 431, 458, 468], "learning_r": [180, 181, 431, 458, 468], "callabl": [180, 181, 268, 321, 378], "featur": [180, 181, 196, 197, 209, 213, 240, 241, 252, 255, 394, 398, 414, 415, 417, 418, 431, 432, 433, 434, 438, 439, 442, 451, 456, 457, 461, 465], "altern": [180, 181, 357], "distil_loss": [180, 181, 431], "crossentropyloss": [180, 181, 215, 418, 431], "lr": [180, 181, 418, 420, 431], "tuningcriterion": [181, 431, 453, 462, 466], "tuning_criterion": [181, 431, 453, 462, 466], "dynam": [181, 186, 230, 260, 312, 373, 399, 415, 418, 422, 427, 431, 434, 439, 440, 441, 442, 445, 451, 457, 466, 469], "ptq": [181, 357, 395, 420, 427, 431, 459, 463, 464, 466], "tri": [181, 466], "meet": [181, 187, 299, 301, 358, 360, 395, 453, 457, 458, 459, 464, 466], "bayesian": [181, 262, 278, 304, 315, 365, 396, 458], "mse_v2": [181, 262, 304, 315, 365], "hawq_v2": [181, 315, 365], "exhaust": [181, 262, 278, 304, 315, 365, 458], "docstr": [181, 376], "copi": [181, 294, 389], "deepcopi": 181, "model_origin": [181, 357, 460], "qat_op_name_dict": 181, "intermediatelayersknowledgedistillationlossconfig": [181, 418], "relationship": 181, "student_layer_nam": 181, "student_layer_output_process": 181, "teacher_layer_nam": 181, "teacher_layer_output_process": 181, "desir": [181, 209, 213, 252, 255, 465], "either": [181, 266, 319, 435, 439, 454, 458, 459], "serv": [181, 332], "numer": [181, 270, 323, 432, 457, 459], "abbrevi": 181, "layer_nam": 181, "l1": 181, "selfknowledgedistillationlossconfig": [181, 418, 431], "student1_layer_name1": 181, "teacher_layer_name1": 181, "student2_layer_name1": 181, "student1_layer_name2": 181, "teacher_layer_name2": 181, "student2_layer_name2": 181, "soft": 181, "l2": [181, 456], "hard": [181, 415], "resblock": 181, "deepst": 181, "fc": 181, "02": [181, 463, 469], "mixedprecisionconfig": [181, 324, 376, 431, 432], "mixedprecis": [181, 271, 431], "fp16": [181, 312, 373, 432, 459], "won": [181, 459], "work": [181, 261, 298, 397, 415, 418, 446, 449, 456, 460, 461, 463, 464], "mix_precis": [181, 315, 376, 431, 432], "converted_model": [181, 324, 431, 432], "exportconfig": 181, "14": [181, 259, 260, 422, 428, 463, 469], "dynamic_ax": [181, 260, 422], "qlinear": [181, 198, 205, 242, 249, 270, 323, 399, 422, 441, 469], "ax": [181, 260], "onnxqlinear2qdqconfig": 181, "onnxqlinear2qdq": 181, "torch2onnxconfig": [181, 422], "torch2onnx": [181, 257, 262, 315], "qdq_op_fp32_bia": 181, "qdq_op_int32_bia": 181, "qdq_op_fp32_bias_qdq": 181, "resnet50": [181, 398, 420, 422, 434, 438, 456, 459, 462, 469], "int8_onnx_config": [181, 422], "randn": [181, 422], "224": [181, 209, 252, 398, 415, 416, 420, 422, 425, 431, 434, 465, 468, 469], "batch_siz": [181, 186, 188, 194, 195, 196, 197, 216, 230, 232, 238, 239, 240, 241, 260, 396, 415, 416, 420, 422, 426, 431, 434, 459], "tf2onnxconfig": [181, 422], "tf2onnx": [181, 257, 262, 315], "keyword": 181, "argument": [181, 376, 396], "output_graph": 181, "42": [181, 278, 455, 469], "dyna": [181, 262, 275, 315, 396, 427, 458], "sigopt": [182, 183, 226, 227, 262, 315, 457], "tpe": [182, 183, 226, 227, 262, 315], "sigopttunestrategi": [184, 228], "q_dataload": [184, 185, 228, 229, 302, 303, 305, 307, 308, 358, 361, 362, 363, 366, 368, 369, 426, 466], "eval_func": [184, 185, 228, 229, 299, 302, 303, 305, 307, 308, 324, 357, 358, 361, 362, 363, 366, 368, 369, 376, 378, 395, 415, 416, 418, 419, 420, 431, 459, 460, 466, 468], "eval_metr": [184, 185, 324, 357, 358, 361, 362, 363, 366, 368, 369, 378, 459], "q_hook": [184, 185, 228, 229, 302, 303, 305, 307, 308, 358, 361, 362, 363, 366, 368, 369], "hpo": [184, 228], "mandatori": [184, 185, 228, 229, 357, 431, 468], "yield": [184, 185, 194, 216, 228, 229, 238, 302, 324, 357, 361, 376, 378, 415, 459, 466], "_": [184, 185, 228, 229, 357, 395, 396, 399, 418, 420, 422, 424, 430, 431, 432, 433, 434, 440, 444, 446, 448, 449, 453, 456, 459, 461, 462, 463, 464, 466, 468], "well": [184, 185, 228, 229, 324, 357, 378, 396, 398, 416, 456, 459, 461, 463, 468], "taken": [184, 185, 228, 229, 324, 357, 378, 459], "reserv": [184, 185, 228, 229], "abl": [184, 185, 228, 229, 324, 357, 378, 442, 451, 459], "tuner": [184, 185, 228, 229, 261, 298, 324, 357, 378, 459], "scalar": [184, 185, 228, 229, 324, 357, 378, 430, 459], "pseudo": [184, 185, 228, 229, 357, 378, 464], "someth": [184, 185, 198, 228, 229, 242, 357, 378], "fefin": [185, 229], "tpetunestrategi": [185, 229], "basedatalod": [186, 230], "basedataload": [186, 191, 193, 230, 235, 237], "last_batch": [186, 188, 195, 216, 230, 232, 239], "rollov": [186, 188, 195, 216, 230, 232, 239], "collate_fn": [186, 188, 189, 216, 230, 232, 233, 416], "sampler": [186, 188, 190, 216, 230, 232, 234, 251, 262, 311, 372, 420], "batch_sampl": [186, 188, 216, 230, 232], "num_work": [186, 188, 216, 230, 232, 431, 459], "pin_memori": [186, 188, 216, 230, 232], "shuffl": [186, 188, 216, 230, 232, 431, 459], "_generate_dataload": [186, 230], "check_dataload": 187, "default_col": [188, 232], "outer": [188, 232], "defaultdataload": [188, 195, 232, 239], "definit": [189, 194, 233, 238], "style": [189, 203, 233, 247, 376, 394, 416, 426], "drop_last": [189, 194, 233, 238], "iterablefetch": [189, 233], "indexfetch": [189, 233], "base_dataload": [190, 234, 251, 262], "default_dataload": [190, 234, 251, 262], "fetcher": [190, 234, 251, 262], "mxnet_dataload": [190, 234, 251, 262], "onnxrt_dataload": [190, 234, 251, 262, 350], "pytorch_dataload": [190, 234, 251, 262], "tensorflow_dataload": [190, 234, 251, 262, 355], "mxnetdataload": [191, 235], "onnxrtbertdataload": [192, 236], "varient": [192, 236], "onnxrtdataload": [192, 236, 350], "pytorchdataload": [193, 237], "data_sourc": [194, 238, 381], "__iter__": [194, 198, 238, 242, 415, 416, 431], "matter": [194, 238, 460], "iterablesampl": [194, 238], "squential": [194, 238], "your": [194, 196, 238, 240, 394, 416, 420, 429, 431, 434, 437, 438, 439, 444, 445, 446, 448, 449, 451, 456, 462, 464, 466], "clear": [194, 238, 399, 424, 430, 431], "iterabledataset": [194, 198, 238, 242], "try": [194, 238, 395, 456, 459, 463, 466], "indexdataset": [194, 238], "__getitem__": [194, 198, 213, 238, 242, 255, 416, 431], "__len__": [194, 198, 238, 242, 416], "retriev": [194, 238], "sequentialsampl": [194, 238], "sequenti": [194, 238, 299, 301, 358, 360, 466], "batchsampl": [194, 238], "tfdatadataload": [195, 239], "tensorflow1": [195, 239], "coupl": [195, 239], "satisfi": [195, 239, 428], "usag": [195, 239, 266, 272, 299, 319, 376, 416, 420, 421, 430, 434, 442, 453, 458, 465], "tf1": [195, 239, 433], "although": [195, 239, 462], "tensorflowbertdataload": [195, 239], "tensorflowmodelzoobertdataload": [195, 239], "zoo": [195, 213, 239, 255, 398, 421, 425, 469], "tensorflowdataload": [195, 239, 355], "pytorchbertdataset": [196, 240], "model_typ": [196, 240, 389, 416], "construct": [196, 199, 200, 203, 211, 216, 218, 219, 221, 240, 243, 244, 247, 323, 328, 332, 375, 381, 393, 416, 420, 456, 466], "tensordataset": [196, 240, 416], "repo": [196, 240, 392, 416, 421, 444, 446, 448, 449, 470], "todo": [196, 199, 240, 243, 266, 312, 319, 373], "easi": [196, 240, 298, 415, 422, 431, 457, 459, 462], "load": [196, 212, 213, 240, 254, 255, 324, 332, 357, 388, 389, 415, 444, 448, 452, 458, 459, 463], "squad": [196, 213, 240, 255, 267, 268, 270, 320, 321, 323, 416, 430, 456, 465, 469], "distilbert": [196, 240, 398, 416, 457, 469], "xlnet": [196, 240, 416], "xlm": [196, 240, 416, 469], "101": [196, 240, 270, 323, 430, 463, 469], "2043": [196, 240], "2001": [196, 240], "onnxrtbertdataset": [196, 240], "data_dir": [196, 240, 416], "model_name_or_path": [196, 240, 416, 431, 439, 440], "max_seq_length": [196, 213, 240, 255, 416, 465], "do_lower_cas": [196, 212, 213, 240, 254, 255, 416, 465], "mrpc": [196, 240, 270, 323, 416, 430, 439, 456, 466, 469], "dynamic_length": [196, 240, 416], "shortcut": [196, 240, 416], "token": [196, 207, 210, 213, 240, 251, 253, 255, 262, 263, 264, 315, 316, 317, 384, 416, 430, 431, 462, 463, 465, 466], "longer": [196, 213, 240, 255, 416, 465], "truncat": [196, 213, 240, 255, 416, 465], "shorter": [196, 213, 240, 255, 416, 465], "lowercas": [196, 240, 416], "choic": [196, 240, 399, 416, 430, 463], "qqp": [196, 240, 416, 430, 469], "qnli": [196, 240, 416, 430, 469], "rte": [196, 240, 416, 430, 469], "st": [196, 240, 416, 430], "cola": [196, 240, 416, 430, 469], "mnli": [196, 240, 416, 430, 469], "wnli": [196, 240, 416, 430, 469], "mobilebert": [196, 240, 416, 418, 469], "roberta": [196, 240, 416, 469], "uncas": [196, 213, 240, 255, 416, 465, 469], "load_and_cache_exampl": [196, 240], "cach": [196, 240, 423, 459], "convert_examples_to_featur": [196, 213, 240, 255], "max_length": [196, 240], "label_list": [196, 240, 270, 323], "output_mod": [196, 240], "classif": [196, 213, 240, 255, 270, 296, 323, 418, 422, 430, 440, 456, 457], "pad_token": [196, 240], "pad_token_segment_id": [196, 240], "mask_padding_with_zero": [196, 240], "inputfeatur": [196, 213, 240, 255], "properti": [196, 240, 375, 429, 455], "input_id": [196, 213, 240, 255, 431], "vocabulari": [196, 212, 213, 240, 254, 255, 465], "attention_mask": [196, 240, 431], "usual": [196, 240, 418, 454, 456, 459, 463], "NOT": [196, 240, 424], "token_type_id": [196, 240, 431], "segment": [196, 240, 264, 266, 317, 319], "portion": [196, 240], "problem": [196, 240, 270, 323, 430, 432, 452], "regress": [196, 240], "seq_length": [196, 240], "tensorflowbertdataset": [196, 240], "label_fil": [196, 213, 240, 255, 416, 465], "tfrecord": [196, 197, 198, 240, 241, 242, 416], "guid": [196, 240, 395, 398, 416, 418, 428, 434, 442, 451, 470], "parsedecodebert": [196, 240], "tensorflowmodelzoobertdataset": [196, 197, 240, 241], "num_cor": [196, 197, 201, 240, 241, 245, 416], "28": [196, 197, 201, 240, 241, 245, 416, 469], "coco": [197, 204, 208, 241, 248, 266, 270, 319, 323, 430, 456], "parsedecodecoco": [197, 241], "cocorecorddataset": [197, 241], "interleav": [197, 241, 416], "parallel": [197, 241, 351, 356, 416, 431, 466], "cocoraw": [197, 241, 415, 416], "img_dir": [197, 241, 416], "val2017": [197, 241, 416], "anno_dir": [197, 241, 416], "annot": [197, 241, 266, 319, 376, 416, 430, 456], "instances_val2017": [197, 241, 416], "jpg": [197, 201, 203, 241, 245, 247, 416], "imag": [197, 198, 201, 203, 209, 213, 241, 242, 245, 247, 252, 255, 266, 319, 416, 420, 422, 456, 458, 463, 464, 465, 469], "coconpi": [197, 241, 416], "npy_dir": [197, 241, 416], "npy": [197, 241, 416], "tensorflowdataset": [198, 242], "pytorchdataset": [198, 242], "mxnetdataset": [198, 242], "onnxrtqldataset": [198, 242], "onnxrtitdataset": [198, 242], "IT": [198, 205, 242, 249, 457], "pytorchmxnetwrapdataset": [198, 242], "datafunc": [198, 242], "pytorchmxnetwrapfunct": [198, 213, 242, 255], "framework_dataset": [198, 242], "convent": [198, 242, 266, 319, 418], "imageclassifi": [198, 242], "choos": [198, 242, 427, 439, 461, 463, 466, 468], "tensorflow_itex": [198, 201, 203, 205, 242, 245, 247, 249, 458], "onnxrt_qdq": [198, 205, 242, 249, 458], "onnxrt_qlinearop": [198, 205, 213, 242, 249, 255, 458], "onnxrt_integerop": [198, 205, 213, 242, 249, 255, 458], "pytorch_ipex": [198, 205, 242, 249, 431, 458, 468], "pytorch_fx": [198, 205, 242, 249, 431, 458], "dataset_registri": [198, 242], "dataset_typ": [198, 242], "dataset_format": [198, 242], "data_format": [198, 209, 242, 252], "raw_imag": [198, 242], "overwrit": [198, 242, 444, 448], "download_url": [198, 242], "url": [198, 242, 429], "filenam": [198, 242, 389, 416], "md5": [198, 242], "download": [198, 242, 416, 428, 461], "address": [198, 242, 393, 432, 457], "gen_bar_updat": [198, 242], "progress": [198, 242, 445, 451, 456, 459], "bar": [198, 242, 398, 451, 457], "check_integr": [198, 242], "fpath": [198, 242], "checksum": [198, 242], "calculate_md5": [198, 242], "chunk_siz": [198, 242], "cifar10": [198, 242, 416], "cifar100": [198, 242, 416], "databas": [198, 242], "otherwis": [198, 213, 242, 255, 389, 393, 416, 446, 449, 458, 465], "www": [198, 242, 416, 469], "toronto": [198, 242, 416], "kriz": [198, 242, 416], "cifar": [198, 242, 416, 469], "tar": [198, 242, 416, 446, 449], "gz": [198, 242, 416, 446, 449], "manual": [198, 242, 416, 434, 440, 442, 445], "subset": [198, 201, 242, 245, 416], "internet": [198, 242, 416], "put": [198, 242, 416, 418], "again": [198, 242, 416, 460], "pytorchcifar10": [198, 242], "mxnetcifar10": [198, 242], "tensorflowcifar10": [198, 242], "pytorchcifar100": [198, 242], "mxnetcifar100": [198, 242], "tensorflowcifar100": [198, 242], "mnist": [198, 242, 416, 420], "modifi": [198, 225, 242, 356, 395, 420, 424, 456, 468], "nation": [198, 242, 393], "institut": [198, 242], "standard": [198, 213, 242, 255, 422, 430, 465, 466], "technologi": [198, 242, 431, 455], "fashionmnist": [198, 242, 416], "npz": [198, 242, 416], "idx1": [198, 242, 416], "ubyt": [198, 242, 416], "idx3": [198, 242, 416], "t10k": [198, 242, 416], "pytorchmnist": [198, 242], "mxnetmnist": [198, 242], "tensorflowmnist": [198, 242], "pytorchfashionmnist": [198, 242], "mxnetfashionmnist": [198, 242], "tensorflowfashionmnist": [198, 242], "imagefold": [198, 242, 416, 420, 431], "expect": [198, 242, 393, 394, 423, 451, 459, 466], "subfold": [198, 242], "belong": [198, 242, 328, 459], "class_1": [198, 242, 416], "xxx": [198, 242, 394, 416, 431], "png": [198, 242, 416], "xxy": [198, 242, 416], "xxz": [198, 242, 416], "class_n": [198, 242, 416], "123": [198, 242, 416, 465], "nsdf3": [198, 242, 416], "asd932_": [198, 242, 416], "categori": [198, 242, 265, 318, 414, 416, 441], "mxnetimagefold": [198, 242], "tensorflowtfrecorddataset": [198, 242], "tensorflowimagerecord": [198, 242], "imagenet": [198, 201, 209, 242, 245, 252, 396, 431, 440, 456, 464, 465, 468, 469], "000": [198, 242, 398, 416], "001": [198, 242, 416, 420, 463, 468], "099": [198, 242, 416], "tensorflowvocrecord": [198, 242], "pascal": [198, 242], "voc": [198, 242, 270, 323], "2012": [198, 242], "00000": [198, 242], "00004": [198, 242], "00001": [198, 242], "00003": [198, 242], "dummydataset": [199, 200, 243, 244], "127": [199, 200, 243, 244, 416, 459, 463], "float32": [199, 200, 213, 243, 244, 255, 266, 319, 399, 414, 416, 431, 459, 463, 465], "rang": [199, 200, 213, 243, 244, 255, 376, 378, 398, 399, 416, 418, 419, 420, 431, 454, 456, 459, 463, 465], "stand_norm": [199, 200, 243, 244, 416], "dummy_v2": [200, 244, 415, 416], "sparse_dummy_v2": [200, 244, 416], "label_shap": [200, 244, 416], "sparsedummydataset": [200, 244], "dense_shap": [200, 244, 416], "sparse_ratio": [200, 244, 416], "imagenetraw": [201, 245, 416], "data_path": [201, 245, 416], "image_list": [201, 245, 416], "img1": [201, 245, 416], "img2": [201, 245, 416], "imgx": [201, 245, 416], "val_map": [201, 245, 416], "txt": [201, 245, 416, 428], "pytorchimagenetraw": [201, 245], "mxnetimagenetraw": [201, 245], "tensorflowimagenetraw": [201, 245], "inteltensorflow": [201, 203, 245, 247, 428], "tensorflowimagenetdataset": [201, 245], "onnxrtimagenetdataset": [201, 245], "bert_dataset": [202, 207, 246, 251, 262, 315], "coco_dataset": [202, 207, 246, 251, 262, 315], "dummy_dataset": [202, 207, 246, 251, 262, 315], "dummy_dataset_v2": [202, 207, 246, 251, 262, 315], "imagenet_dataset": [202, 207, 246, 251, 262, 315], "style_transfer_dataset": [202, 207, 246, 251, 262, 315], "styletransferdataset": [203, 247], "content_fold": [203, 247, 416], "style_fold": [203, 247, 416], "crop_ratio": [203, 247, 416], "resize_shap": [203, 247, 416], "256": [203, 209, 247, 252, 416, 420, 431, 465], "image_format": [203, 247, 416], "holder": [203, 247, 416], "labelbalancecocorecordfilt": [204, 248], "balanc": [204, 248, 455, 463], "labelbalancecocorawfilt": [204, 248], "tensorflowfilt": [205, 249], "onnxrtqlfilt": [205, 249], "onnxrtitfilt": [205, 249], "pytorchfilt": [205, 249], "mxnetfilt": [205, 249], "filter_registri": [205, 249], "filter_typ": [205, 249], "__call__": [205, 249], "coco_filt": [206, 207, 250, 251, 262, 315], "imagenet_transform": [207, 210, 251, 253, 262, 315], "parsedecodecocotransform": 208, "decod": [208, 209, 252, 263, 316, 430, 465], "quantizedinput": [209, 252, 465], "labelshift": [209, 252, 465], "label_shift": [209, 252, 465], "parsedecodeimagenet": [209, 252, 465], "proto": [209, 213, 252, 255, 465], "parsedecodeimagenettransform": [209, 252], "tensorflowresizecropimagenettransform": [209, 252], "random_crop": [209, 252, 465], "resize_sid": [209, 252, 465], "resize_method": [209, 252], "bilinear": [209, 213, 252, 255, 465], "random_flip_left_right": [209, 252, 465], "mean_valu": [209, 252, 465], "channels_last": [209, 252, 434], "subpixel": [209, 252], "rgb": [209, 252], "seri": [209, 252, 398, 428, 431, 465], "applic": [209, 252, 422, 434, 451, 457, 463, 464, 465], "crop": [209, 213, 252, 255, 416, 465], "flip": [209, 213, 252, 255, 465], "left": [209, 213, 252, 255, 445, 451, 463, 465], "right": [209, 252, 266, 319, 393, 395, 451, 463, 465], "std": [209, 213, 252, 255, 431, 465], "bilinearimagenettransform": [209, 252], "central_fract": [209, 252, 465], "875": [209, 252, 465], "fraction": [209, 252, 465], "onnxbilinearimagenettransform": [209, 252], "onnxresizecropimagenettransform": [209, 252], "std_valu": [209, 252], "229": [209, 252, 431, 469], "225": [209, 252, 431, 469], "resizewithaspectratio": [209, 252], "87": [209, 252, 469], "inter_pol": [209, 252], "cv2": [209, 252], "inter_area": [209, 252], "aspect": [209, 213, 252, 255, 465], "postprocess_cl": [211, 221, 431], "user_postprocess": [211, 221], "convert_to_unicod": [212, 254], "unicod": [212, 254], "assum": [212, 254, 266, 277, 319, 399, 424, 451], "utf": [212, 254], "load_vocab": [212, 254], "vocab_fil": [212, 213, 254, 255, 465], "convert_by_vocab": [212, 254], "vocab": [212, 254], "whitespace_token": [212, 254], "whitespac": [212, 254, 268, 321], "clean": [212, 254, 394, 431], "piec": [212, 254, 263, 316, 430], "fulltoken": [212, 254], "tokenzi": [212, 254], "basictoken": [212, 254], "punctuat": [212, 254, 263, 268, 316, 321], "lower": [212, 213, 254, 255, 268, 321, 362, 419, 456, 457, 459, 463, 465, 466], "wordpiecetoken": [212, 254], "unk_token": [212, 254], "unk": [212, 254], "max_input_chars_per_word": [212, 254], "200": [212, 254, 395, 466], "wordpiec": [212, 213, 254, 255, 465], "concat_gener": [213, 255], "inc": [213, 255, 393, 398, 434, 441, 451, 457, 458, 461], "tensorflowtransform": [213, 255], "mxnettransform": [213, 255], "pytorchtransform": [213, 255], "onnxrtqltransform": [213, 255], "onnxrtittransform": [213, 255], "transform_registri": [213, 255], "transform_typ": [213, 255], "basetransform": [213, 255], "tensorflowwrapfunct": [213, 255], "transform_func": [213, 255], "pytorchmxnettransform": [213, 255], "get_torchvision_map": [213, 255], "torchvis": [213, 255, 421, 425, 434, 440], "composetransform": [213, 255], "transform_list": [213, 255, 465], "compos": [213, 255, 381, 465], "croptoboundingbox": [213, 255, 465], "offset_height": [213, 255, 465], "offset_width": [213, 255, 465], "target_height": [213, 255, 465], "target_width": [213, 255, 465], "box": [213, 255, 266, 270, 319, 323, 395, 430, 434, 445, 451, 464, 465, 466], "coordin": [213, 255, 302, 361, 465, 466], "top": [213, 255, 261, 270, 285, 290, 298, 323, 430, 451, 465], "corner": [213, 255, 399, 465], "horizont": [213, 255, 465], "mxnetcroptoboundingbox": [213, 255], "onnxrtcroptoboundingbox": [213, 255], "tensorflowcroptoboundingbox": [213, 255], "resizewithratio": [213, 255, 465], "min_dim": [213, 255, 465], "800": [213, 255, 465], "max_dim": [213, 255, 465], "1365": [213, 255, 465, 469], "constant_valu": [213, 255], "longest": [213, 255, 465], "side": [213, 255, 416, 445, 465], "doesn": [213, 255, 399, 420, 431, 452, 468], "exce": [213, 255, 465], "tensorflowresizewithratio": [213, 255], "perm": [213, 255, 465], "permut": [213, 255, 465], "tensorflowtranspos": [213, 255], "mxnettranspos": [213, 255], "pytorchtranspos": [213, 255], "randomverticalflip": [213, 255, 465], "randomli": [213, 255, 278, 302, 361, 396, 463, 465, 466], "tensorflowrandomverticalflip": [213, 255], "randomhorizontalflip": [213, 255, 431, 465], "tensorflowrandomhorizontalflip": [213, 255], "toarrai": [213, 255, 465], "pil": [213, 255, 465], "casttftransform": [213, 255], "castonnxtransform": [213, 255], "castpytorchtransform": [213, 255], "centercroptftransform": [213, 255], "center": [213, 255, 397, 398, 428, 465, 466], "paddedcentercroptransform": [213, 255], "crop_pad": [213, 255], "resizetftransform": [213, 255], "bicub": [213, 255, 465], "resizepytorchtransform": [213, 255], "randomcroptftransform": [213, 255], "randomresizedcroppytorchtransform": [213, 255], "08": [213, 255, 465, 469], "randomresizedcropmxnettransform": [213, 255], "randomresizedcroptftransform": [213, 255], "normalizetftransform": [213, 255], "rescal": [213, 255, 465], "deviat": [213, 255, 465], "broadcast": [213, 255, 420, 465], "rescalekeraspretraintransform": [213, 255], "rescaletftransform": [213, 255], "rescaletransform": [213, 255], "alignimagechanneltransform": [213, 255], "dim": [213, 255, 463, 465], "align": [213, 255, 393, 465], "w": [213, 255, 456, 463, 465], "must": [213, 255, 266, 319, 394, 395, 414, 415, 428, 459, 465], "pytorchalignimagechannel": [213, 255], "tondarraytransform": [213, 255], "resizemxnettransform": [213, 255], "resizetransform": [213, 255], "cropresizetftransform": [213, 255], "boundari": [213, 255, 465], "area": [213, 255, 266, 319, 430, 465], "pytorchcropresizetransform": [213, 255], "mxnetcropresizetransform": [213, 255], "cropresizetransform": [213, 255], "centercroptransform": [213, 255], "mxnetnormalizetransform": [213, 255], "pytorchnormalizetransform": [213, 255], "normalizetransform": [213, 255], "randomcroptransform": [213, 255], "randomresizedcroptransform": [213, 255], "get_final_text": [213, 255], "pred_text": [213, 255], "orig_text": [213, 255], "project": [213, 255, 392, 393, 394, 457, 462, 466, 470], "squadexampl": [213, 255], "qas_id": [213, 255], "question_text": [213, 255], "doc_token": [213, 255], "orig_answer_text": [213, 255], "start_posit": [213, 255], "end_posit": [213, 255], "is_imposs": [213, 255], "simpl": [213, 255, 428, 431, 462, 463, 466], "answer": [213, 255, 267, 268, 320, 321, 393, 456, 465, 469], "posit": [213, 255, 393, 430, 434], "unique_id": [213, 255], "example_index": [213, 255], "doc_span_index": [213, 255], "token_to_orig_map": [213, 255], "token_is_max_context": [213, 255], "input_mask": [213, 255, 431], "segment_id": [213, 255, 431], "read_squad_exampl": [213, 255], "input_fil": [213, 255], "doc_strid": [213, 255, 465], "max_query_length": [213, 255, 465], "output_fn": [213, 255], "inputbatch": [213, 255], "collecttransform": [213, 255], "10833": [213, 255], "tfsquadv1posttransform": [213, 255], "n_best_siz": [213, 255, 465], "20": [213, 255, 455, 463, 465, 468, 469], "384": [213, 255, 465], "64": [213, 255, 396, 463, 465, 469], "max_answer_length": [213, 255, 465], "30": [213, 255, 421, 425, 427, 463, 465, 469], "nbest_predict": [213, 255, 465], "question": [213, 255, 267, 268, 320, 321, 393, 394, 399, 428, 434, 456, 463, 465, 469], "anoth": [213, 255, 263, 272, 316, 389, 418, 432, 444, 448, 465, 466], "long": [213, 255, 423, 465], "document": [213, 255, 376, 394, 404, 420, 432, 436, 446, 449, 450, 461, 465, 467], "chunk": [213, 255, 465], "tfmodelzoocollecttransform": [213, 255], "tfsquadv1modelzooposttransform": [213, 255], "squadv1": [213, 255, 465], "see": [213, 255, 263, 316, 393, 395, 397, 429, 431, 444, 445, 448, 451, 452, 463, 464, 466, 469], "parsedecodevoctransform": [213, 255], "conf_fname_or_obj": [214, 223, 256, 261, 271, 272, 273, 274, 276, 285, 290, 298], "thei": [214, 376, 393, 418, 424, 430, 431, 432, 439, 453], "possibl": [214, 454, 456, 460, 466], "unnecessari": [214, 431], "tensorflowcrossentropyloss": 215, "pytorchcrossentropyloss": 215, "tensorflowsparsecategoricalcrossentropi": 215, "sparsecategoricalcrossentropyloss": 215, "setter": 216, "calib_dataload": [216, 299, 357, 395, 398, 415, 416, 425, 426, 430, 431, 459, 460], "reason": [216, 393, 415, 464, 466], "know": [216, 420, 461], "known": [216, 302, 361, 431, 464, 466], "open": [217, 262, 315, 381, 391, 393, 398, 422, 423, 431, 446, 449, 452, 457], "metric_cl": [218, 323, 357, 431], "user_metr": [218, 323, 357], "alwai": [218, 266, 319, 323, 357, 430, 431], "recommend": [218, 323, 399, 416, 424, 442, 445, 450, 452, 456, 458, 466], "set_backend": 219, "tensorflowoptim": 220, "pytorchoptim": 220, "optimizer_registri": 220, "optimizer_typ": 220, "cross": [220, 270, 323, 426, 466], "tensorflowsgd": 220, "tensorflowadamw": 220, "tensorflow_addon": 220, "adamw": 220, "tensorflowadam": 220, "adam": [220, 468], "pytorchsgd": 220, "record_output": 222, "output_process": 222, "help": [222, 272, 433, 434, 440, 451, 466, 467], "get_activ": 222, "f": [225, 418, 420, 459, 463], "pickle_modul": 225, "pickle_protocol": 225, "_use_new_zipfile_seri": 225, "prepare_prun": [225, 456], "opt": [225, 398, 439, 463], "tensorflowimagefold": 242, "qlinear2qdq": [257, 262, 315], "qlinearop": [258, 427, 442, 459], "check_model": 258, "modelproto": [258, 324, 433], "onnx_qlinear_to_qdq": 258, "input_name_to_nod": 258, "destin": [258, 272], "tf_to_fp32_onnx": 259, "tf_to_int8_onnx": 259, "int8_model": [259, 399], "torch_to_fp32_onnx": 260, "pt_model": 260, "do_constant_fold": 260, "verbos": [260, 302, 361], "torch_to_int8_onnx": 260, "_quantiz": 260, "achiev": [261, 298, 422, 430, 431, 454, 456, 457, 459, 464, 466], "across": [261, 271, 298, 324, 417, 431, 456, 463, 466], "variou": [261, 271, 298, 324, 427, 434, 456, 458], "dl": [261, 271, 285, 290, 298, 324, 426, 438, 451, 457], "bring": [261, 298, 445, 463], "unifi": [261, 298, 399, 415, 426, 427, 431, 433], "vari": [261, 285, 290, 298, 455, 456, 463, 469], "roc": [261, 270, 285, 290, 298, 323], "flexibl": [261, 285, 290, 298, 418, 456], "via": [261, 285, 290, 298, 393, 420, 427, 431, 434, 451, 456], "popular": [262, 315, 391, 398, 399, 418, 421, 422, 425, 431, 456, 459, 466, 467], "compress": [262, 285, 290, 315, 334, 378, 391, 398, 404, 418, 427, 431, 451, 453, 454, 456, 457, 459, 463, 467, 469], "techniqu": [262, 315, 391, 398, 427, 431, 434, 454, 456, 458, 459, 467, 468, 469], "bleu": [262, 264, 269, 315, 317, 322, 430, 456], "bleu_util": [262, 269, 315, 322], "coco_label_map": [262, 269, 315, 322], "coco_tool": [262, 269, 315, 322], "evaluate_squad": [262, 269, 315, 322], "f1": [262, 267, 269, 270, 315, 320, 322, 323, 420, 430, 431, 462, 469], "basic_na": [262, 275, 315], "nas_util": [262, 275, 315], "pruner_legaci": [262, 315], "gradient_sensit": [262, 281, 315], "group_lasso": [262, 281, 315], "pruning_recip": [262, 315], "tile_pattern": [262, 286, 287], "pytorch_prun": [262, 315], "logger": [262, 291, 315, 379, 382, 389], "prune_util": [262, 291, 315], "tuning_sampl": [262, 304, 310, 315, 365, 371], "tuning_spac": [262, 304, 310, 311, 313, 315, 365, 371, 372, 374], "tuning_struct": [262, 304, 310, 311, 312, 315, 365, 371, 372, 373], "auto_mixed_precis": [262, 304, 315, 365], "graph_optim": [262, 315], "mixed_precis": [262, 315, 324, 431], "model_convers": [262, 315], "pruning_v2": [262, 315], "unicoderegex": [263, 316], "hoc": [263, 316], "hack": [263, 316], "recogn": [263, 316, 466], "nondigit_punct_r": [263, 316], "compil": [263, 316, 431, 455], "express": [263, 316, 393], "preced": [263, 316, 463], "digit": [263, 316, 457], "punct_nondigit_r": [263, 316], "symbol_r": [263, 316], "bleu_token": [263, 316], "mose": [263, 316], "smt": [263, 316], "mosesdecod": [263, 316], "mteval": [263, 316], "v14": [263, 316], "pl": [263, 316], "l954": [263, 316], "l983": [263, 316], "bilingu": [263, 316], "understudi": [263, 316], "qualiti": [263, 316], "machin": [263, 316, 422, 428, 437, 451, 457, 463, 464], "translat": [263, 264, 316, 317, 456, 466], "natur": [263, 316, 422], "approxim": [263, 264, 316, 317, 430], "glue": [263, 270, 316, 323, 416, 430, 431, 440], "word": [263, 316, 430, 456], "ngram": [263, 316, 430], "breviti": [263, 264, 316, 317, 430], "penalti": [263, 264, 316, 317, 430], "doe": [263, 316, 375, 416, 430, 431, 461, 465], "beam": [263, 316, 430], "tensor2tensor": [264, 317], "bleu_hook": [264, 317], "compute_bleu": [264, 317], "reference_corpu": [264, 317], "translation_corpu": [264, 317], "max_ord": [264, 317], "use_bp": [264, 317], "against": [264, 317], "gram": [264, 317], "bleu_scor": [264, 317], "third": [266, 319, 429], "parti": [266, 319, 429, 459], "pycocotool": [266, 319, 423, 428], "noth": [266, 319, 466], "thu": [266, 319, 431, 456, 459], "cannot": [266, 319, 395, 423, 432, 464], "jonathanhuang": [266, 319], "image_id": [266, 319, 430], "encod": [266, 319, 465], "invok": [266, 319], "groundtruth_dict": [266, 319], "exportgroundtruthtococo": [266, 319], "groundtruth_boxes_list": [266, 319], "groundtruth_classes_list": [266, 319], "max_num_class": [266, 319], "output_path": [266, 319], "detections_list": [266, 319], "exportdetectionstococo": [266, 319], "detection_boxes_list": [266, 319], "detection_scores_list": [266, 319], "detection_classes_list": [266, 319], "cocowrapp": [266, 319], "loadannot": [266, 319], "cocoevalwrapp": [266, 319], "agnostic_mod": [266, 319], "computemetr": [266, 319], "detection_typ": [266, 319], "bbox": [266, 319, 395, 430], "hold": [266, 302, 319, 361, 416], "iou_typ": [266, 319], "iou_thr": [266, 270, 319, 323, 430], "map_point": [266, 270, 319, 323, 430], "cocoev": [266, 319], "mscoco": [266, 319], "Then": [266, 319, 444, 446, 448, 449, 463, 466], "exportsingleimagegroundtruthtococo": [266, 319], "next_annotation_id": [266, 319], "category_id_set": [266, 319], "groundtruth_box": [266, 319], "groundtruth_class": [266, 319], "groundtruth_mask": [266, 319], "groundtruth_is_crowd": [266, 319], "ingest": [266, 319], "here": [266, 319, 376, 416, 420, 421, 422, 424, 425, 430, 439, 446, 449, 451, 459, 461, 462, 469], "ones": [266, 319, 456], "exportsingleimagedetectionstococo": [266, 319], "uniqu": [266, 299, 319, 459], "assign": [266, 319, 389, 420, 458], "num_gt_box": [266, 319], "num_detect": [266, 270, 319, 323, 430, 431, 468], "image_height": [266, 319], "image_width": [266, 319], "detection_mask": [266, 319], "crowd": [266, 319], "insid": [266, 319, 418, 419, 452, 456, 466], "exportsingleimagedetectionboxestococo": [266, 319], "detection_box": [266, 319, 431, 468], "detection_scor": [266, 319, 431, 468], "detection_class": [266, 319, 431, 468], "exporsingleimagedetectionboxestococo": [266, 319], "exportsingleimagedetectionmaskstococo": [266, 319], "allenai": [267, 268, 320, 321], "bi": [267, 268, 320, 321], "att": [267, 268, 320, 321], "flow": [267, 268, 320, 321, 395, 396, 431], "f1_score": [267, 268, 320, 321], "ground_truth": [267, 268, 320, 321], "ground": [267, 268, 320, 321], "truth": [267, 268, 320, 321], "metric_max_over_ground_truth": [267, 268, 320, 321], "metric_fn": [267, 268, 320, 321], "exact_match_scor": [267, 320], "exact": [267, 320], "averag": [267, 268, 270, 320, 321, 323, 430, 431, 466], "articl": [267, 268, 320, 321], "paragraph": [267, 268, 320, 321], "qa": [267, 268, 320, 321], "cantain": [267, 268, 320, 321], "normalize_answ": [268, 321], "extra": [268, 321, 431], "newlin": [268, 321], "tab": [268, 321, 451, 464], "harmon": [268, 270, 321, 323], "recal": [268, 270, 321, 323], "answer_start": [268, 321], "177": [268, 321], "denver": [268, 321], "bronco": [268, 321], "nfl": [268, 321], "team": [268, 321, 393, 460], "afc": [268, 321], "super": [268, 321, 396], "bowl": [268, 321], "50": [268, 321, 396, 463, 469], "56be4db0acb8001400a502ec": [268, 321], "form": [268, 321, 418, 451], "percentag": [268, 321, 468], "tensorflowmetr": [270, 323], "maintain": [270, 323, 393, 394, 398, 433, 434, 446, 449, 461], "pytorchmetr": [270, 323], "mxnetmetr": [270, 323], "onnxrtqlmetr": [270, 323], "onnxrtitmetr": [270, 323], "metric_registri": [270, 323], "metric_typ": [270, 323], "decorator_metr": [270, 323], "basemetr": [270, 323, 357], "single_output": [270, 323], "hvd": [270, 323, 420], "wrappytorchmetr": [270, 323], "wrapmxnetmetr": [270, 323], "wraponnxrtmetr": [270, 323], "proport": [270, 323], "were": [270, 323, 437, 456], "pred_list": [270, 323], "pytorchloss": [270, 323], "mae": [270, 323, 430], "compare_label": [270, 323, 357, 430], "actual": [270, 323, 420, 463], "rmse": [270, 323, 430, 466], "squar": [270, 305, 323, 366, 430, 463, 466], "tensorflowtopk": [270, 323], "k": [270, 323, 357, 430], "among": [270, 323, 445, 463], "outcom": [270, 323], "num_correct": [270, 323], "num_sampl": [270, 323], "generaltopk": [270, 323], "cocomapv2": [270, 323, 430], "anno_path": [270, 323, 430], "map_kei": [270, 323], "detectionboxes_precis": [270, 323], "output_index_map": [270, 323, 430], "tensorflowmap": [270, 323], "tensorflowcocomap": [270, 323], "tensorflowvocmap": [270, 323], "squadf1": [270, 323, 430], "miou": [270, 323], "num_class": [270, 323], "21": [270, 323, 439, 440, 457, 463, 469], "iou": [270, 323], "intersect": [270, 323, 399, 430], "union": [270, 323, 378, 430], "onnxrtglu": [270, 323], "dlrm": [270, 323], "modelconvers": 272, "typic": [272, 299, 396, 398, 419, 421, 425, 456, 469], "basicna": 273, "model_build": [273, 276], "conf_fnam": 273, "nasbas": [276, 396], "nas_registri": 277, "nas_method": 277, "create_search_space_pool": 277, "idx": [277, 416], "enumer": [277, 378, 399, 418, 419, 420, 431, 454, 456, 464], "find_pareto_front": 277, "pareto": [277, 396], "front": [277, 396], "n_point": 277, "n_metric": 277, "n_pareto_point": 277, "gridsearch": 278, "grid": [278, 396], "whole": [278, 459], "randomsearch": 278, "bayesianoptimizationsearch": 278, "gradientsensitivityprun": 279, "pytorchmodel": [279, 280, 282, 283, 284, 333], "overwritten": [279, 280, 282, 283, 284, 439], "grouplassoprun": 280, "legaci": 281, "basicmagnitudeprun": 282, "lock": [283, 284, 427, 454, 456], "pruner_registri": 284, "clase": 284, "pruningconf": [285, 290], "tfpruningcallback": [285, 290], "input_model": [285, 290, 433, 464], "pure": [285, 290, 432, 456], "pattern_registri": 288, "pattern_typ": 288, "patternbas": 288, "mask_shap": [288, 289], "is_contigu": 288, "tile": 289, "tilepatternbas": 289, "tilepattern_1x1": 289, "1x1": [289, 418, 431, 456], "tilepattern_2x2": 289, "2x2": [289, 463], "tilepattern_1x16": 289, "1x16": 289, "tilepattern_4x1": 289, "tilepattern_1x2": 289, "1x2": [289, 463], "reset_non_value_to_default": 294, "obejct": 294, "parse_not_to_prun": 294, "update_frequency_on_step": [295, 458], "max_sparsity_ratio_per_lay": [295, 458], "magnitudeprun": 295, "snipprun": 295, "snipmomentumprun": 295, "moreoev": 295, "least": [296, 431, 456, 466], "templat": [296, 431, 456], "tree": [296, 312, 373], "huggingface_model": 296, "eager": [296, 356, 420, 427, 459, 460, 464, 469], "config_file_path": 296, "pruner_info": 296, "quantconf": 298, "server": [299, 451], "seper": 299, "opt_model": [299, 431], "fulli": [299, 431, 459, 463], "train_func": [299, 378, 420, 431, 459], "automixedprecisiontunestrategi": [300, 359], "basictunestrategi": [301, 360], "stage": [301, 306, 358, 360, 367, 418, 456, 464, 466], "polici": [301, 305, 358, 360, 366, 393, 398, 455, 468, 470], "bayesiantunestrategi": [302, 361], "acq_max": [302, 361], "ac": [302, 361], "gp": [302, 361], "y_max": [302, 361], "n_warmup": [302, 361], "10000": [302, 361, 456], "n_iter": [302, 361], "acquisit": [302, 361], "gaussian": [302, 361, 466], "relev": [302, 361], "limit": [302, 361, 389, 398, 418, 464], "acq": [302, 361], "randomst": [302, 361], "scipi": [302, 361], "x_max": [302, 361], "targetspac": [302, 361], "pbound": [302, 361], "9527": [302, 361, 431, 468], "allow": [302, 361, 418, 420, 430, 431, 432, 458, 463, 466, 468], "bayesianoptim": [302, 361], "exhaustivetunestrategi": [303, 363], "msetunestrategi": [305, 366], "mse_v2tunestrategi": [306, 367], "revert": [306, 314, 367, 375, 466], "randomtunestrategi": [307, 368], "strategy_registri": [308, 369, 466], "tunestrategi": [308, 369, 466], "tuningsamplerregistri": [311, 372], "tuningsampl": [311, 372], "tuningord": [311, 372], "Not": [311, 312, 372, 373, 389, 396], "tuningspac": [311, 312, 372, 373], "tuning_order_lst": [311, 372], "initial_op_tuning_cfg": [311, 372], "modelwisetuningsampl": [311, 372], "tuning_items_prior": [311, 372], "op_dtype_dict": [311, 372], "optuningconfig": [311, 312, 313, 372, 373, 374], "optypewisetuningsampl": [311, 372], "opwisetuningsampl": [311, 372], "fallbacktuningsampl": [311, 372], "op_dtyp": [311, 372], "accumul": [311, 372, 466], "skip_first": [311, 372], "smoothquantsampl": 311, "tuningitem": [312, 373], "item_typ": [312, 373], "pattern_to_intern": [312, 373], "default_dtyp": [312, 373], "pattern_to_path": [312, 373], "quant_mode_from_pattern": [312, 373], "internal_pattern": [312, 373], "initial_tuning_cfg_with_quant_mod": [312, 373], "op_name_typ": [312, 373], "step1": [312, 373], "step2": [312, 373], "complet": [312, 373, 399, 459, 466, 468, 469], "step3": [312, 373], "step4": [312, 373], "step5": [312, 373], "op_quant_mod": [313, 374], "ordereddefaultdict": [314, 375], "extract_data_typ": [314, 375], "data_typ": [314, 375], "sign": [314, 375, 394, 459, 462], "reverted_data_typ": [314, 375], "signed_flag": [314, 375], "get_adaptor_nam": [314, 375], "experiment": [315, 350, 355, 396, 416, 419, 420, 422, 431, 456, 458, 461, 465], "base_model": [315, 326], "keras_model": [315, 326], "mxnet_model": [315, 326], "nets_factori": [315, 326], "onnx_model": [315, 326, 350], "tensorflow_model": [315, 326, 355], "torch_model": [315, 326], "collect_layer_histogram": [315, 382], "create_obj_from_config": [315, 382], "kl_diverg": [315, 382], "load_huggingfac": [315, 382, 431], "neural_insights_util": [315, 382], "weights_detail": [315, 382], "sub_class": [323, 357], "register_customer_metr": 323, "mani": [323, 357, 428, 466, 468], "tell": [323, 357, 458], "topk": [323, 357, 420, 430, 431, 459], "matrix": [323, 357, 398, 442, 467], "frozen": [324, 332, 357, 433], "savedmodel": [324, 332, 357, 469], "chould": 324, "onnx_ml_pb2": [324, 433], "hybirdblock": [324, 357], "paramt": [324, 378], "basemodel": 325, "plai": [325, 457, 463], "role": [325, 463], "kerasmodel": 327, "get_model_fwk_nam": 328, "fwk": 328, "mxnetmodel": 329, "net": 330, "factori": [330, 337, 339, 344, 347, 349, 354], "tfslimnetsfactori": 330, "onnxmodel": [331, 350], "get_model_typ": 332, "validate_graph_nod": 332, "validate_and_inference_input_output": 332, "output_tensor_nam": 332, "graph_sess": 332, "graph_def_sess": 332, "frozen_pb_sess": 332, "load_saved_model": 332, "saved_model_tag": 332, "signatur": 332, "saved_model_dir": 332, "tag": [332, 463, 464], "metagraphdef": 332, "keras_sess": 332, "slim_sess": 332, "checkpoint_sess": 332, "estimator_sess": 332, "saved_model_sess": 332, "tensorflowbasemodel": [332, 355], "tensorflowsavedmodelmodel": 332, "tensorflowqatmodel": 332, "tensorflowcheckpointmodel": 332, "checkpoint": [332, 388, 433], "tensorflowmodel": 332, "pytorchbasemodel": 333, "pytorchfxmodel": 333, "ipexmodel": 333, "driven": [334, 398, 431, 432, 451, 453, 464], "objective_registri": 334, "objective_custom_registri": 334, "obj_cl": 334, "eural_compressor": 334, "objective_cl": 334, "user_object": 334, "__class__": 334, "__name__": 334, "objective_cfg": 334, "usr_cfg": 334, "user_obj_cfg": 334, "easili": [334, 399, 435, 439, 451, 453, 463], "peak": [334, 453], "multiobject": 334, "metric_criterion": 334, "metric_weight": 334, "obj_criterion": 334, "obj_weight": 334, "is_measur": 334, "parserfactori": 336, "onnxrtparserfactori": 338, "onnxprofilingpars": 340, "respons": [340, 341, 345, 459], "profilingpars": 341, "profilingresult": 342, "total_execution_tim": 342, "accelerator_execution_tim": 342, "cpu_execution_tim": 342, "op_run": 342, "op_defin": 342, "tensorflowparserfactori": 343, "tensorflowprofilingpars": 345, "profilerfactori": [346, 348, 353], "create_onnx_config": 351, "ort": 351, "independ": [351, 356], "sessionopt": 351, "delete_assign": 356, "create_tf_config": 356, "tf_modul": 356, "configproto": 356, "set_eager_execut": 356, "calib_func": [357, 460], "entir": [357, 378, 395, 456, 463], "autotunestrategi": 358, "conservativetunestrategi": 362, "o0": [362, 466], "who": [362, 393], "hawq_v2tunestrategi": 364, "made": [364, 399, 459, 461, 466], "impact": [364, 461, 466], "tunestrategymeta": 369, "metaclass": 369, "lowerbitssampl": 372, "blockfallbacktuningsampl": 372, "op_block_lst": 372, "target_dtyp": 372, "build_slave_faker_model": 375, "slave": [375, 466], "virtual": [375, 457], "fun": 376, "attribute1": 376, "module_debug_level1": 376, "debug": [376, 385, 444, 448, 452, 466], "function1": 376, "param1": 376, "param2": 376, "parameter1": 376, "parameter2": 376, "o": [376, 428, 436, 455, 463], "function2": 376, "pep": 376, "484": 376, "output_model": [376, 415, 431, 464], "function3": 376, "section": [376, 418, 419, 451, 456, 458, 468], "restructuredtext": 376, "liter": 376, "attributeerror": 376, "except": [376, 389], "generator1": 376, "example_gener": 376, "exampleclass": 376, "param3": 376, "public": [376, 393, 446, 449], "attr1": 376, "attr2": 376, "attr5": 376, "api_doc_exampl": 377, "loop": [378, 395, 396, 424, 462, 466], "compressionmanag": 378, "uesd": 378, "deal": 378, "pruningconfig": 378, "orchestr": [378, 398, 427, 467], "on_train_begin": [378, 395, 418, 419, 431, 454, 456, 459], "train_loop": [378, 431, 454], "on_epoch_begin": [378, 381, 418, 419, 431, 454], "on_step_begin": [378, 381, 418, 419, 431, 454, 456], "on_after_compute_loss": [378, 418, 419, 431, 454], "backward": [378, 418, 419, 420, 431, 454, 456, 459, 461], "on_before_optimizer_step": [378, 418, 419, 431, 454, 456], "on_step_end": [378, 381, 418, 419, 431, 454], "on_epoch_end": [378, 381, 418, 419, 431, 454], "on_train_end": [378, 418, 419, 431, 454, 456, 459], "path_to_sav": 378, "manag": [378, 381, 425, 431, 434, 435, 445], "top1": [378, 456, 459, 469], "callbacks_list": 378, "layerhistogramcollector": 379, "layer_tensor": 379, "include_lay": 379, "get_func_from_config": 381, "func_dict": 381, "get_preprocess": 381, "get_metr": 381, "get_postprocess": 381, "get_algorithm": 381, "algo": 381, "create_dataset": 381, "cfg_preprocess": 381, "cfg_filter": 381, "create_dataload": 381, "dataloader_cfg": 381, "create_eval_func": 381, "postprocess_cfg": 381, "fp32_baselin": [381, 399], "baselin": [381, 462, 464], "create_train_func": 381, "train_cfg": 381, "Their": 381, "auxiliari": 382, "pretrain": [384, 434, 440], "optimizedmodel": 384, "from_pretrain": [384, 431], "save_for_huggingface_upstream": [384, 431], "output_dir": [384, 431, 439, 440], "msg": 385, "fatal": 385, "warn": 385, "warin": 385, "alia": [385, 389, 436, 441], "insight": [386, 398, 466], "register_neural_insights_workload": 386, "workload_loc": [386, 389], "workload_mod": 386, "workload": [386, 389, 457], "uuid": 386, "update_neural_insights_workload": 386, "workload_uuid": 386, "update_neural_insights_workload_accuracy_data": 386, "baseline_accuraci": 386, "optimized_accuraci": 386, "is_int8_model": 388, "checkpoint_dir": 388, "history_cfg": 388, "best_configur": 388, "best_model_weight": 388, "pt": [388, 433, 457, 459, 460], "snapshot": 388, "cfg_from_fil": 389, "yaml_fil": [389, 416, 420, 430], "lazyimport": 389, "lazi": 389, "till": [389, 466], "decorat": 389, "time_limit": 389, "get_siz": 389, "seen": [389, 399], "recurs": 389, "compute_spars": 389, "fault_tolerant_fil": 389, "equal_dict": 389, "d2": 389, "compare_kei": 389, "ignore_kei": 389, "cpuinfo": 389, "dump_elapsed_tim": [389, 399], "customized_msg": 389, "elaps": 389, "combine_histogram": 389, "old_hist": 389, "old": [389, 431, 461], "get_tensor_histogram": 389, "get_all_fp32_data": 389, "get_tuning_histori": 389, "tuning_history_path": 389, "num": [389, 430], "offlin": [389, 393, 431, 459, 463], "str2arrai": 389, "dequantizeweight": 389, "weight_tensor": 389, "min_filter_tensor": 389, "max_filter_tensor": 389, "scale_info": 389, "captureoutputtofil": 389, "tmp_file_path": 389, "stream": 389, "sy": [389, 437], "stderr": 389, "captur": 389, "statist": [389, 390], "header": [389, 423], "field_nam": 389, "output_handl": 389, "printer": 389, "global_st": 389, "load_data_from_pkl": 389, "pkl": 389, "dump_data_to_loc": 389, "show_memory_info": 389, "hint": 389, "dump_class_attr": 389, "compare_object": 389, "obj1": 389, "obj2": 389, "ignore_attr": 389, "comparison": [389, 461, 464], "alias_param": 389, "param_nam": 389, "param_alia": 389, "alias": 389, "print_tabl": 389, "column_map": 389, "table_entri": 389, "titl": [389, 429, 452], "insert_newlin": 389, "prettyt": 389, "column": [389, 463], "func": [389, 459, 468], "handler": [389, 466], "get_tensors_info": 389, "get_weights_detail": 389, "weightdetail": 389, "dump_tabl": 389, "filepath": 389, "file_typ": 389, "csv": [389, 396], "dump_table_to_csv": 389, "get_number_of_socket": 389, "platform": [389, 398, 427, 434, 442, 457, 459, 469], "opentri": 389, "activation_min": 389, "activation_max": 389, "print_op_list": 389, "get_op_list": 389, "minmax_file_path": 389, "input_model_tensor": 389, "optimized_model_tensor": 389, "dequan_min_max": 389, "calculate_ms": 389, "mse_metric_gap": 389, "fp32_tensor": 389, "dequantize_tensor": 389, "euclidean": [389, 418], "distanc": [389, 418], "weightsdetail": 390, "input_tensor_data": 390, "optimized_tensor_data": 390, "weightsstatist": 390, "welcom": [392, 393, 394, 398, 470], "interest": [393, 398, 464], "foster": 393, "particip": 393, "commun": 393, "harass": 393, "experi": [393, 434, 462, 463, 466], "everyon": 393, "regardless": 393, "ag": 393, "bodi": 393, "ethnic": 393, "characterist": 393, "gender": 393, "educ": 393, "socio": 393, "econom": 393, "appear": [393, 445, 451], "race": 393, "religion": 393, "sexual": 393, "orient": 393, "behavior": [393, 394, 399, 424, 433, 464, 466, 468], "contribut": [393, 398, 456], "inclus": 393, "Being": 393, "respect": [393, 424, 456, 463, 468], "viewpoint": 393, "gracefulli": 393, "critic": 393, "focus": [393, 399], "empathi": 393, "toward": [393, 418], "member": [393, 399], "unaccept": 393, "imageri": 393, "unwelcom": 393, "troll": 393, "insult": 393, "derogatori": 393, "comment": [393, 416, 430, 431, 465], "polit": 393, "attack": 393, "privat": 393, "publish": [393, 429, 432, 452, 463], "electron": 393, "explicit": 393, "permiss": 393, "inappropri": 393, "profession": 393, "clarifi": 393, "appropri": [393, 463], "fair": 393, "action": [393, 446, 449], "edit": 393, "reject": 393, "commit": [393, 394], "wiki": 393, "issu": [393, 394, 397, 428, 459, 464], "ban": 393, "temporarili": 393, "deem": 393, "threaten": 393, "offens": 393, "harm": 393, "mail": 393, "social": [393, 457], "media": [393, 457], "account": [393, 462, 466], "appoint": 393, "onlin": [393, 462], "event": [393, 464], "abus": 393, "report": [393, 394, 462], "contact": [393, 461, 462], "complaint": 393, "review": [393, 394], "investig": 393, "circumst": [393, 458], "oblig": 393, "confidenti": 393, "regard": [393, 460], "incid": 393, "separ": [393, 426, 429, 454, 458], "good": [393, 459, 466], "faith": 393, "face": [393, 398, 404, 434, 438, 457, 461], "repercuss": 393, "leadership": 393, "faq": [393, 398], "page": [393, 394, 398], "send": 394, "view": [394, 398, 421, 442, 451, 461], "pylint": 394, "flake8": 394, "autopep8": 394, "cover": [394, 422, 426, 457], "would": [394, 431, 432, 456, 459, 463], "adopt": [394, 434, 456, 457, 463], "certif": 394, "agre": 394, "j": [394, 398, 463, 469], "bug": 394, "jira": 394, "ticket": 394, "potenti": [394, 396], "risk": 394, "pr": [394, 430, 446, 449, 461], "reproduc": 394, "hardwar": [394, 398, 399, 418, 427, 431, 432, 451, 455, 456, 457, 458], "submit": [394, 457], "intend": 394, "safe": 394, "collabor": [394, 436, 442], "adher": 394, "toolkit": [395, 428, 434, 442, 457, 467], "tracer": 395, "resolv": [395, 397], "floatfunct": 395, "cat": [395, 422, 437], "done": [395, 418, 419, 435, 451, 456, 459], "10004": [395, 396, 399, 415, 418, 419, 424, 427, 432, 454, 458, 468], "neural_compressor": [395, 396, 398, 414, 415, 416, 418, 419, 420, 422, 425, 426, 430, 431, 432, 433, 453, 454, 456, 458, 459, 460, 461, 462, 463, 465, 466, 468], "eval": [395, 415, 434, 459, 464], "fail": [395, 422], "conduct": [395, 431, 439, 451, 467], "imper": 395, "therefor": [395, 431, 456, 459, 461, 463], "lot": [395, 463], "As": [395, 415, 418, 431, 445, 456, 466], "failur": 395, "successfulli": [395, 420, 457], "suggest": [395, 462], "traceabl": 395, "proxi": 395, "tutori": [395, 442, 457, 467], "prototyp": 395, "html": [395, 398, 446, 449], "highlight": 395, "untrac": 395, "ssd": [395, 422, 469], "resnet34": [395, 469], "r34": 395, "bboxes_labels_scor": 395, "prob": 395, "45": [395, 463, 469], "max_output": 395, "zip": 395, "dbox": 395, "dlabel": 395, "dscore": 395, "decode_singl": 395, "autom": [396, 434, 451, 452, 463], "artifici": 396, "ann": 396, "par": 396, "outperform": 396, "hand": 396, "propos": [396, 399, 418, 432, 463], "lie": 396, "predictor": 396, "4x": [396, 459], "shown": [396, 415, 418, 430, 431, 445, 453, 454, 456, 463, 466], "figur": [396, 444, 445, 448], "popul": 396, "inner": 396, "evolutionari": 396, "cycl": 396, "until": [396, 466], "conclud": 396, "met": [396, 424, 432, 459, 464], "yet": [396, 446, 449, 452], "simplest": [396, 437], "launcher": [396, 398, 418, 419, 442, 467], "agent": 396, "nsga2": 396, "supernet": 396, "ofa_mbv3_d234_e346_k357_w1": 396, "acc": [396, 456, 464, 469], "mac": [396, 452], "num_ev": 396, "250": [396, 456], "results_csv_path": 396, "search_result": 396, "dataset_path": 396, "ilsvrc2012": 396, "aim": [396, 398, 434, 456, 463, 466, 467], "mobilenetv3": 396, "lt": [396, 416, 455, 469], "wmt": 396, "en": 396, "de": 396, "guidelin": [397, 398], "mainstream": [398, 467], "learn": [398, 399, 415, 416, 422, 426, 427, 428, 431, 432, 434, 436, 439, 440, 442, 445, 446, 449, 451, 456, 457, 459, 463, 464, 466, 467], "runtim": [398, 399, 400, 415, 421, 424, 427, 436, 441, 442, 458], "workflow": [398, 418, 422, 428, 432, 446, 449, 464, 467], "particular": [398, 456], "wide": [398, 421, 432, 456, 459, 469], "xeon": [398, 428, 429, 432, 455, 457, 459, 460, 469], "scalabl": [398, 428, 432, 455, 457, 459, 460, 469], "processor": [398, 432, 455, 457, 459, 460, 469], "flex": [398, 428], "amd": [398, 427, 428, 469], "arm": [398, 427, 428, 469], "nvidia": [398, 427, 428, 469], "bloom": [398, 463], "176b": [398, 463], "7b": [398, 463], "stabl": [398, 428, 456, 457], "diffus": [398, 457, 469], "gpt": [398, 456, 463, 469], "hub": [398, 421, 425, 442], "hug": [398, 457], "vision": [398, 422, 438, 463], "coder": [398, 427, 435, 436, 439, 442, 445, 457], "cloud": [398, 457], "marketplac": [398, 452, 457], "googl": [398, 432, 457], "amazon": [398, 434, 442], "web": [398, 464], "servic": [398, 451, 455], "azur": [398, 457], "softwar": [398, 429, 432, 455, 456, 457, 461], "alibaba": [398, 441, 448, 449, 457], "tencent": [398, 457], "taco": [398, 457], "ai": [398, 434, 457, 460, 467], "ecosystem": [398, 457], "lightn": [398, 441], "pip": [398, 420, 423, 425, 428, 436, 439, 444, 446, 448, 449, 461], "wget": [398, 423, 425], "storag": [398, 425, 430, 463], "googleapi": [398, 425], "v1_6": [398, 425], "mobilenet_v1_1": [398, 425], "0_224_frozen": [398, 425], "quick": [398, 424, 467, 468], "overview": 398, "jupyterlab": [398, 434, 440, 442, 444, 448, 467], "studio": [398, 442, 451, 467], "topic": 398, "innov": [398, 442, 457, 467], "come": [398, 466], "soon": 398, "blog": [398, 457], "medium": [398, 457], "netflix": [398, 457], "2023": [398, 463, 469], "enhanc": [398, 434, 457, 460], "apr": [398, 457], "still": [398, 431, 457, 459, 460], "mlperf": [398, 457, 469], "5x": [398, 457], "neurip": [398, 457], "oct": [398, 457], "quala": [398, 457], "minilm": [398, 457, 469], "releas": [398, 428, 440, 442, 444, 448, 450, 470], "legal": [398, 470], "secur": [398, 455, 457, 470], "idea": [398, 456, 463, 466], "feel": 398, "bridg": [399, 427], "vanilla": [399, 427], "abcadaptor": 399, "__init__": [399, 415, 416, 430, 466], "query_fw_cap": 399, "query_fused_pattern": 399, "he": 399, "besid": [399, 418], "describ": [399, 424, 464], "past": 399, "mainten": 399, "difficult": [399, 463], "abil": [399, 416, 424, 463], "modif": [399, 415, 424, 439], "fragment": 399, "scenario": [399, 414, 418, 431, 456], "granular": [399, 424, 427, 437, 459, 463, 468], "semant": [399, 424], "mla": [399, 459], "becom": [399, 422, 456], "explor": 399, "inspect_tensor": 399, "op_list": [399, 464], "iteration_list": 399, "inspect_typ": 399, "save_to_disk": 399, "quantization_cfg": 399, "set_tensor": 399, "tensor_dict": 399, "diagnosis_help": 399, "linux": [414, 423, 445, 451], "x86_64": 414, "aarch64": 414, "encount": 415, "consum": 415, "previous": 415, "lack": [415, 423], "faster": [415, 417, 422, 457, 466, 469], "treat": 415, "manner": [415, 418, 433], "labelbal": [415, 416], "300": [415, 416], "16": [415, 416, 463, 469], "customis": [415, 416], "One": [416, 420, 427, 456, 457, 466], "ensp": [416, 430, 465], "imagerecord": [416, 420, 468], "image_nam": 416, "cocorecord": 416, "gt": [416, 463, 465], "int32": 416, "int64": 416, "offer": 416, "style_transf": 416, "content": 416, "tfrecorddataset": 416, "helloworld": [416, 465], "aid": 417, "deploy": [417, 434, 451, 463], "infrastructur": 417, "expens": [418, 431, 466], "deploi": [418, 431, 466], "power": [418, 431, 445, 455, 457], "mobil": [418, 431, 469], "produc": 418, "instruct": [418, 428, 432, 446, 449, 457, 458, 459], "logit": 418, "softmax": 418, "l": [418, 464, 466], "kd": 418, "kullback": 418, "leibler": 418, "patient": 418, "compact": [418, 431, 437, 456], "agnost": 418, "resourc": [418, 466], "convolut": [418, 457], "ia": 418, "attach": [418, 431, 463], "shallow": 418, "deepest": 418, "deeper": 418, "paper": [418, 456, 463], "10006": [418, 419], "student_output": [418, 419], "student_loss": [418, 419], "training_func_for_nc": [418, 419], "distil_loss_conf": 418, "accordingli": [418, 442], "promis": [419, 431, 456], "huge": [419, 456], "heavi": 419, "light": 419, "booster": 419, "degrad": [419, 456, 466], "incorpor": [419, 466], "novel": [419, 434, 445, 451], "place": [419, 428, 456, 464], "illustr": 419, "comb": 419, "distillation_criterion": [419, 431, 454], "q_conf": 419, "horovod": 420, "instal": [420, 423, 425, 434, 436, 439, 442, 446, 449, 451, 452, 455, 470], "builtin": 420, "program": [420, 429, 432, 434, 451], "addition": [420, 466], "enable_eager_execut": 420, "yaml_file_path": 420, "pre_process": 420, "simpli": [420, 433, 434, 436, 439, 451], "evaluation_result": 420, "evaluation_time_cost": 420, "partit": [420, 456], "distributedsampl": 420, "train_sampl": 420, "train_dataset": [420, 459], "num_replica": 420, "rank": 420, "train_load": 420, "train_kwarg": 420, "adadelta": 420, "distributedoptim": 420, "named_paramet": 420, "broadcast_paramet": 420, "root_rank": 420, "broadcast_optimizer_st": 420, "set_epoch": 420, "batch_idx": 420, "zero_grad": [420, 431, 456], "nll_loss": 420, "log_interv": 420, "0f": 420, "tloss": 420, "6f": 420, "dry_run": 420, "test_func": 420, "host": 420, "num_of_process": 420, "002": 420, "ssh": [420, 451], "prompt": 420, "readm": 420, "exactli": [420, 435], "cd": [420, 428], "recognit": [420, 422, 456, 464], "line": [420, 427, 434, 439, 440, 464], "resnet50_v1": [420, 431], "resizecropimagenet": [420, 465], "realiz": [420, 430, 453, 460, 462], "tow": 420, "node1": 420, "node2": 420, "TO": [420, 436], "your_node1_nam": 420, "your_node2_nam": 420, "resnet50_fp32_pretrained_model": 420, "nc_resnet50_v1": 420, "resnet": [420, 469], "varieti": [421, 458, 466], "demonstr": [421, 434, 464], "10k": [421, 425], "speedup": [421, 427, 459], "2x": [421, 427, 455], "vnni": [421, 427, 458, 459], "exchang": 422, "hope": 422, "inc_model": [422, 433], "fp32_onnx_config": 422, "verifi": 422, "vgg16": [422, 469], "mobilenet": [422, 462, 469], "rcnn": 422, "torchscript": [422, 463], "unsupport": [422, 431, 456], "add_relu": 422, "conv1d_relu": 422, "conv2d_relu": 422, "group_norm": 422, "hardswish": 422, "instance_norm": 422, "layer_norm": 422, "leaky_relu": 422, "sigmoid": 422, "due": [422, 456, 459, 463, 464], "toolchain": 423, "bare": 423, "metal": 423, "sudo": [423, 437], "apt": [423, 428, 437, 445], "python3": 423, "dev": [423, 444, 448], "distutil": 423, "essenti": 423, "git": [423, 428], "libgl1": 423, "mesa": 423, "glx": 423, "libglib2": 423, "ln": 423, "sf": 423, "usr": 423, "incompat": 423, "88": [423, 462, 469], "80": [423, 463, 464, 469], "pyobject": 423, "reinstal": 423, "importerror": 423, "libgl": 423, "No": [423, 431, 455, 457], "yum": [423, 428], "opencv": [423, 445], "conda": [423, 428, 437, 445, 461], "13": [423, 428, 463], "pend": 423, "sqlalchemi": 423, "27": [423, 469], "alemb": 423, "forg": [423, 428], "friendli": [424, 431, 463, 468], "dive": [424, 467], "unless": 424, "purpos": [424, 432, 451, 458, 459], "setup": [424, 428, 446, 449, 456], "let": [424, 439, 456, 458, 468], "syntax": 424, "go": [424, 446, 449, 458, 465], "up1": 424, "up2": 424, "valid_mixed_precis": 424, "per_tensor": [424, 459, 468], "addn": 424, "grappler_optim": 424, "constfold": 424, "arithmet": 424, "debug_stripp": 424, "jupyt": [425, 442, 444, 445, 448], "lab": [425, 444, 445, 446, 448, 449], "click": [425, 427, 434, 435, 442, 445, 451, 457, 464], "major": [426, 459, 463], "concept": [426, 462, 467], "rather": 426, "custom_metr": 426, "refin": [426, 456], "These": 427, "broad": [427, 440, 467], "420": 427, "geomean": 427, "snippet": 427, "gui": [427, 456], "upload": [427, 446, 449], "button": [427, 445, 451], "dispatch": 427, "qintegerop": [427, 459], "plan": 427, "oneapi": [428, 457, 467], "analyt": [428, 457, 467], "success": 428, "frequent": 428, "ask": 428, "pypi": [428, 446, 449], "nightli": 428, "clone": [428, 444, 448], "consolid": 428, "latest": [428, 457, 461], "eas": [428, 436, 457], "along": [428, 456], "streamlin": 428, "scienc": 428, "websit": 428, "anaconda": 428, "suit": [428, 452, 464], "esri": 428, "formerli": 428, "skylak": 428, "cascad": 428, "lake": [428, 432, 457], "cooper": [428, 432, 457], "ic": [428, 457], "sapphir": 428, "rapid": 428, "hbm": 428, "arctic": 428, "sound": 428, "pont": 428, "vecchio": 428, "cento": 428, "ubuntu": [428, 455], "22": [428, 469], "04": [428, 455, 469], "fortensorflow": 428, "forpytorch": 428, "12": [428, 469], "11": [428, 430, 432, 463, 466], "tf_enable_onednn_opt": 428, "onednn": [428, 459], "newer": 428, "copyright": 429, "subject": 429, "accompani": 429, "research": [429, 463], "wish": 429, "bibtex": 429, "misc": 429, "author": 429, "feng": 429, "tian": 429, "hanwen": 429, "haihao": [429, 456], "shen": [429, 456], "suyu": 429, "chen": 429, "howpublish": 429, "year": 429, "logo": [429, 455], "atom": 429, "phi": 429, "pentium": 429, "vtune": 429, "corpor": [429, 455], "subsidiari": [429, 455], "brand": [429, 455], "claim": [429, 455], "popularli": 430, "industri": [430, 457], "label_map": 430, "decis": 430, "ap": 430, "curv": 430, "turn": [430, 445], "target_boxes_num": 430, "str_label": 430, "int_label": 430, "inturn": 430, "cocomap": 430, "vocmap": 430, "categor": 430, "multiclass": 430, "multilabel": 430, "multi_metr": 430, "newmetr": 430, "reset": 430, "reflect": [430, 455, 465], "deliv": [431, 457], "conveni": 431, "upgrad": 431, "veri": [431, 452, 459, 466], "speed": [431, 442, 456, 457, 459, 466], "fundament": 431, "comprehens": [431, 467], "kind": 431, "resort": 431, "automodelforsequenceclassif": 431, "autotoken": 431, "val_dataset": [431, 459], "val_dataload": [431, 459], "worker": [431, 459], "ping_memori": [431, 459], "formul": 431, "effort": 431, "written": 431, "onnxrt_integ": [431, 468], "onnxrt_qlinear": [431, 468], "image_tensor": [431, 468], "post_training_dynamic_qu": [431, 458, 466], "1000": [431, 468], "2000": 431, "sampling_s": [431, 468], "model_wis": [431, 468], "op_dict": 431, "op_wis": [431, 464, 468], "sigopt_api_token": [431, 462, 466], "sigopt_project_id": [431, 462, 466], "sigopt_experiment_nam": [431, 462, 466], "demo": 431, "600": [431, 469], "training_arg": 431, "emul": [431, 459], "trainer": [431, 442], "similar": [431, 458, 463, 466, 468], "briefli": [431, 463], "maxim": [431, 456, 466], "pruning_func": 431, "num_train_epoch": [431, 456], "train_dataload": [431, 456, 459], "n_gpu": 431, "gradient_accumulation_step": 431, "clip_grad_norm_": 431, "max_grad_norm": 431, "rate": [431, 456, 459], "start_epoch": [431, 458, 468], "end_epoch": [431, 458, 468], "97": [431, 463, 469], "newli": [431, 456], "on_after_optimizer_step": [431, 456], "layer3": [431, 456], "lr_schedul": [431, 456], "weight_decai": [431, 468], "0004": 431, "nesterov": [431, 468], "randomresizedcrop": [431, 465], "totensor": [431, 465], "485": 431, "456": 431, "406": 431, "nepoch": 431, "cnt": 431, "loss_sum": 431, "iter_bar": 431, "tqdm": 431, "desc": 431, "teacher_logit": 431, "train_fun": 431, "training_func": 431, "recent": [431, 432], "growth": [431, 432, 456], "complex": [431, 432, 456], "significantli": [431, 432, 456, 466], "bandwidth": [431, 432], "exit_polici": [431, 468], "determinist": 431, "arbitrari": [431, 454], "meaning": [431, 454], "reli": [431, 463], "prune_conf": 431, "quantization_aware_training_conf": 431, "aforement": 431, "previou": [431, 456, 461, 463, 464, 466, 467], "inset": 431, "p_conf": [431, 454], "ssd_mobilenet_v1": 431, "benchmarkconf": 431, "half": [432, 442], "sixteen": 432, "launch": [432, 452], "3rd": [432, 457, 459, 460], "gen": [432, 457, 459, 460], "codenam": 432, "boost": [432, 435, 451, 456, 457], "x86": 432, "avx512": [432, 459], "vcvtne2ps2bf16": 432, "vcvtneps2bf16": 432, "vdpbf16p": 432, "consequ": 432, "avx512_bf16": 432, "cuda": [432, 434, 436, 459], "persist": 433, "gap": 433, "brought": [433, 435, 442, 459], "tf2": 433, "h5": 433, "hybridblock": 433, "0000": 433, "saved_result": 433, "simplifi": [434, 445, 451, 456], "subsequ": [434, 451], "acquir": 434, "analysi": [434, 451, 456, 462], "heurist": [434, 451], "rule": [434, 456], "great": 434, "facilit": 434, "autocast": 434, "my_model": 434, "no_grad": 434, "memory_format": 434, "112": [434, 469], "rand": [434, 463], "plugin": [434, 452], "aw": [434, 442, 457, 469], "sagemak": [434, 442], "inlin": [434, 439, 442], "neural_cod": [434, 436, 438, 439, 440, 442], "bench": 434, "superbench": 434, "enjoi": [435, 439, 442], "rebuild": [435, 444, 448], "reload": [435, 452], "modern": 436, "democrat": [436, 457], "programm": [436, 442, 451], "nano_bf16_channels_last": 436, "resnet18": [436, 469], "nano_bf16_ipex_channels_last": 436, "nano_bf16_ipex": 436, "nano_bf16": 436, "nano_fp32_channels_last": 436, "nano_fp32_ipex_channels_last": 436, "nano_fp32_ipex": 436, "nano_gpu_to_cpu": 436, "nano_int8": 436, "nano_jit_bf16_channels_last": 436, "nano_jit_bf16_ipex_channels_last": 436, "nano_jit_bf16_ipex": 436, "nano_jit_bf16": 436, "nano_jit_fp32_channels_last": 436, "nano_jit_fp32_ipex_channels_last": 436, "nano_jit_fp32_ipex": 436, "nano_jit_fp32": 436, "nano_onnxruntime_fp32": 436, "nano_onnxruntime_int8_qlinear": 436, "openvino": 436, "nano_openvino_fp32": 436, "nano_openvino_int8": 436, "bc": [437, 445], "conda_prefix": 437, "echo": 437, "tradit": [437, 456], "libjemalloc": 437, "libiomp5": 437, "home": 437, "lib": 437, "ld_preload": 437, "malloc_conf": 437, "oversize_threshold": 437, "background_thread": 437, "metadata_thp": 437, "dirty_decay_m": 437, "9000000000": 437, "muzzy_decay_m": 437, "kmp_affin": 437, "kmp_blocktim": 437, "dnnl_primitive_cache_capac": 437, "cpufreq": 437, "scaling_governor": 437, "powersav": 437, "tee": 437, "pytorch_jit_script": [438, 441], "pytorch_channels_last": [438, 441], "run_bench": 438, "patch": [438, 451], "patch_path": 438, "your_patch_path": 438, "sweep": 438, "sweep_object": 438, "bench_config": 438, "bench_featur": 438, "sai": 439, "run_glu": [439, 440], "requisit": 439, "task_nam": [439, 440], "do_ev": [439, 440], "remain": 439, "itself": 439, "run_glue_optim": 439, "static_ipex": 439, "auto_qu": 440, "v4": [440, 469], "albert": [440, 469], "sst2": 440, "alexnet": [440, 469], "pytorch_amp": 441, "optimize_for_infer": 441, "pytorch_jit_trac": 441, "pytorch_jit_script_ofi": 441, "pytorch_jit_trace_ofi": 441, "torchdynamo": 441, "pytorch_torchdynamo_jit_script": 441, "pytorch_torchdynamo_jit_trac": 441, "pytorch_torchdynamo_jit_script_ofi": 441, "pytorch_torchdynamo_jit_trace_ofi": 441, "pytorch_inc_bf16": 441, "pytorch_inc_static_quant_fx": 441, "pytorch_inc_static_quant_ipex": 441, "pytorch_inc_dynamic_qu": 441, "pytorch_ipex_fp32": 441, "pytorch_ipex_bf16": 441, "pytorch_ipex_int8_static_qu": 441, "pytorch_ipex_int8_dynamic_qu": 441, "blade": 441, "disc": 441, "pytorch_aliblad": 441, "pytorch_lightning_bf16_cpu": 441, "tensorflow_amp": 441, "keras_amp": 441, "tensorflow_inc": 441, "keras_inc": 441, "onnx_inc_static_quant_qlinear": 441, "onnx_inc_static_quant_qdq": 441, "onnx_inc_dynamic_qu": 441, "optimum": [441, 442], "pytorch_inc_huggingface_optimum_stat": 441, "pytorch_inc_huggingface_optimum_dynam": 441, "intel_extension_for_transform": 441, "bigdl": [441, 442], "nano": [441, 442], "nano_": 441, "inc_auto": 441, "delight": 442, "announc": 442, "v": [442, 451, 456, 466, 468], "500": 442, "isa": 442, "adjust": [442, 459, 463], "xpu": 442, "delta": 442, "acc_delta": 442, "int8_acc": 442, "fp32_acc": 442, "ext": [444, 446, 448, 449, 450], "nodej": [444, 448], "jlpm": [444, 448], "pin": [444, 448], "yarn": [444, 448], "npm": [444, 445, 448], "lieu": [444, 448], "labextens": [444, 445, 448], "typescript": [444, 448], "watch": [444, 448], "termin": [444, 445, 448], "immedi": [444, 448, 456], "refresh": [444, 448], "browser": [444, 448], "wait": [444, 448, 451], "rebuilt": [444, 448], "easier": [444, 448, 451, 457], "symlink": [444, 448], "down": 445, "finish": 445, "enter": [445, 451], "blank": 445, "cell": 445, "gain": [445, 454, 457], "mkl": 445, "jemalloc": 445, "pip3": 445, "headless": 445, "pyproject": [446, 449], "toml": [446, 449], "twine": [446, 449], "whl": [446, 449], "dist": [446, 449], "sdist": [446, 449], "bdist_wheel": [446, 449], "deprec": [446, 449, 465], "frontend": [446, 449], "login": [446, 449, 462], "repositori": [446, 449], "cut": [446, 449], "fork": [446, 449], "admin_github_token": [446, 449], "pypi_token": [446, 449], "npm_token": [446, 449], "secret": [446, 449], "panel": [446, 449, 451], "draft": [446, 449], "changelog": [446, 449, 450], "pkg": [446, 449], "bot": [446, 449], "pick": [446, 449, 452], "feedstock": [446, 449], "hatch": 449, "notabl": 450, "vscode": [450, 452], "daili": 451, "give": [451, 466], "advantag": [451, 456, 458, 466], "remot": 451, "re": 451, "market": 451, "uninstal": 451, "fill": [451, 462, 465], "upper": 451, "sidebar": 451, "hover": 451, "track": [451, 462], "argpars": 451, "pop": 451, "diff": 451, "manifest": 452, "declar": 452, "palett": 452, "registercommand": 452, "amodio": 452, "tsl": 452, "matcher": 452, "dbaeumer": 452, "eslint": 452, "press": 452, "f5": 452, "ctrl": [452, 469], "hello": 452, "world": 452, "breakpoint": 452, "consol": 452, "relaunch": 452, "toolbar": 452, "node_modul": 452, "viewlet": 452, "dropdown": 452, "runner": 452, "startup": 452, "bundl": 452, "multi_object": 453, "benefit": 454, "instanti": 454, "platinum": [455, 469], "8358": 455, "manufactur": 455, "m50cyp2sbstd": 455, "bio": 455, "se5c620": 455, "86b": 455, "0005": 455, "2202160810": 455, "microcod": 455, "0xd000332": 455, "irq": 455, "60ghz": 455, "6chz": 455, "turbo": 455, "perf": 455, "512gb": 455, "16x32gb": 455, "ddr4": 455, "3200": 455, "mt": 455, "nic": 455, "1x": 455, "ethernet": 455, "100mb": 455, "i350": 455, "gigabit": 455, "drive": 455, "intel_ssdsckkb48": 455, "447": 455, "1g": 455, "publicli": 455, "degre": 455, "mark": 455, "trademark": 455, "neuron": 456, "art": 456, "grown": 456, "unpreced": 456, "increasingli": 456, "crucial": 456, "stand": 456, "delet": 456, "commonli": 456, "salient": 456, "shrink": 456, "contextu": 456, "howev": [456, 463], "scene": 456, "haven": 456, "color": 456, "lowest": [456, 466], "formula": [456, 463], "emsp": 456, "downstream": 456, "finetun": 456, "prone": 456, "larger": [456, 463], "co": 456, "discourag": 456, "push": [456, 463], "penal": 456, "parameter": 456, "exemplifi": 456, "complement": 456, "fortieth": 456, "miss": [456, 459], "pruner2": 456, "mention": 456, "readi": 456, "hesit": 456, "sst": [456, 469], "25": [456, 463, 469], "63": [456, 463, 469], "24": [456, 463, 466, 469], "35": [456, 469], "flan": 456, "t5": 456, "english": 456, "romanian": 456, "404": [456, 469], "381": 456, "yolov5": 456, "75": [456, 463, 469], "2x1": [456, 469], "801": 456, "7895": 456, "signific": [456, 457, 463], "reduct": [456, 468], "namhoon": 456, "lee": 456, "thalaiyasingam": 456, "ajanthan": 456, "philip": 456, "torr": 456, "2019": 456, "zafrir": 456, "ofir": 456, "ariel": 456, "larei": 456, "boudoukh": 456, "mosh": 456, "wasserblat": 456, "preprint": [456, 463], "2111": 456, "05754": 456, "2021": 456, "heterogen": 457, "mar": 457, "busi": 457, "jan": 457, "amx": 457, "4th": [457, 459], "mleffici": 457, "dec": 457, "wechat": 457, "deepen": 457, "foundat": 457, "intellig": 457, "vmware": 457, "applianc": 457, "bitnami": 457, "nov": 457, "sota": 457, "few": [457, 466], "plug": 457, "twitter": 457, "linkedin": 457, "zone": 457, "land": 457, "gcp": 457, "pat": 457, "keynot": 457, "intelon": 457, "sep": 457, "chines": 457, "aug": 457, "purif": 457, "sacrif": 457, "jun": 457, "partner": 457, "feb": 457, "joint": 457, "msft": 457, "bilibili": 457, "gestalt": 457, "ml": 457, "doubl": 457, "reconstruct": 457, "abound": 457, "lpot": [457, 461], "nextplatform": 457, "cern": 457, "gan": 457, "3dgan": 457, "iml": 457, "workshop": 457, "asplo": 457, "18": [457, 469], "highli": 457, "intelcaff": 457, "aris": 458, "henc": 458, "onnxrt_qoper": 458, "quant_aware_train": 458, "weight_compress": [458, 468], "initial_spars": [458, 468], "prune_typ": [458, 468], "basic_magnitud": [458, 468], "update_frequ": 458, "prune_domain": 458, "tile_pattern_1x1": 458, "invent": 459, "int4": 459, "cost": 459, "On": 459, "theoret": 459, "affin": 459, "zeropoint": 459, "asymmetr": [459, 466], "255": [459, 463], "overflow": 459, "solv": [459, 461], "fbgemm": 459, "unseen": 459, "enough": 459, "peopl": 459, "mimic": 459, "fact": 459, "ultim": 459, "pain": 459, "lossi": 459, "chart": [459, 462, 464], "understand": [459, 464, 467], "philosophi": 459, "request": 459, "neither": 459, "nor": 459, "val_load": 459, "avg": 459, "themselv": 459, "tensorrtexecutionprovid": 459, "cudaexecutionprovid": 459, "ON": 460, "forc": 460, "postposttrainingquantconfig": 460, "bf16wrapper": 460, "retrac": 460, "site": 461, "assist": 461, "sed": 461, "your_script": 461, "backbon": 462, "interact": 462, "sigopt_experiment_id": 462, "nc": [462, 466], "certain": 462, "suffici": 462, "ordinari": 462, "capac": 462, "receiv": 462, "latenc": [462, 466], "draw": [462, 466], "durat": 462, "8266": 462, "8372": 462, "2132": 462, "83": [462, 463, 469], "7495": 462, "8299": 462, "8294": 462, "85": [462, 463, 469], "0837": 462, "8291": 462, "4469": 462, "llm": 463, "gigant": 463, "systemat": 463, "quantif": 463, "migrat": [463, 467], "difficulti": 463, "mathemat": 463, "allevi": 463, "coarsest": 463, "finer": [463, 466], "row": 463, "matric": 463, "similarli": 463, "finest": 463, "consumpt": 463, "why": [463, 464], "suppos": 463, "6839": 463, "4741": 463, "7451": 463, "9301": 463, "1742": 463, "6835": 463, "frac": 463, "q_min": 463, "q_max": 463, "clip": 463, "zp": 463, "q_x": 463, "clamp_": 463, "round_": 463, "w_q": 463, "00296431384049356": 463, "59": [463, 469], "172": 463, "192": 463, "w_dq": 463, "1220": 463, "0500": 463, "1430": 463, "2570": 463, "1890": 463, "mseloss": 463, "1983354538679123": 463, "6848": 463, "4743": 463, "7440": 463, "9308": 463, "1749": 463, "385297635664756e": 463, "07": [463, 468, 469], "affect": 463, "quantize_per_channel": 463, "x_tmp": 463, "detach": 463, "keepdim": 463, "divid": [463, 466], "dequantize_per_channel": 463, "0029": [463, 469], "0036": 463, "162": [463, 469], "48": [463, 469], "72": [463, 469], "93": [463, 469], "207": [463, 469], "139": [463, 469], "6837": 463, "4734": 463, "1751": 463, "6821": 463, "637690492221736e": 463, "6376e": 463, "3852e": 463, "cdot": 463, "quantize_per_tensor_absmax": 463, "n_bit": 463, "div_": 463, "0806": 463, "7589": 463, "6038": 463, "3815": 463, "5040": 463, "7174": 463, "5444": 463, "5826": 463, "7772": 463, "5555": 463, "3740": 463, "3253": 463, "0698": 463, "1381": 463, "5972": 463, "0086": 463, "0737": 463, "8298": 463, "6883": 463, "2991": 463, "1601": 463, "6506": 463, "8246": 463, "3924": 463, "3845": 463, "8768": 463, "w_scale": 463, "x_q": 463, "x_scale": 463, "84": [463, 469], "120": 463, "0059755356051027775": 463, "89": [463, 469], "119": [463, 469], "57": [463, 469], "91": [463, 469], "006533813662827015": 463, "y_q": 463, "17509": 463, "7608": 463, "4055": 463, "16599": 463, "21020": 463, "10016": 463, "9860": 463, "22444": 463, "y_dq": 463, "6836": 463, "2970": 463, "1583": 463, "6481": 463, "8207": 463, "3911": 463, "3850": 463, "8763": 463, "though": 463, "prove": 463, "simplic": 463, "middl": 463, "denot": 463, "fp1": 463, "fp2": 463, "subsect": [463, 468], "explain": 463, "even": 463, "suppress": 463, "straightforward": 463, "intuit": 463, "x1": [463, 466], "x2": [463, 466], "herebi": 463, "recalcul": 463, "sq": 463, "overhead": 463, "stai": 463, "hardtanh": 463, "t5norm": 463, "llamanorm": 463, "groupnorm": 463, "lambada": 463, "sweet": 463, "spot": 463, "region": 463, "bigscienc": 463, "560m": 463, "65": [463, 469], "44": [463, 469], "66": [463, 469], "76": [463, 469], "1b7": 463, "71": [463, 469], "43": [463, 469], "67": [463, 469], "78": [463, 465, 469], "56": [463, 469], "58": [463, 469], "55": [463, 469], "3b": 463, "73": [463, 469], "69": [463, 469], "74": [463, 469], "7b1": 463, "77": [463, 469], "46": [463, 469], "17": [463, 469], "82": [463, 469], "52": [463, 469], "facebook": 463, "125m": 463, "41": [463, 469], "70": [463, 469], "94": [463, 465, 469], "79": [463, 464, 469], "60": [463, 469], "81": [463, 469], "26": [463, 469], "39": [463, 469], "68": [463, 465, 469], "eleutherai": 463, "6b": 463, "29": [463, 469], "96": [463, 469], "jason": 463, "wei": 463, "emerg": 463, "transact": 463, "yvinec": 463, "edouard": 463, "proceed": 463, "cvf": 463, "winter": 463, "xiui": 463, "2209": 463, "13325": 463, "xiao": 463, "guangxuan": 463, "2211": 463, "10438": 463, "discov": 464, "valuabl": 464, "instrument": 464, "writer": 464, "_pre_eval_hook": 464, "_post_eval_hook": 464, "submodul": 464, "whitelist": 464, "_recordingobserv": 464, "output_tensors_dict": 464, "current_it": 464, "get_tensor_valu": 464, "_observer_forward_hook": 464, "activation_post_process": 464, "_add_observer_": 464, "named_children": 464, "leaf": 464, "add_modul": 464, "register_forward_hook": 464, "dump_tim": 464, "summarywrit": 464, "_acc": 464, "tune_": 464, "add_graph": 464, "get_observer_dict": 464, "observer_dict": 464, "is_quant": 464, "add_histogram": 464, "shell": 464, "bind_al": 464, "logdir_spec": 464, "tune_0_acc0": 464, "tune_1": 464, "tune_1_acc0": 464, "four": 464, "baseline_acc_0": 464, "776": 464, "tune_1_acc_0": 464, "095": 464, "runs_v3": 464, "image_recognit": 464, "run_tuning_dump_tensor": 464, "sh": 464, "inceptionv3": 464, "skip": [464, 466], "v0": 464, "cg": 464, "conv0": 464, "bash": 464, "run_tun": 464, "topologi": 464, "inception_v3": 464, "dataset_loc": 464, "inceptionv3_fp32_pretrained_model": 464, "nc_inceptionv3": 464, "inceptionv3_dump_tensor": 464, "poor": 464, "eightbit": 464, "disappear": 464, "centercrop": 465, "randomcrop": 465, "cropres": 465, "decodeimag": 465, "jpeg": 465, "encodejp": 465, "alignimagechannel": 465, "116": 465, "103": 465, "017": 465, "bilinearimagenet": [465, 468], "topilimag": 465, "padding_mod": 465, "border": 465, "pixel": 465, "edg": 465, "colorjitt": 465, "bright": 465, "satur": 465, "hue": 465, "jitter": 465, "tondarrai": 465, "quickli": [466, 467], "travers": 466, "human": 466, "concret": 466, "aggress": 466, "classic": 466, "six": 466, "At": 466, "ii": 466, "iii": 466, "post_training_auto_qu": 466, "iv": 466, "vi": 466, "increment": 466, "primari": 466, "highest": 466, "spent": 466, "hawq_v2_loss": 466, "model_loss": 466, "black": 466, "compli": 466, "posterior": 466, "focu": 466, "short": 466, "never": 466, "loglevel": 466, "endlessli": 466, "perspect": 466, "smbo": 466, "trial": 466, "appl": 466, "surrog": 466, "repeat": 466, "quantil": 466, "densiti": 466, "parzen": 466, "greatest": 466, "hour": 466, "dai": 466, "next_tune_cfg": 466, "overridden": 466, "cluster": 466, "seamlessli": 466, "mpi": 466, "replic": 466, "replica": 466, "fed": 466, "synchron": 466, "mpirun": 466, "number_of_process": 466, "run_cmd": 466, "abctunestrategi": 466, "familiar": 467, "notebook": 467, "organ": 468, "logic": 468, "mobilenet_v1": 468, "hyper": 468, "40": [468, 469], "06": [468, 469], "beta_1": 468, "beta_2": 468, "epsilon": 468, "sparsecategoricalcrossentropi": 468, "sum_over_batch_s": 468, "from_logit": 468, "54": [468, 469], "19": [468, 469], "overal": 468, "8380": 469, "visit": 469, "performancethroughput": 469, "sec": 469, "86": 469, "00": 469, "170": 469, "82x": 469, "92": 469, "85x": 469, "61": 469, "83x": 469, "densenet": 469, "121": 469, "274": 469, "148": 469, "161": 469, "132": 469, "39x": 469, "169": 469, "38": 469, "36": 469, "191": 469, "31": 469, "118": 469, "61x": 469, "cnn": 469, "incept": 469, "37": 469, "84x": 469, "resnet101": 469, "21x": 469, "70x": 469, "51": 469, "14x": 469, "34": 469, "955": 469, "328": 469, "91x": 469, "709": 469, "282": 469, "51x": 469, "v3": 469, "337": 469, "09": 469, "160": 469, "11x": 469, "438": 469, "204": 469, "223": 469, "105": 469, "12x": 469, "10x": 469, "47": 469, "1347": 469, "439": 469, "07x": 469, "1192": 469, "492": 469, "42x": 469, "412": 469, "376": 469, "662": 469, "397": 469, "66x": 469, "299": 469, "23": 469, "154": 469, "93x": 469, "476": 469, "227": 469, "fashion": 469, "2734": 469, "1299": 469, "498": 469, "178": 469, "79x": 469, "427": 469, "173": 469, "47x": 469, "resnetv2": 469, "194": 469, "146": 469, "33x": 469, "237": 469, "187": 469, "27x": 469, "152": 469, "155": 469, "38x": 469, "302": 469, "215": 469, "40x": 469, "03": 469, "346": 469, "312": 469, "277": 469, "60x": 469, "273": 469, "31x": 469, "18x": 469, "53x": 469, "24x": 469, "219": 469, "vgg19": 469, "193": 469, "11506": 469, "9665": 469, "19x": 469, "xception": 469, "262": 469, "137": 469, "barthez": 469, "143": 469, "02x": 469, "20x": 469, "209": 469, "08x": 469, "221": 469, "stsb": 469, "218": 469, "16x": 469, "62": 469, "57x": 469, "55x": 469, "56x": 469, "53": 469, "89x": 469, "blendcnn": 469, "4885": 469, "3715": 469, "camembert": 469, "206": 469, "09x": 469, "deberta": 469, "125": 469, "366": 469, "197": 469, "399": 469, "flaubert": 469, "592": 469, "385": 469, "54x": 469, "wikitext": 469, "hubert": 469, "446": 469, "181": 469, "46x": 469, "layoutlm": 469, "longform": 469, "49": 469, "mbart": 469, "625": 469, "451": 469, "lvwerra": 469, "pegasu": 469, "samsum": 469, "peleenet": 469, "402": 469, "29x": 469, "pokemon": 469, "275": 469, "334": 469, "48x": 469, "reform": 469, "crime": 469, "punish": 469, "153": 469, "06x": 469, "657": 469, "327": 469, "01x": 469, "812": 469, "344": 469, "36x": 469, "360": 469, "23x": 469, "resnext101": 469, "32x8d": 469, "182": 469, "squeezebert": 469, "195": 469, "150": 469, "30x": 469, "75x": 469, "transfo": 469, "xl": 469, "41x": 469, "wave2vec2": 469, "22x": 469, "102": 469, "00x": 469, "115": 469, "17x": 469, "yolo": 469, "232": 469, "28x": 469, "664": 469, "329": 469, "832": 469, "338": 469, "433": 469, "164": 469, "63x": 469, "836": 469, "1396": 469, "463": 469, "90x": 469, "159": 469, "32x": 469, "968": 469, "473": 469, "05x": 469, "958": 469, "477": 469, "arcfac": 469, "126": 469, "78x": 469, "298": 469, "124": 469, "624": 469, "254": 469, "45x": 469, "caffenet": 469, "1432": 469, "540": 469, "65x": 469, "1460": 469, "357": 469, "265": 469, "35x": 469, "86x": 469, "524": 469, "duc": 469, "efficientnet": 469, "1211": 469, "758": 469, "856": 469, "762": 469, "emot": 469, "ferplu": 469, "925": 469, "694": 469, "fcn": 469, "25x": 469, "googlenet": 469, "771": 469, "571": 469, "763": 469, "579": 469, "hf": 469, "156": 469, "multilingu": 469, "99x": 469, "199": 469, "104": 469, "73x": 469, "449": 469, "74x": 469, "l12": 469, "h384": 469, "466": 469, "247": 469, "88x": 469, "l6": 469, "523": 469, "354": 469, "183": 469, "107": 469, "spanbert": 469, "208": 469, "795": 469, "780": 469, "591": 469, "515": 469, "15x": 469, "2370": 469, "1526": 469, "2216": 469, "1506": 469, "2078": 469, "1028": 469, "1762": 469, "76x": 469, "mobilenetv2": 469, "2615": 469, "1645": 469, "59x": 469, "2461": 469, "1674": 469, "766": 469, "431": 469, "77x": 469, "575": 469, "430": 469, "34x": 469, "747": 469, "564": 469, "594": 469, "590": 469, "643": 469, "253": 469, "shufflenet": 469, "2354": 469, "1461": 469, "1850": 469, "1368": 469, "squeezenet": 469, "2484": 469, "1912": 469, "2526": 469, "1911": 469, "710": 469, "549": 469, "622": 469, "497": 469, "652": 469, "507": 469, "573": 469, "470": 469, "527": 469, "396": 469, "68x": 469, "tini": 469, "647": 469, "514": 469, "26x": 469, "ultrafac": 469, "314": 469, "50x": 469, "304": 469, "316": 469, "315": 469, "zfnet": 469, "462": 469, "268": 469, "72x": 469, "465": 469, "62x": 469, "436": 469, "270": 469, "429": 469, "92x": 469, "94x": 469, "331": 469, "242": 469, "37x": 469, "98x": 469, "taskdataset": 469, "accuracyspars": 469, "ratiospars": 469, "commentsbalancedor": 469, "unbalanc": 469, "mini": 469, "answeringsquad": 469, "87f1": 469, "momentumunbalanc": 469, "momentumbalanc": 469, "90f1": 469, "59f1": 469, "23f1": 469, "classificationmrpc": 469, "52f1": 469, "26f1": 469, "classificationsst": 469, "61accuraci": 469, "recognitionimagenet": 469, "95top1": 469, "v5s6": 469, "detectioncoco": 469, "ap0": 469, "6ap0": 469, "393": 469, "584": 469, "34f1": 469, "lassounbalanc": 469, "classificationmnli": 469, "mm": 469, "allbalanc": 469, "32accuraci": 469, "sensitivitybalanc": 469, "classificationqqp": 469, "classificationqnli": 469, "54accuraci": 469, "em": 469, "7965": 469, "wideresnet40": 469, "9522": 469, "8178": 469, "0213": 469, "8235": 469, "027": 469, "5494": 469, "7153": 469, "5540": 469, "0046": 469, "5523": 469, "vgg": 469, "bn": 469, "7022": 469, "7415": 469, "7025": 469, "0003": 469, "wip": 469, "6739": 469, "7399": 469, "6845": 469, "0106": 469, "7034": 469, "8382": 469, "bilstm": 469, "8314": 469, "9403": 469, "9048": 469, "0734": 469, "7323": 469, "8256": 469, "8084": 469, "8814": 469, "7442": 469, "8371": 469, "0119": 469, "0115": 469, "tinybert": 469, "8018": 469, "8044": 469, "8363": 469, "8411": 469, "8025": 469, "8074": 469, "0007": 469, "0030": 469, "8626": 469, "8213": 469, "9091": 469, "8782": 469, "8684": 469, "8259": 469, "0058": 469, "distilroberta": 469, "6057": 469, "6455": 469, "6187": 469, "0130": 469, "c6i": 469, "2xlarg": 469, "c6a": 469, "c6g": 469, "a100cuda": 469, "executionprovid": 469}, "objects": {"": [[0, 0, 0, "-", "block_mask"], [315, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[2, 0, 0, "-", "adaptor"], [158, 0, 0, "-", "algorithm"], [161, 0, 0, "-", "benchmark"], [165, 0, 0, "-", "compression"], [179, 0, 0, "-", "conf"], [181, 0, 0, "-", "config"], [182, 0, 0, "-", "contrib"], [207, 0, 0, "-", "data"], [262, 0, 0, "-", "experimental"], [322, 0, 0, "-", "metric"], [324, 0, 0, "-", "mix_precision"], [326, 0, 0, "-", "model"], [334, 0, 0, "-", "objective"], [335, 0, 0, "-", "profiling"], [357, 0, 0, "-", "quantization"], [365, 0, 0, "-", "strategy"], [377, 0, 0, "-", "template"], [378, 0, 0, "-", "training"], [382, 0, 0, "-", "utils"], [391, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[1, 0, 0, "-", "adaptor"], [3, 0, 0, "-", "keras"], [7, 0, 0, "-", "keras_utils"], [11, 0, 0, "-", "mxnet"], [12, 0, 0, "-", "mxnet_utils"], [14, 0, 0, "-", "onnxrt"], [17, 0, 0, "-", "ox_utils"], [44, 0, 0, "-", "pytorch"], [45, 0, 0, "-", "query"], [46, 0, 0, "-", "tensorflow"], [110, 0, 0, "-", "tf_utils"], [150, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[1, 1, 1, "", "Adaptor"], [1, 2, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.keras": [[3, 1, 1, "", "KerasAdaptor"]], "neural_compressor.adaptor.keras_utils": [[4, 0, 0, "-", "conv2d"], [5, 0, 0, "-", "dense"], [6, 0, 0, "-", "depthwise_conv2d"], [8, 0, 0, "-", "pool2d"], [9, 0, 0, "-", "quantizer"], [10, 0, 0, "-", "separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, 1, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet_utils": [[13, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, 1, 1, "", "CalibCollector"], [13, 1, 1, "", "CalibData"], [13, 1, 1, "", "CollectorBase"], [13, 1, 1, "", "DataIterLoader"], [13, 1, 1, "", "DataLoaderWrap"], [13, 1, 1, "", "NameCollector"], [13, 1, 1, "", "OpType"], [13, 1, 1, "", "TensorCollector"], [13, 2, 1, "", "amp_convert"], [13, 2, 1, "", "calib_model"], [13, 2, 1, "", "check_mx_version"], [13, 2, 1, "", "combine_capabilities"], [13, 2, 1, "", "create_data_example"], [13, 2, 1, "", "distribute_calib_tensors"], [13, 2, 1, "", "ensure_list"], [13, 2, 1, "", "fuse"], [13, 2, 1, "", "get_framework_name"], [13, 2, 1, "", "is_model_quantized"], [13, 2, 1, "", "isiterable"], [13, 2, 1, "", "make_module"], [13, 2, 1, "", "make_nc_model"], [13, 2, 1, "", "make_symbol_block"], [13, 2, 1, "", "ndarray_to_device"], [13, 2, 1, "", "parse_tune_config"], [13, 2, 1, "", "prepare_dataloader"], [13, 2, 1, "", "prepare_model"], [13, 2, 1, "", "prepare_model_data"], [13, 2, 1, "", "quantize_sym_model"], [13, 2, 1, "", "query_quantizable_nodes"], [13, 2, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[14, 1, 1, "", "ONNXRT_IntegerOpsAdaptor"], [14, 1, 1, "", "ONNXRT_QDQAdaptor"], [14, 1, 1, "", "ONNXRT_QLinearOpsAdaptor"], [14, 1, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.ox_utils": [[15, 0, 0, "-", "calibration"], [16, 0, 0, "-", "calibrator"], [29, 0, 0, "-", "operators"], [41, 0, 0, "-", "quantizer"], [42, 0, 0, "-", "smooth_quant"], [43, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, 1, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, 1, 1, "", "CalibratorBase"], [16, 1, 1, "", "HistogramCollector"], [16, 1, 1, "", "KLCalibrator"], [16, 1, 1, "", "MinMaxCalibrator"], [16, 1, 1, "", "PercentileCalibrator"], [16, 2, 1, "", "calib_registry"], [16, 2, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[18, 0, 0, "-", "activation"], [19, 0, 0, "-", "argmax"], [20, 0, 0, "-", "attention"], [21, 0, 0, "-", "binary_op"], [22, 0, 0, "-", "concat"], [23, 0, 0, "-", "conv"], [24, 0, 0, "-", "direct_q8"], [25, 0, 0, "-", "embed_layernorm"], [26, 0, 0, "-", "gather"], [27, 0, 0, "-", "gavgpool"], [28, 0, 0, "-", "gemm"], [30, 0, 0, "-", "lstm"], [31, 0, 0, "-", "matmul"], [32, 0, 0, "-", "maxpool"], [33, 0, 0, "-", "norm"], [34, 0, 0, "-", "ops"], [35, 0, 0, "-", "pad"], [36, 0, 0, "-", "pooling"], [37, 0, 0, "-", "reduce"], [38, 0, 0, "-", "resize"], [39, 0, 0, "-", "split"], [40, 0, 0, "-", "unary_op"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, 1, 1, "", "ActivationOperator"], [18, 1, 1, "", "Float16ActivationOperator"], [18, 1, 1, "", "QActivationOperator"], [18, 1, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, 1, 1, "", "ArgMaxOperator"], [19, 1, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, 1, 1, "", "AttentionOperator"], [20, 1, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, 1, 1, "", "BinaryOperator"], [21, 1, 1, "", "Float16BinaryOperator"], [21, 1, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, 1, 1, "", "ConcatOperator"], [22, 1, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, 1, 1, "", "ConvOperator"], [23, 1, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, 1, 1, "", "Direct8BitOperator"], [24, 1, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, 1, 1, "", "EmbedLayerNormalizationOperator"], [25, 1, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, 1, 1, "", "GatherOperator"], [26, 1, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, 1, 1, "", "GlobalAveragePoolOperator"], [27, 1, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, 1, 1, "", "GemmOperator"], [28, 1, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, 1, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, 1, 1, "", "FusedMatMulOperator"], [31, 1, 1, "", "MatMulOperator"], [31, 1, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, 1, 1, "", "MaxPoolOperator"], [32, 1, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, 1, 1, "", "BatchNormalizationOperator"], [33, 1, 1, "", "NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, 1, 1, "", "Operator"], [34, 1, 1, "", "QOperator"], [34, 2, 1, "", "op_registry"], [34, 2, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, 1, 1, "", "PadOperator"], [35, 1, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, 1, 1, "", "PoolOperator"], [36, 1, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, 1, 1, "", "ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, 1, 1, "", "QResizeOperator"], [38, 1, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, 1, 1, "", "QSplitOperator"], [39, 1, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, 1, 1, "", "UnaryOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, 1, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, 1, 1, "", "ORTSmoothQuant"], [42, 2, 1, "", "get_quant_dequant_output"], [42, 2, 1, "", "make_sub_graph"], [42, 2, 1, "", "quant_dequant_data"]], "neural_compressor.adaptor.ox_utils.util": [[43, 1, 1, "", "QuantFormat"], [43, 1, 1, "", "QuantType"], [43, 1, 1, "", "QuantizationMode"], [43, 1, 1, "", "QuantizedInitializer"], [43, 1, 1, "", "QuantizedValue"], [43, 1, 1, "", "QuantizedValueType"], [43, 1, 1, "", "ValueInfo"], [43, 2, 1, "", "attribute_to_kwarg"], [43, 2, 1, "", "calculate_scale_zp"], [43, 2, 1, "", "cast_tensor"], [43, 2, 1, "", "collate_preds"], [43, 2, 1, "", "dequantize_data"], [43, 2, 1, "", "dequantize_data_with_scale_zero"], [43, 2, 1, "", "dtype_to_name"], [43, 2, 1, "", "find_by_name"], [43, 2, 1, "", "float_to_bfloat16"], [43, 2, 1, "", "float_to_float16"], [43, 2, 1, "", "is_B_transposed"], [43, 2, 1, "", "make_dquant_node"], [43, 2, 1, "", "make_quant_node"], [43, 2, 1, "", "quantize_data"], [43, 2, 1, "", "quantize_data_per_channel"], [43, 2, 1, "", "quantize_data_with_scale_zero"], [43, 2, 1, "", "quantize_nparray"], [43, 2, 1, "", "remove_init_from_model_input"], [43, 2, 1, "", "split_shared_bias"], [43, 2, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.pytorch": [[44, 1, 1, "", "PyTorchAdaptor"], [44, 1, 1, "", "PyTorch_FXAdaptor"], [44, 1, 1, "", "PyTorch_IPEXAdaptor"], [44, 1, 1, "", "TemplateAdaptor"], [44, 2, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.query": [[45, 1, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.tensorflow": [[46, 1, 1, "", "TensorFlowAdaptor"], [46, 1, 1, "", "TensorflowQuery"], [46, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[47, 0, 0, "-", "graph_converter"], [48, 0, 0, "-", "graph_converter_without_calib"], [86, 0, 0, "-", "graph_rewriter"], [109, 0, 0, "-", "graph_util"], [111, 0, 0, "-", "quantize_graph"], [138, 0, 0, "-", "quantize_graph_common"], [139, 0, 0, "-", "smooth_quant_calibration"], [140, 0, 0, "-", "smooth_quant_scaler"], [141, 0, 0, "-", "tf2onnx_converter"], [144, 0, 0, "-", "transform_graph"], [147, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, 1, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[50, 0, 0, "-", "bf16"], [75, 0, 0, "-", "generic"], [85, 0, 0, "-", "graph_base"], [94, 0, 0, "-", "int8"], [100, 0, 0, "-", "onnx"], [105, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[49, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, 1, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[51, 0, 0, "-", "convert_add_to_biasadd"], [52, 0, 0, "-", "convert_layout"], [53, 0, 0, "-", "convert_leakyrelu"], [54, 0, 0, "-", "convert_nan_to_random"], [55, 0, 0, "-", "convert_placeholder_to_const"], [56, 0, 0, "-", "dequantize_cast_optimizer"], [57, 0, 0, "-", "dilated_contraction"], [58, 0, 0, "-", "dummy_biasadd"], [59, 0, 0, "-", "expanddims_optimizer"], [60, 0, 0, "-", "fetch_weight_from_reshape"], [61, 0, 0, "-", "fold_batch_norm"], [62, 0, 0, "-", "fold_constant"], [63, 0, 0, "-", "fuse_biasadd_add"], [64, 0, 0, "-", "fuse_column_wise_mul"], [65, 0, 0, "-", "fuse_conv_with_math"], [66, 0, 0, "-", "fuse_decomposed_bn"], [67, 0, 0, "-", "fuse_decomposed_in"], [68, 0, 0, "-", "fuse_gelu"], [69, 0, 0, "-", "fuse_layer_norm"], [70, 0, 0, "-", "fuse_pad_with_conv"], [71, 0, 0, "-", "fuse_pad_with_fp32_conv"], [72, 0, 0, "-", "fuse_reshape_transpose"], [73, 0, 0, "-", "graph_cse_optimizer"], [74, 0, 0, "-", "grappler_pass"], [76, 0, 0, "-", "insert_print_node"], [77, 0, 0, "-", "move_squeeze_after_relu"], [78, 0, 0, "-", "pre_optimize"], [79, 0, 0, "-", "remove_training_nodes"], [80, 0, 0, "-", "rename_batch_norm"], [81, 0, 0, "-", "split_shared_input"], [82, 0, 0, "-", "strip_equivalent_nodes"], [83, 0, 0, "-", "strip_unused_nodes"], [84, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, 1, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, 1, 1, "", "FuseDecomposedBNOptimizer"], [66, 2, 1, "", "bypass_reshape"], [66, 2, 1, "", "get_const_dim_count"], [66, 2, 1, "", "node_from_map"], [66, 2, 1, "", "node_name_from_input"], [66, 2, 1, "", "valid_reshape_inputs"], [66, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, 1, 1, "", "FuseDecomposedINOptimizer"], [67, 2, 1, "", "bypass_reshape"], [67, 2, 1, "", "get_const_dim_count"], [67, 2, 1, "", "node_from_map"], [67, 2, 1, "", "node_name_from_input"], [67, 2, 1, "", "valid_reshape_inputs"], [67, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, 1, 1, "", "FuseLayerNormOptimizer"], [69, 2, 1, "", "node_from_map"], [69, 2, 1, "", "node_name_from_input"], [69, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, 1, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[87, 0, 0, "-", "freeze_fake_quant"], [88, 0, 0, "-", "freeze_value"], [89, 0, 0, "-", "freeze_value_without_calib"], [90, 0, 0, "-", "fuse_conv_redundant_dequantize"], [91, 0, 0, "-", "fuse_conv_requantize"], [92, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [93, 0, 0, "-", "fuse_matmul_requantize"], [95, 0, 0, "-", "meta_op_optimizer"], [96, 0, 0, "-", "post_hostconst_converter"], [97, 0, 0, "-", "post_quantized_op_cse"], [98, 0, 0, "-", "rnn_convert"], [99, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [93, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [93, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [93, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, 0, 0, "-", "onnx_graph"], [102, 0, 0, "-", "onnx_node"], [103, 0, 0, "-", "onnx_schema"], [104, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, 1, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, 1, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, 1, 1, "", "OnnxOpSchema"], [103, 2, 1, "", "get_max_supported_opset_version"], [103, 2, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, 1, 1, "", "SeqType"], [104, 2, 1, "", "add_port_to_name"], [104, 2, 1, "", "are_shapes_equal"], [104, 2, 1, "", "assert_error"], [104, 2, 1, "", "compute_const_folding_using_tf"], [104, 2, 1, "", "convert_tensorflow_tensor_to_onnx"], [104, 2, 1, "", "find_opset"], [104, 2, 1, "", "get_index_from_strided_slice_of_shape"], [104, 2, 1, "", "get_subgraphs_from_onnx"], [104, 2, 1, "", "get_tensorflow_node_attr"], [104, 2, 1, "", "get_tensorflow_node_shape_attr"], [104, 2, 1, "", "get_tensorflow_tensor_data"], [104, 2, 1, "", "get_tensorflow_tensor_shape"], [104, 2, 1, "", "infer_onnx_shape_dtype"], [104, 2, 1, "", "initialize_name_counter"], [104, 2, 1, "", "is_list_or_tuple"], [104, 2, 1, "", "is_onnx_domain"], [104, 2, 1, "", "make_onnx_inputs_outputs"], [104, 2, 1, "", "make_onnx_shape"], [104, 2, 1, "", "map_numpy_to_onnx_dtype"], [104, 2, 1, "", "map_onnx_to_numpy_type"], [104, 2, 1, "", "map_tensorflow_dtype"], [104, 2, 1, "", "read_tensorflow_node_attrs"], [104, 2, 1, "", "save_protobuf"], [104, 2, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, 0, 0, "-", "insert_qdq_pattern"], [107, 0, 0, "-", "merge_duplicated_qdq"], [108, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, 1, 1, "", "GraphAnalyzer"], [109, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[113, 0, 0, "-", "qat"], [129, 0, 0, "-", "qdq"], [131, 0, 0, "-", "quantize_graph_base"], [132, 0, 0, "-", "quantize_graph_bn"], [133, 0, 0, "-", "quantize_graph_concatv2"], [134, 0, 0, "-", "quantize_graph_conv"], [135, 0, 0, "-", "quantize_graph_for_intel_cpu"], [136, 0, 0, "-", "quantize_graph_matmul"], [137, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[112, 0, 0, "-", "fake_quantize"], [114, 0, 0, "-", "quantize_config"], [115, 0, 0, "-", "quantize_helper"], [116, 0, 0, "-", "quantize_layers"], [121, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, 1, 1, "", "FakeQuantize"], [112, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, 1, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, 2, 1, "", "init_quantize_config"], [115, 2, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, 0, 0, "-", "optimize_layer"], [118, 0, 0, "-", "quantize_layer_add"], [119, 0, 0, "-", "quantize_layer_base"], [120, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, 1, 1, "", "QuantizeWrapper"], [121, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[122, 0, 0, "-", "fuse_qdq_bn"], [123, 0, 0, "-", "fuse_qdq_concatv2"], [124, 0, 0, "-", "fuse_qdq_conv"], [125, 0, 0, "-", "fuse_qdq_deconv"], [126, 0, 0, "-", "fuse_qdq_in"], [127, 0, 0, "-", "fuse_qdq_matmul"], [128, 0, 0, "-", "fuse_qdq_pooling"], [130, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, 1, 1, "", "QuantizeGraphBase"], [131, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[139, 1, 1, "", "SmoothQuantCalibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[140, 1, 1, "", "SmoothQuantScaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[141, 1, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[142, 0, 0, "-", "bias_correction"], [143, 0, 0, "-", "graph_transform_base"], [145, 0, 0, "-", "insert_logging"], [146, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[142, 1, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[143, 1, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[145, 1, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[146, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[147, 2, 1, "", "collate_tf_preds"], [147, 2, 1, "", "disable_random"], [147, 2, 1, "", "fix_ref_type_of_graph_def"], [147, 2, 1, "", "generate_feed_dict"], [147, 2, 1, "", "get_estimator_graph"], [147, 2, 1, "", "get_graph_def"], [147, 2, 1, "", "get_input_output_node_names"], [147, 2, 1, "", "get_model_input_shape"], [147, 2, 1, "", "get_tensor_by_name"], [147, 2, 1, "", "get_tensor_val_from_graph_node"], [147, 2, 1, "", "get_weight_from_input_tensor"], [147, 2, 1, "", "int8_node_name_reverse"], [147, 2, 1, "", "is_ckpt_format"], [147, 2, 1, "", "is_saved_model_format"], [147, 2, 1, "", "iterator_sess_run"], [147, 2, 1, "", "read_graph"], [147, 2, 1, "", "strip_equivalent_nodes"], [147, 2, 1, "", "strip_unused_nodes"], [147, 2, 1, "", "tf_diagnosis_helper"], [147, 2, 1, "", "version1_eq_version2"], [147, 2, 1, "", "version1_gt_version2"], [147, 2, 1, "", "version1_gte_version2"], [147, 2, 1, "", "version1_lt_version2"], [147, 2, 1, "", "version1_lte_version2"], [147, 2, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[148, 0, 0, "-", "bf16_convert"], [149, 0, 0, "-", "hawq_metric"], [151, 0, 0, "-", "model_wrapper"], [152, 0, 0, "-", "pattern_detector"], [153, 0, 0, "-", "smooth_quant"], [154, 0, 0, "-", "symbolic_trace"], [155, 0, 0, "-", "util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[148, 1, 1, "", "BF16ModuleWrapper"], [148, 2, 1, "", "Convert"], [148, 2, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[149, 1, 1, "", "HessianTrace"], [149, 1, 1, "", "Node_collector"], [149, 2, 1, "", "compare_weights"], [149, 2, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[152, 1, 1, "", "TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[153, 1, 1, "", "GraphTrace"], [153, 1, 1, "", "TorchSmoothQuant"], [153, 2, 1, "", "get_module"], [153, 2, 1, "", "set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[154, 2, 1, "", "symbolic_trace"], [154, 2, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.util": [[155, 2, 1, "", "append_attr"], [155, 2, 1, "", "auto_copy"], [155, 2, 1, "", "calculate_quant_min_max"], [155, 2, 1, "", "check_cfg_and_qconfig"], [155, 2, 1, "", "collate_torch_preds"], [155, 2, 1, "", "fetch_module"], [155, 2, 1, "", "generate_activation_observer"], [155, 2, 1, "", "get_depth"], [155, 2, 1, "", "get_dict_at_depth"], [155, 2, 1, "", "get_element_under_depth"], [155, 2, 1, "", "get_embedding_contiguous"], [155, 2, 1, "", "get_example_input"], [155, 2, 1, "", "get_fallback_order"], [155, 2, 1, "", "get_mse_order_per_fp32"], [155, 2, 1, "", "get_mse_order_per_int8"], [155, 2, 1, "", "get_op_type_by_name"], [155, 2, 1, "", "get_quantizable_ops_from_cfgs"], [155, 2, 1, "", "get_torch_version"], [155, 2, 1, "", "input2tuple"], [155, 2, 1, "", "is_fused_module"], [155, 2, 1, "", "match_datatype_pattern"], [155, 2, 1, "", "paser_cfgs"], [155, 2, 1, "", "set_module"], [155, 2, 1, "", "simple_inference"], [155, 2, 1, "", "update_sq_scale"]], "neural_compressor.algorithm": [[156, 0, 0, "-", "algorithm"], [157, 0, 0, "-", "fast_bias_correction"], [159, 0, 0, "-", "smooth_quant"], [160, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[156, 1, 1, "", "ALGORITHMS"], [156, 1, 1, "", "Algorithm"], [156, 1, 1, "", "AlgorithmScheduler"], [156, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[157, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[159, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[160, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[161, 2, 1, "", "benchmark_with_raw_cmd"], [161, 2, 1, "", "call_one"], [161, 2, 1, "", "config_instance"], [161, 2, 1, "", "fit"], [161, 2, 1, "", "generate_prefix"], [161, 2, 1, "", "get_architecture"], [161, 2, 1, "", "get_bounded_threads"], [161, 2, 1, "", "get_core_ids"], [161, 2, 1, "", "get_physical_ids"], [161, 2, 1, "", "get_threads"], [161, 2, 1, "", "get_threads_per_core"], [161, 2, 1, "", "profile"], [161, 2, 1, "", "run_instance"], [161, 2, 1, "", "set_all_env_var"], [161, 2, 1, "", "set_env_var"], [161, 2, 1, "", "summary_benchmark"]], "neural_compressor.compression": [[162, 0, 0, "-", "callbacks"], [164, 0, 0, "-", "distillation"], [167, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[162, 1, 1, "", "BaseCallbacks"], [162, 1, 1, "", "DistillationCallbacks"], [162, 1, 1, "", "PruningCallbacks"], [162, 1, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[162, 3, 1, "", "_epoch_ran"], [162, 3, 1, "", "best_model"], [162, 3, 1, "", "best_score"], [162, 3, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[163, 0, 0, "-", "criterions"]], "neural_compressor.compression.distillation.criterions": [[163, 1, 1, "", "Criterions"], [163, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [163, 1, 1, "", "KnowledgeDistillationFramework"], [163, 1, 1, "", "KnowledgeDistillationLoss"], [163, 1, 1, "", "PyTorchCriterions"], [163, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [163, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [163, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [163, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [163, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [163, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [163, 1, 1, "", "SelfKnowledgeDistillationLoss"], [163, 1, 1, "", "TensorflowCriterions"], [163, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [163, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [163, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [163, 2, 1, "", "criterion_registry"]], "neural_compressor.compression.pruner": [[166, 0, 0, "-", "criteria"], [169, 0, 0, "-", "model_slim"], [172, 0, 0, "-", "patterns"], [173, 0, 0, "-", "pruners"], [174, 0, 0, "-", "regs"], [175, 0, 0, "-", "schedulers"], [176, 0, 0, "-", "utils"]], "neural_compressor.compression.pruner.criteria": [[166, 1, 1, "", "GradientCriterion"], [166, 1, 1, "", "MagnitudeCriterion"], [166, 1, 1, "", "PruningCriterion"], [166, 1, 1, "", "RetrainFreeCriterion"], [166, 1, 1, "", "SnipCriterion"], [166, 1, 1, "", "SnipMomentumBlockCriterion"], [166, 1, 1, "", "SnipMomentumCriterion"], [166, 2, 1, "", "get_criterion"], [166, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[166, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[166, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[166, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[166, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[166, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion": [[166, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[166, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.model_slim": [[168, 0, 0, "-", "auto_slim"], [170, 0, 0, "-", "pattern_analyzer"], [171, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[168, 2, 1, "", "generate_ffn2_pruning_config"], [168, 2, 1, "", "generate_mha_pruning_config"], [168, 2, 1, "", "model_slim"], [168, 2, 1, "", "model_slim_ffn2"], [168, 2, 1, "", "model_slim_mha"], [168, 2, 1, "", "parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[170, 1, 1, "", "ClassifierHeadSearcher"], [170, 1, 1, "", "JitBasicSearcher"], [170, 1, 1, "", "Linear2LinearSearcher"], [170, 1, 1, "", "RecipeSearcher"], [170, 1, 1, "", "SelfMHASearcher"], [170, 2, 1, "", "get_attributes"], [170, 2, 1, "", "get_common_module"], [170, 2, 1, "", "print_iterables"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher": [[170, 3, 1, "", "device"], [170, 3, 1, "", "flatten_static_graph"], [170, 3, 1, "", "model"], [170, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[170, 3, 1, "", "device"], [170, 3, 1, "", "flatten_static_graph"], [170, 3, 1, "", "model"], [170, 3, 1, "", "searching_results"], [170, 3, 1, "", "static_graph"], [170, 3, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[170, 3, 1, "", "current_pattern"], [170, 3, 1, "", "device"], [170, 3, 1, "", "flatten_static_graph"], [170, 3, 1, "", "model"], [170, 3, 1, "", "searching_results"], [170, 3, 1, "", "static_graph"], [170, 3, 1, "", "target_layers"], [170, 3, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[170, 3, 1, "", "model"], [170, 3, 1, "", "recipe"], [170, 3, 1, "", "searching_results"], [170, 3, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[170, 3, 1, "", "device"], [170, 3, 1, "", "flatten_static_graph"], [170, 3, 1, "", "model"], [170, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[171, 1, 1, "", "LinearCompression"], [171, 1, 1, "", "LinearCompressionIterator"], [171, 1, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[171, 3, 1, "", "device"], [171, 3, 1, "", "layer_1"], [171, 3, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[171, 3, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[172, 1, 1, "", "BasePattern"], [172, 1, 1, "", "PatternMHA"], [172, 1, 1, "", "PatternNInM"], [172, 1, 1, "", "PatternNxM"], [172, 2, 1, "", "get_pattern"], [172, 2, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.BasePattern": [[172, 3, 1, "", "config"], [172, 3, 1, "", "invalid_layers"], [172, 3, 1, "", "is_global"], [172, 3, 1, "", "keep_mask_layers"], [172, 3, 1, "", "max_sparsity_ratio_per_op"], [172, 3, 1, "", "min_sparsity_ratio_per_op"], [172, 3, 1, "", "modules"], [172, 3, 1, "", "pattern"], [172, 3, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.PatternMHA": [[172, 3, 1, "", "M"], [172, 3, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.PatternNInM": [[172, 3, 1, "", "M"], [172, 3, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.PatternNxM": [[172, 3, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[173, 1, 1, "", "BasePruner"], [173, 1, 1, "", "BasicPruner"], [173, 1, 1, "", "BlockMaskPruner"], [173, 1, 1, "", "MultiheadAttentionPruner"], [173, 1, 1, "", "PatternLockPruner"], [173, 1, 1, "", "ProgressivePruner"], [173, 1, 1, "", "RetrainFreePruner"], [173, 2, 1, "", "get_pruner"], [173, 2, 1, "", "parse_valid_pruner_types"], [173, 2, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.BasePruner": [[173, 3, 1, "", "config"], [173, 3, 1, "", "current_sparsity_ratio"], [173, 3, 1, "", "end_step"], [173, 3, 1, "", "global_step"], [173, 3, 1, "", "masks"], [173, 3, 1, "", "max_sparsity_ratio_per_op"], [173, 3, 1, "", "modules"], [173, 3, 1, "", "pattern"], [173, 3, 1, "", "pruning_frequency"], [173, 3, 1, "", "scheduler"], [173, 3, 1, "", "scores"], [173, 3, 1, "", "start_step"], [173, 3, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.BasicPruner": [[173, 3, 1, "", "criterion"], [173, 3, 1, "", "pattern"], [173, 3, 1, "", "reg"], [173, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.BlockMaskPruner": [[173, 3, 1, "", "criterion"], [173, 3, 1, "", "pattern"], [173, 3, 1, "", "reg"], [173, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.RetrainFreePruner": [[173, 3, 1, "", "criterion"], [173, 3, 1, "", "pattern"], [173, 3, 1, "", "reg"], [173, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.regs": [[174, 1, 1, "", "BaseReg"], [174, 1, 1, "", "GroupLasso"], [174, 2, 1, "", "get_reg"], [174, 2, 1, "", "get_reg_type"], [174, 2, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[174, 3, 1, "", "alpha"], [174, 3, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[175, 1, 1, "", "IterativeScheduler"], [175, 1, 1, "", "OneshotScheduler"], [175, 1, 1, "", "PruningScheduler"], [175, 2, 1, "", "get_scheduler"], [175, 2, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[175, 3, 1, "", "config"]], "neural_compressor.compression.pruner.utils": [[176, 2, 1, "", "check_config"], [176, 2, 1, "", "check_key_validity"], [176, 2, 1, "", "generate_pruner_config"], [176, 2, 1, "", "get_sparsity_ratio"], [176, 2, 1, "", "parse_last_linear"], [176, 2, 1, "", "parse_to_prune"], [176, 2, 1, "", "process_and_check_config"], [176, 2, 1, "", "process_config"], [176, 2, 1, "", "process_weight_config"], [176, 2, 1, "", "process_yaml_config"], [176, 2, 1, "", "reset_none_to_default"], [176, 2, 1, "", "update_params"]], "neural_compressor.conf": [[177, 0, 0, "-", "config"], [178, 0, 0, "-", "dotdict"], [180, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[177, 1, 1, "", "Benchmark_Conf"], [177, 1, 1, "", "Conf"], [177, 1, 1, "", "DefaultConf"], [177, 1, 1, "", "Distillation_Conf"], [177, 1, 1, "", "Graph_Optimization_Conf"], [177, 1, 1, "", "MixedPrecision_Conf"], [177, 1, 1, "", "NASConfig"], [177, 1, 1, "", "PrunerV2"], [177, 1, 1, "", "Pruning_Conf"], [177, 1, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[178, 1, 1, "", "DotDict"], [178, 2, 1, "", "deep_get"], [178, 2, 1, "", "deep_set"]], "neural_compressor.conf.pythonic_config": [[180, 1, 1, "", "AccuracyCriterion"], [180, 1, 1, "", "BenchmarkConfig"], [180, 1, 1, "", "DistillationConfig"], [180, 1, 1, "", "KnowledgeDistillationLossConfig"], [180, 1, 1, "", "Options"], [180, 1, 1, "", "QuantizationConfig"], [180, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.config": [[181, 1, 1, "", "AccuracyCriterion"], [181, 1, 1, "", "BenchmarkConfig"], [181, 1, 1, "", "DistillationConfig"], [181, 1, 1, "", "DotDict"], [181, 1, 1, "", "ExportConfig"], [181, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [181, 1, 1, "", "Keras"], [181, 1, 1, "", "KnowledgeDistillationLossConfig"], [181, 1, 1, "", "MXNet"], [181, 1, 1, "", "MixedPrecisionConfig"], [181, 1, 1, "", "NASConfig"], [181, 1, 1, "", "ONNX"], [181, 1, 1, "", "ONNXQlinear2QDQConfig"], [181, 1, 1, "", "Options"], [181, 1, 1, "", "PostTrainingQuantConfig"], [181, 1, 1, "", "PyTorch"], [181, 1, 1, "", "QuantizationAwareTrainingConfig"], [181, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [181, 1, 1, "", "TF2ONNXConfig"], [181, 1, 1, "", "TensorFlow"], [181, 1, 1, "", "Torch2ONNXConfig"], [181, 1, 1, "", "TuningCriterion"], [181, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[183, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[184, 0, 0, "-", "sigopt"], [185, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[184, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[185, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[190, 0, 0, "-", "dataloaders"], [202, 0, 0, "-", "datasets"], [206, 0, 0, "-", "filters"], [210, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[186, 0, 0, "-", "base_dataloader"], [187, 0, 0, "-", "dataloader"], [188, 0, 0, "-", "default_dataloader"], [189, 0, 0, "-", "fetcher"], [191, 0, 0, "-", "mxnet_dataloader"], [192, 0, 0, "-", "onnxrt_dataloader"], [193, 0, 0, "-", "pytorch_dataloader"], [194, 0, 0, "-", "sampler"], [195, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[186, 1, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[187, 1, 1, "", "DataLoader"], [187, 2, 1, "", "check_dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[188, 1, 1, "", "DefaultDataLoader"], [188, 2, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[189, 1, 1, "", "Fetcher"], [189, 1, 1, "", "IndexFetcher"], [189, 1, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[191, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[192, 1, 1, "", "ONNXRTBertDataLoader"], [192, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[193, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[194, 1, 1, "", "BatchSampler"], [194, 1, 1, "", "IterableSampler"], [194, 1, 1, "", "Sampler"], [194, 1, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[195, 1, 1, "", "TFDataDataLoader"], [195, 1, 1, "", "TensorflowBertDataLoader"], [195, 1, 1, "", "TensorflowDataLoader"], [195, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[196, 0, 0, "-", "bert_dataset"], [197, 0, 0, "-", "coco_dataset"], [198, 0, 0, "-", "dataset"], [199, 0, 0, "-", "dummy_dataset"], [200, 0, 0, "-", "dummy_dataset_v2"], [201, 0, 0, "-", "imagenet_dataset"], [203, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[196, 1, 1, "", "InputFeatures"], [196, 1, 1, "", "ONNXRTBertDataset"], [196, 1, 1, "", "ParseDecodeBert"], [196, 1, 1, "", "PytorchBertDataset"], [196, 1, 1, "", "TensorflowBertDataset"], [196, 1, 1, "", "TensorflowModelZooBertDataset"], [196, 2, 1, "", "convert_examples_to_features"], [196, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[197, 1, 1, "", "COCONpy"], [197, 1, 1, "", "COCORaw"], [197, 1, 1, "", "COCORecordDataset"], [197, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[198, 1, 1, "", "CIFAR10"], [198, 1, 1, "", "CIFAR100"], [198, 1, 1, "", "Dataset"], [198, 1, 1, "", "Datasets"], [198, 1, 1, "", "FashionMNIST"], [198, 1, 1, "", "ImageFolder"], [198, 1, 1, "", "IterableDataset"], [198, 1, 1, "", "MNIST"], [198, 1, 1, "", "MXNetCIFAR10"], [198, 1, 1, "", "MXNetCIFAR100"], [198, 1, 1, "", "MXNetDatasets"], [198, 1, 1, "", "MXNetFashionMNIST"], [198, 1, 1, "", "MXNetImageFolder"], [198, 1, 1, "", "MXNetMNIST"], [198, 1, 1, "", "ONNXRTITDatasets"], [198, 1, 1, "", "ONNXRTQLDatasets"], [198, 1, 1, "", "PyTorchDatasets"], [198, 1, 1, "", "PytorchCIFAR10"], [198, 1, 1, "", "PytorchCIFAR100"], [198, 1, 1, "", "PytorchFashionMNIST"], [198, 1, 1, "", "PytorchMNIST"], [198, 1, 1, "", "PytorchMxnetWrapDataset"], [198, 1, 1, "", "PytorchMxnetWrapFunction"], [198, 1, 1, "", "Tensorflow"], [198, 1, 1, "", "TensorflowCIFAR10"], [198, 1, 1, "", "TensorflowCIFAR100"], [198, 1, 1, "", "TensorflowDatasets"], [198, 1, 1, "", "TensorflowFashionMNIST"], [198, 1, 1, "", "TensorflowImageRecord"], [198, 1, 1, "", "TensorflowMNIST"], [198, 1, 1, "", "TensorflowTFRecordDataset"], [198, 1, 1, "", "TensorflowVOCRecord"], [198, 2, 1, "", "calculate_md5"], [198, 2, 1, "", "check_integrity"], [198, 2, 1, "", "dataset_registry"], [198, 2, 1, "", "download_url"], [198, 4, 1, "", "framework_datasets"], [198, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[199, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[200, 1, 1, "", "DummyDataset"], [200, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[201, 1, 1, "", "ImagenetRaw"], [201, 1, 1, "", "MXNetImagenetRaw"], [201, 1, 1, "", "ONNXRTImagenetDataset"], [201, 1, 1, "", "PytorchImagenetRaw"], [201, 1, 1, "", "TensorflowImagenetDataset"], [201, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[203, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[204, 0, 0, "-", "coco_filter"], [205, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[204, 1, 1, "", "LabelBalanceCOCORawFilter"], [204, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[205, 1, 1, "", "FILTERS"], [205, 1, 1, "", "Filter"], [205, 1, 1, "", "MXNetFilters"], [205, 1, 1, "", "ONNXRTITFilters"], [205, 1, 1, "", "ONNXRTQLFilters"], [205, 1, 1, "", "PyTorchFilters"], [205, 1, 1, "", "TensorflowFilters"], [205, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[208, 0, 0, "-", "coco_transform"], [209, 0, 0, "-", "imagenet_transform"], [211, 0, 0, "-", "postprocess"], [212, 0, 0, "-", "tokenization"], [213, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.coco_transform": [[208, 1, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[209, 1, 1, "", "BilinearImagenetTransform"], [209, 1, 1, "", "LabelShift"], [209, 1, 1, "", "ONNXResizeCropImagenetTransform"], [209, 1, 1, "", "OnnxBilinearImagenetTransform"], [209, 1, 1, "", "ParseDecodeImagenet"], [209, 1, 1, "", "ParseDecodeImagenetTransform"], [209, 1, 1, "", "QuantizedInput"], [209, 1, 1, "", "ResizeWithAspectRatio"], [209, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.postprocess": [[211, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[212, 1, 1, "", "BasicTokenizer"], [212, 1, 1, "", "FullTokenizer"], [212, 1, 1, "", "WordpieceTokenizer"], [212, 2, 1, "", "convert_by_vocab"], [212, 2, 1, "", "convert_to_unicode"], [212, 2, 1, "", "load_vocab"], [212, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[213, 1, 1, "", "AlignImageChannelTransform"], [213, 1, 1, "", "BaseTransform"], [213, 1, 1, "", "CastONNXTransform"], [213, 1, 1, "", "CastPyTorchTransform"], [213, 1, 1, "", "CastTFTransform"], [213, 1, 1, "", "CenterCropTFTransform"], [213, 1, 1, "", "CenterCropTransform"], [213, 1, 1, "", "CollectTransform"], [213, 1, 1, "", "ComposeTransform"], [213, 1, 1, "", "CropResizeTFTransform"], [213, 1, 1, "", "CropResizeTransform"], [213, 1, 1, "", "CropToBoundingBox"], [213, 1, 1, "", "InputFeatures"], [213, 1, 1, "", "MXNetCropResizeTransform"], [213, 1, 1, "", "MXNetCropToBoundingBox"], [213, 1, 1, "", "MXNetNormalizeTransform"], [213, 1, 1, "", "MXNetTransforms"], [213, 1, 1, "", "MXNetTranspose"], [213, 1, 1, "", "NormalizeTFTransform"], [213, 1, 1, "", "NormalizeTransform"], [213, 1, 1, "", "ONNXRTCropToBoundingBox"], [213, 1, 1, "", "ONNXRTITTransforms"], [213, 1, 1, "", "ONNXRTQLTransforms"], [213, 1, 1, "", "PaddedCenterCropTransform"], [213, 1, 1, "", "ParseDecodeVocTransform"], [213, 1, 1, "", "PyTorchAlignImageChannel"], [213, 1, 1, "", "PyTorchCropResizeTransform"], [213, 1, 1, "", "PyTorchNormalizeTransform"], [213, 1, 1, "", "PyTorchTransforms"], [213, 1, 1, "", "PyTorchTranspose"], [213, 1, 1, "", "PytorchMxnetTransform"], [213, 1, 1, "", "PytorchMxnetWrapFunction"], [213, 1, 1, "", "RandomCropTFTransform"], [213, 1, 1, "", "RandomCropTransform"], [213, 1, 1, "", "RandomHorizontalFlip"], [213, 1, 1, "", "RandomResizedCropMXNetTransform"], [213, 1, 1, "", "RandomResizedCropPytorchTransform"], [213, 1, 1, "", "RandomResizedCropTFTransform"], [213, 1, 1, "", "RandomResizedCropTransform"], [213, 1, 1, "", "RandomVerticalFlip"], [213, 1, 1, "", "RescaleKerasPretrainTransform"], [213, 1, 1, "", "RescaleTFTransform"], [213, 1, 1, "", "RescaleTransform"], [213, 1, 1, "", "ResizeMXNetTransform"], [213, 1, 1, "", "ResizePytorchTransform"], [213, 1, 1, "", "ResizeTFTransform"], [213, 1, 1, "", "ResizeTransform"], [213, 1, 1, "", "ResizeWithRatio"], [213, 1, 1, "", "SquadExample"], [213, 1, 1, "", "TFModelZooCollectTransform"], [213, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [213, 1, 1, "", "TFSquadV1PostTransform"], [213, 1, 1, "", "TRANSFORMS"], [213, 1, 1, "", "TensorflowCropToBoundingBox"], [213, 1, 1, "", "TensorflowRandomHorizontalFlip"], [213, 1, 1, "", "TensorflowRandomVerticalFlip"], [213, 1, 1, "", "TensorflowResizeWithRatio"], [213, 1, 1, "", "TensorflowTransform"], [213, 1, 1, "", "TensorflowTransforms"], [213, 1, 1, "", "TensorflowTranspose"], [213, 1, 1, "", "TensorflowWrapFunction"], [213, 1, 1, "", "ToArray"], [213, 1, 1, "", "ToNDArrayTransform"], [213, 1, 1, "", "Transforms"], [213, 1, 1, "", "Transpose"], [213, 2, 1, "", "convert_examples_to_features"], [213, 2, 1, "", "get_final_text"], [213, 2, 1, "", "get_torchvision_map"], [213, 2, 1, "", "read_squad_examples"], [213, 2, 1, "", "transform_registry"]], "neural_compressor.experimental": [[214, 0, 0, "-", "benchmark"], [217, 0, 0, "-", "common"], [223, 0, 0, "-", "component"], [224, 0, 0, "-", "compression"], [226, 0, 0, "-", "contrib"], [251, 0, 0, "-", "data"], [256, 0, 0, "-", "distillation"], [257, 0, 0, "-", "export"], [261, 0, 0, "-", "graph_optimization"], [269, 0, 0, "-", "metric"], [271, 0, 0, "-", "mixed_precision"], [272, 0, 0, "-", "model_conversion"], [275, 0, 0, "-", "nas"], [281, 0, 0, "-", "pruner_legacy"], [285, 0, 0, "-", "pruning"], [286, 0, 0, "-", "pruning_recipes"], [290, 0, 0, "-", "pruning_v2"], [291, 0, 0, "-", "pytorch_pruner"], [298, 0, 0, "-", "quantization"], [299, 0, 0, "-", "scheduler"], [304, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[214, 1, 1, "", "Benchmark"], [214, 2, 1, "", "get_architecture"], [214, 2, 1, "", "get_bounded_threads"], [214, 2, 1, "", "get_core_ids"], [214, 2, 1, "", "get_physical_ids"], [214, 2, 1, "", "get_threads"], [214, 2, 1, "", "get_threads_per_core"], [214, 2, 1, "", "set_all_env_var"], [214, 2, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[215, 0, 0, "-", "criterion"], [216, 0, 0, "-", "dataloader"], [218, 0, 0, "-", "metric"], [219, 0, 0, "-", "model"], [220, 0, 0, "-", "optimizer"], [221, 0, 0, "-", "postprocess"], [222, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[215, 1, 1, "", "Criterions"], [215, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [215, 1, 1, "", "KnowledgeDistillationFramework"], [215, 1, 1, "", "KnowledgeDistillationLoss"], [215, 1, 1, "", "PyTorchCriterions"], [215, 1, 1, "", "PyTorchCrossEntropyLoss"], [215, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [215, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [215, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [215, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [215, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [215, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [215, 1, 1, "", "SelfKnowledgeDistillationLoss"], [215, 1, 1, "", "TensorFlowCrossEntropyLoss"], [215, 1, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [215, 1, 1, "", "TensorflowCriterions"], [215, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [215, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [215, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [215, 2, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[216, 1, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[218, 1, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[219, 1, 1, "", "Model"], [219, 2, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[220, 1, 1, "", "Optimizers"], [220, 1, 1, "", "PyTorchOptimizers"], [220, 1, 1, "", "PyTorchSGD"], [220, 1, 1, "", "TensorFlowAdam"], [220, 1, 1, "", "TensorFlowAdamW"], [220, 1, 1, "", "TensorFlowSGD"], [220, 1, 1, "", "TensorflowOptimizers"], [220, 2, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[221, 1, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[222, 2, 1, "", "get_activation"], [222, 2, 1, "", "record_output"]], "neural_compressor.experimental.component": [[223, 1, 1, "", "Component"]], "neural_compressor.experimental.compression": [[225, 0, 0, "-", "pruning"]], "neural_compressor.experimental.compression.pruning": [[225, 2, 1, "", "prepare_pruning"], [225, 2, 1, "", "save"]], "neural_compressor.experimental.contrib": [[227, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[228, 0, 0, "-", "sigopt"], [229, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[228, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[229, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[234, 0, 0, "-", "dataloaders"], [246, 0, 0, "-", "datasets"], [250, 0, 0, "-", "filters"], [253, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[230, 0, 0, "-", "base_dataloader"], [231, 0, 0, "-", "dataloader"], [232, 0, 0, "-", "default_dataloader"], [233, 0, 0, "-", "fetcher"], [235, 0, 0, "-", "mxnet_dataloader"], [236, 0, 0, "-", "onnxrt_dataloader"], [237, 0, 0, "-", "pytorch_dataloader"], [238, 0, 0, "-", "sampler"], [239, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[230, 1, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[232, 1, 1, "", "DefaultDataLoader"], [232, 2, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[233, 1, 1, "", "Fetcher"], [233, 1, 1, "", "IndexFetcher"], [233, 1, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[235, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[236, 1, 1, "", "ONNXRTBertDataLoader"], [236, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[237, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[238, 1, 1, "", "BatchSampler"], [238, 1, 1, "", "IterableSampler"], [238, 1, 1, "", "Sampler"], [238, 1, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[239, 1, 1, "", "TFDataDataLoader"], [239, 1, 1, "", "TensorflowBertDataLoader"], [239, 1, 1, "", "TensorflowDataLoader"], [239, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[240, 0, 0, "-", "bert_dataset"], [241, 0, 0, "-", "coco_dataset"], [242, 0, 0, "-", "dataset"], [243, 0, 0, "-", "dummy_dataset"], [244, 0, 0, "-", "dummy_dataset_v2"], [245, 0, 0, "-", "imagenet_dataset"], [247, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[240, 1, 1, "", "InputFeatures"], [240, 1, 1, "", "ONNXRTBertDataset"], [240, 1, 1, "", "ParseDecodeBert"], [240, 1, 1, "", "PytorchBertDataset"], [240, 1, 1, "", "TensorflowBertDataset"], [240, 1, 1, "", "TensorflowModelZooBertDataset"], [240, 2, 1, "", "convert_examples_to_features"], [240, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[241, 1, 1, "", "COCONpy"], [241, 1, 1, "", "COCORaw"], [241, 1, 1, "", "COCORecordDataset"], [241, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[242, 1, 1, "", "CIFAR10"], [242, 1, 1, "", "CIFAR100"], [242, 1, 1, "", "Dataset"], [242, 1, 1, "", "Datasets"], [242, 1, 1, "", "FashionMNIST"], [242, 1, 1, "", "ImageFolder"], [242, 1, 1, "", "IterableDataset"], [242, 1, 1, "", "MNIST"], [242, 1, 1, "", "MXNetCIFAR10"], [242, 1, 1, "", "MXNetCIFAR100"], [242, 1, 1, "", "MXNetDatasets"], [242, 1, 1, "", "MXNetFashionMNIST"], [242, 1, 1, "", "MXNetImageFolder"], [242, 1, 1, "", "MXNetMNIST"], [242, 1, 1, "", "ONNXRTITDatasets"], [242, 1, 1, "", "ONNXRTQLDatasets"], [242, 1, 1, "", "PyTorchDatasets"], [242, 1, 1, "", "PytorchCIFAR10"], [242, 1, 1, "", "PytorchCIFAR100"], [242, 1, 1, "", "PytorchFashionMNIST"], [242, 1, 1, "", "PytorchMNIST"], [242, 1, 1, "", "PytorchMxnetWrapDataset"], [242, 1, 1, "", "PytorchMxnetWrapFunction"], [242, 1, 1, "", "TensorflowCIFAR10"], [242, 1, 1, "", "TensorflowCIFAR100"], [242, 1, 1, "", "TensorflowDatasets"], [242, 1, 1, "", "TensorflowFashionMNIST"], [242, 1, 1, "", "TensorflowImageFolder"], [242, 1, 1, "", "TensorflowImageRecord"], [242, 1, 1, "", "TensorflowMNIST"], [242, 1, 1, "", "TensorflowTFRecordDataset"], [242, 1, 1, "", "TensorflowVOCRecord"], [242, 2, 1, "", "calculate_md5"], [242, 2, 1, "", "check_integrity"], [242, 2, 1, "", "dataset_registry"], [242, 2, 1, "", "download_url"], [242, 4, 1, "", "framework_datasets"], [242, 2, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[243, 1, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[244, 1, 1, "", "DummyDataset"], [244, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[245, 1, 1, "", "ImagenetRaw"], [245, 1, 1, "", "MXNetImagenetRaw"], [245, 1, 1, "", "ONNXRTImagenetDataset"], [245, 1, 1, "", "PytorchImagenetRaw"], [245, 1, 1, "", "TensorflowImagenetDataset"], [245, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[247, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[248, 0, 0, "-", "coco_filter"], [249, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[248, 1, 1, "", "LabelBalanceCOCORawFilter"], [248, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[249, 1, 1, "", "FILTERS"], [249, 1, 1, "", "Filter"], [249, 1, 1, "", "MXNetFilters"], [249, 1, 1, "", "ONNXRTITFilters"], [249, 1, 1, "", "ONNXRTQLFilters"], [249, 1, 1, "", "PyTorchFilters"], [249, 1, 1, "", "TensorflowFilters"], [249, 2, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[252, 0, 0, "-", "imagenet_transform"], [254, 0, 0, "-", "tokenization"], [255, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[252, 1, 1, "", "BilinearImagenetTransform"], [252, 1, 1, "", "LabelShift"], [252, 1, 1, "", "ONNXResizeCropImagenetTransform"], [252, 1, 1, "", "OnnxBilinearImagenetTransform"], [252, 1, 1, "", "ParseDecodeImagenet"], [252, 1, 1, "", "ParseDecodeImagenetTransform"], [252, 1, 1, "", "QuantizedInput"], [252, 1, 1, "", "ResizeWithAspectRatio"], [252, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[254, 1, 1, "", "BasicTokenizer"], [254, 1, 1, "", "FullTokenizer"], [254, 1, 1, "", "WordpieceTokenizer"], [254, 2, 1, "", "convert_by_vocab"], [254, 2, 1, "", "convert_to_unicode"], [254, 2, 1, "", "load_vocab"], [254, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[255, 1, 1, "", "AlignImageChannelTransform"], [255, 1, 1, "", "BaseTransform"], [255, 1, 1, "", "CastONNXTransform"], [255, 1, 1, "", "CastPyTorchTransform"], [255, 1, 1, "", "CastTFTransform"], [255, 1, 1, "", "CenterCropTFTransform"], [255, 1, 1, "", "CenterCropTransform"], [255, 1, 1, "", "CollectTransform"], [255, 1, 1, "", "ComposeTransform"], [255, 1, 1, "", "CropResizeTFTransform"], [255, 1, 1, "", "CropResizeTransform"], [255, 1, 1, "", "CropToBoundingBox"], [255, 1, 1, "", "InputFeatures"], [255, 1, 1, "", "MXNetCropResizeTransform"], [255, 1, 1, "", "MXNetCropToBoundingBox"], [255, 1, 1, "", "MXNetNormalizeTransform"], [255, 1, 1, "", "MXNetTransforms"], [255, 1, 1, "", "MXNetTranspose"], [255, 1, 1, "", "NormalizeTFTransform"], [255, 1, 1, "", "NormalizeTransform"], [255, 1, 1, "", "ONNXRTCropToBoundingBox"], [255, 1, 1, "", "ONNXRTITTransforms"], [255, 1, 1, "", "ONNXRTQLTransforms"], [255, 1, 1, "", "PaddedCenterCropTransform"], [255, 1, 1, "", "ParseDecodeVocTransform"], [255, 1, 1, "", "PyTorchAlignImageChannel"], [255, 1, 1, "", "PyTorchCropResizeTransform"], [255, 1, 1, "", "PyTorchNormalizeTransform"], [255, 1, 1, "", "PyTorchTransforms"], [255, 1, 1, "", "PyTorchTranspose"], [255, 1, 1, "", "PytorchMxnetTransform"], [255, 1, 1, "", "PytorchMxnetWrapFunction"], [255, 1, 1, "", "RandomCropTFTransform"], [255, 1, 1, "", "RandomCropTransform"], [255, 1, 1, "", "RandomHorizontalFlip"], [255, 1, 1, "", "RandomResizedCropMXNetTransform"], [255, 1, 1, "", "RandomResizedCropPytorchTransform"], [255, 1, 1, "", "RandomResizedCropTFTransform"], [255, 1, 1, "", "RandomResizedCropTransform"], [255, 1, 1, "", "RandomVerticalFlip"], [255, 1, 1, "", "RescaleKerasPretrainTransform"], [255, 1, 1, "", "RescaleTFTransform"], [255, 1, 1, "", "RescaleTransform"], [255, 1, 1, "", "ResizeMXNetTransform"], [255, 1, 1, "", "ResizePytorchTransform"], [255, 1, 1, "", "ResizeTFTransform"], [255, 1, 1, "", "ResizeTransform"], [255, 1, 1, "", "ResizeWithRatio"], [255, 1, 1, "", "SquadExample"], [255, 1, 1, "", "TFModelZooCollectTransform"], [255, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [255, 1, 1, "", "TFSquadV1PostTransform"], [255, 1, 1, "", "TRANSFORMS"], [255, 1, 1, "", "TensorflowCropToBoundingBox"], [255, 1, 1, "", "TensorflowRandomHorizontalFlip"], [255, 1, 1, "", "TensorflowRandomVerticalFlip"], [255, 1, 1, "", "TensorflowResizeWithRatio"], [255, 1, 1, "", "TensorflowTransform"], [255, 1, 1, "", "TensorflowTransforms"], [255, 1, 1, "", "TensorflowTranspose"], [255, 1, 1, "", "TensorflowWrapFunction"], [255, 1, 1, "", "ToArray"], [255, 1, 1, "", "ToNDArrayTransform"], [255, 1, 1, "", "Transforms"], [255, 1, 1, "", "Transpose"], [255, 2, 1, "", "convert_examples_to_features"], [255, 2, 1, "", "get_final_text"], [255, 2, 1, "", "get_torchvision_map"], [255, 2, 1, "", "read_squad_examples"], [255, 2, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[256, 1, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[256, 3, 1, "", "_epoch_ran"], [256, 3, 1, "", "best_model"], [256, 3, 1, "", "best_score"], [256, 3, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[258, 0, 0, "-", "qlinear2qdq"], [259, 0, 0, "-", "tf2onnx"], [260, 0, 0, "-", "torch2onnx"]], "neural_compressor.experimental.export.qlinear2qdq": [[258, 2, 1, "", "check_model"], [258, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[259, 2, 1, "", "tf_to_fp32_onnx"], [259, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[260, 2, 1, "", "torch_to_fp32_onnx"], [260, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.experimental.graph_optimization": [[261, 1, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[263, 0, 0, "-", "bleu"], [264, 0, 0, "-", "bleu_util"], [265, 0, 0, "-", "coco_label_map"], [266, 0, 0, "-", "coco_tools"], [267, 0, 0, "-", "evaluate_squad"], [268, 0, 0, "-", "f1"], [270, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[263, 1, 1, "", "BLEU"], [263, 1, 1, "", "UnicodeRegex"], [263, 2, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[263, 3, 1, "", "labels"], [263, 3, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[263, 3, 1, "", "nondigit_punct_re"], [263, 3, 1, "", "punct_nondigit_re"], [263, 3, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[264, 2, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[266, 1, 1, "", "COCOEvalWrapper"], [266, 1, 1, "", "COCOWrapper"], [266, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [266, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [266, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[266, 3, 1, "", "dataset"], [266, 3, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[267, 2, 1, "", "evaluate"], [267, 2, 1, "", "exact_match_score"], [267, 2, 1, "", "f1_score"], [267, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[268, 2, 1, "", "evaluate"], [268, 2, 1, "", "f1_score"], [268, 2, 1, "", "metric_max_over_ground_truths"], [268, 2, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[270, 1, 1, "", "Accuracy"], [270, 1, 1, "", "BaseMetric"], [270, 1, 1, "", "COCOmAPv2"], [270, 1, 1, "", "F1"], [270, 1, 1, "", "GeneralTopK"], [270, 1, 1, "", "Loss"], [270, 1, 1, "", "MAE"], [270, 1, 1, "", "METRICS"], [270, 1, 1, "", "MSE"], [270, 1, 1, "", "MXNetMetrics"], [270, 1, 1, "", "ONNXRTGLUE"], [270, 1, 1, "", "ONNXRTITMetrics"], [270, 1, 1, "", "ONNXRTQLMetrics"], [270, 1, 1, "", "PyTorchLoss"], [270, 1, 1, "", "PyTorchMetrics"], [270, 1, 1, "", "RMSE"], [270, 1, 1, "", "ROC"], [270, 1, 1, "", "SquadF1"], [270, 1, 1, "", "TensorflowCOCOMAP"], [270, 1, 1, "", "TensorflowMAP"], [270, 1, 1, "", "TensorflowMetrics"], [270, 1, 1, "", "TensorflowTopK"], [270, 1, 1, "", "TensorflowVOCMAP"], [270, 1, 1, "", "WrapMXNetMetric"], [270, 1, 1, "", "WrapONNXRTMetric"], [270, 1, 1, "", "WrapPyTorchMetric"], [270, 1, 1, "", "mIOU"], [270, 2, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[270, 3, 1, "", "label_list"], [270, 3, 1, "", "pred_list"], [270, 3, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[270, 3, 1, "", "k"], [270, 3, 1, "", "num_correct"], [270, 3, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[270, 3, 1, "", "sample"], [270, 3, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[270, 3, 1, "", "compare_label"], [270, 3, 1, "", "label_list"], [270, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[270, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[270, 3, 1, "", "compare_label"], [270, 3, 1, "", "label_list"], [270, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[270, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[270, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[270, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[270, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[270, 3, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[270, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[270, 3, 1, "", "k"], [270, 3, 1, "", "num_correct"], [270, 3, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[271, 1, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[272, 1, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[273, 0, 0, "-", "basic_nas"], [274, 0, 0, "-", "dynas"], [276, 0, 0, "-", "nas"], [277, 0, 0, "-", "nas_utils"], [278, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[273, 1, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[274, 1, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[276, 1, 1, "", "NAS"], [276, 1, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[277, 2, 1, "", "create_search_space_pool"], [277, 2, 1, "", "find_pareto_front"], [277, 2, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[278, 1, 1, "", "BayesianOptimizationSearcher"], [278, 1, 1, "", "GridSearcher"], [278, 1, 1, "", "RandomSearcher"], [278, 1, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[279, 0, 0, "-", "gradient_sensitivity"], [280, 0, 0, "-", "group_lasso"], [282, 0, 0, "-", "magnitude"], [283, 0, 0, "-", "pattern_lock"], [284, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[279, 1, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[280, 1, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[282, 1, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[283, 1, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[284, 1, 1, "", "Pruner"], [284, 2, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[285, 1, 1, "", "Pruning"], [285, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[285, 3, 1, "", "conf"], [285, 3, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[287, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[288, 0, 0, "-", "pattern"], [289, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[288, 1, 1, "", "PATTERNS"], [288, 1, 1, "", "PatternBase"], [288, 2, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[288, 3, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[289, 1, 1, "", "TilePatternBase"], [289, 1, 1, "", "TilePattern_1x1"], [289, 1, 1, "", "TilePattern_1x16"], [289, 1, 1, "", "TilePattern_1x2"], [289, 1, 1, "", "TilePattern_2x2"], [289, 1, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[290, 1, 1, "", "Pruning"], [290, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[290, 3, 1, "", "conf"], [290, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[292, 0, 0, "-", "logger"], [293, 0, 0, "-", "patterns"], [294, 0, 0, "-", "prune_utils"], [295, 0, 0, "-", "pruner"], [296, 0, 0, "-", "pruning"], [297, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[293, 1, 1, "", "Pattern"], [293, 1, 1, "", "PatternNInM"], [293, 1, 1, "", "PatternNxM"], [293, 2, 1, "", "get_pattern"], [293, 2, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[293, 3, 1, "", "is_global"], [293, 3, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[293, 3, 1, "", "M"], [293, 3, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[293, 3, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[294, 2, 1, "", "check_config"], [294, 2, 1, "", "parse_not_to_prune"], [294, 2, 1, "", "parse_to_prune"], [294, 2, 1, "", "process_and_check_config"], [294, 2, 1, "", "process_config"], [294, 2, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[295, 1, 1, "", "MagnitudePruner"], [295, 1, 1, "", "PatternLockPruner"], [295, 1, 1, "", "Pruner"], [295, 1, 1, "", "SnipMomentumPruner"], [295, 1, 1, "", "SnipPruner"], [295, 2, 1, "", "get_pruner"], [295, 2, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[295, 3, 1, "", "config"], [295, 3, 1, "", "current_sparsity_ratio"], [295, 3, 1, "", "end_step"], [295, 3, 1, "", "global_step"], [295, 3, 1, "", "masks"], [295, 3, 1, "", "max_sparsity_ratio_per_layer"], [295, 3, 1, "", "modules"], [295, 3, 1, "", "pattern"], [295, 3, 1, "", "scheduler"], [295, 3, 1, "", "scores"], [295, 3, 1, "", "start_step"], [295, 3, 1, "", "target_sparsity_ratio"], [295, 3, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[296, 1, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[296, 3, 1, "", "config_file_path"], [296, 3, 1, "", "model"], [296, 3, 1, "", "pruner_info"], [296, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[297, 1, 1, "", "IterativeScheduler"], [297, 1, 1, "", "OneshotScheduler"], [297, 1, 1, "", "Scheduler"], [297, 2, 1, "", "get_scheduler"], [297, 2, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[297, 3, 1, "", "config"]], "neural_compressor.experimental.quantization": [[298, 1, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[299, 1, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[300, 0, 0, "-", "auto_mixed_precision"], [301, 0, 0, "-", "basic"], [302, 0, 0, "-", "bayesian"], [303, 0, 0, "-", "exhaustive"], [305, 0, 0, "-", "mse"], [306, 0, 0, "-", "mse_v2"], [307, 0, 0, "-", "random"], [308, 0, 0, "-", "strategy"], [310, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[300, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[301, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[302, 1, 1, "", "BayesianOptimization"], [302, 1, 1, "", "BayesianTuneStrategy"], [302, 1, 1, "", "TargetSpace"], [302, 2, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[303, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[305, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[306, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[307, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[308, 1, 1, "", "TuneStrategy"], [308, 2, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[309, 0, 0, "-", "constant"], [311, 0, 0, "-", "tuning_sampler"], [312, 0, 0, "-", "tuning_space"], [313, 0, 0, "-", "tuning_structs"], [314, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[311, 1, 1, "", "FallbackTuningSampler"], [311, 1, 1, "", "ModelWiseTuningSampler"], [311, 1, 1, "", "OpTypeWiseTuningSampler"], [311, 1, 1, "", "OpWiseTuningSampler"], [311, 1, 1, "", "SmoothQuantSampler"], [311, 1, 1, "", "TuningOrder"], [311, 1, 1, "", "TuningSampler"], [311, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[312, 1, 1, "", "TuningItem"], [312, 1, 1, "", "TuningSpace"], [312, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [312, 2, 1, "", "pattern_to_internal"], [312, 2, 1, "", "pattern_to_path"], [312, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[313, 1, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[314, 1, 1, "", "OrderedDefaultDict"], [314, 2, 1, "", "extract_data_type"], [314, 2, 1, "", "get_adaptor_name"], [314, 2, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[316, 0, 0, "-", "bleu"], [317, 0, 0, "-", "bleu_util"], [318, 0, 0, "-", "coco_label_map"], [319, 0, 0, "-", "coco_tools"], [320, 0, 0, "-", "evaluate_squad"], [321, 0, 0, "-", "f1"], [323, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[316, 1, 1, "", "BLEU"], [316, 1, 1, "", "UnicodeRegex"], [316, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[316, 3, 1, "", "labels"], [316, 3, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[316, 3, 1, "", "nondigit_punct_re"], [316, 3, 1, "", "punct_nondigit_re"], [316, 3, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[317, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[319, 1, 1, "", "COCOEvalWrapper"], [319, 1, 1, "", "COCOWrapper"], [319, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [319, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [319, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[319, 3, 1, "", "dataset"], [319, 3, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[320, 2, 1, "", "evaluate"], [320, 2, 1, "", "exact_match_score"], [320, 2, 1, "", "f1_score"], [320, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[321, 2, 1, "", "evaluate"], [321, 2, 1, "", "f1_score"], [321, 2, 1, "", "metric_max_over_ground_truths"], [321, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[323, 1, 1, "", "Accuracy"], [323, 1, 1, "", "BaseMetric"], [323, 1, 1, "", "COCOmAPv2"], [323, 1, 1, "", "F1"], [323, 1, 1, "", "GeneralTopK"], [323, 1, 1, "", "Loss"], [323, 1, 1, "", "MAE"], [323, 1, 1, "", "METRICS"], [323, 1, 1, "", "MSE"], [323, 1, 1, "", "MXNetMetrics"], [323, 1, 1, "", "Metric"], [323, 1, 1, "", "ONNXRTGLUE"], [323, 1, 1, "", "ONNXRTITMetrics"], [323, 1, 1, "", "ONNXRTQLMetrics"], [323, 1, 1, "", "PyTorchLoss"], [323, 1, 1, "", "PyTorchMetrics"], [323, 1, 1, "", "RMSE"], [323, 1, 1, "", "ROC"], [323, 1, 1, "", "SquadF1"], [323, 1, 1, "", "TensorflowCOCOMAP"], [323, 1, 1, "", "TensorflowMAP"], [323, 1, 1, "", "TensorflowMetrics"], [323, 1, 1, "", "TensorflowTopK"], [323, 1, 1, "", "TensorflowVOCMAP"], [323, 1, 1, "", "WrapMXNetMetric"], [323, 1, 1, "", "WrapONNXRTMetric"], [323, 1, 1, "", "WrapPyTorchMetric"], [323, 1, 1, "", "mIOU"], [323, 2, 1, "", "metric_registry"], [323, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[323, 3, 1, "", "label_list"], [323, 3, 1, "", "pred_list"], [323, 3, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[323, 3, 1, "", "k"], [323, 3, 1, "", "num_correct"], [323, 3, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[323, 3, 1, "", "sample"], [323, 3, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[323, 3, 1, "", "compare_label"], [323, 3, 1, "", "label_list"], [323, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[323, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[323, 3, 1, "", "compare_label"], [323, 3, 1, "", "label_list"], [323, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[323, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[323, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[323, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[323, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[323, 3, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[323, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[323, 3, 1, "", "k"], [323, 3, 1, "", "num_correct"], [323, 3, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[324, 2, 1, "", "fit"]], "neural_compressor.model": [[325, 0, 0, "-", "base_model"], [327, 0, 0, "-", "keras_model"], [328, 0, 0, "-", "model"], [329, 0, 0, "-", "mxnet_model"], [330, 0, 0, "-", "nets_factory"], [331, 0, 0, "-", "onnx_model"], [332, 0, 0, "-", "tensorflow_model"], [333, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[325, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[327, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[328, 1, 1, "", "Model"], [328, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[329, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[330, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[331, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[332, 1, 1, "", "TensorflowBaseModel"], [332, 1, 1, "", "TensorflowCheckpointModel"], [332, 1, 1, "", "TensorflowModel"], [332, 1, 1, "", "TensorflowQATModel"], [332, 1, 1, "", "TensorflowSavedModelModel"], [332, 2, 1, "", "checkpoint_session"], [332, 2, 1, "", "estimator_session"], [332, 2, 1, "", "frozen_pb_session"], [332, 2, 1, "", "get_model_type"], [332, 2, 1, "", "graph_def_session"], [332, 2, 1, "", "graph_session"], [332, 2, 1, "", "keras_session"], [332, 2, 1, "", "load_saved_model"], [332, 2, 1, "", "saved_model_session"], [332, 2, 1, "", "slim_session"], [332, 2, 1, "", "validate_and_inference_input_output"], [332, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[333, 1, 1, "", "IPEXModel"], [333, 1, 1, "", "PyTorchBaseModel"], [333, 1, 1, "", "PyTorchFXModel"], [333, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[334, 1, 1, "", "Accuracy"], [334, 1, 1, "", "Footprint"], [334, 1, 1, "", "ModelSize"], [334, 1, 1, "", "MultiObjective"], [334, 1, 1, "", "Objective"], [334, 1, 1, "", "Performance"], [334, 2, 1, "", "objective_custom_registry"], [334, 2, 1, "", "objective_registry"]], "neural_compressor.profiling": [[337, 0, 0, "-", "parser"], [347, 0, 0, "-", "profiler"]], "neural_compressor.profiling.parser": [[336, 0, 0, "-", "factory"], [339, 0, 0, "-", "onnx_parser"], [341, 0, 0, "-", "parser"], [342, 0, 0, "-", "result"], [344, 0, 0, "-", "tensorflow_parser"]], "neural_compressor.profiling.parser.factory": [[336, 1, 1, "", "ParserFactory"]], "neural_compressor.profiling.parser.onnx_parser": [[338, 0, 0, "-", "factory"], [340, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[338, 1, 1, "", "OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[340, 1, 1, "", "OnnxProfilingParser"]], "neural_compressor.profiling.parser.parser": [[341, 1, 1, "", "ProfilingParser"]], "neural_compressor.profiling.parser.result": [[342, 1, 1, "", "ProfilingResult"]], "neural_compressor.profiling.parser.tensorflow_parser": [[343, 0, 0, "-", "factory"], [345, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[343, 1, 1, "", "TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[345, 1, 1, "", "TensorFlowProfilingParser"]], "neural_compressor.profiling.profiler": [[346, 0, 0, "-", "factory"], [349, 0, 0, "-", "onnxrt_profiler"], [352, 0, 0, "-", "profiler"], [354, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.profiling.profiler.factory": [[346, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[348, 0, 0, "-", "factory"], [350, 0, 0, "-", "profiler"], [351, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[348, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[350, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[351, 2, 1, "", "create_onnx_config"]], "neural_compressor.profiling.profiler.profiler": [[352, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[353, 0, 0, "-", "factory"], [355, 0, 0, "-", "profiler"], [356, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[353, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[355, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[356, 2, 1, "", "create_tf_config"], [356, 2, 1, "", "delete_assign"], [356, 2, 1, "", "set_eager_execution"]], "neural_compressor.quantization": [[357, 2, 1, "", "fit"]], "neural_compressor.strategy": [[358, 0, 0, "-", "auto"], [359, 0, 0, "-", "auto_mixed_precision"], [360, 0, 0, "-", "basic"], [361, 0, 0, "-", "bayesian"], [362, 0, 0, "-", "conservative"], [363, 0, 0, "-", "exhaustive"], [364, 0, 0, "-", "hawq_v2"], [366, 0, 0, "-", "mse"], [367, 0, 0, "-", "mse_v2"], [368, 0, 0, "-", "random"], [369, 0, 0, "-", "strategy"], [371, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[358, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[359, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[360, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[361, 1, 1, "", "BayesianOptimization"], [361, 1, 1, "", "BayesianTuneStrategy"], [361, 1, 1, "", "TargetSpace"], [361, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[362, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[363, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[364, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[366, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[367, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[368, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[369, 1, 1, "", "TuneStrategy"], [369, 1, 1, "", "TuneStrategyMeta"], [369, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[370, 0, 0, "-", "constant"], [372, 0, 0, "-", "tuning_sampler"], [373, 0, 0, "-", "tuning_space"], [374, 0, 0, "-", "tuning_structs"], [375, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[372, 1, 1, "", "BlockFallbackTuningSampler"], [372, 1, 1, "", "FallbackTuningSampler"], [372, 1, 1, "", "LowerBitsSampler"], [372, 1, 1, "", "ModelWiseTuningSampler"], [372, 1, 1, "", "OpTypeWiseTuningSampler"], [372, 1, 1, "", "OpWiseTuningSampler"], [372, 1, 1, "", "TuningOrder"], [372, 1, 1, "", "TuningSampler"], [372, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_space": [[373, 1, 1, "", "TuningItem"], [373, 1, 1, "", "TuningSpace"], [373, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [373, 2, 1, "", "pattern_to_internal"], [373, 2, 1, "", "pattern_to_path"], [373, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[374, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[375, 1, 1, "", "OrderedDefaultDict"], [375, 2, 1, "", "build_slave_faker_model"], [375, 2, 1, "", "extract_data_type"], [375, 2, 1, "", "get_adaptor_name"], [375, 2, 1, "", "reverted_data_type"]], "neural_compressor.template": [[376, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[376, 1, 1, "", "ExampleClass"], [376, 3, 1, "", "attribute1"], [376, 2, 1, "", "function1"], [376, 2, 1, "", "function2"], [376, 2, 1, "", "function3"], [376, 2, 1, "", "generator1"], [376, 4, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[376, 3, 1, "", "attr1"], [376, 3, 1, "", "attr2"], [376, 3, 1, "", "attr5"]], "neural_compressor.training": [[378, 1, 1, "", "CallBacks"], [378, 1, 1, "", "CompressionManager"], [378, 2, 1, "", "fit"], [378, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[379, 0, 0, "-", "collect_layer_histogram"], [380, 0, 0, "-", "constant"], [381, 0, 0, "-", "create_obj_from_config"], [383, 0, 0, "-", "kl_divergence"], [384, 0, 0, "-", "load_huggingface"], [385, 0, 0, "-", "logger"], [386, 0, 0, "-", "neural_insights_utils"], [387, 0, 0, "-", "options"], [388, 0, 0, "-", "pytorch"], [389, 0, 0, "-", "utility"], [390, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[379, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[381, 2, 1, "", "create_dataloader"], [381, 2, 1, "", "create_dataset"], [381, 2, 1, "", "create_eval_func"], [381, 2, 1, "", "create_train_func"], [381, 2, 1, "", "get_algorithm"], [381, 2, 1, "", "get_func_from_config"], [381, 2, 1, "", "get_metrics"], [381, 2, 1, "", "get_postprocess"], [381, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[383, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[384, 1, 1, "", "OptimizedModel"], [384, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[385, 1, 1, "", "Logger"], [385, 2, 1, "", "debug"], [385, 2, 1, "", "error"], [385, 2, 1, "", "fatal"], [385, 2, 1, "", "info"], [385, 2, 1, "", "log"], [385, 2, 1, "", "warn"], [385, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[386, 2, 1, "", "register_neural_insights_workload"], [386, 2, 1, "", "update_neural_insights_workload"], [386, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[387, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[388, 2, 1, "", "is_int8_model"], [388, 2, 1, "", "load"]], "neural_compressor.utils.utility": [[389, 1, 1, "", "CaptureOutputToFile"], [389, 1, 1, "", "CpuInfo"], [389, 2, 1, "", "Dequantize"], [389, 2, 1, "", "DequantizeWeight"], [389, 1, 1, "", "DotDict"], [389, 1, 1, "", "GLOBAL_STATE"], [389, 1, 1, "", "LazyImport"], [389, 1, 1, "", "MODE"], [389, 1, 1, "", "OpEntry"], [389, 1, 1, "", "Statistics"], [389, 2, 1, "", "alias_param"], [389, 2, 1, "", "calculate_mse"], [389, 2, 1, "", "combine_histogram"], [389, 2, 1, "", "compare_objects"], [389, 2, 1, "", "compute_sparsity"], [389, 2, 1, "", "dump_class_attrs"], [389, 2, 1, "", "dump_data_to_local"], [389, 2, 1, "", "dump_elapsed_time"], [389, 2, 1, "", "dump_table"], [389, 2, 1, "", "dump_table_to_csv"], [389, 2, 1, "", "equal_dicts"], [389, 2, 1, "", "fault_tolerant_file"], [389, 2, 1, "", "get_all_fp32_data"], [389, 2, 1, "", "get_number_of_sockets"], [389, 2, 1, "", "get_op_list"], [389, 2, 1, "", "get_size"], [389, 2, 1, "", "get_tensor_histogram"], [389, 2, 1, "", "get_tensors_info"], [389, 2, 1, "", "get_tuning_history"], [389, 2, 1, "", "get_weights_details"], [389, 2, 1, "", "load_data_from_pkl"], [389, 2, 1, "", "mse_metric_gap"], [389, 2, 1, "", "print_op_list"], [389, 2, 1, "", "print_table"], [389, 2, 1, "", "recover"], [389, 2, 1, "", "set_random_seed"], [389, 2, 1, "", "set_resume_from"], [389, 2, 1, "", "set_tensorboard"], [389, 2, 1, "", "set_workspace"], [389, 2, 1, "", "show_memory_info"], [389, 2, 1, "", "singleton"], [389, 2, 1, "", "str2array"], [389, 2, 1, "", "time_limit"], [389, 2, 1, "", "version1_eq_version2"], [389, 2, 1, "", "version1_gt_version2"], [389, 2, 1, "", "version1_gte_version2"], [389, 2, 1, "", "version1_lt_version2"], [389, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[390, 1, 1, "", "WeightsDetails"], [390, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:attribute", "4": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "data", "Python data"]}, "titleterms": {"block_mask": 0, "neural_compressor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391], "adaptor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 399, 400], "modul": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 166, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 225, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 252, 254, 255, 256, 258, 259, 260, 261, 263, 264, 266, 267, 268, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284, 285, 288, 289, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 311, 312, 313, 314, 316, 317, 319, 320, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 336, 338, 340, 341, 342, 343, 345, 346, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 372, 373, 374, 375, 376, 378, 379, 381, 383, 384, 385, 386, 387, 388, 389, 390], "content": [1, 2, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 338, 340, 341, 342, 343, 345, 346, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 372, 373, 374, 375, 376, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 398], "class": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 152, 153, 156, 157, 158, 159, 160, 162, 163, 166, 170, 171, 172, 173, 174, 175, 177, 178, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 261, 262, 263, 266, 269, 270, 271, 272, 273, 274, 276, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 311, 312, 313, 314, 316, 319, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 338, 340, 341, 342, 343, 345, 346, 348, 350, 352, 353, 355, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 372, 373, 374, 375, 376, 378, 379, 382, 383, 384, 385, 387, 389, 390, 399], "function": [1, 13, 16, 34, 42, 43, 44, 66, 67, 69, 103, 104, 115, 117, 147, 148, 149, 153, 154, 155, 156, 158, 161, 163, 166, 168, 170, 172, 173, 174, 175, 176, 178, 187, 188, 196, 198, 202, 205, 206, 207, 210, 212, 213, 214, 215, 217, 219, 220, 222, 225, 232, 240, 242, 246, 249, 250, 251, 253, 254, 255, 258, 259, 260, 263, 264, 266, 267, 268, 269, 270, 277, 284, 288, 293, 294, 295, 297, 302, 308, 312, 314, 316, 317, 319, 320, 321, 322, 323, 324, 328, 332, 334, 351, 356, 357, 361, 369, 373, 375, 376, 378, 381, 382, 384, 385, 386, 388, 389, 420], "subpackag": [2, 17, 86, 110, 111, 113, 165, 167, 182, 207, 226, 251, 262, 286, 304, 315, 365], "submodul": [2, 12, 17, 29, 50, 75, 86, 94, 100, 105, 110, 111, 113, 116, 129, 144, 150, 158, 164, 165, 167, 169, 179, 183, 190, 202, 206, 210, 217, 224, 227, 234, 246, 250, 253, 257, 262, 269, 275, 281, 287, 291, 304, 310, 315, 322, 326, 337, 339, 344, 347, 349, 354, 365, 371, 377, 382], "packag": [2, 29, 158, 190, 202, 206, 207, 210, 217, 234, 246, 250, 251, 253, 262, 269, 281, 286, 287, 304, 322, 326, 365, 382, 444, 446, 448, 449], "kera": 3, "keras_util": [4, 5, 6, 7, 8, 9, 10], "conv2d": 4, "dens": 5, "depthwise_conv2d": 6, "pool2d": 8, "quantiz": [9, 41, 298, 357, 395, 398, 411, 419, 422, 425, 428, 431, 440, 451, 458, 459, 460, 463, 469], "separable_conv2d": 10, "mxnet": [11, 416, 430, 459, 465, 469], "mxnet_util": [12, 13], "util": [13, 43, 147, 155, 176, 309, 310, 311, 312, 313, 314, 351, 356, 370, 371, 372, 373, 374, 375, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 402], "onnxrt": [14, 416, 430, 465], "ox_util": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], "calibr": [15, 16], "oper": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "activ": 18, "argmax": 19, "attent": 20, "binary_op": 21, "concat": 22, "conv": 23, "direct_q8": 24, "embed_layernorm": 25, "gather": 26, "gavgpool": 27, "gemm": 28, "lstm": 30, "matmul": [31, 463], "maxpool": 32, "norm": 33, "op": [34, 422], "pad": 35, "pool": 36, "reduc": 37, "resiz": 38, "split": 39, "unary_op": 40, "smooth_quant": [42, 153, 159], "pytorch": [44, 388, 416, 420, 422, 430, 432, 459, 460, 464, 465, 469], "queri": [45, 399], "tensorflow": [46, 416, 420, 422, 430, 432, 459, 460, 464, 465, 469], "tf_util": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], "graph_convert": 47, "graph_converter_without_calib": 48, "graph_rewrit": [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "bf16": [49, 50], "bf16_convert": [49, 148], "gener": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "convert_add_to_biasadd": 51, "convert_layout": 52, "convert_leakyrelu": 53, "convert_nan_to_random": 54, "convert_placeholder_to_const": 55, "dequantize_cast_optim": 56, "dilated_contract": 57, "dummy_biasadd": 58, "expanddims_optim": 59, "fetch_weight_from_reshap": 60, "fold_batch_norm": 61, "fold_const": 62, "fuse_biasadd_add": 63, "fuse_column_wise_mul": 64, "fuse_conv_with_math": 65, "fuse_decomposed_bn": 66, "fuse_decomposed_in": 67, "fuse_gelu": 68, "fuse_layer_norm": 69, "fuse_pad_with_conv": 70, "fuse_pad_with_fp32_conv": 71, "fuse_reshape_transpos": 72, "graph_cse_optim": 73, "grappler_pass": 74, "insert_print_nod": 76, "move_squeeze_after_relu": 77, "pre_optim": 78, "remove_training_nod": 79, "rename_batch_norm": 80, "split_shared_input": 81, "strip_equivalent_nod": 82, "strip_unused_nod": 83, "switch_optim": 84, "graph_bas": 85, "int8": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 422, 469], "freeze_fake_qu": 87, "freeze_valu": 88, "freeze_value_without_calib": 89, "fuse_conv_redundant_dequant": 90, "fuse_conv_requant": 91, "fuse_matmul_redundant_dequant": 92, "fuse_matmul_requant": 93, "meta_op_optim": 95, "post_hostconst_convert": 96, "post_quantized_op_cs": 97, "rnn_convert": 98, "scale_propag": 99, "onnx": [100, 101, 102, 103, 104, 401, 428, 432, 459, 469], "onnx_graph": 101, "onnx_nod": 102, "onnx_schema": 103, "tf2onnx_util": 104, "qdq": [105, 106, 107, 108, 122, 123, 124, 125, 126, 127, 128, 129, 130, 469], "insert_qdq_pattern": 106, "merge_duplicated_qdq": 107, "share_qdq_y_pattern": 108, "graph_util": 109, "quantize_graph": [111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137], "qat": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 469], "fake_quant": 112, "quantize_config": 114, "quantize_help": 115, "quantize_lay": [116, 117, 118, 119, 120], "optimize_lay": 117, "quantize_layer_add": 118, "quantize_layer_bas": 119, "quantize_layer_bn": 120, "quantize_wrapp": 121, "fuse_qdq_bn": 122, "fuse_qdq_concatv2": 123, "fuse_qdq_conv": 124, "fuse_qdq_deconv": 125, "fuse_qdq_in": 126, "fuse_qdq_matmul": 127, "fuse_qdq_pool": 128, "optimize_qdq": 130, "quantize_graph_bas": 131, "quantize_graph_bn": 132, "quantize_graph_concatv2": 133, "quantize_graph_conv": 134, "quantize_graph_for_intel_cpu": 135, "quantize_graph_matmul": 136, "quantize_graph_pool": 137, "quantize_graph_common": 138, "smooth_quant_calibr": 139, "smooth_quant_scal": 140, "tf2onnx_convert": 141, "transform_graph": [142, 143, 144, 145, 146], "bias_correct": 142, "graph_transform_bas": 143, "insert_log": 145, "rerange_quantized_concat": 146, "torch_util": [148, 149, 150, 151, 152, 153, 154, 155, 222], "hawq_metr": 149, "model_wrapp": 151, "pattern_detector": 152, "symbolic_trac": 154, "algorithm": [156, 157, 158, 159, 160, 463, 466], "fast_bias_correct": 157, "weight_correct": 160, "benchmark": [161, 214, 405, 414, 431, 458], "compress": [162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 224, 225, 406], "callback": 162, "distil": [163, 164, 256, 418, 419, 431, 458, 469], "criterion": [163, 215], "pruner": [166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 284, 295], "criteria": [166, 456, 466], "model_slim": [168, 169, 170, 171], "auto_slim": 168, "pattern_analyz": 170, "weight_slim": 171, "pattern": [172, 287, 288, 289, 293, 456], "reg": 174, "schedul": [175, 297, 299, 456], "conf": [177, 178, 179, 180], "config": [177, 181, 407, 415, 416, 453], "dotdict": 178, "pythonic_config": 180, "contrib": [182, 183, 184, 185, 226, 227, 228, 229], "strategi": [183, 184, 185, 227, 228, 229, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 412, 462, 466], "sigopt": [184, 228, 462, 466], "tpe": [185, 229, 466], "data": [186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 421], "dataload": [186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 216, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 415, 416], "base_dataload": [186, 230], "default_dataload": [188, 232], "fetcher": [189, 233], "attribut": [190, 198, 207, 242, 251, 262, 286, 326, 376, 382, 393], "mxnet_dataload": [191, 235], "onnxrt_dataload": [192, 236], "pytorch_dataload": [193, 237], "sampler": [194, 238], "tensorflow_dataload": [195, 239], "dataset": [196, 197, 198, 199, 200, 201, 202, 203, 240, 241, 242, 243, 244, 245, 246, 247, 416, 426], "bert_dataset": [196, 240], "coco_dataset": [197, 241], "dummy_dataset": [199, 243], "dummy_dataset_v2": [200, 244], "imagenet_dataset": [201, 245], "style_transfer_dataset": [203, 247], "filter": [204, 205, 206, 248, 249, 250], "coco_filt": [204, 248], "transform": [208, 209, 210, 211, 212, 213, 252, 253, 254, 255, 426, 465], "coco_transform": 208, "imagenet_transform": [209, 252], "postprocess": [211, 221], "token": [212, 254], "experiment": [214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314], "common": [215, 216, 217, 218, 219, 220, 221, 222, 395, 423], "metric": [218, 263, 264, 265, 266, 267, 268, 269, 270, 316, 317, 318, 319, 320, 321, 322, 323, 426, 430], "model": [219, 325, 326, 327, 328, 329, 330, 331, 332, 333, 409, 422, 425, 428, 431, 433, 440, 456, 463, 469], "optim": [220, 441, 451, 454, 467], "compon": 223, "prune": [225, 285, 296, 431, 456, 458, 469], "export": [257, 258, 259, 260, 422], "qlinear2qdq": 258, "tf2onnx": 259, "torch2onnx": 260, "graph_optim": 261, "bleu": [263, 316], "bleu_util": [264, 317], "coco_label_map": [265, 318], "coco_tool": [266, 319], "evaluate_squad": [267, 320], "f1": [268, 321], "mixed_precis": 271, "model_convers": 272, "na": [273, 274, 275, 276, 277, 278, 396, 458], "basic_na": 273, "dyna": 274, "nas_util": 277, "search_algorithm": 278, "pruner_legaci": [279, 280, 281, 282, 283, 284], "gradient_sensit": 279, "group_lasso": 280, "magnitud": 282, "pattern_lock": 283, "pruning_recip": [286, 287, 288, 289], "tile_pattern": 289, "pruning_v2": 290, "pytorch_prun": [291, 292, 293, 294, 295, 296, 297], "logger": [292, 385], "prune_util": 294, "auto_mixed_precis": [300, 359], "basic": [301, 360, 396, 466], "bayesian": [302, 361, 466], "exhaust": [303, 363, 466], "mse": [305, 366, 466], "mse_v2": [306, 367, 466], "random": [307, 368, 466], "constant": [309, 370, 380], "tuning_sampl": [311, 372], "tuning_spac": [312, 373], "tuning_struct": [313, 374], "mix_precis": 324, "base_model": 325, "keras_model": 327, "mxnet_model": 329, "nets_factori": 330, "onnx_model": 331, "tensorflow_model": 332, "torch_model": 333, "object": [334, 410, 453], "profil": [335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356], "parser": [336, 337, 338, 339, 340, 341, 342, 343, 344, 345], "factori": [336, 338, 343, 346, 348, 353], "onnx_pars": [338, 339, 340], "result": 342, "tensorflow_pars": [343, 344, 345], "onnxrt_profil": [348, 349, 350, 351], "tensorflow_profil": [353, 354, 355, 356], "auto": [358, 445, 451, 460, 463, 466], "conserv": [362, 466], "hawq_v2": [364, 466], "templat": [376, 377, 394], "api_doc_exampl": 376, "train": [378, 395, 413, 420, 431, 459], "collect_layer_histogram": 379, "create_obj_from_config": 381, "kl_diverg": 383, "load_huggingfac": 384, "neural_insights_util": 386, "option": [387, 420, 439], "weights_detail": 390, "version": 391, "intel": [392, 398, 427, 428, 431, 437, 445, 451, 469, 470], "neural": [392, 395, 396, 398, 427, 428, 431, 434, 438, 440, 445, 451, 456, 462, 467, 470], "compressor": [392, 395, 398, 427, 428, 431, 445, 451, 462, 470], "document": [392, 398, 403, 470], "section": [392, 470], "contributor": [393, 394], "coven": [393, 394], "code": [393, 394, 396, 431, 452, 467], "conduct": [393, 394], "our": [393, 463], "pledg": 393, "standard": 393, "respons": 393, "scope": [393, 456], "enforc": 393, "contribut": [394, 444, 448], "guidelin": 394, "pull": 394, "request": 394, "checklist": 394, "support": [394, 395, 396, 399, 414, 415, 416, 418, 419, 420, 422, 424, 427, 428, 430, 432, 433, 435, 436, 440, 441, 453, 454, 456, 458, 459, 463, 464, 465, 468], "fx": 395, "introduct": [395, 396, 399, 414, 415, 416, 418, 419, 420, 422, 424, 427, 430, 432, 433, 451, 453, 454, 456, 458, 459, 462, 463, 464, 465, 466, 468], "mode": [395, 469], "matrix": [395, 396, 399, 414, 415, 416, 418, 419, 420, 422, 424, 427, 430, 432, 433, 436, 453, 454, 456, 458, 459, 463, 464, 468], "get": [395, 396, 398, 399, 414, 415, 416, 418, 419, 420, 424, 425, 430, 432, 434, 445, 452, 453, 454, 456, 458, 459, 464, 468], "start": [395, 396, 398, 399, 414, 415, 416, 418, 419, 420, 424, 425, 430, 432, 434, 435, 439, 445, 453, 454, 456, 458, 459, 464, 468], "post": [395, 431, 459], "static": [395, 459], "dynam": [395, 396, 459], "awar": [395, 431, 459], "exampl": [395, 396, 399, 403, 414, 415, 416, 418, 419, 420, 421, 422, 431, 432, 433, 436, 440, 453, 454, 456, 459, 463, 464, 469], "note": [395, 461], "detail": 395, "problem": 395, "architectur": [396, 417, 427, 428], "search": [396, 451], "api": [396, 398, 399, 403, 404, 414, 415, 416, 418, 419, 420, 425, 426, 430, 432, 434, 438, 452, 453, 454, 456, 458, 467], "usag": [396, 440, 451, 464, 466], "1": [396, 420, 423, 426, 431, 451, 469], "python": [396, 398, 425, 430, 434, 438, 439, 446, 449, 458, 467], "yaml": [396, 415, 416, 420, 424, 468], "2": [396, 420, 423, 426, 431, 451, 469], "onli": 396, "advanc": [396, 467], "custom": [396, 430, 466], "secur": [397, 420], "polici": [397, 466], "report": 397, "vulner": 397, "instal": [398, 428, 435, 437, 444, 445, 448], "from": [398, 428, 431], "pypi": [398, 440], "select": [398, 445], "public": [398, 457], "event": [398, 457], "addit": 398, "research": 398, "collabor": 398, "work": [399, 459], "flow": [399, 459], "background": [399, 451], "ad": 399, "new": [399, 446, 449, 466], "backend": [399, 459], "capabl": 399, "implement": 399, "onnxrtadaptor": 399, "runtim": [401, 428, 432, 459, 469], "torch": [402, 469], "mix": [408, 431, 432, 460], "precis": [408, 431, 432, 460], "framework": [415, 416, 422, 424, 433, 458, 463], "file": [415, 416, 424, 468], "creat": 415, "user": [415, 416, 420, 426, 458, 467, 468], "specif": [415, 416], "design": [417, 466], "workflow": 417, "knowledg": [418, 469], "intermedi": 418, "layer": [418, 463], "self": 418, "distribut": [420, 440, 466], "infer": 420, "evalu": 420, "featur": [420, 424, 427, 440, 441, 445, 458, 459, 464, 468], "pure": 420, "configur": [420, 424, 455, 458, 462, 468], "defin": 420, "horovodrun": 420, "execut": 420, "list": [421, 465], "releas": [421, 446, 449, 461], "fp32": 422, "appendix": 422, "frequent": 423, "ask": 423, "question": 423, "build": [423, 430], "issu": [423, 461], "3": [423, 435, 451], "4": [423, 442, 451, 457], "quick": [425, 439], "sampl": 425, "jupyterlab": [425, 445], "extens": [425, 434, 444, 445, 448, 451, 452, 469], "valid": [425, 428, 463, 469], "incompat": [426, 461], "chang": [426, 450, 452, 461], "between": 426, "v1": 426, "face": 426, "built": [426, 428, 430], "infrastructur": 427, "linux": 428, "prerequisit": 428, "binari": 428, "sourc": 428, "ai": 428, "kit": 428, "window": 428, "system": [428, 455], "requir": [428, 444, 448], "hardwar": [428, 469], "environ": [428, 437], "cpu": [428, 437, 469], "base": [428, 467], "64": 428, "compat": 428, "processor": 428, "gpu": 428, "": [428, 452], "xe": 428, "multipl": [428, 453, 469], "vendor": 428, "through": [428, 469], "softwar": 428, "legal": 429, "inform": 429, "licens": 429, "citat": 429, "trademark": 429, "singl": [430, 453], "multi": 430, "migrat": 431, "x": 431, "orchestr": [431, 454], "coder": [434, 438, 440, 451, 467], "what": [434, 452], "do": 434, "we": 434, "offer": 434, "jupyt": [434, 435, 446, 449], "lab": [434, 435], "launcher": [434, 439], "contact": 434, "aw": 435, "amazon": 435, "sagemak": 435, "For": 435, "studio": 435, "notebook": 435, "instanc": 435, "guid": [435, 467], "bigdl": 436, "nano": 436, "platform": [437, 462], "best": [437, 445], "perform": [437, 462], "set": [437, 451], "mkl": 437, "openmp": 437, "jemalloc": 437, "numa": 437, "control": 437, "variabl": 437, "frequenc": 437, "govern": 437, "enabl": [438, 445, 451], "bench": 438, "superbench": 438, "argument": 439, "v0": 442, "highlight": 442, "other": 442, "changelog": [443, 447], "neural_compressor_ext_lab": [444, 446], "uninstal": [444, 448], "develop": [444, 448], "Or": 445, "let": 445, "u": 445, "help": 445, "you": 445, "pre": 445, "requisit": 445, "make": [446, 449, 452], "manual": [446, 449], "npm": [446, 449], "autom": [446, 449], "publish": [446, 449], "conda": [446, 449], "forg": [446, 449], "neural_compressor_ext_lab_alibaba": [448, 449], "log": 450, "unreleas": 450, "vscode": 451, "open": 451, "icon": 451, "5": 451, "welcom": 452, "your": 452, "v": 452, "folder": 452, "setup": 452, "up": 452, "run": 452, "straight": 452, "awai": 452, "explor": 452, "test": 452, "go": 452, "further": 452, "One": 454, "shot": 454, "network": 456, "type": 456, "sparsiti": 456, "decai": 456, "regular": 456, "spars": 456, "deploy": 456, "refer": [456, 459, 463], "full": 457, "60": 457, "2023": 457, "7": 457, "2022": 457, "34": 457, "2021": 457, "15": 457, "2018": 457, "2020": 457, "style": 458, "access": 458, "fundament": [459, 463], "scheme": 459, "ipex": 459, "approach": 459, "With": 459, "without": 459, "accuraci": [459, 466], "tune": [459, 463, 466], "specifi": 459, "rule": 459, "recip": 459, "devic": 459, "turn": 460, "off": 460, "dure": 460, "known": 461, "prepar": 462, "benefit": 462, "comparison": 462, "differ": 462, "smooth": 463, "quant": 463, "per": 463, "tensor": 463, "channel": 463, "limit": 463, "smoothquant": 463, "enhanc": 463, "wise": 463, "alpha": 463, "engin": 463, "tensorboard": 464, "space": 466, "exit": 466, "process": 466, "overview": 467, "zero": 467, "topic": 467, "11": 469, "0": 469, "13": 469, "ptq": 469, "9": 469}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"block_mask": [[0, "module-block_mask"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "Module Contents": [[1, "module-contents"], [3, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [112, "module-contents"], [114, "module-contents"], [115, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [130, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [166, "module-contents"], [168, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [174, "module-contents"], [175, "module-contents"], [176, "module-contents"], [177, "module-contents"], [178, "module-contents"], [180, "module-contents"], [181, "module-contents"], [184, "module-contents"], [185, "module-contents"], [186, "module-contents"], [187, "module-contents"], [188, "module-contents"], [189, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [194, "module-contents"], [195, "module-contents"], [196, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [200, "module-contents"], [201, "module-contents"], [203, "module-contents"], [204, "module-contents"], [205, "module-contents"], [208, "module-contents"], [209, "module-contents"], [211, "module-contents"], [212, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"], [221, "module-contents"], [222, "module-contents"], [223, "module-contents"], [225, "module-contents"], [228, "module-contents"], [229, "module-contents"], [230, "module-contents"], [232, "module-contents"], [233, "module-contents"], [235, "module-contents"], [236, "module-contents"], [237, "module-contents"], [238, "module-contents"], [239, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [244, "module-contents"], [245, "module-contents"], [247, "module-contents"], [248, "module-contents"], [249, "module-contents"], [252, "module-contents"], [254, "module-contents"], [255, "module-contents"], [256, "module-contents"], [258, "module-contents"], [259, "module-contents"], [260, "module-contents"], [261, "module-contents"], [263, "module-contents"], [264, "module-contents"], [266, "module-contents"], [267, "module-contents"], [268, "module-contents"], [270, "module-contents"], [271, "module-contents"], [272, "module-contents"], [273, "module-contents"], [274, "module-contents"], [276, "module-contents"], [277, "module-contents"], [278, "module-contents"], [279, "module-contents"], [280, "module-contents"], [282, "module-contents"], [283, "module-contents"], [284, "module-contents"], [285, "module-contents"], [288, "module-contents"], [289, "module-contents"], [290, "module-contents"], [293, "module-contents"], [294, "module-contents"], [295, "module-contents"], [296, "module-contents"], [297, "module-contents"], [298, "module-contents"], [299, "module-contents"], [300, "module-contents"], [301, "module-contents"], [302, "module-contents"], [303, "module-contents"], [305, "module-contents"], [306, "module-contents"], [307, "module-contents"], [308, "module-contents"], [311, "module-contents"], [312, "module-contents"], [313, "module-contents"], [314, "module-contents"], [316, "module-contents"], [317, "module-contents"], [319, "module-contents"], [320, "module-contents"], [321, "module-contents"], [323, "module-contents"], [324, "module-contents"], [325, "module-contents"], [327, "module-contents"], [328, "module-contents"], [329, "module-contents"], [330, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [336, "module-contents"], [338, "module-contents"], [340, "module-contents"], [341, "module-contents"], [342, "module-contents"], [343, "module-contents"], [345, "module-contents"], [346, "module-contents"], [348, "module-contents"], [350, "module-contents"], [351, "module-contents"], [352, "module-contents"], [353, "module-contents"], [355, "module-contents"], [356, "module-contents"], [357, "module-contents"], [358, "module-contents"], [359, "module-contents"], [360, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [366, "module-contents"], [367, "module-contents"], [368, "module-contents"], [369, "module-contents"], [372, "module-contents"], [373, "module-contents"], [374, "module-contents"], [375, "module-contents"], [376, "module-contents"], [378, "module-contents"], [379, "module-contents"], [381, "module-contents"], [383, "module-contents"], [384, "module-contents"], [385, "module-contents"], [386, "module-contents"], [387, "module-contents"], [388, "module-contents"], [389, "module-contents"], [390, "module-contents"]], "Classes": [[1, "classes"], [3, "classes"], [11, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [101, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [112, "classes"], [114, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [130, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [145, "classes"], [146, "classes"], [148, "classes"], [149, "classes"], [152, "classes"], [153, "classes"], [156, "classes"], [157, "classes"], [158, "classes"], [159, "classes"], [160, "classes"], [162, "classes"], [163, "classes"], [166, "classes"], [170, "classes"], [171, "classes"], [172, "classes"], [173, "classes"], [174, "classes"], [175, "classes"], [177, "classes"], [178, "classes"], [180, "classes"], [181, "classes"], [184, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [223, "classes"], [228, "classes"], [229, "classes"], [230, "classes"], [232, "classes"], [233, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [251, "classes"], [252, "classes"], [253, "classes"], [254, "classes"], [255, "classes"], [256, "classes"], [261, "classes"], [262, "classes"], [263, "classes"], [266, "classes"], [269, "classes"], [270, "classes"], [271, "classes"], [272, "classes"], [273, "classes"], [274, "classes"], [276, "classes"], [278, "classes"], [279, "classes"], [280, "classes"], [282, "classes"], [283, "classes"], [284, "classes"], [285, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [290, "classes"], [293, "classes"], [295, "classes"], [296, "classes"], [297, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [302, "classes"], [303, "classes"], [305, "classes"], [306, "classes"], [307, "classes"], [308, "classes"], [311, "classes"], [312, "classes"], [313, "classes"], [314, "classes"], [316, "classes"], [319, "classes"], [322, "classes"], [323, "classes"], [325, "classes"], [326, "classes"], [327, "classes"], [328, "classes"], [329, "classes"], [330, "classes"], [331, "classes"], [332, "classes"], [333, "classes"], [334, "classes"], [336, "classes"], [338, "classes"], [340, "classes"], [341, "classes"], [342, "classes"], [343, "classes"], [345, "classes"], [346, "classes"], [348, "classes"], [350, "classes"], [352, "classes"], [353, "classes"], [355, "classes"], [358, "classes"], [359, "classes"], [360, "classes"], [361, "classes"], [362, "classes"], [363, "classes"], [364, "classes"], [366, "classes"], [367, "classes"], [368, "classes"], [369, "classes"], [372, "classes"], [373, "classes"], [374, "classes"], [375, "classes"], [376, "classes"], [378, "classes"], [379, "classes"], [382, "classes"], [383, "classes"], [384, "classes"], [385, "classes"], [387, "classes"], [389, "classes"], [390, "classes"]], "Functions": [[1, "functions"], [13, "functions"], [16, "functions"], [34, "functions"], [42, "functions"], [43, "functions"], [44, "functions"], [66, "functions"], [67, "functions"], [69, "functions"], [103, "functions"], [104, "functions"], [115, "functions"], [117, "functions"], [147, "functions"], [148, "functions"], [149, "functions"], [153, "functions"], [154, "functions"], [155, "functions"], [156, "functions"], [158, "functions"], [161, "functions"], [163, "functions"], [166, "functions"], [168, "functions"], [170, "functions"], [172, "functions"], [173, "functions"], [174, "functions"], [175, "functions"], [176, "functions"], [178, "functions"], [187, "functions"], [188, "functions"], [196, "functions"], [198, "functions"], [202, "functions"], [205, "functions"], [206, "functions"], [207, "functions"], [210, "functions"], [212, "functions"], [213, "functions"], [214, "functions"], [215, "functions"], [217, "functions"], [219, "functions"], [220, "functions"], [222, "functions"], [225, "functions"], [232, "functions"], [240, "functions"], [242, "functions"], [246, "functions"], [249, "functions"], [250, "functions"], [251, "functions"], [253, "functions"], [254, "functions"], [255, "functions"], [258, "functions"], [259, "functions"], [260, "functions"], [263, "functions"], [264, "functions"], [266, "functions"], [267, "functions"], [268, "functions"], [269, "functions"], [270, "functions"], [277, "functions"], [284, "functions"], [288, "functions"], [293, "functions"], [294, "functions"], [295, "functions"], [297, "functions"], [302, "functions"], [308, "functions"], [312, "functions"], [314, "functions"], [316, "functions"], [317, "functions"], [319, "functions"], [320, "functions"], [321, "functions"], [322, "functions"], [323, "functions"], [324, "functions"], [328, "functions"], [332, "functions"], [334, "functions"], [351, "functions"], [356, "functions"], [357, "functions"], [361, "functions"], [369, "functions"], [373, "functions"], [375, "functions"], [376, "functions"], [378, "functions"], [381, "functions"], [382, "functions"], [384, "functions"], [385, "functions"], [386, "functions"], [388, "functions"], [389, "functions"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "Subpackages": [[2, "subpackages"], [17, "subpackages"], [86, "subpackages"], [110, "subpackages"], [111, "subpackages"], [113, "subpackages"], [165, "subpackages"], [167, "subpackages"], [182, "subpackages"], [207, "subpackages"], [226, "subpackages"], [251, "subpackages"], [262, "subpackages"], [286, "subpackages"], [304, "subpackages"], [315, "subpackages"], [365, "subpackages"]], "Submodules": [[2, "submodules"], [12, "submodules"], [17, "submodules"], [29, "submodules"], [50, "submodules"], [75, "submodules"], [86, "submodules"], [94, "submodules"], [100, "submodules"], [105, "submodules"], [110, "submodules"], [111, "submodules"], [113, "submodules"], [116, "submodules"], [129, "submodules"], [144, "submodules"], [150, "submodules"], [158, "submodules"], [164, "submodules"], [165, "submodules"], [167, "submodules"], [169, "submodules"], [179, "submodules"], [183, "submodules"], [190, "submodules"], [202, "submodules"], [206, "submodules"], [210, "submodules"], [217, "submodules"], [224, "submodules"], [227, "submodules"], [234, "submodules"], [246, "submodules"], [250, "submodules"], [253, "submodules"], [257, "submodules"], [262, "submodules"], [269, "submodules"], [275, "submodules"], [281, "submodules"], [287, "submodules"], [291, "submodules"], [304, "submodules"], [310, "submodules"], [315, "submodules"], [322, "submodules"], [326, "submodules"], [337, "submodules"], [339, "submodules"], [344, "submodules"], [347, "submodules"], [349, "submodules"], [354, "submodules"], [365, "submodules"], [371, "submodules"], [377, "submodules"], [382, "submodules"]], "Package Contents": [[2, "package-contents"], [29, "package-contents"], [158, "package-contents"], [190, "package-contents"], [202, "package-contents"], [206, "package-contents"], [207, "package-contents"], [210, "package-contents"], [217, "package-contents"], [234, "package-contents"], [246, "package-contents"], [250, "package-contents"], [251, "package-contents"], [253, "package-contents"], [262, "package-contents"], [269, "package-contents"], [281, "package-contents"], [286, "package-contents"], [287, "package-contents"], [304, "package-contents"], [322, "package-contents"], [326, "package-contents"], [365, "package-contents"], [382, "package-contents"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[44, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[45, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[46, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[110, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[139, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[141, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[142, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[147, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[148, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[149, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[150, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[151, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[152, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[153, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[154, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[155, "module-neural_compressor.adaptor.torch_utils.util"]], "neural_compressor.algorithm.algorithm": [[156, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[157, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[158, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[159, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[160, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[161, "module-neural_compressor.benchmark"]], "neural_compressor.compression.callbacks": [[162, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[163, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[164, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[165, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[166, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner": [[167, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[168, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "neural_compressor.compression.pruner.model_slim": [[169, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[170, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[171, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns": [[172, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.pruners": [[173, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.regs": [[174, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[175, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.utils": [[176, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.conf.config": [[177, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[178, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[179, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[180, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[181, "module-neural_compressor.config"]], "neural_compressor.contrib": [[182, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[183, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[184, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[185, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[186, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[187, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[188, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[189, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[190, "module-neural_compressor.data.dataloaders"]], "Attributes": [[190, "attributes"], [198, "attributes"], [207, "attributes"], [242, "attributes"], [251, "attributes"], [262, "attributes"], [286, "attributes"], [326, "attributes"], [376, "attributes"], [382, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[191, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[192, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[193, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[194, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[195, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[196, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[197, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[198, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[199, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[200, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[201, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[202, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[203, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[204, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[205, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[206, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[207, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[208, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[209, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[210, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[211, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[212, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[213, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[214, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[215, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[216, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[217, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[218, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[219, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[220, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[221, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[222, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[223, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[224, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[225, "module-neural_compressor.experimental.compression.pruning"]], "neural_compressor.experimental.contrib": [[226, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[227, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[228, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[229, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[230, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[231, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[232, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[233, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[234, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[235, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[236, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[237, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[238, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[239, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[240, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[241, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[242, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[243, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[244, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[245, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[246, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[247, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[248, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[249, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[250, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[251, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[252, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[253, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[254, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[255, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[256, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[257, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[258, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[259, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[260, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.graph_optimization": [[261, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[262, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[263, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[264, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[265, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[266, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[267, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[268, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[269, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[270, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[271, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[272, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[273, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[274, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[275, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[276, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[277, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[278, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[279, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[280, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[281, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[282, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[283, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[284, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[285, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[286, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[287, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[288, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[289, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[290, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[291, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[292, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[293, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[294, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[295, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[296, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[297, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[298, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[299, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[300, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[301, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[302, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[303, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[304, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.mse": [[305, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[306, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[307, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[308, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils.constant": [[309, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[310, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[311, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[312, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[313, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[314, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor": [[315, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[316, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[317, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[318, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[319, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[320, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[321, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[322, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[323, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[324, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[325, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[326, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[327, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[328, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[329, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[330, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[331, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[332, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[333, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[334, "module-neural_compressor.objective"]], "neural_compressor.profiling": [[335, "module-neural_compressor.profiling"]], "neural_compressor.profiling.parser.factory": [[336, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[337, "module-neural_compressor.profiling.parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[338, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[339, "module-neural_compressor.profiling.parser.onnx_parser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[340, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "neural_compressor.profiling.parser.parser": [[341, "module-neural_compressor.profiling.parser.parser"]], "neural_compressor.profiling.parser.result": [[342, "module-neural_compressor.profiling.parser.result"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[343, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[344, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[345, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "neural_compressor.profiling.profiler.factory": [[346, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[347, "module-neural_compressor.profiling.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[348, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[349, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[350, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[351, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "neural_compressor.profiling.profiler.profiler": [[352, "module-neural_compressor.profiling.profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[353, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[354, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[355, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[356, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "neural_compressor.quantization": [[357, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[358, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[359, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[360, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[361, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[362, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[363, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[364, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[365, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[366, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[367, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[368, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[369, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[370, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[371, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[372, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[373, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[374, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[375, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[376, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[377, "module-neural_compressor.template"]], "neural_compressor.training": [[378, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[379, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[380, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[381, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[382, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[383, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[384, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[385, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[386, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[387, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[388, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[389, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[390, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[391, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[392, "intel-neural-compressor-documentation"], [470, "intel-neural-compressor-documentation"]], "Sections": [[392, "sections"], [470, "sections"]], "Contributor Covenant Code of Conduct": [[393, "contributor-covenant-code-of-conduct"], [394, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[393, "our-pledge"]], "Our Standards": [[393, "our-standards"]], "Our Responsibilities": [[393, "our-responsibilities"]], "Scope": [[393, "scope"]], "Enforcement": [[393, "enforcement"]], "Attribution": [[393, "attribution"]], "Contribution Guidelines": [[394, "contribution-guidelines"]], "Pull Request Checklist": [[394, "pull-request-checklist"]], "Pull Request Template": [[394, "pull-request-template"]], "Support": [[394, "support"]], "FX": [[395, "fx"]], "Introduction": [[395, "introduction"], [396, "introduction"], [399, "introduction"], [414, "introduction"], [415, "introduction"], [416, "introduction"], [418, "introduction"], [419, "introduction"], [420, "introduction"], [422, "introduction"], [424, "introduction"], [427, "introduction"], [430, "introduction"], [432, "introduction"], [433, "introduction"], [453, "introduction"], [454, "introduction"], [456, "introduction"], [458, "introduction"], [462, "introduction"], [463, "introduction"], [464, "introduction"], [465, "introduction"], [466, "introduction"], [468, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[395, "fx-mode-support-matrix-in-neural-compressor"]], "Get Start": [[395, "get-start"]], "Post Training Static Quantization": [[395, "post-training-static-quantization"], [459, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[395, "post-training-dynamic-quantization"], [459, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[395, "quantization-aware-training"]], "Examples": [[395, "examples"], [396, "examples"], [414, "examples"], [415, "examples"], [416, "examples"], [418, "examples"], [419, "examples"], [420, "examples"], [421, "examples"], [422, "examples"], [431, "examples"], [432, "examples"], [433, "examples"], [454, "examples"], [456, "examples"], [459, "examples"], [464, "examples"]], "Note": [[395, "note"]], "Details": [[395, "details"]], "Common Problem": [[395, "common-problem"]], "Dynamic Quantization": [[395, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[395, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[396, "neural-architecture-search"]], "Basic NAS": [[396, "basic-nas"]], "Dynamic NAS": [[396, "dynamic-nas"]], "NAS Support Matrix": [[396, "nas-support-matrix"]], "Get Started with NAS API": [[396, "get-started-with-nas-api"]], "Basic Usage": [[396, "basic-usage"]], "1. Python code + YAML": [[396, "python-code-yaml"]], "2. Python code only": [[396, "python-code-only"]], "Advanced Usage (Custom NAS)": [[396, "advanced-usage-custom-nas"]], "Security Policy": [[397, "security-policy"]], "Report a Vulnerability": [[397, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[398, "intel-neural-compressor"], [451, "intel-neural-compressor"]], "Installation": [[398, "installation"], [428, "installation"], [445, "installation"]], "Install from pypi": [[398, "install-from-pypi"]], "Getting Started": [[398, "getting-started"], [425, "getting-started"]], "Quantization with Python API": [[398, "quantization-with-python-api"], [425, "quantization-with-python-api"]], "Documentation": [[398, "documentation"]], "Selected Publications/Events": [[398, "selected-publications-events"]], "Additional Content": [[398, "additional-content"]], "Research Collaborations": [[398, "research-collaborations"]], "Adaptor": [[399, "adaptor"], [400, "adaptor"]], "Adaptor Support Matrix": [[399, "adaptor-support-matrix"]], "Working Flow": [[399, "working-flow"], [459, "working-flow"]], "Get Start with Adaptor API": [[399, "get-start-with-adaptor-api"]], "Query API": [[399, "query-api"]], "Background": [[399, "background"]], "Query API Introduction": [[399, "query-api-introduction"]], "Example of Adding a New Backend Support": [[399, "example-of-adding-a-new-backend-support"]], "Capability": [[399, "capability"]], "Implement ONNXRTAdaptor Class": [[399, "implement-onnxrtadaptor-class"]], "ONNX Runtime": [[401, "onnx-runtime"], [432, "onnx-runtime"], [432, "id1"]], "Torch Utils": [[402, "torch-utils"]], "API Document Example": [[403, "api-document-example"]], "APIs": [[404, "apis"]], "Benchmark": [[405, "benchmark"], [431, "benchmark"], [458, "benchmark"]], "Compression": [[406, "compression"]], "Config": [[407, "config"]], "Mix Precision": [[408, "mix-precision"], [431, "mix-precision"]], "Model": [[409, "model"], [433, "model"]], "Objective": [[410, "objective"], [453, "objective"]], "Quantization": [[411, "quantization"], [458, "quantization"], [459, "quantization"]], "Strategy": [[412, "strategy"]], "Training": [[413, "training"]], "Benchmarking": [[414, "benchmarking"]], "Benchmark Support Matrix": [[414, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[414, "get-started-with-benchmark-api"]], "DataLoader": [[415, "dataloader"]], "Supported Framework Dataloader Matrix": [[415, "supported-framework-dataloader-matrix"]], "Get Start with Dataloader API": [[415, "get-start-with-dataloader-api"]], "Config Dataloader in a Yaml File": [[415, "config-dataloader-in-a-yaml-file"]], "Create a User-specific Dataloader": [[415, "create-a-user-specific-dataloader"]], "Dataset": [[416, "dataset"]], "Supported Framework Dataset Matrix": [[416, "supported-framework-dataset-matrix"]], "TensorFlow": [[416, "tensorflow"], [430, "tensorflow"], [432, "tensorflow"], [465, "tensorflow"]], "PyTorch": [[416, "pytorch"], [430, "pytorch"], [432, "pytorch"], [460, "pytorch"]], "MXNet": [[416, "mxnet"], [430, "mxnet"], [465, "mxnet"]], "ONNXRT": [[416, "onnxrt"], [430, "onnxrt"], [465, "onnxrt"]], "Get start with Dataset API": [[416, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[416, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[416, "user-specific-dataset"]], "Design": [[417, "design"], [466, "design"], [466, "id1"], [466, "id3"], [466, "id5"], [466, "id7"], [466, "id9"], [466, "id11"], [466, "id13"], [466, "id15"], [466, "id17"], [466, "id19"], [466, "id21"]], "Architecture": [[417, "architecture"], [427, "architecture"]], "Workflow": [[417, "workflow"]], "Distillation": [[418, "distillation"], [431, "distillation"], [458, "distillation"]], "Knowledge Distillation": [[418, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[418, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[418, "self-distillation"]], "Distillation Support Matrix": [[418, "distillation-support-matrix"]], "Get Started with Distillation API": [[418, "get-started-with-distillation-api"]], "Distillation for Quantization": [[419, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[419, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[419, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[420, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[420, "supported-feature-matrix"], [424, "supported-feature-matrix"], [427, "supported-feature-matrix"], [458, "supported-feature-matrix"], [459, "supported-feature-matrix"], [464, "supported-feature-matrix"], [468, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[420, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[420, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[420, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[420, "horovodrun-execution"]], "Security": [[420, "security"]], "PyTorch Examples:": [[420, "pytorch-examples"]], "TensorFlow Examples:": [[420, "tensorflow-examples"]], "Example List": [[421, "example-list"]], "Release Data": [[421, "release-data"]], "Export": [[422, "export"]], "Supported Framework Model Matrix": [[422, "supported-framework-model-matrix"], [433, "supported-framework-model-matrix"]], "PyTorch Model": [[422, "pytorch-model"]], "FP32 Model Export": [[422, "fp32-model-export"], [422, "id1"]], "INT8 Model Export": [[422, "int8-model-export"], [422, "id2"]], "Tensorflow Model": [[422, "tensorflow-model"]], "Appendix": [[422, "appendix"]], "Supported quantized ops": [[422, "supported-quantized-ops"]], "Frequently Asked Questions": [[423, "frequently-asked-questions"]], "Common Build Issues": [[423, "common-build-issues"]], "Issue 1:": [[423, "issue-1"]], "Issue 2:": [[423, "issue-2"]], "Issue 3:": [[423, "issue-3"]], "Issue 4:": [[423, "issue-4"]], "Framework YAML Configuration Files": [[424, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[424, "get-started-with-framework-yaml-files"]], "Quick Samples": [[425, "quick-samples"]], "Quantization with JupyterLab Extension": [[425, "quantization-with-jupyterlab-extension"]], "Validated Models": [[425, "validated-models"], [463, "validated-models"], [469, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[426, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[426, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[426, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[427, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[428, "linux-installation"]], "Prerequisites": [[428, "prerequisites"], [428, "id1"]], "Install from Binary": [[428, "install-from-binary"], [428, "id2"]], "Install from Source": [[428, "install-from-source"], [428, "id3"]], "Install from AI Kit": [[428, "install-from-ai-kit"]], "Windows Installation": [[428, "windows-installation"]], "System Requirements": [[428, "system-requirements"]], "Validated Hardware Environment": [[428, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[428, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[428, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[428, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[428, "validated-software-environment"]], "Legal Information": [[429, "legal-information"]], "License": [[429, "license"]], "Citation": [[429, "citation"]], "Trademarks": [[429, "trademarks"]], "Metrics": [[430, "metrics"]], "Supported Built-in Metric Matrix": [[430, "supported-built-in-metric-matrix"]], "Get Start with Metrics": [[430, "get-start-with-metrics"]], "Support Single-metric and Multi-metrics": [[430, "support-single-metric-and-multi-metrics"]], "Build Custom Metric with Python API": [[430, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[431, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[431, "model-quantization"]], "Post-training Quantization": [[431, "post-training-quantization"]], "Quantization Aware Training": [[431, "quantization-aware-training"], [459, "quantization-aware-training"], [459, "id1"]], "Pruning": [[431, "pruning"], [456, "pruning"], [458, "pruning"]], "Orchestration": [[431, "orchestration"]], "Mixed Precision": [[432, "mixed-precision"]], "Mixed Precision Support Matrix": [[432, "mixed-precision-support-matrix"]], "Get Started with Mixed Precision API": [[432, "get-started-with-mixed-precision-api"]], "Neural Coder": [[434, "neural-coder"], [451, "neural-coder"], [451, "id1"]], "What do we offer?": [[434, "what-do-we-offer"]], "Getting Started!": [[434, "getting-started"], [445, "getting-started"]], "Jupyter Lab Extension": [[434, "jupyter-lab-extension"]], "Python Launcher": [[434, "python-launcher"], [439, "python-launcher"]], "Python API": [[434, "python-api"]], "Contact": [[434, "contact"]], "AWS Amazon SageMaker Support": [[435, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[435, "start-jupyter-lab-3"]], "For SageMaker Studio": [[435, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[435, "for-sagemaker-notebook-instance"]], "Installation Guide": [[435, "installation-guide"]], "BigDL Nano Support": [[436, "bigdl-nano-support"]], "Example": [[436, "example"], [440, "example"], [453, "example"], [463, "example"]], "Support Matrix": [[436, "support-matrix"]], "Intel CPU Platforms: Best Performance Setting": [[437, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[437, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[437, "install-numa-controller"]], "Environment Variables": [[437, "environment-variables"]], "Frequency Governers": [[437, "frequency-governers"]], "Neural Coder as Python API": [[438, "neural-coder-as-python-api"]], "Enable": [[438, "enable"]], "Bench": [[438, "bench"]], "SuperBench": [[438, "superbench"]], "Quick-Start": [[439, "quick-start"]], "Launcher Arguments (Optional)": [[439, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[440, "neural-coder-for-quantization"]], "Features Supported": [[440, "features-supported"]], "Models Supported": [[440, "models-supported"]], "Usage": [[440, "usage"], [464, "usage"], [464, "id1"], [466, "usage"], [466, "id2"], [466, "id4"], [466, "id6"], [466, "id8"], [466, "id10"], [466, "id12"], [466, "id14"], [466, "id16"], [466, "id18"], [466, "id20"], [466, "id22"]], "PyPI distribution:": [[440, "pypi-distribution"]], "Supported Optimization Features": [[441, "supported-optimization-features"]], "v0.4": [[442, "v0-4"]], "Highlights": [[442, "highlights"]], "Others": [[442, "others"]], "Changelog": [[443, "changelog"], [447, "changelog"]], "neural_compressor_ext_lab": [[444, "neural-compressor-ext-lab"]], "Requirements": [[444, "requirements"], [448, "requirements"]], "Install": [[444, "install"], [448, "install"]], "Uninstall": [[444, "uninstall"], [448, "uninstall"]], "Contributing": [[444, "contributing"], [448, "contributing"]], "Development install": [[444, "development-install"], [448, "development-install"]], "Development uninstall": [[444, "development-uninstall"], [448, "development-uninstall"]], "Packaging the extension": [[444, "packaging-the-extension"], [448, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[445, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[445, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[445, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[445, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[446, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[446, "manual-release"], [449, "manual-release"]], "Python package": [[446, "python-package"], [449, "python-package"]], "NPM package": [[446, "npm-package"], [449, "npm-package"]], "Automated releases with the Jupyter Releaser": [[446, "automated-releases-with-the-jupyter-releaser"], [449, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[446, "publishing-to-conda-forge"], [449, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[448, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[449, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[450, "change-log"]], "[Unreleased]": [[450, "unreleased"]], "Background Introduction": [[451, "background-introduction"]], "Neural Coder Extension in VSCode": [[451, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[451, "neural-coder-extension-usage"]], "1. Open": [[451, "open"]], "2. Search": [[451, "search"]], "3. Setting": [[451, "setting"]], "4. Icon": [[451, "icon"]], "5. optimization (quantization)": [[451, "optimization-quantization"]], "5.1 Enable": [[451, "enable"]], "5.2 Auto": [[451, "auto"]], "Welcome to your VS Code Extension": [[452, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[452, "what-s-in-the-folder"]], "Setup": [[452, "setup"]], "Get up and running straight away": [[452, "get-up-and-running-straight-away"]], "Make changes": [[452, "make-changes"]], "Explore the API": [[452, "explore-the-api"]], "Run tests": [[452, "run-tests"]], "Go further": [[452, "go-further"]], "Single Objective": [[453, "single-objective"]], "Multiple Objectives": [[453, "multiple-objectives"]], "Objective Support Matrix": [[453, "objective-support-matrix"]], "Get Started with Objective API": [[453, "get-started-with-objective-api"]], "Config Single Objective": [[453, "config-single-objective"]], "Config Multiple Objectives": [[453, "config-multiple-objectives"]], "Optimization Orchestration": [[454, "optimization-orchestration"]], "One-shot": [[454, "one-shot"]], "Orchestration Support Matrix": [[454, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[454, "get-started-with-orchestration-api"]], "SYSTEM CONFIGURATION": [[455, "system-configuration"]], "Neural Network Pruning": [[456, "neural-network-pruning"]], "Pruning Patterns": [[456, "pruning-patterns"]], "Pruning Criteria": [[456, "pruning-criteria"]], "Pruning Types": [[456, "pruning-types"]], "Pruning Schedules": [[456, "pruning-schedules"]], "Pruning Scope": [[456, "pruning-scope"]], "Sparsity Decay Types": [[456, "sparsity-decay-types"]], "Regularization": [[456, "regularization"]], "Pruning Support Matrix": [[456, "pruning-support-matrix"]], "Get Started with Pruning API": [[456, "get-started-with-pruning-api"]], "Sparse Model Deployment": [[456, "sparse-model-deployment"]], "Reference": [[456, "reference"], [459, "reference"], [463, "reference"]], "Full Publications/Events (60)": [[457, "full-publications-events-60"]], "2023 (7)": [[457, "id1"]], "2022 (34)": [[457, "id2"]], "2021 (15)": [[457, "id3"]], "2018 - 2020 (4)": [[457, "id4"]], "Pythonic Style Access for Configurations": [[458, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[458, "pythonic-api-for-user-configurations"], [458, "id1"]], "Pythonic API for Framework Configurations": [[458, "pythonic-api-for-framework-configurations"], [458, "id2"]], "Get Started with Pythonic API for Configurations": [[458, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[458, "nas"]], "Quantization Introduction": [[459, "quantization-introduction"]], "Quantization Fundamentals": [[459, "quantization-fundamentals"], [463, "quantization-fundamentals"]], "Quantization Support Matrix": [[459, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[459, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[459, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[459, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[459, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[459, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[459, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[459, "with-or-without-accuracy-aware-tuning"]], "Get Started": [[459, "get-started"]], "Post Training Quantization": [[459, "post-training-quantization"]], "Specify Quantization Rules": [[459, "specify-quantization-rules"]], "Specify Quantization Recipes": [[459, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[459, "specify-quantization-backend-and-device"]], "Turn OFF Auto Mixed Precision during Quantization": [[460, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[460, "tensorflow"]], "Release": [[461, "release"]], "Release Notes": [[461, "release-notes"]], "Known Issues": [[461, "known-issues"]], "Incompatible Changes": [[461, "incompatible-changes"]], "SigOpt Strategy": [[462, "sigopt-strategy"]], "Preparation": [[462, "preparation"]], "SigOpt Platform": [[462, "sigopt-platform"]], "Neural Compressor Configuration": [[462, "neural-compressor-configuration"]], "Performance": [[462, "performance"]], "Benefit of SigOpt Strategy": [[462, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[462, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[463, "smooth-quant"]], "Per-tensor & Per-channel": [[463, "per-tensor-per-channel"]], "Per-tensor example": [[463, "per-tensor-example"]], "Per-channel example": [[463, "per-channel-example"]], "Matmul quantization example": [[463, "matmul-quantization-example"]], "Per-channel limitation": [[463, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[463, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[463, "smoothquant"]], "Our enhancement:": [[463, "our-enhancement"]], "Algorithm: Layer-wise Auto-tuning of $\\alpha$.": [[463, "algorithm-layer-wise-auto-tuning-of-alpha"]], "Engineering": [[463, "engineering"]], "Supported Framework Matrix": [[463, "supported-framework-matrix"]], "TensorBoard": [[464, "tensorboard"]], "Get Started with TensorBoard": [[464, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[464, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[464, "tensorflow-tensorboard"]], "PyTorch Examples": [[464, "pytorch-examples"]], "TensorFlow Examples": [[464, "tensorflow-examples"]], "Transform": [[465, "transform"]], "Transform Support List": [[465, "transform-support-list"]], "Pytorch": [[465, "pytorch"]], "Tuning Strategies": [[466, "tuning-strategies"]], "Strategy Design": [[466, "strategy-design"]], "Tuning Space": [[466, "tuning-space"]], "Exit Policy": [[466, "exit-policy"]], "Accuracy Criteria": [[466, "accuracy-criteria"]], "Tuning Process": [[466, "tuning-process"]], "Tuning Algorithms": [[466, "tuning-algorithms"]], "Auto": [[466, "auto"]], "Conservative Tuning": [[466, "conservative-tuning"]], "Basic": [[466, "basic"]], "MSE": [[466, "mse"]], "MSE_V2": [[466, "mse-v2"]], "HAWQ_V2": [[466, "hawq-v2"]], "Bayesian": [[466, "bayesian"]], "Exhaustive": [[466, "exhaustive"]], "Random": [[466, "random"]], "SigOpt": [[466, "sigopt"]], "TPE": [[466, "tpe"]], "Distributed Tuning": [[466, "distributed-tuning"]], "Customize a New Tuning Strategy": [[466, "customize-a-new-tuning-strategy"]], "User Guide": [[467, "user-guide"]], "Overview": [[467, "overview"]], "Python-based APIs": [[467, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[467, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[467, "advanced-topics"]], "User YAML Configuration Files": [[468, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[468, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[469, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.11.0": [[469, "tensorflow-models-with-intel-tensorflow-2-11-0"]], "PyTorch Models with Torch 1.13.0+cpu in PTQ Mode": [[469, "pytorch-models-with-torch-1-13-0-cpu-in-ptq-mode"]], "PyTorch Models with Torch 1.13.0+cpu in QAT Mode": [[469, "pytorch-models-with-torch-1-13-0-cpu-in-qat-mode"]], "PyTorch Models with Torch and Intel\u00ae Extension for PyTorch* 1.13.0+cpu": [[469, "pytorch-models-with-torch-and-intel-extension-for-pytorch-1-13-0-cpu"]], "ONNX Models with ONNX Runtime 1.13.1": [[469, "onnx-models-with-onnx-runtime-1-13-1"]], "MXNet Models with MXNet 1.9.1": [[469, "mxnet-models-with-mxnet-1-9-1"]], "Validated Pruning Examples": [[469, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[469, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[469, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"block_mask": [[0, "module-block_mask"]], "module": [[0, "module-block_mask"], [1, "module-neural_compressor.adaptor.adaptor"], [2, "module-neural_compressor.adaptor"], [3, "module-neural_compressor.adaptor.keras"], [4, "module-neural_compressor.adaptor.keras_utils.conv2d"], [5, "module-neural_compressor.adaptor.keras_utils.dense"], [6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"], [7, "module-neural_compressor.adaptor.keras_utils"], [8, "module-neural_compressor.adaptor.keras_utils.pool2d"], [9, "module-neural_compressor.adaptor.keras_utils.quantizer"], [10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"], [11, "module-neural_compressor.adaptor.mxnet"], [12, "module-neural_compressor.adaptor.mxnet_utils"], [13, "module-neural_compressor.adaptor.mxnet_utils.util"], [14, "module-neural_compressor.adaptor.onnxrt"], [15, "module-neural_compressor.adaptor.ox_utils.calibration"], [16, "module-neural_compressor.adaptor.ox_utils.calibrator"], [17, "module-neural_compressor.adaptor.ox_utils"], [18, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [20, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [22, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [23, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [26, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [29, "module-neural_compressor.adaptor.ox_utils.operators"], [30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [33, "module-neural_compressor.adaptor.ox_utils.operators.norm"], [34, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [35, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"], [38, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [39, "module-neural_compressor.adaptor.ox_utils.operators.split"], [40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"], [41, "module-neural_compressor.adaptor.ox_utils.quantizer"], [42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"], [43, "module-neural_compressor.adaptor.ox_utils.util"], [44, "module-neural_compressor.adaptor.pytorch"], [45, "module-neural_compressor.adaptor.query"], [46, "module-neural_compressor.adaptor.tensorflow"], [47, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [109, "module-neural_compressor.adaptor.tf_utils.graph_util"], [110, "module-neural_compressor.adaptor.tf_utils"], [111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [139, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"], [140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"], [141, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [142, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [143, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [144, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [145, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [146, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [147, "module-neural_compressor.adaptor.tf_utils.util"], [148, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [149, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [150, "module-neural_compressor.adaptor.torch_utils"], [151, "module-neural_compressor.adaptor.torch_utils.model_wrapper"], [152, "module-neural_compressor.adaptor.torch_utils.pattern_detector"], [153, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [154, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [155, "module-neural_compressor.adaptor.torch_utils.util"], [156, "module-neural_compressor.algorithm.algorithm"], [157, "module-neural_compressor.algorithm.fast_bias_correction"], [158, "module-neural_compressor.algorithm"], [159, "module-neural_compressor.algorithm.smooth_quant"], [160, "module-neural_compressor.algorithm.weight_correction"], [161, "module-neural_compressor.benchmark"], [162, "module-neural_compressor.compression.callbacks"], [163, "module-neural_compressor.compression.distillation.criterions"], [164, "module-neural_compressor.compression.distillation"], [165, "module-neural_compressor.compression"], [166, "module-neural_compressor.compression.pruner.criteria"], [167, "module-neural_compressor.compression.pruner"], [168, "module-neural_compressor.compression.pruner.model_slim.auto_slim"], [169, "module-neural_compressor.compression.pruner.model_slim"], [170, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"], [171, "module-neural_compressor.compression.pruner.model_slim.weight_slim"], [172, "module-neural_compressor.compression.pruner.patterns"], [173, "module-neural_compressor.compression.pruner.pruners"], [174, "module-neural_compressor.compression.pruner.regs"], [175, "module-neural_compressor.compression.pruner.schedulers"], [176, "module-neural_compressor.compression.pruner.utils"], [177, "module-neural_compressor.conf.config"], [178, "module-neural_compressor.conf.dotdict"], [179, "module-neural_compressor.conf"], [180, "module-neural_compressor.conf.pythonic_config"], [181, "module-neural_compressor.config"], [182, "module-neural_compressor.contrib"], [183, "module-neural_compressor.contrib.strategy"], [184, "module-neural_compressor.contrib.strategy.sigopt"], [185, "module-neural_compressor.contrib.strategy.tpe"], [186, "module-neural_compressor.data.dataloaders.base_dataloader"], [187, "module-neural_compressor.data.dataloaders.dataloader"], [188, "module-neural_compressor.data.dataloaders.default_dataloader"], [189, "module-neural_compressor.data.dataloaders.fetcher"], [190, "module-neural_compressor.data.dataloaders"], [191, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [192, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [193, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [194, "module-neural_compressor.data.dataloaders.sampler"], [195, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [196, "module-neural_compressor.data.datasets.bert_dataset"], [197, "module-neural_compressor.data.datasets.coco_dataset"], [198, "module-neural_compressor.data.datasets.dataset"], [199, "module-neural_compressor.data.datasets.dummy_dataset"], [200, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [201, "module-neural_compressor.data.datasets.imagenet_dataset"], [202, "module-neural_compressor.data.datasets"], [203, "module-neural_compressor.data.datasets.style_transfer_dataset"], [204, "module-neural_compressor.data.filters.coco_filter"], [205, "module-neural_compressor.data.filters.filter"], [206, "module-neural_compressor.data.filters"], [207, "module-neural_compressor.data"], [208, "module-neural_compressor.data.transforms.coco_transform"], [209, "module-neural_compressor.data.transforms.imagenet_transform"], [210, "module-neural_compressor.data.transforms"], [211, "module-neural_compressor.data.transforms.postprocess"], [212, "module-neural_compressor.data.transforms.tokenization"], [213, "module-neural_compressor.data.transforms.transform"], [214, "module-neural_compressor.experimental.benchmark"], [215, "module-neural_compressor.experimental.common.criterion"], [216, "module-neural_compressor.experimental.common.dataloader"], [217, "module-neural_compressor.experimental.common"], [218, "module-neural_compressor.experimental.common.metric"], [219, "module-neural_compressor.experimental.common.model"], [220, "module-neural_compressor.experimental.common.optimizer"], [221, "module-neural_compressor.experimental.common.postprocess"], [222, "module-neural_compressor.experimental.common.torch_utils"], [223, "module-neural_compressor.experimental.component"], [224, "module-neural_compressor.experimental.compression"], [225, "module-neural_compressor.experimental.compression.pruning"], [226, "module-neural_compressor.experimental.contrib"], [227, "module-neural_compressor.experimental.contrib.strategy"], [228, "module-neural_compressor.experimental.contrib.strategy.sigopt"], [229, "module-neural_compressor.experimental.contrib.strategy.tpe"], [230, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [231, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [232, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [233, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [234, "module-neural_compressor.experimental.data.dataloaders"], [235, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [236, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [237, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [238, "module-neural_compressor.experimental.data.dataloaders.sampler"], [239, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [240, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [241, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [242, "module-neural_compressor.experimental.data.datasets.dataset"], [243, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [244, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [245, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [246, "module-neural_compressor.experimental.data.datasets"], [247, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [248, "module-neural_compressor.experimental.data.filters.coco_filter"], [249, "module-neural_compressor.experimental.data.filters.filter"], [250, "module-neural_compressor.experimental.data.filters"], [251, "module-neural_compressor.experimental.data"], [252, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [253, "module-neural_compressor.experimental.data.transforms"], [254, "module-neural_compressor.experimental.data.transforms.tokenization"], [255, "module-neural_compressor.experimental.data.transforms.transform"], [256, "module-neural_compressor.experimental.distillation"], [257, "module-neural_compressor.experimental.export"], [258, "module-neural_compressor.experimental.export.qlinear2qdq"], [259, "module-neural_compressor.experimental.export.tf2onnx"], [260, "module-neural_compressor.experimental.export.torch2onnx"], [261, "module-neural_compressor.experimental.graph_optimization"], [262, "module-neural_compressor.experimental"], [263, "module-neural_compressor.experimental.metric.bleu"], [264, "module-neural_compressor.experimental.metric.bleu_util"], [265, "module-neural_compressor.experimental.metric.coco_label_map"], [266, "module-neural_compressor.experimental.metric.coco_tools"], [267, "module-neural_compressor.experimental.metric.evaluate_squad"], [268, "module-neural_compressor.experimental.metric.f1"], [269, "module-neural_compressor.experimental.metric"], [270, "module-neural_compressor.experimental.metric.metric"], [271, "module-neural_compressor.experimental.mixed_precision"], [272, "module-neural_compressor.experimental.model_conversion"], [273, "module-neural_compressor.experimental.nas.basic_nas"], [274, "module-neural_compressor.experimental.nas.dynas"], [275, "module-neural_compressor.experimental.nas"], [276, "module-neural_compressor.experimental.nas.nas"], [277, "module-neural_compressor.experimental.nas.nas_utils"], [278, "module-neural_compressor.experimental.nas.search_algorithms"], [279, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [280, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [281, "module-neural_compressor.experimental.pruner_legacy"], [282, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [283, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [284, "module-neural_compressor.experimental.pruner_legacy.pruner"], [285, "module-neural_compressor.experimental.pruning"], [286, "module-neural_compressor.experimental.pruning_recipes"], [287, "module-neural_compressor.experimental.pruning_recipes.patterns"], [288, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [289, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [290, "module-neural_compressor.experimental.pruning_v2"], [291, "module-neural_compressor.experimental.pytorch_pruner"], [292, "module-neural_compressor.experimental.pytorch_pruner.logger"], [293, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [294, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [295, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [296, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [297, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [298, "module-neural_compressor.experimental.quantization"], [299, "module-neural_compressor.experimental.scheduler"], [300, "module-neural_compressor.experimental.strategy.auto_mixed_precision"], [301, "module-neural_compressor.experimental.strategy.basic"], [302, "module-neural_compressor.experimental.strategy.bayesian"], [303, "module-neural_compressor.experimental.strategy.exhaustive"], [304, "module-neural_compressor.experimental.strategy"], [305, "module-neural_compressor.experimental.strategy.mse"], [306, "module-neural_compressor.experimental.strategy.mse_v2"], [307, "module-neural_compressor.experimental.strategy.random"], [308, "module-neural_compressor.experimental.strategy.strategy"], [309, "module-neural_compressor.experimental.strategy.utils.constant"], [310, "module-neural_compressor.experimental.strategy.utils"], [311, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"], [312, "module-neural_compressor.experimental.strategy.utils.tuning_space"], [313, "module-neural_compressor.experimental.strategy.utils.tuning_structs"], [314, "module-neural_compressor.experimental.strategy.utils.utility"], [315, "module-neural_compressor"], [316, "module-neural_compressor.metric.bleu"], [317, "module-neural_compressor.metric.bleu_util"], [318, "module-neural_compressor.metric.coco_label_map"], [319, "module-neural_compressor.metric.coco_tools"], [320, "module-neural_compressor.metric.evaluate_squad"], [321, "module-neural_compressor.metric.f1"], [322, "module-neural_compressor.metric"], [323, "module-neural_compressor.metric.metric"], [324, "module-neural_compressor.mix_precision"], [325, "module-neural_compressor.model.base_model"], [326, "module-neural_compressor.model"], [327, "module-neural_compressor.model.keras_model"], [328, "module-neural_compressor.model.model"], [329, "module-neural_compressor.model.mxnet_model"], [330, "module-neural_compressor.model.nets_factory"], [331, "module-neural_compressor.model.onnx_model"], [332, "module-neural_compressor.model.tensorflow_model"], [333, "module-neural_compressor.model.torch_model"], [334, "module-neural_compressor.objective"], [335, "module-neural_compressor.profiling"], [336, "module-neural_compressor.profiling.parser.factory"], [337, "module-neural_compressor.profiling.parser"], [338, "module-neural_compressor.profiling.parser.onnx_parser.factory"], [339, "module-neural_compressor.profiling.parser.onnx_parser"], [340, "module-neural_compressor.profiling.parser.onnx_parser.parser"], [341, "module-neural_compressor.profiling.parser.parser"], [342, "module-neural_compressor.profiling.parser.result"], [343, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"], [344, "module-neural_compressor.profiling.parser.tensorflow_parser"], [345, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"], [346, "module-neural_compressor.profiling.profiler.factory"], [347, "module-neural_compressor.profiling.profiler"], [348, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"], [349, "module-neural_compressor.profiling.profiler.onnxrt_profiler"], [350, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"], [351, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"], [352, "module-neural_compressor.profiling.profiler.profiler"], [353, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"], [354, "module-neural_compressor.profiling.profiler.tensorflow_profiler"], [355, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"], [356, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"], [357, "module-neural_compressor.quantization"], [358, "module-neural_compressor.strategy.auto"], [359, "module-neural_compressor.strategy.auto_mixed_precision"], [360, "module-neural_compressor.strategy.basic"], [361, "module-neural_compressor.strategy.bayesian"], [362, "module-neural_compressor.strategy.conservative"], [363, "module-neural_compressor.strategy.exhaustive"], [364, "module-neural_compressor.strategy.hawq_v2"], [365, "module-neural_compressor.strategy"], [366, "module-neural_compressor.strategy.mse"], [367, "module-neural_compressor.strategy.mse_v2"], [368, "module-neural_compressor.strategy.random"], [369, "module-neural_compressor.strategy.strategy"], [370, "module-neural_compressor.strategy.utils.constant"], [371, "module-neural_compressor.strategy.utils"], [372, "module-neural_compressor.strategy.utils.tuning_sampler"], [373, "module-neural_compressor.strategy.utils.tuning_space"], [374, "module-neural_compressor.strategy.utils.tuning_structs"], [375, "module-neural_compressor.strategy.utils.utility"], [376, "module-neural_compressor.template.api_doc_example"], [377, "module-neural_compressor.template"], [378, "module-neural_compressor.training"], [379, "module-neural_compressor.utils.collect_layer_histogram"], [380, "module-neural_compressor.utils.constant"], [381, "module-neural_compressor.utils.create_obj_from_config"], [382, "module-neural_compressor.utils"], [383, "module-neural_compressor.utils.kl_divergence"], [384, "module-neural_compressor.utils.load_huggingface"], [385, "module-neural_compressor.utils.logger"], [386, "module-neural_compressor.utils.neural_insights_utils"], [387, "module-neural_compressor.utils.options"], [388, "module-neural_compressor.utils.pytorch"], [389, "module-neural_compressor.utils.utility"], [390, "module-neural_compressor.utils.weights_details"], [391, "module-neural_compressor.version"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasAdaptor"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase"]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector"]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator"]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator"]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator"]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "float16activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.Float16ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "float16binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.Float16BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[30, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "fusedmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.FusedMatMulOperator"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "batchnormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.BatchNormalizationOperator"]], "normalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "reduceoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "unaryoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[41, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "ortsmoothquant (class in neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.ORTSmoothQuant"]], "get_quant_dequant_output() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.get_quant_dequant_output"]], "make_sub_graph() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.make_sub_graph"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "quant_dequant_data() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.quant_dequant_data"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "neural_compressor.adaptor.pytorch": [[44, "module-neural_compressor.adaptor.pytorch"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[45, "neural_compressor.adaptor.query.QueryBackendCapability"]], "neural_compressor.adaptor.query": [[45, "module-neural_compressor.adaptor.query"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow": [[46, "module-neural_compressor.adaptor.tensorflow"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[47, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[48, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[49, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[109, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[109, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[110, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "smoothquantcalibration (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[139, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[139, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "smoothquantscaler (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[140, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScaler"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[141, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[141, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[142, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[142, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[143, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[145, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[146, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "get_weight_from_input_tensor() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_weight_from_input_tensor"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[147, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[148, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[148, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[148, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[148, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[149, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[149, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[149, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[149, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[149, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[150, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[151, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.adaptor.torch_utils.pattern_detector)": [[152, "neural_compressor.adaptor.torch_utils.pattern_detector.TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[152, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "graphtrace (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[153, "neural_compressor.adaptor.torch_utils.smooth_quant.GraphTrace"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[153, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "get_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[153, "neural_compressor.adaptor.torch_utils.smooth_quant.get_module"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[153, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "set_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[153, "neural_compressor.adaptor.torch_utils.smooth_quant.set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[154, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[154, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[154, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[155, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[155, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[155, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[155, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[155, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[155, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[155, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[155, "neural_compressor.adaptor.torch_utils.util.get_depth"]], "get_dict_at_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[155, "neural_compressor.adaptor.torch_utils.util.get_dict_at_depth"]], "get_element_under_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[155, "neural_compressor.adaptor.torch_utils.util.get_element_under_depth"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[155, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[155, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[155, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[155, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[155, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_op_type_by_name() (in module neural_compressor.adaptor.torch_utils.util)": [[155, "neural_compressor.adaptor.torch_utils.util.get_op_type_by_name"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[155, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[155, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[155, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[155, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[155, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern"]], "neural_compressor.adaptor.torch_utils.util": [[155, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[155, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[155, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[155, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.util)": [[155, "neural_compressor.adaptor.torch_utils.util.update_sq_scale"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[156, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[156, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[156, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[156, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[156, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[157, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[157, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[158, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[159, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[159, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[160, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[160, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[161, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[161, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[161, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[161, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[161, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[161, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[161, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[161, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[161, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[161, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[161, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[161, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[161, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[161, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[161, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[161, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[161, "neural_compressor.benchmark.summary_benchmark"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[162, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[162, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[162, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[162, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[162, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[162, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[162, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[162, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "neural_compressor.compression.callbacks": [[162, "module-neural_compressor.compression.callbacks"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[163, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[163, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[163, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[163, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[163, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[163, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[163, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[163, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[163, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[163, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[163, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[163, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[163, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[163, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[163, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[163, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[163, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "neural_compressor.compression.distillation.criterions": [[163, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[164, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[165, "module-neural_compressor.compression"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[166, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[166, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[166, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[166, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[166, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumblockcriterion (class in neural_compressor.compression.pruner.criteria)": [[166, "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[166, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[166, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[166, "module-neural_compressor.compression.pruner.criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[166, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[166, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[166, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[166, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[166, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[166, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumblockcriterion attribute)": [[166, "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[166, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.compression.pruner": [[167, "module-neural_compressor.compression.pruner"]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[168, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_ffn2_pruning_config"]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[168, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_mha_pruning_config"]], "model_slim() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[168, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim"]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[168, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_ffn2"]], "model_slim_mha() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[168, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_mha"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[168, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[168, "neural_compressor.compression.pruner.model_slim.auto_slim.parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim": [[169, "module-neural_compressor.compression.pruner.model_slim"]], "classifierheadsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[170, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher"]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[170, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher"]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[170, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher"]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[170, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher"]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[170, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[170, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[170, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[170, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[170, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[170, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[170, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[170, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[170, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[170, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph"]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[170, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes"]], "get_common_module() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[170, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_common_module"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[170, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[170, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[170, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[170, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[170, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[170, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "print_iterables() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[170, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.print_iterables"]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[170, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[170, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[170, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[170, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[170, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[170, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[170, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[170, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[170, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[170, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[170, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut"]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[170, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets"]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[171, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression"]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[171, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator"]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[171, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils"]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[171, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device"]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[171, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1"]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[171, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2"]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[171, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[171, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "basepattern (class in neural_compressor.compression.pruner.patterns)": [[172, "neural_compressor.compression.pruner.patterns.BasePattern"]], "m (neural_compressor.compression.pruner.patterns.patternmha attribute)": [[172, "neural_compressor.compression.pruner.patterns.PatternMHA.M"]], "m (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[172, "neural_compressor.compression.pruner.patterns.PatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.patternmha attribute)": [[172, "neural_compressor.compression.pruner.patterns.PatternMHA.N"]], "n (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[172, "neural_compressor.compression.pruner.patterns.PatternNInM.N"]], "patternmha (class in neural_compressor.compression.pruner.patterns)": [[172, "neural_compressor.compression.pruner.patterns.PatternMHA"]], "patternninm (class in neural_compressor.compression.pruner.patterns)": [[172, "neural_compressor.compression.pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.compression.pruner.patterns)": [[172, "neural_compressor.compression.pruner.patterns.PatternNxM"]], "block_size (neural_compressor.compression.pruner.patterns.patternnxm attribute)": [[172, "neural_compressor.compression.pruner.patterns.PatternNxM.block_size"]], "config (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[172, "neural_compressor.compression.pruner.patterns.BasePattern.config"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[172, "neural_compressor.compression.pruner.patterns.get_pattern"]], "invalid_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[172, "neural_compressor.compression.pruner.patterns.BasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[172, "neural_compressor.compression.pruner.patterns.BasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[172, "neural_compressor.compression.pruner.patterns.BasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[172, "neural_compressor.compression.pruner.patterns.BasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[172, "neural_compressor.compression.pruner.patterns.BasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[172, "neural_compressor.compression.pruner.patterns.BasePattern.modules"]], "neural_compressor.compression.pruner.patterns": [[172, "module-neural_compressor.compression.pruner.patterns"]], "pattern (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[172, "neural_compressor.compression.pruner.patterns.BasePattern.pattern"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns)": [[172, "neural_compressor.compression.pruner.patterns.register_pattern"]], "target_sparsity (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[172, "neural_compressor.compression.pruner.patterns.BasePattern.target_sparsity"]], "basepruner (class in neural_compressor.compression.pruner.pruners)": [[173, "neural_compressor.compression.pruner.pruners.BasePruner"]], "basicpruner (class in neural_compressor.compression.pruner.pruners)": [[173, "neural_compressor.compression.pruner.pruners.BasicPruner"]], "blockmaskpruner (class in neural_compressor.compression.pruner.pruners)": [[173, "neural_compressor.compression.pruner.pruners.BlockMaskPruner"]], "multiheadattentionpruner (class in neural_compressor.compression.pruner.pruners)": [[173, "neural_compressor.compression.pruner.pruners.MultiheadAttentionPruner"]], "patternlockpruner (class in neural_compressor.compression.pruner.pruners)": [[173, "neural_compressor.compression.pruner.pruners.PatternLockPruner"]], "progressivepruner (class in neural_compressor.compression.pruner.pruners)": [[173, "neural_compressor.compression.pruner.pruners.ProgressivePruner"]], "retrainfreepruner (class in neural_compressor.compression.pruner.pruners)": [[173, "neural_compressor.compression.pruner.pruners.RetrainFreePruner"]], "config (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.BasePruner.config"]], "criterion (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.BasicPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.criterion"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.BasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.BasePruner.end_step"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[173, "neural_compressor.compression.pruner.pruners.get_pruner"]], "global_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.BasePruner.global_step"]], "masks (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.BasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.BasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.BasePruner.modules"]], "neural_compressor.compression.pruner.pruners": [[173, "module-neural_compressor.compression.pruner.pruners"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[173, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pattern (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.BasicPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.pattern"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.BasePruner.pruning_frequency"]], "reg (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.BasicPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.reg"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners)": [[173, "neural_compressor.compression.pruner.pruners.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.BasicPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.BasePruner.scores"]], "start_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.BasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.BasePruner.target_sparsity_ratio"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[174, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[174, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[174, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[174, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[174, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[174, "module-neural_compressor.compression.pruner.regs"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[174, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[174, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[175, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[175, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[175, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[175, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[175, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[175, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[175, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[176, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[176, "neural_compressor.compression.pruner.utils.check_key_validity"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[176, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[176, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "neural_compressor.compression.pruner.utils": [[176, "module-neural_compressor.compression.pruner.utils"]], "parse_last_linear() (in module neural_compressor.compression.pruner.utils)": [[176, "neural_compressor.compression.pruner.utils.parse_last_linear"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[176, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[176, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[176, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[176, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[176, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[176, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[176, "neural_compressor.compression.pruner.utils.update_params"]], "benchmark_conf (class in neural_compressor.conf.config)": [[177, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[177, "neural_compressor.conf.config.Conf"]], "defaultconf (class in neural_compressor.conf.config)": [[177, "neural_compressor.conf.config.DefaultConf"]], "distillation_conf (class in neural_compressor.conf.config)": [[177, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[177, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[177, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[177, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[177, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[177, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[177, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[177, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[178, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[178, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[178, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[178, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[179, "module-neural_compressor.conf"]], "accuracycriterion (class in neural_compressor.conf.pythonic_config)": [[180, "neural_compressor.conf.pythonic_config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.conf.pythonic_config)": [[180, "neural_compressor.conf.pythonic_config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.conf.pythonic_config)": [[180, "neural_compressor.conf.pythonic_config.DistillationConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.conf.pythonic_config)": [[180, "neural_compressor.conf.pythonic_config.KnowledgeDistillationLossConfig"]], "options (class in neural_compressor.conf.pythonic_config)": [[180, "neural_compressor.conf.pythonic_config.Options"]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[180, "neural_compressor.conf.pythonic_config.QuantizationConfig"]], "weightpruningconfig (class in neural_compressor.conf.pythonic_config)": [[180, "neural_compressor.conf.pythonic_config.WeightPruningConfig"]], "neural_compressor.conf.pythonic_config": [[180, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[181, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[181, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[181, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[181, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[181, "neural_compressor.config.ExportConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[181, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[181, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[181, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[181, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[181, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[181, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[181, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[181, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[181, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[181, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[181, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[181, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[181, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[181, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[181, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[181, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[181, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[181, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[181, "module-neural_compressor.config"]], "neural_compressor.contrib": [[182, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[183, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[184, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[184, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[185, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[185, "module-neural_compressor.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[186, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader": [[186, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[187, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "check_dataloader() (in module neural_compressor.data.dataloaders.dataloader)": [[187, "neural_compressor.data.dataloaders.dataloader.check_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[187, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[188, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[188, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[188, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[189, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[189, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[189, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[189, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[190, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[191, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[191, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[192, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[192, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[192, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[193, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[193, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[194, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[194, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[194, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[194, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[194, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[195, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[195, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[195, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[195, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[195, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[196, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[196, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[196, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[196, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[196, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[196, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[196, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[196, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[196, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[197, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[197, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[197, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[197, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[197, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[198, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[198, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[199, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[199, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[200, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[200, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[200, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[201, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[201, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[201, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[201, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[201, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[201, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[201, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[202, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[203, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[203, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[204, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[204, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[204, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[205, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[205, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[205, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[205, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[205, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[205, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[205, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[205, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[205, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[206, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[207, "module-neural_compressor.data"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[208, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[208, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[209, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[209, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[209, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[209, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[209, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[209, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[209, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[209, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[209, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[209, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[210, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[211, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[211, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[212, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[212, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[212, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[212, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[212, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[212, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[212, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[212, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.TRANSFORMS"], [213, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[213, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[213, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[214, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[214, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[214, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[214, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[214, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[214, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[214, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[214, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[214, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[214, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[215, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[215, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[216, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[216, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[217, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[218, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[218, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[219, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[219, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[219, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[220, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[220, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[220, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[220, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[220, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[220, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[220, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[220, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[220, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[221, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[221, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[222, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[222, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[222, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[223, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[223, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[224, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[225, "module-neural_compressor.experimental.compression.pruning"]], "prepare_pruning() (in module neural_compressor.experimental.compression.pruning)": [[225, "neural_compressor.experimental.compression.pruning.prepare_pruning"]], "save() (in module neural_compressor.experimental.compression.pruning)": [[225, "neural_compressor.experimental.compression.pruning.save"]], "neural_compressor.experimental.contrib": [[226, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[227, "module-neural_compressor.experimental.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[228, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[228, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[229, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[229, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[230, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[230, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[231, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[232, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[232, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[232, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[233, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[233, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[233, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[233, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[234, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[235, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[235, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[236, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[236, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[236, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[237, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[237, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[238, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[238, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[238, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[238, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[238, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[239, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[239, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[239, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[239, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[239, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[240, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[240, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[240, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[240, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[240, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[240, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[240, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[240, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[240, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[241, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[241, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[241, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[241, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[241, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[242, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[242, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[242, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[242, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[242, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[242, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[242, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[242, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[242, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[242, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[242, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[242, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[242, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[242, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[242, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[242, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[242, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[242, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[242, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[242, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[242, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[242, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[242, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[242, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[242, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[242, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[242, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[242, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[242, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[242, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[242, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[242, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[242, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[242, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[242, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[242, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[242, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[242, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[242, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[243, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[243, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[244, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[244, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[244, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[245, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[245, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[245, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[245, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[245, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[245, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[245, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[246, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[247, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[247, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[248, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[248, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[248, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[249, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[249, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[249, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[249, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[249, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[249, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[249, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[249, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[249, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[250, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[251, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[252, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[252, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[252, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[252, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[252, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[252, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[252, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[252, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[252, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[252, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[253, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[254, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[254, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[254, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[254, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[254, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[254, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[254, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[254, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [255, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[255, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[255, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[256, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[256, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[256, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[256, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[256, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[256, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[257, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[258, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[258, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[258, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[259, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[259, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[259, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[260, "module-neural_compressor.experimental.export.torch2onnx"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[260, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[260, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[261, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[261, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[262, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[263, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[263, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[263, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[263, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[263, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[263, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[263, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[263, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[263, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[264, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[264, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[265, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[266, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[266, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[266, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[266, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[266, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[266, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[266, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[266, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[267, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[267, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[267, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[267, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[267, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[268, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[268, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[268, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[268, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[268, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[269, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[270, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[270, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[270, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[270, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[270, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[270, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[270, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[270, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[270, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[270, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[270, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[270, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[270, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[270, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[270, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[270, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[270, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[270, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[270, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[270, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[270, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[270, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[270, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[270, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[270, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[271, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[271, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[272, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[272, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[273, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[273, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[274, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[274, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[275, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[276, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[276, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[276, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[277, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[277, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[277, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[277, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[278, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[278, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[278, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[278, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[278, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[279, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[279, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[280, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[280, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[281, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[282, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[282, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[283, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[283, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[284, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[284, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[284, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[285, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[285, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[285, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[285, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[285, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[286, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[287, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[288, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[288, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[288, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[288, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[288, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[289, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[289, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[289, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[289, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[289, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[289, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[289, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[290, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[290, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[290, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[290, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[290, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[291, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[292, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[293, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[294, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[294, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[294, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[294, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[294, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[294, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[294, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[295, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[296, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[296, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[297, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[297, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[297, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[297, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[297, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[297, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[298, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[298, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[299, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[299, "module-neural_compressor.experimental.scheduler"]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[300, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[300, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[301, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[301, "module-neural_compressor.experimental.strategy.basic"]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[302, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[302, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[302, "neural_compressor.experimental.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[302, "neural_compressor.experimental.strategy.bayesian.acq_max"]], "neural_compressor.experimental.strategy.bayesian": [[302, "module-neural_compressor.experimental.strategy.bayesian"]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[303, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.exhaustive": [[303, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[304, "module-neural_compressor.experimental.strategy"]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[305, "neural_compressor.experimental.strategy.mse.MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[305, "module-neural_compressor.experimental.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[306, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[306, "module-neural_compressor.experimental.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[307, "neural_compressor.experimental.strategy.random.RandomTuneStrategy"]], "neural_compressor.experimental.strategy.random": [[307, "module-neural_compressor.experimental.strategy.random"]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[308, "neural_compressor.experimental.strategy.strategy.TuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[308, "module-neural_compressor.experimental.strategy.strategy"]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[308, "neural_compressor.experimental.strategy.strategy.strategy_registry"]], "neural_compressor.experimental.strategy.utils.constant": [[309, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[310, "module-neural_compressor.experimental.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[311, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[311, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[311, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[311, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[311, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[311, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[311, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[311, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[311, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[312, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[312, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[312, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[312, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[312, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[312, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[312, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[313, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[313, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[314, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[314, "neural_compressor.experimental.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[314, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.experimental.strategy.utils.utility": [[314, "module-neural_compressor.experimental.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[314, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type"]], "neural_compressor": [[315, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[316, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[316, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[316, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[316, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[316, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[316, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[316, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[316, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[316, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[317, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[317, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[318, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[319, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[319, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[319, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[319, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[319, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[319, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[319, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[319, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[320, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[320, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[320, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[320, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[320, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[321, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[321, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[321, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[321, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[321, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[322, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[323, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[323, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[323, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[323, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[323, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[323, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[323, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[323, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[323, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[323, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[323, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[323, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[323, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[323, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[323, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[323, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[323, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[323, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[323, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[323, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[323, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[323, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[323, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[323, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[323, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[324, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[324, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[325, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[325, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[326, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[327, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[327, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[328, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[328, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[328, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[329, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[329, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[330, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[330, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[331, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[331, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[332, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[332, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[332, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[332, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[332, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[332, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[332, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[332, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[332, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[332, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[332, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[332, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[332, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[332, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[332, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[332, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[332, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[332, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[333, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[333, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[333, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[333, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[333, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[334, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[334, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[334, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[334, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[334, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[334, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[334, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[334, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[334, "neural_compressor.objective.objective_registry"]], "neural_compressor.profiling": [[335, "module-neural_compressor.profiling"]], "parserfactory (class in neural_compressor.profiling.parser.factory)": [[336, "neural_compressor.profiling.parser.factory.ParserFactory"]], "neural_compressor.profiling.parser.factory": [[336, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[337, "module-neural_compressor.profiling.parser"]], "onnxrtparserfactory (class in neural_compressor.profiling.parser.onnx_parser.factory)": [[338, "neural_compressor.profiling.parser.onnx_parser.factory.OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[338, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[339, "module-neural_compressor.profiling.parser.onnx_parser"]], "onnxprofilingparser (class in neural_compressor.profiling.parser.onnx_parser.parser)": [[340, "neural_compressor.profiling.parser.onnx_parser.parser.OnnxProfilingParser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[340, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "profilingparser (class in neural_compressor.profiling.parser.parser)": [[341, "neural_compressor.profiling.parser.parser.ProfilingParser"]], "neural_compressor.profiling.parser.parser": [[341, "module-neural_compressor.profiling.parser.parser"]], "profilingresult (class in neural_compressor.profiling.parser.result)": [[342, "neural_compressor.profiling.parser.result.ProfilingResult"]], "neural_compressor.profiling.parser.result": [[342, "module-neural_compressor.profiling.parser.result"]], "tensorflowparserfactory (class in neural_compressor.profiling.parser.tensorflow_parser.factory)": [[343, "neural_compressor.profiling.parser.tensorflow_parser.factory.TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[343, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[344, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "tensorflowprofilingparser (class in neural_compressor.profiling.parser.tensorflow_parser.parser)": [[345, "neural_compressor.profiling.parser.tensorflow_parser.parser.TensorFlowProfilingParser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[345, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "profilerfactory (class in neural_compressor.profiling.profiler.factory)": [[346, "neural_compressor.profiling.profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.factory": [[346, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[347, "module-neural_compressor.profiling.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.onnxrt_profiler.factory)": [[348, "neural_compressor.profiling.profiler.onnxrt_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[348, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[349, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "profiler (class in neural_compressor.profiling.profiler.onnxrt_profiler.profiler)": [[350, "neural_compressor.profiling.profiler.onnxrt_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[350, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "create_onnx_config() (in module neural_compressor.profiling.profiler.onnxrt_profiler.utils)": [[351, "neural_compressor.profiling.profiler.onnxrt_profiler.utils.create_onnx_config"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[351, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "profiler (class in neural_compressor.profiling.profiler.profiler)": [[352, "neural_compressor.profiling.profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.profiler": [[352, "module-neural_compressor.profiling.profiler.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.tensorflow_profiler.factory)": [[353, "neural_compressor.profiling.profiler.tensorflow_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[353, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[354, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "profiler (class in neural_compressor.profiling.profiler.tensorflow_profiler.profiler)": [[355, "neural_compressor.profiling.profiler.tensorflow_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[355, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "create_tf_config() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[356, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.create_tf_config"]], "delete_assign() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[356, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[356, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "set_eager_execution() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[356, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.set_eager_execution"]], "fit() (in module neural_compressor.quantization)": [[357, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[357, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[358, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[358, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[359, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[359, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[360, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[360, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[361, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[361, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[361, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[361, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[361, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[362, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[362, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[363, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[363, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[364, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[364, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[365, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[366, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[366, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[367, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[367, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[368, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[368, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[369, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[369, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[369, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[369, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[370, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[371, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[372, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[372, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[372, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[372, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[372, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[372, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[372, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[372, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.strategy.utils.tuning_sampler)": [[372, "neural_compressor.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_sampler": [[372, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[373, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[373, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[373, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[373, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[373, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[373, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[373, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[374, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[374, "module-neural_compressor.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[375, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[375, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[375, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[375, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[375, "module-neural_compressor.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[375, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[376, "neural_compressor.template.api_doc_example.ExampleClass"]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[376, "neural_compressor.template.api_doc_example.ExampleClass.attr1"]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[376, "neural_compressor.template.api_doc_example.ExampleClass.attr2"]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[376, "neural_compressor.template.api_doc_example.ExampleClass.attr5"]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[376, "neural_compressor.template.api_doc_example.attribute1"]], "function1() (in module neural_compressor.template.api_doc_example)": [[376, "neural_compressor.template.api_doc_example.function1"]], "function2() (in module neural_compressor.template.api_doc_example)": [[376, "neural_compressor.template.api_doc_example.function2"]], "function3() (in module neural_compressor.template.api_doc_example)": [[376, "neural_compressor.template.api_doc_example.function3"]], "generator1() (in module neural_compressor.template.api_doc_example)": [[376, "neural_compressor.template.api_doc_example.generator1"]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[376, "neural_compressor.template.api_doc_example.module_debug_level1"]], "neural_compressor.template.api_doc_example": [[376, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[377, "module-neural_compressor.template"]], "callbacks (class in neural_compressor.training)": [[378, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[378, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[378, "neural_compressor.training.fit"]], "neural_compressor.training": [[378, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[378, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[379, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[379, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[380, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[381, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[381, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[381, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[381, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[381, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[381, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[381, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[381, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[381, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[381, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[382, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[383, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[383, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[384, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "neural_compressor.utils.load_huggingface": [[384, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[384, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[385, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[385, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[385, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[385, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[385, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[385, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[385, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[385, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[385, "neural_compressor.utils.logger.warning"]], "neural_compressor.utils.neural_insights_utils": [[386, "module-neural_compressor.utils.neural_insights_utils"]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[386, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload"]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[386, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload"]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[386, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[387, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[387, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[388, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[388, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[388, "module-neural_compressor.utils.pytorch"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.Dequantize"]], "dequantizeweight() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.DequantizeWeight"]], "dotdict (class in neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.calculate_mse"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.compute_sparsity"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[389, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[389, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[390, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[390, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[390, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[391, "module-neural_compressor.version"]]}})