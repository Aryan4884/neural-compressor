Search.setIndex({"docnames": ["autoapi/block_mask/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/teq/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/hpo/index", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index", "autoapi/neural_compressor/compression/hpo/search_algorithms/index", "autoapi/neural_compressor/compression/hpo/search_space/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/base/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/patterns/mha/index", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index", "autoapi/neural_compressor/compression/pruner/pruners/base/index", "autoapi/neural_compressor/compression/pruner/pruners/basic/index", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/pruners/mha/index", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index", "autoapi/neural_compressor/compression/pruner/pruners/sparse_gpt/index", "autoapi/neural_compressor/compression/pruner/pruning/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/tf_criteria/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/profiling/parser/factory/index", "autoapi/neural_compressor/profiling/parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index", "autoapi/neural_compressor/profiling/parser/parser/index", "autoapi/neural_compressor/profiling/parser/result/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index", "autoapi/neural_compressor/profiling/profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index", "autoapi/neural_compressor/profiling/profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/template/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/calibration", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/diagnosis", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/block_mask/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/teq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/hpo/index.rst", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index.rst", "autoapi/neural_compressor/compression/hpo/search_algorithms/index.rst", "autoapi/neural_compressor/compression/hpo/search_space/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/base/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/mha/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/base/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/basic/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/mha/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/sparse_gpt/index.rst", "autoapi/neural_compressor/compression/pruner/pruning/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/tf_criteria/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/profiling/parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/result/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index.rst", "autoapi/neural_compressor/profiling/profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index.rst", "autoapi/neural_compressor/profiling/profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/template/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/calibration.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/diagnosis.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.reduce</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.unary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_scaler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.pattern_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.teq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.sa_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.search_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.auto_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.pattern_analyzer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.weight_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.ninm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.nxm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.progressive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.retrain_free</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.sparse_gpt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.tf_criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template.api_doc_example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.neural_insights_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.weights_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "Calibration Algorithms in Quantization", "DataLoader", "Dataset", "Design", "Diagnosis", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (70)", "Pythonic Style Access for Configurations", "Quantization", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"block": [0, 154, 159, 174, 184, 187, 192, 198, 314, 355, 397, 452, 478, 480, 485, 488, 491], "mask": [0, 174, 180, 182, 185, 187, 191, 192, 218, 261, 287, 316, 340, 480, 494], "adaptor_registri": [1, 420], "cl": [1, 160, 167, 171, 172, 180, 185, 194, 195, 196, 220, 227, 235, 237, 242, 263, 270, 276, 298, 305, 309, 314, 316, 318, 329, 344, 355, 390, 410], "sourc": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 273, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 303, 304, 305, 306, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 357, 359, 361, 362, 363, 364, 366, 367, 369, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 393, 394, 395, 396, 397, 399, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 419, 454, 456, 469, 471, 473, 474, 476, 481], "The": [1, 3, 11, 14, 16, 34, 52, 73, 112, 118, 120, 139, 147, 152, 158, 160, 165, 166, 167, 171, 172, 174, 178, 180, 182, 183, 185, 186, 187, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 206, 207, 208, 218, 219, 220, 221, 222, 226, 227, 235, 237, 240, 242, 245, 249, 250, 251, 261, 262, 263, 264, 265, 269, 270, 276, 277, 282, 284, 285, 286, 288, 289, 291, 293, 294, 295, 297, 298, 300, 301, 303, 304, 305, 306, 309, 311, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 326, 327, 328, 329, 333, 335, 337, 338, 339, 341, 342, 344, 345, 353, 355, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 394, 396, 397, 399, 400, 402, 404, 405, 409, 410, 411, 414, 416, 417, 420, 421, 422, 423, 425, 429, 432, 435, 437, 438, 439, 440, 442, 443, 445, 447, 449, 451, 452, 453, 455, 456, 457, 458, 461, 462, 464, 467, 469, 470, 471, 473, 474, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494], "decor": [1, 16, 34, 66, 67, 69, 147, 160, 171, 172, 180, 185, 194, 196, 235, 242, 276, 291, 298, 305, 309, 314, 316, 318, 329, 332, 344, 355, 390, 410, 416, 417, 420, 491], "us": [1, 13, 16, 34, 42, 43, 47, 48, 69, 102, 104, 115, 140, 150, 152, 158, 159, 165, 167, 171, 172, 174, 178, 180, 185, 189, 190, 194, 196, 197, 199, 200, 202, 203, 206, 207, 216, 217, 218, 219, 220, 221, 222, 225, 234, 235, 236, 237, 242, 249, 250, 259, 260, 261, 262, 263, 264, 265, 268, 275, 276, 280, 281, 282, 284, 285, 287, 291, 292, 293, 298, 305, 306, 309, 311, 314, 316, 317, 318, 319, 320, 323, 326, 329, 332, 333, 337, 338, 340, 344, 355, 372, 377, 378, 382, 385, 387, 390, 394, 396, 397, 400, 401, 402, 403, 410, 414, 415, 416, 417, 420, 421, 437, 438, 440, 442, 443, 444, 445, 447, 449, 451, 453, 454, 456, 457, 458, 459, 460, 461, 463, 464, 467, 469, 471, 473, 474, 476, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494], "regist": [1, 16, 34, 160, 167, 171, 172, 174, 175, 180, 181, 185, 188, 194, 195, 196, 197, 220, 227, 235, 237, 242, 263, 270, 276, 291, 298, 305, 309, 314, 316, 318, 329, 332, 344, 355, 390, 396, 407, 417, 420, 440, 445, 455, 456, 477, 478, 488, 491], "all": [1, 13, 16, 34, 44, 62, 96, 149, 158, 159, 160, 162, 165, 166, 172, 175, 180, 188, 198, 202, 203, 208, 209, 216, 220, 227, 235, 236, 242, 245, 251, 259, 263, 270, 276, 281, 284, 287, 289, 291, 298, 305, 309, 310, 314, 320, 329, 332, 337, 340, 342, 344, 346, 355, 390, 396, 402, 410, 414, 419, 420, 421, 422, 439, 440, 445, 449, 453, 456, 459, 467, 470, 471, 474, 475, 476, 477, 479, 480, 481, 483, 484, 488, 490, 491], "subclass": [1, 16, 34, 160, 171, 172, 180, 185, 194, 196, 213, 217, 220, 227, 235, 242, 256, 260, 263, 270, 276, 291, 298, 305, 309, 314, 316, 318, 329, 332, 344, 355, 390, 420], "paramet": [1, 11, 13, 14, 16, 42, 43, 44, 66, 67, 69, 85, 104, 115, 131, 139, 140, 147, 148, 149, 150, 155, 156, 158, 159, 160, 165, 166, 167, 169, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 206, 207, 217, 218, 220, 227, 231, 235, 237, 242, 249, 250, 260, 261, 263, 270, 273, 276, 277, 279, 280, 281, 282, 284, 285, 287, 288, 289, 291, 293, 294, 295, 297, 298, 299, 300, 301, 303, 304, 305, 306, 309, 311, 314, 315, 316, 317, 318, 319, 323, 329, 333, 335, 337, 338, 340, 341, 342, 344, 345, 349, 353, 355, 372, 377, 378, 382, 390, 394, 396, 397, 399, 402, 406, 407, 409, 410, 416, 421, 439, 440, 443, 445, 452, 455, 456, 470, 476, 477, 480, 483, 485, 487, 488, 490, 491, 493], "framework_specific_info": [1, 3, 11, 14, 44, 46, 420], "base": [1, 3, 13, 16, 34, 44, 45, 46, 85, 104, 115, 119, 121, 131, 143, 150, 154, 158, 160, 166, 171, 172, 173, 174, 175, 181, 188, 195, 197, 203, 208, 211, 216, 218, 220, 227, 235, 245, 251, 254, 259, 261, 263, 270, 276, 291, 297, 299, 305, 306, 309, 311, 316, 326, 329, 333, 344, 346, 353, 354, 355, 387, 390, 394, 417, 419, 420, 421, 422, 440, 444, 445, 449, 456, 457, 464, 465, 467, 476, 480, 483, 485, 487, 489, 491, 494], "framework": [1, 3, 11, 13, 14, 44, 165, 167, 175, 181, 185, 188, 192, 193, 194, 204, 205, 209, 210, 214, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 229, 232, 235, 237, 238, 242, 247, 248, 252, 253, 255, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 272, 274, 276, 282, 291, 292, 319, 327, 333, 344, 345, 346, 347, 349, 388, 394, 402, 419, 420, 422, 438, 442, 445, 446, 450, 451, 452, 453, 455, 456, 457, 480, 481, 483, 486, 489, 490, 491, 492, 493, 494], "layer": [1, 3, 11, 14, 44, 45, 46, 115, 116, 117, 118, 120, 121, 149, 155, 159, 163, 167, 176, 178, 179, 180, 184, 189, 198, 202, 203, 237, 244, 314, 315, 400, 402, 410, 420, 421, 422, 444, 452, 480, 486], "mxnet_util": 2, "util": [2, 12, 17, 104, 109, 110, 138, 141, 148, 150, 151, 156, 173, 175, 202, 203, 244, 283, 285, 315, 325, 336, 338, 370, 375, 386, 421, 422, 423, 438, 445, 456, 459, 483, 491, 492], "ox_util": 2, "oper": [2, 17, 43, 103, 109, 139, 147, 178, 179, 184, 202, 203, 231, 273, 314, 372, 377, 416, 437, 439, 442, 447, 476, 483, 485, 488, 490, 491], "activ": [2, 17, 29, 140, 158, 159, 202, 203, 244, 333, 394, 396, 420, 421, 422, 438, 442, 444, 449, 456, 477, 482, 483, 485, 488, 489, 493], "argmax": [2, 17, 29], "attent": [2, 17, 29, 154, 176, 178, 189, 202, 203, 218, 261, 414, 443, 480], "binary_op": [2, 17, 29], "concat": [2, 17, 29, 146], "conv": [2, 17, 29, 57, 61, 65, 70, 71, 72, 91, 108, 163, 202, 203, 416, 421, 422, 456, 480, 482, 483, 491], "direct_q8": [2, 17, 29], "embed_layernorm": [2, 17, 29], "gather": [2, 13, 17, 29, 202, 203, 314], "gavgpool": [2, 17, 29], "gemm": [2, 17, 29, 202, 203], "lstm": [2, 17, 29], "matmul": [2, 17, 29, 51, 58, 64, 72, 93, 108, 127, 136, 184, 202, 203, 314, 449, 491], "maxpool": [2, 17, 29, 128, 137, 449], "norm": [2, 17, 29], "op": [2, 13, 17, 29, 44, 51, 56, 64, 65, 66, 67, 68, 69, 70, 71, 73, 77, 80, 84, 87, 90, 91, 92, 93, 95, 104, 106, 108, 122, 123, 124, 130, 132, 133, 134, 135, 140, 142, 145, 147, 148, 150, 156, 158, 163, 178, 202, 203, 281, 326, 333, 334, 372, 377, 383, 385, 387, 394, 395, 396, 404, 410, 420, 421, 422, 442, 449, 456, 457, 480, 483, 484, 486, 488, 489, 491, 493], "pad": [2, 17, 29, 70, 71, 218, 235, 261, 276, 440, 490], "pool": [2, 17, 29], "reduc": [2, 17, 29, 202, 203, 420, 438, 444, 456, 457, 476, 477, 480, 481, 483, 484, 485, 488, 491, 493], "resiz": [2, 17, 29, 218, 219, 231, 235, 261, 262, 273, 276, 440, 490], "split": [2, 17, 29, 43, 81, 159, 234, 235, 275, 276, 416, 485, 488, 490], "unary_op": [2, 17, 29], "calibr": [2, 11, 13, 14, 17, 48, 88, 89, 139, 158, 159, 165, 202, 203, 206, 207, 249, 250, 282, 319, 378, 404, 420, 422, 440, 451, 452, 483, 491, 492, 493], "quantiz": [2, 11, 13, 14, 16, 17, 42, 43, 47, 48, 87, 91, 93, 95, 98, 106, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 148, 149, 150, 152, 153, 155, 157, 158, 159, 163, 165, 166, 202, 203, 206, 207, 231, 238, 245, 249, 250, 273, 281, 282, 283, 293, 320, 326, 332, 336, 383, 385, 387, 396, 399, 400, 404, 409, 410, 420, 427, 439, 440, 445, 446, 449, 451, 452, 455, 458, 459, 464, 466, 467, 470, 479, 481, 486, 489, 490, 491, 492, 493], "smooth_quant": [2, 17, 162, 202, 203, 336, 483, 488], "tf_util": 2, "graph_rewrit": [2, 110], "bf16": [2, 56, 86, 110, 148, 202, 203, 333, 394, 420, 421, 449, 456, 461, 466, 470, 476, 484, 491, 494], "gener": [2, 13, 47, 48, 86, 110, 121, 147, 149, 158, 165, 178, 198, 206, 207, 208, 217, 220, 221, 222, 223, 235, 249, 250, 251, 260, 263, 264, 265, 266, 276, 284, 292, 323, 337, 345, 373, 378, 382, 397, 399, 416, 420, 422, 439, 443, 455, 456, 457, 459, 464, 469, 471, 473, 474, 476, 478, 480, 481, 483, 484, 485, 488, 489, 490, 491], "int8": [2, 18, 19, 43, 86, 110, 122, 123, 124, 130, 132, 133, 134, 135, 142, 147, 159, 164, 165, 202, 203, 231, 273, 279, 280, 281, 333, 335, 394, 396, 409, 410, 416, 419, 420, 421, 422, 437, 440, 444, 449, 456, 457, 461, 464, 466, 467, 470, 476, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 493], "onnx": [2, 14, 15, 16, 29, 41, 43, 86, 110, 141, 163, 202, 203, 214, 257, 279, 280, 281, 345, 352, 372, 408, 419, 420, 421, 423, 439, 442, 446, 447, 449, 450, 452, 457, 458, 461, 466, 467, 481, 482, 485, 486, 488, 491], "qdq": [2, 42, 86, 110, 111, 112, 141, 158, 159, 202, 203, 279, 280, 281, 420, 442, 447, 452, 466, 467, 483, 486, 488], "graph_bas": [2, 86, 110], "quantize_graph": [2, 110], "qat": [2, 110, 111, 156, 203, 293, 353, 444, 445, 452, 456, 483], "quantize_graph_bas": [2, 110, 111], "quantize_graph_bn": [2, 110, 111], "quantize_graph_concatv2": [2, 110, 111], "quantize_graph_conv": [2, 110, 111], "quantize_graph_for_intel_cpu": [2, 110, 111], "quantize_graph_matmul": [2, 110, 111], "quantize_graph_pool": [2, 110, 111], "transform_graph": [2, 110], "bias_correct": [2, 110, 144], "graph_transform_bas": [2, 110, 144], "insert_log": [2, 110, 144], "rerange_quantized_concat": [2, 110, 144], "graph_convert": [2, 110], "graph_converter_without_calib": [2, 110], "graph_util": [2, 110], "quantize_graph_common": [2, 110], "smooth_quant_calibr": [2, 110], "smooth_quant_scal": [2, 110], "tf2onnx_convert": [2, 110], "torch_util": [2, 239, 283, 336, 488], "bf16_convert": [2, 50, 86, 110, 151], "hawq_metr": [2, 151], "model_wrapp": [2, 15, 151], "pattern_detector": [2, 151], "symbolic_trac": [2, 151], "tensorflow": [2, 50, 52, 74, 75, 76, 86, 94, 100, 101, 102, 103, 104, 105, 109, 110, 111, 113, 116, 129, 139, 140, 141, 144, 147, 197, 202, 203, 217, 218, 219, 220, 223, 225, 227, 235, 237, 242, 260, 261, 262, 263, 266, 268, 270, 276, 280, 281, 282, 285, 287, 291, 292, 293, 319, 327, 338, 340, 344, 345, 353, 371, 372, 376, 377, 378, 388, 410, 417, 419, 420, 421, 438, 439, 442, 443, 444, 446, 449, 450, 452, 453, 456, 457, 458, 466, 467, 480, 481, 482, 487, 488, 491, 493], "kerasadaptor": 3, "kerasqueri": 3, "local_config_fil": [3, 44, 46], "none": [3, 13, 41, 43, 44, 46, 47, 48, 62, 88, 101, 103, 104, 109, 115, 141, 147, 149, 150, 152, 153, 155, 157, 158, 159, 165, 166, 167, 172, 174, 175, 176, 178, 182, 194, 198, 199, 200, 202, 203, 206, 207, 208, 210, 213, 216, 217, 218, 219, 220, 221, 222, 223, 225, 231, 235, 236, 237, 238, 245, 249, 250, 251, 253, 256, 259, 260, 261, 262, 263, 264, 265, 266, 268, 273, 276, 277, 280, 281, 282, 287, 291, 292, 293, 294, 297, 306, 311, 315, 319, 321, 323, 326, 329, 333, 340, 344, 345, 355, 371, 376, 377, 378, 379, 380, 382, 383, 385, 387, 390, 394, 397, 399, 400, 402, 407, 409, 410, 420, 421, 439, 440, 455, 483, 485, 489, 490, 491], "defin": [3, 44, 45, 85, 150, 153, 171, 172, 178, 180, 185, 186, 187, 192, 193, 194, 195, 196, 202, 203, 206, 207, 249, 250, 294, 295, 297, 298, 299, 306, 311, 314, 315, 316, 318, 345, 378, 399, 409, 414, 417, 420, 421, 439, 440, 443, 444, 449, 452, 455, 456, 477, 479, 480, 483, 487, 488, 489, 491, 493], "queri": [3, 13, 44, 46, 147, 158, 178, 189, 202, 203, 421, 422, 483], "interfac": [3, 44, 45, 85, 112, 199, 282, 306, 311, 319, 320, 402, 452, 456, 467, 483, 486], "each": [3, 44, 45, 140, 147, 150, 198, 202, 203, 216, 220, 223, 231, 235, 259, 263, 266, 273, 276, 285, 287, 288, 289, 326, 338, 340, 341, 342, 387, 410, 415, 420, 421, 422, 440, 442, 443, 444, 449, 456, 461, 467, 470, 476, 478, 480, 487, 488, 489, 490, 491, 492], "adapt": [3, 44, 45, 414, 419, 421, 440, 467, 481], "should": [3, 44, 45, 53, 114, 115, 166, 176, 178, 189, 202, 203, 206, 207, 216, 218, 220, 235, 240, 249, 250, 259, 261, 263, 276, 281, 285, 338, 344, 345, 378, 397, 399, 410, 416, 417, 420, 421, 422, 440, 443, 445, 455, 456, 462, 471, 474, 476, 478, 480, 483, 490, 491, 493], "implement": [3, 44, 45, 109, 142, 146, 206, 207, 213, 216, 217, 218, 220, 249, 250, 256, 259, 260, 261, 263, 284, 337, 345, 355, 378, 385, 399, 422, 439, 440, 455, 456, 467, 477, 480, 483, 485, 486, 489, 491, 493], "inherit": [3, 44, 45, 166, 167, 190, 191, 196, 202, 215, 235, 237, 245, 258, 276, 316, 318, 417, 420, 421, 440], "specif": [3, 11, 14, 42, 44, 45, 103, 115, 159, 165, 198, 202, 203, 218, 219, 220, 221, 225, 227, 242, 261, 262, 263, 264, 268, 270, 293, 300, 301, 303, 304, 305, 344, 378, 407, 414, 417, 420, 421, 438, 439, 442, 443, 449, 451, 455, 456, 457, 458, 459, 463, 464, 466, 470, 476, 478, 480, 482, 491, 493], "backend": [3, 15, 41, 42, 44, 45, 163, 202, 203, 204, 205, 209, 210, 214, 218, 219, 221, 222, 223, 224, 225, 229, 232, 235, 241, 242, 247, 248, 252, 253, 255, 257, 261, 262, 264, 265, 266, 267, 268, 272, 274, 276, 292, 327, 345, 346, 347, 349, 388, 416, 422, 442, 445, 451, 452, 456, 457, 465, 482, 490, 493], "own": [3, 44, 45, 73, 216, 235, 259, 276, 355, 417, 421, 439, 440, 452, 455, 478, 485, 487, 492], "mxnetadaptor": 11, "do": [11, 14, 149, 166, 194, 202, 203, 217, 218, 260, 261, 277, 281, 284, 287, 317, 337, 340, 409, 414, 421, 440, 445, 449, 452, 455, 456, 471, 474, 480, 484, 486, 488, 491], "inspect": [11, 14, 486, 489], "tensor": [11, 13, 14, 15, 16, 43, 69, 104, 147, 150, 158, 159, 174, 175, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 203, 235, 276, 279, 281, 314, 316, 326, 353, 387, 410, 416, 422, 439, 440, 442, 480, 483, 486, 489, 490, 491], "dict": [11, 13, 14, 44, 115, 147, 148, 149, 150, 158, 159, 160, 165, 171, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 206, 207, 217, 236, 242, 249, 250, 260, 279, 281, 286, 287, 288, 289, 291, 294, 297, 298, 299, 306, 309, 311, 314, 315, 316, 317, 318, 323, 326, 332, 335, 339, 340, 341, 342, 344, 345, 353, 378, 393, 396, 397, 399, 400, 402, 409, 410, 416, 421, 447, 455, 480, 482, 483, 488, 489, 491], "configur": [11, 13, 14, 44, 117, 148, 158, 165, 198, 199, 202, 203, 206, 207, 209, 220, 223, 236, 241, 249, 250, 263, 266, 277, 281, 282, 293, 294, 295, 297, 306, 311, 315, 319, 320, 326, 344, 345, 355, 378, 387, 396, 399, 401, 402, 408, 409, 416, 417, 420, 421, 440, 442, 456, 463, 477, 478, 480, 483, 486, 490, 491, 494], "mxnet": [12, 13, 16, 203, 213, 217, 220, 223, 227, 235, 256, 260, 263, 266, 270, 276, 282, 291, 319, 344, 345, 350, 378, 419, 420, 421, 438, 439, 446, 449, 452, 453, 456, 457, 458, 482, 491, 493], "init": [12, 17, 42, 162, 168, 175, 177, 440, 455, 491], "optyp": [13, 202, 203, 279, 421], "enum": 13, "type": [13, 16, 42, 43, 44, 73, 95, 104, 115, 121, 131, 139, 147, 148, 149, 150, 158, 159, 160, 167, 171, 172, 178, 179, 180, 185, 194, 195, 196, 198, 200, 202, 203, 216, 218, 220, 227, 235, 237, 242, 259, 261, 263, 270, 276, 281, 284, 285, 287, 291, 298, 305, 309, 314, 316, 318, 323, 329, 333, 335, 337, 338, 340, 344, 353, 355, 382, 383, 390, 394, 396, 397, 409, 410, 415, 420, 421, 440, 442, 445, 447, 449, 452, 456, 457, 477, 483, 485, 487, 490, 491, 492, 493], "isiter": 13, "obj": [13, 104, 175, 198, 217, 260, 277, 282, 293, 294, 295, 297, 306, 311, 315, 319, 345, 355, 378, 399, 402, 410], "bool": [13, 42, 140, 147, 149, 156, 158, 159, 180, 202, 203, 218, 220, 231, 235, 261, 263, 273, 276, 281, 285, 291, 314, 332, 338, 344, 393, 397, 409, 410, 439, 440, 455, 482, 490], "check": [13, 66, 67, 104, 147, 158, 159, 198, 209, 220, 263, 279, 315, 409, 410, 415, 419, 442, 445, 453, 460, 462, 464, 471, 474, 475, 486], "whether": [13, 104, 115, 147, 149, 159, 180, 202, 203, 216, 218, 231, 235, 259, 261, 273, 276, 285, 287, 291, 314, 338, 340, 344, 402, 409, 410, 420, 440, 455, 483, 485, 488, 490], "object": [13, 42, 43, 44, 73, 85, 104, 115, 131, 148, 150, 156, 158, 165, 166, 174, 175, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 206, 207, 208, 218, 219, 220, 235, 236, 238, 249, 250, 251, 261, 262, 263, 276, 277, 282, 287, 295, 297, 300, 301, 303, 304, 305, 306, 311, 314, 315, 316, 317, 318, 319, 323, 336, 340, 344, 345, 353, 354, 372, 377, 378, 382, 396, 399, 402, 409, 410, 416, 417, 421, 427, 437, 439, 440, 448, 455, 456, 458, 479, 480, 482, 483, 490, 491, 492, 494], "i": [13, 43, 44, 47, 48, 52, 53, 56, 59, 63, 69, 81, 84, 104, 131, 142, 147, 149, 150, 152, 156, 158, 164, 165, 166, 174, 178, 179, 185, 190, 191, 192, 193, 194, 195, 197, 198, 202, 203, 206, 207, 208, 216, 217, 218, 219, 220, 221, 222, 225, 227, 231, 235, 236, 238, 242, 244, 245, 249, 250, 251, 259, 260, 261, 262, 263, 264, 265, 268, 270, 273, 276, 284, 287, 289, 291, 293, 298, 306, 311, 315, 316, 320, 327, 337, 340, 342, 344, 345, 355, 361, 362, 366, 378, 383, 388, 396, 397, 399, 409, 410, 414, 415, 416, 417, 420, 421, 422, 423, 425, 429, 432, 435, 437, 438, 439, 440, 442, 443, 444, 445, 447, 448, 449, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 467, 469, 470, 471, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494], "iter": [13, 15, 104, 139, 147, 159, 165, 179, 185, 192, 196, 202, 203, 206, 207, 211, 216, 220, 221, 238, 249, 250, 254, 259, 263, 264, 316, 318, 345, 378, 399, 402, 416, 417, 420, 437, 439, 440, 456, 480, 482, 483, 489, 491, 493], "return": [13, 16, 44, 52, 66, 67, 69, 73, 104, 115, 147, 148, 149, 150, 156, 158, 159, 160, 165, 167, 171, 172, 175, 178, 180, 181, 185, 188, 194, 195, 196, 198, 200, 206, 207, 220, 227, 231, 235, 236, 237, 242, 249, 250, 263, 270, 273, 276, 281, 284, 285, 287, 288, 289, 291, 297, 298, 305, 309, 314, 315, 316, 318, 323, 329, 333, 335, 337, 338, 340, 341, 342, 344, 345, 349, 353, 355, 372, 377, 378, 382, 390, 394, 396, 397, 399, 402, 407, 409, 410, 416, 417, 421, 422, 439, 440, 445, 455, 458, 478, 480, 483, 488, 489, 491], "true": [13, 84, 112, 145, 147, 159, 165, 171, 202, 203, 216, 218, 220, 221, 234, 235, 236, 259, 261, 263, 264, 275, 276, 281, 285, 291, 309, 332, 338, 344, 355, 378, 393, 397, 402, 409, 410, 421, 439, 440, 442, 445, 449, 455, 456, 459, 462, 463, 482, 483, 485, 488, 489, 490, 491, 493], "els": [13, 147, 159, 203, 216, 259, 355, 407, 464, 489], "fals": [13, 15, 41, 42, 46, 47, 48, 70, 71, 88, 91, 98, 101, 102, 104, 112, 130, 135, 142, 145, 146, 147, 156, 158, 159, 165, 167, 202, 203, 208, 210, 213, 217, 218, 220, 231, 235, 236, 237, 238, 244, 251, 253, 256, 260, 261, 263, 273, 276, 287, 291, 340, 344, 355, 378, 397, 402, 410, 420, 421, 439, 440, 449, 455, 456, 469, 473, 482, 483, 485, 488, 489, 490, 491, 493], "boolean": 13, "ensure_list": 13, "x": [13, 53, 73, 149, 179, 202, 203, 217, 235, 260, 276, 323, 382, 397, 438, 442, 445, 457, 458, 483, 488, 489, 490, 492], "ensur": [13, 235, 276, 323, 382, 445, 483, 490], "list": [13, 42, 43, 52, 104, 139, 147, 148, 149, 150, 154, 158, 165, 172, 178, 179, 184, 189, 194, 198, 202, 203, 206, 207, 211, 218, 231, 235, 236, 249, 250, 254, 261, 273, 276, 280, 281, 284, 285, 287, 288, 289, 291, 298, 306, 311, 314, 317, 332, 337, 338, 340, 341, 342, 344, 345, 353, 361, 362, 366, 378, 393, 397, 399, 400, 410, 416, 419, 420, 440, 447, 449, 453, 456, 459, 464, 466, 469, 470, 473, 478, 480, 482, 483, 484, 488, 489, 491], "input": [13, 15, 42, 43, 44, 52, 59, 63, 66, 67, 69, 70, 71, 73, 81, 82, 84, 85, 104, 108, 109, 115, 121, 140, 147, 148, 153, 155, 156, 157, 158, 159, 163, 178, 179, 198, 202, 203, 206, 207, 218, 219, 220, 222, 231, 234, 235, 240, 249, 250, 261, 262, 263, 265, 273, 275, 276, 279, 280, 281, 344, 345, 349, 353, 378, 399, 407, 409, 410, 417, 420, 421, 437, 438, 439, 440, 442, 443, 444, 445, 447, 449, 451, 455, 456, 457, 458, 459, 464, 480, 482, 483, 485, 488, 489, 490, 493], "check_mx_vers": 13, "version": [13, 52, 103, 153, 158, 178, 203, 280, 281, 336, 414, 416, 420, 449, 453, 454, 456, 469, 471, 473, 474, 481, 488, 491, 492], "str": [13, 42, 139, 148, 150, 154, 155, 156, 158, 159, 160, 167, 175, 178, 194, 202, 203, 218, 219, 220, 227, 231, 235, 237, 241, 242, 261, 262, 263, 270, 273, 276, 280, 281, 284, 285, 287, 289, 291, 298, 309, 332, 335, 337, 338, 340, 342, 344, 363, 371, 373, 376, 377, 393, 396, 397, 402, 407, 410, 411, 439, 440, 455, 482, 489, 490], "mx": 13, "__version__": 13, "combine_cap": 13, "current": [13, 69, 103, 155, 174, 178, 181, 185, 202, 203, 293, 300, 301, 303, 304, 305, 314, 316, 323, 327, 382, 388, 410, 416, 417, 420, 422, 438, 445, 449, 456, 459, 463, 476, 478, 480, 483, 488, 491], "new": [13, 16, 147, 155, 165, 208, 220, 235, 236, 251, 263, 276, 315, 355, 415, 421, 445, 456, 457, 470, 476, 477, 480, 481, 483, 485, 486, 487, 490, 492, 493], "combin": [13, 158, 202, 203, 206, 207, 231, 245, 249, 250, 273, 345, 378, 399, 410, 416, 420, 452, 456, 479, 481, 483, 484, 485, 490, 491], "capabl": [13, 46, 333, 394, 421, 422, 437, 449, 456, 457, 467, 480, 482, 483, 491, 493], "contain": [13, 66, 67, 69, 73, 138, 147, 150, 158, 159, 165, 166, 175, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 198, 202, 203, 206, 207, 218, 219, 220, 249, 250, 261, 262, 263, 277, 281, 282, 287, 288, 289, 293, 306, 309, 311, 314, 315, 316, 317, 318, 319, 340, 341, 342, 345, 378, 399, 402, 409, 438, 440, 443, 452, 455, 477, 480, 485, 489, 491, 492], "make_nc_model": 13, "target": [13, 42, 43, 101, 149, 178, 196, 198, 203, 315, 318, 323, 382, 440, 445, 456, 480, 489, 490, 491, 493], "sym_model": 13, "ctx": 13, "input_desc": 13, "convert": [13, 43, 47, 48, 49, 51, 52, 53, 54, 55, 65, 73, 85, 98, 99, 101, 102, 103, 104, 130, 135, 141, 148, 158, 178, 202, 203, 218, 231, 234, 235, 261, 273, 275, 276, 280, 287, 293, 315, 333, 340, 394, 397, 416, 421, 456, 457, 461, 483, 484, 488, 490, 491], "symbol": [13, 148, 156, 158, 284, 337, 345, 378, 416, 458], "model": [13, 15, 16, 29, 41, 42, 43, 44, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 115, 117, 139, 140, 141, 147, 148, 149, 150, 152, 154, 155, 156, 157, 158, 159, 163, 165, 166, 171, 175, 176, 178, 185, 186, 187, 190, 192, 193, 194, 196, 198, 202, 203, 206, 207, 214, 217, 218, 220, 235, 236, 239, 240, 249, 250, 257, 260, 261, 263, 276, 277, 279, 280, 281, 282, 283, 291, 292, 293, 294, 297, 300, 301, 303, 304, 305, 306, 311, 315, 316, 317, 318, 319, 320, 321, 323, 326, 329, 336, 344, 345, 355, 371, 376, 377, 378, 379, 380, 382, 383, 385, 387, 390, 396, 397, 399, 405, 407, 409, 410, 412, 416, 417, 419, 420, 422, 427, 437, 438, 439, 440, 442, 443, 444, 445, 446, 451, 452, 454, 455, 457, 459, 464, 466, 467, 470, 476, 478, 479, 481, 483, 486, 487, 489, 490, 491, 492, 493], "an": [13, 66, 67, 69, 104, 140, 142, 150, 158, 164, 185, 202, 203, 211, 216, 220, 235, 239, 244, 254, 259, 263, 276, 283, 284, 288, 289, 297, 298, 320, 336, 337, 341, 342, 345, 372, 377, 378, 397, 399, 410, 412, 414, 416, 417, 419, 420, 422, 438, 439, 440, 441, 442, 447, 455, 456, 457, 459, 463, 464, 467, 476, 478, 480, 481, 483, 487, 488, 489, 490, 491], "neural": [13, 150, 165, 166, 180, 181, 182, 183, 194, 202, 203, 230, 231, 232, 235, 236, 239, 242, 245, 273, 274, 276, 278, 283, 290, 291, 293, 306, 311, 314, 317, 319, 320, 325, 331, 336, 343, 344, 345, 349, 356, 378, 385, 386, 392, 407, 412, 415, 420, 421, 422, 437, 438, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 457, 458, 460, 461, 464, 466, 467, 469, 471, 473, 474, 475, 478, 479, 481, 483, 485, 486, 488, 489, 490, 491, 493, 494], "compressor": [13, 165, 166, 182, 183, 194, 202, 203, 230, 231, 232, 235, 236, 239, 242, 245, 273, 274, 276, 278, 283, 290, 291, 293, 314, 317, 319, 320, 325, 331, 336, 343, 344, 345, 349, 356, 378, 386, 392, 407, 412, 415, 417, 420, 421, 422, 437, 438, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 457, 458, 459, 460, 464, 466, 467, 469, 471, 473, 474, 475, 478, 479, 480, 481, 483, 485, 486, 488, 489, 490, 491, 492, 493, 494], "tupl": [13, 104, 147, 158, 172, 203, 206, 207, 231, 235, 249, 250, 273, 276, 281, 332, 345, 378, 393, 399, 421, 440, 455, 456, 483, 490], "symnet": 13, "arg": [13, 52, 104, 218, 219, 220, 261, 262, 263, 314, 323, 382, 397, 405, 406, 440, 445, 456, 465, 483, 485, 488, 489, 490], "aux": 13, "data": [13, 42, 43, 54, 104, 139, 147, 150, 155, 158, 159, 163, 178, 202, 203, 206, 207, 236, 238, 249, 250, 281, 283, 323, 333, 335, 336, 345, 371, 376, 378, 382, 394, 396, 399, 402, 407, 410, 419, 420, 438, 439, 440, 445, 449, 450, 453, 455, 456, 457, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492], "descript": [13, 131, 397, 415, 416, 421, 422, 439, 488], "ncmodel": 13, "fuse": [13, 57, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 90, 91, 92, 93, 95, 130, 135, 156, 158, 163, 416, 488, 489], "suppli": 13, "get_framework_nam": 13, "get": [13, 42, 44, 66, 67, 69, 103, 104, 147, 149, 155, 158, 159, 165, 172, 174, 175, 176, 178, 181, 188, 195, 196, 197, 198, 200, 203, 211, 235, 236, 242, 244, 254, 276, 281, 314, 316, 318, 326, 333, 335, 344, 353, 378, 387, 394, 396, 402, 410, 421, 438, 448, 452, 453, 456, 462, 481, 485, 488, 491, 492, 495], "name": [13, 43, 44, 52, 66, 67, 69, 103, 104, 109, 115, 139, 147, 148, 149, 150, 155, 156, 158, 159, 160, 165, 171, 172, 174, 178, 180, 185, 188, 189, 194, 195, 196, 197, 198, 200, 202, 203, 218, 219, 220, 223, 227, 233, 235, 236, 240, 243, 244, 261, 262, 263, 266, 270, 276, 279, 280, 281, 286, 291, 309, 314, 316, 318, 333, 335, 339, 344, 349, 353, 355, 378, 394, 396, 400, 402, 410, 416, 421, 422, 440, 442, 445, 447, 449, 454, 455, 456, 458, 462, 469, 473, 477, 480, 483, 486, 487, 489, 491, 493, 494], "context": [13, 410, 482, 485], "prepare_model_data": 13, "nc_model": [13, 306, 311], "data_x": 13, "prepar": [13, 158, 416, 419, 440, 445, 450, 483], "dataload": [13, 15, 42, 139, 140, 149, 150, 155, 158, 159, 165, 175, 176, 178, 194, 198, 206, 207, 218, 229, 239, 249, 250, 261, 272, 277, 283, 306, 311, 320, 336, 371, 376, 378, 399, 402, 416, 419, 420, 421, 442, 443, 444, 445, 450, 451, 456, 457, 479, 483, 484, 488, 489, 490, 492, 493], "need": [13, 42, 104, 108, 155, 159, 165, 178, 194, 203, 206, 207, 208, 216, 217, 220, 227, 235, 238, 240, 241, 249, 250, 251, 259, 260, 263, 270, 276, 281, 320, 326, 344, 345, 355, 378, 387, 399, 409, 410, 416, 420, 439, 440, 442, 443, 445, 452, 456, 459, 461, 462, 465, 469, 470, 471, 473, 474, 476, 477, 480, 482, 483, 484, 485, 486, 488, 490, 491, 493], "run": [13, 139, 147, 159, 165, 185, 198, 202, 203, 206, 207, 217, 234, 236, 249, 250, 260, 275, 315, 316, 323, 345, 378, 382, 399, 415, 420, 437, 445, 448, 449, 456, 459, 461, 463, 464, 465, 467, 469, 470, 471, 473, 474, 476, 481, 483, 485, 486, 487, 489, 491, 493], "loader": [13, 139, 206, 207, 249, 250, 345, 378, 399, 405, 439, 483], "dataloaderwrap": 13, "prepare_model": 13, "create_data_exampl": 13, "creat": [13, 16, 104, 202, 203, 208, 218, 220, 238, 251, 261, 263, 287, 297, 298, 333, 340, 372, 377, 394, 396, 397, 402, 414, 417, 420, 440, 458, 469, 471, 473, 474, 477, 483, 487, 489, 491, 492], "exampl": [13, 150, 158, 159, 165, 172, 178, 179, 194, 202, 203, 218, 219, 220, 231, 235, 261, 262, 263, 273, 276, 287, 288, 289, 291, 317, 340, 341, 342, 344, 345, 355, 378, 396, 397, 399, 414, 415, 419, 421, 422, 427, 451, 452, 459, 462, 463, 464, 467, 484, 486, 490, 491, 492, 495], "prepare_dataload": 13, "io": 13, "ndarray_to_devic": 13, "ndarrai": [13, 42, 43, 66, 67, 69, 235, 276, 400, 448, 490], "devic": [13, 78, 88, 89, 90, 91, 92, 93, 96, 106, 130, 135, 146, 149, 159, 175, 178, 179, 194, 198, 202, 203, 421, 439, 443, 456, 457, 459, 462, 467, 476, 482, 485], "is_model_quant": 13, "query_quantizable_nod": 13, "node": [13, 42, 43, 49, 52, 53, 54, 55, 59, 61, 63, 66, 67, 69, 73, 76, 79, 81, 82, 83, 97, 101, 102, 104, 109, 131, 139, 147, 178, 279, 281, 353, 377, 420, 421, 442, 445, 489, 491, 494], "given": [13, 16, 66, 67, 69, 103, 104, 115, 147, 158, 235, 276, 287, 340, 378, 417, 422, 480, 488, 490], "map": [13, 43, 104, 147, 203, 235, 276, 279, 281, 282, 286, 288, 289, 291, 306, 311, 316, 319, 339, 341, 342, 344, 440, 445, 455, 456, 469, 473, 480, 483, 485], "quantize_sym_model": 13, "qconfig": [13, 158, 485, 489], "accord": [13, 121, 158, 165, 202, 203, 218, 219, 220, 235, 261, 262, 263, 276, 326, 385, 387, 402, 417, 420, 440, 445, 480, 484, 488, 490, 491], "run_forward": 13, "b_filter": 13, "collector": [13, 150, 400], "pre_batch": 13, "post_batch": 13, "forward": [13, 198, 419, 421, 456, 480, 482, 483, 485, 488, 489], "propag": [13, 99], "filter": [13, 218, 219, 220, 221, 222, 223, 225, 229, 261, 262, 263, 264, 265, 266, 268, 272, 283, 336, 410, 422, 440, 452, 480, 489], "which": [13, 42, 54, 82, 109, 149, 150, 155, 174, 178, 179, 181, 185, 186, 187, 189, 192, 193, 194, 196, 198, 202, 203, 218, 219, 220, 231, 236, 261, 262, 263, 273, 284, 289, 298, 300, 301, 303, 304, 305, 309, 314, 315, 316, 318, 323, 337, 342, 344, 349, 355, 378, 382, 410, 414, 416, 417, 420, 421, 422, 438, 439, 440, 442, 443, 445, 448, 449, 452, 455, 456, 457, 458, 460, 464, 467, 470, 476, 477, 479, 480, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493], "batch": [13, 158, 208, 210, 211, 216, 217, 238, 251, 253, 254, 259, 260, 399, 439, 443, 444, 456, 479, 480, 490, 491, 494], "infer": [13, 104, 159, 178, 282, 319, 353, 355, 378, 399, 420, 421, 438, 443, 444, 456, 457, 476, 478, 480, 481, 483, 485, 488, 489, 491], "collect": [13, 16, 43, 158, 233, 235, 238, 240, 241, 243, 276, 289, 291, 342, 344, 400, 410, 421, 483, 489, 491], "inform": [13, 150, 174, 175, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 203, 206, 207, 238, 240, 241, 249, 250, 314, 316, 317, 318, 320, 344, 410, 414, 415, 418, 419, 420, 421, 422, 423, 425, 429, 432, 435, 438, 443, 449, 456, 458, 471, 474, 477, 480, 484, 486, 489, 493, 494, 495], "dure": [13, 139, 180, 184, 196, 202, 203, 314, 318, 355, 410, 421, 442, 456, 458, 478, 479, 480, 483, 488, 489, 493], "call": [13, 42, 155, 160, 178, 186, 187, 192, 287, 316, 340, 416, 417, 420, 439, 451, 465, 467, 477, 483, 488, 489, 490], "prior": [13, 87, 491], "after": [13, 77, 158, 176, 180, 185, 187, 192, 202, 203, 218, 231, 235, 238, 261, 273, 276, 316, 383, 397, 410, 417, 421, 440, 442, 443, 444, 447, 452, 455, 456, 469, 470, 473, 477, 478, 479, 480, 483, 484, 487, 488, 489, 490, 491], "count": [13, 417, 440, 485], "int": [13, 16, 42, 43, 104, 139, 147, 154, 158, 159, 176, 202, 203, 217, 218, 219, 231, 235, 260, 261, 262, 273, 276, 280, 281, 285, 287, 291, 298, 338, 340, 344, 363, 372, 377, 396, 397, 410, 439, 440, 455, 456, 482, 490], "make_symbol_block": 13, "gluon": [13, 345, 378, 458], "symbolblock": 13, "make_modul": 13, "parse_tune_config": 13, "tune_cfg": [13, 147, 148, 158, 420, 422, 491], "quantizable_nod": 13, "strategi": [13, 158, 192, 202, 203, 204, 220, 247, 263, 283, 336, 419, 420, 421, 422, 427, 438, 439, 445, 452, 456, 464, 476, 481, 482, 483, 484, 486, 492, 493], "config": [13, 114, 115, 117, 121, 158, 165, 174, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 202, 206, 207, 218, 249, 250, 261, 300, 301, 303, 304, 305, 306, 311, 314, 315, 316, 317, 318, 333, 334, 336, 345, 372, 377, 394, 395, 396, 397, 399, 402, 409, 410, 417, 419, 421, 422, 427, 437, 439, 442, 443, 444, 445, 447, 450, 452, 455, 456, 457, 458, 479, 480, 482, 483, 484, 485, 487, 489, 491], "tune": [13, 44, 165, 202, 203, 206, 207, 218, 220, 249, 250, 261, 263, 282, 319, 321, 322, 323, 324, 326, 327, 328, 329, 332, 333, 334, 335, 345, 355, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 393, 394, 395, 396, 399, 410, 420, 421, 438, 439, 440, 442, 445, 452, 454, 456, 457, 476, 478, 480, 481, 484, 485, 486, 487, 489, 493], "from": [13, 43, 44, 60, 66, 67, 69, 104, 147, 155, 158, 165, 166, 167, 172, 174, 175, 181, 182, 183, 184, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 202, 203, 206, 207, 208, 211, 215, 218, 219, 220, 221, 222, 223, 225, 230, 231, 237, 238, 241, 249, 250, 251, 254, 258, 261, 262, 263, 264, 265, 266, 268, 273, 277, 279, 280, 281, 284, 287, 288, 289, 293, 298, 314, 315, 316, 318, 333, 335, 337, 340, 341, 342, 345, 353, 355, 378, 394, 396, 397, 399, 402, 409, 410, 414, 416, 417, 420, 422, 437, 439, 440, 442, 443, 444, 445, 446, 447, 448, 450, 452, 455, 457, 458, 459, 463, 464, 465, 467, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492], "distribute_calib_tensor": 13, "calib_tensor": 13, "calib_cfg": 13, "tensor_to_nod": 13, "distribut": [13, 16, 142, 164, 202, 203, 208, 210, 211, 213, 216, 217, 238, 251, 253, 254, 256, 259, 260, 404, 419, 421, 439, 443, 453, 471, 474, 481, 483, 485, 486, 488, 492, 494], "depend": [13, 206, 207, 236, 249, 250, 345, 378, 399, 415, 448, 449, 482, 483, 491], "algorithm": [13, 149, 158, 171, 199, 203, 284, 291, 299, 336, 337, 344, 402, 404, 417, 420, 421, 422, 443, 444, 449, 452, 465, 470, 480, 483, 485, 489, 493], "set": [13, 43, 56, 95, 104, 114, 147, 155, 158, 165, 198, 200, 202, 203, 206, 207, 208, 218, 220, 223, 235, 236, 241, 242, 249, 250, 251, 261, 263, 266, 276, 287, 293, 306, 311, 315, 320, 340, 344, 345, 353, 377, 378, 397, 399, 407, 410, 414, 417, 421, 437, 439, 440, 443, 445, 447, 449, 451, 452, 453, 455, 456, 457, 459, 461, 463, 477, 480, 482, 483, 485, 487, 488, 491, 493], "kl": [13, 16, 202, 203, 400, 404, 421, 422, 438, 449, 456, 491, 493], "minmax": [13, 16, 421, 422, 438, 449, 483, 493], "calib_model": 13, "qsym_model": 13, "calib_data": 13, "calibdata": 13, "threshold": [13, 161, 400, 404, 455], "amp_convert": 13, "amp_cfg": 13, "support": [13, 42, 43, 96, 103, 155, 163, 167, 175, 181, 188, 192, 193, 202, 203, 206, 207, 217, 218, 220, 227, 231, 235, 237, 238, 239, 242, 249, 250, 260, 261, 263, 270, 273, 276, 283, 291, 293, 298, 314, 316, 320, 327, 333, 336, 344, 345, 349, 355, 378, 388, 394, 397, 399, 402, 404, 410, 412, 419, 421, 456, 459, 464, 467, 470, 476, 481, 484, 487, 491, 492], "amp": [13, 459, 466], "wrap": [13, 104, 115, 167, 237, 287, 340, 416, 445, 471, 474], "dataiterload": 13, "data_it": [13, 178], "collectorbas": 13, "calibcollector": 13, "include_tensors_kl": 13, "include_tensors_minmax": 13, "num_bin": [13, 16, 400], "8001": [13, 400], "tensorcollector": 13, "include_nod": 13, "qtensor_to_tensor": 13, "build": [13, 42, 114, 160, 161, 163, 164, 189, 294, 297, 348, 350, 352, 353, 354, 420, 421, 422, 453, 458, 469, 471, 473, 474, 477, 481, 487, 491], "up": [13, 99, 189, 235, 276, 315, 445, 446, 449, 452, 467, 471, 474, 476, 481, 482, 483, 487, 490, 491, 493], "namecollector": 13, "cache_kl": 13, "cache_minmax": 13, "tensors_kl": 13, "tensors_minmax": 13, "onnxruntimeadaptor": 14, "rt": 14, "onnxrt_qlinearopsadaptor": [14, 420], "onnxrt_integeropsadaptor": 14, "onnxrt_qdqadaptor": 14, "onnxrtaug": 15, "dump_op_typ": 15, "black_nod": [15, 139], "white_nod": 15, "cpuexecutionprovid": [15, 41, 42, 457, 483], "reduce_rang": [15, 41, 42, 202, 203, 422, 482], "augment": 15, "dump": [15, 158, 165, 281, 410, 483, 486, 489], "calib_registri": 16, "calib_method": 16, "calibratorbas": 16, "minmaxcalibr": 16, "percentilecalibr": 16, "2048": [16, 410], "percentil": [16, 139, 159, 438], "99": [16, 488, 494], "999": [16, 493], "option": [16, 104, 159, 180, 202, 203, 206, 207, 218, 235, 249, 250, 261, 276, 280, 281, 287, 293, 314, 320, 333, 336, 340, 344, 345, 378, 394, 396, 397, 399, 403, 410, 421, 422, 439, 440, 449, 453, 456, 470, 480, 483, 485, 487, 490, 491, 493], "number": [16, 66, 67, 104, 139, 158, 159, 172, 176, 182, 183, 202, 203, 216, 219, 231, 235, 259, 262, 273, 276, 288, 289, 291, 314, 323, 341, 342, 344, 372, 377, 382, 397, 402, 410, 437, 439, 440, 445, 455, 480, 483, 485, 487, 490, 491], "bin": [16, 410, 448], "histogram": [16, 400, 410, 489], "valu": [16, 43, 54, 66, 67, 69, 88, 89, 104, 142, 147, 158, 164, 165, 172, 174, 178, 179, 189, 197, 198, 199, 200, 202, 203, 206, 207, 218, 221, 222, 231, 235, 236, 249, 250, 261, 264, 265, 273, 276, 287, 291, 315, 323, 326, 333, 340, 344, 345, 378, 382, 387, 394, 396, 397, 399, 400, 402, 410, 416, 421, 422, 438, 440, 442, 449, 455, 456, 457, 462, 478, 480, 482, 483, 485, 486, 488, 490, 491, 493], "default": [16, 96, 147, 159, 198, 200, 202, 203, 206, 207, 210, 218, 219, 220, 231, 235, 249, 250, 253, 261, 262, 263, 273, 276, 280, 281, 284, 293, 315, 335, 337, 344, 353, 396, 402, 410, 416, 420, 439, 440, 449, 452, 453, 455, 456, 457, 464, 467, 469, 473, 478, 480, 482, 483, 484, 485, 487, 488, 490, 491, 493], "float": [16, 43, 139, 140, 150, 159, 180, 185, 195, 198, 202, 203, 218, 231, 261, 273, 285, 287, 288, 289, 316, 338, 340, 341, 342, 393, 397, 407, 410, 440, 455, 482, 483, 488, 490], "A": [16, 53, 73, 74, 102, 115, 139, 140, 147, 158, 159, 166, 171, 172, 174, 175, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 202, 203, 220, 235, 238, 240, 241, 263, 276, 277, 284, 287, 288, 289, 291, 294, 297, 298, 299, 306, 309, 311, 314, 315, 316, 317, 318, 323, 337, 340, 341, 342, 344, 345, 349, 353, 382, 399, 410, 419, 421, 439, 440, 446, 449, 455, 456, 458, 469, 470, 473, 476, 480, 481, 483, 485, 488, 490, 491, 493], "between": [16, 42, 142, 164, 191, 202, 203, 235, 276, 288, 291, 341, 344, 372, 377, 410, 416, 420, 421, 422, 438, 442, 443, 452, 455, 456, 467, 483, 486, 487, 488, 490, 491], "0": [16, 43, 52, 89, 104, 147, 158, 159, 161, 163, 167, 172, 174, 176, 198, 202, 203, 208, 210, 213, 217, 218, 221, 222, 225, 231, 235, 237, 238, 251, 253, 256, 260, 261, 264, 265, 268, 273, 276, 281, 282, 291, 298, 306, 311, 319, 344, 355, 378, 383, 397, 416, 439, 440, 443, 445, 447, 448, 449, 453, 454, 455, 456, 457, 462, 464, 469, 473, 480, 482, 483, 485, 486, 487, 488, 489, 490, 491, 493], "100": [16, 165, 172, 202, 203, 220, 263, 397, 437, 440, 445, 451, 456, 482, 483, 488, 490, 491, 493, 494], "klcalibr": 16, "128": [16, 158, 159, 218, 221, 222, 235, 261, 264, 265, 276, 440, 456, 483, 490], "num_quantized_bin": 16, "histogramcollector": 16, "collctor": 16, "smooth_distribut": 16, "p": [16, 477, 485], "ep": [16, 164, 457], "0001": [16, 172, 202, 203, 443, 456, 482], "smooth": [16, 139, 140, 147, 155, 163, 202, 203, 332, 480], "discret": [16, 172, 491], "mai": [16, 147, 300, 301, 303, 304, 305, 397, 414, 415, 421, 438, 442, 447, 448, 454, 457, 469, 473, 481, 483, 491], "have": [16, 73, 82, 140, 147, 175, 179, 181, 188, 216, 238, 259, 284, 287, 314, 316, 337, 340, 344, 378, 396, 397, 414, 415, 421, 422, 439, 440, 442, 445, 449, 454, 455, 456, 457, 459, 476, 478, 480, 483, 485, 488, 491, 492], "been": [16, 175, 181, 188, 284, 314, 316, 337, 415, 417, 422, 443, 456, 457, 476, 485, 488], "normal": [16, 33, 235, 276, 289, 342, 456, 478, 485, 488, 490], "1": [16, 42, 43, 53, 73, 88, 104, 108, 112, 145, 147, 153, 155, 158, 159, 161, 163, 164, 165, 167, 172, 174, 186, 187, 189, 202, 203, 208, 210, 213, 217, 218, 219, 221, 222, 225, 226, 231, 235, 236, 237, 238, 251, 253, 256, 260, 261, 262, 264, 265, 268, 269, 273, 276, 282, 287, 288, 289, 291, 306, 311, 316, 319, 320, 340, 341, 342, 344, 355, 378, 396, 397, 402, 414, 416, 419, 420, 422, 438, 439, 440, 442, 443, 447, 449, 450, 453, 455, 457, 460, 462, 478, 479, 480, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493], "replac": [16, 155, 159, 289, 342, 445, 456, 467, 486], "zero": [16, 43, 149, 159, 185, 198, 235, 276, 316, 410, 419, 480, 483, 485, 488, 490, 491], "multipli": 16, "scale": [16, 43, 99, 140, 142, 149, 153, 155, 157, 158, 159, 163, 164, 231, 235, 273, 276, 483, 485, 487, 488, 490, 491], "factor": [16, 140, 485, 488, 494], "take": [16, 180, 203, 206, 207, 211, 235, 240, 249, 250, 254, 276, 314, 323, 344, 345, 378, 382, 399, 414, 416, 417, 439, 442, 443, 449, 456, 476, 480, 483, 484, 490, 491, 493], "correspond": [16, 150, 178, 189, 202, 203, 218, 261, 284, 287, 291, 337, 340, 344, 402, 410, 420, 449, 456, 480, 482, 483, 487, 488, 491], "amount": 16, "off": [16, 66, 67, 69, 415, 485], "non": [16, 315, 410, 416, 442, 491], "ref": [16, 147], "http": [16, 149, 150, 174, 182, 183, 192, 193, 194, 218, 220, 261, 263, 284, 285, 287, 288, 289, 314, 316, 317, 337, 338, 340, 341, 342, 344, 378, 416, 419, 440, 442, 450, 453, 454, 456, 465, 471, 474, 486], "hanj": 16, "c": [16, 73, 220, 263, 440, 448, 453, 485, 491], "illinoi": 16, "edu": [16, 220, 263, 440], "cs412": 16, "bk3": 16, "diverg": [16, 400, 404, 422, 438, 443, 491], "pdf": 16, "github": [16, 150, 182, 183, 194, 218, 261, 284, 285, 288, 289, 314, 317, 337, 338, 341, 342, 344, 378, 415, 440, 442, 446, 453, 454, 456, 465, 471, 474, 486], "com": [16, 150, 182, 183, 194, 218, 261, 284, 285, 288, 289, 314, 317, 337, 338, 341, 342, 344, 378, 414, 419, 440, 442, 450, 453, 454, 456, 459, 465, 486, 487, 494], "apach": [16, 454], "incub": 16, "blob": [16, 150, 182, 183, 284, 285, 288, 289, 314, 337, 338, 341, 342, 344, 378, 456, 465], "master": [16, 182, 183, 194, 284, 285, 288, 289, 314, 317, 337, 338, 341, 342, 344, 378, 456, 491], "python": [16, 74, 147, 220, 239, 263, 283, 336, 397, 410, 412, 415, 416, 440, 442, 445, 448, 453, 456, 461, 467, 470, 476, 481, 490], "contrib": [16, 283, 336], "py": [16, 147, 150, 165, 185, 202, 203, 285, 287, 288, 289, 316, 338, 340, 341, 342, 397, 416, 420, 442, 445, 453, 456, 461, 463, 464, 465, 471, 474, 483, 486, 489], "microsoft": [16, 420], "onnxruntim": [16, 202, 203, 214, 220, 227, 257, 263, 270, 292, 372, 420, 438, 439, 452, 453, 457, 482], "main": [16, 149, 172, 189, 194, 242, 317, 416, 439, 442, 445, 456, 463, 465, 477, 480, 483, 485], "tool": [16, 147, 280, 410, 419, 420, 456, 469, 473, 480, 481, 483], "arrai": [16, 43, 147, 235, 276, 287, 298, 340, 410, 490], "small": [16, 66, 67, 68, 385, 417, 480, 485, 491, 494], "probabl": [16, 202, 203, 404, 485], "activationoper": 18, "onnx_quant": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "onnx_nod": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 86, 100, 110], "removableactivationoper": 18, "remov": [18, 43, 55, 56, 59, 73, 79, 82, 83, 84, 95, 97, 139, 176, 189, 289, 342, 414, 415, 456, 469, 473, 480, 489], "qactivationoper": 18, "children": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39], "initi": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 42, 43, 104, 115, 147, 167, 185, 206, 207, 215, 218, 237, 249, 250, 258, 261, 315, 316, 333, 378, 394, 399, 417, 422, 440, 455, 475, 480, 483, 488, 491], "qoper": [18, 34, 202, 203, 447], "format": [18, 43, 52, 147, 202, 203, 218, 219, 220, 261, 262, 263, 281, 287, 293, 333, 340, 394, 397, 421, 422, 440, 445, 447, 455, 456, 457, 458, 459, 483, 486], "float16activationoper": 18, "float16": [18, 21, 43, 440, 485], "argmaxoper": 19, "qargmaxoper": 19, "attentionoper": 20, "qattentionoper": 20, "qattent": 20, "binari": [21, 147, 291, 344, 448, 455, 471, 474, 486], "binaryoper": 21, "qbinaryoper": 21, "qbinari": 21, "float16binaryoper": 21, "concatoper": 22, "qconcatoper": 22, "qconcat": 22, "convoper": 23, "qconvoper": 23, "qlinearconv": 23, "direct8bit": 24, "direct8bitoper": 24, "qdirectoper": 24, "qdirect": 24, "embedlayernorm": 25, "embedlayernormalizationoper": 25, "qembedlayernormalizationoper": 25, "qembedlayernorm": 25, "gatheroper": 26, "qgatheroper": 26, "qgather": 26, "globalaveragepool": 27, "globalaveragepooloper": 27, "qglobalaveragepooloper": 27, "qlinearglobalaveragepool": 27, "gemmoper": 28, "qgemmoper": 28, "qgemm": 28, "lstmoper": 30, "matmuloper": 31, "qmatmuloper": 31, "qlinearmatmul": 31, "fusedmatmuloper": 31, "fusedmatmul": 31, "maxpooloper": 32, "qmaxpooloper": 32, "qmaxpool": 32, "batchnormalizationoper": 33, "batchnorm": [33, 61, 66, 120, 416, 488], "normalizationoper": 33, "op_registri": 34, "op_typ": [34, 139, 147, 334, 395], "qop_registri": 34, "padoper": 35, "qpadoper": 35, "qpad": 35, "averagepool": 36, "pooloper": 36, "qpooloper": 36, "qlinearaveragepool": 36, "reduceoper": 37, "resizeoper": 38, "qresizeoper": 38, "qresiz": 38, "splitoper": 39, "qsplitoper": 39, "qsplit": 39, "unari": 40, "unaryoper": 40, "q_config": [41, 158, 281, 420], "mode": [41, 42, 43, 44, 109, 155, 227, 270, 287, 333, 340, 353, 394, 407, 410, 420, 421, 442, 452, 469, 473, 483, 484, 491], "static": [41, 42, 46, 155, 163, 178, 203, 281, 333, 378, 394, 420, 421, 422, 442, 447, 452, 456, 459, 464, 465, 466, 467, 470, 476, 488, 491, 494], "quantization_param": 41, "op_types_to_quant": 41, "fallback_list": 41, "fp32": [41, 42, 78, 130, 135, 142, 158, 159, 164, 202, 203, 206, 207, 249, 250, 280, 281, 291, 326, 333, 344, 383, 387, 394, 402, 409, 410, 419, 420, 422, 442, 449, 450, 455, 456, 457, 466, 482, 483, 484, 485, 486, 487, 488, 489, 491, 493, 494], "add_qdq_pair_to_weight": [41, 202, 203, 483], "optypes_to_exclude_output_qu": [41, 202, 203, 483], "dedicated_qdq_pair": [41, 202, 203, 483], "smoothquant": [42, 155, 158, 163, 419, 481, 485, 492], "onnxrt": [42, 43, 218, 220, 227, 235, 261, 263, 270, 276, 291, 344, 371, 408, 420, 442, 457, 483, 494], "get_quant_dequant_output": 42, "input_data": [42, 439], "output_data": 42, "loss": [42, 167, 202, 203, 237, 282, 291, 306, 311, 319, 344, 399, 438, 442, 443, 444, 445, 446, 455, 456, 457, 467, 479, 480, 483, 485, 488, 491, 493], "output": [42, 43, 52, 56, 58, 73, 97, 104, 109, 147, 158, 159, 178, 179, 184, 198, 200, 202, 203, 206, 207, 240, 244, 249, 250, 280, 281, 284, 314, 337, 344, 345, 353, 378, 399, 405, 406, 410, 416, 420, 421, 443, 444, 445, 447, 449, 451, 455, 456, 458, 467, 476, 477, 479, 480, 482, 483, 485, 486, 488, 489, 490, 491, 493], "numpi": [42, 43, 66, 67, 69, 104, 147, 235, 276, 287, 298, 340, 448, 490], "7": [42, 159, 165, 202, 203, 355, 422, 437, 448, 449, 453, 456, 480, 483, 486, 488, 491, 494], "bit": [42, 158, 159, 202, 203, 396, 422, 438, 444, 457, 481, 483, 485, 488], "execut": [42, 43, 52, 149, 165, 185, 186, 187, 202, 203, 316, 320, 322, 377, 378, 379, 381, 399, 402, 409, 410, 442, 443, 444, 456, 457, 461, 462, 469, 470, 473, 476, 477, 479, 480, 483, 487, 491, 494], "provid": [42, 43, 101, 104, 109, 178, 206, 207, 235, 249, 250, 276, 282, 287, 306, 311, 319, 320, 340, 345, 378, 399, 403, 405, 417, 419, 420, 421, 422, 437, 439, 442, 444, 445, 446, 452, 453, 455, 456, 457, 458, 459, 463, 467, 470, 476, 477, 480, 482, 483, 485, 489, 491, 492, 493, 494], "make_sub_graph": 42, "opset": [42, 101, 103, 104, 203, 280, 281, 447], "ir_vers": 42, "thi": [42, 44, 85, 109, 131, 138, 142, 146, 150, 158, 159, 164, 166, 171, 176, 178, 180, 182, 183, 184, 185, 189, 190, 191, 192, 194, 195, 196, 202, 203, 206, 207, 217, 218, 219, 220, 221, 222, 223, 225, 235, 238, 244, 245, 249, 250, 260, 261, 262, 263, 264, 265, 266, 268, 276, 284, 287, 288, 289, 291, 300, 301, 303, 304, 305, 306, 311, 314, 316, 318, 319, 320, 323, 326, 337, 340, 341, 342, 344, 345, 355, 378, 382, 387, 396, 397, 399, 409, 410, 414, 415, 416, 417, 420, 421, 422, 438, 439, 440, 443, 444, 445, 447, 448, 449, 452, 454, 455, 456, 457, 458, 459, 461, 462, 464, 465, 467, 469, 471, 473, 474, 475, 476, 477, 480, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492], "quant_dequant_data": 42, "qtype": [42, 43, 420], "3": [42, 147, 187, 203, 220, 235, 263, 276, 287, 340, 397, 416, 417, 419, 438, 439, 440, 443, 445, 447, 449, 450, 453, 455, 456, 457, 459, 463, 467, 469, 473, 478, 482, 483, 485, 486, 487, 488, 490, 491, 494], "scheme": [42, 43, 153, 158, 159, 420, 421, 422, 439, 449, 467, 485, 491, 493], "sym": [42, 43, 159, 421, 422, 449, 483, 485, 493], "dequant": [42, 43, 56, 87, 90, 91, 92, 93, 95, 150, 158, 159, 410, 416, 421, 488, 489], "asym": [42, 43, 153, 158, 159, 422, 449, 485, 493], "ortsmoothqu": 42, "fake": [42, 112, 153, 155, 159, 163, 396, 456, 483, 485, 488], "channel": [42, 43, 142, 155, 159, 163, 164, 176, 179, 184, 202, 203, 231, 235, 273, 276, 314, 420, 422, 452, 453, 459, 461, 466, 480, 485, 490, 494], "For": [42, 159, 163, 178, 179, 182, 183, 194, 203, 220, 235, 263, 276, 288, 289, 291, 314, 317, 341, 342, 344, 345, 378, 414, 416, 418, 420, 422, 443, 444, 445, 447, 449, 452, 459, 461, 462, 464, 467, 480, 484, 488, 489, 491, 493, 494], "more": [42, 147, 155, 163, 182, 183, 235, 276, 314, 417, 418, 419, 421, 438, 440, 443, 445, 447, 450, 452, 453, 456, 457, 459, 467, 471, 474, 478, 479, 480, 484, 485, 488, 491, 492, 494], "detail": [42, 155, 163, 178, 235, 276, 410, 411, 414, 415, 419, 421, 422, 438, 443, 449, 450, 451, 455, 456, 457, 459, 467, 476, 480, 486, 487, 489, 491, 492], "pleas": [42, 149, 150, 155, 163, 174, 182, 183, 184, 192, 193, 194, 202, 203, 218, 219, 220, 223, 261, 262, 263, 266, 314, 316, 317, 344, 378, 397, 416, 417, 418, 419, 420, 437, 438, 440, 444, 445, 447, 453, 455, 457, 459, 460, 464, 467, 480, 483, 484, 486, 487, 488, 492], "refer": [42, 149, 150, 155, 163, 174, 182, 183, 184, 192, 193, 194, 198, 202, 203, 218, 261, 284, 285, 291, 314, 316, 317, 337, 338, 344, 378, 397, 416, 420, 421, 437, 439, 440, 442, 444, 445, 447, 451, 453, 454, 455, 456, 457, 459, 464, 467, 478, 482, 486, 490, 491], "accur": [42, 149, 155, 163, 193, 485, 488], "effici": [42, 155, 163, 417, 438, 439, 443, 459, 479, 481, 485, 488, 491], "post": [42, 96, 97, 149, 155, 163, 192, 203, 206, 207, 249, 250, 378, 414, 419, 420, 421, 442, 444, 445, 447, 452, 453, 459, 465, 476, 480, 481, 485, 488, 489, 491], "train": [42, 55, 79, 149, 155, 163, 166, 186, 187, 190, 192, 193, 202, 203, 206, 207, 218, 220, 235, 245, 249, 250, 261, 263, 276, 277, 293, 316, 336, 378, 402, 417, 420, 421, 427, 440, 442, 443, 444, 447, 452, 457, 459, 465, 476, 479, 480, 481, 485, 487, 488, 491, 493], "larg": [42, 155, 163, 193, 419, 439, 443, 456, 480, 481, 485, 488, 494], "languag": [42, 155, 163, 193, 284, 337, 414, 419, 447, 480, 481, 485, 488], "2": [42, 43, 52, 73, 104, 108, 155, 159, 161, 163, 165, 180, 186, 187, 202, 203, 219, 236, 262, 287, 289, 291, 316, 323, 340, 342, 344, 355, 382, 397, 416, 419, 420, 438, 439, 440, 442, 443, 449, 452, 453, 454, 455, 457, 478, 480, 481, 483, 485, 486, 487, 488, 490, 491, 492], "spiq": [42, 155, 163, 488], "free": [42, 155, 163, 192, 206, 207, 249, 250, 378, 414, 419, 465, 470, 478, 487, 488], "per": [42, 43, 155, 159, 163, 165, 202, 203, 236, 404, 420, 422, 439, 484, 485, 494], "we": [42, 43, 66, 67, 69, 73, 85, 142, 155, 163, 164, 165, 178, 182, 189, 202, 203, 217, 236, 238, 260, 284, 287, 337, 340, 385, 414, 416, 420, 421, 422, 439, 442, 445, 447, 449, 455, 456, 463, 464, 467, 471, 474, 476, 477, 478, 479, 480, 482, 483, 485, 486, 487, 488, 489, 491, 492], "onli": [42, 52, 62, 69, 85, 108, 114, 142, 155, 157, 159, 163, 164, 165, 172, 175, 181, 188, 202, 203, 218, 236, 238, 242, 261, 281, 293, 314, 316, 327, 378, 388, 396, 397, 410, 419, 420, 421, 422, 437, 438, 439, 442, 443, 445, 448, 449, 456, 457, 464, 477, 480, 481, 482, 483, 488, 489, 491, 492, 493], "inplac": [42, 155], "mean": [42, 155, 180, 189, 202, 203, 231, 235, 273, 276, 289, 291, 314, 326, 342, 344, 387, 416, 421, 422, 439, 442, 445, 449, 455, 456, 462, 480, 483, 485, 488, 490, 491, 493], "weight": [42, 43, 59, 60, 121, 140, 142, 147, 150, 155, 157, 158, 159, 164, 174, 175, 179, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 195, 197, 202, 203, 281, 314, 316, 333, 344, 378, 385, 394, 396, 410, 411, 419, 420, 421, 422, 438, 442, 444, 449, 451, 456, 478, 480, 482, 483, 488, 489, 491, 492, 493], "chang": [42, 95, 142, 155, 164, 186, 187, 189, 190, 192, 193, 196, 202, 203, 316, 318, 385, 410, 415, 421, 439, 445, 448, 454, 456, 459, 469, 470, 473, 476, 480, 489, 490, 491], "you": [42, 155, 202, 203, 216, 218, 259, 261, 316, 344, 378, 415, 416, 421, 439, 440, 442, 445, 453, 454, 455, 457, 459, 461, 462, 464, 469, 473, 476, 477, 480, 483, 486, 487, 488, 489, 492], "can": [42, 142, 150, 155, 164, 171, 178, 179, 180, 185, 193, 194, 196, 202, 203, 206, 207, 217, 220, 235, 236, 238, 249, 250, 260, 263, 276, 287, 289, 291, 314, 316, 318, 340, 342, 344, 345, 355, 378, 399, 410, 416, 417, 419, 420, 421, 422, 437, 439, 440, 442, 443, 444, 445, 447, 449, 452, 453, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 467, 469, 470, 471, 473, 474, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494], "recov": [42, 155, 410, 420, 444, 488], "helper": [43, 44, 109, 115, 147, 158, 218, 219, 220, 234, 261, 262, 263, 275, 279, 280, 281, 353, 408], "dtype_to_nam": 43, "dtype_map": 43, "dtype": [43, 101, 104, 202, 203, 221, 222, 231, 235, 264, 265, 273, 276, 421, 422, 440, 442, 447, 449, 459, 482, 483, 485, 488, 489, 490, 493], "its": [43, 59, 95, 147, 150, 178, 187, 190, 192, 198, 203, 214, 220, 235, 257, 263, 276, 279, 285, 286, 316, 323, 338, 339, 382, 414, 440, 443, 454, 455, 457, 467, 469, 473, 476, 477, 480, 485, 487, 490, 491], "string": [43, 44, 115, 147, 149, 165, 167, 171, 172, 178, 180, 185, 194, 195, 196, 198, 199, 202, 203, 220, 237, 242, 263, 277, 282, 284, 287, 293, 294, 295, 297, 298, 306, 311, 314, 315, 316, 317, 318, 319, 337, 340, 349, 353, 402, 407, 410, 455, 488, 490], "represent": [43, 414, 416, 438, 444, 480, 483], "quanttyp": [43, 396], "repres": [43, 180, 184, 185, 194, 195, 198, 220, 225, 263, 268, 287, 289, 291, 340, 342, 344, 414, 422, 438, 440, 447, 480, 483, 491], "make_quant_nod": 43, "make": [43, 104, 142, 164, 171, 180, 185, 194, 196, 216, 259, 314, 316, 318, 410, 414, 415, 420, 421, 437, 439, 449, 455, 456, 464, 469, 473, 476, 483, 484, 485, 487, 488, 491], "quantizelinear": 43, "make_dquant_nod": 43, "axi": [43, 203], "dequantizelinear": 43, "is_b_transpos": 43, "wheter": 43, "inuput": 43, "b": [43, 73, 218, 261, 438, 440, 455, 480, 485, 488, 491], "transpos": [43, 72, 184, 231, 235, 276, 280, 314, 490], "split_shared_bia": 43, "share": [43, 81, 97, 108, 140, 159, 448, 449, 488, 491], "float_to_float16": 43, "float_to_bfloat16": 43, "bfloat16": [43, 457, 459, 467, 484], "cast_tensor": 43, "tensorproto": [43, 104], "remove_init_from_model_input": 43, "collate_pr": 43, "result": [43, 147, 150, 158, 231, 235, 273, 276, 284, 287, 288, 289, 291, 337, 340, 341, 342, 344, 358, 378, 385, 399, 409, 410, 414, 417, 419, 439, 442, 443, 445, 452, 454, 455, 456, 464, 465, 476, 477, 478, 480, 481, 483, 485, 487, 488, 489, 490, 491, 492, 494], "quantize_data_with_scale_zero": 43, "zero_point": 43, "point": [43, 159, 231, 273, 288, 289, 298, 323, 341, 342, 382, 410, 455, 476, 483, 485, 488, 490, 491], "To": [43, 287, 340, 355, 415, 421, 422, 440, 442, 445, 457, 460, 463, 469, 471, 473, 474, 482, 484, 485, 486, 488, 491, 493], "pack": [43, 60], "comput": [43, 104, 150, 158, 284, 285, 288, 289, 291, 337, 338, 341, 342, 344, 399, 410, 438, 439, 444, 447, 455, 456, 457, 459, 470, 480, 481, 483, 485, 488, 491], "linear": [43, 149, 153, 157, 163, 176, 178, 179, 184, 189, 198, 202, 203, 314, 416, 443, 447, 456, 480, 485, 488, 491], "transform": [43, 49, 142, 144, 145, 146, 149, 153, 154, 157, 192, 218, 219, 220, 221, 222, 223, 225, 227, 229, 261, 262, 263, 264, 265, 266, 268, 270, 272, 283, 336, 416, 417, 419, 438, 440, 443, 444, 445, 446, 450, 456, 459, 464, 465, 466, 467, 480, 481, 484, 485, 488, 489, 491, 493, 494], "when": [43, 52, 63, 69, 147, 179, 185, 190, 198, 202, 203, 218, 219, 227, 235, 261, 262, 270, 276, 285, 315, 316, 338, 378, 399, 414, 417, 421, 439, 440, 456, 467, 469, 470, 473, 477, 480, 483, 485, 488, 490, 491], "uint8": [43, 159, 231, 273, 287, 335, 340, 396, 420, 440, 449, 482, 483, 490, 493], "rmin": [43, 483], "rmax": [43, 483], "m": [43, 150, 182, 183, 202, 203, 314, 443, 453, 459, 461, 464, 467, 471, 474, 480, 494], "where": [43, 202, 203, 287, 291, 340, 344, 396, 410, 422, 438, 442, 443, 469, 473, 477, 488, 489], "max": [43, 103, 142, 159, 164, 172, 202, 203, 235, 276, 288, 289, 323, 341, 342, 382, 410, 419, 442, 453, 456, 480, 483, 488, 490, 491], "ab": [43, 149, 159, 174, 192, 193, 316, 483, 488], "np": [43, 235, 276, 323, 382, 445, 490, 491], "calculate_scale_zp": 43, "quantize_rang": 43, "calcul": [43, 59, 158, 174, 182, 198, 203, 221, 222, 264, 265, 288, 289, 314, 316, 326, 341, 342, 387, 400, 410, 438, 440, 455, 456, 467, 478, 480, 483, 487, 488, 491, 493], "quantize_data": 43, "add": [43, 51, 63, 108, 118, 147, 198, 202, 203, 218, 220, 242, 261, 263, 315, 333, 394, 410, 415, 416, 422, 439, 440, 445, 447, 449, 455, 456, 471, 474, 487, 489, 491, 492], "necessari": [43, 194, 414, 417, 421, 458, 477, 480, 487, 491], "intermedi": [43, 150, 167, 202, 203, 237, 416, 452, 483], "trasnform": 43, "full": [43, 218, 219, 220, 261, 262, 263, 410, 419, 438, 440, 442, 448, 454, 477, 480, 485, 486], "equat": [43, 289, 291, 342, 344, 483, 488], "r": [43, 142, 164, 442, 453, 477, 483, 494], "": [43, 104, 142, 147, 164, 178, 179, 180, 184, 185, 186, 187, 190, 192, 193, 198, 199, 200, 202, 203, 217, 220, 234, 235, 236, 238, 240, 260, 263, 275, 276, 289, 314, 316, 342, 344, 345, 349, 378, 407, 410, 414, 417, 421, 422, 442, 443, 445, 447, 449, 452, 456, 457, 464, 467, 469, 473, 476, 479, 480, 481, 482, 483, 485, 486, 487, 488, 491, 492, 493, 494], "q": [43, 106, 108, 130, 421, 485, 488], "z": [43, 438, 443, 488], "real": [43, 221, 238, 264, 421, 438, 445, 481, 483], "origin": [43, 155, 158, 178, 190, 198, 203, 218, 235, 236, 261, 276, 300, 301, 303, 304, 305, 315, 316, 335, 383, 396, 410, 415, 440, 464, 480, 483, 490, 491, 493], "quantize_data_per_channel": 43, "dequantize_data_with_scale_zero": 43, "tensor_valu": 43, "scale_valu": 43, "zo_valu": 43, "sacal": 43, "dequantize_data": 43, "valueinfo": 43, "tensor_nam": [43, 147], "new_dtyp": 43, "cast": [43, 56, 484, 490], "info": [43, 158, 159, 182, 183, 198, 233, 238, 243, 314, 349, 406, 410, 416, 442, 458], "quantizedvalu": 43, "new_quantized_nam": 43, "scale_nam": 43, "zero_point_nam": 43, "quantized_value_typ": 43, "quint8": 43, "linearli": 43, "intial": 43, "quantizediniti": 43, "quantized_data": 43, "quantizationmod": 43, "quantizedvaluetyp": 43, "quantformat": 43, "quantize_nparrai": 43, "arr": [43, 410], "low": [43, 206, 207, 221, 222, 249, 250, 264, 265, 282, 292, 319, 345, 420, 421, 437, 438, 440, 445, 456, 457, 481, 483, 485, 488, 491], "high": [43, 221, 222, 264, 265, 440, 442, 453, 481, 491], "attribute_to_kwarg": 43, "attribut": [43, 82, 103, 104, 147, 158, 178, 189, 199, 200, 203, 410, 420, 439, 449, 451, 456, 482, 493], "kwarg": [43, 104, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 134, 136, 137, 159, 176, 202, 203, 220, 233, 235, 240, 243, 263, 276, 332, 334, 344, 345, 346, 348, 350, 352, 353, 354, 378, 393, 395, 397, 399, 405, 406, 409, 410, 439], "make_nod": 43, "find_by_nam": 43, "item_list": 43, "find": [43, 66, 67, 69, 104, 147, 291, 298, 323, 344, 382, 410, 420, 442, 462, 469, 473, 476, 477, 487, 489, 491], "item": [43, 198, 200, 202, 203, 234, 275, 315, 333, 394, 438, 445, 480, 488, 491], "trt_env_setup": 43, "environ": [43, 165, 236, 414, 437, 469, 473, 476, 491], "variabl": [43, 165, 195, 202, 203, 220, 236, 263, 323, 382, 396, 453, 480, 491], "tensorrt": [43, 438, 457, 483], "to_numpi": 43, "get_ops_recurs": 44, "prefix": [44, 147, 148, 156, 165, 459, 464, 489], "graph_info": 44, "templateadaptor": 44, "tampl": 44, "dictionari": [44, 66, 67, 69, 147, 148, 150, 158, 171, 199, 200, 202, 203, 234, 275, 287, 294, 297, 299, 340, 410], "yaml": [44, 198, 199, 200, 203, 206, 207, 218, 220, 236, 249, 250, 261, 263, 277, 282, 293, 294, 295, 297, 306, 311, 319, 320, 409, 410, 420, 422, 451, 455, 456, 478, 482, 489, 490], "file": [44, 104, 147, 158, 162, 194, 198, 199, 202, 203, 206, 207, 218, 219, 220, 223, 234, 235, 241, 244, 249, 250, 261, 262, 263, 266, 275, 276, 277, 282, 287, 293, 294, 295, 297, 306, 311, 315, 317, 319, 320, 340, 345, 355, 361, 362, 366, 378, 409, 410, 417, 420, 421, 422, 445, 448, 451, 454, 455, 456, 458, 462, 471, 474, 475, 476, 477, 478, 482, 483, 485, 489, 490], "pytorchadaptor": 44, "api": [44, 69, 74, 109, 149, 246, 282, 287, 319, 332, 333, 340, 344, 378, 393, 394, 397, 410, 415, 416, 423, 425, 429, 432, 435, 442, 447, 452, 456, 461, 465, 466, 467, 486, 487, 491, 495], "pytorch_ipexadaptor": 44, "intel": [44, 182, 183, 194, 239, 242, 278, 283, 290, 291, 314, 317, 325, 331, 336, 343, 344, 356, 378, 386, 392, 412, 414, 415, 417, 418, 420, 421, 422, 438, 440, 441, 443, 444, 446, 447, 449, 450, 454, 457, 458, 459, 464, 466, 467, 478, 479, 480, 481, 483, 484, 486, 488, 489, 491, 492, 493], "extens": [44, 410, 417, 419, 420, 449, 452, 453, 456, 457, 458, 460, 465, 466, 467, 471, 474, 475, 480, 481, 483, 488, 491, 492, 493], "ipex": [44, 152, 158, 202, 203, 452, 456, 457, 461, 465, 466, 488], "pytorch_fxadaptor": 44, "fx": [44, 158, 202, 327, 388, 452, 457, 465, 466, 481, 483, 484], "graph": [44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 116, 129, 131, 135, 138, 141, 142, 144, 145, 146, 147, 178, 217, 260, 282, 346, 353, 377, 416, 420, 440, 443, 445, 451, 458, 459, 483, 484, 489], "pytorchweightonlyadaptor": 44, "pytorchqueri": 44, "querybackendcap": [45, 420, 421], "tensorflowadaptor": 46, "stock": [46, 465, 488], "spr": 46, "tensorflow_itexadaptor": 46, "itex": [46, 108, 202, 203, 280, 457, 483, 488], "tensorflowqueri": [46, 420], "performance_onli": [46, 47, 48, 106, 130, 135, 146, 202, 456], "itex_mod": [46, 47, 88, 106, 130, 135], "quant_mod": [46, 333, 394, 421, 422], "graphconvert": 47, "qt_config": 47, "recip": [47, 178, 202, 203, 282, 319, 456, 485, 488, 491], "int8_sequ": 47, "fp32_op": [47, 49, 106], "bf16_op": [47, 49, 106, 421, 484], "data_load": [47, 48, 420], "fake_qu": [47, 87, 106, 130, 135], "qdq_enabl": 47, "new_api": [47, 48, 70, 71, 76, 78, 91, 98, 130, 135, 142], "use_bf16": [47, 48, 202, 482], "without": [48, 89, 147, 190, 235, 276, 316, 335, 396, 414, 443, 445, 456, 467, 480, 481, 482, 491, 492], "graphconverterwithoutcalib": 48, "recover_config": 48, "rewrit": [49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 105, 106, 107, 108, 175], "bf16convert": [49, 484], "biasadd": [51, 58, 63, 65, 108, 449], "convertaddtobiasaddoptim": 51, "conv2d": [51, 58, 59, 60, 64, 65, 70, 124, 134, 142, 149, 421, 422, 442, 447, 449, 488, 489, 491], "addv2": [51, 68, 449], "layout": 52, "convertlayoutoptim": 52, "optim": [52, 73, 74, 78, 79, 115, 117, 169, 170, 171, 175, 178, 187, 192, 199, 202, 203, 239, 245, 282, 283, 299, 319, 323, 336, 382, 399, 400, 407, 410, 417, 419, 437, 442, 443, 444, 445, 449, 450, 452, 453, 456, 458, 459, 461, 463, 464, 467, 470, 481, 482, 483, 484, 487, 488, 489, 491, 493], "nchw": [52, 231], "nhwc": [52, 231], "It": [52, 166, 180, 206, 207, 244, 249, 250, 289, 291, 298, 314, 319, 326, 342, 344, 345, 378, 383, 387, 399, 420, 421, 422, 438, 442, 443, 456, 462, 465, 470, 476, 477, 480, 483, 486, 487, 491, 493], "exist": [52, 165, 200, 236, 353, 447, 455, 463, 491], "4": [52, 153, 158, 159, 165, 180, 189, 202, 203, 227, 230, 231, 235, 270, 273, 276, 284, 285, 287, 337, 338, 340, 396, 397, 414, 420, 422, 437, 445, 446, 449, 452, 453, 455, 456, 464, 480, 483, 485, 488, 490, 491, 494], "abov": [52, 420, 421, 422, 443, 480, 483, 488, 491], "graph_def": [52, 147, 280, 345, 353, 377, 378], "leakyrelu": [53, 488], "convertleakyreluoptim": 53, "below": [53, 65, 73, 202, 203, 320, 344, 378, 415, 416, 419, 420, 421, 422, 439, 442, 443, 445, 451, 455, 459, 461, 469, 470, 473, 476, 478, 479, 480, 482, 483, 485, 487, 488, 489, 491, 492], "subgraph": [53, 65, 104, 156, 491], "mul": [53, 64, 65, 68, 163, 447, 488], "maximum": [53, 180, 185, 202, 203, 218, 235, 261, 276, 285, 316, 323, 338, 382, 422, 438, 440, 442, 456, 480, 483, 490], "note": [53, 184, 287, 327, 340, 388, 417, 421, 422, 439, 442, 445, 447, 449, 453, 456, 461, 464, 469, 473, 476, 480, 483, 485, 488, 489, 491, 492, 493], "coeffici": [53, 480], "less": [53, 147, 202, 203, 410, 437, 443, 456, 480], "than": [53, 147, 218, 235, 261, 276, 410, 417, 419, 437, 440, 451, 478, 479, 480, 483, 485, 487, 490, 491], "convers": [53, 203, 293, 420, 421, 456, 457, 483, 484, 488], "valid": [53, 66, 67, 104, 185, 188, 198, 202, 203, 220, 263, 287, 315, 316, 340, 353, 415, 417, 419, 420, 440, 442, 443, 446, 449, 452, 454, 456, 467, 480, 483, 486], "nan": 54, "random": [54, 147, 171, 202, 203, 231, 235, 273, 276, 283, 299, 323, 325, 336, 382, 386, 410, 415, 417, 456, 480, 482, 490, 493], "convertnantorandom": 54, "const": [54, 55, 62, 63, 66, 67, 69, 81, 97], "consist": [54, 62, 415, 416, 488, 491], "placehold": [55, 216, 259], "convertplaceholdertoconst": 55, "rerewrit": 56, "dequantizecastoptim": 56, "b16": 56, "dilat": 57, "contract": 57, "dilatedcontract": 57, "spacetobatchnd": 57, "batchtospacend": 57, "pattern": [57, 58, 60, 77, 95, 106, 107, 108, 130, 135, 158, 171, 172, 173, 174, 175, 178, 179, 185, 186, 187, 188, 190, 192, 193, 195, 199, 202, 203, 220, 263, 283, 304, 305, 307, 312, 316, 333, 336, 394, 420, 440, 449, 452, 456, 477, 479, 482, 488, 491, 494], "inject": [58, 456], "dummi": [58, 178, 221, 222, 264, 265, 291, 344, 419, 440, 450, 455, 456], "injectdummybiasaddoptim": 58, "fusion": [58, 60, 69, 77, 108, 125, 126, 127, 130, 131, 132, 136, 416, 420, 449], "expanddim": 59, "expanddimsoptim": 59, "next": [59, 211, 254, 397, 417, 421, 422, 439, 482, 485, 491], "featch": 60, "reshap": [60, 66, 67, 72, 488], "fetchweightfromreshapeoptim": 60, "handl": [60, 147, 155, 163, 406, 416, 418, 439, 488], "fold": [61, 62, 281, 449, 488], "foldbatchnormnodesoptim": 61, "graphfoldconstantoptim": 62, "sequenc": [62, 104, 179, 182, 183, 202, 203, 218, 234, 235, 261, 275, 276, 285, 289, 314, 338, 342, 420, 440, 449, 480, 485, 490], "self": [62, 178, 202, 203, 355, 420, 421, 439, 440, 452, 455, 487, 489, 491], "supported_op_typ": 62, "fusebiasaddandaddoptim": 63, "second": [63, 179, 202, 203, 218, 261, 383, 410, 442, 456, 469, 473, 477, 485, 488, 491, 493], "columnwis": 64, "fusecolumnwisemuloptim": 64, "depthwiseconv2dn": [64, 70, 124, 134, 449], "math": [65, 483], "fuseconvwithmathoptim": 65, "elimin": 65, "sub": [65, 158, 165, 178, 236, 417, 491], "realdiv": [65, 68], "decompos": [66, 67], "fusedecomposedbnoptim": 66, "input_graph_def": [66, 67, 69], "node_name_from_input": [66, 67, 69], "node_nam": [66, 67, 69, 147, 353, 363, 421], "strip": [66, 67, 69, 82, 83, 147, 489], "port": [66, 67, 69], "other": [66, 67, 69, 155, 163, 217, 260, 289, 342, 353, 414, 415, 416, 421, 422, 442, 449, 452, 454, 456, 458, 478, 480, 483, 488, 490, 491, 494], "underli": [66, 67, 69], "node_from_map": [66, 67, 69], "node_map": [66, 67, 69], "pull": [66, 67, 69], "def": [66, 67, 69, 206, 207, 249, 250, 378, 397, 399, 416, 420, 439, 440, 443, 444, 445, 455, 456, 483, 488, 489, 491], "entri": [66, 67, 69, 150, 242, 282, 320, 410, 454], "index": [66, 67, 69, 104, 165, 198, 203, 211, 216, 220, 254, 259, 263, 298, 410, 440, 455, 477, 488], "everi": [66, 67, 69, 180, 183, 185, 202, 203, 314, 316, 420, 439, 464, 469, 473, 491], "identifi": [66, 67, 69, 287, 340, 353, 480], "want": [66, 67, 69, 178, 202, 203, 216, 218, 259, 261, 316, 383, 399, 416, 420, 439, 440, 445, 456, 464, 476, 477, 478, 487, 489, 491], "nodedef": [66, 67, 69], "rais": [66, 67, 69, 104, 175, 181, 188, 198, 287, 314, 315, 316, 340, 345, 397, 419, 480, 481], "valueerror": [66, 67, 69, 287, 340, 397, 448], "If": [66, 67, 69, 73, 159, 165, 202, 203, 206, 207, 220, 235, 249, 250, 263, 276, 315, 345, 378, 397, 399, 415, 416, 421, 437, 439, 440, 445, 453, 454, 455, 456, 462, 470, 471, 474, 476, 478, 483, 485, 487, 488, 489, 490, 491], "isn": [66, 67, 69], "t": [66, 67, 69, 142, 164, 180, 202, 203, 235, 238, 276, 289, 342, 416, 420, 442, 443, 445, 456, 457, 477, 480, 483, 491, 493], "present": [66, 67, 69, 442, 481, 488], "values_from_const": [66, 67, 69], "node_def": [66, 67, 69], "extract": [66, 67, 69, 147, 178, 220, 263, 335, 396, 440], "ha": [66, 67, 69, 73, 149, 184, 185, 236, 284, 314, 316, 337, 397, 415, 417, 420, 421, 422, 439, 447, 452, 456, 457, 462, 476, 480, 482, 483, 484, 487, 488, 491], "access": [66, 67, 69, 199, 200, 203, 405, 410, 471, 474], "valid_reshape_input": [66, 67], "reshape_in0_ndef": [66, 67], "reshape_in1_ndef": [66, 67], "ar": [66, 67, 104, 158, 180, 185, 186, 187, 192, 193, 202, 203, 218, 235, 261, 276, 287, 291, 298, 314, 315, 316, 320, 322, 323, 340, 344, 379, 381, 382, 396, 397, 402, 409, 410, 414, 415, 416, 417, 420, 421, 439, 440, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 462, 464, 467, 470, 476, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493], "bypass_reshap": [66, 67], "input_node_map": [66, 67], "input_nam": [66, 67, 101, 141, 203, 280, 281, 447], "get_const_dim_count": [66, 67], "dimens": [66, 67, 104, 210, 235, 253, 276, 440, 443, 490], "instancenorm": [67, 488], "fusedecomposedinoptim": 67, "gelu": 68, "fusegeluoptim": 68, "sqrt": [68, 442], "erf": 68, "samll": 69, "layernorm": [69, 488], "fuselayernormoptim": 69, "remap": 69, "smaller": [69, 235, 276, 443, 456, 480, 490], "case": [69, 73, 159, 165, 203, 217, 234, 235, 236, 260, 275, 276, 282, 306, 311, 319, 355, 422, 439, 443, 444, 445, 449, 451, 455, 460, 464, 476, 477, 478, 480, 481, 483, 485, 486, 490, 492, 493, 494], "fusedbatcnormv3": 69, "And": [69, 416, 437, 456, 462, 488], "further": [69, 203, 414, 457, 458, 459, 461, 470, 476, 483], "restrict": [69, 202, 203, 480, 487], "2d": [69, 488], "3d": [69, 481, 488], "kera": [69, 115, 178, 198, 203, 220, 227, 242, 263, 270, 348, 353, 421, 439, 445, 458, 466, 467], "fusepadwithconv2doptim": 70, "excluded_op_nam": [70, 71, 199, 202, 203, 456, 480], "cfg": [70, 71, 158, 199, 333, 394, 402, 421, 422], "itex_qdq_mod": [70, 71], "conv3d": [70, 124], "fusepadwithfp32conv2doptim": 71, "fusetransposereshapeoptim": 72, "cse": [73, 97], "graphcseoptim": 73, "introduc": [73, 415, 420, 421, 422, 449, 456, 483, 485, 486, 488, 492], "ident": [73, 79, 179, 414, 443], "three": [73, 198, 218, 261, 322, 379, 381, 416, 420, 421, 438, 453, 457, 470, 479, 483, 484, 487, 488, 489], "d": [73, 158, 443, 451, 477, 494], "those": [73, 326, 387, 410, 442, 443, 444, 451, 456, 457, 479, 480, 483, 491], "child": [73, 149, 489], "b1": 73, "c1c2": 73, "d1": [73, 410], "c1": 73, "c2": 73, "memori": [73, 282, 306, 311, 319, 355, 410, 438, 439, 444, 456, 457, 459, 478, 480, 483, 485, 488, 491, 494], "bound": [73, 165, 172, 235, 276, 287, 323, 340, 382, 455, 490], "like": [73, 95, 97, 147, 178, 198, 203, 206, 207, 208, 220, 249, 250, 251, 263, 282, 291, 316, 319, 320, 344, 353, 378, 399, 415, 416, 417, 420, 421, 442, 443, 444, 452, 464, 479, 480, 483, 485, 486, 488, 491], "relu": [73, 77, 108, 416, 449, 488, 489], "relu6": [73, 449], "updat": [73, 158, 174, 180, 198, 316, 344, 378, 407, 448, 455, 456, 462, 467, 470, 480, 488, 491, 492], "graphdef": [73, 147, 353, 377, 458], "grappler": [74, 449], "grappleroptim": 74, "input_output_nam": 74, "opt_cfg": 74, "wrapper": [74, 101, 102, 103, 104, 121, 139, 148, 153, 157, 167, 175, 217, 235, 237, 238, 240, 241, 260, 276, 287, 291, 340, 344, 349, 353, 484], "leverag": [74, 417, 419, 443, 447, 459, 476, 479, 483, 485, 491], "built": [74, 204, 205, 209, 214, 218, 219, 224, 226, 228, 229, 231, 232, 235, 240, 242, 247, 248, 252, 255, 257, 261, 262, 267, 269, 271, 272, 273, 274, 276, 320, 344, 347, 355, 378, 399, 417, 420, 440, 445, 456, 469, 473, 478, 483, 490, 491, 493], "convert_add_to_biasadd": [75, 86, 110], "convert_layout": [75, 86, 110], "convert_leakyrelu": [75, 86, 110], "convert_nan_to_random": [75, 86, 110], "convert_placeholder_to_const": [75, 86, 110], "dequantize_cast_optim": [75, 86, 110], "dilated_contract": [75, 86, 110], "dummy_biasadd": [75, 86, 110], "expanddims_optim": [75, 86, 110], "fetch_weight_from_reshap": [75, 86, 110], "fold_batch_norm": [75, 86, 110], "fold_const": [75, 86, 110], "fuse_biasadd_add": [75, 86, 110], "fuse_column_wise_mul": [75, 86, 110], "fuse_conv_with_math": [75, 86, 110], "fuse_decomposed_bn": [75, 86, 110], "fuse_decomposed_in": [75, 86, 110], "fuse_gelu": [75, 86, 110], "fuse_layer_norm": [75, 86, 110], "fuse_pad_with_conv": [75, 86, 110], "fuse_pad_with_fp32_conv": [75, 86, 110], "fuse_reshape_transpos": [75, 86, 110], "graph_cse_optim": [75, 86, 110], "grappler_pass": [75, 86, 110], "insert_print_nod": [75, 86, 110], "move_squeeze_after_relu": [75, 86, 110], "pre_optim": [75, 86, 110], "remove_training_nod": [75, 86, 110], "rename_batch_norm": [75, 86, 110], "split_shared_input": [75, 86, 110], "strip_equivalent_nod": [75, 86, 110, 147], "strip_unused_nod": [75, 86, 110, 147], "switch_optim": [75, 86, 110], "insert": [76, 104, 106, 108, 112, 145, 155, 163, 416, 421, 439, 452, 456, 459, 480, 483, 484, 488, 489], "print": [76, 149, 150, 178, 291, 344, 397, 410, 445, 455, 456, 480, 488, 491], "insertprintminmaxnod": 76, "pre_node_nam": 76, "post_node_nam": 76, "pass": [76, 147, 165, 344, 378, 410, 416, 420, 437, 440, 443, 444, 445, 451, 455, 456, 477, 480, 482, 483, 484, 488, 493], "sampl": [76, 159, 202, 203, 211, 216, 218, 219, 220, 231, 235, 254, 259, 261, 262, 263, 273, 276, 291, 298, 323, 344, 382, 417, 439, 440, 446, 452, 477, 483, 490, 491, 493, 494], "move": [77, 416, 482, 485, 486], "squeez": [77, 416], "movesqueezeafterreluoptim": 77, "match": [77, 101, 178, 287, 288, 340, 341, 443, 477, 485], "pre": [78, 115, 178, 206, 207, 218, 249, 250, 261, 345, 378, 399, 440, 443, 444, 456, 464, 480, 481, 483, 485, 489, 491], "entranc": [78, 172, 209], "preoptim": 78, "removetrainingnodesoptim": 79, "protected_nod": 79, "types_to_splic": 79, "checknumer": 79, "stopgradi": 79, "renam": [80, 486], "fusedbatchnorm": 80, "fusedbatchnormv2": 80, "renamebatchnormoptim": 80, "splitsharedinputoptim": 81, "equival": [82, 153, 157, 488], "stripequivalentnodesoptim": 82, "output_node_nam": [82, 83, 130, 131, 135, 147], "same": [82, 140, 147, 159, 192, 203, 218, 235, 261, 276, 287, 340, 410, 420, 422, 437, 439, 440, 443, 445, 449, 456, 460, 464, 469, 473, 480, 482, 483, 485, 488, 489, 490, 491], "unus": [83, 147], "stripunusednodesoptim": 83, "input_node_nam": [83, 130, 135, 147], "switch": [84, 459, 489], "switchoptim": 84, "condit": [84, 218, 219, 220, 235, 261, 262, 263, 276, 322, 379, 381, 440, 454, 490, 491], "graphrewriterbas": 85, "abstract": [85, 166, 172, 235, 276, 277, 282, 319, 420, 422, 451], "freeze_fake_qu": [86, 94, 110], "freeze_valu": [86, 94, 110], "freeze_value_without_calib": [86, 94, 110], "fuse_conv_redundant_dequant": [86, 94, 110], "fuse_conv_requant": [86, 94, 110], "fuse_matmul_redundant_dequant": [86, 94, 110], "fuse_matmul_requant": [86, 94, 110], "meta_op_optim": [86, 94, 110], "post_hostconst_convert": [86, 94, 110], "post_quantized_op_cs": [86, 94, 110], "rnn_convert": [86, 94, 110], "scale_propag": [86, 94, 110], "onnx_graph": [86, 100, 110], "onnx_schema": [86, 100, 110], "tf2onnx_util": [86, 100, 110], "insert_qdq_pattern": [86, 105, 110], "merge_duplicated_qdq": [86, 105, 110], "share_qdq_y_pattern": [86, 105, 110], "freez": [87, 88, 89, 459, 480], "fakequ": 87, "freezefakequantopoptim": 87, "follow": [87, 109, 179, 220, 263, 284, 287, 337, 340, 414, 415, 416, 417, 420, 421, 422, 439, 440, 443, 444, 445, 449, 453, 454, 455, 456, 457, 458, 459, 460, 461, 469, 473, 479, 480, 482, 483, 488, 489, 491], "freezevaluetransform": 88, "max_min_data": [88, 89], "postfix": [88, 89], "tensor_data": [88, 410, 411], "th": [88, 89], "gpu": [88, 89, 96, 202, 203, 419, 437, 452, 456, 457, 461, 467, 476, 482, 483], "freezevaluewithoutcalibtransform": 89, "95": [89, 291, 344, 455, 488, 494], "quantizedconv": [90, 91], "quantizeddeconv": 90, "redund": [90, 92], "fuseconvredundantdequantizetransform": 90, "cpu": [90, 91, 92, 93, 202, 203, 410, 419, 421, 437, 438, 452, 456, 457, 459, 461, 467, 476, 481, 482, 483, 484, 489], "_quantizedconv": 90, "_quantizeddeconv": 90, "successor": [90, 91, 92, 93], "requant": [91, 93, 489], "fuseconvrequantizetransform": 91, "quantizedmatmul": [92, 93], "fusematmulredundantdequantizetransform": 92, "_quantizedmatmul": [92, 93], "fusematmulrequantizedequantizetransform": 93, "quantizedmatmulwithbiasanddequant": 93, "fusematmulrequantizetransform": 93, "fusematmulrequantizedequantizenewapitransform": 93, "fusematmulrequantizenewapitransform": 93, "newapi": 93, "meta": [95, 481], "metainfochangingmemopoptim": 95, "metaop": 95, "With": [95, 355, 416, 420, 422, 439, 456, 464, 469, 473, 477, 478, 480, 481, 487, 488, 491, 494], "better": [95, 202, 203, 206, 207, 249, 250, 298, 345, 378, 399, 444, 455, 457, 480, 481, 483, 485, 487, 491], "perform": [95, 139, 165, 195, 202, 203, 218, 230, 231, 236, 261, 273, 282, 306, 311, 319, 326, 344, 355, 378, 383, 387, 416, 417, 420, 421, 437, 440, 441, 442, 444, 446, 447, 452, 453, 455, 456, 457, 458, 459, 461, 465, 467, 470, 476, 478, 479, 480, 481, 482, 483, 484, 485, 488, 489, 491, 493, 494], "hostconst": 96, "posthostconstconvert": 96, "just": [96, 208, 233, 235, 238, 240, 241, 243, 251, 276, 355, 417, 456, 466, 470, 476, 479, 483, 488, 490, 491], "postcseoptim": 97, "duplic": [97, 107, 323, 382], "quantizev2": 97, "decreas": [97, 480], "size": [97, 159, 182, 183, 210, 211, 217, 220, 226, 231, 235, 253, 254, 260, 263, 269, 273, 276, 314, 355, 410, 414, 421, 439, 440, 445, 448, 456, 476, 477, 478, 480, 485, 488, 490, 493, 494], "rnn": 98, "quantizedrnnconvert": 98, "calibration_data": [98, 106], "rnn_detail": 98, "scalepropagationtransform": 99, "direct": [99, 184, 314, 480], "export": [100, 203, 283, 287, 336, 340, 419, 450, 462, 477, 489, 492], "onnxgraph": 101, "output_shap": 101, "extra_opset": 101, "output_nam": [101, 141, 203, 280, 281, 447], "is_subgraph": 101, "graph_nam": 101, "manipul": [101, 102], "onnxnod": 102, "skip_convers": 102, "schema": [103, 159], "onnxopschema": 103, "domain": [103, 104, 202, 203, 480, 491], "since_vers": 103, "get_schema": 103, "max_inclusive_opset_vers": 103, "within": [103, 186, 187, 192, 193, 282, 287, 319, 340, 353, 372, 377, 414, 416, 422, 438, 457, 469, 473, 476, 481, 488, 491], "get_max_supported_opset_vers": 103, "packag": [103, 420, 448, 453, 476, 477, 481, 486, 491], "set_nam": 104, "find_opset": 104, "assert_error": 104, "bool_val": 104, "error_msg": 104, "error": [104, 150, 291, 326, 344, 387, 406, 442, 455, 460, 488, 491], "messag": [104, 145, 491], "map_numpy_to_onnx_dtyp": 104, "np_dtype": 104, "map_onnx_to_numpy_typ": 104, "onnx_typ": 104, "add_port_to_nam": 104, "nr": 104, "get_tensorflow_node_attr": 104, "pars": [104, 158, 218, 219, 231, 235, 261, 262, 273, 276, 361, 362, 366, 421, 422, 490], "get_tensorflow_tensor_shap": 104, "shape": [104, 147, 180, 221, 222, 231, 235, 264, 265, 273, 276, 287, 340, 419, 440, 449, 450, 456, 488, 490], "get_tensorflow_node_shape_attr": 104, "attr": [104, 147, 178], "map_tensorflow_dtyp": 104, "get_tensorflow_tensor_data": 104, "convert_tensorflow_tensor_to_onnx": 104, "read_tensorflow_node_attr": 104, "read": [104, 147, 223, 235, 266, 276, 315, 440, 484, 487], "infer_onnx_shape_dtyp": 104, "opset_vers": [104, 141, 203, 280, 281, 447], "input_shap": [104, 222, 265, 440], "input_dtyp": 104, "sometim": [104, 416, 442, 483], "so": [104, 235, 276, 396, 416, 420, 442, 448, 452, 457, 462, 464, 483, 484, 485, 488, 489, 490, 492], "make_onnx_shap": 104, "seqtyp": 104, "tensor_dtyp": 104, "around": 104, "signifi": 104, "make_onnx_inputs_output": 104, "elem_typ": 104, "text": [104, 194, 234, 235, 275, 276, 284, 289, 317, 337, 342, 447, 454, 465, 480, 481, 485, 488, 490, 494], "datatyp": [104, 158, 484, 491, 494], "save_protobuf": 104, "path": [104, 147, 158, 178, 194, 198, 199, 218, 219, 220, 235, 261, 262, 263, 276, 277, 280, 281, 282, 293, 294, 295, 297, 306, 311, 315, 317, 319, 320, 333, 345, 353, 377, 378, 394, 407, 410, 416, 417, 420, 440, 442, 445, 451, 455, 456, 457, 458, 462, 465, 476, 479, 485, 490, 493], "as_text": 104, "save": [104, 175, 198, 202, 203, 220, 263, 280, 281, 320, 353, 378, 399, 400, 405, 410, 416, 420, 451, 456, 457, 458, 460, 464, 469, 473, 479, 483, 485, 488], "protobuf": 104, "is_onnx_domain": 104, "is_list_or_tupl": 104, "are_shapes_equ": 104, "src": [104, 477], "dest": 104, "equal": [104, 142, 147, 164, 397, 410, 480], "get_subgraphs_from_onnx": 104, "model_proto": 104, "over": [104, 220, 263, 291, 344, 421, 446, 450, 452, 455, 467, 476, 482, 488, 491], "df": 104, "initialize_name_count": 104, "avoid": [104, 159, 218, 261, 416, 485, 489], "conflict": [104, 448], "counter": 104, "make_nam": 104, "get_index_from_strided_slice_of_shap": 104, "outputs_to_valu": 104, "stride": [104, 235, 276, 490], "slice": 104, "compute_const_folding_using_tf": 104, "g": [104, 180, 202, 203, 443, 446, 450, 459, 464, 480, 485, 486, 488, 491], "const_node_valu": 104, "graph_output": 104, "constant": [104, 281, 283, 323, 325, 331, 336, 382, 386, 392, 403, 439, 449, 490], "tf": [104, 115, 147, 178, 198, 217, 218, 219, 220, 235, 260, 261, 262, 263, 276, 351, 353, 445, 458, 481, 484, 490], "generategraphwithqdqpattern": 106, "op_wise_config": [106, 130, 135, 421], "quantized_nod": 106, "dq": [106, 108, 130, 488], "pair": [106, 202, 203, 421, 439, 456, 457, 486], "befor": [106, 108, 149, 163, 171, 180, 185, 187, 192, 194, 196, 202, 203, 218, 261, 314, 316, 318, 415, 422, 439, 440, 443, 444, 445, 448, 449, 453, 456, 471, 474, 483, 487, 489, 491], "merg": [107, 210, 253, 333, 394, 471, 474, 489, 491], "mergeduplicatedqdqoptim": 107, "y": [108, 202, 203, 235, 276, 323, 382, 442, 448, 462, 488, 490], "shareqdqforitexypatternoptim": 108, "one": [108, 109, 114, 158, 159, 165, 180, 184, 189, 192, 193, 194, 196, 235, 245, 276, 284, 287, 291, 293, 314, 317, 318, 337, 340, 344, 417, 420, 438, 443, 444, 445, 449, 452, 453, 455, 456, 457, 459, 460, 464, 465, 467, 469, 470, 473, 476, 477, 478, 479, 480, 482, 483, 485, 486, 488, 490, 491], "enabl": [108, 150, 159, 185, 202, 203, 316, 421, 422, 445, 453, 457, 459, 461, 464, 465, 467, 480, 481, 491], "break": [108, 445, 456], "graphanalyz": 109, "extend_engin": 109, "analyz": [109, 178, 353, 487, 488, 489], "under": [109, 202, 203, 220, 263, 409, 417, 440, 454, 455, 456, 459, 464, 465, 476, 479, 480, 485, 488, 489, 491], "singleton": [109, 410], "specifi": [109, 158, 165, 198, 202, 203, 206, 207, 235, 236, 249, 250, 276, 282, 287, 291, 294, 297, 306, 311, 319, 320, 340, 344, 345, 378, 397, 399, 409, 410, 421, 422, 445, 449, 455, 456, 464, 478, 482, 490, 491, 493], "graphrewriterhelp": 109, "encapsul": [109, 206, 207, 249, 250, 345, 378, 399, 458], "quantize_lay": [110, 111, 113], "fake_quant": [110, 111, 113], "quantize_config": [110, 111, 113, 421], "quantize_help": [110, 111, 113], "quantize_wrapp": [110, 111, 113], "fuse_qdq_bn": [110, 111, 129], "fuse_qdq_concatv2": [110, 111, 129], "fuse_qdq_conv": [110, 111, 129], "fuse_qdq_deconv": [110, 111, 129], "fuse_qdq_in": [110, 111, 129], "fuse_qdq_matmul": [110, 111, 129], "fuse_qdq_pool": [110, 111, 129], "optimize_qdq": [110, 111, 129], "optimize_lay": [111, 113, 116], "quantize_layer_add": [111, 113, 116], "quantize_layer_bas": [111, 113, 116], "quantize_layer_bn": [111, 113, 116], "fakequantizebas": 112, "abc": [112, 289, 342, 420, 489, 491], "appli": [112, 125, 126, 127, 130, 132, 136, 153, 157, 166, 189, 191, 245, 285, 338, 414, 421, 422, 456, 459, 461, 467, 476, 479, 480, 483, 484, 487, 488, 491, 492, 493], "fakequant": 112, "per_channel": [112, 421, 422, 449, 483, 493], "num_bit": [112, 153, 158, 159, 488], "8": [112, 159, 202, 203, 234, 275, 416, 421, 438, 449, 453, 480, 481, 485, 488, 491, 494], "channel_axi": [112, 161, 164], "symmetr": [112, 422, 483, 485, 490, 491], "narrow_rang": 112, "quantizeconfig": [114, 115], "custom": [114, 159, 165, 320, 344, 355, 409, 437, 443, 444, 459, 480, 481, 485, 487], "There": [114, 320, 322, 379, 381, 442, 443, 449, 452, 456, 459, 485, 488, 491, 493], "instanc": [114, 115, 165, 202, 203, 206, 207, 236, 249, 250, 288, 289, 291, 294, 297, 300, 301, 303, 304, 305, 323, 335, 341, 342, 344, 345, 378, 382, 396, 399, 407, 410, 414, 416, 420, 437, 456, 461, 467, 491, 493, 494], "global": [114, 180, 202, 203, 300, 301, 303, 304, 305, 314, 396, 410, 416, 456, 480, 482, 491], "class": [115, 158, 175, 181, 188, 298, 345, 378, 416, 417, 421, 439, 440, 443, 455, 456, 467, 478, 479, 483, 486, 489, 491, 493], "init_quantize_config": 115, "quantize_recip": 115, "begin": [115, 186, 187, 192, 316, 439, 443, 444, 456, 480, 491], "process": [115, 139, 150, 165, 180, 185, 186, 187, 194, 196, 198, 202, 203, 206, 207, 218, 219, 220, 231, 235, 236, 249, 250, 261, 262, 263, 273, 276, 314, 316, 318, 322, 323, 345, 378, 379, 381, 382, 399, 409, 410, 417, 420, 421, 422, 438, 439, 440, 443, 444, 445, 447, 456, 460, 479, 480, 483, 488, 489, 490, 493], "model_nam": [115, 202, 203], "special": [115, 178, 355, 416, 439, 455, 456, 478, 480, 492], "decid": [115, 202, 203, 285, 316, 338, 420, 421, 456, 483, 486, 491], "qat_clone_funct": 115, "leav": [115, 470], "quantizewrapp": [115, 121], "wrapped_lay": 115, "config_quantizable_lay": 117, "quantizelayeradd": 118, "quantizelay": 119, "quantizelayerbas": 119, "quantizelayerbatchnorm": 120, "quantizewrapperbas": 121, "fusedbatchnormv3": [122, 132], "fusenodestartwithfusedbatchnormv3": [122, 132], "_quantizedfusedbatchnorm": 122, "concatv2": [123, 133, 146, 449], "fusenodestartwithconcatv2": [123, 133], "quantizedconcatv2": [123, 133], "fusenodestartwithconv2d": [124, 134], "conv2dbackpropinput": 125, "conv3dbackpropinputv2": 125, "fusenodestartwithdeconv2d": 125, "fusedinstancenorm": 126, "fusenodestartwithfusedinstancenorm": 126, "batchmatmul": 127, "batchmatmulv2": 127, "fusenodestartwithmatmul": [127, 136], "avgpool": [128, 137, 449], "fusenodestartwithpool": [128, 137], "optimizeqdqgraph": 130, "input_graph": [130, 135, 142, 373, 377, 420], "op_wise_sequ": [130, 135], "quantizegraph": 131, "quantizegraphbas": 131, "quantizenodebas": 131, "quantizegraphforintel": 135, "common": [138, 171, 203, 233, 283, 293, 297, 298, 299, 336, 402, 414, 440, 444, 445, 447, 451, 453, 456, 483, 488], "herlper": 138, "quantizegraphhelp": 138, "sever": [138, 196, 235, 276, 318, 417, 442, 443, 444, 452, 456, 457, 469, 473, 480, 482, 488, 490, 491, 493], "staticmethod": 138, "function": [138, 186, 187, 192, 202, 203, 206, 207, 219, 249, 250, 262, 294, 297, 306, 311, 416, 417, 420, 421, 422, 437, 439, 443, 444, 447, 451, 452, 453, 455, 456, 457, 467, 477, 480, 483, 485, 486, 487, 488, 489, 491, 492], "smoothquantcalibr": 139, "dataset": [139, 140, 158, 194, 206, 207, 208, 210, 211, 213, 215, 216, 217, 229, 238, 249, 250, 251, 253, 254, 256, 258, 259, 260, 272, 283, 287, 288, 289, 291, 320, 336, 340, 341, 342, 344, 345, 378, 399, 402, 417, 419, 420, 421, 439, 445, 450, 455, 456, 464, 480, 483, 486, 488, 491, 493, 494], "outlier": [139, 421, 438, 442, 485, 488], "ignor": [139, 410, 438, 440, 485, 488], "smoothquantscal": 140, "alpha": [140, 153, 163, 174, 195, 483], "scales_per_op": 140, "method": [140, 142, 158, 159, 171, 195, 202, 203, 211, 216, 217, 218, 220, 227, 235, 238, 254, 259, 260, 261, 263, 270, 276, 297, 298, 299, 333, 394, 396, 402, 403, 405, 406, 416, 417, 419, 438, 439, 440, 442, 443, 444, 455, 456, 479, 480, 483, 484, 485, 488, 490, 491], "individu": [140, 180, 314, 372, 377, 414, 480, 488], "tensorflowqdqtoonnxqdqconvert": 141, "shape_overrid": 141, "inputs_as_nchw": [141, 280], "default_opset_vers": 141, "bia": [142, 202, 203, 485, 489], "correct": [142, 164, 198, 202, 203, 287, 288, 289, 291, 315, 340, 341, 342, 344, 414, 459], "biascorrect": 142, "fp32_graph": 142, "weight_empir": 142, "Will": [142, 443, 452], "our": [142, 158, 202, 203, 417, 419, 447, 456, 477, 487, 492], "task": [142, 218, 225, 261, 268, 291, 344, 440, 443, 444, 447, 452, 455, 456, 480, 485, 488], "close": [142, 164, 438], "w_int8": [142, 164], "u": [142, 164, 419, 459], "w_fp32": [142, 164], "varianc": [142, 164, 442], "ratio": [142, 164, 180, 185, 198, 202, 203, 231, 235, 273, 276, 316, 440, 456, 480, 490, 494], "differ": [142, 160, 164, 167, 171, 189, 202, 203, 211, 220, 235, 237, 254, 263, 276, 282, 291, 297, 299, 308, 319, 344, 355, 404, 414, 416, 417, 421, 439, 440, 442, 443, 445, 446, 451, 452, 455, 456, 458, 469, 473, 478, 480, 483, 488, 489, 490, 491], "wise": [142, 159, 164, 202, 203, 323, 326, 382, 383, 387, 421, 452, 480, 489, 491, 493], "minim": [142, 164, 323, 382, 421, 422, 438, 443, 446, 455, 456, 469, 473, 480, 483, 491], "round": [142, 159, 164, 483, 485, 488], "scale_c": [142, 164], "shift": [142, 164, 231, 273, 477, 490], "notic": [142, 164, 236, 454, 457, 486], "first": [142, 164, 179, 200, 202, 203, 218, 261, 287, 333, 340, 383, 394, 410, 416, 417, 420, 421, 422, 440, 442, 453, 457, 461, 470, 471, 474, 477, 482, 483, 484, 485, 487, 488, 489, 491, 493], "empir": [142, 164], "solut": [142, 164, 419, 420, 421, 448, 461, 465, 470, 481, 486, 488, 491, 492], "don": [142, 164, 180, 202, 203, 416, 480, 491], "min": [142, 159, 164, 172, 203, 410, 442, 480, 483, 488, 490, 491], "graphtransform": 143, "graphtransformbas": 143, "input_pb": [143, 145, 146], "log": [145, 165, 178, 361, 362, 366, 406, 416, 467, 487, 489, 491], "insertlog": 145, "node_name_list": 145, "show_nam": 145, "show_op": 145, "first_n": 145, "summar": [145, 443], "1024": [145, 220, 263, 462], "dump_fp32": 145, "rerang": 146, "rerangequantizedconcat": 146, "rerange_quant": 146, "version1_lt_version2": [147, 410], "version1": [147, 410], "version2": [147, 410], "version1_gt_version2": [147, 410], "greater": [147, 410, 480, 491], "version1_eq_version2": [147, 410], "version1_gte_version2": [147, 410], "version1_lte_version2": [147, 410], "disable_random": 147, "seed": [147, 171, 202, 203, 299, 410, 456, 493], "disabl": [147, 202, 203, 414, 476, 484], "read_graph": 147, "in_graph": 147, "in_graph_is_binari": 147, "write_graph": 147, "out_graph_def": 147, "out_graph_fil": 147, "write": [147, 227, 270, 410, 445, 451, 456, 459, 489], "is_ckpt_format": 147, "model_path": [147, 442], "ckpt": [147, 345, 353, 378, 494], "folder": [147, 220, 225, 263, 268, 345, 378, 409, 440, 464, 469, 473, 485, 489], "is_saved_model_format": 147, "saved_model": [147, 293], "get_estimator_graph": 147, "estim": [147, 291, 344, 353, 491], "input_fn": [147, 353], "get_tensor_by_nam": 147, "try_cnt": 147, "consid": [147, 291, 344, 414, 438, 443, 477, 491], "import": [147, 165, 172, 202, 203, 293, 345, 355, 378, 397, 399, 410, 416, 417, 419, 422, 437, 439, 440, 442, 443, 444, 445, 447, 450, 455, 456, 457, 458, 459, 463, 465, 478, 479, 480, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492], "scope": [147, 421, 456], "onc": [147, 196, 242, 318, 322, 379, 381, 421, 422, 439, 476, 480, 481, 491, 494], "both": [147, 203, 414, 417, 420, 444, 456, 460, 480, 482, 483, 488, 491], "compat": [147, 353, 445, 458, 471, 474, 476, 486], "v1": [147, 230, 231, 273, 288, 289, 291, 341, 342, 344, 353, 445, 447, 448, 455, 458, 480, 486, 487, 494], "suffix": 147, "time": [147, 202, 203, 235, 276, 291, 323, 344, 355, 382, 410, 421, 439, 442, 445, 448, 456, 464, 466, 469, 473, 476, 477, 478, 480, 481, 483, 485, 487, 489, 490, 491], "got": [147, 421, 448, 489], "iterator_sess_run": 147, "sess": [147, 353], "iter_op": 147, "feed_dict": [147, 217, 260], "output_tensor": [147, 353], "measur": [147, 236, 345, 404, 417, 420, 437, 442, 443, 455, 456, 485, 489, 491, 494], "integr": [147, 167, 237, 420, 456, 477, 485], "session": [147, 217, 260, 353, 456, 489], "makeiter": 147, "feed": [147, 217, 260, 443, 480], "end": [147, 185, 186, 187, 192, 202, 203, 218, 234, 235, 261, 275, 276, 316, 322, 379, 381, 420, 421, 422, 443, 444, 449, 453, 456, 470, 478, 480, 489, 490, 491], "predict": [147, 235, 240, 276, 284, 288, 289, 291, 337, 341, 342, 344, 378, 417, 443, 455, 467, 485, 488, 489, 490], "pred": [147, 291, 344, 455], "collate_tf_pr": 147, "collat": [147, 158, 439], "tbe": 147, "get_input_output_node_nam": 147, "fix_ref_type_of_graph_def": 147, "fix": [147, 190, 192, 218, 261, 316, 415, 439, 440, 463, 480, 488, 491], "strip_unused_lib": 147, "offici": [147, 284, 288, 289, 337, 341, 342, 414, 488], "r1": 147, "15": [147, 449, 453], "branch": 147, "get_graph_def": 147, "auto_input_output": 147, "get_model_input_shap": 147, "inout": 147, "get_tensor_val_from_graph_nod": 147, "graph_node_name_map": 147, "kei": [147, 150, 155, 178, 189, 198, 200, 202, 203, 298, 315, 353, 397, 400, 402, 410, 419, 421, 481, 485, 489, 491], "val": [147, 198, 220, 223, 263, 266, 315, 442, 456], "tensor_v": 147, "int8_node_name_revers": 147, "revers": 147, "tf_diagnosis_help": 147, "fp32_model": [147, 150, 158, 281, 410, 420], "quan_model": 147, "save_path": [147, 280, 281, 420, 458], "diagnosi": [147, 202, 203, 456, 481, 486, 492], "generate_feed_dict": 147, "input_tensor": [147, 353], "get_weight_from_input_tensor": 147, "input_tensor_nam": [147, 353], "associ": [147, 287, 340], "quant": [147, 158, 159, 202, 203, 333, 394, 416, 456, 483], "search": [147, 149, 171, 172, 178, 192, 199, 203, 206, 207, 249, 250, 282, 284, 294, 297, 298, 299, 319, 323, 337, 382, 419, 452, 455, 459, 460, 470, 480, 481, 485, 489, 491, 492], "look": [147, 189, 419, 420, 422, 449, 455, 493], "sq_weight_tensor": 147, "sq_weights_nod": 147, "two": [147, 150, 165, 179, 184, 191, 196, 220, 225, 236, 263, 268, 287, 314, 318, 320, 327, 340, 388, 410, 416, 417, 439, 440, 443, 445, 447, 449, 456, 457, 483, 484, 485, 487, 491, 493], "torch": [148, 149, 150, 151, 153, 154, 155, 156, 158, 159, 163, 175, 178, 179, 181, 189, 199, 202, 203, 281, 345, 378, 409, 416, 419, 422, 423, 443, 445, 447, 456, 457, 458, 459, 464, 467, 483, 485, 488, 489], "bf16modulewrapp": 148, "bf16modul": 148, "mix": [148, 152, 202, 203, 321, 333, 345, 380, 394, 419, 420, 427, 452, 459, 465, 466, 467, 492], "precis": [148, 152, 202, 203, 206, 207, 249, 250, 282, 289, 291, 292, 319, 321, 333, 342, 344, 345, 355, 380, 383, 394, 410, 419, 420, 421, 427, 437, 438, 444, 445, 449, 452, 459, 465, 466, 467, 481, 482, 483, 488, 491, 492], "mixed_precision_model": 148, "bf16_symbolic_trac": 148, "fx_sub_module_list": 148, "trace": [148, 150, 156, 158, 178, 202, 203, 281, 385, 416, 466, 491], "_description_": 148, "is_leaf": 149, "judg": 149, "nn": [149, 153, 155, 158, 159, 178, 179, 189, 202, 203, 281, 345, 378, 409, 416, 443, 456, 458, 485, 488, 489], "trace_gptq_target_block": 149, "module_typ": 149, "modulelist": 149, "stack": 149, "structur": [149, 179, 190, 191, 202, 203, 316, 334, 395, 452, 475, 477, 480, 483, 489, 492, 494], "critic": [149, 189, 414], "llm": [149, 193, 485, 488], "gptq_related_block": 149, "embed": [149, 158, 438, 480], "transfrom": 149, "transformers_pr": 149, "todo": [149, 218, 221, 261, 264, 287, 333, 340, 394], "transformers_nam": 149, "find_lay": 149, "conv1d": [149, 422], "find_layers_nam": 149, "log_quantizable_layers_per_transform": 149, "transformer_block": 149, "maxq": 149, "gptquantiz": 149, "weight_config": [149, 157, 159], "compress": [149, 283, 306, 311, 336, 355, 399, 412, 419, 427, 443, 452, 456, 476, 478, 479, 480, 481, 483, 488, 492, 494], "pretrain": [149, 405, 459, 465], "url": [149, 220, 263, 454], "arxiv": [149, 174, 192, 193, 316, 438, 480, 485, 488], "org": [149, 174, 192, 193, 287, 316, 340, 415, 416, 442, 453, 471, 474], "2210": [149, 485], "17323": [149, 485], "hessian": [150, 385, 491], "awar": [150, 159, 166, 203, 245, 293, 314, 385, 399, 419, 420, 421, 422, 438, 444, 445, 447, 452, 476, 479, 481, 485, 491], "node_collector": 150, "hook": [150, 166, 189, 244, 245, 306, 311, 402, 443, 444, 456, 480, 488, 489], "record": [150, 158, 159, 167, 218, 219, 220, 226, 237, 244, 261, 262, 263, 269, 410, 440, 487, 489, 491], "hessiantrac": 150, "q_model": [150, 203, 293, 378, 416, 419, 439, 440, 442, 445, 447, 450, 451, 455, 456, 458, 483, 484, 485], "criterion": [150, 166, 168, 173, 174, 180, 185, 186, 187, 189, 192, 193, 197, 202, 203, 239, 242, 283, 336, 443, 444, 456, 480, 483, 491, 493], "yao": 150, "zhewei": 150, "et": [150, 438, 485, 488], "al": [150, 438, 485, 488], "pyhessian": 150, "network": [150, 174, 180, 181, 316, 385, 417, 438, 443, 444, 447, 456, 481, 483, 488, 491], "through": [150, 206, 207, 249, 250, 344, 345, 378, 419, 437, 449, 451, 452, 455, 462, 478, 479, 480, 482, 483, 488], "len": [150, 203, 235, 276, 440, 445, 490], "2020": 150, "ieee": [150, 457, 488], "intern": [150, 333, 394, 439, 440, 455, 480], "confer": [150, 480, 488], "big": [150, 442], "dong": 150, "zhen": 150, "hawq": [150, 385, 491], "v2": [150, 385, 439, 445, 447, 448, 453, 465, 486, 491, 492, 494], "advanc": [150, 202, 203, 414, 419, 421, 427, 483, 493], "system": [150, 165, 236, 410, 437, 462, 494], "33": [150, 494], "18518": 150, "18529": 150, "openvinotoolkit": 150, "nncf": 150, "develop": [150, 355, 415, 416, 453, 456, 457, 459, 465, 476, 480, 481, 484, 487], "hessian_trac": 150, "compare_weight": 150, "float_dict": 150, "ani": [150, 287, 289, 332, 340, 342, 372, 377, 393, 397, 407, 410, 414, 415, 419, 422, 445, 459, 464, 477, 480, 487], "quantized_dict": 150, "compar": [150, 291, 344, 410, 444, 455, 480, 483, 485, 487, 489, 491], "being": [150, 287, 340, 422], "wt_compare_dict": 150, "float_model": 150, "state_dict": [150, 445, 485, 489], "qmodel": 150, "compute_error": 150, "state": [150, 179, 422, 462, 480], "weight_dict": 150, "hawq_top": 150, "enable_act": 150, "modul": [151, 175, 181, 188, 296, 302, 312, 313, 416, 439, 443, 452, 455, 456, 458, 480, 482, 484, 485, 489, 492], "ipex_mixed_precis": 152, "example_input": [152, 155, 157, 158, 159, 202, 203, 281, 447], "fakeaffinetensorquantfunct": 153, "affin": [153, 483], "teqlinearfakequ": 153, "orig_lay": 153, "group_siz": [153, 158, 159, 396, 485], "teqmullinear": 153, "input_scal": 153, "trainabl": [153, 157], "teq": [153, 485], "detector": 154, "transformerbasedmodelblockpatterndetector": 154, "pattern_lst": 154, "block_pattern": 154, "detect": [154, 158, 178, 202, 203, 287, 291, 340, 344, 349, 416, 459, 466, 467, 480, 491], "ffn": [154, 189], "get_modul": 155, "set_modul": [155, 158], "new_modul": [155, 158], "torchsmoothqu": [155, 488], "q_func": [155, 206, 207, 249, 250, 321, 323, 326, 329, 379, 380, 382, 383, 385, 387, 390, 420, 456, 491], "traced_model": [155, 156], "whose": [155, 163, 180, 315, 451, 488, 491], "could": [155, 163, 180, 206, 207, 220, 249, 250, 263, 320, 345, 378, 399, 414, 416, 444, 456, 479, 480, 483, 485, 488, 492], "absorb": [155, 159, 163], "later": [155, 163, 489], "graphtrac": 155, "trace_and_fuse_sub_graph": 156, "is_qat": 156, "tequant": 157, "absorb_to_lay": [157, 159], "extra_config": [157, 159], "get_embedding_contigu": 158, "contigu": 158, "is_fused_modul": 158, "_propagate_qconfig_help": 158, "collate_torch_pr": 158, "fetch": [158, 162, 211, 254, 421, 440], "collate_result": 158, "input2tupl": 158, "append_attr": 158, "fx_model": 158, "fx_white_list": 158, "append": [158, 320, 323, 382, 416, 444, 456, 479], "graphmodul": [158, 416, 484], "addit": [158, 203, 399, 421, 422, 443, 470, 486, 491], "dir": [158, 218, 261, 409, 440, 448, 451], "generate_activation_observ": 158, "observ": [158, 422, 487, 489, 491], "what": [158, 185, 216, 259, 344, 378, 399, 414, 481], "check_cfg_and_qconfig": 158, "op_infos_from_cfg": 158, "output_tensor_ids_op_nam": 158, "paser_cfg": 158, "ops_nam": 158, "get_quantizable_ops_from_cfg": 158, "input_tensor_ids_op_nam": 158, "update_sq_scal": 158, "ipex_config_path": 158, "smoothquant_scale_info": 158, "ipex_config": 158, "json": [158, 219, 235, 262, 276, 440, 458, 477, 485, 490], "temporari": [158, 410, 414], "auto_copi": 158, "fetch_modul": 158, "op_nam": [158, 199, 202, 203, 334, 395, 410, 411, 421, 456, 480, 489], "simple_infer": 158, "get_example_input": 158, "example_inp": 158, "get_fallback_ord": 158, "confidence_batch": [158, 491], "fallback": [158, 203, 326, 327, 385, 387, 388, 447, 457, 484, 491], "requantize_cfg": 158, "fall": 158, "back": [158, 235, 241, 276, 442, 476], "order": [158, 284, 285, 320, 323, 326, 335, 337, 338, 382, 387, 396, 416, 442, 455, 482, 488, 489, 491], "confid": 158, "ordered_op": 158, "get_mse_order_per_fp32": 158, "mse": [158, 159, 202, 203, 283, 291, 325, 336, 344, 378, 386, 410, 442, 455, 482, 485, 486], "influenc": [158, 480], "last": [158, 174, 198, 202, 203, 439, 457, 459, 461, 466, 470, 483, 488], "fallback_ord": 158, "get_mse_order_per_int8": 158, "get_torch_vers": 158, "match_datatype_pattern": 158, "calculate_quant_min_max": 158, "unsign": [158, 335, 396, 422], "qmin": 158, "qmax": 158, "get_depth": 158, "depth": [158, 443, 484], "get_dict_at_depth": 158, "target_depth": 158, "nest": [158, 200], "get_element_under_depth": 158, "ops_lst": 158, "get_op_type_by_nam": 158, "quantizable_op": 158, "collect_weight_info": 158, "fc": [158, 203], "rtn": [158, 485], "param": [158, 165, 208, 236, 242, 251, 291, 323, 344, 382, 410, 420, 458, 491], "configu": 158, "_type_": 158, "qdq_weight_asym": 159, "quantil": [159, 491], "return_int": 159, "clip": [159, 485, 488], "choos": [159, 220, 263, 452, 464, 481, 486, 488, 491, 493], "qdq_weight_sym": 159, "full_rang": 159, "rang": [159, 221, 222, 235, 264, 265, 276, 397, 399, 419, 420, 422, 438, 440, 442, 443, 444, 445, 456, 479, 480, 483, 485, 488, 490], "amax": 159, "qdq_weight_actor": 159, "quant_weight": 159, "group": [159, 195, 301, 452, 480, 485, 489, 490, 491, 494], "how": [159, 166, 174, 180, 186, 187, 192, 193, 202, 203, 235, 276, 277, 314, 415, 416, 418, 420, 439, 440, 443, 444, 445, 451, 455, 456, 470, 471, 474, 475, 476, 480, 481, 483, 488, 490, 491, 492, 493], "mani": [159, 344, 378, 439, 453, 485, 491, 493], "element": [159, 182, 183, 198, 216, 259, 287, 314, 340, 410, 440, 452, 455, 480, 485, 488], "zp": [159, 488], "rtn_quantiz": 159, "32": [159, 176, 396, 445, 451, 485, 488, 494], "sym_full_rang": 159, "nearst": 159, "num": [159, 410, 439], "configir": 159, "fc2": 159, "gptq_perm": 159, "gptq": [159, 485], "perm": [159, 235, 276, 490], "int32": [159, 440, 485], "gptq_quantiz": 159, "get_module_input_output": 159, "module_hook_config": 159, "calib_func": [159, 378, 484], "help": [159, 244, 293, 458, 459, 465, 476, 485, 491, 492], "module_name_list": 159, "requir": [159, 202, 203, 209, 320, 353, 377, 416, 420, 421, 437, 438, 439, 442, 444, 445, 449, 456, 457, 458, 460, 470, 476, 480, 483, 485, 486, 487, 488, 489, 491, 493], "fc1": 159, "input_valu": 159, "output_valu": 159, "awq_quant": 159, "absorb_dict": 159, "n_sampl": 159, "auto_scal": [159, 485], "mse_rang": [159, 485], "n_block": [159, 485], "5": [159, 163, 167, 202, 203, 222, 231, 237, 265, 273, 291, 344, 378, 420, 440, 447, 449, 455, 456, 480, 482, 483, 485, 488, 490, 491, 493, 494], "awq": [159, 485], "absorb_lay": 159, "absorbed_lay": 159, "fc3": 159, "salient": [159, 480], "oom": 159, "teq_quant": 159, "quant_weight_w_scal": 159, "algorithm_registri": 160, "algorithm_typ": 160, "locat": [160, 198, 235, 276, 445, 462, 469, 473, 476, 483, 486, 490, 493], "registr": [160, 220, 227, 235, 263, 270, 276, 309], "algorithmschedul": 160, "conf": [160, 165, 166, 203, 206, 207, 236, 249, 250, 293, 300, 301, 303, 304, 305, 306, 311, 321, 323, 326, 329, 333, 345, 355, 378, 379, 380, 382, 383, 385, 387, 390, 394, 397, 399, 416, 417, 419, 422, 437, 443, 450, 451, 456, 457, 458, 479, 483, 484, 485, 487, 488, 491], "control": [160, 202, 203, 416, 456, 480, 491], "phase": [160, 417, 456, 480, 483, 484, 491], "fastbiascorrect": [161, 164], "fast_bias_correct": [162, 202, 203, 336, 483], "weight_correct": [162, 202, 203, 336, 483], "kernel": [163, 202, 203, 420, 421, 491], "futur": [163, 206, 207, 238, 249, 250, 452, 456, 467, 492], "weightcorrect": 164, "1e": [164, 488, 493], "05": [164, 203, 291, 344, 455, 488, 494], "evalu": [165, 166, 180, 202, 206, 207, 218, 236, 249, 250, 261, 277, 284, 287, 288, 289, 291, 293, 337, 340, 341, 342, 344, 345, 355, 378, 399, 402, 417, 420, 421, 440, 443, 444, 451, 452, 455, 456, 457, 459, 465, 467, 470, 476, 478, 480, 483, 487, 489, 491, 493], "set_env_var": [165, 236], "env_var": [165, 236], "overwrite_exist": [165, 236], "env": [165, 236, 448], "alreadi": [165, 220, 234, 236, 263, 275, 420, 440, 452, 471, 474, 491], "set_all_env_var": [165, 236], "physic": [165, 236, 414, 437], "core": [165, 202, 203, 236, 437, 454, 469, 473, 494], "get_architectur": [165, 236], "architectur": [165, 236, 294, 297, 419, 437, 443, 456, 480, 481, 485, 492], "get_threads_per_cor": [165, 236], "thread": [165, 202, 203, 236, 372, 377, 439], "get_thread": [165, 236], "get_physical_id": [165, 236], "socket": [165, 236, 410, 494], "get_core_id": [165, 236], "id": [165, 234, 236, 275, 284, 286, 287, 288, 289, 337, 339, 340, 341, 342, 455, 487, 491], "get_bounded_thread": [165, 236], "core_id": [165, 236], "bind": [165, 236], "run_inst": 165, "b_dataload": [165, 202, 203, 437, 456], "b_func": [165, 437], "benchmarkconfig": [165, 202, 203, 437, 442, 456], "accuraci": [165, 198, 202, 203, 206, 207, 249, 250, 277, 282, 291, 306, 311, 319, 344, 345, 355, 378, 383, 397, 399, 407, 416, 419, 421, 422, 438, 439, 440, 442, 444, 445, 446, 447, 455, 456, 467, 476, 478, 479, 480, 481, 482, 485, 486, 487, 488, 489, 492, 493, 494], "goal": [165, 277, 282, 306, 311, 319, 345, 378, 421, 439, 479, 483, 491], "prefer": [165, 282, 319, 378, 480, 485], "space": [165, 171, 172, 186, 187, 192, 193, 202, 203, 206, 207, 249, 250, 282, 289, 294, 297, 298, 299, 319, 323, 326, 333, 342, 345, 378, 382, 387, 394, 414, 415, 417, 420, 421, 422, 480, 483, 493], "etc": [165, 166, 234, 275, 277, 282, 289, 306, 311, 319, 342, 345, 378, 409, 443, 452, 480, 487, 491], "user": [165, 178, 190, 198, 202, 203, 206, 207, 220, 223, 227, 235, 236, 242, 249, 250, 263, 266, 270, 276, 282, 306, 311, 317, 319, 320, 344, 345, 355, 378, 383, 396, 399, 410, 416, 417, 419, 420, 421, 422, 427, 437, 439, 443, 444, 447, 449, 452, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 467, 470, 476, 478, 479, 480, 481, 483, 484, 486, 488, 489, 490, 491, 495], "generate_prefix": 165, "core_list": 165, "command": [165, 236, 399, 442, 445, 459, 461, 464, 469, 473, 477], "numactl": [165, 448, 462, 470], "call_on": 165, "cmd": [165, 477], "log_fil": [165, 371, 376], "window": [165, 437, 476, 477], "config_inst": 165, "raw_cmd": 165, "multi": [165, 176, 178, 189, 287, 340, 344, 378, 417, 439, 440, 452, 456, 478, 480, 483, 491], "trigger": [165, 185, 316, 415], "raw": [165, 219, 223, 226, 262, 266, 269, 326, 387, 455, 491], "summary_benchmark": 165, "summari": [165, 399, 442, 471, 474, 489, 494], "profil": [165, 336], "benchmark_with_raw_cmd": 165, "commend": 165, "fit_with_raw_cmd": 165, "cores_per_inst": [165, 202, 203, 437, 456, 482], "num_of_inst": [165, 202, 203, 437, 456, 482], "test": [165, 202, 203, 235, 276, 415, 419, 442, 453, 494], "fit": [165, 180, 202, 203, 323, 345, 378, 382, 397, 399, 416, 419, 437, 439, 440, 442, 445, 450, 451, 455, 456, 457, 458, 480, 483, 484, 485], "pb": [165, 202, 203, 345, 353, 378, 419, 437, 445, 450, 456, 458, 489, 494], "eval_dataload": [165, 202, 203, 206, 207, 249, 250, 320, 321, 323, 326, 329, 345, 378, 379, 380, 382, 383, 385, 387, 390, 399, 437, 451, 455, 456, 483, 491], "compon": [166, 277, 283, 320, 336, 416, 442, 445, 453, 454, 459, 476, 479], "quantizationawaretrainingcallback": 166, "pruningcallback": 166, "distillationcallback": 166, "basecallback": 166, "design": [166, 217, 240, 245, 260, 344, 383, 417, 419, 456, 464, 467, 480, 483, 492], "mainli": [166, 196, 245, 318, 456, 480, 483], "prune": [166, 173, 174, 175, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 202, 203, 245, 246, 283, 300, 301, 303, 304, 305, 309, 311, 312, 314, 315, 316, 318, 320, 336, 410, 419, 445, 446, 449, 450, 452, 479, 481, 492, 493], "distil": [166, 173, 202, 203, 237, 244, 245, 283, 336, 419, 446, 450, 452, 479, 492, 493], "In": [166, 182, 183, 184, 189, 190, 191, 195, 203, 217, 245, 260, 287, 314, 316, 340, 355, 414, 416, 417, 419, 420, 421, 439, 440, 442, 443, 444, 445, 455, 456, 466, 469, 470, 473, 478, 479, 480, 483, 484, 485, 487, 488, 489, 490, 491, 492], "adaptor": [166, 202, 203, 335, 396, 402, 419, 422, 452, 484, 486, 488, 489, 492], "deriv": [166, 174, 182, 183, 184, 190, 191, 192, 193, 194, 195, 196, 197, 277, 314, 316, 318], "pipelin": [166, 277, 294, 295, 320, 444, 456, 479], "knowledg": [166, 167, 202, 203, 237, 277, 444, 446, 450, 452, 456, 458, 493], "transfer": [166, 225, 268, 277, 440, 443, 444, 456, 488], "teacher": [166, 202, 203, 277, 443, 444, 456, 494], "student": [166, 202, 203, 218, 244, 261, 277, 440, 443, 444, 494], "distillation_conf": [166, 199, 277], "_epoch_ran": [166, 277], "integ": [166, 184, 185, 202, 203, 277, 287, 291, 298, 314, 316, 340, 344, 397, 420, 422, 438, 483, 488, 491], "indic": [166, 202, 203, 211, 216, 218, 254, 259, 261, 277, 287, 298, 340, 416, 439, 448, 485, 489], "much": [166, 174, 202, 203, 235, 276, 277, 443, 470, 488, 490], "epoch": [166, 186, 187, 192, 277, 316, 399, 439, 443, 444, 445, 456, 479, 480, 493], "ran": [166, 277], "eval_frequ": [166, 277], "frequenc": [166, 185, 202, 203, 277, 316, 456, 480, 493], "term": [166, 186, 187, 192, 193, 195, 277, 415, 438, 443, 454, 455, 478, 479, 491], "best_scor": [166, 277], "best": [166, 235, 276, 277, 282, 319, 326, 387, 414, 417, 453, 459, 465, 476, 478, 483, 485, 490, 491], "metric": [166, 202, 203, 206, 207, 239, 249, 250, 277, 282, 283, 298, 306, 311, 319, 320, 336, 345, 378, 399, 402, 417, 420, 421, 440, 442, 445, 456, 457, 483, 487, 489, 491, 492, 493, 494], "best_model": [166, 277, 485], "found": [166, 277, 419, 443, 457, 464, 488, 491, 494], "critet": [167, 237], "includ": [167, 174, 178, 180, 195, 197, 202, 203, 218, 220, 227, 235, 237, 261, 263, 270, 276, 282, 292, 314, 319, 397, 410, 414, 415, 420, 421, 422, 439, 440, 442, 453, 454, 455, 456, 459, 462, 465, 470, 480, 483, 484, 485, 489, 491], "tensorflowknowledgedistillationloss": [167, 237], "pytorchknowledgedistillationloss": [167, 237, 456], "pytorchintermediatelayersknowledgedistillationloss": [167, 237], "tensorflowcriterion": [167, 237], "pytorchcriterion": [167, 237], "criterion_registri": [167, 237], "criterion_typ": [167, 237], "registry_criterion": [167, 237], "knowledgedistillationframework": [167, 237], "student_model": [167, 203, 237, 456], "teacher_model": [167, 202, 203, 237, 443, 444, 456], "knowledgedistillationloss": [167, 237, 456, 493], "temperatur": [167, 202, 203, 237, 456, 493], "loss_typ": [167, 171, 202, 203, 237, 456, 493], "ce": [167, 202, 203, 237, 456, 493], "loss_weight": [167, 202, 203, 237, 456, 493], "pytorchknowledgedistillationlosswrapp": [167, 237], "param_dict": [167, 237, 242], "tensorflowknowledgedistillationlosswrapp": [167, 237], "tensorflowknowledgedistillationlossextern": [167, 237], "intermediatelayersknowledgedistillationloss": [167, 237], "layer_map": [167, 203, 237, 443], "add_origin_loss": [167, 203, 237], "pytorch": [167, 175, 178, 181, 184, 185, 188, 193, 194, 202, 203, 217, 218, 220, 223, 227, 235, 237, 242, 244, 260, 261, 263, 266, 270, 276, 281, 282, 291, 292, 312, 314, 317, 319, 327, 336, 344, 345, 354, 378, 388, 403, 410, 416, 417, 419, 420, 421, 422, 438, 439, 443, 444, 446, 449, 452, 453, 456, 457, 458, 459, 461, 464, 465, 466, 467, 476, 480, 481, 482, 485, 486, 488, 491, 493], "pytorchintermediatelayersknowledgedistillationlosswrapp": [167, 237], "selfknowledgedistillationloss": [167, 237], "selfknowledg": [167, 237], "pytorchselfknowledgedistillationloss": [167, 237], "pytorchselfknowledgedistillationlosswrapp": [167, 237], "hyper": [169, 493], "sa_optim": [169, 173], "simul": [170, 422], "anneal": 170, "register_search": 171, "searcher": [171, 178, 203, 299], "registri": [171, 172, 174, 180, 185, 194, 195, 196, 197, 314, 316, 318, 417], "sure": [171, 180, 185, 194, 196, 314, 316, 318, 437], "search_spac": [171, 199, 203, 294, 297, 298, 299], "gridsearch": [171, 299], "grid": [171, 203, 299, 417, 480], "whole": [171, 299, 422, 483, 494], "exhaust": [171, 203, 283, 299, 325, 336, 386, 482], "randomsearch": [171, 299], "randomli": [171, 235, 276, 299, 323, 382, 417, 488, 490, 491], "bayesianoptimizationsearch": [171, 299], "42": [171, 203, 299, 494], "bayesian": [171, 203, 283, 299, 325, 336, 386, 417, 480, 482], "xgbsearcher": 171, "higher_is_bett": [171, 202, 203, 344, 378, 491, 493], "reg": [171, 173, 175, 186, 187, 192, 193, 203], "min_train_sampl": [171, 203], "10": [171, 202, 203, 220, 263, 323, 382, 419, 437, 440, 447, 453, 456, 480, 482, 490, 491, 494], "xgboost": [171, 480], "searchspac": 172, "factori": [172, 351, 358, 360, 365, 368, 370, 375], "actual": [172, 291, 344, 445, 488], "limit": [172, 323, 382, 410, 419, 442, 443, 485, 486, 489], "interv": [172, 191, 480], "descret": 172, "store": [172, 174, 175, 178, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 202, 203, 220, 263, 309, 316, 451], "continu": [172, 183, 287, 314, 340, 417, 456, 477, 480, 492], "learning_r": [172, 202, 203, 456, 482, 493], "001": [172, 220, 263, 440, 445, 488, 493], "num_train_epoch": [172, 456, 480], "20": [172, 235, 276, 488, 490, 493, 494], "weight_decai": [172, 456, 493], "register_searchspac": 172, "pruner": [172, 173, 283, 300, 301, 302, 303, 304, 306, 311, 312, 314, 317, 336, 456, 480, 493], "basesearchspac": 172, "discretesearchspac": 172, "continuoussearchspac": 172, "hpo": [173, 206, 249, 480], "model_slim": [173, 175, 189], "auto_slim": [173, 175, 177], "pattern_analyz": [173, 175, 177], "weight_slim": [173, 175, 177, 189], "mha": [173, 175, 181, 188], "ninm": [173, 175, 181], "nxm": [173, 175, 181, 191, 202, 203, 310, 314, 480], "basic": [173, 175, 178, 180, 188, 202, 203, 234, 275, 283, 294, 314, 325, 329, 332, 336, 386, 390, 393, 399, 452, 453, 456, 482, 487], "block_mask": [173, 174, 175, 188], "pattern_lock": [173, 175, 188, 202, 203, 283, 302, 336], "progress": [173, 175, 188, 220, 263, 470, 476, 480, 483], "retrain_fre": [173, 174, 175, 188], "criteria": [173, 175, 202, 203, 282, 306, 311, 314, 316, 319, 416, 476, 488], "schedul": [173, 175, 185, 186, 187, 192, 193, 195, 202, 203, 283, 312, 316, 336, 456, 479], "tf_criteria": [173, 175], "callback": [173, 306, 311, 399, 402, 416, 456, 479, 480, 483], "register_criterion": [174, 197], "get_criterion": 174, "pruningcriterion": [174, 197], "about": [174, 197, 410, 414, 439, 456, 484, 491, 492, 494], "module_nam": [174, 175, 185, 186, 187, 188, 190, 191, 192, 193, 195, 197, 316, 410], "score": [174, 180, 185, 189, 197, 202, 203, 284, 285, 287, 288, 289, 291, 316, 337, 338, 340, 341, 342, 344, 385, 402, 416, 455, 478, 480, 487, 491], "magnitudecriterion": [174, 197], "magnitud": [174, 197, 202, 203, 283, 291, 302, 336, 344, 452, 480], "criterion_class": [174, 197], "determin": [174, 180, 185, 197, 202, 203, 404, 414, 416, 438, 480, 483, 488], "gradientcriterion": 174, "gradient": [174, 300, 452, 456, 480, 494], "absolut": [174, 202, 203, 291, 344, 455, 456, 480, 483, 491], "snipcriterion": 174, "snip": [174, 202, 203, 316, 452, 480, 494], "product": [174, 419, 452, 457, 459, 460, 476, 481, 483, 487, 491], "singl": [174, 196, 202, 203, 211, 218, 235, 254, 261, 276, 287, 316, 318, 340, 344, 378, 416, 440, 442, 453, 480], "shot": [174, 192, 193, 196, 245, 316, 318, 417, 452, 456, 480, 481], "connect": [174, 316, 476, 480, 487], "sensit": [174, 300, 316, 452, 480], "1810": [174, 316], "02340": [174, 316], "snipmomentumcriterion": 174, "snip_momentum": [174, 202, 203, 456, 480], "momentum": [174, 316, 452, 456, 480, 493], "mechan": [174, 480, 487, 492], "preserv": [174, 438], "step": [174, 184, 185, 186, 187, 191, 192, 196, 202, 203, 314, 316, 318, 399, 421, 422, 442, 443, 444, 445, 456, 471, 474, 476, 479, 480, 482, 484, 485, 487, 488, 489, 491], "beta": 174, "blockmaskcriterion": 174, "9": [174, 202, 203, 416, 453, 456, 480, 482, 488, 491, 493, 494], "retrainfreecriterion": 174, "f": [175, 443, 445, 483, 485, 488], "pickle_modul": 175, "pickle_protocol": 175, "_use_new_zipfile_seri": 175, "prepare_prun": [175, 480], "loss_func": [175, 194], "assertionerror": [175, 181, 188, 198, 314, 315, 316, 345], "cuurent": [175, 188, 316], "auto": [176, 178, 202, 203, 321, 336, 380, 386, 410, 416, 438, 459, 462, 464, 466, 467, 480, 483, 485], "slim": [176, 177, 178, 287, 340, 351, 353, 458, 480], "round_multipli": 176, "spars": [176, 190, 316, 440, 481], "automat": [176, 178, 179, 202, 203, 220, 223, 230, 231, 263, 266, 273, 282, 292, 319, 416, 419, 437, 440, 452, 456, 457, 459, 461, 464, 465, 467, 469, 470, 471, 473, 474, 476, 479, 480, 483, 488, 490, 491], "model_slim_ffn2": 176, "some": [176, 178, 202, 203, 218, 261, 315, 421, 422, 440, 442, 447, 453, 455, 456, 478, 480, 483, 484, 485, 488, 489, 491, 492, 494], "part": [176, 185, 314, 316, 416, 453, 457, 471, 474, 480, 488, 492], "perman": [176, 414, 480], "obtain": [176, 178, 187, 192, 195, 198, 315, 416, 421, 480, 487, 488, 491], "acceler": [176, 419, 443, 456, 459, 467, 476, 480, 481, 484, 485, 488, 491], "directli": [176, 202, 203, 217, 260, 287, 291, 315, 340, 344, 455, 456, 463, 480, 482, 483, 489], "sprase": 176, "multipl": [176, 202, 203, 204, 205, 209, 210, 218, 219, 221, 222, 223, 224, 225, 229, 232, 235, 242, 247, 248, 252, 253, 255, 261, 262, 264, 265, 266, 267, 268, 272, 274, 276, 292, 345, 346, 347, 349, 355, 437, 440, 447, 456, 479, 480, 487, 488, 491], "model_slim_mha": 176, "parse_auto_slim_config": 176, "ffn2_sparsiti": 176, "mha_spars": 176, "generate_ffn2_pruning_config": 176, "consecut": [176, 178, 179, 480], "generate_mha_pruning_config": 176, "head": [176, 178, 182, 189, 198, 480, 494], "get_attribut": 178, "level": [178, 383, 397, 406, 414, 488, 491], "descent": 178, "get_common_modul": 178, "layer1": [178, 202, 203, 456, 480, 483], "layer2": [178, 456, 480, 483], "nearest": [178, 235, 276, 485, 490], "father": 178, "print_iter": 178, "recipesearch": 178, "root": [178, 218, 219, 220, 223, 261, 262, 263, 266, 291, 344, 440, 445, 455, 456, 493], "levelwis": 178, "wai": [178, 219, 220, 223, 262, 263, 266, 417, 422, 439, 440, 442, 455, 456, 459, 462, 477, 479, 480, 483, 485, 488, 491, 493], "huggingfac": [178, 189, 218, 261, 405, 440, 446, 450, 464, 465, 466, 467, 488, 494], "bert": [178, 203, 214, 217, 218, 235, 257, 260, 261, 276, 419, 440, 443, 455, 457, 464, 480, 490, 494], "recipe_sampl": 178, "bertattent": 178, "dens": [178, 196, 202, 203, 318, 480, 494], "infom": [178, 238], "searching_result": 178, "jitbasicsearch": 178, "placeholder_shap": 178, "placeholder_dtyp": 178, "By": [178, 202, 203, 284, 337, 421, 422, 455, 458, 469, 470, 473, 481, 491], "jit": [178, 202, 459, 461, 466, 488, 489], "script": [178, 284, 285, 288, 289, 337, 338, 341, 342, 445, 452, 459, 463, 466, 467, 470, 481], "them": [178, 218, 261, 416, 422, 439, 442, 447, 449, 451, 479, 480, 485, 491], "static_graph": 178, "flatten_static_graph": 178, "target_lay": 178, "linear2linearsearch": 178, "target_op_lut": 178, "lookup": 178, "tabl": [178, 189, 410, 422, 442, 447, 494], "code": [178, 206, 207, 236, 249, 250, 293, 317, 320, 378, 399, 416, 419, 420, 421, 422, 440, 443, 444, 445, 451, 452, 454, 455, 459, 461, 463, 464, 465, 467, 470, 476, 478, 479, 480, 481, 482, 483, 487, 488, 489, 490], "current_pattern": 178, "statu": [178, 407, 414, 439, 478, 480], "selfmhasearch": 178, "classifierheadsearch": 178, "final": [178, 185, 198, 316, 421, 456, 462, 478, 480, 483, 486, 491], "classifi": [178, 198, 218, 261, 291, 344, 440, 443], "classifierheadsearchertf": 178, "squeezer": 179, "postcompressionutil": 179, "librari": [179, 239, 283, 336, 372, 412, 415, 419, 453, 456, 457, 461, 470, 476, 481, 483], "relat": [179, 195, 277, 287, 306, 311, 314, 340, 396, 402, 422, 459, 480, 493], "linearcompress": 179, "root_linear": 179, "target_linear": 179, "also": [179, 217, 220, 235, 260, 263, 276, 284, 337, 344, 355, 378, 415, 417, 420, 421, 422, 439, 442, 446, 450, 452, 455, 456, 459, 464, 469, 470, 473, 476, 477, 478, 480, 481, 483, 484, 488, 491], "while": [179, 190, 198, 316, 323, 382, 420, 421, 440, 446, 452, 457, 459, 464, 476, 482, 483, 485, 488], "hidden": [179, 184, 314, 420], "layer_1": 179, "act_fn": 179, "layer_2": 179, "linearcompressioniter": 179, "linear_pattern": 179, "register_pattern": [180, 314], "basepattern": [180, 182, 184], "unit": [180, 314, 415, 480], "e": [180, 202, 203, 414, 443, 446, 450, 459, 464, 465, 469, 473, 480, 485, 488, 491], "4x1": [180, 202, 203, 310, 456, 480, 494], "is_glob": [180, 314], "local": [180, 202, 203, 314, 410, 469, 473, 480, 487], "contrast": [180, 314, 490], "keep_mask_lay": 180, "invalid_lay": 180, "max_sparsity_ratio_per_op": [180, 185, 199, 202, 203, 456, 480], "sparsiti": [180, 182, 183, 185, 186, 187, 190, 192, 193, 196, 198, 202, 203, 316, 318, 410, 419, 440, 452, 456, 492, 494], "reach": [180, 196, 202, 203, 318, 415, 419, 439, 480, 491], "min_sparsity_ratio_per_op": [180, 199, 202, 203, 456, 480], "minimum": [180, 202, 203, 422, 438, 442, 456, 467, 480, 491], "target_spars": [180, 199, 202, 203, 456, 480, 482, 493], "pytorchbasepattern": [180, 195], "kerasbasepattern": 180, "get_pattern": [181, 314], "patternmha": 182, "doc": [182, 183, 202, 203, 314, 332, 333, 344, 378, 393, 394, 397, 410, 455, 456, 471, 474], "md": [182, 183, 202, 203, 314, 344, 378, 421, 438, 445, 483], "n": [182, 183, 202, 203, 219, 235, 262, 276, 285, 314, 338, 397, 422, 440, 442, 443, 480, 483, 485, 488, 490], "pytorchpatternninm": 183, "out": [183, 202, 203, 218, 219, 220, 261, 262, 263, 282, 314, 319, 415, 416, 419, 440, 459, 464, 469, 470, 471, 473, 474, 476, 480, 482, 483, 485], "pytorchpatternnxm": 184, "kept": [184, 314], "block_siz": [184, 314], "height": [184, 231, 235, 273, 276, 314, 445, 490, 493], "width": [184, 231, 235, 273, 276, 314, 438, 445, 480, 483, 490, 493], "vertic": [184, 235, 276, 314, 490], "becaus": [184, 189, 235, 276, 314, 416, 483, 488, 490, 491], "keraspatternnxm": 184, "register_prun": [185, 194, 316], "baseprun": [185, 190, 192, 194], "current_sparsity_ratio": [185, 316], "global_step": [185, 316], "total": [185, 235, 276, 291, 316, 344, 440, 442, 480, 490, 494], "start_step": [185, 199, 202, 203, 316, 456, 480, 482], "end_step": [185, 199, 202, 203, 316, 456, 480, 482], "pruning_frequ": [185, 199, 202, 203, 456, 480], "target_sparsity_ratio": [185, 316], "show": [185, 410, 414, 443, 445, 456, 462, 477, 488, 491, 492], "pytorchbaseprun": [185, 193], "kerasbaseprun": 185, "pytorchbasicprun": 186, "arrang": [186, 187, 192, 193, 219, 220, 223, 262, 263, 266, 440, 480], "proce": [186, 187, 192, 193], "regul": [186, 187, 192, 193], "kerasbasicprun": 186, "pytorchblockmaskprun": 187, "grad": [187, 192], "parse_valid_pruner_typ": 188, "get_prun": [188, 316], "pythonmultiheadattentionprun": 189, "mha_modul": 189, "partial": [189, 480, 483], "qkv": 189, "feedward": 189, "simultan": [189, 459, 479, 482], "qkv_name": 189, "query_layer_nam": 189, "key_layer_nam": 189, "value_layer_nam": 189, "ffn_name": 189, "attention_ffn_nam": 189, "mha_nam": 189, "keep": [189, 198, 315, 383, 416, 420, 475, 476, 486], "qkv_modul": 189, "ffn_modul": 189, "mha_compress": 189, "mhacompress": 189, "modifi": [189, 220, 263, 377, 396, 416, 422, 445, 449, 480, 493], "linear_lay": 189, "independ": [189, 372, 377, 422], "length": [189, 202, 203, 218, 235, 261, 276, 287, 340, 419, 440, 455, 481, 483, 490], "4x": [189, 417, 483], "subsequ": [189, 421, 459, 476], "head_mask": 189, "mha_head_s": 189, "similar": [189, 456, 482, 488, 491, 493], "mha_scor": 189, "lock": [190, 304, 305, 452, 479, 480], "pytorchpatternlockprun": 190, "parent": [190, 191, 196, 310, 316, 318, 489], "pytorchprogressiveprun": 191, "basicprun": [191, 194], "interpol": [191, 235, 276, 455, 480, 490], "fine": [191, 218, 261, 440, 462, 480, 481, 483], "grain": [191, 480, 481, 491], "improv": [191, 415, 438, 456, 459, 476, 477, 480, 481, 483, 484, 485, 491, 492, 494], "ad": [191, 218, 261, 284, 323, 337, 382, 421, 422, 442, 457, 459, 464, 467, 471, 474, 480, 489], "retrain": [192, 444, 480], "pytorchretrainfreeprun": 192, "pruner_class": [192, 193], "rearrang": 192, "fast": [192, 202, 203, 419, 481], "retrainfreeprun": [192, 194], "effect": [192, 420, 481], "2204": 192, "09656": 192, "sparsegptprun": [193, 194], "most": [193, 202, 203, 291, 344, 442, 456, 457, 480, 483, 485, 488, 491, 494], "sparsegpt": [193, 194], "massiv": 193, "One": [193, 422, 440, 445, 452, 480, 481, 491], "2301": 193, "00774": 193, "opt": [194, 419, 464, 488, 491], "least": [194, 317, 456, 480, 491], "templat": [194, 317, 456, 480], "tree": [194, 317, 333, 394], "nlp": [194, 202, 203, 317, 464, 480, 483], "huggingface_model": [194, 317], "classif": [194, 218, 235, 261, 276, 291, 317, 344, 443, 447, 455, 465, 480, 481], "pytorch_prun": [194, 283, 336], "eager": [194, 317, 377, 445, 452, 483, 484, 489], "config_file_path": [194, 317], "pruner_info": [194, 317], "pruning_class": 194, "avil": 194, "regular": [195, 284, 315, 337], "register_reg": 195, "regulariz": 195, "get_reg_typ": 195, "get_reg": 195, "basereg": 195, "grouplasso": 195, "coeff": 195, "lasso": [195, 301, 452, 480], "select": [195, 198, 203, 218, 261, 416, 417, 438, 452, 453, 476, 480, 483, 485, 489, 491], "reg_term": 195, "coeffient": 195, "register_schedul": [196, 318], "get_schedul": [196, 318], "pruningschedul": 196, "gradual": [196, 318, 480], "oneshotschedul": [196, 318], "iterativeschedul": [196, 318], "get_tf_criterion": 197, "get_sparsity_ratio": 198, "elementwise_over_matmul_gemm_conv": 198, "elementwise_over_al": 198, "blockwise_over_matmul_gemm_conv": 198, "get_sparsity_ratio_tf": 198, "check_config": [198, 315], "prune_config": [198, 315], "everyth": [198, 315, 464], "reset_none_to_default": 198, "undefin": [198, 315], "update_param": 198, "process_weight_config": 198, "global_config": [198, 300, 301, 303, 304, 305], "local_config": [198, 202, 203, 300, 301, 303, 304, 305], "default_config": 198, "pruners_info": 198, "process_yaml_config": 198, "check_key_valid": 198, "template_config": 198, "user_config": 198, "process_and_check_config": [198, 315], "process_config": [198, 315], "parse_last_linear": 198, "often": [198, 439, 443, 479, 480], "act": [198, 216, 259, 414], "might": [198, 416, 491], "caus": [198, 421, 439, 460, 480, 485], "drop": [198, 287, 315, 340, 456, 457, 470, 480, 485, 494], "parse_last_linear_tf": 198, "parse_to_prun": [198, 315], "parse_to_prune_tf": 198, "generate_pruner_config": 198, "dotdict": [198, 199, 203, 355, 410], "get_lay": 198, "collect_layer_input": 198, "layer_idx": 198, "layer_input": 198, "cuda": [198, 457, 459, 461, 483], "previou": [198, 421, 422, 456, 480, 486, 488, 489, 491, 492], "prunerv2": 199, "pruning_typ": [199, 202, 203, 456, 480], "pruning_scop": [199, 202, 203, 456, 480], "sparsity_decay_typ": [199, 202, 203, 456, 480], "pruning_op_typ": [199, 202, 203, 456, 480], "reg_typ": 199, "criterion_reduce_typ": 199, "resume_from_pruned_checkpoint": 199, "similiar": 199, "cfg_fname": 199, "parser": 199, "quantization_conf": 199, "pruning_conf": 199, "graph_optimization_conf": [199, 282], "mixedprecision_conf": 199, "benchmark_conf": 199, "nasconfig": [199, 203, 295, 297, 417], "approach": [199, 202, 203, 294, 295, 297, 416, 417, 438, 440, 443, 452, 456, 464, 476, 481, 482, 485, 491, 493], "search_algorithm": [199, 203, 283, 296, 336, 417], "na": [199, 203, 283, 336, 349, 452, 494], "procedur": [199, 417, 480], "defaultconf": 199, "instead": [199, 200, 203, 217, 260, 410, 462, 464, 467, 480], "notat": [199, 200, 203, 410], "deep_get": [200, 355], "dot": [200, 457, 483], "eg": [200, 220, 263, 440, 482], "person": [200, 414, 481], "john": 200, "deep": [200, 419, 420, 421, 439, 452, 453, 456, 457, 459, 461, 464, 465, 467, 470, 476, 481, 483, 491, 492, 494], "deep_set": [200, 355], "sex": [200, 414], "male": 200, "pythonic_config": 201, "random_se": [202, 203, 323, 382, 456, 493], "1978": [202, 203], "workspac": [202, 203, 409, 410, 458], "default_workspac": [202, 203], "resume_from": [202, 203, 410], "tensorboard": [202, 203, 402, 410, 420, 456], "set_random_se": [202, 203, 410], "set_workspac": [202, 203, 410], "set_resume_from": [202, 203, 410], "set_tensorboard": [202, 203, 410], "directori": [202, 203, 219, 220, 262, 263, 353, 405, 407, 409, 410, 440, 445, 448, 469, 471, 473, 474, 489], "histori": [202, 203, 409, 410, 476, 491], "nc_workspac": [202, 203], "datetim": [202, 203], "now": [202, 203, 235, 276, 416, 417, 422, 440, 445, 467, 482, 490, 491], "strftime": [202, 203], "d_": [202, 203], "h": [202, 203, 235, 276, 445, 490], "resum": [202, 203, 206, 207, 249, 250, 321, 329, 379, 380, 382, 383, 385, 387, 390], "wa": [202, 203, 420, 456, 481, 491], "flag": [202, 203, 285, 338, 442], "visual": [202, 203, 419, 467, 476, 487, 489, 491, 492], "displai": [202, 203, 332, 333, 393, 394, 410, 476], "2022": [202, 203, 419, 454, 485, 488, 494], "workspace_path": [202, 203], "accuracycriterion": [202, 203, 456, 491], "rel": [202, 203, 355, 456, 482, 491, 493, 494], "tolerable_loss": [202, 203, 456, 491], "01": [202, 203, 456, 482, 485, 491, 493, 494], "higher": [202, 203, 206, 207, 249, 250, 298, 345, 378, 399, 416, 442, 443, 447, 455, 480, 483, 487], "accept": [202, 203, 397, 414, 437, 439], "accuracy_criterion": [202, 203, 355, 456, 478, 482, 491, 493], "avail": [202, 203, 349, 423, 425, 429, 432, 435, 446, 448, 450, 452, 469, 473, 480, 491, 494], "warmup": [202, 203, 437, 456, 482], "inter_num_of_thread": [202, 203, 372, 377, 456, 482], "intra_num_of_thread": [202, 203, 372, 377, 456, 482], "benchmark": [202, 203, 238, 283, 320, 336, 355, 410, 419, 427, 458, 459, 463, 467, 470, 476, 491, 492, 493, 494], "empti": [202, 203, 462], "onnxrt_trt_ep": [202, 203, 457, 483], "onnxrt_cuda_ep": [202, 203, 457, 483], "inter": [202, 203, 216, 220, 259, 263], "intra": [202, 203], "quantizationconfig": 202, "post_training_static_qu": [202, 440, 456, 482, 491], "calibration_sampling_s": [202, 203, 456], "op_type_dict": [202, 203, 422, 482, 483, 485, 491], "op_name_dict": [202, 203, 442, 456, 483, 491], "strategy_kwarg": [202, 203, 487, 491], "timeout": [202, 203, 456, 482, 491, 493], "max_trial": [202, 203, 456, 491], "quant_level": [202, 203, 491], "posttrainingquantconfig": [202, 203, 378, 416, 419, 422, 439, 442, 447, 450, 455, 456, 458, 483, 484, 485, 487, 488, 491], "quantizationawaretrainingconfig": [202, 203, 399, 416, 444, 447, 456, 483, 484, 491], "cv": [202, 203, 480], "object_detect": [202, 203, 287, 340], "recommendation_system": [202, 203], "explicitli": [202, 203, 451, 480], "overrid": [202, 203, 410], "quantiztaion": [202, 203], "smooth_quant_arg": [202, 203, 483, 488], "gemm_to_matmul": [202, 203, 483], "graph_optimization_level": [202, 203, 482, 483], "disable_al": [202, 203, 482], "enable_bas": [202, 203], "enable_extend": [202, 203], "enable_al": [202, 203], "first_conv_or_matmul_quant": [202, 203, 483], "last_conv_or_matmul_quant": [202, 203, 483], "pre_post_process_quant": [202, 203, 483], "preprocess": [202, 203, 218, 235, 261, 276, 396, 402, 445, 490], "postprocess": [202, 203, 229, 232, 235, 239, 276, 283, 336, 344, 378, 402, 420, 456, 489, 490], "vaild": [202, 203], "dedic": [202, 203], "quant_format": [202, 203, 281, 447], "constraint": [202, 203, 282, 319, 456, 480, 487, 491, 493], "conv1": [202, 203, 483, 493], "tuning_strategi": [202, 203], "guarante": [202, 203, 456], "models": [202, 203, 355, 456, 478, 482], "footprint": [202, 203, 282, 306, 311, 319, 355, 444, 456, 478, 480, 482], "earli": [202, 203, 456, 483, 491, 493], "stop": [202, 203, 456, 491, 492, 493], "field": [202, 203, 220, 263, 287, 340, 416, 420, 422, 445, 456, 487, 491, 493], "exit": [202, 203, 322, 379, 381, 456, 493], "excluded_precis": [202, 203, 484], "exclud": [202, 203, 420, 438, 484], "conserv": [202, 203, 336, 386], "use_distributed_tun": 202, "weightpruningconfig": [202, 203, 456, 479, 480], "pruning_config": [202, 203, 456], "98": [202, 203, 456, 480, 482, 494], "exp": [202, 203, 456, 480], "link": [202, 203, 218, 261, 344, 378, 438, 440, 447, 469, 473, 476, 494], "90": [202, 203, 493, 494], "magnitude_progress": [202, 203], "snip_progress": [202, 203], "snip_momentum_progress": [202, 203], "feasibl": [202, 203], "situat": [202, 203, 445, 480], "unstructur": [202, 203, 310, 452, 480, 494], "8x1": [202, 203], "channelx1": [202, 203, 480], "1xchannel": [202, 203, 480], "itrex": [202, 203], "start": [202, 203, 235, 276, 287, 340, 383, 453, 481, 490, 491, 492, 495], "togeth": [202, 203, 235, 276, 443, 453, 463, 481, 489, 490], "sort": [202, 203, 326, 387, 442, 491], "sinc": [202, 203, 282, 284, 306, 311, 319, 337, 443, 447, 453, 455, 470, 476, 479, 485, 486], "lead": [202, 203, 443, 456, 457, 480, 485, 488], "increas": [202, 203, 441, 452, 459, 476, 491], "cube": [202, 203, 480], "6": [202, 203, 419, 449, 483, 488, 491, 494], "update_config": [202, 203], "knowledgedistillationlossconfig": [202, 203, 443, 444, 456, 479], "hyperparamet": [202, 203, 332, 487, 488, 491], "entropi": [202, 203, 438, 491], "groundtruth": [202, 203, 287, 340], "label": [202, 203, 206, 207, 218, 220, 221, 222, 223, 226, 231, 235, 240, 249, 250, 261, 263, 264, 265, 266, 269, 273, 276, 284, 286, 291, 337, 339, 344, 345, 378, 399, 416, 439, 440, 442, 455, 456, 483, 490], "tpye": [202, 203], "sum": [202, 203, 291, 344, 442, 443], "distillationconfig": [202, 203, 399, 443, 444, 456, 479], "prepare_compress": [202, 203, 399, 416, 443, 444, 456, 479, 480, 483], "criterion_conf": [202, 203], "d_conf": [202, 203, 444, 456, 479], "compression_manag": [202, 203, 399, 416, 443, 444, 456, 479, 480, 483], "sgd": [202, 203, 242, 443, 456, 482, 493], "callabl": [202, 203, 289, 342, 399, 439], "featur": [202, 203, 218, 219, 231, 235, 261, 262, 273, 276, 415, 419, 437, 439, 441, 443, 456, 457, 458, 459, 463, 464, 467, 476, 480, 481, 486, 490], "altern": [202, 203, 378], "distil_loss": [202, 203, 456], "crossentropyloss": [202, 203, 237, 443, 456], "lr": [202, 203, 443, 445, 456], "onnxrt_dnnl_ep": [203, 457, 483], "tuningcriterion": [203, 456, 478, 487, 491], "tuning_criterion": [203, 456, 478, 487, 491], "dynam": [203, 208, 251, 281, 333, 394, 420, 439, 443, 447, 452, 456, 459, 464, 465, 466, 467, 470, 476, 481, 491, 494], "weight_onli": [203, 485], "ptq": [203, 378, 416, 442, 445, 452, 456, 483, 488, 489, 491], "tri": [203, 491], "meet": [203, 209, 320, 322, 379, 381, 416, 421, 478, 481, 482, 483, 485, 489, 491], "mse_v2": [203, 283, 325, 336, 386], "hawq_v2": [203, 336, 386], "docstr": [203, 397], "copi": [203, 315, 410, 439], "deepcopi": 203, "model_origin": [203, 378, 484], "qat_op_name_dict": 203, "low_memory_usag": 203, "hpoconfig": 203, "xgb": 203, "bo": 203, "intermediatelayersknowledgedistillationlossconfig": [203, 443], "relationship": 203, "student_layer_nam": 203, "student_layer_output_process": 203, "teacher_layer_nam": 203, "teacher_layer_output_process": 203, "desir": [203, 231, 235, 273, 276, 421, 422, 490], "either": [203, 287, 340, 460, 464, 479, 482, 483], "serv": [203, 353], "numer": [203, 291, 344, 422, 457, 481, 483], "abbrevi": 203, "layer_nam": 203, "l1": 203, "selfknowledgedistillationlossconfig": [203, 443, 456], "student1_layer_name1": 203, "teacher_layer_name1": 203, "student2_layer_name1": 203, "student1_layer_name2": 203, "teacher_layer_name2": 203, "student2_layer_name2": 203, "soft": 203, "l2": [203, 480], "hard": [203, 439, 442], "resblock": 203, "deepst": 203, "02": [203, 488, 494], "mixedprecisionconfig": [203, 345, 397, 456, 457], "mixedprecis": [203, 292, 456], "fp16": [203, 333, 394, 483], "won": [203, 483], "work": [203, 282, 319, 418, 421, 439, 443, 471, 474, 484, 485, 486, 488, 489], "mix_precis": [203, 336, 397, 456, 457], "converted_model": [203, 345, 456, 457], "exportconfig": 203, "14": [203, 280, 281, 447, 453, 488, 494], "dynamic_ax": [203, 281, 447], "qlinear": [203, 220, 227, 263, 270, 291, 344, 420, 466], "ax": [203, 281], "onnxqlinear2qdqconfig": 203, "onnxqlinear2qdq": 203, "torch2onnxconfig": [203, 447], "torch2onnx": [203, 278, 283, 336], "qdq_op_fp32_bia": 203, "qdq_op_int32_bia": 203, "qdq_op_fp32_bias_qdq": 203, "resnet50": [203, 419, 442, 445, 447, 457, 459, 463, 480, 483, 487, 494], "int8_onnx_config": [203, 447], "randn": [203, 447], "224": [203, 231, 273, 419, 440, 445, 447, 450, 456, 459, 490, 493], "batch_siz": [203, 208, 210, 213, 216, 217, 218, 219, 238, 251, 253, 256, 259, 260, 261, 262, 281, 417, 439, 440, 445, 447, 451, 456, 459, 483], "tf2onnxconfig": [203, 447], "tf2onnx": [203, 278, 283, 336], "keyword": 203, "argument": [203, 397, 417, 442, 485], "output_graph": 203, "dyna": [203, 283, 296, 336, 417, 452, 482], "sigopt": [204, 205, 247, 248, 283, 336, 481], "tpe": [204, 205, 247, 248, 283, 336], "sigopttunestrategi": [206, 249], "q_dataload": [206, 207, 249, 250, 321, 323, 326, 329, 379, 380, 382, 383, 385, 387, 390, 451, 491], "eval_func": [206, 207, 249, 250, 320, 321, 323, 326, 329, 345, 378, 379, 380, 382, 383, 385, 387, 390, 397, 399, 416, 439, 440, 442, 443, 444, 445, 456, 483, 484, 485, 491, 493], "eval_metr": [206, 207, 345, 378, 379, 380, 382, 383, 385, 387, 390, 399, 455, 483], "q_hook": [206, 207, 249, 250, 321, 323, 326, 329, 379, 380, 382, 383, 385, 387, 390], "mandatori": [206, 207, 249, 250, 378, 456, 493], "yield": [206, 207, 216, 238, 249, 250, 259, 323, 345, 378, 382, 397, 399, 439, 483, 491], "_": [206, 207, 249, 250, 378, 416, 417, 420, 421, 438, 439, 442, 443, 445, 447, 449, 456, 457, 458, 459, 465, 469, 471, 473, 474, 478, 480, 483, 485, 486, 487, 488, 489, 491, 493], "well": [206, 207, 249, 250, 345, 378, 399, 417, 419, 440, 480, 483, 486, 488, 493], "taken": [206, 207, 249, 250, 345, 378, 399, 483], "reserv": [206, 207, 249, 250], "abl": [206, 207, 249, 250, 345, 378, 399, 467, 476, 483], "tuner": [206, 207, 249, 250, 282, 319, 345, 378, 399, 483], "scalar": [206, 207, 249, 250, 345, 378, 399, 455, 483], "pseudo": [206, 207, 249, 250, 378, 399, 489], "someth": [206, 207, 220, 249, 250, 263, 378, 399], "fefin": [207, 250], "tpetunestrategi": [207, 250], "basedatalod": [208, 251], "basedataload": [208, 213, 215, 251, 256, 258], "last_batch": [208, 210, 213, 217, 238, 251, 253, 256, 260], "rollov": [208, 210, 213, 217, 238, 251, 253, 256, 260, 439], "collate_fn": [208, 210, 211, 213, 217, 238, 251, 253, 254, 256, 260, 440], "sampler": [208, 210, 212, 213, 217, 238, 251, 253, 255, 256, 260, 272, 283, 332, 393, 439, 445], "batch_sampl": [208, 210, 213, 217, 238, 251, 253, 256, 260], "num_work": [208, 210, 213, 217, 238, 251, 253, 256, 260, 456, 483], "pin_memori": [208, 210, 213, 217, 238, 251, 253, 256, 260], "shuffl": [208, 210, 213, 217, 238, 251, 253, 256, 260, 439, 456, 483], "_generate_dataload": [208, 251], "check_dataload": 209, "default_col": [210, 253], "outer": [210, 253], "defaultdataload": [210, 217, 253, 260], "definit": [211, 216, 254, 259], "style": [211, 225, 254, 268, 397, 415, 440, 451], "drop_last": [211, 216, 254, 259], "iterablefetch": [211, 254], "indexfetch": [211, 254], "base_dataload": [212, 255, 272, 283], "default_dataload": [212, 255, 272, 283], "fetcher": [212, 255, 272, 283], "mxnet_dataload": [212, 255, 272, 283], "onnxrt_dataload": [212, 255, 272, 283, 371], "pytorch_dataload": [212, 255, 272, 283], "tensorflow_dataload": [212, 255, 272, 283, 376], "mxnetdataload": [213, 256], "onnxrtbertdataload": [214, 257], "varient": [214, 257], "onnxrtdataload": [214, 257, 371], "pytorchdataload": [215, 258], "data_sourc": [216, 259, 402], "__iter__": [216, 220, 259, 263, 439, 440, 456], "matter": [216, 259, 484], "iterablesampl": [216, 259], "squential": [216, 259], "your": [216, 218, 259, 261, 415, 439, 440, 442, 445, 454, 456, 459, 462, 463, 464, 469, 470, 471, 473, 474, 476, 480, 481, 487, 489, 491, 492], "clear": [216, 259, 420, 449, 455, 456], "iterabledataset": [216, 220, 259, 263], "try": [216, 259, 416, 442, 480, 483, 488, 491], "indexdataset": [216, 259], "__getitem__": [216, 220, 235, 259, 263, 276, 440, 456], "__len__": [216, 220, 259, 263, 440], "retriev": [216, 259], "sequentialsampl": [216, 259], "sequenti": [216, 259, 320, 322, 379, 381, 491], "batchsampl": [216, 259], "tfdatadataload": [217, 260], "tensorflow1": [217, 260], "coupl": [217, 260], "satisfi": [217, 260, 442, 453], "usag": [217, 260, 287, 293, 320, 340, 397, 421, 440, 445, 446, 459, 467, 478, 482, 490], "tf1": [217, 260, 458], "although": [217, 260, 487], "tensorflowbertdataload": [217, 260], "tensorflowmodelzoobertdataload": [217, 260], "zoo": [217, 235, 260, 276, 419, 446, 450, 494], "tensorflowdataload": [217, 260, 376], "pytorchbertdataset": [218, 261], "model_typ": [218, 261, 410, 440], "construct": [218, 221, 222, 225, 233, 238, 240, 241, 243, 261, 264, 265, 268, 344, 349, 353, 396, 402, 414, 421, 422, 440, 445, 480, 491], "tensordataset": [218, 261, 440], "repo": [218, 261, 413, 440, 446, 469, 471, 473, 474, 495], "easi": [218, 261, 319, 447, 456, 481, 483, 487], "load": [218, 234, 235, 261, 275, 276, 345, 353, 378, 409, 410, 421, 439, 469, 473, 477, 482, 483, 488], "squad": [218, 235, 261, 276, 288, 289, 291, 341, 342, 344, 440, 455, 480, 490, 494], "distilbert": [218, 261, 419, 440, 457, 481, 494], "xlnet": [218, 261, 440, 494], "xlm": [218, 261, 440, 494], "101": [218, 261, 291, 344, 455, 488, 494], "2043": [218, 261], "2001": [218, 261], "onnxrtbertdataset": [218, 261], "data_dir": [218, 261, 440], "model_name_or_path": [218, 261, 440, 456, 464, 465], "max_seq_length": [218, 235, 261, 276, 440, 490], "do_lower_cas": [218, 234, 235, 261, 275, 276, 440, 490], "mrpc": [218, 261, 291, 344, 440, 455, 464, 480, 491, 494], "dynamic_length": [218, 261, 440], "shortcut": [218, 261, 440], "token": [218, 229, 232, 235, 261, 272, 274, 276, 283, 284, 285, 336, 337, 338, 405, 440, 455, 456, 485, 487, 488, 490, 491], "longer": [218, 235, 261, 276, 440, 490], "truncat": [218, 235, 261, 276, 440, 490], "shorter": [218, 235, 261, 276, 440, 490], "lowercas": [218, 261, 440], "choic": [218, 261, 420, 440, 455, 488], "qqp": [218, 261, 440, 455, 494], "qnli": [218, 261, 440, 455, 494], "rte": [218, 261, 440, 455, 494], "st": [218, 261, 440, 455], "cola": [218, 261, 440, 455, 494], "mnli": [218, 261, 440, 455, 494], "wnli": [218, 261, 440, 455], "mobilebert": [218, 261, 440, 443, 494], "roberta": [218, 261, 440, 494], "uncas": [218, 235, 261, 276, 440, 490, 494], "load_and_cache_exampl": [218, 261], "cach": [218, 261, 448, 483, 485], "convert_examples_to_featur": [218, 235, 261, 276], "max_length": [218, 261], "label_list": [218, 261, 291, 344], "output_mod": [218, 261], "pad_token": [218, 261], "pad_token_segment_id": [218, 261], "mask_padding_with_zero": [218, 261], "inputfeatur": [218, 235, 261, 276], "properti": [218, 261, 396, 454], "input_id": [218, 235, 261, 276, 456], "vocabulari": [218, 234, 235, 261, 275, 276, 490], "attention_mask": [218, 261, 456], "usual": [218, 261, 421, 442, 443, 479, 480, 483, 488], "NOT": [218, 261, 449], "token_type_id": [218, 261, 456], "segment": [218, 261, 285, 287, 338, 340], "portion": [218, 261], "problem": [218, 261, 291, 344, 455, 457, 477], "regress": [218, 261, 442], "seq_length": [218, 261], "tensorflowbertdataset": [218, 261], "label_fil": [218, 235, 261, 276, 440, 490], "tfrecord": [218, 219, 220, 261, 262, 263, 440], "guid": [218, 261, 416, 419, 440, 443, 453, 459, 467, 476, 495], "parsedecodebert": [218, 261], "tensorflowmodelzoobertdataset": [218, 219, 261, 262], "num_cor": [218, 219, 223, 261, 262, 266, 440], "28": [218, 219, 223, 261, 262, 266, 440, 494], "coco": [219, 226, 230, 262, 269, 287, 291, 340, 344, 455, 480], "parsedecodecoco": [219, 262], "cocorecorddataset": [219, 262], "interleav": [219, 262, 440], "parallel": [219, 262, 372, 377, 440, 456, 491], "cocoraw": [219, 262, 440], "img_dir": [219, 262, 440], "val2017": [219, 262, 440], "anno_dir": [219, 262, 440], "annot": [219, 262, 287, 340, 397, 421, 422, 440, 455, 480, 491], "instances_val2017": [219, 262, 440], "jpg": [219, 223, 225, 262, 266, 268, 440], "imag": [219, 220, 223, 225, 231, 235, 262, 263, 266, 268, 273, 276, 287, 340, 440, 445, 447, 480, 482, 488, 489, 490, 494], "coconpi": [219, 262, 440], "npy_dir": [219, 262, 440], "npy": [219, 262, 440], "tensorflowdataset": [220, 263], "pytorchdataset": [220, 263], "mxnetdataset": [220, 263], "onnxrtqldataset": [220, 263], "onnxrtitdataset": [220, 263], "IT": [220, 227, 263, 270, 481], "pytorchmxnetwrapdataset": [220, 263], "datafunc": [220, 263], "pytorchmxnetwrapfunct": [220, 235, 263, 276], "framework_dataset": [220, 263], "convent": [220, 263, 287, 340, 443], "imageclassifi": [220, 263], "tensorflow_itex": [220, 223, 225, 227, 263, 266, 268, 270, 439, 482], "onnxrt_qdq": [220, 227, 263, 270, 482], "onnxrt_qlinearop": [220, 227, 235, 263, 270, 276, 482], "onnxrt_integerop": [220, 227, 235, 263, 270, 276, 482], "pytorch_ipex": [220, 227, 263, 270, 456, 482, 493], "pytorch_fx": [220, 227, 263, 270, 456, 482], "dataset_registri": [220, 263], "dataset_typ": [220, 263], "dataset_format": [220, 263], "data_format": [220, 231, 263, 273], "raw_imag": [220, 263], "overwrit": [220, 263, 469, 473], "download_url": [220, 263], "filenam": [220, 263, 410, 440], "md5": [220, 263], "download": [220, 263, 440, 442, 453, 486], "address": [220, 263, 414, 457, 481], "gen_bar_updat": [220, 263], "bar": [220, 263, 476, 481], "check_integr": [220, 263], "fpath": [220, 263], "checksum": [220, 263], "calculate_md5": [220, 263], "chunk_siz": [220, 263], "cifar10": [220, 263, 440], "cifar100": [220, 263, 440], "databas": [220, 263], "otherwis": [220, 235, 263, 276, 410, 414, 421, 440, 471, 474, 482, 490], "www": [220, 263, 440, 494], "toronto": [220, 263, 440], "kriz": [220, 263, 440], "cifar": [220, 263, 440, 494], "tar": [220, 263, 440, 442, 471, 474], "gz": [220, 263, 440, 442, 471, 474], "manual": [220, 263, 440, 459, 465, 467, 470], "subset": [220, 223, 263, 266, 440], "internet": [220, 263, 440], "put": [220, 263, 440, 443], "again": [220, 263, 440, 484], "pytorchcifar10": [220, 263], "mxnetcifar10": [220, 263], "tensorflowcifar10": [220, 263], "pytorchcifar100": [220, 263], "mxnetcifar100": [220, 263], "tensorflowcifar100": [220, 263], "mnist": [220, 263, 440, 445], "nation": [220, 263, 414], "institut": [220, 263], "standard": [220, 235, 263, 276, 421, 442, 447, 455, 490, 491], "technologi": [220, 263, 456], "fashionmnist": [220, 263, 440], "npz": [220, 263, 440], "idx1": [220, 263, 440], "ubyt": [220, 263, 440], "idx3": [220, 263, 440], "t10k": [220, 263, 440], "pytorchmnist": [220, 263], "mxnetmnist": [220, 263], "tensorflowmnist": [220, 263], "pytorchfashionmnist": [220, 263], "mxnetfashionmnist": [220, 263], "tensorflowfashionmnist": [220, 263], "imagefold": [220, 263, 440, 445, 456], "expect": [220, 263, 414, 415, 448, 476, 483, 485, 491], "subfold": [220, 263], "belong": [220, 263, 349, 483], "class_1": [220, 263, 440], "xxx": [220, 263, 415, 440, 456], "png": [220, 263, 440], "xxy": [220, 263, 440], "xxz": [220, 263, 440], "class_n": [220, 263, 440], "123": [220, 263, 440, 490], "nsdf3": [220, 263, 440], "asd932_": [220, 263, 440], "categori": [220, 263, 286, 339, 437, 440, 466], "mxnetimagefold": [220, 263], "tensorflowtfrecorddataset": [220, 263], "tensorflowimagerecord": [220, 263], "imagenet": [220, 223, 231, 263, 266, 273, 417, 442, 456, 465, 480, 489, 490, 493, 494], "000": [220, 263, 419, 440], "099": [220, 263, 440], "tensorflowvocrecord": [220, 263], "pascal": [220, 263], "voc": [220, 263, 291, 344], "2012": [220, 263], "00000": [220, 263], "00004": [220, 263], "00001": [220, 263], "00003": [220, 263], "dummydataset": [221, 222, 264, 265], "127": [221, 222, 264, 265, 440, 483, 488], "float32": [221, 222, 235, 264, 265, 276, 287, 340, 420, 437, 440, 456, 483, 485, 488, 490], "stand_norm": [221, 222, 264, 265, 440], "dummy_v2": [222, 265, 440], "sparse_dummy_v2": [222, 265, 440], "label_shap": [222, 265, 440], "sparsedummydataset": [222, 265], "dense_shap": [222, 265, 440], "sparse_ratio": [222, 265, 440], "imagenetraw": [223, 266, 440], "data_path": [223, 266, 440], "image_list": [223, 266, 440], "img1": [223, 266, 440], "img2": [223, 266, 440], "imgx": [223, 266, 440], "val_map": [223, 266, 440], "txt": [223, 266, 440, 442, 453], "pytorchimagenetraw": [223, 266], "mxnetimagenetraw": [223, 266], "tensorflowimagenetraw": [223, 266], "inteltensorflow": [223, 225, 266, 268, 453], "tensorflowimagenetdataset": [223, 266], "onnxrtimagenetdataset": [223, 266], "bert_dataset": [224, 229, 267, 272, 283, 336], "coco_dataset": [224, 229, 267, 272, 283, 336], "dummy_dataset": [224, 229, 267, 272, 283, 336], "dummy_dataset_v2": [224, 229, 267, 272, 283, 336], "imagenet_dataset": [224, 229, 267, 272, 283, 336], "style_transfer_dataset": [224, 229, 267, 272, 283, 336], "styletransferdataset": [225, 268], "content_fold": [225, 268, 440], "style_fold": [225, 268, 440], "crop_ratio": [225, 268, 440], "resize_shap": [225, 268, 440], "256": [225, 231, 268, 273, 440, 445, 456, 490], "image_format": [225, 268, 440], "holder": [225, 268, 440], "labelbalancecocorecordfilt": [226, 269], "balanc": [226, 269, 485, 488], "labelbalancecocorawfilt": [226, 269], "tensorflowfilt": [227, 270], "onnxrtqlfilt": [227, 270], "onnxrtitfilt": [227, 270], "pytorchfilt": [227, 270], "mxnetfilt": [227, 270], "filter_registri": [227, 270], "filter_typ": [227, 270], "__call__": [227, 270], "coco_filt": [228, 229, 271, 272, 283, 336], "imagenet_transform": [229, 232, 272, 274, 283, 336], "parsedecodecocotransform": 230, "decod": [230, 231, 273, 284, 337, 455, 490], "quantizedinput": [231, 273, 490], "labelshift": [231, 273, 490], "label_shift": [231, 273, 490], "parsedecodeimagenet": [231, 273, 490], "proto": [231, 235, 273, 276, 490], "parsedecodeimagenettransform": [231, 273], "tensorflowtransposelastchannel": 231, "tensorflowshiftrescal": 231, "rescal": [231, 235, 276, 490], "tensorflowresizecropimagenettransform": [231, 273], "random_crop": [231, 273, 490], "resize_sid": [231, 273, 490], "resize_method": [231, 273], "bilinear": [231, 235, 273, 276, 490], "random_flip_left_right": [231, 273, 490], "mean_valu": [231, 273, 490], "channels_last": [231, 273, 459], "subpixel": [231, 273], "rgb": [231, 273], "seri": [231, 273, 419, 453, 456, 490], "applic": [231, 273, 422, 447, 459, 476, 481, 485, 488, 489, 490, 492], "crop": [231, 235, 273, 276, 440, 490], "flip": [231, 235, 273, 276, 490], "left": [231, 235, 273, 276, 470, 476, 488, 490], "right": [231, 273, 287, 340, 414, 416, 476, 488, 490], "std": [231, 235, 273, 276, 456, 490], "bilinearimagenettransform": [231, 273], "central_fract": [231, 273, 490], "875": [231, 273, 490], "fraction": [231, 273, 490], "onnxbilinearimagenettransform": [231, 273], "onnxresizecropimagenettransform": [231, 273], "std_valu": [231, 273], "229": [231, 273, 456], "225": [231, 273, 456], "resizewithaspectratio": [231, 273], "87": [231, 273, 494], "inter_pol": [231, 273], "cv2": [231, 273], "inter_area": [231, 273], "aspect": [231, 235, 273, 276, 490], "postprocess_cl": [233, 243, 456], "user_postprocess": [233, 243], "convert_to_unicod": [234, 275], "unicod": [234, 275], "assum": [234, 275, 287, 298, 340, 420, 449, 476], "utf": [234, 275], "load_vocab": [234, 275], "vocab_fil": [234, 235, 275, 276, 490], "convert_by_vocab": [234, 275], "vocab": [234, 275], "whitespace_token": [234, 275], "whitespac": [234, 275, 289, 342], "clean": [234, 275, 415, 456], "piec": [234, 275, 284, 337, 455, 485], "fulltoken": [234, 275], "tokenzi": [234, 275], "basictoken": [234, 275], "punctuat": [234, 275, 284, 289, 337, 342], "lower": [234, 235, 275, 276, 289, 342, 383, 444, 480, 481, 483, 488, 490, 491], "wordpiecetoken": [234, 275], "unk_token": [234, 275], "unk": [234, 275], "max_input_chars_per_word": [234, 275], "200": [234, 275, 416, 491], "wordpiec": [234, 235, 275, 276, 490], "concat_gener": [235, 276], "inc": [235, 276, 414, 419, 421, 459, 466, 476, 481, 482, 486, 491], "tensorflowtransform": [235, 276], "mxnettransform": [235, 276], "pytorchtransform": [235, 276], "onnxrtqltransform": [235, 276], "onnxrtittransform": [235, 276], "transform_registri": [235, 276], "transform_typ": [235, 276], "basetransform": [235, 276], "tensorflowwrapfunct": [235, 276], "transform_func": [235, 276], "pytorchmxnettransform": [235, 276], "get_torchvision_map": [235, 276], "torchvis": [235, 276, 446, 450, 459, 465], "composetransform": [235, 276], "transform_list": [235, 276, 490], "compos": [235, 276, 402, 490], "croptoboundingbox": [235, 276, 490], "offset_height": [235, 276, 490], "offset_width": [235, 276, 490], "target_height": [235, 276, 490], "target_width": [235, 276, 490], "box": [235, 276, 287, 291, 340, 344, 416, 455, 459, 470, 476, 489, 490, 491], "coordin": [235, 276, 323, 382, 490, 491], "top": [235, 276, 282, 291, 306, 311, 319, 344, 455, 476, 490], "corner": [235, 276, 420, 422, 490], "horizont": [235, 276, 490], "mxnetcroptoboundingbox": [235, 276], "onnxrtcroptoboundingbox": [235, 276], "tensorflowcroptoboundingbox": [235, 276], "resizewithratio": [235, 276, 490], "min_dim": [235, 276, 490], "800": [235, 276, 490], "max_dim": [235, 276, 490], "1365": [235, 276, 490], "constant_valu": [235, 276], "longest": [235, 276, 490], "side": [235, 276, 440, 470, 490], "doesn": [235, 276, 420, 445, 456, 457, 477, 493], "exce": [235, 276, 490], "tensorflowresizewithratio": [235, 276], "permut": [235, 276, 490], "tensorflowtranspos": [235, 276], "mxnettranspos": [235, 276], "pytorchtranspos": [235, 276], "randomverticalflip": [235, 276, 490], "tensorflowrandomverticalflip": [235, 276], "randomhorizontalflip": [235, 276, 456, 490], "tensorflowrandomhorizontalflip": [235, 276], "toarrai": [235, 276, 490], "pil": [235, 276, 490], "casttftransform": [235, 276], "castonnxtransform": [235, 276], "castpytorchtransform": [235, 276], "centercroptftransform": [235, 276], "center": [235, 276, 418, 419, 453, 490, 491], "paddedcentercroptransform": [235, 276], "crop_pad": [235, 276], "resizetftransform": [235, 276], "bicub": [235, 276, 490], "resizepytorchtransform": [235, 276], "randomcroptftransform": [235, 276], "randomresizedcroppytorchtransform": [235, 276], "08": [235, 276, 490, 494], "randomresizedcropmxnettransform": [235, 276], "randomresizedcroptftransform": [235, 276], "normalizetftransform": [235, 276], "deviat": [235, 276, 442, 490], "broadcast": [235, 276, 445, 490], "rescalekeraspretraintransform": [235, 276], "rescaletftransform": [235, 276], "rescaletransform": [235, 276], "alignimagechanneltransform": [235, 276], "dim": [235, 276, 485, 488, 490], "align": [235, 276, 414, 490], "w": [235, 276, 480, 488, 490], "must": [235, 276, 287, 340, 415, 416, 421, 437, 439, 453, 483, 490], "pytorchalignimagechannel": [235, 276], "tondarraytransform": [235, 276], "resizemxnettransform": [235, 276], "resizetransform": [235, 276], "cropresizetftransform": [235, 276], "boundari": [235, 276, 490], "area": [235, 276, 287, 340, 455, 490], "pytorchcropresizetransform": [235, 276], "mxnetcropresizetransform": [235, 276], "cropresizetransform": [235, 276], "centercroptransform": [235, 276], "mxnetnormalizetransform": [235, 276], "pytorchnormalizetransform": [235, 276], "normalizetransform": [235, 276], "randomcroptransform": [235, 276], "randomresizedcroptransform": [235, 276], "get_final_text": [235, 276], "pred_text": [235, 276], "orig_text": [235, 276], "project": [235, 276, 413, 414, 415, 481, 487, 491, 495], "squadexampl": [235, 276], "qas_id": [235, 276], "question_text": [235, 276], "doc_token": [235, 276], "orig_answer_text": [235, 276], "start_posit": [235, 276], "end_posit": [235, 276], "is_imposs": [235, 276], "simpl": [235, 276, 453, 456, 487, 488, 491], "answer": [235, 276, 288, 289, 341, 342, 414, 480, 490, 494], "posit": [235, 276, 414, 455, 459], "unique_id": [235, 276], "example_index": [235, 276], "doc_span_index": [235, 276], "token_to_orig_map": [235, 276], "token_is_max_context": [235, 276], "input_mask": [235, 276, 456], "segment_id": [235, 276, 456], "read_squad_exampl": [235, 276], "input_fil": [235, 276], "doc_strid": [235, 276, 490], "max_query_length": [235, 276, 490], "output_fn": [235, 276], "inputbatch": [235, 276], "collecttransform": [235, 276], "10833": [235, 276], "tfsquadv1posttransform": [235, 276], "n_best_siz": [235, 276, 490], "384": [235, 276, 490], "64": [235, 276, 417, 485, 488, 490, 494], "max_answer_length": [235, 276, 490], "30": [235, 276, 446, 450, 452, 488, 490, 494], "nbest_predict": [235, 276, 490], "question": [235, 276, 288, 289, 341, 342, 414, 415, 420, 453, 459, 480, 488, 490, 494], "anoth": [235, 276, 284, 293, 337, 410, 442, 443, 469, 473, 490, 491], "long": [235, 276, 448, 485, 490], "document": [235, 276, 397, 415, 421, 422, 427, 445, 457, 461, 471, 474, 475, 480, 486, 490, 492], "chunk": [235, 276, 490], "tfmodelzoocollecttransform": [235, 276], "tfsquadv1modelzooposttransform": [235, 276], "squadv1": [235, 276, 490], "see": [235, 276, 284, 337, 414, 416, 418, 454, 456, 469, 470, 473, 476, 477, 485, 488, 489, 491], "parsedecodevoctransform": [235, 276], "conf_fname_or_obj": [236, 245, 277, 282, 292, 293, 294, 295, 297, 306, 311, 319], "thei": [236, 397, 414, 443, 449, 456, 464, 478], "possibl": [236, 442, 479, 480, 484, 491], "unnecessari": [236, 456], "tensorflowcrossentropyloss": 237, "pytorchcrossentropyloss": 237, "tensorflowsparsecategoricalcrossentropi": 237, "sparsecategoricalcrossentropyloss": 237, "setter": 238, "calib_dataload": [238, 320, 378, 416, 419, 439, 440, 442, 450, 451, 455, 456, 483, 484], "reason": [238, 414, 421, 439, 485, 489, 491], "know": [238, 445, 486], "known": [238, 323, 382, 456, 489, 491], "open": [239, 283, 336, 402, 412, 414, 419, 447, 448, 456, 471, 474, 477, 481], "metric_cl": [240, 344, 378, 456], "user_metr": [240, 344, 378], "alwai": [240, 287, 340, 344, 378, 442, 455, 456], "recommend": [240, 344, 420, 440, 449, 467, 470, 475, 477, 480, 482, 491], "set_backend": 241, "tensorflowoptim": 242, "pytorchoptim": 242, "optimizer_registri": 242, "optimizer_typ": 242, "cross": [242, 291, 344, 451, 491], "tensorflowsgd": 242, "tensorflowadamw": 242, "tensorflow_addon": 242, "adamw": 242, "tensorflowadam": 242, "adam": [242, 493], "pytorchsgd": 242, "record_output": 244, "output_process": 244, "get_activ": 244, "tensorflowimagefold": 263, "qlinear2qdq": [278, 283, 336], "qlinearop": [279, 442, 452, 467, 483, 494], "check_model": 279, "modelproto": [279, 345, 458], "onnx_qlinear_to_qdq": 279, "input_name_to_nod": 279, "destin": [279, 293], "tf_to_fp32_onnx": 280, "tf_to_int8_onnx": 280, "int8_model": [280, 281, 420], "get_node_map": 281, "fp32_onnx_path": 281, "module_node_map": 281, "get_quantizable_onnx_op": 281, "quantize_nod": 281, "dynamic_quant_export": 281, "pt_fp32_model": 281, "pt_int8_model": 281, "weight_typ": 281, "s8": 281, "static_quant_export": 281, "_quantiz": 281, "torch_to_fp32_onnx": 281, "do_constant_fold": 281, "verbos": [281, 323, 382], "torch_to_int8_onnx": 281, "achiev": [282, 319, 447, 456, 479, 480, 481, 483, 489, 491], "across": [282, 292, 319, 345, 441, 456, 480, 488, 491], "variou": [282, 292, 319, 345, 422, 452, 459, 480, 482], "dl": [282, 292, 306, 311, 319, 345, 442, 451, 463, 476, 481, 494], "bring": [282, 319, 470, 488], "unifi": [282, 319, 420, 421, 422, 439, 451, 452, 455, 456, 458], "vari": [282, 306, 311, 319, 480, 488, 494], "roc": [282, 291, 306, 311, 319, 344], "flexibl": [282, 306, 311, 319, 443, 480, 485], "via": [282, 306, 311, 319, 414, 445, 452, 456, 459, 476, 480], "popular": [283, 336, 412, 419, 420, 421, 438, 443, 446, 447, 450, 456, 480, 483, 485, 491, 492], "techniqu": [283, 336, 412, 419, 452, 456, 459, 479, 480, 481, 482, 483, 492, 493, 494], "bleu": [283, 285, 290, 336, 338, 343, 455, 480], "bleu_util": [283, 290, 336, 343], "coco_label_map": [283, 290, 336, 343], "coco_tool": [283, 290, 336, 343], "evaluate_squad": [283, 290, 336, 343], "f1": [283, 288, 290, 291, 336, 341, 343, 344, 445, 455, 456, 487, 494], "basic_na": [283, 296, 336], "nas_util": [283, 296, 336], "pruner_legaci": [283, 336], "gradient_sensit": [283, 302, 336], "group_lasso": [283, 302, 336], "pruning_recip": [283, 336], "tile_pattern": [283, 307, 308], "logger": [283, 312, 336, 400, 403, 410], "prune_util": [283, 312, 336], "tuning_sampl": [283, 325, 331, 336, 386, 392], "tuning_spac": [283, 325, 331, 332, 334, 336, 386, 392, 393, 395], "tuning_struct": [283, 325, 331, 332, 333, 336, 386, 392, 393, 394], "auto_mixed_precis": [283, 325, 336, 386], "graph_optim": [283, 336], "mixed_precis": [283, 336, 345, 456], "model_convers": [283, 336], "pruning_v2": [283, 336], "unicoderegex": [284, 337], "hoc": [284, 337], "hack": [284, 337], "recogn": [284, 337, 491], "nondigit_punct_r": [284, 337], "compil": [284, 337, 456], "express": [284, 337, 414], "preced": [284, 337, 488], "digit": [284, 337, 410, 481], "punct_nondigit_r": [284, 337], "symbol_r": [284, 337], "bleu_token": [284, 337], "mose": [284, 337, 485], "smt": [284, 337], "mosesdecod": [284, 337], "mteval": [284, 337], "v14": [284, 337], "pl": [284, 337], "l954": [284, 337], "l983": [284, 337], "bilingu": [284, 337], "understudi": [284, 337], "qualiti": [284, 337], "machin": [284, 337, 447, 453, 462, 476, 481, 488, 489], "translat": [284, 285, 337, 338, 480, 491], "natur": [284, 337, 447], "approxim": [284, 285, 337, 338, 421, 455], "glue": [284, 291, 337, 344, 440, 455, 456, 465], "word": [284, 337, 455, 480, 485, 494], "ngram": [284, 337, 455], "breviti": [284, 285, 337, 338, 455], "penalti": [284, 285, 337, 338, 455], "doe": [284, 337, 396, 439, 440, 455, 456, 485, 486, 490], "beam": [284, 337, 455], "tensor2tensor": [285, 338], "bleu_hook": [285, 338], "compute_bleu": [285, 338], "reference_corpu": [285, 338], "translation_corpu": [285, 338], "max_ord": [285, 338], "use_bp": [285, 338], "against": [285, 338], "gram": [285, 338], "bleu_scor": [285, 338], "third": [287, 340, 454], "parti": [287, 340, 454, 483], "pycocotool": [287, 340, 448, 453], "noth": [287, 340, 491], "thu": [287, 340, 456, 480, 483], "cannot": [287, 340, 416, 448, 489], "jonathanhuang": [287, 340], "image_id": [287, 340, 455], "encod": [287, 340, 490], "invok": [287, 340, 421], "groundtruth_dict": [287, 340], "exportgroundtruthtococo": [287, 340], "groundtruth_boxes_list": [287, 340], "groundtruth_classes_list": [287, 340], "max_num_class": [287, 340], "output_path": [287, 340], "detections_list": [287, 340], "exportdetectionstococo": [287, 340], "detection_boxes_list": [287, 340], "detection_scores_list": [287, 340], "detection_classes_list": [287, 340], "cocowrapp": [287, 340], "loadannot": [287, 340], "cocoevalwrapp": [287, 340], "agnostic_mod": [287, 340], "computemetr": [287, 340], "detection_typ": [287, 340], "bbox": [287, 340, 416, 455], "hold": [287, 323, 340, 382, 440], "iou_typ": [287, 340], "iou_thr": [287, 291, 340, 344, 455], "map_point": [287, 291, 340, 344, 455], "cocoev": [287, 340], "mscoco": [287, 340], "Then": [287, 340, 421, 442, 469, 471, 473, 474, 488, 491], "exportsingleimagegroundtruthtococo": [287, 340], "next_annotation_id": [287, 340], "category_id_set": [287, 340], "groundtruth_box": [287, 340], "groundtruth_class": [287, 340], "groundtruth_mask": [287, 340], "groundtruth_is_crowd": [287, 340], "ingest": [287, 340], "here": [287, 340, 397, 421, 440, 445, 446, 447, 449, 450, 455, 464, 471, 474, 476, 483, 486, 487, 494], "ones": [287, 340, 480], "exportsingleimagedetectionstococo": [287, 340], "uniqu": [287, 320, 340, 483], "assign": [287, 340, 410, 445, 482, 491], "num_gt_box": [287, 340], "num_detect": [287, 291, 340, 344, 455, 456, 493], "image_height": [287, 340], "image_width": [287, 340], "detection_mask": [287, 340], "crowd": [287, 340], "insid": [287, 340, 443, 444, 477, 480, 491], "exportsingleimagedetectionboxestococo": [287, 340], "detection_box": [287, 340, 456, 493], "detection_scor": [287, 340, 456, 493], "detection_class": [287, 340, 456, 493], "exporsingleimagedetectionboxestococo": [287, 340], "exportsingleimagedetectionmaskstococo": [287, 340], "allenai": [288, 289, 341, 342], "bi": [288, 289, 341, 342], "att": [288, 289, 341, 342], "flow": [288, 289, 341, 342, 416, 417, 456], "f1_score": [288, 289, 341, 342], "ground_truth": [288, 289, 341, 342], "ground": [288, 289, 341, 342], "truth": [288, 289, 341, 342], "metric_max_over_ground_truth": [288, 289, 341, 342], "metric_fn": [288, 289, 341, 342], "exact_match_scor": [288, 341], "exact": [288, 341], "averag": [288, 289, 291, 341, 342, 344, 455, 456, 491], "articl": [288, 289, 341, 342], "paragraph": [288, 289, 341, 342], "qa": [288, 289, 341, 342], "cantain": [288, 289, 341, 342], "normalize_answ": [289, 342], "extra": [289, 342, 456], "newlin": [289, 342, 410], "tab": [289, 342, 476, 489], "harmon": [289, 291, 342, 344], "recal": [289, 291, 342, 344], "answer_start": [289, 342], "177": [289, 342], "denver": [289, 342], "bronco": [289, 342], "nfl": [289, 342], "team": [289, 342, 414, 484], "afc": [289, 342], "super": [289, 342, 417], "bowl": [289, 342], "50": [289, 342, 417, 421, 488, 494], "56be4db0acb8001400a502ec": [289, 342], "form": [289, 342, 442, 443, 476], "percentag": [289, 342, 438, 493], "tensorflowmetr": [291, 344], "maintain": [291, 344, 414, 415, 419, 458, 459, 471, 474, 485, 486], "pytorchmetr": [291, 344], "mxnetmetr": [291, 344], "onnxrtqlmetr": [291, 344], "onnxrtitmetr": [291, 344], "metric_registri": [291, 344], "metric_typ": [291, 344], "decorator_metr": [291, 344], "basemetr": [291, 344, 378], "single_output": [291, 344], "hvd": [291, 344, 445], "wrappytorchmetr": [291, 344], "wrapmxnetmetr": [291, 344], "wraponnxrtmetr": [291, 344], "proport": [291, 344], "were": [291, 344, 462, 480], "pred_list": [291, 344], "pytorchloss": [291, 344], "mae": [291, 344, 455], "compare_label": [291, 344, 378, 455], "rmse": [291, 344, 455, 491], "squar": [291, 326, 344, 387, 442, 455, 488, 491], "tensorflowtopk": [291, 344], "k": [291, 344, 378, 455], "among": [291, 344, 470, 488], "outcom": [291, 344], "num_correct": [291, 344], "num_sampl": [291, 344], "generaltopk": [291, 344], "cocomapv2": [291, 344, 455], "anno_path": [291, 344, 455], "map_kei": [291, 344], "detectionboxes_precis": [291, 344], "output_index_map": [291, 344, 455], "tensorflowmap": [291, 344], "tensorflowcocomap": [291, 344], "tensorflowvocmap": [291, 344], "squadf1": [291, 344, 455], "miou": [291, 344], "num_class": [291, 344], "21": [291, 344, 464, 465, 481, 488, 494], "iou": [291, 344], "intersect": [291, 344, 420, 455], "union": [291, 344, 399, 455], "onnxrtglu": [291, 344], "dlrm": [291, 344], "modelconvers": 293, "typic": [293, 320, 417, 419, 444, 446, 450, 480, 494], "basicna": 294, "model_build": [294, 297], "conf_fnam": 294, "nasbas": [297, 417], "nas_registri": 298, "nas_method": 298, "create_search_space_pool": 298, "idx": [298, 440], "enumer": [298, 399, 420, 443, 444, 445, 456, 479, 480, 489], "find_pareto_front": 298, "pareto": [298, 417], "front": [298, 417], "n_point": 298, "n_metric": 298, "n_pareto_point": 298, "gradientsensitivityprun": 300, "pytorchmodel": [300, 301, 303, 304, 305, 354], "overwritten": [300, 301, 303, 304, 305, 464], "grouplassoprun": 301, "legaci": 302, "basicmagnitudeprun": 303, "patternlockprun": [304, 316], "pruner_registri": 305, "clase": 305, "pruningconf": [306, 311], "tfpruningcallback": [306, 311], "input_model": [306, 311, 458, 489], "pure": [306, 311, 480], "pattern_registri": 309, "pattern_typ": 309, "patternbas": 309, "mask_shap": [309, 310], "is_contigu": 309, "tile": 310, "tilepatternbas": 310, "tilepattern_1x1": 310, "1x1": [310, 443, 456, 480], "tilepattern_2x2": 310, "2x2": [310, 488], "tilepattern_1x16": 310, "1x16": 310, "tilepattern_4x1": 310, "tilepattern_1x2": 310, "1x2": [310, 488], "patternnxm": 314, "patternninm": 314, "reset_non_value_to_default": 315, "obejct": 315, "parse_not_to_prun": 315, "update_frequency_on_step": [316, 482], "max_sparsity_ratio_per_lay": [316, 482], "magnitudeprun": 316, "snipprun": 316, "snipmomentumprun": 316, "moreoev": 316, "quantconf": 319, "server": [320, 476], "seper": 320, "opt_model": [320, 456], "fulli": [320, 456, 483, 488], "train_func": [320, 399, 445, 456, 483], "automixedprecisiontunestrategi": [321, 380], "basictunestrategi": [322, 381], "stage": [322, 327, 379, 381, 388, 443, 480, 489, 491], "polici": [322, 326, 379, 381, 387, 414, 419, 493, 495], "bayesiantunestrategi": [323, 382], "acq_max": [323, 382], "ac": [323, 382], "gp": [323, 382], "y_max": [323, 382], "n_warmup": [323, 382], "10000": [323, 382, 480], "n_iter": [323, 382], "acquisit": [323, 382], "gaussian": [323, 382, 491], "relev": [323, 382, 421, 422], "acq": [323, 382], "randomst": [323, 382], "scipi": [323, 382], "x_max": [323, 382], "targetspac": [323, 382], "pbound": [323, 382], "9527": [323, 382, 456, 493], "allow": [323, 382, 443, 445, 455, 456, 457, 482, 488, 491, 493], "bayesianoptim": [323, 382], "exhaustivetunestrategi": [324, 384], "msetunestrategi": [326, 387], "mse_v2tunestrategi": [327, 388], "revert": [327, 335, 388, 396, 491], "randomtunestrategi": [328, 389], "strategy_registri": [329, 390, 491], "tunestrategi": [329, 390, 491], "tuningsamplerregistri": 332, "tuningsampl": [332, 393], "tuningord": [332, 393], "Not": [332, 333, 393, 394, 410, 417], "tuningspac": [332, 333, 393, 394], "tuning_order_lst": [332, 393], "initial_op_tuning_cfg": [332, 393], "modelwisetuningsampl": [332, 393], "tuning_items_prior": [332, 393], "op_dtype_dict": [332, 393], "optuningconfig": [332, 333, 334, 393, 394, 395], "optypewisetuningsampl": [332, 393], "opwisetuningsampl": [332, 393], "fallbacktuningsampl": [332, 393], "op_dtyp": [332, 393], "accumul": [332, 393, 491], "skip_first": [332, 393], "smoothquantsampl": [332, 393], "tuningitem": [333, 394], "item_typ": [333, 394], "pattern_to_intern": [333, 394], "default_dtyp": [333, 394], "pattern_to_path": [333, 394], "quant_mode_from_pattern": [333, 394], "internal_pattern": [333, 394], "initial_tuning_cfg_with_quant_mod": [333, 394], "op_name_typ": [333, 394], "step1": [333, 394], "step2": [333, 394], "complet": [333, 394, 420, 421, 483, 491, 493, 494], "step3": [333, 394], "step4": [333, 394], "step5": [333, 394], "op_quant_mod": [334, 395], "ordereddefaultdict": [335, 396], "extract_data_typ": [335, 396], "data_typ": [335, 396], "sign": [335, 396, 415, 422, 438, 483, 487], "reverted_data_typ": [335, 396], "signed_flag": [335, 396], "get_adaptor_nam": [335, 396], "experiment": [336, 371, 376, 417, 440, 444, 445, 447, 456, 480, 482, 486, 490], "base_model": [336, 347], "keras_model": [336, 347], "mxnet_model": [336, 347], "nets_factori": [336, 347], "onnx_model": [336, 347, 371], "tensorflow_model": [336, 347, 376], "torch_model": [336, 347], "collect_layer_histogram": [336, 403], "create_obj_from_config": [336, 403], "kl_diverg": [336, 403], "load_huggingfac": [336, 403, 456], "neural_insights_util": [336, 403], "weights_detail": [336, 403], "sub_class": [344, 378], "register_customer_metr": 344, "tell": [344, 378, 482], "topk": [344, 378, 445, 455, 456, 483], "matrix": [344, 378, 419, 467, 492], "frozen": [345, 353, 378, 458], "savedmodel": [345, 353, 378, 494], "chould": 345, "onnx_ml_pb2": [345, 458], "hybirdblock": [345, 378], "paramt": [345, 399], "basemodel": 346, "plai": [346, 481, 485, 488], "role": [346, 485, 488], "kerasmodel": 348, "get_model_fwk_nam": 349, "fwk": 349, "mxnetmodel": 350, "net": 351, "tfslimnetsfactori": 351, "onnxmodel": [352, 371], "get_model_typ": 353, "validate_graph_nod": 353, "validate_and_inference_input_output": 353, "output_tensor_nam": 353, "graph_sess": 353, "graph_def_sess": 353, "frozen_pb_sess": 353, "load_saved_model": 353, "saved_model_tag": 353, "signatur": 353, "saved_model_dir": 353, "tag": [353, 488, 489], "metagraphdef": 353, "keras_sess": 353, "slim_sess": 353, "checkpoint_sess": 353, "estimator_sess": 353, "saved_model_sess": 353, "tensorflowbasemodel": [353, 376], "tensorflowsavedmodelmodel": 353, "tensorflowqatmodel": 353, "tensorflowcheckpointmodel": 353, "checkpoint": [353, 409, 458], "tensorflowmodel": 353, "pytorchbasemodel": 354, "pytorchfxmodel": 354, "ipexmodel": 354, "driven": [355, 419, 456, 476, 478, 489], "objective_registri": 355, "objective_custom_registri": 355, "obj_cl": 355, "eural_compressor": 355, "objective_cl": 355, "user_object": 355, "__class__": 355, "__name__": 355, "objective_cfg": 355, "usr_cfg": 355, "user_obj_cfg": 355, "easili": [355, 420, 460, 464, 476, 478, 488], "peak": [355, 478], "multiobject": 355, "metric_criterion": 355, "metric_weight": 355, "obj_criterion": 355, "obj_weight": 355, "is_measur": 355, "parserfactori": 357, "onnxrtparserfactori": 359, "onnxprofilingpars": 361, "respons": [361, 362, 366, 483], "profilingpars": 362, "profilingresult": 363, "total_execution_tim": 363, "accelerator_execution_tim": 363, "cpu_execution_tim": 363, "op_run": 363, "op_defin": 363, "tensorflowparserfactori": 364, "tensorflowprofilingpars": 366, "profilerfactori": [367, 369, 374], "create_onnx_config": 372, "ort": 372, "sessionopt": 372, "delete_assign": 377, "create_tf_config": 377, "tf_modul": 377, "configproto": 377, "set_eager_execut": 377, "entir": [378, 399, 416, 421, 422, 438, 480, 488], "autotunestrategi": 379, "conservativetunestrategi": 383, "o0": [383, 491], "who": [383, 414], "hawq_v2tunestrategi": 385, "made": [385, 420, 483, 486, 491], "impact": [385, 486, 491], "tunestrategymeta": 390, "metaclass": 390, "lowerbitssampl": 393, "blockfallbacktuningsampl": 393, "op_block_lst": 393, "target_dtyp": 393, "alpha_list": 393, "quantopt": 396, "quant_typ": 396, "quant_opt": 396, "preprocess_user_cfg": 396, "op_user_cfg": 396, "op_user_cfg_modifi": 396, "build_slave_faker_model": 396, "slave": [396, 491], "virtual": [396, 481], "classregist": 396, "fun": 397, "attribute1": 397, "module_debug_level1": 397, "debug": [397, 406, 442, 469, 473, 477, 491, 492], "function1": 397, "param1": 397, "param2": 397, "parameter1": 397, "parameter2": 397, "o": [397, 453, 461, 488], "function2": 397, "pep": 397, "484": 397, "output_model": [397, 456, 489], "function3": 397, "section": [397, 422, 442, 443, 444, 476, 480, 482, 493], "restructuredtext": 397, "liter": 397, "attributeerror": 397, "except": [397, 410], "generator1": 397, "example_gener": 397, "exampleclass": 397, "param3": 397, "public": [397, 414, 471, 474], "attr1": 397, "attr2": 397, "attr5": 397, "api_doc_exampl": 398, "loop": [399, 416, 417, 421, 422, 449, 487, 491], "compressionmanag": 399, "uesd": 399, "deal": 399, "pruningconfig": 399, "orchestr": [399, 419, 452, 492], "on_train_begin": [399, 416, 443, 444, 456, 479, 480, 483], "train_loop": [399, 456, 479], "on_epoch_begin": [399, 402, 443, 444, 456, 479], "on_step_begin": [399, 402, 443, 444, 456, 479, 480], "on_after_compute_loss": [399, 443, 444, 456, 479], "backward": [399, 443, 444, 445, 456, 479, 480, 483, 486], "on_before_optimizer_step": [399, 443, 444, 456, 479, 480], "on_step_end": [399, 402, 443, 444, 456, 479], "on_epoch_end": [399, 402, 443, 444, 456, 479], "on_train_end": [399, 443, 444, 456, 479, 480, 483], "path_to_sav": 399, "manag": [399, 402, 456, 459, 460, 470], "top1": [399, 455, 480, 483, 494], "callbacks_list": 399, "layerhistogramcollector": 400, "layer_tensor": 400, "include_lay": 400, "get_func_from_config": 402, "func_dict": 402, "get_preprocess": 402, "get_metr": 402, "get_postprocess": 402, "get_algorithm": 402, "algo": 402, "create_dataset": 402, "cfg_preprocess": 402, "cfg_filter": 402, "create_dataload": 402, "dataloader_cfg": 402, "create_eval_func": 402, "postprocess_cfg": 402, "fp32_baselin": [402, 420], "baselin": [402, 487, 489], "create_train_func": 402, "train_cfg": 402, "Their": 402, "auxiliari": 403, "optimizedmodel": 405, "from_pretrain": [405, 456], "save_for_huggingface_upstream": [405, 456], "output_dir": [405, 456, 464, 465], "msg": 406, "fatal": 406, "warn": 406, "warin": 406, "alia": [406, 410, 461, 466], "insight": [407, 419, 442, 481, 486, 491, 492], "register_neural_insights_workload": 407, "workload_loc": [407, 410], "workload_mod": 407, "workload": [407, 410, 481], "uuid": 407, "update_neural_insights_workload": 407, "workload_uuid": 407, "update_neural_insights_workload_accuracy_data": 407, "baseline_accuraci": 407, "optimized_accuraci": 407, "is_int8_model": 409, "checkpoint_dir": 409, "history_cfg": 409, "best_configur": 409, "best_model_weight": 409, "pt": [409, 458, 481, 483, 484, 485], "snapshot": 409, "cfg_from_fil": 410, "yaml_fil": [410, 440, 445], "lazyimport": 410, "lazi": 410, "till": [410, 491], "decorat": 410, "time_limit": 410, "get_siz": 410, "seen": [410, 420], "recurs": 410, "compute_spars": 410, "fault_tolerant_fil": 410, "equal_dict": 410, "d2": 410, "compare_kei": 410, "ignore_kei": 410, "cpuinfo": 410, "dump_elapsed_tim": [410, 420], "customized_msg": 410, "elaps": 410, "combine_histogram": 410, "old_hist": 410, "old": [410, 456, 486], "get_tensor_histogram": 410, "get_all_fp32_data": 410, "get_tuning_histori": 410, "tuning_history_path": 410, "offlin": [410, 414, 456, 483, 488], "str2arrai": 410, "dequantize_weight": 410, "weight_tensor": 410, "min_filter_tensor": 410, "max_filter_tensor": 410, "scale_info": 410, "captureoutputtofil": 410, "tmp_file_path": 410, "stream": [410, 494], "sy": [410, 462], "stderr": 410, "captur": 410, "statist": [410, 411], "header": [410, 448], "field_nam": 410, "output_handl": 410, "printer": 410, "global_st": 410, "load_data_from_pkl": 410, "pkl": 410, "dump_data_to_loc": 410, "show_memory_info": 410, "hint": 410, "dump_class_attr": 410, "compare_object": 410, "obj1": 410, "obj2": 410, "ignore_attr": 410, "comparison": [410, 486, 489], "alias_param": 410, "param_nam": 410, "param_alia": 410, "alias": 410, "print_tabl": 410, "column_map": 410, "table_entri": 410, "titl": [410, 454, 477, 491], "insert_newlin": 410, "prettyt": 410, "column": [410, 488], "func": [410, 421, 483, 493], "handler": [410, 491], "row": [410, 442, 488], "decim": 410, "get_tensors_info": 410, "get_weights_detail": 410, "weightdetail": 410, "dump_tabl": 410, "filepath": 410, "file_typ": 410, "csv": [410, 417], "dump_table_to_csv": 410, "get_number_of_socket": 410, "platform": [410, 419, 452, 459, 467, 481, 483], "opentri": 410, "activation_min": 410, "activation_max": 410, "print_op_list": 410, "get_op_list": 410, "minmax_file_path": 410, "input_model_tensor": 410, "optimized_model_tensor": 410, "activation_min_max": 410, "calculate_ms": 410, "mse_metric_gap": 410, "fp32_tensor": 410, "dequantize_tensor": 410, "euclidean": [410, 443], "distanc": [410, 443], "weightsdetail": 411, "input_tensor_data": 411, "optimized_tensor_data": 411, "weightsstatist": 411, "welcom": [413, 414, 415, 419, 495], "interest": [414, 419, 489], "foster": 414, "particip": 414, "commun": 414, "harass": 414, "experi": [414, 459, 487, 488, 491], "everyon": 414, "regardless": 414, "ag": 414, "bodi": 414, "ethnic": 414, "characterist": 414, "gender": 414, "educ": 414, "socio": 414, "econom": 414, "appear": [414, 470, 476], "race": 414, "religion": 414, "sexual": 414, "orient": 414, "behavior": [414, 415, 420, 421, 422, 449, 458, 489, 491, 493], "contribut": [414, 419, 480], "inclus": 414, "Being": 414, "respect": [414, 449, 480, 488, 493], "viewpoint": 414, "gracefulli": 414, "focus": [414, 420], "empathi": 414, "toward": [414, 443], "member": [414, 420], "unaccept": 414, "imageri": 414, "unwelcom": 414, "troll": 414, "insult": 414, "derogatori": 414, "comment": [414, 421, 440, 455, 456, 485, 490], "polit": 414, "attack": 414, "privat": 414, "publish": [414, 454, 457, 477, 488], "electron": 414, "explicit": 414, "permiss": 414, "inappropri": 414, "profession": 414, "clarifi": 414, "appropri": [414, 438, 488], "fair": 414, "action": [414, 471, 474], "edit": 414, "reject": 414, "commit": [414, 415], "wiki": 414, "issu": [414, 415, 418, 453, 483, 489], "ban": 414, "temporarili": 414, "deem": 414, "threaten": 414, "offens": 414, "harm": 414, "mail": 414, "social": [414, 419, 481], "media": [414, 419, 481], "account": [414, 487, 491], "appoint": 414, "onlin": [414, 487], "event": [414, 489], "abus": 414, "report": [414, 415, 487], "contact": [414, 486, 487], "complaint": 414, "review": [414, 415], "investig": 414, "circumst": [414, 482], "oblig": 414, "confidenti": 414, "regard": [414, 484], "incid": 414, "separ": [414, 451, 454, 479, 482], "good": [414, 483, 491], "faith": 414, "face": [414, 419, 427, 459, 463, 481, 486, 494], "repercuss": 414, "leadership": 414, "faq": [414, 419], "page": [414, 415], "send": [415, 421], "view": [415, 419, 446, 467, 476, 486], "pylint": 415, "flake8": 415, "autopep8": 415, "cover": [415, 447, 451, 481], "would": [415, 456, 480, 483, 488], "adopt": [415, 459, 480, 481, 488], "certif": 415, "agre": 415, "j": [415, 419, 488, 494], "bug": 415, "jira": 415, "ticket": 415, "potenti": [415, 417, 442], "risk": 415, "pr": [415, 439, 455, 471, 474, 486], "reproduc": 415, "hardwar": [415, 419, 420, 443, 452, 456, 476, 480, 481, 482], "submit": [415, 481], "intend": 415, "safe": 415, "collabor": [415, 461, 467], "adher": 415, "toolkit": [416, 453, 459, 467, 481, 492], "tracer": 416, "resolv": [416, 418], "floatfunct": 416, "cat": [416, 447, 462], "done": [416, 443, 444, 460, 476, 480, 483], "10004": [416, 417, 420, 439, 443, 444, 449, 452, 457, 479, 482, 485, 493], "neural_compressor": [416, 417, 419, 422, 437, 439, 440, 442, 443, 444, 445, 447, 450, 451, 455, 456, 457, 458, 478, 479, 480, 482, 483, 484, 486, 487, 488, 490, 491, 493], "eval": [416, 439, 442, 459, 483, 489], "fail": [416, 439, 447], "conduct": [416, 456, 464, 476, 491, 492], "imper": 416, "therefor": [416, 456, 480, 483, 486, 488], "lot": [416, 488], "As": [416, 421, 439, 443, 455, 456, 470, 480, 485, 491], "failur": 416, "successfulli": [416, 445, 481], "suggest": [416, 487], "traceabl": 416, "proxi": 416, "tutori": [416, 467, 481, 492], "prototyp": 416, "html": [416, 419, 471, 474], "highlight": 416, "untrac": 416, "ssd": [416, 447, 494], "resnet34": [416, 494], "r34": 416, "bboxes_labels_scor": 416, "prob": 416, "45": [416, 488, 494], "max_output": 416, "zip": 416, "dbox": 416, "dlabel": 416, "dscore": 416, "decode_singl": 416, "autom": [417, 419, 459, 476, 477, 481, 488], "artifici": 417, "ann": 417, "par": 417, "outperform": 417, "hand": 417, "propos": [417, 420, 443, 457, 488], "lie": [417, 438], "predictor": 417, "shown": [417, 439, 442, 443, 455, 456, 470, 478, 479, 480, 488, 491], "figur": [417, 469, 470, 473], "popul": 417, "inner": 417, "evolutionari": 417, "cycl": 417, "until": [417, 421, 491], "conclud": 417, "met": [417, 449, 483, 489], "yet": [417, 471, 474, 477], "simplest": [417, 438, 462], "launcher": [417, 419, 443, 444, 467, 492], "agent": 417, "nsga2": 417, "supernet": 417, "ofa_mbv3_d234_e346_k357_w1": 417, "acc": [417, 480, 489, 494], "mac": [417, 477], "num_ev": 417, "250": [417, 480], "results_csv_path": 417, "search_result": 417, "dataset_path": 417, "ilsvrc2012": 417, "aim": [417, 419, 459, 480, 488, 491, 492], "mobilenetv3": 417, "lt": [417, 440, 494], "wmt": 417, "en": 417, "de": 417, "guidelin": [418, 419], "mainstream": [419, 492], "learn": [419, 420, 421, 439, 440, 447, 451, 452, 453, 456, 457, 459, 461, 464, 465, 467, 470, 471, 474, 476, 480, 481, 483, 488, 489, 491, 492], "runtim": [419, 420, 421, 423, 439, 442, 446, 449, 452, 457, 461, 466, 467, 482, 486], "workflow": [419, 421, 422, 442, 443, 447, 453, 457, 471, 474, 489, 492], "particular": [419, 480], "wide": [419, 446, 457, 480, 483, 494], "xeon": [419, 453, 454, 457, 481, 483, 484, 494], "scalabl": [419, 453, 457, 481, 483, 484], "processor": [419, 457, 481, 483, 484], "flex": [419, 453], "amd": [419, 452, 453, 494], "arm": [419, 452, 453, 494], "nvidia": [419, 438, 452, 453, 494], "bloom": [419, 488], "176b": [419, 488], "7b": [419, 488, 494], "stabl": [419, 453, 480, 481], "diffus": [419, 481], "gpt": [419, 480, 488, 494], "hub": [419, 446, 450, 467], "hug": [419, 481], "vision": [419, 447, 463, 488], "coder": [419, 452, 460, 461, 464, 467, 470, 481], "cloud": [419, 481], "marketplac": [419, 477, 481], "googl": [419, 457, 481], "amazon": [419, 459, 467], "web": [419, 489], "servic": [419, 476, 481], "azur": [419, 481], "softwar": [419, 454, 480, 481, 486], "alibaba": [419, 466, 473, 474, 481], "tencent": [419, 481], "taco": [419, 481], "ai": [419, 459, 481, 484, 492], "ecosystem": [419, 481], "lightn": [419, 466], "pip": [419, 442, 445, 448, 450, 453, 461, 464, 469, 471, 473, 474, 486], "wget": [419, 442, 448, 450], "storag": [419, 450, 455, 485, 488], "googleapi": [419, 450], "v1_6": [419, 450], "mobilenet_v1_1": [419, 450], "0_224_frozen": [419, 450], "overview": [419, 491], "jupyterlab": [419, 459, 465, 467, 469, 473, 492], "studio": [419, 467, 476, 492], "topic": 419, "innov": [419, 467, 481], "onnxcommunitymeetup2023": [419, 481], "juli": [419, 481], "2023": [419, 485, 488, 494], "blog": [419, 481], "llama": [419, 481], "msft": [419, 481], "oliv": [419, 481], "friendli": [419, 449, 456, 481, 488, 492, 493], "toolchain": [419, 448, 481], "june": [419, 481], "neurip": [419, 481], "oct": [419, 481], "quala": [419, 481], "minilm": [419, 481, 494], "releas": [419, 453, 465, 467, 469, 473, 475, 495], "legal": [419, 495], "secur": [419, 481, 495], "idea": [419, 480, 488, 491], "feel": 419, "bridg": [420, 421, 452], "vanilla": [420, 421, 452], "abcadaptor": 420, "__init__": [420, 439, 440, 455, 491], "query_fw_cap": [420, 422], "query_fused_pattern": 420, "he": 420, "besid": [420, 443, 485], "describ": [420, 422, 442, 449, 489], "past": [420, 485], "mainten": 420, "difficult": [420, 488], "abil": [420, 421, 440, 449, 488], "modif": [420, 449, 464], "fragment": 420, "scenario": [420, 437, 443, 456, 480, 485], "granular": [420, 421, 422, 449, 452, 462, 483, 488, 493], "semant": [420, 449], "mla": [420, 457, 483], "becom": [420, 447, 480, 485], "explor": 420, "inspect_tensor": 420, "op_list": [420, 489], "iteration_list": 420, "inspect_typ": 420, "save_to_disk": 420, "quantization_cfg": 420, "set_tensor": 420, "tensor_dict": 420, "diagnosis_help": 420, "fw": 421, "outlin": [421, 422], "instruct": [421, 422, 443, 453, 457, 471, 474, 481, 482, 483], "extend": [421, 422], "accommod": [421, 422], "incorpor": [421, 422, 444, 491], "give": [421, 476, 491], "diagram": [421, 422, 442, 491], "illustr": [421, 422, 444, 491], "sequencediagram": [421, 422], "autonumb": [421, 422], "query_framework_cap": 421, "opwis": 421, "optypewis": 421, "travers": [421, 422, 491], "\u2776": 421, "\u2777": 421, "\u2778": 421, "\u2779": 421, "\u277a": 421, "\u277b": 421, "\u277c": 421, "These": [421, 452], "chapter": 421, "confirm": 421, "chosen": [421, 438], "framework_yaml": 421, "int8_conv_config": 421, "node_op": 421, "optype_wise_": 421, "per_tensor": [421, 422, 449, 483, 493], "exmapl": 421, "tuning_cfg_to_fw": 421, "Its": [421, 438], "calib_iter": 421, "dispatch": [421, 452], "is_perchannel": 421, "is_asymmetr": 421, "weight_bit": 421, "convert_bf16": 421, "calib": 421, "larger": [421, 480, 485, 488], "somewhat": 421, "distort": 421, "line": [421, 445, 452, 459, 464, 465, 489], "At": [421, 491], "explain": [422, 442, 488], "let": [422, 449, 464, 480, 482, 493], "overal": [422, 493], "drive": 422, "uint4": 422, "asymmetr": [422, 483, 491], "kullback": [422, 443], "leibler": [422, 443], "pytorch_cpu": 422, "1_11_capabl": 422, "cap_s8_1_11": 422, "cap_s8_1_11_conv1d": 422, "per_channel_symmetr": 422, "addition": [422, 445, 491], "per_tensor_symmetr": 422, "due": [422, 447, 480, 483, 488, 489], "nativ": 422, "with_arg": 422, "qscheme": 422, "torch_dtyp": 422, "quant_min": 422, "quant_max": 422, "linux": [437, 448, 470, 476], "x86_64": 437, "aarch64": 437, "prove": [438, 488], "benefici": 438, "uniform": 438, "\u03b2": 438, "\u03b1": 438, "fundament": [438, 456], "primari": [438, 491], "focu": [438, 491], "essenti": [438, 448], "remaind": 438, "enhanc": [438, 459, 481, 484], "resolut": 438, "extrem": 438, "still": [438, 456, 481, 483, 484], "retain": 438, "noteworthi": 438, "vanhouck": 438, "vincent": 438, "andrew": 438, "senior": 438, "mark": 438, "mao": 438, "speed": [438, 456, 467, 480, 481, 483, 491], "2011": 438, "szymon": 438, "migacz": 438, "2017": 438, "mckinstri": 438, "jeffrei": 438, "l": [438, 443, 489, 491], "discov": [438, 489], "preprint": [438, 480, 485, 488], "1809": 438, "04191": 438, "2018": 438, "encount": 439, "consum": 439, "previous": 439, "lack": [439, 448], "faster": [439, 441, 447, 481, 491, 494], "treat": 439, "Of": 439, "getitem": 439, "fn": 439, "evenli": 439, "divid": [439, 488, 491], "discard": 439, "throw": 439, "awai": 439, "draw": [439, 487, 491], "worker": [439, 456, 483], "subprocess": 439, "pin": [439, 469, 473], "reshuffl": 439, "manner": [439, 443, 458], "newdataload": 439, "customis": [439, 440, 455], "ensp": [440, 490], "imagerecord": [440, 445, 493], "image_nam": 440, "cocorecord": 440, "gt": [440, 488, 490], "int64": 440, "offer": 440, "style_transf": 440, "content": 440, "tfrecorddataset": 440, "labelbal": 440, "300": 440, "16": [440, 485, 488, 494], "helloworld": [440, 457, 490], "aid": 441, "deploy": [441, 459, 476, 481, 488], "infrastructur": 441, "gap": [442, 458], "diagnos": 442, "gui": [442, 452, 480], "termin": [442, 469, 470, 473], "repeat": [442, 491], "durat": [442, 487], "git": [442, 448, 453], "clone": [442, 453, 469, 473], "cd": [442, 445, 453], "setup": [442, 449, 453, 471, 474, 480], "ilsvr2012": 442, "caff": 442, "berkeleyvis": 442, "caffe_ilsvrc12": 442, "xvzf": 442, "image_recognit": [442, 489], "resnet50_torchvis": 442, "ptq_static": 442, "resnet50_v1": [442, 445, 456], "dataset_loc": [442, 489], "label_path": 442, "quantiti": 442, "vec": 442, "mu": 442, "frac": [442, 488], "sigma": 442, "var": 442, "happen": 442, "dispers": 442, "trust": 442, "rule": [442, 459, 480], "v0": [442, 489], "cg": [442, 489], "conv0": [442, 489], "expens": [443, 456, 491], "deploi": [443, 456, 485, 491], "power": [443, 456, 470, 481], "mobil": [443, 456, 494], "produc": 443, "logit": 443, "softmax": 443, "kd": 443, "patient": 443, "compact": [443, 456, 462, 480], "agnost": 443, "resourc": [443, 491], "convolut": [443, 481], "ia": 443, "attach": [443, 456, 488], "shallow": 443, "deepest": 443, "deeper": 443, "paper": [443, 480, 485, 488], "10006": [443, 444], "student_output": [443, 444], "student_loss": [443, 444], "training_func_for_nc": [443, 444], "distil_loss_conf": 443, "accordingli": [443, 467], "promis": [444, 456, 480], "huge": [444, 480], "heavi": 444, "light": 444, "booster": 444, "degrad": [444, 480, 491], "novel": [444, 459, 470, 476], "place": [444, 453, 480, 489], "comb": 444, "distillation_criterion": [444, 456, 479], "q_conf": 444, "horovod": 445, "instal": [445, 448, 450, 459, 461, 464, 467, 471, 474, 476, 477, 495], "builtin": 445, "program": [445, 454, 459, 476], "enable_eager_execut": 445, "yaml_file_path": 445, "pre_process": 445, "simpli": [445, 458, 459, 461, 464, 476], "evaluation_result": 445, "evaluation_time_cost": 445, "partit": [445, 480], "distributedsampl": 445, "train_sampl": 445, "train_dataset": [445, 483], "num_replica": 445, "rank": 445, "train_load": 445, "train_kwarg": 445, "adadelta": 445, "distributedoptim": 445, "named_paramet": 445, "broadcast_paramet": 445, "root_rank": 445, "broadcast_optimizer_st": 445, "set_epoch": 445, "batch_idx": 445, "zero_grad": [445, 456, 480], "nll_loss": 445, "log_interv": 445, "0f": 445, "tloss": 445, "6f": 445, "dry_run": 445, "test_func": 445, "host": 445, "num_of_process": 445, "002": 445, "ssh": [445, 476], "prompt": 445, "readm": 445, "exactli": [445, 460], "recognit": [445, 447, 480, 489], "resizecropimagenet": [445, 490], "realiz": [445, 478, 484, 487], "tow": 445, "node1": 445, "node2": 445, "TO": [445, 461], "your_node1_nam": 445, "your_node2_nam": 445, "resnet50_fp32_pretrained_model": 445, "nc_resnet50_v1": 445, "resnet": [445, 494], "varieti": [446, 482, 491], "demonstr": [446, 459, 489], "10k": [446, 450], "speedup": [446, 452, 483], "2x": [446, 452], "vnni": [446, 452, 482, 483], "exchang": 447, "hope": 447, "inc_model": [447, 458], "fp32_onnx_config": 447, "verifi": 447, "vgg16": [447, 494], "mobilenet": [447, 487, 494], "rcnn": 447, "torchscript": [447, 488], "unsupport": [447, 456, 480], "add_relu": 447, "conv1d_relu": 447, "conv2d_relu": 447, "group_norm": 447, "hardswish": 447, "instance_norm": 447, "layer_norm": 447, "leaky_relu": 447, "sigmoid": 447, "bare": 448, "metal": 448, "sudo": [448, 462], "apt": [448, 453, 462, 470], "python3": 448, "dev": [448, 469, 473], "distutil": 448, "libgl1": 448, "mesa": 448, "glx": 448, "libglib2": 448, "ln": 448, "sf": 448, "usr": 448, "incompat": 448, "88": [448, 487, 494], "80": [448, 488, 489, 494], "pyobject": 448, "reinstal": 448, "importerror": 448, "libgl": 448, "No": [448, 456, 481], "yum": [448, 453], "opencv": [448, 470], "conda": [448, 453, 462, 470, 486], "13": [448, 453, 486, 488, 494], "pend": 448, "sqlalchemi": 448, "27": [448, 494], "alemb": 448, "forg": [448, 453], "quick": [449, 457, 492, 493], "dive": [449, 492], "unless": 449, "purpos": [449, 457, 476, 482, 483], "syntax": 449, "go": [449, 471, 474, 482, 490], "up1": 449, "up2": 449, "valid_mixed_precis": 449, "addn": 449, "grappler_optim": 449, "constfold": 449, "arithmet": 449, "debug_stripp": 449, "major": [451, 483, 488], "concept": [451, 487, 492], "rather": 451, "custom_metr": 451, "refin": [451, 480], "broad": [452, 465, 492], "420": 452, "geomean": 452, "snippet": 452, "upload": [452, 471, 474], "click": [452, 459, 460, 467, 470, 476, 481, 489], "button": [452, 470, 476], "qintegerop": [452, 483], "plan": 452, "oneapi": [453, 481, 492], "analyt": [453, 481, 492], "success": 453, "11": [453, 455, 457, 488, 491, 494], "frequent": 453, "ask": 453, "pypi": [453, 471, 474], "nightli": 453, "consolid": 453, "latest": [453, 481, 486], "eas": [453, 461, 481], "along": [453, 480], "streamlin": [453, 481], "scienc": 453, "websit": 453, "anaconda": 453, "suit": [453, 477, 489], "esri": 453, "formerli": 453, "skylak": 453, "cascad": 453, "lake": [453, 457, 481], "cooper": [453, 457, 481], "ic": [453, 481], "sapphir": 453, "rapid": 453, "hbm": 453, "arctic": 453, "sound": 453, "pont": 453, "vecchio": 453, "cento": [453, 494], "ubuntu": 453, "22": [453, 494], "04": [453, 494], "fortensorflow": 453, "forpytorch": 453, "12": 453, "tf_enable_onednn_opt": 453, "onednn": [453, 457, 483], "newer": 453, "copyright": 454, "subject": 454, "accompani": [454, 491], "research": [454, 488], "wish": 454, "bibtex": 454, "misc": 454, "author": 454, "feng": 454, "tian": 454, "hanwen": 454, "haihao": [454, 480], "shen": [454, 480], "suyu": 454, "chen": 454, "howpublish": 454, "year": 454, "logo": 454, "atom": 454, "phi": 454, "pentium": 454, "vtune": 454, "corpor": 454, "subsidiari": 454, "brand": 454, "claim": 454, "popularli": 455, "industri": [455, 481], "label_map": 455, "decis": 455, "ap": 455, "curv": 455, "turn": [455, 470], "target_boxes_num": 455, "str_label": 455, "int_label": 455, "inturn": 455, "cocomap": 455, "vocmap": 455, "categor": 455, "multiclass": 455, "multilabel": 455, "newmetr": 455, "reset": 455, "reflect": [455, 490], "new_metr": 455, "deliv": [456, 481, 486], "conveni": 456, "upgrad": 456, "veri": [456, 477, 483, 491, 492], "comprehens": [456, 492], "kind": 456, "resort": 456, "automodelforsequenceclassif": 456, "autotoken": 456, "val_dataset": [456, 483], "val_dataload": [456, 483], "ping_memori": [456, 483], "formul": 456, "effort": 456, "written": 456, "onnxrt_integ": [456, 493], "onnxrt_qlinear": [456, 493], "image_tensor": [456, 493], "post_training_dynamic_qu": [456, 482, 491], "1000": [456, 493], "2000": 456, "sampling_s": [456, 493], "model_wis": [456, 493], "op_dict": 456, "op_wis": [456, 489, 493], "sigopt_api_token": [456, 487, 491], "sigopt_project_id": [456, 487, 491], "sigopt_experiment_nam": [456, 487, 491], "demo": 456, "600": 456, "training_arg": 456, "emul": [456, 483], "trainer": [456, 467], "briefli": [456, 488], "maxim": [456, 480, 491], "pruning_func": 456, "train_dataload": [456, 480, 483], "n_gpu": 456, "gradient_accumulation_step": 456, "clip_grad_norm_": 456, "max_grad_norm": 456, "rate": [456, 480, 483], "start_epoch": [456, 482, 493], "end_epoch": [456, 482, 493], "97": [456, 488, 494], "newli": [456, 480], "on_after_optimizer_step": [456, 480], "layer3": [456, 480], "lr_schedul": [456, 480], "0004": 456, "nesterov": [456, 493], "randomresizedcrop": [456, 490], "totensor": [456, 490], "485": [456, 494], "456": [456, 494], "406": 456, "nepoch": 456, "cnt": 456, "loss_sum": 456, "iter_bar": 456, "tqdm": 456, "desc": 456, "teacher_logit": 456, "train_fun": 456, "training_func": 456, "recent": [456, 457], "growth": [456, 457, 480], "complex": [456, 457, 480], "significantli": [456, 457, 480, 491], "bandwidth": [456, 457, 485], "exit_polici": [456, 493], "determinist": 456, "arbitrari": [456, 479], "meaning": [456, 479], "reli": [456, 488], "prune_conf": 456, "quantization_aware_training_conf": 456, "aforement": 456, "inset": 456, "p_conf": [456, 479], "ssd_mobilenet_v1": 456, "benchmarkconf": 456, "half": [457, 467], "sixteen": 457, "launch": [457, 477], "3rd": [457, 481, 483, 484], "gen": [457, 481, 483, 484], "codenam": 457, "boost": [457, 460, 476, 480, 481], "x86": 457, "avx512": [457, 483], "vcvtne2ps2bf16": 457, "vcvtneps2bf16": 457, "vdpbf16p": 457, "fbgemm": [457, 483], "tensorrtexecutionprovid": [457, 483], "cudaexecutionprovid": [457, 483], "dnnlexecutionprovid": [457, 483], "avx512_bf16": 457, "plu": 457, "resnet18": [457, 461, 494], "persist": 458, "brought": [458, 460, 467, 483], "tf2": 458, "h5": 458, "hybridblock": 458, "0000": 458, "saved_result": [458, 485], "simplifi": [459, 470, 476, 480, 481], "acquir": 459, "analysi": [459, 476, 480, 487], "heurist": [459, 476], "great": 459, "facilit": 459, "autocast": 459, "my_model": 459, "no_grad": 459, "memory_format": 459, "112": [459, 494], "rand": [459, 488], "plugin": [459, 477], "aw": [459, 467, 481, 494], "sagemak": [459, 467], "inlin": [459, 464, 467], "neural_cod": [459, 461, 463, 464, 465, 467], "bench": 459, "superbench": 459, "enjoi": [460, 464, 467], "rebuild": [460, 469, 473], "reload": [460, 477], "modern": [461, 485], "democrat": [461, 481], "programm": [461, 467, 476], "nano_bf16_channels_last": 461, "nano_bf16_ipex_channels_last": 461, "nano_bf16_ipex": 461, "nano_bf16": 461, "nano_fp32_channels_last": 461, "nano_fp32_ipex_channels_last": 461, "nano_fp32_ipex": 461, "nano_gpu_to_cpu": 461, "nano_int8": 461, "nano_jit_bf16_channels_last": 461, "nano_jit_bf16_ipex_channels_last": 461, "nano_jit_bf16_ipex": 461, "nano_jit_bf16": 461, "nano_jit_fp32_channels_last": 461, "nano_jit_fp32_ipex_channels_last": 461, "nano_jit_fp32_ipex": 461, "nano_jit_fp32": 461, "nano_onnxruntime_fp32": 461, "nano_onnxruntime_int8_qlinear": 461, "openvino": 461, "nano_openvino_fp32": 461, "nano_openvino_int8": 461, "bc": [462, 470], "conda_prefix": 462, "echo": 462, "tradit": [462, 480], "libjemalloc": 462, "libiomp5": 462, "home": 462, "lib": 462, "ld_preload": 462, "malloc_conf": 462, "oversize_threshold": 462, "background_thread": 462, "metadata_thp": 462, "dirty_decay_m": 462, "9000000000": 462, "muzzy_decay_m": 462, "kmp_affin": 462, "kmp_blocktim": 462, "dnnl_primitive_cache_capac": 462, "cpufreq": 462, "scaling_governor": 462, "powersav": 462, "tee": 462, "pytorch_jit_script": [463, 466], "pytorch_channels_last": [463, 466], "run_bench": 463, "patch": [463, 476], "patch_path": 463, "your_patch_path": 463, "sweep": 463, "sweep_object": 463, "bench_config": 463, "bench_featur": 463, "sai": 464, "run_glu": [464, 465], "requisit": 464, "task_nam": [464, 465], "do_ev": [464, 465], "remain": 464, "itself": 464, "run_glue_optim": 464, "static_ipex": 464, "auto_qu": 465, "v4": [465, 494], "albert": [465, 494], "sst2": 465, "alexnet": [465, 494], "pytorch_amp": 466, "optimize_for_infer": 466, "pytorch_jit_trac": 466, "pytorch_jit_script_ofi": 466, "pytorch_jit_trace_ofi": 466, "torchdynamo": 466, "pytorch_torchdynamo_jit_script": 466, "pytorch_torchdynamo_jit_trac": 466, "pytorch_torchdynamo_jit_script_ofi": 466, "pytorch_torchdynamo_jit_trace_ofi": 466, "pytorch_inc_bf16": 466, "pytorch_inc_static_quant_fx": 466, "pytorch_inc_static_quant_ipex": 466, "pytorch_inc_dynamic_qu": 466, "pytorch_ipex_fp32": 466, "pytorch_ipex_bf16": 466, "pytorch_ipex_int8_static_qu": 466, "pytorch_ipex_int8_dynamic_qu": 466, "blade": 466, "disc": 466, "pytorch_aliblad": 466, "pytorch_lightning_bf16_cpu": 466, "tensorflow_amp": 466, "keras_amp": 466, "tensorflow_inc": 466, "keras_inc": 466, "onnx_inc_static_quant_qlinear": 466, "onnx_inc_static_quant_qdq": 466, "onnx_inc_dynamic_qu": 466, "optimum": [466, 467], "pytorch_inc_huggingface_optimum_stat": 466, "pytorch_inc_huggingface_optimum_dynam": 466, "intel_extension_for_transform": 466, "bigdl": [466, 467], "nano": [466, 467], "nano_": 466, "inc_auto": 466, "delight": 467, "announc": 467, "v": [467, 476, 480, 491, 493], "500": 467, "jupyt": [467, 469, 470, 473], "isa": 467, "adjust": [467, 483, 488], "xpu": 467, "delta": 467, "acc_delta": 467, "int8_acc": 467, "fp32_acc": 467, "ext": [469, 471, 473, 474, 475], "lab": [469, 470, 471, 473, 474], "nodej": [469, 473], "jlpm": [469, 473], "yarn": [469, 473], "npm": [469, 470, 473], "lieu": [469, 473], "labextens": [469, 470, 473], "typescript": [469, 473], "watch": [469, 473], "immedi": [469, 473, 480], "refresh": [469, 473], "browser": [469, 473], "wait": [469, 473, 476], "rebuilt": [469, 473], "easier": [469, 473, 476, 481], "symlink": [469, 473], "down": 470, "finish": 470, "enter": [470, 476], "blank": 470, "cell": 470, "gain": [470, 479, 481], "mkl": 470, "jemalloc": 470, "pip3": 470, "headless": 470, "pyproject": [471, 474], "toml": [471, 474], "twine": [471, 474], "whl": [471, 474], "dist": [471, 474], "sdist": [471, 474], "bdist_wheel": [471, 474], "deprec": [471, 474, 486, 490], "frontend": [471, 474], "login": [471, 474, 487], "repositori": [471, 474], "cut": [471, 474], "fork": [471, 474], "admin_github_token": [471, 474], "pypi_token": [471, 474], "npm_token": [471, 474], "secret": [471, 474], "panel": [471, 474, 476], "draft": [471, 474], "changelog": [471, 474, 475], "pkg": [471, 474], "bot": [471, 474], "pick": [471, 474, 477], "feedstock": [471, 474], "hatch": 474, "notabl": 475, "vscode": [475, 477], "daili": 476, "advantag": [476, 480, 482, 491], "remot": 476, "re": [476, 485], "market": 476, "uninstal": 476, "fill": [476, 487, 490, 491], "upper": 476, "sidebar": 476, "hover": 476, "track": [476, 487], "argpars": 476, "pop": 476, "diff": 476, "manifest": 477, "declar": 477, "palett": 477, "registercommand": 477, "amodio": 477, "tsl": 477, "matcher": 477, "dbaeumer": 477, "eslint": 477, "press": 477, "f5": 477, "ctrl": 477, "hello": 477, "world": 477, "breakpoint": 477, "consol": 477, "relaunch": 477, "toolbar": 477, "node_modul": 477, "viewlet": 477, "dropdown": 477, "runner": 477, "startup": 477, "bundl": 477, "multi_object": 478, "benefit": 479, "instanti": 479, "neuron": 480, "art": 480, "grown": 480, "unpreced": 480, "increasingli": 480, "crucial": 480, "stand": [480, 491], "delet": 480, "commonli": 480, "shrink": 480, "contextu": 480, "howev": [480, 485, 488], "scene": 480, "haven": 480, "color": 480, "lowest": [480, 491], "formula": [480, 488], "emsp": 480, "downstream": 480, "finetun": [480, 494], "prone": 480, "co": 480, "discourag": 480, "push": [480, 485, 488], "penal": 480, "parameter": 480, "exemplifi": 480, "complement": 480, "fortieth": 480, "miss": [480, 483], "pruner2": 480, "mention": [480, 485], "readi": 480, "hesit": 480, "sst": [480, 494], "25": [480, 488, 494], "63": [480, 488, 494], "24": [480, 488, 491, 494], "35": [480, 494], "flan": 480, "t5": 480, "english": 480, "romanian": 480, "404": [480, 494], "381": 480, "yolov5": 480, "75": [480, 488, 494], "2x1": [480, 494], "801": 480, "7895": 480, "signific": [480, 481, 488], "reduct": [480, 493], "namhoon": 480, "lee": 480, "thalaiyasingam": 480, "ajanthan": 480, "philip": 480, "torr": 480, "2019": 480, "zafrir": 480, "ofir": 480, "ariel": 480, "larei": 480, "boudoukh": 480, "mosh": 480, "wasserblat": 480, "2111": 480, "05754": 480, "2021": 480, "medium": 481, "chatbot": 481, "netflix": 481, "apr": 481, "mlperf": [481, 494], "5x": 481, "heterogen": 481, "mar": 481, "busi": 481, "jan": 481, "amx": 481, "4th": [481, 483], "mleffici": 481, "dec": 481, "wechat": 481, "deepen": 481, "foundat": 481, "intellig": 481, "vmware": 481, "applianc": 481, "bitnami": 481, "nov": 481, "sota": 481, "few": [481, 491], "plug": 481, "twitter": 481, "linkedin": 481, "zone": 481, "land": 481, "gcp": 481, "pat": 481, "keynot": 481, "intelon": 481, "sep": 481, "chines": 481, "aug": 481, "purif": 481, "sacrif": 481, "jun": 481, "partner": 481, "feb": 481, "joint": 481, "bilibili": 481, "gestalt": 481, "ml": 481, "doubl": 481, "reconstruct": 481, "abound": 481, "lpot": [481, 486], "nextplatform": 481, "cern": 481, "gan": 481, "3dgan": 481, "iml": 481, "workshop": 481, "asplo": 481, "18": [481, 494], "highli": 481, "intelcaff": 481, "aris": 482, "henc": 482, "onnxrt_qoper": 482, "quant_aware_train": 482, "weight_compress": [482, 493], "initial_spars": [482, 493], "prune_typ": [482, 493], "basic_magnitud": [482, 493], "update_frequ": 482, "prune_domain": 482, "tile_pattern_1x1": 482, "invent": 483, "int4": 483, "cost": [483, 485], "On": [483, 494], "theoret": [483, 485], "zeropoint": 483, "255": [483, 488], "overflow": 483, "solv": [483, 486], "unseen": 483, "enough": 483, "peopl": 483, "mimic": 483, "fact": 483, "ultim": 483, "pain": 483, "lossi": 483, "chart": [483, 487, 489], "understand": [483, 489, 492], "philosophi": 483, "request": 483, "neither": 483, "nor": 483, "val_load": 483, "avg": 483, "themselv": 483, "ON": 484, "forc": 484, "postposttrainingquantconfig": 484, "bf16wrapper": 484, "retrac": 484, "preval": 485, "grow": 485, "demand": 485, "w8a8": 485, "trade": 485, "bottleneck": 485, "roughli": 485, "speak": 485, "capac": [485, 487], "flop": 485, "famou": 485, "approx": 485, "bmm": 485, "100x": 485, "straightforward": [485, 488], "excel": 485, "stai": [485, 488], "89": [485, 488, 494], "weightonlylinear": 485, "date": 485, "restor": 485, "qweight": 485, "wip": 485, "gptq_arg": 485, "percdamp": 485, "awq_arg": 485, "compressed_model": 485, "export_compressed_model": 485, "compression_dtyp": 485, "compression_dim": 485, "scale_dtyp": 485, "xiao": [485, 488], "guangxuan": [485, 488], "2211": [485, 488], "10438": [485, 488], "wei": [485, 488], "xiui": [485, 488], "suppress": [485, 488], "2209": [485, 488], "13325": [485, 488], "lin": 485, "ji": 485, "2306": 485, "00978": 485, "frantar": 485, "elia": 485, "site": 486, "assist": 486, "sed": 486, "your_script": 486, "backbon": 487, "interact": 487, "sigopt_experiment_id": 487, "nc": [487, 491], "certain": 487, "suffici": 487, "ordinari": 487, "receiv": 487, "latenc": [487, 491], "8266": 487, "8372": 487, "2132": 487, "83": [487, 488, 494], "7495": 487, "8299": 487, "8294": 487, "85": [487, 488, 494], "0837": 487, "8291": 487, "4469": 487, "gigant": 488, "systemat": 488, "quantif": 488, "migrat": [488, 492], "difficulti": 488, "mathemat": 488, "allevi": 488, "coarsest": 488, "finer": [488, 491], "matric": 488, "similarli": 488, "finest": 488, "consumpt": 488, "why": [488, 489], "suppos": 488, "6839": 488, "4741": 488, "7451": 488, "9301": 488, "1742": 488, "6835": 488, "q_min": 488, "q_max": 488, "q_x": 488, "clamp_": 488, "round_": 488, "w_q": 488, "00296431384049356": 488, "59": [488, 494], "172": 488, "192": 488, "w_dq": 488, "1220": 488, "0500": 488, "1430": 488, "2570": 488, "1890": 488, "mseloss": 488, "1983354538679123": 488, "6848": 488, "4743": 488, "7440": 488, "9308": 488, "1749": 488, "385297635664756e": 488, "07": [488, 493, 494], "affect": 488, "quantize_per_channel": 488, "x_tmp": 488, "detach": 488, "keepdim": 488, "dequantize_per_channel": 488, "0029": [488, 494], "0036": 488, "162": [488, 494], "48": [488, 494], "72": [488, 494], "93": [488, 494], "207": 488, "139": 488, "6837": 488, "4734": 488, "1751": 488, "6821": 488, "637690492221736e": 488, "6376e": 488, "3852e": 488, "cdot": 488, "quantize_per_tensor_absmax": 488, "n_bit": 488, "div_": 488, "0806": 488, "7589": 488, "6038": 488, "3815": 488, "5040": 488, "7174": 488, "5444": 488, "5826": 488, "7772": 488, "5555": 488, "3740": 488, "3253": 488, "0698": 488, "1381": 488, "5972": 488, "0086": 488, "0737": 488, "8298": 488, "6883": 488, "2991": 488, "1601": 488, "6506": 488, "8246": 488, "3924": 488, "3845": 488, "8768": 488, "w_scale": 488, "x_q": 488, "x_scale": 488, "84": [488, 494], "120": 488, "0059755356051027775": 488, "119": 488, "57": [488, 494], "91": [488, 494], "006533813662827015": 488, "y_q": 488, "17509": 488, "7608": 488, "4055": 488, "16599": 488, "21020": 488, "10016": 488, "9860": 488, "22444": 488, "y_dq": 488, "6836": 488, "2970": 488, "1583": 488, "6481": 488, "8207": 488, "3911": 488, "3850": 488, "8763": 488, "though": 488, "simplic": 488, "middl": 488, "denot": 488, "fp1": 488, "fp2": 488, "subsect": [488, 493], "even": 488, "intuit": 488, "x1": [488, 491], "x2": [488, 491], "herebi": 488, "recalcul": 488, "sq": 488, "overhead": 488, "hardtanh": 488, "t5norm": 488, "llamanorm": 488, "groupnorm": 488, "lambada": 488, "sweet": 488, "spot": 488, "region": 488, "bigscienc": 488, "560m": 488, "65": [488, 494], "44": [488, 494], "66": [488, 494], "76": [488, 494], "1b7": 488, "71": [488, 494], "43": [488, 494], "67": [488, 494], "78": [488, 490, 494], "56": [488, 494], "58": [488, 494], "55": [488, 494], "3b": 488, "73": [488, 494], "69": [488, 494], "74": [488, 494], "7b1": 488, "77": [488, 494], "46": [488, 494], "17": [488, 494], "82": [488, 494], "52": [488, 494], "facebook": 488, "125m": 488, "41": [488, 494], "70": [488, 494], "94": [488, 490, 494], "79": [488, 489, 494], "60": [488, 494], "81": [488, 494], "26": [488, 494], "39": [488, 494], "68": [488, 490, 494], "eleutherai": [488, 494], "6b": [488, 494], "29": [488, 494], "96": [488, 494], "jason": 488, "emerg": 488, "transact": 488, "yvinec": 488, "edouard": 488, "proceed": 488, "cvf": 488, "winter": 488, "valuabl": 489, "instrument": 489, "writer": 489, "_pre_eval_hook": 489, "_post_eval_hook": 489, "submodul": 489, "whitelist": 489, "_recordingobserv": 489, "output_tensors_dict": 489, "current_it": 489, "get_tensor_valu": 489, "_observer_forward_hook": 489, "activation_post_process": 489, "_add_observer_": 489, "named_children": 489, "leaf": 489, "add_modul": 489, "register_forward_hook": 489, "dump_tim": 489, "summarywrit": 489, "_acc": 489, "tune_": 489, "add_graph": 489, "get_observer_dict": 489, "observer_dict": 489, "is_quant": 489, "add_histogram": 489, "shell": 489, "bind_al": 489, "logdir_spec": 489, "tune_0_acc0": 489, "tune_1": 489, "tune_1_acc0": 489, "four": 489, "baseline_acc_0": 489, "776": 489, "tune_1_acc_0": 489, "095": 489, "runs_v3": 489, "run_tuning_dump_tensor": 489, "sh": 489, "inceptionv3": 489, "skip": [489, 491], "bash": 489, "run_quant": 489, "topologi": 489, "inception_v3": 489, "inceptionv3_fp32_pretrained_model": 489, "nc_inceptionv3": 489, "inceptionv3_dump_tensor": 489, "poor": 489, "eightbit": 489, "disappear": 489, "centercrop": 490, "randomcrop": 490, "cropres": 490, "decodeimag": 490, "jpeg": 490, "encodejp": 490, "alignimagechannel": 490, "116": 490, "103": 490, "017": 490, "bilinearimagenet": [490, 493], "topilimag": 490, "padding_mod": 490, "border": 490, "pixel": 490, "edg": 490, "colorjitt": 490, "bright": 490, "satur": 490, "hue": 490, "jitter": 490, "tondarrai": 490, "quickli": [491, 492], "human": 491, "concret": 491, "aggress": 491, "classic": 491, "flowchart": 491, "htmllabel": 491, "td": 491, "classdef": 491, "itemstyl": 491, "cce5ff": 491, "stroke": 491, "99ccff": 491, "s1": 491, "s2": 491, "s3": 491, "s4": 491, "s5": 491, "s6": 491, "s7": 491, "nbsp": 491, "subgraphstyl": 491, "ffffff": 491, "attempt": 491, "post_training_auto_qu": 491, "trial": 491, "increment": 491, "ii": 491, "highest": 491, "spent": 491, "hawq_v2_loss": 491, "model_loss": 491, "black": 491, "come": 491, "compli": 491, "posterior": 491, "short": 491, "never": 491, "loglevel": 491, "endlessli": 491, "perspect": 491, "smbo": 491, "appl": 491, "surrog": 491, "densiti": 491, "parzen": 491, "greatest": 491, "hour": 491, "dai": 491, "next_tune_cfg": 491, "overridden": 491, "cluster": 491, "seamlessli": 491, "mpi": 491, "replic": 491, "replica": 491, "fed": 491, "synchron": 491, "mpirun": 491, "number_of_process": 491, "run_cmd": 491, "abctunestrategi": 491, "familiar": 492, "notebook": 492, "introduct": 492, "organ": 493, "logic": 493, "mobilenet_v1": 493, "40": [493, 494], "06": [493, 494], "beta_1": 493, "beta_2": 493, "epsilon": 493, "sparsecategoricalcrossentropi": 493, "sum_over_batch_s": 493, "from_logit": 493, "54": [493, 494], "19": [493, 494], "1x": 494, "platinum": 494, "8480": 494, "8ghz": 494, "ht": 494, "turbo": 494, "256gb": 494, "16x16gb": 494, "ddr5": 494, "4800": 494, "mt": 494, "bio": 494, "3a14": 494, "tel2p1": 494, "microcod": 494, "0x2b0001b0": 494, "gcc": 494, "20210514": 494, "red": 494, "hat": 494, "visit": 494, "1s4c14ins1bsthroughput": 494, "sec": 494, "2721": 494, "638": 494, "26x": 494, "23": 494, "31": 494, "2123": 494, "552": 494, "84x": 494, "resnet101": 494, "37": 494, "1477": 494, "432": 494, "42x": 494, "incept": 494, "3267": 494, "92": 494, "1266": 494, "03": 494, "58x": 494, "38": 494, "2399": 494, "1098": 494, "18x": 494, "v3": 494, "1593": 494, "508": 494, "13x": 494, "1032": 494, "249": 494, "14x": 494, "34": 494, "427": 494, "185": 494, "30x": 494, "5503": 494, "1791": 494, "62": 494, "07x": 494, "3639": 494, "1864": 494, "95x": 494, "47": 494, "1538": 494, "236": 494, "51x": 494, "vgg19": 494, "1368": 494, "196": 494, "resnetv2": 494, "1105": 494, "657": 494, "68x": 494, "716": 494, "49": 494, "369": 494, "94x": 494, "152": 494, "269": 494, "89x": 494, "densenet": 494, "121": 494, "617": 494, "498": 494, "24x": 494, "161": 494, "372": 494, "242": 494, "54x": 494, "169": 494, "496": 494, "411": 494, "21x": 494, "efficientnet": 494, "b0": 494, "748": 494, "709": 494, "05x": 494, "00": 494, "134": 494, "34x": 494, "1273": 494, "671": 494, "90x": 494, "136": 494, "53": 494, "1235": 494, "477": 494, "09": 494, "179": 494, "85x": 494, "cnn": 494, "79x": 494, "83x": 494, "156": 494, "67x": 494, "23x": 494, "173": 494, "00x": 494, "yolov3": 494, "211": 494, "41x": 494, "82x": 494, "61": 494, "49x": 494, "86": 494, "424": 494, "174": 494, "44x": 494, "29x": 494, "55612": 494, "43479": 494, "28x": 494, "1s56c1ins1bsthroughput": 494, "65x": 494, "gpt2": 494, "2716": 494, "569": 494, "77x": 494, "2683": 494, "476": 494, "64x": 494, "2349": 494, "1035": 494, "27x": 494, "930": 494, "763": 494, "262": 494, "91x": 494, "4003": 494, "1677": 494, "39x": 494, "2766": 494, "36": 494, "2643": 494, "1495": 494, "238": 494, "1372": 494, "199": 494, "88x": 494, "1457": 494, "630": 494, "31x": 494, "842": 494, "338": 494, "645": 494, "231": 494, "938": 494, "707": 494, "33x": 494, "1533": 494, "1258": 494, "22x": 494, "981": 494, "647": 494, "52x": 494, "850": 494, "444": 494, "37x": 494, "543": 494, "74x": 494, "93x": 494, "947": 494, "233": 494, "788": 494, "462": 494, "71x": 494, "15x": 494, "51958": 494, "39974": 494, "1631": 494, "662": 494, "46x": 494, "1162": 494, "330": 494, "968": 494, "334": 494, "resnest50": 494, "394": 494, "resnext101_32x8d": 494, "558": 494, "108": 494, "efficientnet_b0": 494, "703": 494, "656": 494, "efficientnet_b3": 494, "510": 494, "391": 494, "efficientnet_b7": 494, "150": 494, "55x": 494, "peleenet": 494, "857": 494, "585": 494, "yolo": 494, "160": 494, "66x": 494, "141": 494, "407": 494, "camembert": 494, "402": 494, "32x": 494, "343": 494, "804": 494, "352": 494, "17x": 494, "302": 494, "183": 494, "382": 494, "19x": 494, "35x": 494, "51": 494, "414": 494, "stsb": 494, "413": 494, "410": 494, "138": 494, "69x": 494, "385": 494, "76x": 494, "126": 494, "wikitext": 494, "reform": 494, "crime": 494, "punish": 494, "449": 494, "364": 494, "lvwerra": 494, "pegasu": 494, "samsum": 494, "openai": 494, "whisper": 494, "abeja": 494, "neox": 494, "japanes": 494, "1723": 494, "654": 494, "63x": 494, "1141": 494, "306": 494, "73x": 494, "106": 494, "1379": 494, "729": 494, "389": 494, "25x": 494, "1980": 494, "672": 494, "5032": 494, "1500": 494, "resnext101_32x16d_wsl": 494, "533": 494, "36x": 494, "556": 494, "149": 494, "1412": 494, "710": 494, "99x": 494, "1564": 494, "712": 494, "20x": 494, "1377": 494, "719": 494, "1446": 494, "06x": 494, "1579": 494, "747": 494, "11x": 494, "1508": 494, "749": 494, "01x": 494, "6950": 494, "4214": 494, "6881": 494, "4192": 494, "6563": 494, "3804": 494, "6631": 494, "3922": 494, "423": 494, "158": 494, "571": 494, "53x": 494, "598": 494, "163": 494, "594": 494, "164": 494, "62x": 494, "5473": 494, "2567": 494, "5455": 494, "2563": 494, "shufflenet": 494, "6818": 494, "3839": 494, "78x": 494, "5750": 494, "3861": 494, "googlenet": 494, "1783": 494, "1095": 494, "1755": 494, "1071": 494, "squeezenet": 494, "9918": 494, "5639": 494, "9423": 494, "5501": 494, "caffenet": 494, "3363": 494, "1015": 494, "3276": 494, "798": 494, "10x": 494, "2104": 494, "985": 494, "2054": 494, "745": 494, "zfnet": 494, "864": 494, "866": 494, "455": 494, "1802": 494, "1170": 494, "1813": 494, "1164": 494, "56x": 494, "2615": 494, "1349": 494, "2343": 494, "1322": 494, "499": 494, "1288": 494, "878": 494, "47x": 494, "1173": 494, "851": 494, "38x": 494, "1114": 494, "825": 494, "1056": 494, "792": 494, "669": 494, "140": 494, "110": 494, "yolov4": 494, "12x": 494, "duc": 494, "tini": 494, "1163": 494, "993": 494, "ultra": 494, "8501": 494, "1922": 494, "emot": 494, "ferplu": 494, "3552": 494, "3114": 494, "arcfac": 494, "246": 494, "399": 494, "226": 494, "392": 494, "223": 494, "integerop": 494, "474": 494, "222": 494, "557": 494, "963": 494, "529": 494, "603": 494, "398": 494, "187": 494, "96x": 494, "144": 494, "124": 494, "bidaf": 494, "2757": 494, "2279": 494, "lm": 494, "357": 494, "472": 494, "365": 494, "214": 494, "70x": 494, "489": 494, "212": 494, "213": 494, "61x": 494, "270": 494, "215": 494, "491": 494, "l12": 494, "h384": 494, "1051": 494, "583": 494, "80x": 494, "1076": 494, "589": 494, "896": 494, "396": 494, "753": 494, "274": 494, "210": 494, "271": 494, "l6": 494, "1124": 494, "2010": 494, "1127": 494, "401": 494, "494": 494, "electra": 494, "discrimin": 494, "1804": 494, "1154": 494, "1961": 494, "1158": 494, "mini": 494, "4986": 494, "3444": 494, "45x": 494, "5603": 494, "3320": 494, "bart": 494, "deberta": 494, "147": 494, "170": 494, "16x": 494, "spanbert": 494, "multilingu": 494, "159": 494, "distilgpt2": 494, "layoutlm": 494, "funsd": 494, "50x": 494, "layoutlmv3": 494, "fcn": 494, "taskdataset": 494, "accuracyspars": 494, "ratiospars": 494, "commentsbalancedor": 494, "unbalanc": 494, "answeringsquad": 494, "87f1": 494, "momentumunbalanc": 494, "momentumbalanc": 494, "90f1": 494, "59f1": 494, "23f1": 494, "classificationmrpc": 494, "52f1": 494, "26f1": 494, "classificationsst": 494, "61accuraci": 494, "recognitionimagenet": 494, "95top1": 494, "v5s6": 494, "detectioncoco": 494, "ap0": 494, "6ap0": 494, "393": 494, "584": 494, "34f1": 494, "lassounbalanc": 494, "classificationmnli": 494, "mm": 494, "allbalanc": 494, "32accuraci": 494, "sensitivitybalanc": 494, "classificationqqp": 494, "classificationqnli": 494, "54accuraci": 494, "em": 494, "mobilenetv2": 494, "7965": 494, "wideresnet40": 494, "9522": 494, "8178": 494, "0213": 494, "8235": 494, "027": 494, "5494": 494, "7153": 494, "5540": 494, "0046": 494, "5523": 494, "vgg": 494, "bn": 494, "7022": 494, "7415": 494, "7025": 494, "0003": 494, "6739": 494, "7399": 494, "6845": 494, "0106": 494, "blendcnn": 494, "7034": 494, "8382": 494, "bilstm": 494, "8314": 494, "9403": 494, "9048": 494, "0734": 494, "7323": 494, "8256": 494, "8084": 494, "8814": 494, "7442": 494, "8371": 494, "0119": 494, "0115": 494, "tinybert": 494, "8018": 494, "8044": 494, "8363": 494, "8411": 494, "8025": 494, "8074": 494, "0007": 494, "0030": 494, "8626": 494, "8213": 494, "9091": 494, "8782": 494, "8684": 494, "8259": 494, "0058": 494, "distilroberta": 494, "6057": 494, "6455": 494, "6187": 494, "0130": 494, "c6i": 494, "2xlarg": 494, "c6a": 494, "c6g": 494, "a100cuda": 494, "executionprovid": 494}, "objects": {"": [[0, 0, 0, "-", "block_mask"], [336, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[2, 0, 0, "-", "adaptor"], [162, 0, 0, "-", "algorithm"], [165, 0, 0, "-", "benchmark"], [173, 0, 0, "-", "compression"], [201, 0, 0, "-", "conf"], [203, 0, 0, "-", "config"], [204, 0, 0, "-", "contrib"], [229, 0, 0, "-", "data"], [283, 0, 0, "-", "experimental"], [343, 0, 0, "-", "metric"], [345, 0, 0, "-", "mix_precision"], [347, 0, 0, "-", "model"], [355, 0, 0, "-", "objective"], [356, 0, 0, "-", "profiling"], [378, 0, 0, "-", "quantization"], [386, 0, 0, "-", "strategy"], [398, 0, 0, "-", "template"], [399, 0, 0, "-", "training"], [403, 0, 0, "-", "utils"], [412, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[1, 0, 0, "-", "adaptor"], [3, 0, 0, "-", "keras"], [7, 0, 0, "-", "keras_utils"], [11, 0, 0, "-", "mxnet"], [12, 0, 0, "-", "mxnet_utils"], [14, 0, 0, "-", "onnxrt"], [17, 0, 0, "-", "ox_utils"], [44, 0, 0, "-", "pytorch"], [45, 0, 0, "-", "query"], [46, 0, 0, "-", "tensorflow"], [110, 0, 0, "-", "tf_utils"], [151, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[1, 1, 1, "", "Adaptor"], [1, 2, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.keras": [[3, 1, 1, "", "KerasAdaptor"], [3, 1, 1, "", "KerasQuery"]], "neural_compressor.adaptor.keras_utils": [[4, 0, 0, "-", "conv2d"], [5, 0, 0, "-", "dense"], [6, 0, 0, "-", "depthwise_conv2d"], [8, 0, 0, "-", "pool2d"], [9, 0, 0, "-", "quantizer"], [10, 0, 0, "-", "separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, 1, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet_utils": [[13, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, 1, 1, "", "CalibCollector"], [13, 1, 1, "", "CalibData"], [13, 1, 1, "", "CollectorBase"], [13, 1, 1, "", "DataIterLoader"], [13, 1, 1, "", "DataLoaderWrap"], [13, 1, 1, "", "NameCollector"], [13, 1, 1, "", "OpType"], [13, 1, 1, "", "TensorCollector"], [13, 2, 1, "", "amp_convert"], [13, 2, 1, "", "calib_model"], [13, 2, 1, "", "check_mx_version"], [13, 2, 1, "", "combine_capabilities"], [13, 2, 1, "", "create_data_example"], [13, 2, 1, "", "distribute_calib_tensors"], [13, 2, 1, "", "ensure_list"], [13, 2, 1, "", "fuse"], [13, 2, 1, "", "get_framework_name"], [13, 2, 1, "", "is_model_quantized"], [13, 2, 1, "", "isiterable"], [13, 2, 1, "", "make_module"], [13, 2, 1, "", "make_nc_model"], [13, 2, 1, "", "make_symbol_block"], [13, 2, 1, "", "ndarray_to_device"], [13, 2, 1, "", "parse_tune_config"], [13, 2, 1, "", "prepare_dataloader"], [13, 2, 1, "", "prepare_model"], [13, 2, 1, "", "prepare_model_data"], [13, 2, 1, "", "quantize_sym_model"], [13, 2, 1, "", "query_quantizable_nodes"], [13, 2, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[14, 1, 1, "", "ONNXRT_IntegerOpsAdaptor"], [14, 1, 1, "", "ONNXRT_QDQAdaptor"], [14, 1, 1, "", "ONNXRT_QLinearOpsAdaptor"], [14, 1, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.ox_utils": [[15, 0, 0, "-", "calibration"], [16, 0, 0, "-", "calibrator"], [29, 0, 0, "-", "operators"], [41, 0, 0, "-", "quantizer"], [42, 0, 0, "-", "smooth_quant"], [43, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, 1, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, 1, 1, "", "CalibratorBase"], [16, 1, 1, "", "HistogramCollector"], [16, 1, 1, "", "KLCalibrator"], [16, 1, 1, "", "MinMaxCalibrator"], [16, 1, 1, "", "PercentileCalibrator"], [16, 2, 1, "", "calib_registry"], [16, 2, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[18, 0, 0, "-", "activation"], [19, 0, 0, "-", "argmax"], [20, 0, 0, "-", "attention"], [21, 0, 0, "-", "binary_op"], [22, 0, 0, "-", "concat"], [23, 0, 0, "-", "conv"], [24, 0, 0, "-", "direct_q8"], [25, 0, 0, "-", "embed_layernorm"], [26, 0, 0, "-", "gather"], [27, 0, 0, "-", "gavgpool"], [28, 0, 0, "-", "gemm"], [30, 0, 0, "-", "lstm"], [31, 0, 0, "-", "matmul"], [32, 0, 0, "-", "maxpool"], [33, 0, 0, "-", "norm"], [34, 0, 0, "-", "ops"], [35, 0, 0, "-", "pad"], [36, 0, 0, "-", "pooling"], [37, 0, 0, "-", "reduce"], [38, 0, 0, "-", "resize"], [39, 0, 0, "-", "split"], [40, 0, 0, "-", "unary_op"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, 1, 1, "", "ActivationOperator"], [18, 1, 1, "", "Float16ActivationOperator"], [18, 1, 1, "", "QActivationOperator"], [18, 1, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, 1, 1, "", "ArgMaxOperator"], [19, 1, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, 1, 1, "", "AttentionOperator"], [20, 1, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, 1, 1, "", "BinaryOperator"], [21, 1, 1, "", "Float16BinaryOperator"], [21, 1, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, 1, 1, "", "ConcatOperator"], [22, 1, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, 1, 1, "", "ConvOperator"], [23, 1, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, 1, 1, "", "Direct8BitOperator"], [24, 1, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, 1, 1, "", "EmbedLayerNormalizationOperator"], [25, 1, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, 1, 1, "", "GatherOperator"], [26, 1, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, 1, 1, "", "GlobalAveragePoolOperator"], [27, 1, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, 1, 1, "", "GemmOperator"], [28, 1, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, 1, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, 1, 1, "", "FusedMatMulOperator"], [31, 1, 1, "", "MatMulOperator"], [31, 1, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, 1, 1, "", "MaxPoolOperator"], [32, 1, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, 1, 1, "", "BatchNormalizationOperator"], [33, 1, 1, "", "NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, 1, 1, "", "Operator"], [34, 1, 1, "", "QOperator"], [34, 2, 1, "", "op_registry"], [34, 2, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, 1, 1, "", "PadOperator"], [35, 1, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, 1, 1, "", "PoolOperator"], [36, 1, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, 1, 1, "", "ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, 1, 1, "", "QResizeOperator"], [38, 1, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, 1, 1, "", "QSplitOperator"], [39, 1, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, 1, 1, "", "UnaryOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, 1, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, 1, 1, "", "ORTSmoothQuant"], [42, 2, 1, "", "get_quant_dequant_output"], [42, 2, 1, "", "make_sub_graph"], [42, 2, 1, "", "quant_dequant_data"]], "neural_compressor.adaptor.ox_utils.util": [[43, 1, 1, "", "QuantFormat"], [43, 1, 1, "", "QuantType"], [43, 1, 1, "", "QuantizationMode"], [43, 1, 1, "", "QuantizedInitializer"], [43, 1, 1, "", "QuantizedValue"], [43, 1, 1, "", "QuantizedValueType"], [43, 1, 1, "", "ValueInfo"], [43, 2, 1, "", "attribute_to_kwarg"], [43, 2, 1, "", "calculate_scale_zp"], [43, 2, 1, "", "cast_tensor"], [43, 2, 1, "", "collate_preds"], [43, 2, 1, "", "dequantize_data"], [43, 2, 1, "", "dequantize_data_with_scale_zero"], [43, 2, 1, "", "dtype_to_name"], [43, 2, 1, "", "find_by_name"], [43, 2, 1, "", "float_to_bfloat16"], [43, 2, 1, "", "float_to_float16"], [43, 2, 1, "", "is_B_transposed"], [43, 2, 1, "", "make_dquant_node"], [43, 2, 1, "", "make_quant_node"], [43, 2, 1, "", "quantize_data"], [43, 2, 1, "", "quantize_data_per_channel"], [43, 2, 1, "", "quantize_data_with_scale_zero"], [43, 2, 1, "", "quantize_nparray"], [43, 2, 1, "", "remove_init_from_model_input"], [43, 2, 1, "", "split_shared_bias"], [43, 2, 1, "", "to_numpy"], [43, 2, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.pytorch": [[44, 1, 1, "", "PyTorchAdaptor"], [44, 1, 1, "", "PyTorchQuery"], [44, 1, 1, "", "PyTorchWeightOnlyAdaptor"], [44, 1, 1, "", "PyTorch_FXAdaptor"], [44, 1, 1, "", "PyTorch_IPEXAdaptor"], [44, 1, 1, "", "TemplateAdaptor"], [44, 2, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.query": [[45, 1, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.tensorflow": [[46, 1, 1, "", "TensorFlowAdaptor"], [46, 1, 1, "", "TensorflowQuery"], [46, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[47, 0, 0, "-", "graph_converter"], [48, 0, 0, "-", "graph_converter_without_calib"], [86, 0, 0, "-", "graph_rewriter"], [109, 0, 0, "-", "graph_util"], [111, 0, 0, "-", "quantize_graph"], [138, 0, 0, "-", "quantize_graph_common"], [139, 0, 0, "-", "smooth_quant_calibration"], [140, 0, 0, "-", "smooth_quant_scaler"], [141, 0, 0, "-", "tf2onnx_converter"], [144, 0, 0, "-", "transform_graph"], [147, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, 1, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[50, 0, 0, "-", "bf16"], [75, 0, 0, "-", "generic"], [85, 0, 0, "-", "graph_base"], [94, 0, 0, "-", "int8"], [100, 0, 0, "-", "onnx"], [105, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[49, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, 1, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[51, 0, 0, "-", "convert_add_to_biasadd"], [52, 0, 0, "-", "convert_layout"], [53, 0, 0, "-", "convert_leakyrelu"], [54, 0, 0, "-", "convert_nan_to_random"], [55, 0, 0, "-", "convert_placeholder_to_const"], [56, 0, 0, "-", "dequantize_cast_optimizer"], [57, 0, 0, "-", "dilated_contraction"], [58, 0, 0, "-", "dummy_biasadd"], [59, 0, 0, "-", "expanddims_optimizer"], [60, 0, 0, "-", "fetch_weight_from_reshape"], [61, 0, 0, "-", "fold_batch_norm"], [62, 0, 0, "-", "fold_constant"], [63, 0, 0, "-", "fuse_biasadd_add"], [64, 0, 0, "-", "fuse_column_wise_mul"], [65, 0, 0, "-", "fuse_conv_with_math"], [66, 0, 0, "-", "fuse_decomposed_bn"], [67, 0, 0, "-", "fuse_decomposed_in"], [68, 0, 0, "-", "fuse_gelu"], [69, 0, 0, "-", "fuse_layer_norm"], [70, 0, 0, "-", "fuse_pad_with_conv"], [71, 0, 0, "-", "fuse_pad_with_fp32_conv"], [72, 0, 0, "-", "fuse_reshape_transpose"], [73, 0, 0, "-", "graph_cse_optimizer"], [74, 0, 0, "-", "grappler_pass"], [76, 0, 0, "-", "insert_print_node"], [77, 0, 0, "-", "move_squeeze_after_relu"], [78, 0, 0, "-", "pre_optimize"], [79, 0, 0, "-", "remove_training_nodes"], [80, 0, 0, "-", "rename_batch_norm"], [81, 0, 0, "-", "split_shared_input"], [82, 0, 0, "-", "strip_equivalent_nodes"], [83, 0, 0, "-", "strip_unused_nodes"], [84, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, 1, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, 1, 1, "", "FuseDecomposedBNOptimizer"], [66, 2, 1, "", "bypass_reshape"], [66, 2, 1, "", "get_const_dim_count"], [66, 2, 1, "", "node_from_map"], [66, 2, 1, "", "node_name_from_input"], [66, 2, 1, "", "valid_reshape_inputs"], [66, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, 1, 1, "", "FuseDecomposedINOptimizer"], [67, 2, 1, "", "bypass_reshape"], [67, 2, 1, "", "get_const_dim_count"], [67, 2, 1, "", "node_from_map"], [67, 2, 1, "", "node_name_from_input"], [67, 2, 1, "", "valid_reshape_inputs"], [67, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, 1, 1, "", "FuseLayerNormOptimizer"], [69, 2, 1, "", "node_from_map"], [69, 2, 1, "", "node_name_from_input"], [69, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, 1, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[87, 0, 0, "-", "freeze_fake_quant"], [88, 0, 0, "-", "freeze_value"], [89, 0, 0, "-", "freeze_value_without_calib"], [90, 0, 0, "-", "fuse_conv_redundant_dequantize"], [91, 0, 0, "-", "fuse_conv_requantize"], [92, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [93, 0, 0, "-", "fuse_matmul_requantize"], [95, 0, 0, "-", "meta_op_optimizer"], [96, 0, 0, "-", "post_hostconst_converter"], [97, 0, 0, "-", "post_quantized_op_cse"], [98, 0, 0, "-", "rnn_convert"], [99, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [93, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [93, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [93, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, 0, 0, "-", "onnx_graph"], [102, 0, 0, "-", "onnx_node"], [103, 0, 0, "-", "onnx_schema"], [104, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, 1, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, 1, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, 1, 1, "", "OnnxOpSchema"], [103, 2, 1, "", "get_max_supported_opset_version"], [103, 2, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, 1, 1, "", "SeqType"], [104, 2, 1, "", "add_port_to_name"], [104, 2, 1, "", "are_shapes_equal"], [104, 2, 1, "", "assert_error"], [104, 2, 1, "", "compute_const_folding_using_tf"], [104, 2, 1, "", "convert_tensorflow_tensor_to_onnx"], [104, 2, 1, "", "find_opset"], [104, 2, 1, "", "get_index_from_strided_slice_of_shape"], [104, 2, 1, "", "get_subgraphs_from_onnx"], [104, 2, 1, "", "get_tensorflow_node_attr"], [104, 2, 1, "", "get_tensorflow_node_shape_attr"], [104, 2, 1, "", "get_tensorflow_tensor_data"], [104, 2, 1, "", "get_tensorflow_tensor_shape"], [104, 2, 1, "", "infer_onnx_shape_dtype"], [104, 2, 1, "", "initialize_name_counter"], [104, 2, 1, "", "is_list_or_tuple"], [104, 2, 1, "", "is_onnx_domain"], [104, 2, 1, "", "make_onnx_inputs_outputs"], [104, 2, 1, "", "make_onnx_shape"], [104, 2, 1, "", "map_numpy_to_onnx_dtype"], [104, 2, 1, "", "map_onnx_to_numpy_type"], [104, 2, 1, "", "map_tensorflow_dtype"], [104, 2, 1, "", "read_tensorflow_node_attrs"], [104, 2, 1, "", "save_protobuf"], [104, 2, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, 0, 0, "-", "insert_qdq_pattern"], [107, 0, 0, "-", "merge_duplicated_qdq"], [108, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, 1, 1, "", "GraphAnalyzer"], [109, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[113, 0, 0, "-", "qat"], [129, 0, 0, "-", "qdq"], [131, 0, 0, "-", "quantize_graph_base"], [132, 0, 0, "-", "quantize_graph_bn"], [133, 0, 0, "-", "quantize_graph_concatv2"], [134, 0, 0, "-", "quantize_graph_conv"], [135, 0, 0, "-", "quantize_graph_for_intel_cpu"], [136, 0, 0, "-", "quantize_graph_matmul"], [137, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[112, 0, 0, "-", "fake_quantize"], [114, 0, 0, "-", "quantize_config"], [115, 0, 0, "-", "quantize_helper"], [116, 0, 0, "-", "quantize_layers"], [121, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, 1, 1, "", "FakeQuantize"], [112, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, 1, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, 2, 1, "", "init_quantize_config"], [115, 2, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, 0, 0, "-", "optimize_layer"], [118, 0, 0, "-", "quantize_layer_add"], [119, 0, 0, "-", "quantize_layer_base"], [120, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, 1, 1, "", "QuantizeWrapper"], [121, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[122, 0, 0, "-", "fuse_qdq_bn"], [123, 0, 0, "-", "fuse_qdq_concatv2"], [124, 0, 0, "-", "fuse_qdq_conv"], [125, 0, 0, "-", "fuse_qdq_deconv"], [126, 0, 0, "-", "fuse_qdq_in"], [127, 0, 0, "-", "fuse_qdq_matmul"], [128, 0, 0, "-", "fuse_qdq_pooling"], [130, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, 1, 1, "", "QuantizeGraphBase"], [131, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[139, 1, 1, "", "SmoothQuantCalibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[140, 1, 1, "", "SmoothQuantScaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[141, 1, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[142, 0, 0, "-", "bias_correction"], [143, 0, 0, "-", "graph_transform_base"], [145, 0, 0, "-", "insert_logging"], [146, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[142, 1, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[143, 1, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[145, 1, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[146, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[147, 2, 1, "", "collate_tf_preds"], [147, 2, 1, "", "disable_random"], [147, 2, 1, "", "fix_ref_type_of_graph_def"], [147, 2, 1, "", "generate_feed_dict"], [147, 2, 1, "", "get_estimator_graph"], [147, 2, 1, "", "get_graph_def"], [147, 2, 1, "", "get_input_output_node_names"], [147, 2, 1, "", "get_model_input_shape"], [147, 2, 1, "", "get_tensor_by_name"], [147, 2, 1, "", "get_tensor_val_from_graph_node"], [147, 2, 1, "", "get_weight_from_input_tensor"], [147, 2, 1, "", "int8_node_name_reverse"], [147, 2, 1, "", "is_ckpt_format"], [147, 2, 1, "", "is_saved_model_format"], [147, 2, 1, "", "iterator_sess_run"], [147, 2, 1, "", "read_graph"], [147, 2, 1, "", "strip_equivalent_nodes"], [147, 2, 1, "", "strip_unused_nodes"], [147, 2, 1, "", "tf_diagnosis_helper"], [147, 2, 1, "", "version1_eq_version2"], [147, 2, 1, "", "version1_gt_version2"], [147, 2, 1, "", "version1_gte_version2"], [147, 2, 1, "", "version1_lt_version2"], [147, 2, 1, "", "version1_lte_version2"], [147, 2, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[148, 0, 0, "-", "bf16_convert"], [149, 0, 0, "-", "gptq"], [150, 0, 0, "-", "hawq_metric"], [152, 0, 0, "-", "mixed_precision"], [153, 0, 0, "-", "model_wrapper"], [154, 0, 0, "-", "pattern_detector"], [155, 0, 0, "-", "smooth_quant"], [156, 0, 0, "-", "symbolic_trace"], [157, 0, 0, "-", "teq"], [158, 0, 0, "-", "util"], [159, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[148, 1, 1, "", "BF16ModuleWrapper"], [148, 2, 1, "", "Convert"], [148, 2, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.gptq": [[149, 1, 1, "", "GPTQ"], [149, 1, 1, "", "GPTQuantizer"], [149, 2, 1, "", "find_layers"], [149, 2, 1, "", "find_layers_name"], [149, 2, 1, "", "is_leaf"], [149, 2, 1, "", "log_quantizable_layers_per_transformer"], [149, 2, 1, "", "quantize"], [149, 2, 1, "", "trace_gptq_target_blocks"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[150, 1, 1, "", "HessianTrace"], [150, 1, 1, "", "Node_collector"], [150, 2, 1, "", "compare_weights"], [150, 2, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[152, 2, 1, "", "ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[153, 1, 1, "", "FakeAffineTensorQuantFunction"], [153, 1, 1, "", "TEQLinearFakeQuant"], [153, 1, 1, "", "TEQMulLinear"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[154, 1, 1, "", "TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[155, 1, 1, "", "GraphTrace"], [155, 1, 1, "", "TorchSmoothQuant"], [155, 2, 1, "", "get_module"], [155, 2, 1, "", "set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[156, 2, 1, "", "symbolic_trace"], [156, 2, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.teq": [[157, 1, 1, "", "TEQuantizer"]], "neural_compressor.adaptor.torch_utils.util": [[158, 2, 1, "", "append_attr"], [158, 2, 1, "", "auto_copy"], [158, 2, 1, "", "calculate_quant_min_max"], [158, 2, 1, "", "check_cfg_and_qconfig"], [158, 2, 1, "", "collate_torch_preds"], [158, 2, 1, "", "collect_weight_info"], [158, 2, 1, "", "fetch_module"], [158, 2, 1, "", "generate_activation_observer"], [158, 2, 1, "", "get_depth"], [158, 2, 1, "", "get_dict_at_depth"], [158, 2, 1, "", "get_element_under_depth"], [158, 2, 1, "", "get_embedding_contiguous"], [158, 2, 1, "", "get_example_input"], [158, 2, 1, "", "get_fallback_order"], [158, 2, 1, "", "get_mse_order_per_fp32"], [158, 2, 1, "", "get_mse_order_per_int8"], [158, 2, 1, "", "get_op_type_by_name"], [158, 2, 1, "", "get_quantizable_ops_from_cfgs"], [158, 2, 1, "", "get_torch_version"], [158, 2, 1, "", "input2tuple"], [158, 2, 1, "", "is_fused_module"], [158, 2, 1, "", "match_datatype_pattern"], [158, 2, 1, "", "paser_cfgs"], [158, 2, 1, "", "set_module"], [158, 2, 1, "", "simple_inference"], [158, 2, 1, "", "update_sq_scale"]], "neural_compressor.adaptor.torch_utils.weight_only": [[159, 2, 1, "", "awq_quantize"], [159, 2, 1, "", "get_module_input_output"], [159, 2, 1, "", "gptq_quantize"], [159, 2, 1, "", "qdq_weight_actor"], [159, 2, 1, "", "qdq_weight_asym"], [159, 2, 1, "", "qdq_weight_sym"], [159, 2, 1, "", "quant_weight"], [159, 2, 1, "", "quant_weight_w_scale"], [159, 2, 1, "", "rtn_quantize"], [159, 2, 1, "", "teq_quantize"]], "neural_compressor.algorithm": [[160, 0, 0, "-", "algorithm"], [161, 0, 0, "-", "fast_bias_correction"], [163, 0, 0, "-", "smooth_quant"], [164, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[160, 1, 1, "", "ALGORITHMS"], [160, 1, 1, "", "Algorithm"], [160, 1, 1, "", "AlgorithmScheduler"], [160, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[161, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[163, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[164, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[165, 2, 1, "", "benchmark_with_raw_cmd"], [165, 2, 1, "", "call_one"], [165, 2, 1, "", "config_instance"], [165, 2, 1, "", "fit"], [165, 2, 1, "", "generate_prefix"], [165, 2, 1, "", "get_architecture"], [165, 2, 1, "", "get_bounded_threads"], [165, 2, 1, "", "get_core_ids"], [165, 2, 1, "", "get_physical_ids"], [165, 2, 1, "", "get_threads"], [165, 2, 1, "", "get_threads_per_core"], [165, 2, 1, "", "profile"], [165, 2, 1, "", "run_instance"], [165, 2, 1, "", "set_all_env_var"], [165, 2, 1, "", "set_env_var"], [165, 2, 1, "", "summary_benchmark"]], "neural_compressor.compression": [[166, 0, 0, "-", "callbacks"], [168, 0, 0, "-", "distillation"], [169, 0, 0, "-", "hpo"], [175, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[166, 1, 1, "", "BaseCallbacks"], [166, 1, 1, "", "DistillationCallbacks"], [166, 1, 1, "", "PruningCallbacks"], [166, 1, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[166, 3, 1, "", "_epoch_ran"], [166, 3, 1, "", "best_model"], [166, 3, 1, "", "best_score"], [166, 3, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[167, 0, 0, "-", "criterions"]], "neural_compressor.compression.distillation.criterions": [[167, 1, 1, "", "Criterions"], [167, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [167, 1, 1, "", "KnowledgeDistillationFramework"], [167, 1, 1, "", "KnowledgeDistillationLoss"], [167, 1, 1, "", "PyTorchCriterions"], [167, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [167, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [167, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [167, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [167, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [167, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [167, 1, 1, "", "SelfKnowledgeDistillationLoss"], [167, 1, 1, "", "TensorflowCriterions"], [167, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [167, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [167, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [167, 2, 1, "", "criterion_registry"]], "neural_compressor.compression.hpo": [[170, 0, 0, "-", "sa_optimizer"], [171, 0, 0, "-", "search_algorithms"], [172, 0, 0, "-", "search_space"]], "neural_compressor.compression.hpo.search_algorithms": [[171, 1, 1, "", "BayesianOptimizationSearcher"], [171, 1, 1, "", "GridSearcher"], [171, 1, 1, "", "RandomSearcher"], [171, 1, 1, "", "Searcher"], [171, 1, 1, "", "XgbSearcher"], [171, 2, 1, "", "register_searcher"]], "neural_compressor.compression.hpo.search_space": [[172, 1, 1, "", "BaseSearchSpace"], [172, 1, 1, "", "ContinuousSearchSpace"], [172, 1, 1, "", "DiscreteSearchSpace"], [172, 1, 1, "", "SearchSpace"], [172, 2, 1, "", "register_searchspace"]], "neural_compressor.compression.pruner": [[174, 0, 0, "-", "criteria"], [177, 0, 0, "-", "model_slim"], [181, 0, 0, "-", "patterns"], [175, 2, 1, "", "prepare_pruning"], [188, 0, 0, "-", "pruners"], [194, 0, 0, "-", "pruning"], [195, 0, 0, "-", "regs"], [175, 2, 1, "", "save"], [196, 0, 0, "-", "schedulers"], [197, 0, 0, "-", "tf_criteria"], [198, 0, 0, "-", "utils"]], "neural_compressor.compression.pruner.criteria": [[174, 1, 1, "", "BlockMaskCriterion"], [174, 1, 1, "", "GradientCriterion"], [174, 1, 1, "", "MagnitudeCriterion"], [174, 1, 1, "", "PruningCriterion"], [174, 1, 1, "", "RetrainFreeCriterion"], [174, 1, 1, "", "SnipCriterion"], [174, 1, 1, "", "SnipMomentumCriterion"], [174, 2, 1, "", "get_criterion"], [174, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.BlockMaskCriterion": [[174, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[174, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[174, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[174, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[174, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[174, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[174, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.model_slim": [[176, 0, 0, "-", "auto_slim"], [178, 0, 0, "-", "pattern_analyzer"], [179, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[176, 2, 1, "", "generate_ffn2_pruning_config"], [176, 2, 1, "", "generate_mha_pruning_config"], [176, 2, 1, "", "model_slim"], [176, 2, 1, "", "model_slim_ffn2"], [176, 2, 1, "", "model_slim_mha"], [176, 2, 1, "", "parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[178, 1, 1, "", "ClassifierHeadSearcher"], [178, 1, 1, "", "ClassifierHeadSearcherTF"], [178, 1, 1, "", "JitBasicSearcher"], [178, 1, 1, "", "Linear2LinearSearcher"], [178, 1, 1, "", "RecipeSearcher"], [178, 1, 1, "", "SelfMHASearcher"], [178, 2, 1, "", "get_attributes"], [178, 2, 1, "", "get_common_module"], [178, 2, 1, "", "print_iterables"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher": [[178, 3, 1, "", "device"], [178, 3, 1, "", "flatten_static_graph"], [178, 3, 1, "", "model"], [178, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF": [[178, 3, 1, "", "device"], [178, 3, 1, "", "flatten_static_graph"], [178, 3, 1, "", "model"], [178, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[178, 3, 1, "", "device"], [178, 3, 1, "", "flatten_static_graph"], [178, 3, 1, "", "model"], [178, 3, 1, "", "searching_results"], [178, 3, 1, "", "static_graph"], [178, 3, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[178, 3, 1, "", "current_pattern"], [178, 3, 1, "", "device"], [178, 3, 1, "", "flatten_static_graph"], [178, 3, 1, "", "model"], [178, 3, 1, "", "searching_results"], [178, 3, 1, "", "static_graph"], [178, 3, 1, "", "target_layers"], [178, 3, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[178, 3, 1, "", "model"], [178, 3, 1, "", "recipe"], [178, 3, 1, "", "searching_results"], [178, 3, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[178, 3, 1, "", "device"], [178, 3, 1, "", "flatten_static_graph"], [178, 3, 1, "", "model"], [178, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[179, 1, 1, "", "LinearCompression"], [179, 1, 1, "", "LinearCompressionIterator"], [179, 1, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[179, 3, 1, "", "device"], [179, 3, 1, "", "layer_1"], [179, 3, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[179, 3, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[180, 0, 0, "-", "base"], [181, 2, 1, "", "get_pattern"], [182, 0, 0, "-", "mha"], [183, 0, 0, "-", "ninm"], [184, 0, 0, "-", "nxm"]], "neural_compressor.compression.pruner.patterns.base": [[180, 1, 1, "", "BasePattern"], [180, 1, 1, "", "KerasBasePattern"], [180, 1, 1, "", "PytorchBasePattern"], [180, 2, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.base.BasePattern": [[180, 3, 1, "", "config"], [180, 3, 1, "", "invalid_layers"], [180, 3, 1, "", "is_global"], [180, 3, 1, "", "keep_mask_layers"], [180, 3, 1, "", "max_sparsity_ratio_per_op"], [180, 3, 1, "", "min_sparsity_ratio_per_op"], [180, 3, 1, "", "modules"], [180, 3, 1, "", "pattern"], [180, 3, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.KerasBasePattern": [[180, 3, 1, "", "config"], [180, 3, 1, "", "invalid_layers"], [180, 3, 1, "", "is_global"], [180, 3, 1, "", "keep_mask_layers"], [180, 3, 1, "", "max_sparsity_ratio_per_op"], [180, 3, 1, "", "min_sparsity_ratio_per_op"], [180, 3, 1, "", "modules"], [180, 3, 1, "", "pattern"], [180, 3, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern": [[180, 3, 1, "", "config"], [180, 3, 1, "", "invalid_layers"], [180, 3, 1, "", "is_global"], [180, 3, 1, "", "keep_mask_layers"], [180, 3, 1, "", "max_sparsity_ratio_per_op"], [180, 3, 1, "", "min_sparsity_ratio_per_op"], [180, 3, 1, "", "modules"], [180, 3, 1, "", "pattern"], [180, 3, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.mha": [[182, 1, 1, "", "PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha.PatternMHA": [[182, 3, 1, "", "M"], [182, 3, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.ninm": [[183, 1, 1, "", "PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM": [[183, 3, 1, "", "M"], [183, 3, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.nxm": [[184, 1, 1, "", "KerasPatternNxM"], [184, 1, 1, "", "PytorchPatternNxM"]], "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM": [[184, 3, 1, "", "block_size"]], "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM": [[184, 3, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[185, 0, 0, "-", "base"], [186, 0, 0, "-", "basic"], [187, 0, 0, "-", "block_mask"], [188, 2, 1, "", "get_pruner"], [189, 0, 0, "-", "mha"], [188, 2, 1, "", "parse_valid_pruner_types"], [190, 0, 0, "-", "pattern_lock"], [191, 0, 0, "-", "progressive"], [192, 0, 0, "-", "retrain_free"], [193, 0, 0, "-", "sparse_gpt"]], "neural_compressor.compression.pruner.pruners.base": [[185, 1, 1, "", "BasePruner"], [185, 1, 1, "", "KerasBasePruner"], [185, 1, 1, "", "PytorchBasePruner"], [185, 2, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.base.BasePruner": [[185, 3, 1, "", "config"], [185, 3, 1, "", "current_sparsity_ratio"], [185, 3, 1, "", "end_step"], [185, 3, 1, "", "global_step"], [185, 3, 1, "", "masks"], [185, 3, 1, "", "max_sparsity_ratio_per_op"], [185, 3, 1, "", "modules"], [185, 3, 1, "", "pattern"], [185, 3, 1, "", "pruning_frequency"], [185, 3, 1, "", "scheduler"], [185, 3, 1, "", "scores"], [185, 3, 1, "", "start_step"], [185, 3, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.KerasBasePruner": [[185, 3, 1, "", "config"], [185, 3, 1, "", "current_sparsity_ratio"], [185, 3, 1, "", "end_step"], [185, 3, 1, "", "global_step"], [185, 3, 1, "", "masks"], [185, 3, 1, "", "max_sparsity_ratio_per_op"], [185, 3, 1, "", "modules"], [185, 3, 1, "", "pattern"], [185, 3, 1, "", "pruning_frequency"], [185, 3, 1, "", "scheduler"], [185, 3, 1, "", "scores"], [185, 3, 1, "", "start_step"], [185, 3, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner": [[185, 3, 1, "", "config"], [185, 3, 1, "", "current_sparsity_ratio"], [185, 3, 1, "", "end_step"], [185, 3, 1, "", "global_step"], [185, 3, 1, "", "masks"], [185, 3, 1, "", "max_sparsity_ratio_per_op"], [185, 3, 1, "", "modules"], [185, 3, 1, "", "pattern"], [185, 3, 1, "", "pruning_frequency"], [185, 3, 1, "", "scheduler"], [185, 3, 1, "", "scores"], [185, 3, 1, "", "start_step"], [185, 3, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.basic": [[186, 1, 1, "", "KerasBasicPruner"], [186, 1, 1, "", "PytorchBasicPruner"]], "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner": [[186, 3, 1, "", "criterion"], [186, 3, 1, "", "pattern"], [186, 3, 1, "", "reg"], [186, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner": [[186, 3, 1, "", "criterion"], [186, 3, 1, "", "pattern"], [186, 3, 1, "", "reg"], [186, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.block_mask": [[187, 1, 1, "", "PytorchBlockMaskPruner"]], "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner": [[187, 3, 1, "", "criterion"], [187, 3, 1, "", "pattern"], [187, 3, 1, "", "reg"], [187, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.mha": [[189, 1, 1, "", "PythonMultiheadAttentionPruner"]], "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner": [[189, 3, 1, "", "head_masks"], [189, 3, 1, "", "linear_layers"], [189, 3, 1, "", "mha_compressions"], [189, 3, 1, "", "mha_scores"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[190, 1, 1, "", "PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[191, 1, 1, "", "PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[192, 1, 1, "", "PytorchRetrainFreePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner": [[192, 3, 1, "", "criterion"], [192, 3, 1, "", "pattern"], [192, 3, 1, "", "reg"], [192, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[193, 1, 1, "", "SparseGPTPruner"]], "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner": [[193, 3, 1, "", "criterion"], [193, 3, 1, "", "pattern"], [193, 3, 1, "", "reg"], [193, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruning": [[194, 1, 1, "", "BasePruning"], [194, 1, 1, "", "BasicPruning"], [194, 1, 1, "", "RetrainFreePruning"], [194, 1, 1, "", "SparseGPTPruning"], [194, 2, 1, "", "register_pruning"]], "neural_compressor.compression.pruner.pruning.BasePruning": [[194, 3, 1, "", "config_file_path"], [194, 3, 1, "", "model"], [194, 3, 1, "", "pruner_info"], [194, 3, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.BasicPruning": [[194, 3, 1, "", "config_file_path"], [194, 3, 1, "", "model"], [194, 3, 1, "", "pruner_info"], [194, 3, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.RetrainFreePruning": [[194, 3, 1, "", "config_file_path"], [194, 3, 1, "", "model"], [194, 3, 1, "", "pruner_info"], [194, 3, 1, "", "pruners"]], "neural_compressor.compression.pruner.regs": [[195, 1, 1, "", "BaseReg"], [195, 1, 1, "", "GroupLasso"], [195, 2, 1, "", "get_reg"], [195, 2, 1, "", "get_reg_type"], [195, 2, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[195, 3, 1, "", "alpha"], [195, 3, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[196, 1, 1, "", "IterativeScheduler"], [196, 1, 1, "", "OneshotScheduler"], [196, 1, 1, "", "PruningScheduler"], [196, 2, 1, "", "get_scheduler"], [196, 2, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[196, 3, 1, "", "config"]], "neural_compressor.compression.pruner.tf_criteria": [[197, 1, 1, "", "MagnitudeCriterion"], [197, 1, 1, "", "PruningCriterion"], [197, 2, 1, "", "get_tf_criterion"], [197, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion": [[197, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.tf_criteria.PruningCriterion": [[197, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.utils": [[198, 2, 1, "", "check_config"], [198, 2, 1, "", "check_key_validity"], [198, 2, 1, "", "collect_layer_inputs"], [198, 2, 1, "", "generate_pruner_config"], [198, 2, 1, "", "get_layers"], [198, 2, 1, "", "get_sparsity_ratio"], [198, 2, 1, "", "get_sparsity_ratio_tf"], [198, 2, 1, "", "parse_last_linear"], [198, 2, 1, "", "parse_last_linear_tf"], [198, 2, 1, "", "parse_to_prune"], [198, 2, 1, "", "parse_to_prune_tf"], [198, 2, 1, "", "process_and_check_config"], [198, 2, 1, "", "process_config"], [198, 2, 1, "", "process_weight_config"], [198, 2, 1, "", "process_yaml_config"], [198, 2, 1, "", "reset_none_to_default"], [198, 2, 1, "", "update_params"]], "neural_compressor.conf": [[199, 0, 0, "-", "config"], [200, 0, 0, "-", "dotdict"], [202, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[199, 1, 1, "", "Benchmark_Conf"], [199, 1, 1, "", "Conf"], [199, 1, 1, "", "DefaultConf"], [199, 1, 1, "", "Distillation_Conf"], [199, 1, 1, "", "Graph_Optimization_Conf"], [199, 1, 1, "", "MixedPrecision_Conf"], [199, 1, 1, "", "NASConfig"], [199, 1, 1, "", "PrunerV2"], [199, 1, 1, "", "Pruning_Conf"], [199, 1, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[200, 1, 1, "", "DotDict"], [200, 2, 1, "", "deep_get"], [200, 2, 1, "", "deep_set"]], "neural_compressor.conf.pythonic_config": [[202, 1, 1, "", "AccuracyCriterion"], [202, 1, 1, "", "BenchmarkConfig"], [202, 1, 1, "", "DistillationConfig"], [202, 1, 1, "", "KnowledgeDistillationLossConfig"], [202, 1, 1, "", "Options"], [202, 1, 1, "", "QuantizationConfig"], [202, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.config": [[203, 1, 1, "", "AccuracyCriterion"], [203, 1, 1, "", "BenchmarkConfig"], [203, 1, 1, "", "DistillationConfig"], [203, 1, 1, "", "DotDict"], [203, 1, 1, "", "ExportConfig"], [203, 1, 1, "", "HPOConfig"], [203, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [203, 1, 1, "", "Keras"], [203, 1, 1, "", "KnowledgeDistillationLossConfig"], [203, 1, 1, "", "MXNet"], [203, 1, 1, "", "MixedPrecisionConfig"], [203, 1, 1, "", "NASConfig"], [203, 1, 1, "", "ONNX"], [203, 1, 1, "", "ONNXQlinear2QDQConfig"], [203, 1, 1, "", "Options"], [203, 1, 1, "", "PostTrainingQuantConfig"], [203, 1, 1, "", "PyTorch"], [203, 1, 1, "", "QuantizationAwareTrainingConfig"], [203, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [203, 1, 1, "", "TF2ONNXConfig"], [203, 1, 1, "", "TensorFlow"], [203, 1, 1, "", "Torch2ONNXConfig"], [203, 1, 1, "", "TuningCriterion"], [203, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[205, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[206, 0, 0, "-", "sigopt"], [207, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[206, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[207, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[212, 0, 0, "-", "dataloaders"], [224, 0, 0, "-", "datasets"], [228, 0, 0, "-", "filters"], [232, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[208, 0, 0, "-", "base_dataloader"], [209, 0, 0, "-", "dataloader"], [210, 0, 0, "-", "default_dataloader"], [211, 0, 0, "-", "fetcher"], [213, 0, 0, "-", "mxnet_dataloader"], [214, 0, 0, "-", "onnxrt_dataloader"], [215, 0, 0, "-", "pytorch_dataloader"], [216, 0, 0, "-", "sampler"], [217, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[208, 1, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[209, 1, 1, "", "DataLoader"], [209, 2, 1, "", "check_dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[210, 1, 1, "", "DefaultDataLoader"], [210, 2, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[211, 1, 1, "", "Fetcher"], [211, 1, 1, "", "IndexFetcher"], [211, 1, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[213, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[214, 1, 1, "", "ONNXRTBertDataLoader"], [214, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[215, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[216, 1, 1, "", "BatchSampler"], [216, 1, 1, "", "IterableSampler"], [216, 1, 1, "", "Sampler"], [216, 1, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[217, 1, 1, "", "TFDataDataLoader"], [217, 1, 1, "", "TensorflowBertDataLoader"], [217, 1, 1, "", "TensorflowDataLoader"], [217, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[218, 0, 0, "-", "bert_dataset"], [219, 0, 0, "-", "coco_dataset"], [220, 0, 0, "-", "dataset"], [221, 0, 0, "-", "dummy_dataset"], [222, 0, 0, "-", "dummy_dataset_v2"], [223, 0, 0, "-", "imagenet_dataset"], [225, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[218, 1, 1, "", "InputFeatures"], [218, 1, 1, "", "ONNXRTBertDataset"], [218, 1, 1, "", "ParseDecodeBert"], [218, 1, 1, "", "PytorchBertDataset"], [218, 1, 1, "", "TensorflowBertDataset"], [218, 1, 1, "", "TensorflowModelZooBertDataset"], [218, 2, 1, "", "convert_examples_to_features"], [218, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[219, 1, 1, "", "COCONpy"], [219, 1, 1, "", "COCORaw"], [219, 1, 1, "", "COCORecordDataset"], [219, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[220, 1, 1, "", "CIFAR10"], [220, 1, 1, "", "CIFAR100"], [220, 1, 1, "", "Dataset"], [220, 1, 1, "", "Datasets"], [220, 1, 1, "", "FashionMNIST"], [220, 1, 1, "", "ImageFolder"], [220, 1, 1, "", "IterableDataset"], [220, 1, 1, "", "MNIST"], [220, 1, 1, "", "MXNetCIFAR10"], [220, 1, 1, "", "MXNetCIFAR100"], [220, 1, 1, "", "MXNetDatasets"], [220, 1, 1, "", "MXNetFashionMNIST"], [220, 1, 1, "", "MXNetImageFolder"], [220, 1, 1, "", "MXNetMNIST"], [220, 1, 1, "", "ONNXRTITDatasets"], [220, 1, 1, "", "ONNXRTQLDatasets"], [220, 1, 1, "", "PyTorchDatasets"], [220, 1, 1, "", "PytorchCIFAR10"], [220, 1, 1, "", "PytorchCIFAR100"], [220, 1, 1, "", "PytorchFashionMNIST"], [220, 1, 1, "", "PytorchMNIST"], [220, 1, 1, "", "PytorchMxnetWrapDataset"], [220, 1, 1, "", "PytorchMxnetWrapFunction"], [220, 1, 1, "", "Tensorflow"], [220, 1, 1, "", "TensorflowCIFAR10"], [220, 1, 1, "", "TensorflowCIFAR100"], [220, 1, 1, "", "TensorflowDatasets"], [220, 1, 1, "", "TensorflowFashionMNIST"], [220, 1, 1, "", "TensorflowImageRecord"], [220, 1, 1, "", "TensorflowMNIST"], [220, 1, 1, "", "TensorflowTFRecordDataset"], [220, 1, 1, "", "TensorflowVOCRecord"], [220, 2, 1, "", "calculate_md5"], [220, 2, 1, "", "check_integrity"], [220, 2, 1, "", "dataset_registry"], [220, 2, 1, "", "download_url"], [220, 4, 1, "", "framework_datasets"], [220, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[221, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[222, 1, 1, "", "DummyDataset"], [222, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[223, 1, 1, "", "ImagenetRaw"], [223, 1, 1, "", "MXNetImagenetRaw"], [223, 1, 1, "", "ONNXRTImagenetDataset"], [223, 1, 1, "", "PytorchImagenetRaw"], [223, 1, 1, "", "TensorflowImagenetDataset"], [223, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[225, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[226, 0, 0, "-", "coco_filter"], [227, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[226, 1, 1, "", "LabelBalanceCOCORawFilter"], [226, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[227, 1, 1, "", "FILTERS"], [227, 1, 1, "", "Filter"], [227, 1, 1, "", "MXNetFilters"], [227, 1, 1, "", "ONNXRTITFilters"], [227, 1, 1, "", "ONNXRTQLFilters"], [227, 1, 1, "", "PyTorchFilters"], [227, 1, 1, "", "TensorflowFilters"], [227, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[230, 0, 0, "-", "coco_transform"], [231, 0, 0, "-", "imagenet_transform"], [233, 0, 0, "-", "postprocess"], [234, 0, 0, "-", "tokenization"], [235, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.coco_transform": [[230, 1, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[231, 1, 1, "", "BilinearImagenetTransform"], [231, 1, 1, "", "LabelShift"], [231, 1, 1, "", "ONNXResizeCropImagenetTransform"], [231, 1, 1, "", "OnnxBilinearImagenetTransform"], [231, 1, 1, "", "ParseDecodeImagenet"], [231, 1, 1, "", "ParseDecodeImagenetTransform"], [231, 1, 1, "", "QuantizedInput"], [231, 1, 1, "", "ResizeWithAspectRatio"], [231, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [231, 1, 1, "", "TensorflowShiftRescale"], [231, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[233, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[234, 1, 1, "", "BasicTokenizer"], [234, 1, 1, "", "FullTokenizer"], [234, 1, 1, "", "WordpieceTokenizer"], [234, 2, 1, "", "convert_by_vocab"], [234, 2, 1, "", "convert_to_unicode"], [234, 2, 1, "", "load_vocab"], [234, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[235, 1, 1, "", "AlignImageChannelTransform"], [235, 1, 1, "", "BaseTransform"], [235, 1, 1, "", "CastONNXTransform"], [235, 1, 1, "", "CastPyTorchTransform"], [235, 1, 1, "", "CastTFTransform"], [235, 1, 1, "", "CenterCropTFTransform"], [235, 1, 1, "", "CenterCropTransform"], [235, 1, 1, "", "CollectTransform"], [235, 1, 1, "", "ComposeTransform"], [235, 1, 1, "", "CropResizeTFTransform"], [235, 1, 1, "", "CropResizeTransform"], [235, 1, 1, "", "CropToBoundingBox"], [235, 1, 1, "", "InputFeatures"], [235, 1, 1, "", "MXNetCropResizeTransform"], [235, 1, 1, "", "MXNetCropToBoundingBox"], [235, 1, 1, "", "MXNetNormalizeTransform"], [235, 1, 1, "", "MXNetTransforms"], [235, 1, 1, "", "MXNetTranspose"], [235, 1, 1, "", "NormalizeTFTransform"], [235, 1, 1, "", "NormalizeTransform"], [235, 1, 1, "", "ONNXRTCropToBoundingBox"], [235, 1, 1, "", "ONNXRTITTransforms"], [235, 1, 1, "", "ONNXRTQLTransforms"], [235, 1, 1, "", "PaddedCenterCropTransform"], [235, 1, 1, "", "ParseDecodeVocTransform"], [235, 1, 1, "", "PyTorchAlignImageChannel"], [235, 1, 1, "", "PyTorchCropResizeTransform"], [235, 1, 1, "", "PyTorchNormalizeTransform"], [235, 1, 1, "", "PyTorchTransforms"], [235, 1, 1, "", "PyTorchTranspose"], [235, 1, 1, "", "PytorchMxnetTransform"], [235, 1, 1, "", "PytorchMxnetWrapFunction"], [235, 1, 1, "", "RandomCropTFTransform"], [235, 1, 1, "", "RandomCropTransform"], [235, 1, 1, "", "RandomHorizontalFlip"], [235, 1, 1, "", "RandomResizedCropMXNetTransform"], [235, 1, 1, "", "RandomResizedCropPytorchTransform"], [235, 1, 1, "", "RandomResizedCropTFTransform"], [235, 1, 1, "", "RandomResizedCropTransform"], [235, 1, 1, "", "RandomVerticalFlip"], [235, 1, 1, "", "RescaleKerasPretrainTransform"], [235, 1, 1, "", "RescaleTFTransform"], [235, 1, 1, "", "RescaleTransform"], [235, 1, 1, "", "ResizeMXNetTransform"], [235, 1, 1, "", "ResizePytorchTransform"], [235, 1, 1, "", "ResizeTFTransform"], [235, 1, 1, "", "ResizeTransform"], [235, 1, 1, "", "ResizeWithRatio"], [235, 1, 1, "", "SquadExample"], [235, 1, 1, "", "TFModelZooCollectTransform"], [235, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [235, 1, 1, "", "TFSquadV1PostTransform"], [235, 1, 1, "", "TRANSFORMS"], [235, 1, 1, "", "TensorflowCropToBoundingBox"], [235, 1, 1, "", "TensorflowRandomHorizontalFlip"], [235, 1, 1, "", "TensorflowRandomVerticalFlip"], [235, 1, 1, "", "TensorflowResizeWithRatio"], [235, 1, 1, "", "TensorflowTransform"], [235, 1, 1, "", "TensorflowTransforms"], [235, 1, 1, "", "TensorflowTranspose"], [235, 1, 1, "", "TensorflowWrapFunction"], [235, 1, 1, "", "ToArray"], [235, 1, 1, "", "ToNDArrayTransform"], [235, 1, 1, "", "Transforms"], [235, 1, 1, "", "Transpose"], [235, 2, 1, "", "convert_examples_to_features"], [235, 2, 1, "", "get_final_text"], [235, 2, 1, "", "get_torchvision_map"], [235, 2, 1, "", "read_squad_examples"], [235, 2, 1, "", "transform_registry"]], "neural_compressor.experimental": [[236, 0, 0, "-", "benchmark"], [239, 0, 0, "-", "common"], [245, 0, 0, "-", "component"], [246, 0, 0, "-", "compression"], [247, 0, 0, "-", "contrib"], [272, 0, 0, "-", "data"], [277, 0, 0, "-", "distillation"], [278, 0, 0, "-", "export"], [282, 0, 0, "-", "graph_optimization"], [290, 0, 0, "-", "metric"], [292, 0, 0, "-", "mixed_precision"], [293, 0, 0, "-", "model_conversion"], [296, 0, 0, "-", "nas"], [302, 0, 0, "-", "pruner_legacy"], [306, 0, 0, "-", "pruning"], [307, 0, 0, "-", "pruning_recipes"], [311, 0, 0, "-", "pruning_v2"], [312, 0, 0, "-", "pytorch_pruner"], [319, 0, 0, "-", "quantization"], [320, 0, 0, "-", "scheduler"], [325, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[236, 1, 1, "", "Benchmark"], [236, 2, 1, "", "get_architecture"], [236, 2, 1, "", "get_bounded_threads"], [236, 2, 1, "", "get_core_ids"], [236, 2, 1, "", "get_physical_ids"], [236, 2, 1, "", "get_threads"], [236, 2, 1, "", "get_threads_per_core"], [236, 2, 1, "", "set_all_env_var"], [236, 2, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[237, 0, 0, "-", "criterion"], [238, 0, 0, "-", "dataloader"], [240, 0, 0, "-", "metric"], [241, 0, 0, "-", "model"], [242, 0, 0, "-", "optimizer"], [243, 0, 0, "-", "postprocess"], [244, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[237, 1, 1, "", "Criterions"], [237, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [237, 1, 1, "", "KnowledgeDistillationFramework"], [237, 1, 1, "", "KnowledgeDistillationLoss"], [237, 1, 1, "", "PyTorchCriterions"], [237, 1, 1, "", "PyTorchCrossEntropyLoss"], [237, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [237, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [237, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [237, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [237, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [237, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [237, 1, 1, "", "SelfKnowledgeDistillationLoss"], [237, 1, 1, "", "TensorFlowCrossEntropyLoss"], [237, 1, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [237, 1, 1, "", "TensorflowCriterions"], [237, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [237, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [237, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [237, 2, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[238, 1, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[240, 1, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[241, 1, 1, "", "Model"], [241, 2, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[242, 1, 1, "", "Optimizers"], [242, 1, 1, "", "PyTorchOptimizers"], [242, 1, 1, "", "PyTorchSGD"], [242, 1, 1, "", "TensorFlowAdam"], [242, 1, 1, "", "TensorFlowAdamW"], [242, 1, 1, "", "TensorFlowSGD"], [242, 1, 1, "", "TensorflowOptimizers"], [242, 2, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[243, 1, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[244, 2, 1, "", "get_activation"], [244, 2, 1, "", "record_output"]], "neural_compressor.experimental.component": [[245, 1, 1, "", "Component"]], "neural_compressor.experimental.contrib": [[248, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[249, 0, 0, "-", "sigopt"], [250, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[249, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[250, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[255, 0, 0, "-", "dataloaders"], [267, 0, 0, "-", "datasets"], [271, 0, 0, "-", "filters"], [274, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[251, 0, 0, "-", "base_dataloader"], [252, 0, 0, "-", "dataloader"], [253, 0, 0, "-", "default_dataloader"], [254, 0, 0, "-", "fetcher"], [256, 0, 0, "-", "mxnet_dataloader"], [257, 0, 0, "-", "onnxrt_dataloader"], [258, 0, 0, "-", "pytorch_dataloader"], [259, 0, 0, "-", "sampler"], [260, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[251, 1, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[253, 1, 1, "", "DefaultDataLoader"], [253, 2, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[254, 1, 1, "", "Fetcher"], [254, 1, 1, "", "IndexFetcher"], [254, 1, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[256, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[257, 1, 1, "", "ONNXRTBertDataLoader"], [257, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[258, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[259, 1, 1, "", "BatchSampler"], [259, 1, 1, "", "IterableSampler"], [259, 1, 1, "", "Sampler"], [259, 1, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[260, 1, 1, "", "TFDataDataLoader"], [260, 1, 1, "", "TensorflowBertDataLoader"], [260, 1, 1, "", "TensorflowDataLoader"], [260, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[261, 0, 0, "-", "bert_dataset"], [262, 0, 0, "-", "coco_dataset"], [263, 0, 0, "-", "dataset"], [264, 0, 0, "-", "dummy_dataset"], [265, 0, 0, "-", "dummy_dataset_v2"], [266, 0, 0, "-", "imagenet_dataset"], [268, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[261, 1, 1, "", "InputFeatures"], [261, 1, 1, "", "ONNXRTBertDataset"], [261, 1, 1, "", "ParseDecodeBert"], [261, 1, 1, "", "PytorchBertDataset"], [261, 1, 1, "", "TensorflowBertDataset"], [261, 1, 1, "", "TensorflowModelZooBertDataset"], [261, 2, 1, "", "convert_examples_to_features"], [261, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[262, 1, 1, "", "COCONpy"], [262, 1, 1, "", "COCORaw"], [262, 1, 1, "", "COCORecordDataset"], [262, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[263, 1, 1, "", "CIFAR10"], [263, 1, 1, "", "CIFAR100"], [263, 1, 1, "", "Dataset"], [263, 1, 1, "", "Datasets"], [263, 1, 1, "", "FashionMNIST"], [263, 1, 1, "", "ImageFolder"], [263, 1, 1, "", "IterableDataset"], [263, 1, 1, "", "MNIST"], [263, 1, 1, "", "MXNetCIFAR10"], [263, 1, 1, "", "MXNetCIFAR100"], [263, 1, 1, "", "MXNetDatasets"], [263, 1, 1, "", "MXNetFashionMNIST"], [263, 1, 1, "", "MXNetImageFolder"], [263, 1, 1, "", "MXNetMNIST"], [263, 1, 1, "", "ONNXRTITDatasets"], [263, 1, 1, "", "ONNXRTQLDatasets"], [263, 1, 1, "", "PyTorchDatasets"], [263, 1, 1, "", "PytorchCIFAR10"], [263, 1, 1, "", "PytorchCIFAR100"], [263, 1, 1, "", "PytorchFashionMNIST"], [263, 1, 1, "", "PytorchMNIST"], [263, 1, 1, "", "PytorchMxnetWrapDataset"], [263, 1, 1, "", "PytorchMxnetWrapFunction"], [263, 1, 1, "", "TensorflowCIFAR10"], [263, 1, 1, "", "TensorflowCIFAR100"], [263, 1, 1, "", "TensorflowDatasets"], [263, 1, 1, "", "TensorflowFashionMNIST"], [263, 1, 1, "", "TensorflowImageFolder"], [263, 1, 1, "", "TensorflowImageRecord"], [263, 1, 1, "", "TensorflowMNIST"], [263, 1, 1, "", "TensorflowTFRecordDataset"], [263, 1, 1, "", "TensorflowVOCRecord"], [263, 2, 1, "", "calculate_md5"], [263, 2, 1, "", "check_integrity"], [263, 2, 1, "", "dataset_registry"], [263, 2, 1, "", "download_url"], [263, 4, 1, "", "framework_datasets"], [263, 2, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[264, 1, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[265, 1, 1, "", "DummyDataset"], [265, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[266, 1, 1, "", "ImagenetRaw"], [266, 1, 1, "", "MXNetImagenetRaw"], [266, 1, 1, "", "ONNXRTImagenetDataset"], [266, 1, 1, "", "PytorchImagenetRaw"], [266, 1, 1, "", "TensorflowImagenetDataset"], [266, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[268, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[269, 0, 0, "-", "coco_filter"], [270, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[269, 1, 1, "", "LabelBalanceCOCORawFilter"], [269, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[270, 1, 1, "", "FILTERS"], [270, 1, 1, "", "Filter"], [270, 1, 1, "", "MXNetFilters"], [270, 1, 1, "", "ONNXRTITFilters"], [270, 1, 1, "", "ONNXRTQLFilters"], [270, 1, 1, "", "PyTorchFilters"], [270, 1, 1, "", "TensorflowFilters"], [270, 2, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[273, 0, 0, "-", "imagenet_transform"], [275, 0, 0, "-", "tokenization"], [276, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[273, 1, 1, "", "BilinearImagenetTransform"], [273, 1, 1, "", "LabelShift"], [273, 1, 1, "", "ONNXResizeCropImagenetTransform"], [273, 1, 1, "", "OnnxBilinearImagenetTransform"], [273, 1, 1, "", "ParseDecodeImagenet"], [273, 1, 1, "", "ParseDecodeImagenetTransform"], [273, 1, 1, "", "QuantizedInput"], [273, 1, 1, "", "ResizeWithAspectRatio"], [273, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[275, 1, 1, "", "BasicTokenizer"], [275, 1, 1, "", "FullTokenizer"], [275, 1, 1, "", "WordpieceTokenizer"], [275, 2, 1, "", "convert_by_vocab"], [275, 2, 1, "", "convert_to_unicode"], [275, 2, 1, "", "load_vocab"], [275, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[276, 1, 1, "", "AlignImageChannelTransform"], [276, 1, 1, "", "BaseTransform"], [276, 1, 1, "", "CastONNXTransform"], [276, 1, 1, "", "CastPyTorchTransform"], [276, 1, 1, "", "CastTFTransform"], [276, 1, 1, "", "CenterCropTFTransform"], [276, 1, 1, "", "CenterCropTransform"], [276, 1, 1, "", "CollectTransform"], [276, 1, 1, "", "ComposeTransform"], [276, 1, 1, "", "CropResizeTFTransform"], [276, 1, 1, "", "CropResizeTransform"], [276, 1, 1, "", "CropToBoundingBox"], [276, 1, 1, "", "InputFeatures"], [276, 1, 1, "", "MXNetCropResizeTransform"], [276, 1, 1, "", "MXNetCropToBoundingBox"], [276, 1, 1, "", "MXNetNormalizeTransform"], [276, 1, 1, "", "MXNetTransforms"], [276, 1, 1, "", "MXNetTranspose"], [276, 1, 1, "", "NormalizeTFTransform"], [276, 1, 1, "", "NormalizeTransform"], [276, 1, 1, "", "ONNXRTCropToBoundingBox"], [276, 1, 1, "", "ONNXRTITTransforms"], [276, 1, 1, "", "ONNXRTQLTransforms"], [276, 1, 1, "", "PaddedCenterCropTransform"], [276, 1, 1, "", "ParseDecodeVocTransform"], [276, 1, 1, "", "PyTorchAlignImageChannel"], [276, 1, 1, "", "PyTorchCropResizeTransform"], [276, 1, 1, "", "PyTorchNormalizeTransform"], [276, 1, 1, "", "PyTorchTransforms"], [276, 1, 1, "", "PyTorchTranspose"], [276, 1, 1, "", "PytorchMxnetTransform"], [276, 1, 1, "", "PytorchMxnetWrapFunction"], [276, 1, 1, "", "RandomCropTFTransform"], [276, 1, 1, "", "RandomCropTransform"], [276, 1, 1, "", "RandomHorizontalFlip"], [276, 1, 1, "", "RandomResizedCropMXNetTransform"], [276, 1, 1, "", "RandomResizedCropPytorchTransform"], [276, 1, 1, "", "RandomResizedCropTFTransform"], [276, 1, 1, "", "RandomResizedCropTransform"], [276, 1, 1, "", "RandomVerticalFlip"], [276, 1, 1, "", "RescaleKerasPretrainTransform"], [276, 1, 1, "", "RescaleTFTransform"], [276, 1, 1, "", "RescaleTransform"], [276, 1, 1, "", "ResizeMXNetTransform"], [276, 1, 1, "", "ResizePytorchTransform"], [276, 1, 1, "", "ResizeTFTransform"], [276, 1, 1, "", "ResizeTransform"], [276, 1, 1, "", "ResizeWithRatio"], [276, 1, 1, "", "SquadExample"], [276, 1, 1, "", "TFModelZooCollectTransform"], [276, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [276, 1, 1, "", "TFSquadV1PostTransform"], [276, 1, 1, "", "TRANSFORMS"], [276, 1, 1, "", "TensorflowCropToBoundingBox"], [276, 1, 1, "", "TensorflowRandomHorizontalFlip"], [276, 1, 1, "", "TensorflowRandomVerticalFlip"], [276, 1, 1, "", "TensorflowResizeWithRatio"], [276, 1, 1, "", "TensorflowTransform"], [276, 1, 1, "", "TensorflowTransforms"], [276, 1, 1, "", "TensorflowTranspose"], [276, 1, 1, "", "TensorflowWrapFunction"], [276, 1, 1, "", "ToArray"], [276, 1, 1, "", "ToNDArrayTransform"], [276, 1, 1, "", "Transforms"], [276, 1, 1, "", "Transpose"], [276, 2, 1, "", "convert_examples_to_features"], [276, 2, 1, "", "get_final_text"], [276, 2, 1, "", "get_torchvision_map"], [276, 2, 1, "", "read_squad_examples"], [276, 2, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[277, 1, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[277, 3, 1, "", "_epoch_ran"], [277, 3, 1, "", "best_model"], [277, 3, 1, "", "best_score"], [277, 3, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[279, 0, 0, "-", "qlinear2qdq"], [280, 0, 0, "-", "tf2onnx"], [281, 0, 0, "-", "torch2onnx"]], "neural_compressor.experimental.export.qlinear2qdq": [[279, 2, 1, "", "check_model"], [279, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[280, 2, 1, "", "tf_to_fp32_onnx"], [280, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[281, 2, 1, "", "dynamic_quant_export"], [281, 2, 1, "", "get_node_mapping"], [281, 2, 1, "", "get_quantizable_onnx_ops"], [281, 2, 1, "", "static_quant_export"], [281, 2, 1, "", "torch_to_fp32_onnx"], [281, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.experimental.graph_optimization": [[282, 1, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[284, 0, 0, "-", "bleu"], [285, 0, 0, "-", "bleu_util"], [286, 0, 0, "-", "coco_label_map"], [287, 0, 0, "-", "coco_tools"], [288, 0, 0, "-", "evaluate_squad"], [289, 0, 0, "-", "f1"], [291, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[284, 1, 1, "", "BLEU"], [284, 1, 1, "", "UnicodeRegex"], [284, 2, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[284, 3, 1, "", "labels"], [284, 3, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[284, 3, 1, "", "nondigit_punct_re"], [284, 3, 1, "", "punct_nondigit_re"], [284, 3, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[285, 2, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[287, 1, 1, "", "COCOEvalWrapper"], [287, 1, 1, "", "COCOWrapper"], [287, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [287, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [287, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[287, 3, 1, "", "dataset"], [287, 3, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[288, 2, 1, "", "evaluate"], [288, 2, 1, "", "exact_match_score"], [288, 2, 1, "", "f1_score"], [288, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[289, 2, 1, "", "evaluate"], [289, 2, 1, "", "f1_score"], [289, 2, 1, "", "metric_max_over_ground_truths"], [289, 2, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[291, 1, 1, "", "Accuracy"], [291, 1, 1, "", "BaseMetric"], [291, 1, 1, "", "COCOmAPv2"], [291, 1, 1, "", "F1"], [291, 1, 1, "", "GeneralTopK"], [291, 1, 1, "", "Loss"], [291, 1, 1, "", "MAE"], [291, 1, 1, "", "METRICS"], [291, 1, 1, "", "MSE"], [291, 1, 1, "", "MXNetMetrics"], [291, 1, 1, "", "ONNXRTGLUE"], [291, 1, 1, "", "ONNXRTITMetrics"], [291, 1, 1, "", "ONNXRTQLMetrics"], [291, 1, 1, "", "PyTorchLoss"], [291, 1, 1, "", "PyTorchMetrics"], [291, 1, 1, "", "RMSE"], [291, 1, 1, "", "ROC"], [291, 1, 1, "", "SquadF1"], [291, 1, 1, "", "TensorflowCOCOMAP"], [291, 1, 1, "", "TensorflowMAP"], [291, 1, 1, "", "TensorflowMetrics"], [291, 1, 1, "", "TensorflowTopK"], [291, 1, 1, "", "TensorflowVOCMAP"], [291, 1, 1, "", "WrapMXNetMetric"], [291, 1, 1, "", "WrapONNXRTMetric"], [291, 1, 1, "", "WrapPyTorchMetric"], [291, 1, 1, "", "mIOU"], [291, 2, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[291, 3, 1, "", "label_list"], [291, 3, 1, "", "pred_list"], [291, 3, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[291, 3, 1, "", "k"], [291, 3, 1, "", "num_correct"], [291, 3, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[291, 3, 1, "", "sample"], [291, 3, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[291, 3, 1, "", "compare_label"], [291, 3, 1, "", "label_list"], [291, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[291, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[291, 3, 1, "", "compare_label"], [291, 3, 1, "", "label_list"], [291, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[291, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[291, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[291, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[291, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[291, 3, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[291, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[291, 3, 1, "", "k"], [291, 3, 1, "", "num_correct"], [291, 3, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[292, 1, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[293, 1, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[294, 0, 0, "-", "basic_nas"], [295, 0, 0, "-", "dynas"], [297, 0, 0, "-", "nas"], [298, 0, 0, "-", "nas_utils"], [299, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[294, 1, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[295, 1, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[297, 1, 1, "", "NAS"], [297, 1, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[298, 2, 1, "", "create_search_space_pool"], [298, 2, 1, "", "find_pareto_front"], [298, 2, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[299, 1, 1, "", "BayesianOptimizationSearcher"], [299, 1, 1, "", "GridSearcher"], [299, 1, 1, "", "RandomSearcher"], [299, 1, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[300, 0, 0, "-", "gradient_sensitivity"], [301, 0, 0, "-", "group_lasso"], [303, 0, 0, "-", "magnitude"], [304, 0, 0, "-", "pattern_lock"], [305, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[300, 1, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[301, 1, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[303, 1, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[304, 1, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[305, 1, 1, "", "Pruner"], [305, 2, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[306, 1, 1, "", "Pruning"], [306, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[306, 3, 1, "", "conf"], [306, 3, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[308, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[309, 0, 0, "-", "pattern"], [310, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[309, 1, 1, "", "PATTERNS"], [309, 1, 1, "", "PatternBase"], [309, 2, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[309, 3, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[310, 1, 1, "", "TilePatternBase"], [310, 1, 1, "", "TilePattern_1x1"], [310, 1, 1, "", "TilePattern_1x16"], [310, 1, 1, "", "TilePattern_1x2"], [310, 1, 1, "", "TilePattern_2x2"], [310, 1, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[311, 1, 1, "", "Pruning"], [311, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[311, 3, 1, "", "conf"], [311, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[313, 0, 0, "-", "logger"], [314, 0, 0, "-", "patterns"], [315, 0, 0, "-", "prune_utils"], [316, 0, 0, "-", "pruner"], [317, 0, 0, "-", "pruning"], [318, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[314, 1, 1, "", "Pattern"], [314, 1, 1, "", "PatternNInM"], [314, 1, 1, "", "PatternNxM"], [314, 2, 1, "", "get_pattern"], [314, 2, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[314, 3, 1, "", "is_global"], [314, 3, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[314, 3, 1, "", "M"], [314, 3, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[314, 3, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[315, 2, 1, "", "check_config"], [315, 2, 1, "", "parse_not_to_prune"], [315, 2, 1, "", "parse_to_prune"], [315, 2, 1, "", "process_and_check_config"], [315, 2, 1, "", "process_config"], [315, 2, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[316, 1, 1, "", "MagnitudePruner"], [316, 1, 1, "", "PatternLockPruner"], [316, 1, 1, "", "Pruner"], [316, 1, 1, "", "SnipMomentumPruner"], [316, 1, 1, "", "SnipPruner"], [316, 2, 1, "", "get_pruner"], [316, 2, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[316, 3, 1, "", "config"], [316, 3, 1, "", "current_sparsity_ratio"], [316, 3, 1, "", "end_step"], [316, 3, 1, "", "global_step"], [316, 3, 1, "", "masks"], [316, 3, 1, "", "max_sparsity_ratio_per_layer"], [316, 3, 1, "", "modules"], [316, 3, 1, "", "pattern"], [316, 3, 1, "", "scheduler"], [316, 3, 1, "", "scores"], [316, 3, 1, "", "start_step"], [316, 3, 1, "", "target_sparsity_ratio"], [316, 3, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[317, 1, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[317, 3, 1, "", "config_file_path"], [317, 3, 1, "", "model"], [317, 3, 1, "", "pruner_info"], [317, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[318, 1, 1, "", "IterativeScheduler"], [318, 1, 1, "", "OneshotScheduler"], [318, 1, 1, "", "Scheduler"], [318, 2, 1, "", "get_scheduler"], [318, 2, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[318, 3, 1, "", "config"]], "neural_compressor.experimental.quantization": [[319, 1, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[320, 1, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[321, 0, 0, "-", "auto_mixed_precision"], [322, 0, 0, "-", "basic"], [323, 0, 0, "-", "bayesian"], [324, 0, 0, "-", "exhaustive"], [326, 0, 0, "-", "mse"], [327, 0, 0, "-", "mse_v2"], [328, 0, 0, "-", "random"], [329, 0, 0, "-", "strategy"], [331, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[321, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[322, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[323, 1, 1, "", "BayesianOptimization"], [323, 1, 1, "", "BayesianTuneStrategy"], [323, 1, 1, "", "TargetSpace"], [323, 2, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[324, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[326, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[327, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[328, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[329, 1, 1, "", "TuneStrategy"], [329, 2, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[330, 0, 0, "-", "constant"], [332, 0, 0, "-", "tuning_sampler"], [333, 0, 0, "-", "tuning_space"], [334, 0, 0, "-", "tuning_structs"], [335, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[332, 1, 1, "", "FallbackTuningSampler"], [332, 1, 1, "", "ModelWiseTuningSampler"], [332, 1, 1, "", "OpTypeWiseTuningSampler"], [332, 1, 1, "", "OpWiseTuningSampler"], [332, 1, 1, "", "SmoothQuantSampler"], [332, 1, 1, "", "TuningOrder"], [332, 1, 1, "", "TuningSampler"], [332, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[333, 1, 1, "", "TuningItem"], [333, 1, 1, "", "TuningSpace"], [333, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [333, 2, 1, "", "pattern_to_internal"], [333, 2, 1, "", "pattern_to_path"], [333, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[334, 1, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[335, 1, 1, "", "OrderedDefaultDict"], [335, 2, 1, "", "extract_data_type"], [335, 2, 1, "", "get_adaptor_name"], [335, 2, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[337, 0, 0, "-", "bleu"], [338, 0, 0, "-", "bleu_util"], [339, 0, 0, "-", "coco_label_map"], [340, 0, 0, "-", "coco_tools"], [341, 0, 0, "-", "evaluate_squad"], [342, 0, 0, "-", "f1"], [344, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[337, 1, 1, "", "BLEU"], [337, 1, 1, "", "UnicodeRegex"], [337, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[337, 3, 1, "", "labels"], [337, 3, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[337, 3, 1, "", "nondigit_punct_re"], [337, 3, 1, "", "punct_nondigit_re"], [337, 3, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[338, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[340, 1, 1, "", "COCOEvalWrapper"], [340, 1, 1, "", "COCOWrapper"], [340, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [340, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [340, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[340, 3, 1, "", "dataset"], [340, 3, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[341, 2, 1, "", "evaluate"], [341, 2, 1, "", "exact_match_score"], [341, 2, 1, "", "f1_score"], [341, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[342, 2, 1, "", "evaluate"], [342, 2, 1, "", "f1_score"], [342, 2, 1, "", "metric_max_over_ground_truths"], [342, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[344, 1, 1, "", "Accuracy"], [344, 1, 1, "", "BaseMetric"], [344, 1, 1, "", "COCOmAPv2"], [344, 1, 1, "", "F1"], [344, 1, 1, "", "GeneralTopK"], [344, 1, 1, "", "Loss"], [344, 1, 1, "", "MAE"], [344, 1, 1, "", "METRICS"], [344, 1, 1, "", "MSE"], [344, 1, 1, "", "MXNetMetrics"], [344, 1, 1, "", "Metric"], [344, 1, 1, "", "ONNXRTGLUE"], [344, 1, 1, "", "ONNXRTITMetrics"], [344, 1, 1, "", "ONNXRTQLMetrics"], [344, 1, 1, "", "PyTorchLoss"], [344, 1, 1, "", "PyTorchMetrics"], [344, 1, 1, "", "RMSE"], [344, 1, 1, "", "ROC"], [344, 1, 1, "", "SquadF1"], [344, 1, 1, "", "TensorflowCOCOMAP"], [344, 1, 1, "", "TensorflowMAP"], [344, 1, 1, "", "TensorflowMetrics"], [344, 1, 1, "", "TensorflowTopK"], [344, 1, 1, "", "TensorflowVOCMAP"], [344, 1, 1, "", "WrapMXNetMetric"], [344, 1, 1, "", "WrapONNXRTMetric"], [344, 1, 1, "", "WrapPyTorchMetric"], [344, 1, 1, "", "mIOU"], [344, 2, 1, "", "metric_registry"], [344, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[344, 3, 1, "", "label_list"], [344, 3, 1, "", "pred_list"], [344, 3, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[344, 3, 1, "", "k"], [344, 3, 1, "", "num_correct"], [344, 3, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[344, 3, 1, "", "sample"], [344, 3, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[344, 3, 1, "", "compare_label"], [344, 3, 1, "", "label_list"], [344, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[344, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[344, 3, 1, "", "compare_label"], [344, 3, 1, "", "label_list"], [344, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[344, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[344, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[344, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[344, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[344, 3, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[344, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[344, 3, 1, "", "k"], [344, 3, 1, "", "num_correct"], [344, 3, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[345, 2, 1, "", "fit"]], "neural_compressor.model": [[346, 0, 0, "-", "base_model"], [348, 0, 0, "-", "keras_model"], [349, 0, 0, "-", "model"], [350, 0, 0, "-", "mxnet_model"], [351, 0, 0, "-", "nets_factory"], [352, 0, 0, "-", "onnx_model"], [353, 0, 0, "-", "tensorflow_model"], [354, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[346, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[348, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[349, 1, 1, "", "Model"], [349, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[350, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[351, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[352, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[353, 1, 1, "", "TensorflowBaseModel"], [353, 1, 1, "", "TensorflowCheckpointModel"], [353, 1, 1, "", "TensorflowModel"], [353, 1, 1, "", "TensorflowQATModel"], [353, 1, 1, "", "TensorflowSavedModelModel"], [353, 2, 1, "", "checkpoint_session"], [353, 2, 1, "", "estimator_session"], [353, 2, 1, "", "frozen_pb_session"], [353, 2, 1, "", "get_model_type"], [353, 2, 1, "", "graph_def_session"], [353, 2, 1, "", "graph_session"], [353, 2, 1, "", "keras_session"], [353, 2, 1, "", "load_saved_model"], [353, 2, 1, "", "saved_model_session"], [353, 2, 1, "", "slim_session"], [353, 2, 1, "", "validate_and_inference_input_output"], [353, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[354, 1, 1, "", "IPEXModel"], [354, 1, 1, "", "PyTorchBaseModel"], [354, 1, 1, "", "PyTorchFXModel"], [354, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[355, 1, 1, "", "Accuracy"], [355, 1, 1, "", "Footprint"], [355, 1, 1, "", "ModelSize"], [355, 1, 1, "", "MultiObjective"], [355, 1, 1, "", "Objective"], [355, 1, 1, "", "Performance"], [355, 2, 1, "", "objective_custom_registry"], [355, 2, 1, "", "objective_registry"]], "neural_compressor.profiling": [[358, 0, 0, "-", "parser"], [368, 0, 0, "-", "profiler"]], "neural_compressor.profiling.parser": [[357, 0, 0, "-", "factory"], [360, 0, 0, "-", "onnx_parser"], [362, 0, 0, "-", "parser"], [363, 0, 0, "-", "result"], [365, 0, 0, "-", "tensorflow_parser"]], "neural_compressor.profiling.parser.factory": [[357, 1, 1, "", "ParserFactory"]], "neural_compressor.profiling.parser.onnx_parser": [[359, 0, 0, "-", "factory"], [361, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[359, 1, 1, "", "OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[361, 1, 1, "", "OnnxProfilingParser"]], "neural_compressor.profiling.parser.parser": [[362, 1, 1, "", "ProfilingParser"]], "neural_compressor.profiling.parser.result": [[363, 1, 1, "", "ProfilingResult"]], "neural_compressor.profiling.parser.tensorflow_parser": [[364, 0, 0, "-", "factory"], [366, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[364, 1, 1, "", "TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[366, 1, 1, "", "TensorFlowProfilingParser"]], "neural_compressor.profiling.profiler": [[367, 0, 0, "-", "factory"], [370, 0, 0, "-", "onnxrt_profiler"], [373, 0, 0, "-", "profiler"], [375, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.profiling.profiler.factory": [[367, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[369, 0, 0, "-", "factory"], [371, 0, 0, "-", "profiler"], [372, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[369, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[371, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[372, 2, 1, "", "create_onnx_config"]], "neural_compressor.profiling.profiler.profiler": [[373, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[374, 0, 0, "-", "factory"], [376, 0, 0, "-", "profiler"], [377, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[374, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[376, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[377, 2, 1, "", "create_tf_config"], [377, 2, 1, "", "delete_assign"], [377, 2, 1, "", "set_eager_execution"]], "neural_compressor.quantization": [[378, 2, 1, "", "fit"]], "neural_compressor.strategy": [[379, 0, 0, "-", "auto"], [380, 0, 0, "-", "auto_mixed_precision"], [381, 0, 0, "-", "basic"], [382, 0, 0, "-", "bayesian"], [383, 0, 0, "-", "conservative"], [384, 0, 0, "-", "exhaustive"], [385, 0, 0, "-", "hawq_v2"], [387, 0, 0, "-", "mse"], [388, 0, 0, "-", "mse_v2"], [389, 0, 0, "-", "random"], [390, 0, 0, "-", "strategy"], [392, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[379, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[380, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[381, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[382, 1, 1, "", "BayesianOptimization"], [382, 1, 1, "", "BayesianTuneStrategy"], [382, 1, 1, "", "TargetSpace"], [382, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[383, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[384, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[385, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[387, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[388, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[389, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[390, 1, 1, "", "TuneStrategy"], [390, 1, 1, "", "TuneStrategyMeta"], [390, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[391, 0, 0, "-", "constant"], [393, 0, 0, "-", "tuning_sampler"], [394, 0, 0, "-", "tuning_space"], [395, 0, 0, "-", "tuning_structs"], [396, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[393, 1, 1, "", "BlockFallbackTuningSampler"], [393, 1, 1, "", "FallbackTuningSampler"], [393, 1, 1, "", "LowerBitsSampler"], [393, 1, 1, "", "ModelWiseTuningSampler"], [393, 1, 1, "", "OpTypeWiseTuningSampler"], [393, 1, 1, "", "OpWiseTuningSampler"], [393, 1, 1, "", "SmoothQuantSampler"], [393, 1, 1, "", "TuningOrder"], [393, 1, 1, "", "TuningSampler"]], "neural_compressor.strategy.utils.tuning_space": [[394, 1, 1, "", "TuningItem"], [394, 1, 1, "", "TuningSpace"], [394, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [394, 2, 1, "", "pattern_to_internal"], [394, 2, 1, "", "pattern_to_path"], [394, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[395, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[396, 1, 1, "", "ClassRegister"], [396, 1, 1, "", "OrderedDefaultDict"], [396, 1, 1, "", "QuantOptions"], [396, 1, 1, "", "QuantType"], [396, 2, 1, "", "build_slave_faker_model"], [396, 2, 1, "", "extract_data_type"], [396, 2, 1, "", "get_adaptor_name"], [396, 2, 1, "", "preprocess_user_cfg"], [396, 2, 1, "", "reverted_data_type"]], "neural_compressor.template": [[397, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[397, 1, 1, "", "ExampleClass"], [397, 3, 1, "", "attribute1"], [397, 2, 1, "", "function1"], [397, 2, 1, "", "function2"], [397, 2, 1, "", "function3"], [397, 2, 1, "", "generator1"], [397, 4, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[397, 3, 1, "", "attr1"], [397, 3, 1, "", "attr2"], [397, 3, 1, "", "attr5"]], "neural_compressor.training": [[399, 1, 1, "", "CallBacks"], [399, 1, 1, "", "CompressionManager"], [399, 2, 1, "", "fit"], [399, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[400, 0, 0, "-", "collect_layer_histogram"], [401, 0, 0, "-", "constant"], [402, 0, 0, "-", "create_obj_from_config"], [404, 0, 0, "-", "kl_divergence"], [405, 0, 0, "-", "load_huggingface"], [406, 0, 0, "-", "logger"], [407, 0, 0, "-", "neural_insights_utils"], [408, 0, 0, "-", "options"], [409, 0, 0, "-", "pytorch"], [410, 0, 0, "-", "utility"], [411, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[400, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[402, 2, 1, "", "create_dataloader"], [402, 2, 1, "", "create_dataset"], [402, 2, 1, "", "create_eval_func"], [402, 2, 1, "", "create_train_func"], [402, 2, 1, "", "get_algorithm"], [402, 2, 1, "", "get_func_from_config"], [402, 2, 1, "", "get_metrics"], [402, 2, 1, "", "get_postprocess"], [402, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[404, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[405, 1, 1, "", "OptimizedModel"], [405, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[406, 1, 1, "", "Logger"], [406, 2, 1, "", "debug"], [406, 2, 1, "", "error"], [406, 2, 1, "", "fatal"], [406, 2, 1, "", "info"], [406, 2, 1, "", "log"], [406, 2, 1, "", "warn"], [406, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[407, 2, 1, "", "register_neural_insights_workload"], [407, 2, 1, "", "update_neural_insights_workload"], [407, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[408, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[409, 2, 1, "", "is_int8_model"], [409, 2, 1, "", "load"]], "neural_compressor.utils.utility": [[410, 1, 1, "", "CaptureOutputToFile"], [410, 1, 1, "", "CpuInfo"], [410, 2, 1, "", "Dequantize"], [410, 1, 1, "", "DotDict"], [410, 1, 1, "", "GLOBAL_STATE"], [410, 1, 1, "", "LazyImport"], [410, 1, 1, "", "MODE"], [410, 1, 1, "", "OpEntry"], [410, 1, 1, "", "Statistics"], [410, 2, 1, "", "alias_param"], [410, 2, 1, "", "calculate_mse"], [410, 2, 1, "", "combine_histogram"], [410, 2, 1, "", "compare_objects"], [410, 2, 1, "", "compute_sparsity"], [410, 2, 1, "", "dequantize_weight"], [410, 2, 1, "", "dump_class_attrs"], [410, 2, 1, "", "dump_data_to_local"], [410, 2, 1, "", "dump_elapsed_time"], [410, 2, 1, "", "dump_table"], [410, 2, 1, "", "dump_table_to_csv"], [410, 2, 1, "", "equal_dicts"], [410, 2, 1, "", "fault_tolerant_file"], [410, 2, 1, "", "get_all_fp32_data"], [410, 2, 1, "", "get_number_of_sockets"], [410, 2, 1, "", "get_op_list"], [410, 2, 1, "", "get_size"], [410, 2, 1, "", "get_tensor_histogram"], [410, 2, 1, "", "get_tensors_info"], [410, 2, 1, "", "get_tuning_history"], [410, 2, 1, "", "get_weights_details"], [410, 2, 1, "", "load_data_from_pkl"], [410, 2, 1, "", "mse_metric_gap"], [410, 2, 1, "", "print_op_list"], [410, 2, 1, "", "print_table"], [410, 2, 1, "", "recover"], [410, 2, 1, "", "set_random_seed"], [410, 2, 1, "", "set_resume_from"], [410, 2, 1, "", "set_tensorboard"], [410, 2, 1, "", "set_workspace"], [410, 2, 1, "", "show_memory_info"], [410, 2, 1, "", "singleton"], [410, 2, 1, "", "str2array"], [410, 2, 1, "", "time_limit"], [410, 2, 1, "", "version1_eq_version2"], [410, 2, 1, "", "version1_gt_version2"], [410, 2, 1, "", "version1_gte_version2"], [410, 2, 1, "", "version1_lt_version2"], [410, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[411, 1, 1, "", "WeightsDetails"], [411, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:attribute", "4": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "data", "Python data"]}, "titleterms": {"block_mask": [0, 187], "neural_compressor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "adaptor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 420, 421, 423], "modul": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 171, 172, 174, 176, 178, 179, 180, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 273, 275, 276, 277, 279, 280, 281, 282, 284, 285, 287, 288, 289, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 303, 304, 305, 306, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 332, 333, 334, 335, 337, 338, 340, 341, 342, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 357, 359, 361, 362, 363, 364, 366, 367, 369, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 393, 394, 395, 396, 397, 399, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411], "content": [1, 2, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 332, 333, 334, 335, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 359, 361, 362, 363, 364, 366, 367, 369, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 393, 394, 395, 396, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 419], "class": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 150, 153, 154, 155, 157, 160, 161, 162, 163, 164, 166, 167, 171, 172, 174, 178, 179, 180, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 202, 203, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 282, 283, 284, 287, 290, 291, 292, 293, 294, 295, 297, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 332, 333, 334, 335, 337, 340, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 359, 361, 362, 363, 364, 366, 367, 369, 371, 373, 374, 376, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 393, 394, 395, 396, 397, 399, 400, 403, 404, 405, 406, 408, 410, 411, 420], "function": [1, 13, 16, 34, 42, 43, 44, 66, 67, 69, 103, 104, 115, 117, 147, 148, 149, 150, 152, 155, 156, 158, 159, 160, 162, 165, 167, 171, 172, 174, 175, 176, 178, 180, 181, 185, 188, 194, 195, 196, 197, 198, 200, 209, 210, 218, 220, 224, 227, 228, 229, 232, 234, 235, 236, 237, 239, 241, 242, 244, 253, 261, 263, 267, 270, 271, 272, 274, 275, 276, 279, 280, 281, 284, 285, 287, 288, 289, 290, 291, 298, 305, 309, 314, 315, 316, 318, 323, 329, 333, 335, 337, 338, 340, 341, 342, 343, 344, 345, 349, 353, 355, 372, 377, 378, 382, 390, 394, 396, 397, 399, 402, 403, 405, 406, 407, 409, 410, 445], "subpackag": [2, 17, 86, 110, 111, 113, 173, 175, 204, 229, 247, 272, 283, 307, 325, 336, 386], "submodul": [2, 12, 17, 29, 50, 75, 86, 94, 100, 105, 110, 111, 113, 116, 129, 144, 151, 162, 168, 169, 173, 175, 177, 181, 188, 201, 205, 212, 224, 228, 232, 239, 248, 255, 267, 271, 274, 278, 283, 290, 296, 302, 308, 312, 325, 331, 336, 343, 347, 358, 360, 365, 368, 370, 375, 386, 392, 398, 403], "packag": [2, 29, 162, 175, 181, 188, 212, 224, 228, 229, 232, 239, 255, 267, 271, 272, 274, 283, 290, 302, 307, 308, 325, 343, 347, 386, 403, 469, 471, 473, 474], "kera": 3, "keras_util": [4, 5, 6, 7, 8, 9, 10], "conv2d": 4, "dens": 5, "depthwise_conv2d": 6, "pool2d": 8, "quantiz": [9, 41, 319, 378, 416, 419, 421, 422, 434, 438, 442, 444, 447, 450, 453, 456, 457, 465, 476, 482, 483, 484, 485, 488, 494], "separable_conv2d": 10, "mxnet": [11, 440, 455, 483, 490], "mxnet_util": [12, 13], "util": [13, 43, 147, 158, 198, 330, 331, 332, 333, 334, 335, 372, 377, 391, 392, 393, 394, 395, 396, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 425], "onnxrt": [14, 440, 455, 490], "ox_util": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], "calibr": [15, 16, 421, 438], "oper": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 421, 422], "activ": 18, "argmax": 19, "attent": 20, "binary_op": 21, "concat": 22, "conv": 23, "direct_q8": 24, "embed_layernorm": 25, "gather": 26, "gavgpool": 27, "gemm": 28, "lstm": 30, "matmul": [31, 488], "maxpool": 32, "norm": 33, "op": [34, 447], "pad": 35, "pool": 36, "reduc": 37, "resiz": 38, "split": 39, "unary_op": 40, "smooth_quant": [42, 155, 163], "pytorch": [44, 409, 440, 445, 447, 455, 483, 484, 489, 490, 494], "queri": [45, 420], "tensorflow": [46, 440, 445, 447, 455, 483, 484, 489, 490, 494], "tf_util": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], "graph_convert": 47, "graph_converter_without_calib": 48, "graph_rewrit": [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "bf16": [49, 50, 457], "bf16_convert": [49, 148], "gener": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 421], "convert_add_to_biasadd": 51, "convert_layout": 52, "convert_leakyrelu": 53, "convert_nan_to_random": 54, "convert_placeholder_to_const": 55, "dequantize_cast_optim": 56, "dilated_contract": 57, "dummy_biasadd": 58, "expanddims_optim": 59, "fetch_weight_from_reshap": 60, "fold_batch_norm": 61, "fold_const": 62, "fuse_biasadd_add": 63, "fuse_column_wise_mul": 64, "fuse_conv_with_math": 65, "fuse_decomposed_bn": 66, "fuse_decomposed_in": 67, "fuse_gelu": 68, "fuse_layer_norm": 69, "fuse_pad_with_conv": 70, "fuse_pad_with_fp32_conv": 71, "fuse_reshape_transpos": 72, "graph_cse_optim": 73, "grappler_pass": 74, "insert_print_nod": 76, "move_squeeze_after_relu": 77, "pre_optim": 78, "remove_training_nod": 79, "rename_batch_norm": 80, "split_shared_input": 81, "strip_equivalent_nod": 82, "strip_unused_nod": 83, "switch_optim": 84, "graph_bas": 85, "int8": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 447, 494], "freeze_fake_qu": 87, "freeze_valu": 88, "freeze_value_without_calib": 89, "fuse_conv_redundant_dequant": 90, "fuse_conv_requant": 91, "fuse_matmul_redundant_dequant": 92, "fuse_matmul_requant": 93, "meta_op_optim": 95, "post_hostconst_convert": 96, "post_quantized_op_cs": 97, "rnn_convert": 98, "scale_propag": 99, "onnx": [100, 101, 102, 103, 104, 424, 453, 483, 494], "onnx_graph": 101, "onnx_nod": 102, "onnx_schema": 103, "tf2onnx_util": 104, "qdq": [105, 106, 107, 108, 122, 123, 124, 125, 126, 127, 128, 129, 130, 494], "insert_qdq_pattern": 106, "merge_duplicated_qdq": 107, "share_qdq_y_pattern": 108, "graph_util": 109, "quantize_graph": [111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137], "qat": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 494], "fake_quant": 112, "quantize_config": 114, "quantize_help": 115, "quantize_lay": [116, 117, 118, 119, 120], "optimize_lay": 117, "quantize_layer_add": 118, "quantize_layer_bas": 119, "quantize_layer_bn": 120, "quantize_wrapp": 121, "fuse_qdq_bn": 122, "fuse_qdq_concatv2": 123, "fuse_qdq_conv": 124, "fuse_qdq_deconv": 125, "fuse_qdq_in": 126, "fuse_qdq_matmul": 127, "fuse_qdq_pool": 128, "optimize_qdq": 130, "quantize_graph_bas": 131, "quantize_graph_bn": 132, "quantize_graph_concatv2": 133, "quantize_graph_conv": 134, "quantize_graph_for_intel_cpu": 135, "quantize_graph_matmul": 136, "quantize_graph_pool": 137, "quantize_graph_common": 138, "smooth_quant_calibr": 139, "smooth_quant_scal": 140, "tf2onnx_convert": 141, "transform_graph": [142, 143, 144, 145, 146], "bias_correct": 142, "graph_transform_bas": 143, "insert_log": 145, "rerange_quantized_concat": 146, "torch_util": [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 244], "gptq": 149, "hawq_metr": 150, "mixed_precis": [152, 292], "model_wrapp": 153, "pattern_detector": 154, "symbolic_trac": 156, "teq": 157, "weight_onli": 159, "algorithm": [160, 161, 162, 163, 164, 438, 488, 491], "fast_bias_correct": 161, "weight_correct": 164, "benchmark": [165, 236, 428, 437, 442, 456, 482], "compress": [166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 246, 429, 485], "callback": 166, "distil": [167, 168, 277, 443, 444, 456, 482, 494], "criterion": [167, 237], "hpo": [169, 170, 171, 172], "sa_optim": 170, "search_algorithm": [171, 299], "search_spac": 172, "pruner": [174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 305, 316], "criteria": [174, 480, 491], "model_slim": [176, 177, 178, 179], "auto_slim": 176, "pattern_analyz": 178, "weight_slim": 179, "pattern": [180, 181, 182, 183, 184, 308, 309, 310, 314, 480], "base": [180, 185, 453, 492], "mha": [182, 189], "ninm": 183, "nxm": 184, "basic": [186, 322, 381, 417, 491], "pattern_lock": [190, 304], "progress": 191, "retrain_fre": 192, "sparse_gpt": 193, "prune": [194, 306, 317, 456, 480, 482, 494], "reg": 195, "schedul": [196, 318, 320, 480], "tf_criteria": 197, "conf": [199, 200, 201, 202], "config": [199, 203, 430, 440, 478], "dotdict": 200, "pythonic_config": 202, "contrib": [204, 205, 206, 207, 247, 248, 249, 250], "strategi": [205, 206, 207, 248, 249, 250, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 435, 487, 491], "sigopt": [206, 249, 487, 491], "tpe": [207, 250, 491], "data": [208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 421, 422, 442, 446], "dataload": [208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 238, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 439, 440], "base_dataload": [208, 251], "default_dataload": [210, 253], "fetcher": [211, 254], "attribut": [212, 220, 229, 263, 272, 283, 307, 347, 397, 403, 414], "mxnet_dataload": [213, 256], "onnxrt_dataload": [214, 257], "pytorch_dataload": [215, 258], "sampler": [216, 259], "tensorflow_dataload": [217, 260], "dataset": [218, 219, 220, 221, 222, 223, 224, 225, 261, 262, 263, 264, 265, 266, 267, 268, 440, 442, 451], "bert_dataset": [218, 261], "coco_dataset": [219, 262], "dummy_dataset": [221, 264], "dummy_dataset_v2": [222, 265], "imagenet_dataset": [223, 266], "style_transfer_dataset": [225, 268], "filter": [226, 227, 228, 269, 270, 271], "coco_filt": [226, 269], "transform": [230, 231, 232, 233, 234, 235, 273, 274, 275, 276, 451, 490], "coco_transform": 230, "imagenet_transform": [231, 273], "postprocess": [233, 243], "token": [234, 275], "experiment": [236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335], "common": [237, 238, 239, 240, 241, 242, 243, 244, 416, 448], "metric": [240, 284, 285, 286, 287, 288, 289, 290, 291, 337, 338, 339, 340, 341, 342, 343, 344, 451, 455], "model": [241, 346, 347, 348, 349, 350, 351, 352, 353, 354, 421, 432, 447, 450, 453, 456, 458, 465, 480, 485, 488, 494], "optim": [242, 466, 476, 479, 480, 492], "compon": 245, "export": [278, 279, 280, 281, 447, 485], "qlinear2qdq": 279, "tf2onnx": 280, "torch2onnx": 281, "graph_optim": 282, "bleu": [284, 337], "bleu_util": [285, 338], "coco_label_map": [286, 339], "coco_tool": [287, 340], "evaluate_squad": [288, 341], "f1": [289, 342], "model_convers": 293, "na": [294, 295, 296, 297, 298, 299, 417, 482], "basic_na": 294, "dyna": 295, "nas_util": 298, "pruner_legaci": [300, 301, 302, 303, 304, 305], "gradient_sensit": 300, "group_lasso": 301, "magnitud": 303, "pruning_recip": [307, 308, 309, 310], "tile_pattern": 310, "pruning_v2": 311, "pytorch_prun": [312, 313, 314, 315, 316, 317, 318], "logger": [313, 406], "prune_util": 315, "auto_mixed_precis": [321, 380], "bayesian": [323, 382, 491], "exhaust": [324, 384, 491], "mse": [326, 387, 491], "mse_v2": [327, 388, 491], "random": [328, 389, 491], "constant": [330, 391, 401], "tuning_sampl": [332, 393], "tuning_spac": [333, 394], "tuning_struct": [334, 395], "mix_precis": 345, "base_model": 346, "keras_model": 348, "mxnet_model": 350, "nets_factori": 351, "onnx_model": 352, "tensorflow_model": 353, "torch_model": 354, "object": [355, 433, 478], "profil": [356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 442], "parser": [357, 358, 359, 360, 361, 362, 363, 364, 365, 366], "factori": [357, 359, 364, 367, 369, 374], "onnx_pars": [359, 360, 361], "result": 363, "tensorflow_pars": [364, 365, 366], "onnxrt_profil": [369, 370, 371, 372], "tensorflow_profil": [374, 375, 376, 377], "auto": [379, 470, 476, 484, 488, 491], "conserv": [383, 491], "hawq_v2": [385, 491], "templat": [397, 398, 415], "api_doc_exampl": 397, "train": [399, 416, 436, 445, 456, 483], "collect_layer_histogram": 400, "create_obj_from_config": 402, "kl_diverg": 404, "load_huggingfac": 405, "neural_insights_util": 407, "option": [408, 445, 464], "weights_detail": 411, "version": 412, "intel": [413, 419, 439, 442, 452, 453, 455, 456, 462, 470, 476, 494, 495], "neural": [413, 416, 417, 419, 439, 442, 452, 453, 455, 456, 459, 463, 465, 470, 476, 480, 487, 492, 495], "compressor": [413, 416, 419, 439, 442, 452, 453, 455, 456, 470, 476, 487, 495], "document": [413, 419, 426, 495], "section": [413, 495], "contributor": [414, 415], "coven": [414, 415], "code": [414, 415, 417, 456, 477, 485, 492], "conduct": [414, 415], "our": [414, 488], "pledg": 414, "standard": 414, "respons": 414, "scope": [414, 480], "enforc": 414, "contribut": [415, 469, 473], "guidelin": 415, "pull": 415, "request": [415, 457], "checklist": 415, "support": [415, 416, 417, 420, 422, 437, 438, 439, 440, 442, 443, 444, 445, 447, 449, 452, 453, 455, 457, 458, 460, 461, 465, 466, 478, 479, 480, 482, 483, 485, 488, 489, 490, 493], "fx": 416, "introduct": [416, 417, 420, 421, 422, 437, 438, 439, 440, 442, 443, 444, 445, 447, 449, 452, 455, 457, 458, 476, 478, 479, 480, 482, 483, 485, 487, 488, 489, 490, 491, 493], "mode": [416, 494], "matrix": [416, 417, 420, 437, 438, 439, 440, 442, 443, 444, 445, 447, 449, 452, 455, 457, 458, 461, 478, 479, 480, 482, 483, 485, 488, 489, 493], "get": [416, 417, 419, 420, 437, 439, 440, 442, 443, 444, 445, 449, 450, 455, 457, 459, 470, 477, 478, 479, 480, 482, 483, 489, 493], "start": [416, 417, 419, 420, 437, 439, 440, 442, 443, 444, 445, 449, 450, 455, 457, 459, 460, 464, 470, 478, 479, 480, 482, 483, 489, 493], "post": [416, 456, 483], "static": [416, 483], "dynam": [416, 417, 483], "awar": [416, 456, 483], "exampl": [416, 417, 420, 426, 437, 439, 440, 442, 443, 444, 445, 446, 447, 455, 456, 457, 458, 461, 465, 478, 479, 480, 483, 485, 488, 489, 494], "note": [416, 486], "detail": 416, "problem": 416, "architectur": [417, 441, 452, 453], "search": [417, 476], "api": [417, 419, 420, 421, 426, 427, 437, 439, 440, 443, 444, 445, 450, 451, 455, 457, 459, 463, 477, 478, 479, 480, 482, 492], "usag": [417, 465, 476, 489, 491], "1": [417, 445, 448, 451, 456, 476, 494], "python": [417, 419, 439, 450, 455, 459, 463, 464, 471, 474, 482, 492], "yaml": [417, 421, 440, 445, 449, 493], "2": [417, 445, 448, 451, 456, 476, 494], "onli": [417, 485], "advanc": [417, 492], "custom": [417, 439, 455, 491], "secur": [418, 445], "polici": [418, 491], "report": 418, "vulner": 418, "instal": [419, 442, 453, 460, 462, 469, 470, 473], "from": [419, 421, 453, 456], "pypi": [419, 465], "select": [419, 470], "public": [419, 481], "event": [419, 481], "addit": 419, "research": 419, "collabor": 419, "work": [420, 483], "flow": [420, 483], "background": [420, 476], "ad": 420, "new": [420, 422, 471, 474, 491], "backend": [420, 483], "capabl": [420, 485], "implement": [420, 421], "onnxrtadaptor": 420, "how": [421, 422, 442], "add": 421, "an": 421, "list": [421, 446, 490], "need": 421, "design": [421, 441, 491], "framework": [421, 439, 440, 447, 449, 458, 482, 485, 488], "query_fw_cap": 421, "accord": [421, 422], "tune_cfg": 421, "prepar": [421, 442, 487], "fp32": [421, 447], "graph": 421, "run": [421, 442, 477], "sampl": [421, 450], "iter": 421, "calcul": 421, "rang": 421, "type": [422, 480], "like": 422, "int4": 422, "few": 422, "line": 422, "chang": [422, 451, 475, 477, 486], "defin": [422, 445], "abil": 422, "specif": [422, 440], "invok": 422, "kernel": 422, "tune": [422, 483, 488, 491], "configur": [422, 445, 449, 482, 487, 493], "us": [422, 439, 455], "summari": 422, "runtim": [424, 453, 483, 494], "torch": [425, 494], "mix": [431, 456, 457, 484], "precis": [431, 456, 457, 484], "refer": [438, 480, 483, 485, 488], "build": [439, 448, 455], "file": [440, 449, 493], "user": [440, 445, 451, 482, 485, 492, 493], "workflow": 441, "diagnosi": 442, "featur": [442, 445, 449, 452, 465, 466, 470, 482, 483, 489, 493], "modifi": 442, "script": 442, "see": 442, "do": [442, 459], "paramet": 442, "descript": 442, "suggest": 442, "fallback": 442, "set": [442, 462, 476], "knowledg": [443, 494], "intermedi": 443, "layer": [443, 488], "self": 443, "distribut": [445, 465, 491], "infer": 445, "evalu": 445, "pure": 445, "horovodrun": 445, "execut": 445, "releas": [446, 471, 474, 486], "appendix": 447, "frequent": 448, "ask": 448, "question": 448, "issu": [448, 486], "3": [448, 460, 476], "4": [448, 467, 476, 481], "quick": [450, 464], "valid": [450, 453, 488, 494], "incompat": [451, 486], "between": 451, "v1": 451, "face": 451, "built": [451, 453, 455], "infrastructur": 452, "linux": 453, "prerequisit": 453, "binari": 453, "sourc": 453, "ai": 453, "kit": 453, "window": 453, "system": 453, "requir": [453, 469, 473], "hardwar": [453, 457, 494], "environ": [453, 462], "cpu": [453, 462, 494], "64": 453, "compat": 453, "processor": 453, "gpu": 453, "": [453, 477], "xe": 453, "multipl": [453, 478, 494], "vendor": 453, "through": [453, 494], "softwar": [453, 457], "legal": 454, "inform": 454, "licens": 454, "citat": 454, "trademark": 454, "migrat": 456, "x": 456, "orchestr": [456, 479], "fp16": 457, "dure": [457, 484], "accuraci": [457, 483, 491], "driven": 457, "coder": [459, 463, 465, 476, 492], "what": [459, 477], "we": 459, "offer": 459, "jupyt": [459, 460, 471, 474], "lab": [459, 460], "extens": [459, 469, 470, 473, 476, 477, 494], "launcher": [459, 464], "contact": 459, "aw": 460, "amazon": 460, "sagemak": 460, "For": 460, "studio": 460, "notebook": 460, "instanc": 460, "guid": [460, 492], "bigdl": 461, "nano": 461, "platform": [462, 487], "best": [462, 470], "perform": [462, 487], "mkl": 462, "openmp": 462, "jemalloc": 462, "numa": 462, "control": 462, "variabl": 462, "frequenc": 462, "govern": 462, "enabl": [463, 470, 476], "bench": 463, "superbench": 463, "argument": 464, "v0": 467, "highlight": 467, "other": 467, "changelog": [468, 472], "neural_compressor_ext_lab": [469, 471], "uninstal": [469, 473], "develop": [469, 473], "jupyterlab": 470, "Or": 470, "let": 470, "u": 470, "help": 470, "you": 470, "pre": 470, "requisit": 470, "make": [471, 474, 477], "manual": [471, 474], "npm": [471, 474], "autom": [471, 474], "publish": [471, 474], "conda": [471, 474], "forg": [471, 474], "neural_compressor_ext_lab_alibaba": [473, 474], "log": 475, "unreleas": 475, "vscode": 476, "open": 476, "icon": 476, "5": 476, "welcom": 477, "your": 477, "v": 477, "folder": 477, "setup": 477, "up": 477, "straight": 477, "awai": 477, "explor": 477, "test": 477, "go": 477, "further": 477, "singl": 478, "One": 479, "shot": 479, "network": 480, "sparsiti": 480, "decai": 480, "regular": 480, "spars": 480, "deploy": 480, "hyperparamet": 480, "full": 481, "70": 481, "2023": 481, "17": 481, "2022": 481, "34": 481, "2021": 481, "15": [481, 494], "2018": 481, "2020": 481, "style": 482, "access": 482, "fundament": [483, 488], "scheme": 483, "ipex": 483, "approach": 483, "With": 483, "without": 483, "specifi": 483, "rule": 483, "recip": 483, "devic": 483, "turn": 484, "off": 484, "weight": 485, "known": 486, "benefit": 487, "comparison": 487, "differ": 487, "smooth": 488, "quant": 488, "per": 488, "tensor": 488, "channel": 488, "limit": 488, "smoothquant": 488, "enhanc": 488, "wise": 488, "alpha": 488, "engin": 488, "tensorboard": 489, "space": 491, "exit": 491, "process": 491, "overview": 492, "zero": 492, "topic": 492, "innov": 492, "product": 492, "12": 494, "0": 494, "ptq": 494}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"block_mask": [[0, "module-block_mask"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "Module Contents": [[1, "module-contents"], [3, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [112, "module-contents"], [114, "module-contents"], [115, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [130, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [171, "module-contents"], [172, "module-contents"], [174, "module-contents"], [176, "module-contents"], [178, "module-contents"], [179, "module-contents"], [180, "module-contents"], [182, "module-contents"], [183, "module-contents"], [184, "module-contents"], [185, "module-contents"], [186, "module-contents"], [187, "module-contents"], [189, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [194, "module-contents"], [195, "module-contents"], [196, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [200, "module-contents"], [202, "module-contents"], [203, "module-contents"], [206, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [210, "module-contents"], [211, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"], [221, "module-contents"], [222, "module-contents"], [223, "module-contents"], [225, "module-contents"], [226, "module-contents"], [227, "module-contents"], [230, "module-contents"], [231, "module-contents"], [233, "module-contents"], [234, "module-contents"], [235, "module-contents"], [236, "module-contents"], [237, "module-contents"], [238, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [244, "module-contents"], [245, "module-contents"], [249, "module-contents"], [250, "module-contents"], [251, "module-contents"], [253, "module-contents"], [254, "module-contents"], [256, "module-contents"], [257, "module-contents"], [258, "module-contents"], [259, "module-contents"], [260, "module-contents"], [261, "module-contents"], [262, "module-contents"], [263, "module-contents"], [264, "module-contents"], [265, "module-contents"], [266, "module-contents"], [268, "module-contents"], [269, "module-contents"], [270, "module-contents"], [273, "module-contents"], [275, "module-contents"], [276, "module-contents"], [277, "module-contents"], [279, "module-contents"], [280, "module-contents"], [281, "module-contents"], [282, "module-contents"], [284, "module-contents"], [285, "module-contents"], [287, "module-contents"], [288, "module-contents"], [289, "module-contents"], [291, "module-contents"], [292, "module-contents"], [293, "module-contents"], [294, "module-contents"], [295, "module-contents"], [297, "module-contents"], [298, "module-contents"], [299, "module-contents"], [300, "module-contents"], [301, "module-contents"], [303, "module-contents"], [304, "module-contents"], [305, "module-contents"], [306, "module-contents"], [309, "module-contents"], [310, "module-contents"], [311, "module-contents"], [314, "module-contents"], [315, "module-contents"], [316, "module-contents"], [317, "module-contents"], [318, "module-contents"], [319, "module-contents"], [320, "module-contents"], [321, "module-contents"], [322, "module-contents"], [323, "module-contents"], [324, "module-contents"], [326, "module-contents"], [327, "module-contents"], [328, "module-contents"], [329, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [337, "module-contents"], [338, "module-contents"], [340, "module-contents"], [341, "module-contents"], [342, "module-contents"], [344, "module-contents"], [345, "module-contents"], [346, "module-contents"], [348, "module-contents"], [349, "module-contents"], [350, "module-contents"], [351, "module-contents"], [352, "module-contents"], [353, "module-contents"], [354, "module-contents"], [355, "module-contents"], [357, "module-contents"], [359, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [366, "module-contents"], [367, "module-contents"], [369, "module-contents"], [371, "module-contents"], [372, "module-contents"], [373, "module-contents"], [374, "module-contents"], [376, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [381, "module-contents"], [382, "module-contents"], [383, "module-contents"], [384, "module-contents"], [385, "module-contents"], [387, "module-contents"], [388, "module-contents"], [389, "module-contents"], [390, "module-contents"], [393, "module-contents"], [394, "module-contents"], [395, "module-contents"], [396, "module-contents"], [397, "module-contents"], [399, "module-contents"], [400, "module-contents"], [402, "module-contents"], [404, "module-contents"], [405, "module-contents"], [406, "module-contents"], [407, "module-contents"], [408, "module-contents"], [409, "module-contents"], [410, "module-contents"], [411, "module-contents"]], "Classes": [[1, "classes"], [3, "classes"], [11, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [101, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [112, "classes"], [114, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [130, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [145, "classes"], [146, "classes"], [148, "classes"], [149, "classes"], [150, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [157, "classes"], [160, "classes"], [161, "classes"], [162, "classes"], [163, "classes"], [164, "classes"], [166, "classes"], [167, "classes"], [171, "classes"], [172, "classes"], [174, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [182, "classes"], [183, "classes"], [184, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [199, "classes"], [200, "classes"], [202, "classes"], [203, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [222, "classes"], [223, "classes"], [224, "classes"], [225, "classes"], [226, "classes"], [227, "classes"], [228, "classes"], [229, "classes"], [230, "classes"], [231, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [245, "classes"], [249, "classes"], [250, "classes"], [251, "classes"], [253, "classes"], [254, "classes"], [256, "classes"], [257, "classes"], [258, "classes"], [259, "classes"], [260, "classes"], [261, "classes"], [262, "classes"], [263, "classes"], [264, "classes"], [265, "classes"], [266, "classes"], [267, "classes"], [268, "classes"], [269, "classes"], [270, "classes"], [271, "classes"], [272, "classes"], [273, "classes"], [274, "classes"], [275, "classes"], [276, "classes"], [277, "classes"], [282, "classes"], [283, "classes"], [284, "classes"], [287, "classes"], [290, "classes"], [291, "classes"], [292, "classes"], [293, "classes"], [294, "classes"], [295, "classes"], [297, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [303, "classes"], [304, "classes"], [305, "classes"], [306, "classes"], [307, "classes"], [308, "classes"], [309, "classes"], [310, "classes"], [311, "classes"], [314, "classes"], [316, "classes"], [317, "classes"], [318, "classes"], [319, "classes"], [320, "classes"], [321, "classes"], [322, "classes"], [323, "classes"], [324, "classes"], [326, "classes"], [327, "classes"], [328, "classes"], [329, "classes"], [332, "classes"], [333, "classes"], [334, "classes"], [335, "classes"], [337, "classes"], [340, "classes"], [343, "classes"], [344, "classes"], [346, "classes"], [347, "classes"], [348, "classes"], [349, "classes"], [350, "classes"], [351, "classes"], [352, "classes"], [353, "classes"], [354, "classes"], [355, "classes"], [357, "classes"], [359, "classes"], [361, "classes"], [362, "classes"], [363, "classes"], [364, "classes"], [366, "classes"], [367, "classes"], [369, "classes"], [371, "classes"], [373, "classes"], [374, "classes"], [376, "classes"], [379, "classes"], [380, "classes"], [381, "classes"], [382, "classes"], [383, "classes"], [384, "classes"], [385, "classes"], [387, "classes"], [388, "classes"], [389, "classes"], [390, "classes"], [393, "classes"], [394, "classes"], [395, "classes"], [396, "classes"], [397, "classes"], [399, "classes"], [400, "classes"], [403, "classes"], [404, "classes"], [405, "classes"], [406, "classes"], [408, "classes"], [410, "classes"], [411, "classes"]], "Functions": [[1, "functions"], [13, "functions"], [16, "functions"], [34, "functions"], [42, "functions"], [43, "functions"], [44, "functions"], [66, "functions"], [67, "functions"], [69, "functions"], [103, "functions"], [104, "functions"], [115, "functions"], [117, "functions"], [147, "functions"], [148, "functions"], [149, "functions"], [150, "functions"], [152, "functions"], [155, "functions"], [156, "functions"], [158, "functions"], [159, "functions"], [160, "functions"], [162, "functions"], [165, "functions"], [167, "functions"], [171, "functions"], [172, "functions"], [174, "functions"], [175, "functions"], [176, "functions"], [178, "functions"], [180, "functions"], [181, "functions"], [185, "functions"], [188, "functions"], [194, "functions"], [195, "functions"], [196, "functions"], [197, "functions"], [198, "functions"], [200, "functions"], [209, "functions"], [210, "functions"], [218, "functions"], [220, "functions"], [224, "functions"], [227, "functions"], [228, "functions"], [229, "functions"], [232, "functions"], [234, "functions"], [235, "functions"], [236, "functions"], [237, "functions"], [239, "functions"], [241, "functions"], [242, "functions"], [244, "functions"], [253, "functions"], [261, "functions"], [263, "functions"], [267, "functions"], [270, "functions"], [271, "functions"], [272, "functions"], [274, "functions"], [275, "functions"], [276, "functions"], [279, "functions"], [280, "functions"], [281, "functions"], [284, "functions"], [285, "functions"], [287, "functions"], [288, "functions"], [289, "functions"], [290, "functions"], [291, "functions"], [298, "functions"], [305, "functions"], [309, "functions"], [314, "functions"], [315, "functions"], [316, "functions"], [318, "functions"], [323, "functions"], [329, "functions"], [333, "functions"], [335, "functions"], [337, "functions"], [338, "functions"], [340, "functions"], [341, "functions"], [342, "functions"], [343, "functions"], [344, "functions"], [345, "functions"], [349, "functions"], [353, "functions"], [355, "functions"], [372, "functions"], [377, "functions"], [378, "functions"], [382, "functions"], [390, "functions"], [394, "functions"], [396, "functions"], [397, "functions"], [399, "functions"], [402, "functions"], [403, "functions"], [405, "functions"], [406, "functions"], [407, "functions"], [409, "functions"], [410, "functions"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "Subpackages": [[2, "subpackages"], [17, "subpackages"], [86, "subpackages"], [110, "subpackages"], [111, "subpackages"], [113, "subpackages"], [173, "subpackages"], [175, "subpackages"], [204, "subpackages"], [229, "subpackages"], [247, "subpackages"], [272, "subpackages"], [283, "subpackages"], [307, "subpackages"], [325, "subpackages"], [336, "subpackages"], [386, "subpackages"]], "Submodules": [[2, "submodules"], [12, "submodules"], [17, "submodules"], [29, "submodules"], [50, "submodules"], [75, "submodules"], [86, "submodules"], [94, "submodules"], [100, "submodules"], [105, "submodules"], [110, "submodules"], [111, "submodules"], [113, "submodules"], [116, "submodules"], [129, "submodules"], [144, "submodules"], [151, "submodules"], [162, "submodules"], [168, "submodules"], [169, "submodules"], [173, "submodules"], [175, "submodules"], [177, "submodules"], [181, "submodules"], [188, "submodules"], [201, "submodules"], [205, "submodules"], [212, "submodules"], [224, "submodules"], [228, "submodules"], [232, "submodules"], [239, "submodules"], [248, "submodules"], [255, "submodules"], [267, "submodules"], [271, "submodules"], [274, "submodules"], [278, "submodules"], [283, "submodules"], [290, "submodules"], [296, "submodules"], [302, "submodules"], [308, "submodules"], [312, "submodules"], [325, "submodules"], [331, "submodules"], [336, "submodules"], [343, "submodules"], [347, "submodules"], [358, "submodules"], [360, "submodules"], [365, "submodules"], [368, "submodules"], [370, "submodules"], [375, "submodules"], [386, "submodules"], [392, "submodules"], [398, "submodules"], [403, "submodules"]], "Package Contents": [[2, "package-contents"], [29, "package-contents"], [162, "package-contents"], [175, "package-contents"], [181, "package-contents"], [188, "package-contents"], [212, "package-contents"], [224, "package-contents"], [228, "package-contents"], [229, "package-contents"], [232, "package-contents"], [239, "package-contents"], [255, "package-contents"], [267, "package-contents"], [271, "package-contents"], [272, "package-contents"], [274, "package-contents"], [283, "package-contents"], [290, "package-contents"], [302, "package-contents"], [307, "package-contents"], [308, "package-contents"], [325, "package-contents"], [343, "package-contents"], [347, "package-contents"], [386, "package-contents"], [403, "package-contents"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[44, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[45, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[46, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[110, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[139, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[141, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[142, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[147, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[148, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.gptq": [[149, "module-neural_compressor.adaptor.torch_utils.gptq"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[150, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[151, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[152, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[153, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[154, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[155, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[156, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.teq": [[157, "module-neural_compressor.adaptor.torch_utils.teq"]], "neural_compressor.adaptor.torch_utils.util": [[158, "module-neural_compressor.adaptor.torch_utils.util"]], "}": [[158, "id3"]], "neural_compressor.adaptor.torch_utils.weight_only": [[159, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "neural_compressor.algorithm.algorithm": [[160, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[161, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[162, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[163, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[164, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[165, "module-neural_compressor.benchmark"]], "neural_compressor.compression.callbacks": [[166, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[167, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[168, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression.hpo": [[169, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[170, "module-neural_compressor.compression.hpo.sa_optimizer"]], "neural_compressor.compression.hpo.search_algorithms": [[171, "module-neural_compressor.compression.hpo.search_algorithms"]], "neural_compressor.compression.hpo.search_space": [[172, "module-neural_compressor.compression.hpo.search_space"]], "neural_compressor.compression": [[173, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[174, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner": [[175, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[176, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "neural_compressor.compression.pruner.model_slim": [[177, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[178, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[179, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns.base": [[180, "module-neural_compressor.compression.pruner.patterns.base"]], "neural_compressor.compression.pruner.patterns": [[181, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.patterns.mha": [[182, "module-neural_compressor.compression.pruner.patterns.mha"]], "neural_compressor.compression.pruner.patterns.ninm": [[183, "module-neural_compressor.compression.pruner.patterns.ninm"]], "neural_compressor.compression.pruner.patterns.nxm": [[184, "module-neural_compressor.compression.pruner.patterns.nxm"]], "neural_compressor.compression.pruner.pruners.base": [[185, "module-neural_compressor.compression.pruner.pruners.base"]], "neural_compressor.compression.pruner.pruners.basic": [[186, "module-neural_compressor.compression.pruner.pruners.basic"]], "neural_compressor.compression.pruner.pruners.block_mask": [[187, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "neural_compressor.compression.pruner.pruners": [[188, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.pruners.mha": [[189, "module-neural_compressor.compression.pruner.pruners.mha"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[190, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "neural_compressor.compression.pruner.pruners.progressive": [[191, "module-neural_compressor.compression.pruner.pruners.progressive"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[192, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[193, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"]], "neural_compressor.compression.pruner.pruning": [[194, "module-neural_compressor.compression.pruner.pruning"]], "neural_compressor.compression.pruner.regs": [[195, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[196, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.tf_criteria": [[197, "module-neural_compressor.compression.pruner.tf_criteria"]], "neural_compressor.compression.pruner.utils": [[198, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.conf.config": [[199, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[200, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[201, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[202, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[203, "module-neural_compressor.config"]], "neural_compressor.contrib": [[204, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[205, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[206, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[207, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[208, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[209, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[210, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[211, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[212, "module-neural_compressor.data.dataloaders"]], "Attributes": [[212, "attributes"], [220, "attributes"], [229, "attributes"], [263, "attributes"], [272, "attributes"], [283, "attributes"], [307, "attributes"], [347, "attributes"], [397, "attributes"], [403, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[213, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[214, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[215, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[216, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[217, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[218, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[219, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[220, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[221, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[222, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[223, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[224, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[225, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[226, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[227, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[228, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[229, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[230, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[231, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[232, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[233, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[234, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[235, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[236, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[237, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[238, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[239, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[240, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[241, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[242, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[243, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[244, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[245, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[246, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[247, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[248, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[249, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[250, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[251, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[252, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[253, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[254, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[255, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[256, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[257, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[258, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[259, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[260, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[261, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[262, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[263, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[264, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[265, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[266, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[267, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[268, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[269, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[270, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[271, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[272, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[273, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[274, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[275, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[276, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[277, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[278, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[279, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[280, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[281, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.graph_optimization": [[282, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[283, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[284, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[285, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[286, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[287, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[288, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[289, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[290, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[291, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[292, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[293, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[294, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[295, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[296, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[297, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[298, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[299, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[300, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[301, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[302, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[303, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[304, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[305, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[306, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[307, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[308, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[309, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[310, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[311, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[312, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[313, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[314, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[315, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[316, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[317, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[318, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[319, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[320, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[321, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[322, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[323, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[324, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[325, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.mse": [[326, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[327, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[328, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[329, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils.constant": [[330, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[331, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[332, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[333, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[334, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[335, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor": [[336, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[337, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[338, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[339, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[340, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[341, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[342, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[343, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[344, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[345, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[346, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[347, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[348, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[349, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[350, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[351, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[352, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[353, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[354, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[355, "module-neural_compressor.objective"]], "neural_compressor.profiling": [[356, "module-neural_compressor.profiling"]], "neural_compressor.profiling.parser.factory": [[357, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[358, "module-neural_compressor.profiling.parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[359, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[360, "module-neural_compressor.profiling.parser.onnx_parser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[361, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "neural_compressor.profiling.parser.parser": [[362, "module-neural_compressor.profiling.parser.parser"]], "neural_compressor.profiling.parser.result": [[363, "module-neural_compressor.profiling.parser.result"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[364, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[365, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[366, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "neural_compressor.profiling.profiler.factory": [[367, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[368, "module-neural_compressor.profiling.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[369, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[370, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[371, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[372, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "neural_compressor.profiling.profiler.profiler": [[373, "module-neural_compressor.profiling.profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[374, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[375, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[376, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[377, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "neural_compressor.quantization": [[378, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[379, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[380, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[381, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[382, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[383, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[384, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[385, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[386, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[387, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[388, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[389, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[390, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[391, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[392, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[393, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[394, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[395, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[396, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[397, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[398, "module-neural_compressor.template"]], "neural_compressor.training": [[399, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[400, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[401, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[402, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[403, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[404, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[405, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[406, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[407, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[408, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[409, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[410, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[411, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[412, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[413, "intel-neural-compressor-documentation"], [495, "intel-neural-compressor-documentation"]], "Sections": [[413, "sections"], [495, "sections"]], "Contributor Covenant Code of Conduct": [[414, "contributor-covenant-code-of-conduct"], [415, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[414, "our-pledge"]], "Our Standards": [[414, "our-standards"]], "Our Responsibilities": [[414, "our-responsibilities"]], "Scope": [[414, "scope"]], "Enforcement": [[414, "enforcement"]], "Attribution": [[414, "attribution"]], "Contribution Guidelines": [[415, "contribution-guidelines"]], "Pull Request Checklist": [[415, "pull-request-checklist"]], "Pull Request Template": [[415, "pull-request-template"]], "Support": [[415, "support"]], "FX": [[416, "fx"]], "Introduction": [[416, "introduction"], [417, "introduction"], [420, "introduction"], [421, "introduction"], [422, "introduction"], [437, "introduction"], [438, "introduction"], [439, "introduction"], [440, "introduction"], [443, "introduction"], [444, "introduction"], [445, "introduction"], [447, "introduction"], [449, "introduction"], [452, "introduction"], [455, "introduction"], [457, "introduction"], [458, "introduction"], [478, "introduction"], [479, "introduction"], [480, "introduction"], [482, "introduction"], [485, "introduction"], [487, "introduction"], [488, "introduction"], [489, "introduction"], [490, "introduction"], [491, "introduction"], [493, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[416, "fx-mode-support-matrix-in-neural-compressor"]], "Get Started": [[416, "get-started"], [483, "get-started"]], "Post Training Static Quantization": [[416, "post-training-static-quantization"], [483, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[416, "post-training-dynamic-quantization"], [483, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[416, "quantization-aware-training"]], "Examples": [[416, "examples"], [417, "examples"], [437, "examples"], [439, "examples"], [440, "examples"], [443, "examples"], [444, "examples"], [445, "examples"], [446, "examples"], [447, "examples"], [456, "examples"], [457, "examples"], [458, "examples"], [479, "examples"], [480, "examples"], [483, "examples"], [485, "examples"], [489, "examples"]], "Note": [[416, "note"]], "Details": [[416, "details"]], "Common Problem": [[416, "common-problem"]], "Dynamic Quantization": [[416, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[416, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[417, "neural-architecture-search"]], "Basic NAS": [[417, "basic-nas"]], "Dynamic NAS": [[417, "dynamic-nas"]], "NAS Support Matrix": [[417, "nas-support-matrix"]], "Get Started with NAS API": [[417, "get-started-with-nas-api"]], "Basic Usage": [[417, "basic-usage"]], "1. Python code + YAML": [[417, "python-code-yaml"]], "2. Python code only": [[417, "python-code-only"]], "Advanced Usage (Custom NAS)": [[417, "advanced-usage-custom-nas"]], "Security Policy": [[418, "security-policy"]], "Report a Vulnerability": [[418, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[419, "intel-neural-compressor"], [476, "intel-neural-compressor"]], "Installation": [[419, "installation"], [453, "installation"], [470, "installation"]], "Install from pypi": [[419, "install-from-pypi"]], "Getting Started": [[419, "getting-started"], [450, "getting-started"]], "Quantization with Python API": [[419, "quantization-with-python-api"], [450, "quantization-with-python-api"]], "Documentation": [[419, "documentation"]], "Selected Publications/Events": [[419, "selected-publications-events"]], "Additional Content": [[419, "additional-content"]], "Research Collaborations": [[419, "research-collaborations"]], "Adaptor": [[420, "adaptor"], [423, "adaptor"]], "Adaptor Support Matrix": [[420, "adaptor-support-matrix"]], "Working Flow": [[420, "working-flow"], [483, "working-flow"]], "Get Started with Adaptor API": [[420, "get-started-with-adaptor-api"]], "Query API": [[420, "query-api"]], "Background": [[420, "background"]], "Query API Introduction": [[420, "query-api-introduction"]], "Example of Adding a New Backend Support": [[420, "example-of-adding-a-new-backend-support"]], "Capability": [[420, "capability"]], "Implement ONNXRTAdaptor Class": [[420, "implement-onnxrtadaptor-class"]], "How to Add An Adaptor": [[421, "how-to-add-an-adaptor"]], "API List that Need to Implement": [[421, "api-list-that-need-to-implement"]], "Design the framework YAML": [[421, "design-the-framework-yaml"]], "Add query_fw_capability to Adaptor": [[421, "add-query-fw-capability-to-adaptor"]], "Add quantize API according to tune_cfg": [[421, "add-quantize-api-according-to-tune-cfg"]], "Prepare calibration model from fp32 graph": [[421, "prepare-calibration-model-from-fp32-graph"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[421, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Calculate the data range and generate quantized model": [[421, "calculate-the-data-range-and-generate-quantized-model"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[422, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "Define the Quantization Ability of the Specific Operator": [[422, "define-the-quantization-ability-of-the-specific-operator"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[422, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Use the New Data Type": [[422, "use-the-new-data-type"]], "Summary": [[422, "summary"]], "ONNX Runtime": [[424, "onnx-runtime"]], "Torch Utils": [[425, "torch-utils"]], "API Document Example": [[426, "api-document-example"]], "APIs": [[427, "apis"]], "Benchmark": [[428, "benchmark"], [456, "benchmark"], [482, "benchmark"]], "Compression": [[429, "compression"]], "Config": [[430, "config"]], "Mix Precision": [[431, "mix-precision"], [456, "mix-precision"]], "Model": [[432, "model"], [458, "model"]], "Objective": [[433, "objective"], [478, "objective"]], "Quantization": [[434, "quantization"], [482, "quantization"], [483, "quantization"]], "Strategy": [[435, "strategy"]], "Training": [[436, "training"]], "Benchmarking": [[437, "benchmarking"]], "Benchmark Support Matrix": [[437, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[437, "get-started-with-benchmark-api"]], "Calibration Algorithms in Quantization": [[438, "calibration-algorithms-in-quantization"]], "Calibration Algorithms": [[438, "calibration-algorithms"]], "Support Matrix": [[438, "support-matrix"], [461, "support-matrix"]], "Reference": [[438, "reference"], [480, "reference"], [483, "reference"], [485, "reference"], [488, "reference"]], "DataLoader": [[439, "dataloader"]], "Supported Framework Dataloader Matrix": [[439, "supported-framework-dataloader-matrix"]], "Get Started with DataLoader": [[439, "get-started-with-dataloader"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[439, "use-intel-neural-compressor-dataloader-api"]], "Build Custom Dataloader with Python API": [[439, "build-custom-dataloader-with-python-api"]], "Dataset": [[440, "dataset"]], "Supported Framework Dataset Matrix": [[440, "supported-framework-dataset-matrix"]], "TensorFlow": [[440, "tensorflow"], [455, "tensorflow"], [490, "tensorflow"]], "PyTorch": [[440, "pytorch"], [455, "pytorch"], [484, "pytorch"]], "MXNet": [[440, "mxnet"], [455, "mxnet"], [490, "mxnet"]], "ONNXRT": [[440, "onnxrt"], [455, "onnxrt"], [490, "onnxrt"]], "Get start with Dataset API": [[440, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[440, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[440, "user-specific-dataset"]], "Design": [[441, "design"], [491, "design"], [491, "id1"], [491, "id3"], [491, "id5"], [491, "id7"], [491, "id9"], [491, "id11"], [491, "id13"], [491, "id15"], [491, "id17"], [491, "id19"], [491, "id21"]], "Architecture": [[441, "architecture"], [452, "architecture"]], "Workflow": [[441, "workflow"]], "Diagnosis": [[442, "diagnosis"]], "Diagnosis introduction": [[442, "diagnosis-introduction"]], "Supported feature matrix": [[442, "supported-feature-matrix"]], "Get started": [[442, "get-started"]], "Install Intel\u00ae Neural Compressor": [[442, "install-intel-neural-compressor"]], "Modify script": [[442, "modify-script"]], "Quantization diagnosis": [[442, "quantization-diagnosis"]], "Benchmark diagnosis": [[442, "benchmark-diagnosis"]], "Example": [[442, "example"], [455, "example"], [461, "example"], [465, "example"], [478, "example"], [488, "example"]], "Prepare dataset": [[442, "prepare-dataset"]], "Run quantization script": [[442, "run-quantization-script"]], "Run benchmark script": [[442, "run-benchmark-script"]], "See quantization data": [[442, "see-quantization-data"]], "How to do diagnosis": [[442, "how-to-do-diagnosis"]], "Parameter description": [[442, "parameter-description"]], "Diagnosis suggestions": [[442, "diagnosis-suggestions"]], "Fallback setting example": [[442, "fallback-setting-example"]], "See profiling data": [[442, "see-profiling-data"]], "Distillation": [[443, "distillation"], [456, "distillation"], [482, "distillation"]], "Knowledge Distillation": [[443, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[443, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[443, "self-distillation"]], "Distillation Support Matrix": [[443, "distillation-support-matrix"]], "Get Started with Distillation API": [[443, "get-started-with-distillation-api"]], "Distillation for Quantization": [[444, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[444, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[444, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[445, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[445, "supported-feature-matrix"], [449, "supported-feature-matrix"], [452, "supported-feature-matrix"], [482, "supported-feature-matrix"], [483, "supported-feature-matrix"], [489, "supported-feature-matrix"], [493, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[445, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[445, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[445, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[445, "horovodrun-execution"]], "Security": [[445, "security"]], "PyTorch Examples:": [[445, "pytorch-examples"]], "TensorFlow Examples:": [[445, "tensorflow-examples"]], "Example List": [[446, "example-list"]], "Release Data": [[446, "release-data"]], "Export": [[447, "export"]], "Supported Framework Model Matrix": [[447, "supported-framework-model-matrix"], [458, "supported-framework-model-matrix"], [485, "supported-framework-model-matrix"]], "PyTorch Model": [[447, "pytorch-model"]], "FP32 Model Export": [[447, "fp32-model-export"], [447, "id1"]], "INT8 Model Export": [[447, "int8-model-export"], [447, "id2"]], "Tensorflow Model": [[447, "tensorflow-model"]], "Appendix": [[447, "appendix"]], "Supported quantized ops": [[447, "supported-quantized-ops"]], "Frequently Asked Questions": [[448, "frequently-asked-questions"]], "Common Build Issues": [[448, "common-build-issues"]], "Issue 1:": [[448, "issue-1"]], "Issue 2:": [[448, "issue-2"]], "Issue 3:": [[448, "issue-3"]], "Issue 4:": [[448, "issue-4"]], "Framework YAML Configuration Files": [[449, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[449, "get-started-with-framework-yaml-files"]], "Quick Samples": [[450, "quick-samples"]], "Validated Models": [[450, "validated-models"], [488, "validated-models"], [494, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[451, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[451, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[451, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[452, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[453, "linux-installation"]], "Prerequisites": [[453, "prerequisites"], [453, "id1"]], "Install from Binary": [[453, "install-from-binary"], [453, "id2"]], "Install from Source": [[453, "install-from-source"], [453, "id3"]], "Install from AI Kit": [[453, "install-from-ai-kit"]], "Windows Installation": [[453, "windows-installation"]], "System Requirements": [[453, "system-requirements"]], "Validated Hardware Environment": [[453, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[453, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[453, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[453, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[453, "validated-software-environment"]], "Legal Information": [[454, "legal-information"]], "License": [[454, "license"]], "Citation": [[454, "citation"]], "Trademarks": [[454, "trademarks"]], "Metrics": [[455, "metrics"]], "Supported Built-in Metric Matrix": [[455, "supported-built-in-metric-matrix"]], "Get Started with Metric": [[455, "get-started-with-metric"]], "Use Intel\u00ae Neural Compressor Metric API": [[455, "use-intel-neural-compressor-metric-api"]], "Build Custom Metric with Python API": [[455, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[456, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[456, "model-quantization"]], "Post-training Quantization": [[456, "post-training-quantization"]], "Quantization Aware Training": [[456, "quantization-aware-training"], [483, "quantization-aware-training"], [483, "id1"]], "Pruning": [[456, "pruning"], [480, "pruning"], [482, "pruning"]], "Orchestration": [[456, "orchestration"]], "Mixed Precision": [[457, "mixed-precision"]], "Mixed Precision Support Matrix": [[457, "mixed-precision-support-matrix"]], "Hardware and Software requests for BF16": [[457, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[457, "hardware-and-software-requests-for-fp16"]], "During quantization mixed precision": [[457, "during-quantization-mixed-precision"]], "Accuracy-driven mixed precision": [[457, "accuracy-driven-mixed-precision"]], "Get Started with Mixed Precision API": [[457, "get-started-with-mixed-precision-api"]], "Neural Coder": [[459, "neural-coder"], [476, "neural-coder"], [476, "id1"]], "What do we offer?": [[459, "what-do-we-offer"]], "Getting Started!": [[459, "getting-started"], [470, "getting-started"]], "Jupyter Lab Extension": [[459, "jupyter-lab-extension"]], "Python Launcher": [[459, "python-launcher"], [464, "python-launcher"]], "Python API": [[459, "python-api"]], "Contact": [[459, "contact"]], "AWS Amazon SageMaker Support": [[460, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[460, "start-jupyter-lab-3"]], "For SageMaker Studio": [[460, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[460, "for-sagemaker-notebook-instance"]], "Installation Guide": [[460, "installation-guide"]], "BigDL Nano Support": [[461, "bigdl-nano-support"]], "Intel CPU Platforms: Best Performance Setting": [[462, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[462, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[462, "install-numa-controller"]], "Environment Variables": [[462, "environment-variables"]], "Frequency Governers": [[462, "frequency-governers"]], "Neural Coder as Python API": [[463, "neural-coder-as-python-api"]], "Enable": [[463, "enable"]], "Bench": [[463, "bench"]], "SuperBench": [[463, "superbench"]], "Quick-Start": [[464, "quick-start"]], "Launcher Arguments (Optional)": [[464, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[465, "neural-coder-for-quantization"]], "Features Supported": [[465, "features-supported"]], "Models Supported": [[465, "models-supported"]], "Usage": [[465, "usage"], [489, "usage"], [489, "id1"], [491, "usage"], [491, "id2"], [491, "id4"], [491, "id6"], [491, "id8"], [491, "id10"], [491, "id12"], [491, "id14"], [491, "id16"], [491, "id18"], [491, "id20"], [491, "id22"]], "PyPI distribution:": [[465, "pypi-distribution"]], "Supported Optimization Features": [[466, "supported-optimization-features"]], "v0.4": [[467, "v0-4"]], "Highlights": [[467, "highlights"]], "Others": [[467, "others"]], "Changelog": [[468, "changelog"], [472, "changelog"]], "neural_compressor_ext_lab": [[469, "neural-compressor-ext-lab"]], "Requirements": [[469, "requirements"], [473, "requirements"]], "Install": [[469, "install"], [473, "install"]], "Uninstall": [[469, "uninstall"], [473, "uninstall"]], "Contributing": [[469, "contributing"], [473, "contributing"]], "Development install": [[469, "development-install"], [473, "development-install"]], "Development uninstall": [[469, "development-uninstall"], [473, "development-uninstall"]], "Packaging the extension": [[469, "packaging-the-extension"], [473, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[470, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[470, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[470, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[470, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[471, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[471, "manual-release"], [474, "manual-release"]], "Python package": [[471, "python-package"], [474, "python-package"]], "NPM package": [[471, "npm-package"], [474, "npm-package"]], "Automated releases with the Jupyter Releaser": [[471, "automated-releases-with-the-jupyter-releaser"], [474, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[471, "publishing-to-conda-forge"], [474, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[473, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[474, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[475, "change-log"]], "[Unreleased]": [[475, "unreleased"]], "Background Introduction": [[476, "background-introduction"]], "Neural Coder Extension in VSCode": [[476, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[476, "neural-coder-extension-usage"]], "1. Open": [[476, "open"]], "2. Search": [[476, "search"]], "3. Setting": [[476, "setting"]], "4. Icon": [[476, "icon"]], "5. optimization (quantization)": [[476, "optimization-quantization"]], "5.1 Enable": [[476, "enable"]], "5.2 Auto": [[476, "auto"]], "Welcome to your VS Code Extension": [[477, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[477, "what-s-in-the-folder"]], "Setup": [[477, "setup"]], "Get up and running straight away": [[477, "get-up-and-running-straight-away"]], "Make changes": [[477, "make-changes"]], "Explore the API": [[477, "explore-the-api"]], "Run tests": [[477, "run-tests"]], "Go further": [[477, "go-further"]], "Single Objective": [[478, "single-objective"]], "Multiple Objectives": [[478, "multiple-objectives"]], "Objective Support Matrix": [[478, "objective-support-matrix"]], "Get Started with Objective API": [[478, "get-started-with-objective-api"]], "Config Single Objective": [[478, "config-single-objective"]], "Config Multiple Objectives": [[478, "config-multiple-objectives"]], "Optimization Orchestration": [[479, "optimization-orchestration"]], "One-shot": [[479, "one-shot"]], "Orchestration Support Matrix": [[479, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[479, "get-started-with-orchestration-api"]], "Neural Network Pruning": [[480, "neural-network-pruning"]], "Pruning Patterns": [[480, "pruning-patterns"]], "Pruning Criteria": [[480, "pruning-criteria"]], "Pruning Types": [[480, "pruning-types"]], "Pruning Schedules": [[480, "pruning-schedules"]], "Pruning Scope": [[480, "pruning-scope"]], "Sparsity Decay Types": [[480, "sparsity-decay-types"]], "Regularization": [[480, "regularization"]], "Pruning Support Matrix": [[480, "pruning-support-matrix"]], "Get Started with Pruning API": [[480, "get-started-with-pruning-api"]], "Sparse Model Deployment": [[480, "sparse-model-deployment"]], "Pruning with Hyperparameter Optimization": [[480, "pruning-with-hyperparameter-optimization"]], "Full Publications/Events (70)": [[481, "full-publications-events-70"]], "2023 (17)": [[481, "id1"]], "2022 (34)": [[481, "id2"]], "2021 (15)": [[481, "id3"]], "2018 - 2020 (4)": [[481, "id4"]], "Pythonic Style Access for Configurations": [[482, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[482, "pythonic-api-for-user-configurations"], [482, "id1"]], "Pythonic API for Framework Configurations": [[482, "pythonic-api-for-framework-configurations"], [482, "id2"]], "Get Started with Pythonic API for Configurations": [[482, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[482, "nas"]], "Quantization Introduction": [[483, "quantization-introduction"]], "Quantization Fundamentals": [[483, "quantization-fundamentals"], [488, "quantization-fundamentals"]], "Quantization Support Matrix": [[483, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[483, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[483, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[483, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[483, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[483, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[483, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[483, "with-or-without-accuracy-aware-tuning"]], "Post Training Quantization": [[483, "post-training-quantization"]], "Specify Quantization Rules": [[483, "specify-quantization-rules"]], "Specify Quantization Recipes": [[483, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[483, "specify-quantization-backend-and-device"]], "Turn OFF Auto Mixed Precision during Quantization": [[484, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[484, "tensorflow"]], "Weight Only Quantization": [[485, "weight-only-quantization"]], "Quantization Capability:": [[485, "quantization-capability"]], "Export Compressed Model": [[485, "export-compressed-model"]], "User code:": [[485, "user-code"]], "Release": [[486, "release"]], "Release Notes": [[486, "release-notes"]], "Known Issues": [[486, "known-issues"]], "Incompatible Changes": [[486, "incompatible-changes"]], "SigOpt Strategy": [[487, "sigopt-strategy"]], "Preparation": [[487, "preparation"]], "SigOpt Platform": [[487, "sigopt-platform"]], "Neural Compressor Configuration": [[487, "neural-compressor-configuration"]], "Performance": [[487, "performance"]], "Benefit of SigOpt Strategy": [[487, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[487, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[488, "smooth-quant"]], "Per-tensor & Per-channel": [[488, "per-tensor-per-channel"]], "Per-tensor example": [[488, "per-tensor-example"]], "Per-channel example": [[488, "per-channel-example"]], "Matmul quantization example": [[488, "matmul-quantization-example"]], "Per-channel limitation": [[488, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[488, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[488, "smoothquant"]], "Our enhancement:": [[488, "our-enhancement"]], "Algorithm: Layer-wise Auto-tuning of $\\alpha$.": [[488, "algorithm-layer-wise-auto-tuning-of-alpha"]], "Engineering": [[488, "engineering"]], "Supported Framework Matrix": [[488, "supported-framework-matrix"]], "TensorBoard": [[489, "tensorboard"]], "Get Started with TensorBoard": [[489, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[489, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[489, "tensorflow-tensorboard"]], "PyTorch Examples": [[489, "pytorch-examples"]], "TensorFlow Examples": [[489, "tensorflow-examples"]], "Transform": [[490, "transform"]], "Transform Support List": [[490, "transform-support-list"]], "Pytorch": [[490, "pytorch"]], "Tuning Strategies": [[491, "tuning-strategies"]], "Strategy Design": [[491, "strategy-design"]], "Tuning Space": [[491, "tuning-space"]], "Exit Policy": [[491, "exit-policy"]], "Accuracy Criteria": [[491, "accuracy-criteria"]], "Tuning Process": [[491, "tuning-process"]], "Tuning Algorithms": [[491, "tuning-algorithms"]], "Auto": [[491, "auto"]], "Conservative Tuning": [[491, "conservative-tuning"]], "Basic": [[491, "basic"]], "MSE": [[491, "mse"]], "MSE_V2": [[491, "mse-v2"]], "HAWQ_V2": [[491, "hawq-v2"]], "Bayesian": [[491, "bayesian"]], "Exhaustive": [[491, "exhaustive"]], "Random": [[491, "random"]], "SigOpt": [[491, "sigopt"]], "TPE": [[491, "tpe"]], "Distributed Tuning": [[491, "distributed-tuning"]], "Customize a New Tuning Strategy": [[491, "customize-a-new-tuning-strategy"]], "User Guide": [[492, "user-guide"]], "Overview": [[492, "overview"]], "Python-based APIs": [[492, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[492, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[492, "advanced-topics"]], "Innovations for Productivity": [[492, "innovations-for-productivity"]], "User YAML Configuration Files": [[493, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[493, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[494, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.12.0": [[494, "tensorflow-models-with-intel-tensorflow-2-12-0"]], "TensorFlow Models with Intel\u00ae Extension for TensorFlow* 1.2.0": [[494, "tensorflow-models-with-intel-extension-for-tensorflow-1-2-0"]], "PyTorch Models with Torch 2.0.1+cpu in PTQ Mode": [[494, "pytorch-models-with-torch-2-0-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.0.1+cpu in QAT Mode": [[494, "pytorch-models-with-torch-2-0-1-cpu-in-qat-mode"]], "PyTorch Models with Intel\u00ae Extension for PyTorch* 2.0.1+cpu": [[494, "pytorch-models-with-intel-extension-for-pytorch-2-0-1-cpu"]], "ONNX Models with ONNX Runtime 1.15.0": [[494, "onnx-models-with-onnx-runtime-1-15-0"]], "Validated Pruning Examples": [[494, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[494, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[494, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"block_mask": [[0, "module-block_mask"]], "module": [[0, "module-block_mask"], [1, "module-neural_compressor.adaptor.adaptor"], [2, "module-neural_compressor.adaptor"], [3, "module-neural_compressor.adaptor.keras"], [4, "module-neural_compressor.adaptor.keras_utils.conv2d"], [5, "module-neural_compressor.adaptor.keras_utils.dense"], [6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"], [7, "module-neural_compressor.adaptor.keras_utils"], [8, "module-neural_compressor.adaptor.keras_utils.pool2d"], [9, "module-neural_compressor.adaptor.keras_utils.quantizer"], [10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"], [11, "module-neural_compressor.adaptor.mxnet"], [12, "module-neural_compressor.adaptor.mxnet_utils"], [13, "module-neural_compressor.adaptor.mxnet_utils.util"], [14, "module-neural_compressor.adaptor.onnxrt"], [15, "module-neural_compressor.adaptor.ox_utils.calibration"], [16, "module-neural_compressor.adaptor.ox_utils.calibrator"], [17, "module-neural_compressor.adaptor.ox_utils"], [18, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [20, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [22, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [23, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [26, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [29, "module-neural_compressor.adaptor.ox_utils.operators"], [30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [33, "module-neural_compressor.adaptor.ox_utils.operators.norm"], [34, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [35, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"], [38, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [39, "module-neural_compressor.adaptor.ox_utils.operators.split"], [40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"], [41, "module-neural_compressor.adaptor.ox_utils.quantizer"], [42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"], [43, "module-neural_compressor.adaptor.ox_utils.util"], [44, "module-neural_compressor.adaptor.pytorch"], [45, "module-neural_compressor.adaptor.query"], [46, "module-neural_compressor.adaptor.tensorflow"], [47, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [109, "module-neural_compressor.adaptor.tf_utils.graph_util"], [110, "module-neural_compressor.adaptor.tf_utils"], [111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [139, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"], [140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"], [141, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [142, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [143, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [144, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [145, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [146, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [147, "module-neural_compressor.adaptor.tf_utils.util"], [148, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [149, "module-neural_compressor.adaptor.torch_utils.gptq"], [150, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [151, "module-neural_compressor.adaptor.torch_utils"], [152, "module-neural_compressor.adaptor.torch_utils.mixed_precision"], [153, "module-neural_compressor.adaptor.torch_utils.model_wrapper"], [154, "module-neural_compressor.adaptor.torch_utils.pattern_detector"], [155, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [156, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [157, "module-neural_compressor.adaptor.torch_utils.teq"], [158, "module-neural_compressor.adaptor.torch_utils.util"], [159, "module-neural_compressor.adaptor.torch_utils.weight_only"], [160, "module-neural_compressor.algorithm.algorithm"], [161, "module-neural_compressor.algorithm.fast_bias_correction"], [162, "module-neural_compressor.algorithm"], [163, "module-neural_compressor.algorithm.smooth_quant"], [164, "module-neural_compressor.algorithm.weight_correction"], [165, "module-neural_compressor.benchmark"], [166, "module-neural_compressor.compression.callbacks"], [167, "module-neural_compressor.compression.distillation.criterions"], [168, "module-neural_compressor.compression.distillation"], [169, "module-neural_compressor.compression.hpo"], [170, "module-neural_compressor.compression.hpo.sa_optimizer"], [171, "module-neural_compressor.compression.hpo.search_algorithms"], [172, "module-neural_compressor.compression.hpo.search_space"], [173, "module-neural_compressor.compression"], [174, "module-neural_compressor.compression.pruner.criteria"], [175, "module-neural_compressor.compression.pruner"], [176, "module-neural_compressor.compression.pruner.model_slim.auto_slim"], [177, "module-neural_compressor.compression.pruner.model_slim"], [178, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"], [179, "module-neural_compressor.compression.pruner.model_slim.weight_slim"], [180, "module-neural_compressor.compression.pruner.patterns.base"], [181, "module-neural_compressor.compression.pruner.patterns"], [182, "module-neural_compressor.compression.pruner.patterns.mha"], [183, "module-neural_compressor.compression.pruner.patterns.ninm"], [184, "module-neural_compressor.compression.pruner.patterns.nxm"], [185, "module-neural_compressor.compression.pruner.pruners.base"], [186, "module-neural_compressor.compression.pruner.pruners.basic"], [187, "module-neural_compressor.compression.pruner.pruners.block_mask"], [188, "module-neural_compressor.compression.pruner.pruners"], [189, "module-neural_compressor.compression.pruner.pruners.mha"], [190, "module-neural_compressor.compression.pruner.pruners.pattern_lock"], [191, "module-neural_compressor.compression.pruner.pruners.progressive"], [192, "module-neural_compressor.compression.pruner.pruners.retrain_free"], [193, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"], [194, "module-neural_compressor.compression.pruner.pruning"], [195, "module-neural_compressor.compression.pruner.regs"], [196, "module-neural_compressor.compression.pruner.schedulers"], [197, "module-neural_compressor.compression.pruner.tf_criteria"], [198, "module-neural_compressor.compression.pruner.utils"], [199, "module-neural_compressor.conf.config"], [200, "module-neural_compressor.conf.dotdict"], [201, "module-neural_compressor.conf"], [202, "module-neural_compressor.conf.pythonic_config"], [203, "module-neural_compressor.config"], [204, "module-neural_compressor.contrib"], [205, "module-neural_compressor.contrib.strategy"], [206, "module-neural_compressor.contrib.strategy.sigopt"], [207, "module-neural_compressor.contrib.strategy.tpe"], [208, "module-neural_compressor.data.dataloaders.base_dataloader"], [209, "module-neural_compressor.data.dataloaders.dataloader"], [210, "module-neural_compressor.data.dataloaders.default_dataloader"], [211, "module-neural_compressor.data.dataloaders.fetcher"], [212, "module-neural_compressor.data.dataloaders"], [213, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [214, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [215, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [216, "module-neural_compressor.data.dataloaders.sampler"], [217, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [218, "module-neural_compressor.data.datasets.bert_dataset"], [219, "module-neural_compressor.data.datasets.coco_dataset"], [220, "module-neural_compressor.data.datasets.dataset"], [221, "module-neural_compressor.data.datasets.dummy_dataset"], [222, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [223, "module-neural_compressor.data.datasets.imagenet_dataset"], [224, "module-neural_compressor.data.datasets"], [225, "module-neural_compressor.data.datasets.style_transfer_dataset"], [226, "module-neural_compressor.data.filters.coco_filter"], [227, "module-neural_compressor.data.filters.filter"], [228, "module-neural_compressor.data.filters"], [229, "module-neural_compressor.data"], [230, "module-neural_compressor.data.transforms.coco_transform"], [231, "module-neural_compressor.data.transforms.imagenet_transform"], [232, "module-neural_compressor.data.transforms"], [233, "module-neural_compressor.data.transforms.postprocess"], [234, "module-neural_compressor.data.transforms.tokenization"], [235, "module-neural_compressor.data.transforms.transform"], [236, "module-neural_compressor.experimental.benchmark"], [237, "module-neural_compressor.experimental.common.criterion"], [238, "module-neural_compressor.experimental.common.dataloader"], [239, "module-neural_compressor.experimental.common"], [240, "module-neural_compressor.experimental.common.metric"], [241, "module-neural_compressor.experimental.common.model"], [242, "module-neural_compressor.experimental.common.optimizer"], [243, "module-neural_compressor.experimental.common.postprocess"], [244, "module-neural_compressor.experimental.common.torch_utils"], [245, "module-neural_compressor.experimental.component"], [246, "module-neural_compressor.experimental.compression"], [247, "module-neural_compressor.experimental.contrib"], [248, "module-neural_compressor.experimental.contrib.strategy"], [249, "module-neural_compressor.experimental.contrib.strategy.sigopt"], [250, "module-neural_compressor.experimental.contrib.strategy.tpe"], [251, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [252, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [253, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [254, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [255, "module-neural_compressor.experimental.data.dataloaders"], [256, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [257, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [258, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [259, "module-neural_compressor.experimental.data.dataloaders.sampler"], [260, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [261, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [262, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [263, "module-neural_compressor.experimental.data.datasets.dataset"], [264, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [265, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [266, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [267, "module-neural_compressor.experimental.data.datasets"], [268, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [269, "module-neural_compressor.experimental.data.filters.coco_filter"], [270, "module-neural_compressor.experimental.data.filters.filter"], [271, "module-neural_compressor.experimental.data.filters"], [272, "module-neural_compressor.experimental.data"], [273, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [274, "module-neural_compressor.experimental.data.transforms"], [275, "module-neural_compressor.experimental.data.transforms.tokenization"], [276, "module-neural_compressor.experimental.data.transforms.transform"], [277, "module-neural_compressor.experimental.distillation"], [278, "module-neural_compressor.experimental.export"], [279, "module-neural_compressor.experimental.export.qlinear2qdq"], [280, "module-neural_compressor.experimental.export.tf2onnx"], [281, "module-neural_compressor.experimental.export.torch2onnx"], [282, "module-neural_compressor.experimental.graph_optimization"], [283, "module-neural_compressor.experimental"], [284, "module-neural_compressor.experimental.metric.bleu"], [285, "module-neural_compressor.experimental.metric.bleu_util"], [286, "module-neural_compressor.experimental.metric.coco_label_map"], [287, "module-neural_compressor.experimental.metric.coco_tools"], [288, "module-neural_compressor.experimental.metric.evaluate_squad"], [289, "module-neural_compressor.experimental.metric.f1"], [290, "module-neural_compressor.experimental.metric"], [291, "module-neural_compressor.experimental.metric.metric"], [292, "module-neural_compressor.experimental.mixed_precision"], [293, "module-neural_compressor.experimental.model_conversion"], [294, "module-neural_compressor.experimental.nas.basic_nas"], [295, "module-neural_compressor.experimental.nas.dynas"], [296, "module-neural_compressor.experimental.nas"], [297, "module-neural_compressor.experimental.nas.nas"], [298, "module-neural_compressor.experimental.nas.nas_utils"], [299, "module-neural_compressor.experimental.nas.search_algorithms"], [300, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [301, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [302, "module-neural_compressor.experimental.pruner_legacy"], [303, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [304, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [305, "module-neural_compressor.experimental.pruner_legacy.pruner"], [306, "module-neural_compressor.experimental.pruning"], [307, "module-neural_compressor.experimental.pruning_recipes"], [308, "module-neural_compressor.experimental.pruning_recipes.patterns"], [309, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [310, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [311, "module-neural_compressor.experimental.pruning_v2"], [312, "module-neural_compressor.experimental.pytorch_pruner"], [313, "module-neural_compressor.experimental.pytorch_pruner.logger"], [314, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [315, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [316, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [317, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [318, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [319, "module-neural_compressor.experimental.quantization"], [320, "module-neural_compressor.experimental.scheduler"], [321, "module-neural_compressor.experimental.strategy.auto_mixed_precision"], [322, "module-neural_compressor.experimental.strategy.basic"], [323, "module-neural_compressor.experimental.strategy.bayesian"], [324, "module-neural_compressor.experimental.strategy.exhaustive"], [325, "module-neural_compressor.experimental.strategy"], [326, "module-neural_compressor.experimental.strategy.mse"], [327, "module-neural_compressor.experimental.strategy.mse_v2"], [328, "module-neural_compressor.experimental.strategy.random"], [329, "module-neural_compressor.experimental.strategy.strategy"], [330, "module-neural_compressor.experimental.strategy.utils.constant"], [331, "module-neural_compressor.experimental.strategy.utils"], [332, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"], [333, "module-neural_compressor.experimental.strategy.utils.tuning_space"], [334, "module-neural_compressor.experimental.strategy.utils.tuning_structs"], [335, "module-neural_compressor.experimental.strategy.utils.utility"], [336, "module-neural_compressor"], [337, "module-neural_compressor.metric.bleu"], [338, "module-neural_compressor.metric.bleu_util"], [339, "module-neural_compressor.metric.coco_label_map"], [340, "module-neural_compressor.metric.coco_tools"], [341, "module-neural_compressor.metric.evaluate_squad"], [342, "module-neural_compressor.metric.f1"], [343, "module-neural_compressor.metric"], [344, "module-neural_compressor.metric.metric"], [345, "module-neural_compressor.mix_precision"], [346, "module-neural_compressor.model.base_model"], [347, "module-neural_compressor.model"], [348, "module-neural_compressor.model.keras_model"], [349, "module-neural_compressor.model.model"], [350, "module-neural_compressor.model.mxnet_model"], [351, "module-neural_compressor.model.nets_factory"], [352, "module-neural_compressor.model.onnx_model"], [353, "module-neural_compressor.model.tensorflow_model"], [354, "module-neural_compressor.model.torch_model"], [355, "module-neural_compressor.objective"], [356, "module-neural_compressor.profiling"], [357, "module-neural_compressor.profiling.parser.factory"], [358, "module-neural_compressor.profiling.parser"], [359, "module-neural_compressor.profiling.parser.onnx_parser.factory"], [360, "module-neural_compressor.profiling.parser.onnx_parser"], [361, "module-neural_compressor.profiling.parser.onnx_parser.parser"], [362, "module-neural_compressor.profiling.parser.parser"], [363, "module-neural_compressor.profiling.parser.result"], [364, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"], [365, "module-neural_compressor.profiling.parser.tensorflow_parser"], [366, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"], [367, "module-neural_compressor.profiling.profiler.factory"], [368, "module-neural_compressor.profiling.profiler"], [369, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"], [370, "module-neural_compressor.profiling.profiler.onnxrt_profiler"], [371, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"], [372, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"], [373, "module-neural_compressor.profiling.profiler.profiler"], [374, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"], [375, "module-neural_compressor.profiling.profiler.tensorflow_profiler"], [376, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"], [377, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"], [378, "module-neural_compressor.quantization"], [379, "module-neural_compressor.strategy.auto"], [380, "module-neural_compressor.strategy.auto_mixed_precision"], [381, "module-neural_compressor.strategy.basic"], [382, "module-neural_compressor.strategy.bayesian"], [383, "module-neural_compressor.strategy.conservative"], [384, "module-neural_compressor.strategy.exhaustive"], [385, "module-neural_compressor.strategy.hawq_v2"], [386, "module-neural_compressor.strategy"], [387, "module-neural_compressor.strategy.mse"], [388, "module-neural_compressor.strategy.mse_v2"], [389, "module-neural_compressor.strategy.random"], [390, "module-neural_compressor.strategy.strategy"], [391, "module-neural_compressor.strategy.utils.constant"], [392, "module-neural_compressor.strategy.utils"], [393, "module-neural_compressor.strategy.utils.tuning_sampler"], [394, "module-neural_compressor.strategy.utils.tuning_space"], [395, "module-neural_compressor.strategy.utils.tuning_structs"], [396, "module-neural_compressor.strategy.utils.utility"], [397, "module-neural_compressor.template.api_doc_example"], [398, "module-neural_compressor.template"], [399, "module-neural_compressor.training"], [400, "module-neural_compressor.utils.collect_layer_histogram"], [401, "module-neural_compressor.utils.constant"], [402, "module-neural_compressor.utils.create_obj_from_config"], [403, "module-neural_compressor.utils"], [404, "module-neural_compressor.utils.kl_divergence"], [405, "module-neural_compressor.utils.load_huggingface"], [406, "module-neural_compressor.utils.logger"], [407, "module-neural_compressor.utils.neural_insights_utils"], [408, "module-neural_compressor.utils.options"], [409, "module-neural_compressor.utils.pytorch"], [410, "module-neural_compressor.utils.utility"], [411, "module-neural_compressor.utils.weights_details"], [412, "module-neural_compressor.version"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasQuery"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase"]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector"]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator"]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator"]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator"]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "float16activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.Float16ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "float16binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.Float16BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[30, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "fusedmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.FusedMatMulOperator"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "batchnormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.BatchNormalizationOperator"]], "normalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "reduceoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "unaryoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[41, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "ortsmoothquant (class in neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.ORTSmoothQuant"]], "get_quant_dequant_output() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.get_quant_dequant_output"]], "make_sub_graph() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.make_sub_graph"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "quant_dequant_data() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.quant_dequant_data"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "to_numpy() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.to_numpy"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchquery (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorchQuery"]], "pytorchweightonlyadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorchWeightOnlyAdaptor"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "neural_compressor.adaptor.pytorch": [[44, "module-neural_compressor.adaptor.pytorch"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[45, "neural_compressor.adaptor.query.QueryBackendCapability"]], "neural_compressor.adaptor.query": [[45, "module-neural_compressor.adaptor.query"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow": [[46, "module-neural_compressor.adaptor.tensorflow"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[47, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[48, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[49, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[109, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[109, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[110, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "smoothquantcalibration (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[139, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[139, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "smoothquantscaler (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[140, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScaler"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[141, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[141, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[142, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[142, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[143, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[145, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[146, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "get_weight_from_input_tensor() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_weight_from_input_tensor"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[147, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[148, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[148, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[148, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[148, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "gptq (class in neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.GPTQ"]], "gptquantizer (class in neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.GPTQuantizer"]], "find_layers() (in module neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.find_layers"]], "find_layers_name() (in module neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.find_layers_name"]], "is_leaf() (in module neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.is_leaf"]], "log_quantizable_layers_per_transformer() (in module neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.log_quantizable_layers_per_transformer"]], "neural_compressor.adaptor.torch_utils.gptq": [[149, "module-neural_compressor.adaptor.torch_utils.gptq"]], "quantize() (in module neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.quantize"]], "trace_gptq_target_blocks() (in module neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.trace_gptq_target_blocks"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[150, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[150, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[150, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[150, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[150, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[151, "module-neural_compressor.adaptor.torch_utils"]], "ipex_mixed_precision() (in module neural_compressor.adaptor.torch_utils.mixed_precision)": [[152, "neural_compressor.adaptor.torch_utils.mixed_precision.ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[152, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "fakeaffinetensorquantfunction (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[153, "neural_compressor.adaptor.torch_utils.model_wrapper.FakeAffineTensorQuantFunction"]], "teqlinearfakequant (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[153, "neural_compressor.adaptor.torch_utils.model_wrapper.TEQLinearFakeQuant"]], "teqmullinear (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[153, "neural_compressor.adaptor.torch_utils.model_wrapper.TEQMulLinear"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[153, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.adaptor.torch_utils.pattern_detector)": [[154, "neural_compressor.adaptor.torch_utils.pattern_detector.TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[154, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "graphtrace (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[155, "neural_compressor.adaptor.torch_utils.smooth_quant.GraphTrace"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[155, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "get_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[155, "neural_compressor.adaptor.torch_utils.smooth_quant.get_module"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[155, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "set_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[155, "neural_compressor.adaptor.torch_utils.smooth_quant.set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[156, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[156, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[156, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "tequantizer (class in neural_compressor.adaptor.torch_utils.teq)": [[157, "neural_compressor.adaptor.torch_utils.teq.TEQuantizer"]], "neural_compressor.adaptor.torch_utils.teq": [[157, "module-neural_compressor.adaptor.torch_utils.teq"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "collect_weight_info() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.collect_weight_info"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_depth"]], "get_dict_at_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_dict_at_depth"]], "get_element_under_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_element_under_depth"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_op_type_by_name() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_op_type_by_name"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern"]], "neural_compressor.adaptor.torch_utils.util": [[158, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.update_sq_scale"]], "awq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[159, "neural_compressor.adaptor.torch_utils.weight_only.awq_quantize"]], "get_module_input_output() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[159, "neural_compressor.adaptor.torch_utils.weight_only.get_module_input_output"]], "gptq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[159, "neural_compressor.adaptor.torch_utils.weight_only.gptq_quantize"]], "neural_compressor.adaptor.torch_utils.weight_only": [[159, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "qdq_weight_actor() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[159, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_actor"]], "qdq_weight_asym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[159, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_asym"]], "qdq_weight_sym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[159, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_sym"]], "quant_weight() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[159, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight"]], "quant_weight_w_scale() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[159, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight_w_scale"]], "rtn_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[159, "neural_compressor.adaptor.torch_utils.weight_only.rtn_quantize"]], "teq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[159, "neural_compressor.adaptor.torch_utils.weight_only.teq_quantize"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[160, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[160, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[160, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[160, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[160, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[161, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[161, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[162, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[163, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[163, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[164, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[164, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[165, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.summary_benchmark"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[166, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[166, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[166, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[166, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[166, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[166, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[166, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[166, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "neural_compressor.compression.callbacks": [[166, "module-neural_compressor.compression.callbacks"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "neural_compressor.compression.distillation.criterions": [[167, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[168, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression.hpo": [[169, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[170, "module-neural_compressor.compression.hpo.sa_optimizer"]], "bayesianoptimizationsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[171, "neural_compressor.compression.hpo.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[171, "neural_compressor.compression.hpo.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[171, "neural_compressor.compression.hpo.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.compression.hpo.search_algorithms)": [[171, "neural_compressor.compression.hpo.search_algorithms.Searcher"]], "xgbsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[171, "neural_compressor.compression.hpo.search_algorithms.XgbSearcher"]], "neural_compressor.compression.hpo.search_algorithms": [[171, "module-neural_compressor.compression.hpo.search_algorithms"]], "register_searcher() (in module neural_compressor.compression.hpo.search_algorithms)": [[171, "neural_compressor.compression.hpo.search_algorithms.register_searcher"]], "basesearchspace (class in neural_compressor.compression.hpo.search_space)": [[172, "neural_compressor.compression.hpo.search_space.BaseSearchSpace"]], "continuoussearchspace (class in neural_compressor.compression.hpo.search_space)": [[172, "neural_compressor.compression.hpo.search_space.ContinuousSearchSpace"]], "discretesearchspace (class in neural_compressor.compression.hpo.search_space)": [[172, "neural_compressor.compression.hpo.search_space.DiscreteSearchSpace"]], "searchspace (class in neural_compressor.compression.hpo.search_space)": [[172, "neural_compressor.compression.hpo.search_space.SearchSpace"]], "neural_compressor.compression.hpo.search_space": [[172, "module-neural_compressor.compression.hpo.search_space"]], "register_searchspace() (in module neural_compressor.compression.hpo.search_space)": [[172, "neural_compressor.compression.hpo.search_space.register_searchspace"]], "neural_compressor.compression": [[173, "module-neural_compressor.compression"]], "blockmaskcriterion (class in neural_compressor.compression.pruner.criteria)": [[174, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[174, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[174, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[174, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[174, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[174, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[174, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[174, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[174, "module-neural_compressor.compression.pruner.criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[174, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.blockmaskcriterion attribute)": [[174, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[174, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[174, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[174, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[174, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[174, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[174, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.compression.pruner": [[175, "module-neural_compressor.compression.pruner"]], "prepare_pruning() (in module neural_compressor.compression.pruner)": [[175, "neural_compressor.compression.pruner.prepare_pruning"]], "save() (in module neural_compressor.compression.pruner)": [[175, "neural_compressor.compression.pruner.save"]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[176, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_ffn2_pruning_config"]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[176, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_mha_pruning_config"]], "model_slim() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[176, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim"]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[176, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_ffn2"]], "model_slim_mha() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[176, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_mha"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[176, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[176, "neural_compressor.compression.pruner.model_slim.auto_slim.parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim": [[177, "module-neural_compressor.compression.pruner.model_slim"]], "classifierheadsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher"]], "classifierheadsearchertf (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF"]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher"]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher"]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher"]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph"]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes"]], "get_common_module() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_common_module"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[178, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "print_iterables() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.print_iterables"]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut"]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets"]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[179, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression"]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[179, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator"]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[179, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils"]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[179, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device"]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[179, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1"]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[179, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2"]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[179, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[179, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "basepattern (class in neural_compressor.compression.pruner.patterns.base)": [[180, "neural_compressor.compression.pruner.patterns.base.BasePattern"]], "kerasbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[180, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern"]], "pytorchbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[180, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern"]], "config (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.BasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.config"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.BasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.BasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.BasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.BasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.BasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.BasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.modules"]], "neural_compressor.compression.pruner.patterns.base": [[180, "module-neural_compressor.compression.pruner.patterns.base"]], "pattern (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.BasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.pattern"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns.base)": [[180, "neural_compressor.compression.pruner.patterns.base.register_pattern"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.BasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.target_sparsity"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[181, "neural_compressor.compression.pruner.patterns.get_pattern"]], "neural_compressor.compression.pruner.patterns": [[181, "module-neural_compressor.compression.pruner.patterns"]], "m (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[182, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.M"]], "n (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[182, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.N"]], "patternmha (class in neural_compressor.compression.pruner.patterns.mha)": [[182, "neural_compressor.compression.pruner.patterns.mha.PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha": [[182, "module-neural_compressor.compression.pruner.patterns.mha"]], "m (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[183, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[183, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.N"]], "pytorchpatternninm (class in neural_compressor.compression.pruner.patterns.ninm)": [[183, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm": [[183, "module-neural_compressor.compression.pruner.patterns.ninm"]], "keraspatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[184, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM"]], "pytorchpatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[184, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.keraspatternnxm attribute)": [[184, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM.block_size"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.pytorchpatternnxm attribute)": [[184, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM.block_size"]], "neural_compressor.compression.pruner.patterns.nxm": [[184, "module-neural_compressor.compression.pruner.patterns.nxm"]], "basepruner (class in neural_compressor.compression.pruner.pruners.base)": [[185, "neural_compressor.compression.pruner.pruners.base.BasePruner"]], "kerasbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[185, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner"]], "pytorchbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[185, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner"]], "config (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.BasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.config"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.BasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.BasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.end_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.BasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.global_step"]], "masks (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.BasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.BasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.BasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.modules"]], "neural_compressor.compression.pruner.pruners.base": [[185, "module-neural_compressor.compression.pruner.pruners.base"]], "pattern (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pattern"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.BasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pruning_frequency"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners.base)": [[185, "neural_compressor.compression.pruner.pruners.base.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.BasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scores"]], "start_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.BasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.BasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.target_sparsity_ratio"]], "kerasbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[186, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner"]], "pytorchbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[186, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner"]], "criterion (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[186, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[186, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.criterion"]], "neural_compressor.compression.pruner.pruners.basic": [[186, "module-neural_compressor.compression.pruner.pruners.basic"]], "pattern (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[186, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[186, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[186, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[186, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[186, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[186, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.scheduler"]], "pytorchblockmaskpruner (class in neural_compressor.compression.pruner.pruners.block_mask)": [[187, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner"]], "criterion (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[187, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.criterion"]], "neural_compressor.compression.pruner.pruners.block_mask": [[187, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "pattern (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[187, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[187, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[187, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.scheduler"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[188, "neural_compressor.compression.pruner.pruners.get_pruner"]], "neural_compressor.compression.pruner.pruners": [[188, "module-neural_compressor.compression.pruner.pruners"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[188, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pythonmultiheadattentionpruner (class in neural_compressor.compression.pruner.pruners.mha)": [[189, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner"]], "head_masks (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[189, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.head_masks"]], "linear_layers (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[189, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.linear_layers"]], "mha_compressions (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[189, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_compressions"]], "mha_scores (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[189, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_scores"]], "neural_compressor.compression.pruner.pruners.mha": [[189, "module-neural_compressor.compression.pruner.pruners.mha"]], "pytorchpatternlockpruner (class in neural_compressor.compression.pruner.pruners.pattern_lock)": [[190, "neural_compressor.compression.pruner.pruners.pattern_lock.PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[190, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "pytorchprogressivepruner (class in neural_compressor.compression.pruner.pruners.progressive)": [[191, "neural_compressor.compression.pruner.pruners.progressive.PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[191, "module-neural_compressor.compression.pruner.pruners.progressive"]], "pytorchretrainfreepruner (class in neural_compressor.compression.pruner.pruners.retrain_free)": [[192, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner"]], "criterion (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.criterion"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[192, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "pattern (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.scheduler"]], "sparsegptpruner (class in neural_compressor.compression.pruner.pruners.sparse_gpt)": [[193, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner"]], "criterion (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[193, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.criterion"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[193, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"]], "pattern (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[193, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[193, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[193, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.scheduler"]], "basepruning (class in neural_compressor.compression.pruner.pruning)": [[194, "neural_compressor.compression.pruner.pruning.BasePruning"]], "basicpruning (class in neural_compressor.compression.pruner.pruning)": [[194, "neural_compressor.compression.pruner.pruning.BasicPruning"]], "retrainfreepruning (class in neural_compressor.compression.pruner.pruning)": [[194, "neural_compressor.compression.pruner.pruning.RetrainFreePruning"]], "sparsegptpruning (class in neural_compressor.compression.pruner.pruning)": [[194, "neural_compressor.compression.pruner.pruning.SparseGPTPruning"]], "config_file_path (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[194, "neural_compressor.compression.pruner.pruning.BasePruning.config_file_path"]], "config_file_path (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[194, "neural_compressor.compression.pruner.pruning.BasicPruning.config_file_path"]], "config_file_path (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[194, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.config_file_path"]], "model (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[194, "neural_compressor.compression.pruner.pruning.BasePruning.model"]], "model (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[194, "neural_compressor.compression.pruner.pruning.BasicPruning.model"]], "model (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[194, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.model"]], "neural_compressor.compression.pruner.pruning": [[194, "module-neural_compressor.compression.pruner.pruning"]], "pruner_info (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[194, "neural_compressor.compression.pruner.pruning.BasePruning.pruner_info"]], "pruner_info (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[194, "neural_compressor.compression.pruner.pruning.BasicPruning.pruner_info"]], "pruner_info (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[194, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruner_info"]], "pruners (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[194, "neural_compressor.compression.pruner.pruning.BasePruning.pruners"]], "pruners (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[194, "neural_compressor.compression.pruner.pruning.BasicPruning.pruners"]], "pruners (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[194, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruners"]], "register_pruning() (in module neural_compressor.compression.pruner.pruning)": [[194, "neural_compressor.compression.pruner.pruning.register_pruning"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[195, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[195, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[195, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[195, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[195, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[195, "module-neural_compressor.compression.pruner.regs"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[195, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[195, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[196, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[196, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[196, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[196, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[196, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[196, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[196, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "magnitudecriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[197, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[197, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion"]], "get_tf_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[197, "neural_compressor.compression.pruner.tf_criteria.get_tf_criterion"]], "neural_compressor.compression.pruner.tf_criteria": [[197, "module-neural_compressor.compression.pruner.tf_criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[197, "neural_compressor.compression.pruner.tf_criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.tf_criteria.magnitudecriterion attribute)": [[197, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.tf_criteria.pruningcriterion attribute)": [[197, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion.scores"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[198, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[198, "neural_compressor.compression.pruner.utils.check_key_validity"]], "collect_layer_inputs() (in module neural_compressor.compression.pruner.utils)": [[198, "neural_compressor.compression.pruner.utils.collect_layer_inputs"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[198, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_layers() (in module neural_compressor.compression.pruner.utils)": [[198, "neural_compressor.compression.pruner.utils.get_layers"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[198, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "get_sparsity_ratio_tf() (in module neural_compressor.compression.pruner.utils)": [[198, "neural_compressor.compression.pruner.utils.get_sparsity_ratio_tf"]], "neural_compressor.compression.pruner.utils": [[198, "module-neural_compressor.compression.pruner.utils"]], "parse_last_linear() (in module neural_compressor.compression.pruner.utils)": [[198, "neural_compressor.compression.pruner.utils.parse_last_linear"]], "parse_last_linear_tf() (in module neural_compressor.compression.pruner.utils)": [[198, "neural_compressor.compression.pruner.utils.parse_last_linear_tf"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[198, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "parse_to_prune_tf() (in module neural_compressor.compression.pruner.utils)": [[198, "neural_compressor.compression.pruner.utils.parse_to_prune_tf"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[198, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[198, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[198, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[198, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[198, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[198, "neural_compressor.compression.pruner.utils.update_params"]], "benchmark_conf (class in neural_compressor.conf.config)": [[199, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[199, "neural_compressor.conf.config.Conf"]], "defaultconf (class in neural_compressor.conf.config)": [[199, "neural_compressor.conf.config.DefaultConf"]], "distillation_conf (class in neural_compressor.conf.config)": [[199, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[199, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[199, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[199, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[199, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[199, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[199, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[199, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[200, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[200, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[200, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[200, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[201, "module-neural_compressor.conf"]], "accuracycriterion (class in neural_compressor.conf.pythonic_config)": [[202, "neural_compressor.conf.pythonic_config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.conf.pythonic_config)": [[202, "neural_compressor.conf.pythonic_config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.conf.pythonic_config)": [[202, "neural_compressor.conf.pythonic_config.DistillationConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.conf.pythonic_config)": [[202, "neural_compressor.conf.pythonic_config.KnowledgeDistillationLossConfig"]], "options (class in neural_compressor.conf.pythonic_config)": [[202, "neural_compressor.conf.pythonic_config.Options"]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[202, "neural_compressor.conf.pythonic_config.QuantizationConfig"]], "weightpruningconfig (class in neural_compressor.conf.pythonic_config)": [[202, "neural_compressor.conf.pythonic_config.WeightPruningConfig"]], "neural_compressor.conf.pythonic_config": [[202, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[203, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[203, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[203, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[203, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[203, "neural_compressor.config.ExportConfig"]], "hpoconfig (class in neural_compressor.config)": [[203, "neural_compressor.config.HPOConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[203, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[203, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[203, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[203, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[203, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[203, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[203, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[203, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[203, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[203, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[203, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[203, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[203, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[203, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[203, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[203, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[203, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[203, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[203, "module-neural_compressor.config"]], "neural_compressor.contrib": [[204, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[205, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[206, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[206, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[207, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[207, "module-neural_compressor.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[208, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader": [[208, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[209, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "check_dataloader() (in module neural_compressor.data.dataloaders.dataloader)": [[209, "neural_compressor.data.dataloaders.dataloader.check_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[209, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[210, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[210, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[210, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[211, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[211, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[211, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[211, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[212, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[213, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[213, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[214, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[214, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[214, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[215, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[215, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[216, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[216, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[216, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[216, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[216, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[217, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[217, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[217, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[217, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[217, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[218, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[218, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[218, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[218, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[218, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[218, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[218, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[218, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[218, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[219, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[219, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[219, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[219, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[219, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[220, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[220, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[220, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[220, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[220, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[220, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[220, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[220, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[220, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[220, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[220, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[220, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[220, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[220, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[220, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[220, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[220, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[220, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[220, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[220, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[220, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[220, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[220, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[220, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[220, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[220, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[220, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[220, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[220, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[220, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[220, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[220, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[220, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[220, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[220, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[220, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[220, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[220, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[220, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[221, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[221, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[222, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[222, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[222, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[223, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[223, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[223, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[223, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[223, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[223, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[223, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[224, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[225, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[225, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[226, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[226, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[226, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[227, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[227, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[227, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[227, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[227, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[227, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[227, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[227, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[227, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[228, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[229, "module-neural_compressor.data"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[230, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[230, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[231, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[231, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[231, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[231, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[231, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[231, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[231, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[231, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[231, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[231, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale"]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[231, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.imagenet_transform": [[231, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[232, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[233, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[233, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[234, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[234, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[234, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[234, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[234, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[234, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[234, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[234, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.TRANSFORMS"], [235, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[235, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[235, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[236, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[236, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[236, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[236, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[236, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[236, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[236, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[236, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[236, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[236, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[237, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[237, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[237, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[237, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[237, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[237, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[237, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[237, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[237, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[237, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[237, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[237, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[237, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[237, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[237, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[237, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[237, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[237, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[237, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[237, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[237, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[238, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[238, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[239, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[240, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[240, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[241, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[241, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[241, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[242, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[242, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[242, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[242, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[242, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[242, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[242, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[242, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[242, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[243, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[243, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[244, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[244, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[244, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[245, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[245, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[246, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[247, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[248, "module-neural_compressor.experimental.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[249, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[249, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[250, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[250, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[251, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[251, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[252, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[253, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[253, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[253, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[254, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[254, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[254, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[254, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[255, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[256, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[256, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[257, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[257, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[257, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[258, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[258, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[259, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[259, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[259, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[259, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[259, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[260, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[260, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[260, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[260, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[260, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[261, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[261, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[261, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[261, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[261, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[261, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[261, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[261, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[261, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[262, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[262, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[262, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[262, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[262, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[263, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[263, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[263, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[263, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[263, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[263, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[263, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[263, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[263, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[263, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[263, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[263, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[263, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[263, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[263, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[263, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[263, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[263, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[263, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[263, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[263, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[263, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[263, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[263, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[263, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[263, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[263, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[263, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[263, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[263, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[263, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[263, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[263, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[263, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[263, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[263, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[263, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[263, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[263, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[264, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[264, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[265, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[265, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[265, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[266, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[266, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[266, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[266, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[266, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[266, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[266, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[267, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[268, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[268, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[269, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[269, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[269, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[270, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[270, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[270, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[270, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[270, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[270, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[270, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[270, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[270, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[271, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[272, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[273, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[273, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[273, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[273, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[273, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[273, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[273, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[273, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[273, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[273, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[274, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[275, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[275, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[275, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[275, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[275, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[275, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[275, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[275, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [276, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[276, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[276, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[277, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[277, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[277, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[277, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[277, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[277, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[278, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[279, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[279, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[279, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[280, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[280, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[280, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "dynamic_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[281, "neural_compressor.experimental.export.torch2onnx.dynamic_quant_export"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[281, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[281, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[281, "module-neural_compressor.experimental.export.torch2onnx"]], "static_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[281, "neural_compressor.experimental.export.torch2onnx.static_quant_export"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[281, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[281, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[282, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[282, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[283, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[284, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[284, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[284, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[284, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[284, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[284, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[284, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[284, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[284, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[285, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[285, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[286, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[287, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[287, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[287, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[287, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[287, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[287, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[287, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[287, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[288, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[288, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[288, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[288, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[288, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[289, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[289, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[289, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[289, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[289, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[290, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[291, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[291, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[291, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[291, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[291, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[291, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[291, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[291, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[291, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[291, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[291, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[291, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[291, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[291, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[291, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[291, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[291, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[291, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[291, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[291, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[291, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[291, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[291, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[291, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[291, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[291, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[291, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[291, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[291, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[291, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[291, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[291, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[291, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[291, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[291, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[291, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[291, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[291, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[291, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[291, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[291, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[291, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[291, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[291, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[291, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[291, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[291, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[291, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[291, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[291, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[291, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[291, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[291, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[292, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[292, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[293, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[293, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[294, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[294, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[295, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[295, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[296, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[297, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[297, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[297, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[298, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[298, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[298, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[298, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[299, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[299, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[299, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[299, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[299, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[300, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[300, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[301, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[301, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[302, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[303, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[303, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[304, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[304, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[305, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[305, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[305, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[306, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[306, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[306, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[306, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[306, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[307, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[308, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[309, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[309, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[309, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[309, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[309, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[310, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[310, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[310, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[310, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[310, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[310, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[310, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[311, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[311, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[311, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[311, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[311, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[312, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[313, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[314, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[314, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[314, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[314, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[314, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[314, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[314, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[314, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[314, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[314, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[314, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[315, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[315, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[315, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[315, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[315, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[315, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[315, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[316, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[316, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[316, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[316, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[316, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[316, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[316, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[316, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[316, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[316, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[316, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[316, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[316, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[316, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[316, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[316, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[316, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[316, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[316, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[316, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[316, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[317, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[317, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[317, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[317, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[317, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[317, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[318, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[318, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[318, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[318, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[318, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[318, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[318, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[319, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[319, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[320, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[320, "module-neural_compressor.experimental.scheduler"]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[321, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[321, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[322, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[322, "module-neural_compressor.experimental.strategy.basic"]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[323, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[323, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[323, "neural_compressor.experimental.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[323, "neural_compressor.experimental.strategy.bayesian.acq_max"]], "neural_compressor.experimental.strategy.bayesian": [[323, "module-neural_compressor.experimental.strategy.bayesian"]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[324, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.exhaustive": [[324, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[325, "module-neural_compressor.experimental.strategy"]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[326, "neural_compressor.experimental.strategy.mse.MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[326, "module-neural_compressor.experimental.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[327, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[327, "module-neural_compressor.experimental.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[328, "neural_compressor.experimental.strategy.random.RandomTuneStrategy"]], "neural_compressor.experimental.strategy.random": [[328, "module-neural_compressor.experimental.strategy.random"]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[329, "neural_compressor.experimental.strategy.strategy.TuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[329, "module-neural_compressor.experimental.strategy.strategy"]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[329, "neural_compressor.experimental.strategy.strategy.strategy_registry"]], "neural_compressor.experimental.strategy.utils.constant": [[330, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[331, "module-neural_compressor.experimental.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[332, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[332, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[332, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[332, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[332, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[332, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[332, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[332, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[332, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[333, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[333, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[333, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[333, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[333, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[333, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[333, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[334, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[334, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[335, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[335, "neural_compressor.experimental.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[335, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.experimental.strategy.utils.utility": [[335, "module-neural_compressor.experimental.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[335, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type"]], "neural_compressor": [[336, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[337, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[337, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[337, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[337, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[337, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[337, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[337, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[337, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[337, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[338, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[338, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[339, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[340, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[340, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[340, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[340, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[340, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[340, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[340, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[340, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[341, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[341, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[341, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[341, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[341, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[342, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[342, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[342, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[342, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[342, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[343, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[344, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[344, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[344, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[344, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[344, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[344, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[344, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[344, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[344, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[344, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[344, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[344, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[344, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[344, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[344, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[344, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[344, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[344, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[344, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[344, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[344, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[344, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[344, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[344, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[344, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[344, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[344, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[344, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[344, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[344, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[344, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[344, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[344, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[344, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[344, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[344, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[344, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[344, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[344, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[344, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[344, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[344, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[344, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[344, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[344, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[344, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[344, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[344, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[344, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[344, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[344, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[344, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[344, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[344, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[344, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[345, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[345, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[346, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[346, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[347, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[348, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[348, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[349, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[349, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[349, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[350, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[350, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[351, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[351, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[352, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[352, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[353, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[353, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[353, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[353, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[353, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[353, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[353, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[353, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[353, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[353, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[353, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[353, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[353, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[353, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[353, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[353, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[353, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[353, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[354, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[354, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[354, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[354, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[354, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[355, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[355, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[355, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[355, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[355, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[355, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[355, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[355, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[355, "neural_compressor.objective.objective_registry"]], "neural_compressor.profiling": [[356, "module-neural_compressor.profiling"]], "parserfactory (class in neural_compressor.profiling.parser.factory)": [[357, "neural_compressor.profiling.parser.factory.ParserFactory"]], "neural_compressor.profiling.parser.factory": [[357, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[358, "module-neural_compressor.profiling.parser"]], "onnxrtparserfactory (class in neural_compressor.profiling.parser.onnx_parser.factory)": [[359, "neural_compressor.profiling.parser.onnx_parser.factory.OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[359, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[360, "module-neural_compressor.profiling.parser.onnx_parser"]], "onnxprofilingparser (class in neural_compressor.profiling.parser.onnx_parser.parser)": [[361, "neural_compressor.profiling.parser.onnx_parser.parser.OnnxProfilingParser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[361, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "profilingparser (class in neural_compressor.profiling.parser.parser)": [[362, "neural_compressor.profiling.parser.parser.ProfilingParser"]], "neural_compressor.profiling.parser.parser": [[362, "module-neural_compressor.profiling.parser.parser"]], "profilingresult (class in neural_compressor.profiling.parser.result)": [[363, "neural_compressor.profiling.parser.result.ProfilingResult"]], "neural_compressor.profiling.parser.result": [[363, "module-neural_compressor.profiling.parser.result"]], "tensorflowparserfactory (class in neural_compressor.profiling.parser.tensorflow_parser.factory)": [[364, "neural_compressor.profiling.parser.tensorflow_parser.factory.TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[364, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[365, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "tensorflowprofilingparser (class in neural_compressor.profiling.parser.tensorflow_parser.parser)": [[366, "neural_compressor.profiling.parser.tensorflow_parser.parser.TensorFlowProfilingParser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[366, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "profilerfactory (class in neural_compressor.profiling.profiler.factory)": [[367, "neural_compressor.profiling.profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.factory": [[367, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[368, "module-neural_compressor.profiling.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.onnxrt_profiler.factory)": [[369, "neural_compressor.profiling.profiler.onnxrt_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[369, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[370, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "profiler (class in neural_compressor.profiling.profiler.onnxrt_profiler.profiler)": [[371, "neural_compressor.profiling.profiler.onnxrt_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[371, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "create_onnx_config() (in module neural_compressor.profiling.profiler.onnxrt_profiler.utils)": [[372, "neural_compressor.profiling.profiler.onnxrt_profiler.utils.create_onnx_config"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[372, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "profiler (class in neural_compressor.profiling.profiler.profiler)": [[373, "neural_compressor.profiling.profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.profiler": [[373, "module-neural_compressor.profiling.profiler.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.tensorflow_profiler.factory)": [[374, "neural_compressor.profiling.profiler.tensorflow_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[374, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[375, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "profiler (class in neural_compressor.profiling.profiler.tensorflow_profiler.profiler)": [[376, "neural_compressor.profiling.profiler.tensorflow_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[376, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "create_tf_config() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[377, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.create_tf_config"]], "delete_assign() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[377, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[377, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "set_eager_execution() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[377, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.set_eager_execution"]], "fit() (in module neural_compressor.quantization)": [[378, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[378, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[379, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[379, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[380, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[380, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[381, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[381, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[382, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[382, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[382, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[382, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[382, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[383, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[383, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[384, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[384, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[385, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[385, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[386, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[387, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[387, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[388, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[388, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[389, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[389, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[390, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[390, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[390, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[390, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[391, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[392, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[393, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[393, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[393, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[393, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[393, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[393, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[393, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[393, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[393, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "neural_compressor.strategy.utils.tuning_sampler": [[393, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[394, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[394, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[394, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[394, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[394, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[394, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[394, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[395, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[395, "module-neural_compressor.strategy.utils.tuning_structs"]], "classregister (class in neural_compressor.strategy.utils.utility)": [[396, "neural_compressor.strategy.utils.utility.ClassRegister"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[396, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[396, "neural_compressor.strategy.utils.utility.QuantOptions"]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[396, "neural_compressor.strategy.utils.utility.QuantType"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[396, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[396, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[396, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[396, "module-neural_compressor.strategy.utils.utility"]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[396, "neural_compressor.strategy.utils.utility.preprocess_user_cfg"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[396, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[397, "neural_compressor.template.api_doc_example.ExampleClass"]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[397, "neural_compressor.template.api_doc_example.ExampleClass.attr1"]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[397, "neural_compressor.template.api_doc_example.ExampleClass.attr2"]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[397, "neural_compressor.template.api_doc_example.ExampleClass.attr5"]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[397, "neural_compressor.template.api_doc_example.attribute1"]], "function1() (in module neural_compressor.template.api_doc_example)": [[397, "neural_compressor.template.api_doc_example.function1"]], "function2() (in module neural_compressor.template.api_doc_example)": [[397, "neural_compressor.template.api_doc_example.function2"]], "function3() (in module neural_compressor.template.api_doc_example)": [[397, "neural_compressor.template.api_doc_example.function3"]], "generator1() (in module neural_compressor.template.api_doc_example)": [[397, "neural_compressor.template.api_doc_example.generator1"]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[397, "neural_compressor.template.api_doc_example.module_debug_level1"]], "neural_compressor.template.api_doc_example": [[397, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[398, "module-neural_compressor.template"]], "callbacks (class in neural_compressor.training)": [[399, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[399, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[399, "neural_compressor.training.fit"]], "neural_compressor.training": [[399, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[399, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[400, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[400, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[401, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[402, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[402, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[402, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[402, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[402, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[402, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[402, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[402, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[402, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[402, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[403, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[404, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[404, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[405, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "neural_compressor.utils.load_huggingface": [[405, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[405, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[406, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[406, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[406, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[406, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[406, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[406, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[406, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[406, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[406, "neural_compressor.utils.logger.warning"]], "neural_compressor.utils.neural_insights_utils": [[407, "module-neural_compressor.utils.neural_insights_utils"]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[407, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload"]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[407, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload"]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[407, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[408, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[408, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[409, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[409, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[409, "module-neural_compressor.utils.pytorch"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.Dequantize"]], "dotdict (class in neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.calculate_mse"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.compute_sparsity"]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.dequantize_weight"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[410, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[410, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[411, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[411, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[411, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[412, "module-neural_compressor.version"]]}})