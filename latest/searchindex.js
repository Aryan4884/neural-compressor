Search.setIndex({"docnames": ["autoapi/block_mask/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/teq/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/hpo/index", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index", "autoapi/neural_compressor/compression/hpo/search_algorithms/index", "autoapi/neural_compressor/compression/hpo/search_space/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/base/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/patterns/mha/index", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index", "autoapi/neural_compressor/compression/pruner/pruners/base/index", "autoapi/neural_compressor/compression/pruner/pruners/basic/index", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/pruners/mha/index", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index", "autoapi/neural_compressor/compression/pruner/pruners/sparse_gpt/index", "autoapi/neural_compressor/compression/pruner/pruning/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/tf_criteria/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/profiling/parser/factory/index", "autoapi/neural_compressor/profiling/parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index", "autoapi/neural_compressor/profiling/parser/parser/index", "autoapi/neural_compressor/profiling/parser/result/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index", "autoapi/neural_compressor/profiling/profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index", "autoapi/neural_compressor/profiling/profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/template/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/calibration", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/diagnosis", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/block_mask/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/teq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/hpo/index.rst", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index.rst", "autoapi/neural_compressor/compression/hpo/search_algorithms/index.rst", "autoapi/neural_compressor/compression/hpo/search_space/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/base/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/mha/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/base/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/basic/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/mha/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/sparse_gpt/index.rst", "autoapi/neural_compressor/compression/pruner/pruning/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/tf_criteria/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/profiling/parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/result/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index.rst", "autoapi/neural_compressor/profiling/profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index.rst", "autoapi/neural_compressor/profiling/profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/template/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/calibration.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/diagnosis.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.reduce</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.unary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_scaler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.pattern_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.teq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.sa_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.search_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.auto_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.pattern_analyzer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.weight_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.ninm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.nxm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.progressive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.retrain_free</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.sparse_gpt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.tf_criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template.api_doc_example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.neural_insights_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.weights_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "Calibration Algorithms in Quantization", "DataLoader", "Dataset", "Design", "Diagnosis", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (70)", "Pythonic Style Access for Configurations", "Quantization", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"block": [0, 159, 164, 179, 189, 192, 197, 203, 319, 360, 402, 457, 483, 485, 490, 493, 496], "mask": [0, 179, 185, 187, 190, 192, 196, 197, 223, 266, 292, 321, 345, 485, 499], "adaptor_registri": [1, 425], "cl": [1, 156, 165, 172, 176, 177, 185, 190, 199, 200, 201, 225, 232, 240, 242, 247, 268, 275, 281, 303, 310, 314, 319, 321, 323, 334, 349, 360, 395, 415], "sourc": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 176, 177, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 254, 255, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 278, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 308, 309, 310, 311, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 362, 364, 366, 367, 368, 369, 371, 372, 374, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 398, 399, 400, 401, 402, 404, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 424, 459, 461, 474, 476, 478, 479, 481, 486], "The": [1, 3, 11, 14, 16, 34, 52, 73, 112, 118, 120, 139, 147, 155, 157, 163, 165, 170, 171, 172, 176, 177, 179, 183, 185, 187, 188, 190, 191, 192, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 211, 212, 213, 223, 224, 225, 226, 227, 231, 232, 240, 242, 245, 247, 250, 254, 255, 256, 266, 267, 268, 269, 270, 274, 275, 281, 282, 287, 289, 290, 291, 293, 294, 296, 298, 299, 300, 302, 303, 305, 306, 308, 309, 310, 311, 314, 316, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 331, 332, 333, 334, 338, 340, 342, 343, 344, 346, 347, 349, 350, 358, 360, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 399, 401, 402, 404, 405, 407, 409, 410, 414, 415, 416, 419, 421, 422, 425, 426, 427, 428, 430, 434, 437, 440, 442, 443, 444, 445, 447, 448, 450, 452, 454, 456, 457, 458, 460, 461, 462, 463, 466, 467, 469, 472, 474, 475, 476, 478, 479, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499], "decor": [1, 16, 34, 66, 67, 69, 147, 165, 176, 177, 185, 190, 199, 201, 240, 247, 281, 296, 303, 310, 314, 319, 321, 323, 334, 337, 349, 360, 395, 415, 421, 422, 425, 496], "us": [1, 13, 16, 34, 42, 43, 47, 48, 69, 102, 104, 115, 140, 150, 155, 157, 163, 164, 170, 172, 176, 177, 179, 183, 185, 190, 194, 195, 199, 201, 202, 204, 205, 207, 208, 211, 212, 221, 222, 223, 224, 225, 226, 227, 230, 239, 240, 241, 242, 247, 254, 255, 264, 265, 266, 267, 268, 269, 270, 273, 280, 281, 285, 286, 287, 289, 290, 292, 296, 297, 298, 303, 310, 311, 314, 316, 319, 321, 322, 323, 324, 325, 328, 331, 334, 337, 338, 342, 343, 345, 349, 360, 377, 382, 383, 387, 390, 392, 395, 399, 401, 402, 405, 406, 407, 408, 415, 419, 420, 421, 422, 425, 426, 442, 443, 445, 447, 448, 449, 450, 452, 454, 456, 458, 459, 461, 462, 463, 464, 465, 466, 468, 469, 472, 474, 476, 478, 479, 481, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499], "regist": [1, 16, 34, 153, 155, 165, 172, 176, 177, 179, 180, 185, 186, 190, 193, 199, 200, 201, 202, 225, 232, 240, 242, 247, 268, 275, 281, 296, 303, 310, 314, 319, 321, 323, 334, 337, 349, 360, 395, 401, 412, 422, 425, 445, 450, 460, 461, 482, 483, 493, 496], "all": [1, 13, 16, 34, 44, 62, 96, 149, 155, 156, 163, 164, 165, 167, 170, 171, 177, 180, 185, 193, 203, 207, 208, 213, 214, 221, 225, 232, 240, 241, 247, 250, 256, 264, 268, 275, 281, 286, 289, 292, 294, 296, 303, 310, 314, 315, 319, 325, 334, 337, 342, 345, 347, 349, 351, 360, 395, 401, 407, 415, 419, 424, 425, 426, 427, 444, 445, 450, 454, 458, 461, 464, 472, 475, 476, 479, 480, 481, 482, 484, 485, 486, 488, 489, 493, 495, 496], "subclass": [1, 16, 34, 165, 176, 177, 185, 190, 199, 201, 218, 222, 225, 232, 240, 247, 261, 265, 268, 275, 281, 296, 303, 310, 314, 319, 321, 323, 334, 337, 349, 360, 395, 425], "paramet": [1, 11, 13, 14, 16, 42, 43, 44, 66, 67, 69, 85, 104, 115, 131, 139, 140, 147, 148, 149, 150, 155, 160, 161, 163, 164, 165, 170, 171, 172, 174, 176, 177, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 211, 212, 222, 223, 225, 232, 236, 240, 242, 247, 254, 255, 265, 266, 268, 275, 278, 281, 282, 284, 285, 286, 287, 289, 290, 292, 293, 294, 296, 298, 299, 300, 302, 303, 304, 305, 306, 308, 309, 310, 311, 314, 316, 319, 320, 321, 322, 323, 324, 328, 334, 338, 340, 342, 343, 345, 346, 347, 349, 350, 354, 358, 360, 377, 382, 383, 387, 395, 399, 401, 402, 404, 407, 411, 412, 414, 415, 421, 426, 444, 445, 448, 450, 457, 460, 461, 475, 481, 482, 485, 488, 490, 492, 493, 495, 496, 498], "framework_specific_info": [1, 3, 11, 14, 44, 46, 425], "base": [1, 3, 13, 16, 34, 44, 45, 46, 85, 104, 115, 119, 121, 131, 143, 150, 153, 159, 163, 165, 171, 176, 177, 178, 179, 180, 186, 193, 200, 202, 208, 213, 216, 221, 223, 225, 232, 240, 250, 256, 259, 264, 266, 268, 275, 281, 296, 302, 304, 310, 311, 314, 316, 321, 331, 334, 338, 349, 351, 358, 359, 360, 392, 395, 399, 422, 424, 425, 426, 427, 445, 449, 450, 454, 461, 462, 469, 470, 472, 481, 485, 488, 490, 492, 494, 496, 499], "framework": [1, 3, 11, 13, 14, 44, 170, 172, 180, 186, 190, 193, 197, 198, 199, 209, 210, 214, 215, 219, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 234, 237, 240, 242, 243, 247, 252, 253, 257, 258, 260, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 277, 279, 281, 287, 296, 297, 324, 332, 338, 349, 350, 351, 352, 354, 393, 399, 407, 424, 425, 427, 443, 447, 450, 451, 455, 456, 457, 458, 460, 461, 462, 485, 486, 488, 491, 494, 495, 496, 497, 498, 499], "layer": [1, 3, 11, 14, 44, 45, 46, 115, 116, 117, 118, 120, 121, 149, 152, 154, 156, 160, 164, 168, 172, 181, 183, 184, 185, 189, 194, 203, 207, 208, 242, 249, 319, 320, 405, 407, 415, 425, 426, 427, 449, 457, 485, 491], "mxnet_util": 2, "util": [2, 12, 17, 104, 109, 110, 138, 141, 148, 150, 151, 152, 161, 178, 180, 207, 208, 249, 288, 290, 320, 330, 341, 343, 375, 380, 391, 426, 427, 428, 443, 450, 461, 464, 488, 496, 497], "ox_util": 2, "oper": [2, 17, 43, 103, 109, 139, 147, 183, 184, 189, 207, 208, 236, 278, 319, 377, 382, 421, 442, 444, 447, 452, 481, 488, 490, 493, 495, 496], "activ": [2, 17, 29, 140, 163, 164, 207, 208, 249, 338, 399, 401, 425, 426, 427, 443, 447, 449, 454, 461, 482, 487, 488, 490, 493, 494, 498], "argmax": [2, 17, 29], "attent": [2, 17, 29, 159, 181, 183, 194, 207, 208, 223, 266, 419, 448, 485], "binary_op": [2, 17, 29], "concat": [2, 17, 29, 146], "conv": [2, 17, 29, 57, 61, 65, 70, 71, 72, 91, 108, 168, 207, 208, 421, 426, 427, 461, 485, 487, 488, 496], "direct_q8": [2, 17, 29], "embed_layernorm": [2, 17, 29], "gather": [2, 13, 17, 29, 207, 208, 319], "gavgpool": [2, 17, 29], "gemm": [2, 17, 29, 207, 208], "lstm": [2, 17, 29], "matmul": [2, 17, 29, 51, 58, 64, 72, 93, 108, 127, 136, 189, 207, 208, 319, 454, 496], "maxpool": [2, 17, 29, 128, 137, 454], "norm": [2, 17, 29], "op": [2, 13, 17, 29, 44, 51, 56, 64, 65, 66, 67, 68, 69, 70, 71, 73, 77, 80, 84, 87, 90, 91, 92, 93, 95, 104, 106, 108, 122, 123, 124, 130, 132, 133, 134, 135, 140, 142, 145, 147, 148, 150, 161, 163, 168, 183, 207, 208, 286, 331, 338, 339, 377, 382, 388, 390, 392, 399, 400, 401, 409, 415, 425, 426, 427, 447, 454, 461, 462, 485, 488, 489, 491, 493, 494, 496, 498], "pad": [2, 17, 29, 70, 71, 223, 240, 266, 281, 445, 495], "pool": [2, 17, 29], "reduc": [2, 17, 29, 207, 208, 425, 443, 449, 461, 462, 481, 482, 485, 486, 488, 489, 490, 493, 496, 498], "resiz": [2, 17, 29, 223, 224, 236, 240, 266, 267, 278, 281, 445, 495], "split": [2, 17, 29, 43, 81, 164, 239, 240, 280, 281, 421, 490, 493, 495], "unary_op": [2, 17, 29], "calibr": [2, 11, 13, 14, 17, 48, 88, 89, 139, 163, 164, 170, 207, 208, 211, 212, 254, 255, 287, 324, 383, 409, 425, 427, 445, 456, 457, 488, 496, 497, 498], "quantiz": [2, 11, 13, 14, 16, 17, 42, 43, 47, 48, 87, 91, 93, 95, 98, 106, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 148, 149, 150, 151, 152, 156, 157, 158, 160, 162, 163, 164, 168, 170, 171, 207, 208, 211, 212, 236, 243, 250, 254, 255, 278, 286, 287, 288, 298, 325, 331, 337, 341, 388, 390, 392, 401, 404, 405, 409, 414, 415, 425, 432, 444, 445, 450, 451, 454, 456, 457, 460, 463, 464, 469, 471, 472, 475, 484, 486, 491, 494, 495, 496, 497, 498], "smooth_quant": [2, 17, 167, 207, 208, 341, 488, 493], "tf_util": 2, "graph_rewrit": [2, 110], "bf16": [2, 56, 86, 110, 148, 207, 208, 338, 399, 425, 426, 454, 461, 466, 471, 475, 481, 489, 496, 499], "gener": [2, 13, 47, 48, 86, 110, 121, 147, 149, 163, 170, 183, 203, 211, 212, 213, 222, 225, 226, 227, 228, 240, 254, 255, 256, 265, 268, 269, 270, 271, 281, 289, 297, 328, 342, 350, 378, 383, 387, 402, 404, 421, 425, 427, 444, 448, 460, 461, 462, 464, 469, 474, 476, 478, 479, 481, 483, 485, 486, 488, 489, 490, 493, 494, 495, 496], "int8": [2, 18, 19, 43, 86, 110, 122, 123, 124, 130, 132, 133, 134, 135, 142, 147, 164, 169, 170, 207, 208, 236, 278, 284, 285, 286, 338, 340, 399, 401, 414, 415, 421, 424, 425, 426, 427, 442, 445, 449, 454, 461, 462, 466, 469, 471, 472, 475, 481, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498], "onnx": [2, 14, 15, 16, 29, 41, 43, 86, 110, 141, 168, 207, 208, 219, 262, 284, 285, 286, 350, 357, 377, 413, 424, 425, 426, 428, 444, 447, 451, 452, 454, 455, 457, 462, 463, 466, 471, 472, 486, 487, 490, 491, 493, 496], "qdq": [2, 42, 86, 110, 111, 112, 141, 163, 164, 207, 208, 284, 285, 286, 425, 447, 452, 457, 471, 472, 488, 491, 493], "graph_bas": [2, 86, 110], "quantize_graph": [2, 110], "qat": [2, 110, 111, 161, 208, 298, 358, 449, 450, 457, 461, 488], "quantize_graph_bas": [2, 110, 111], "quantize_graph_bn": [2, 110, 111], "quantize_graph_concatv2": [2, 110, 111], "quantize_graph_conv": [2, 110, 111], "quantize_graph_for_intel_cpu": [2, 110, 111], "quantize_graph_matmul": [2, 110, 111], "quantize_graph_pool": [2, 110, 111], "transform_graph": [2, 110], "bias_correct": [2, 110, 144], "graph_transform_bas": [2, 110, 144], "insert_log": [2, 110, 144], "rerange_quantized_concat": [2, 110, 144], "graph_convert": [2, 110], "graph_converter_without_calib": [2, 110], "graph_util": [2, 110], "quantize_graph_common": [2, 110], "smooth_quant_calibr": [2, 110], "smooth_quant_scal": [2, 110], "tf2onnx_convert": [2, 110], "torch_util": [2, 244, 288, 341, 493], "layer_wise_qu": [2, 151, 208], "modified_pickl": [2, 151, 152], "torch_load": [2, 151, 152], "bf16_convert": [2, 50, 86, 110, 151], "hawq_metr": [2, 151], "model_wrapp": [2, 15, 151], "pattern_detector": [2, 151], "symbolic_trac": [2, 151], "tensorflow": [2, 50, 52, 74, 75, 76, 86, 94, 100, 101, 102, 103, 104, 105, 109, 110, 111, 113, 116, 129, 139, 140, 141, 144, 147, 202, 207, 208, 222, 223, 224, 225, 228, 230, 232, 240, 242, 247, 265, 266, 267, 268, 271, 273, 275, 281, 285, 286, 287, 290, 292, 296, 297, 298, 324, 332, 343, 345, 349, 350, 358, 376, 377, 381, 382, 383, 393, 415, 422, 424, 425, 426, 443, 444, 447, 448, 449, 451, 454, 455, 457, 458, 461, 462, 463, 471, 472, 485, 486, 487, 492, 493, 496, 498], "kerasadaptor": 3, "kerasqueri": 3, "local_config_fil": [3, 44, 46], "none": [3, 13, 41, 43, 44, 46, 47, 48, 62, 88, 101, 103, 104, 109, 115, 141, 147, 149, 150, 154, 155, 156, 157, 158, 160, 162, 163, 164, 170, 171, 172, 177, 179, 180, 181, 183, 187, 199, 203, 204, 205, 207, 208, 211, 212, 213, 215, 218, 221, 222, 223, 224, 225, 226, 227, 228, 230, 236, 240, 241, 242, 243, 250, 254, 255, 256, 258, 261, 264, 265, 266, 267, 268, 269, 270, 271, 273, 278, 281, 282, 285, 286, 287, 292, 296, 297, 298, 299, 302, 311, 316, 320, 324, 326, 328, 331, 334, 338, 345, 349, 350, 360, 376, 381, 382, 383, 384, 385, 387, 388, 390, 392, 395, 399, 402, 404, 405, 407, 412, 414, 415, 425, 426, 444, 445, 460, 488, 490, 494, 495, 496], "defin": [3, 44, 45, 85, 150, 158, 176, 177, 183, 185, 190, 191, 192, 197, 198, 199, 200, 201, 207, 208, 211, 212, 254, 255, 299, 300, 302, 303, 304, 311, 316, 319, 320, 321, 323, 350, 383, 404, 414, 419, 422, 425, 426, 444, 445, 448, 449, 454, 457, 460, 461, 482, 484, 485, 488, 492, 493, 494, 496, 498], "queri": [3, 13, 44, 46, 147, 163, 183, 194, 207, 208, 426, 427, 488], "interfac": [3, 44, 45, 85, 112, 204, 287, 311, 316, 324, 325, 407, 457, 461, 472, 488, 491], "each": [3, 44, 45, 140, 147, 150, 155, 203, 207, 208, 221, 225, 228, 236, 240, 264, 268, 271, 278, 281, 290, 292, 293, 294, 331, 343, 345, 346, 347, 392, 415, 420, 425, 426, 427, 445, 447, 448, 449, 454, 461, 466, 472, 475, 481, 483, 485, 492, 493, 494, 495, 496, 497], "adapt": [3, 44, 45, 419, 424, 426, 445, 472, 486], "should": [3, 44, 45, 53, 114, 115, 155, 171, 181, 183, 194, 207, 208, 211, 212, 221, 223, 225, 240, 245, 254, 255, 264, 266, 268, 281, 286, 290, 343, 349, 350, 383, 402, 404, 415, 421, 422, 425, 426, 427, 445, 448, 450, 460, 461, 467, 476, 479, 481, 483, 485, 488, 495, 496, 498], "implement": [3, 44, 45, 109, 142, 146, 155, 211, 212, 218, 221, 222, 223, 225, 254, 255, 261, 264, 265, 266, 268, 289, 342, 350, 360, 383, 390, 404, 427, 444, 445, 460, 461, 472, 482, 485, 488, 490, 491, 494, 496, 498], "inherit": [3, 44, 45, 171, 172, 195, 196, 201, 207, 220, 240, 242, 250, 263, 281, 321, 323, 422, 425, 426, 445], "specif": [3, 11, 14, 42, 44, 45, 103, 115, 164, 170, 203, 207, 208, 223, 224, 225, 226, 230, 232, 247, 266, 267, 268, 269, 273, 275, 298, 305, 306, 308, 309, 310, 349, 383, 412, 419, 422, 425, 426, 443, 444, 447, 448, 454, 456, 460, 461, 462, 463, 464, 468, 469, 471, 475, 481, 483, 485, 487, 496, 498], "backend": [3, 15, 41, 42, 44, 45, 168, 207, 208, 209, 210, 214, 215, 219, 223, 224, 226, 227, 228, 229, 230, 234, 237, 240, 246, 247, 252, 253, 257, 258, 260, 262, 266, 267, 269, 270, 271, 272, 273, 277, 279, 281, 297, 332, 350, 351, 352, 354, 393, 421, 427, 447, 450, 456, 457, 461, 462, 470, 487, 495, 498], "own": [3, 44, 45, 73, 155, 221, 240, 264, 281, 360, 422, 426, 444, 445, 457, 460, 483, 490, 492, 497], "mxnetadaptor": 11, "do": [11, 14, 149, 171, 199, 207, 208, 222, 223, 265, 266, 282, 286, 289, 292, 322, 342, 345, 414, 419, 426, 445, 450, 454, 457, 460, 461, 476, 479, 485, 489, 491, 493, 496], "inspect": [11, 14, 491, 494], "tensor": [11, 13, 14, 15, 16, 43, 69, 104, 147, 150, 155, 156, 163, 164, 179, 180, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 208, 240, 281, 284, 286, 319, 321, 331, 358, 392, 415, 421, 427, 444, 445, 447, 485, 488, 491, 494, 495, 496], "dict": [11, 13, 14, 44, 115, 147, 148, 149, 150, 155, 163, 164, 165, 170, 176, 179, 180, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 211, 212, 222, 241, 247, 254, 255, 265, 284, 286, 291, 292, 293, 294, 296, 299, 302, 303, 304, 311, 314, 316, 319, 320, 321, 322, 323, 328, 331, 337, 340, 344, 345, 346, 347, 349, 350, 358, 383, 398, 401, 402, 404, 405, 407, 414, 415, 421, 426, 452, 460, 485, 487, 488, 493, 494, 496], "configur": [11, 13, 14, 44, 117, 148, 163, 170, 203, 204, 207, 208, 211, 212, 214, 225, 228, 241, 246, 254, 255, 268, 271, 282, 286, 287, 298, 299, 300, 302, 311, 316, 320, 324, 325, 331, 349, 350, 360, 383, 392, 401, 404, 406, 407, 413, 414, 421, 422, 425, 426, 445, 447, 461, 468, 482, 483, 485, 488, 491, 495, 496, 499], "mxnet": [12, 13, 16, 208, 218, 222, 225, 228, 232, 240, 261, 265, 268, 271, 275, 281, 287, 296, 324, 349, 350, 355, 383, 424, 425, 426, 443, 444, 451, 454, 457, 458, 461, 462, 463, 487, 496, 498], "init": [12, 17, 42, 167, 173, 180, 182, 445, 460, 496], "optyp": [13, 207, 208, 284, 426], "enum": 13, "type": [13, 16, 42, 43, 44, 73, 95, 104, 115, 121, 131, 139, 147, 148, 149, 150, 155, 163, 164, 165, 172, 176, 177, 183, 184, 185, 190, 199, 200, 201, 203, 205, 207, 208, 221, 223, 225, 232, 240, 242, 247, 264, 266, 268, 275, 281, 286, 289, 290, 292, 296, 303, 310, 314, 319, 321, 323, 328, 334, 338, 340, 342, 343, 345, 349, 358, 360, 387, 388, 395, 399, 401, 402, 414, 415, 420, 425, 426, 445, 447, 450, 452, 454, 457, 461, 462, 482, 488, 490, 492, 495, 496, 497, 498], "isiter": 13, "obj": [13, 104, 180, 203, 222, 265, 282, 287, 298, 299, 300, 302, 311, 316, 320, 324, 350, 360, 383, 404, 407, 415], "bool": [13, 42, 140, 147, 149, 155, 161, 163, 164, 185, 207, 208, 223, 225, 236, 240, 266, 268, 278, 281, 286, 290, 296, 319, 337, 343, 349, 398, 402, 414, 415, 444, 445, 460, 487, 495], "check": [13, 66, 67, 104, 147, 163, 164, 203, 214, 225, 268, 284, 320, 414, 415, 420, 424, 447, 450, 458, 465, 467, 469, 476, 479, 480, 491], "whether": [13, 104, 115, 147, 149, 155, 164, 185, 207, 208, 221, 223, 236, 240, 264, 266, 278, 281, 290, 292, 296, 319, 343, 345, 349, 407, 414, 415, 425, 445, 460, 488, 490, 493, 495], "object": [13, 42, 43, 44, 73, 85, 104, 115, 131, 148, 150, 153, 155, 161, 163, 170, 171, 179, 180, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 211, 212, 213, 223, 224, 225, 240, 241, 243, 254, 255, 256, 266, 267, 268, 281, 282, 287, 292, 300, 302, 305, 306, 308, 309, 310, 311, 316, 319, 320, 321, 322, 323, 324, 328, 341, 345, 349, 350, 358, 359, 377, 382, 383, 387, 401, 404, 407, 414, 415, 421, 422, 426, 432, 442, 444, 445, 453, 460, 461, 463, 484, 485, 487, 488, 495, 496, 497, 499], "i": [13, 43, 44, 47, 48, 52, 53, 56, 59, 63, 69, 81, 84, 104, 131, 142, 147, 149, 150, 153, 155, 157, 161, 163, 169, 170, 171, 179, 183, 184, 190, 195, 196, 197, 198, 199, 200, 202, 203, 207, 208, 211, 212, 213, 221, 222, 223, 224, 225, 226, 227, 230, 232, 236, 240, 241, 243, 247, 249, 250, 254, 255, 256, 264, 265, 266, 267, 268, 269, 270, 273, 275, 278, 281, 289, 292, 294, 296, 298, 303, 311, 316, 320, 321, 325, 332, 342, 345, 347, 349, 350, 360, 366, 367, 371, 383, 388, 393, 401, 402, 404, 414, 415, 419, 420, 421, 422, 425, 426, 427, 428, 430, 434, 437, 440, 442, 443, 444, 445, 447, 448, 449, 450, 452, 453, 454, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 472, 474, 475, 476, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499], "iter": [13, 15, 104, 139, 147, 164, 170, 184, 190, 197, 201, 207, 208, 211, 212, 216, 221, 225, 226, 243, 254, 255, 259, 264, 268, 269, 321, 323, 350, 383, 404, 407, 421, 422, 425, 442, 444, 445, 461, 485, 487, 488, 494, 496, 498], "return": [13, 16, 44, 52, 66, 67, 69, 73, 104, 115, 147, 148, 149, 150, 155, 161, 163, 164, 165, 170, 172, 176, 177, 180, 183, 185, 186, 190, 193, 199, 200, 201, 203, 205, 211, 212, 225, 232, 236, 240, 241, 242, 247, 254, 255, 268, 275, 278, 281, 286, 289, 290, 292, 293, 294, 296, 302, 303, 310, 314, 319, 320, 321, 323, 328, 334, 338, 340, 342, 343, 345, 346, 347, 349, 350, 354, 358, 360, 377, 382, 383, 387, 395, 399, 401, 402, 404, 407, 412, 414, 415, 421, 422, 426, 427, 444, 445, 450, 460, 463, 483, 485, 488, 493, 494, 496], "true": [13, 84, 112, 145, 147, 155, 164, 170, 176, 207, 208, 221, 223, 225, 226, 239, 240, 241, 264, 266, 268, 269, 280, 281, 286, 290, 296, 314, 337, 343, 349, 360, 383, 398, 402, 407, 414, 415, 426, 444, 445, 447, 450, 454, 460, 461, 464, 467, 468, 487, 488, 490, 493, 494, 495, 496, 498], "els": [13, 147, 164, 208, 221, 264, 360, 412, 469, 494], "fals": [13, 15, 41, 42, 46, 47, 48, 70, 71, 88, 91, 98, 101, 102, 104, 112, 130, 135, 142, 145, 146, 147, 155, 161, 163, 164, 170, 172, 207, 208, 213, 215, 218, 222, 223, 225, 236, 240, 241, 242, 243, 249, 256, 258, 261, 265, 266, 268, 278, 281, 292, 296, 345, 349, 360, 383, 402, 407, 415, 425, 426, 444, 445, 454, 460, 461, 474, 478, 487, 488, 490, 493, 494, 495, 496, 498], "boolean": 13, "ensure_list": 13, "x": [13, 53, 73, 149, 184, 207, 208, 222, 240, 265, 281, 328, 387, 402, 443, 447, 450, 462, 463, 488, 493, 494, 495, 497], "ensur": [13, 240, 281, 328, 387, 450, 488, 495], "list": [13, 42, 43, 52, 104, 139, 147, 148, 149, 150, 159, 163, 170, 177, 183, 184, 189, 194, 199, 203, 207, 208, 211, 212, 216, 223, 236, 240, 241, 254, 255, 259, 266, 278, 281, 285, 286, 289, 290, 292, 293, 294, 296, 303, 311, 316, 319, 322, 337, 342, 343, 345, 346, 347, 349, 350, 358, 366, 367, 371, 383, 398, 402, 404, 405, 415, 421, 424, 425, 445, 452, 454, 458, 461, 464, 469, 471, 474, 475, 478, 483, 485, 487, 488, 489, 493, 494, 496], "input": [13, 15, 42, 43, 44, 52, 59, 63, 66, 67, 69, 70, 71, 73, 81, 82, 84, 85, 104, 108, 109, 115, 121, 140, 147, 148, 158, 160, 161, 162, 163, 164, 168, 183, 184, 203, 207, 208, 211, 212, 223, 224, 225, 227, 236, 239, 240, 245, 254, 255, 266, 267, 268, 270, 278, 280, 281, 284, 285, 286, 349, 350, 354, 358, 383, 404, 412, 414, 415, 422, 425, 426, 442, 443, 444, 445, 447, 448, 449, 450, 452, 454, 456, 460, 461, 462, 463, 464, 469, 485, 487, 488, 490, 493, 494, 495, 498], "check_mx_vers": 13, "version": [13, 52, 103, 158, 163, 183, 208, 285, 286, 341, 419, 421, 425, 454, 458, 459, 461, 474, 476, 478, 479, 486, 493, 496, 497], "str": [13, 42, 139, 148, 150, 155, 159, 160, 161, 163, 164, 165, 172, 180, 183, 199, 207, 208, 223, 224, 225, 232, 236, 240, 242, 246, 247, 266, 267, 268, 275, 278, 281, 285, 286, 289, 290, 292, 294, 296, 303, 314, 337, 340, 342, 343, 345, 347, 349, 368, 376, 378, 381, 382, 398, 401, 402, 407, 412, 415, 416, 444, 445, 460, 487, 494, 495], "mx": 13, "__version__": [13, 153], "combine_cap": 13, "current": [13, 69, 103, 160, 179, 183, 186, 190, 207, 208, 298, 305, 306, 308, 309, 310, 319, 321, 328, 332, 387, 393, 415, 421, 422, 425, 427, 443, 450, 454, 461, 464, 468, 481, 483, 485, 488, 493, 496], "new": [13, 16, 147, 160, 170, 213, 225, 240, 241, 256, 268, 281, 320, 360, 420, 426, 450, 461, 462, 475, 481, 482, 485, 486, 488, 490, 491, 492, 495, 497, 498], "combin": [13, 163, 207, 208, 211, 212, 236, 250, 254, 255, 278, 350, 383, 404, 415, 421, 425, 457, 461, 484, 486, 488, 489, 490, 495, 496], "capabl": [13, 46, 338, 399, 426, 427, 442, 454, 461, 462, 472, 485, 487, 488, 496, 498], "contain": [13, 66, 67, 69, 73, 138, 147, 150, 155, 163, 164, 170, 171, 180, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 207, 208, 211, 212, 223, 224, 225, 254, 255, 266, 267, 268, 282, 286, 287, 292, 293, 294, 298, 311, 314, 316, 319, 320, 321, 322, 323, 324, 345, 346, 347, 350, 383, 404, 407, 414, 443, 445, 448, 457, 460, 482, 485, 490, 494, 496, 497], "make_nc_model": 13, "target": [13, 42, 43, 101, 149, 183, 201, 203, 208, 320, 323, 328, 387, 445, 450, 461, 485, 494, 495, 496, 498], "sym_model": 13, "ctx": 13, "input_desc": 13, "convert": [13, 43, 47, 48, 49, 51, 52, 53, 54, 55, 65, 73, 85, 98, 99, 101, 102, 103, 104, 130, 135, 141, 148, 163, 183, 207, 208, 223, 236, 239, 240, 266, 278, 280, 281, 285, 292, 298, 320, 338, 345, 399, 402, 421, 426, 461, 462, 466, 488, 489, 493, 495, 496], "symbol": [13, 148, 161, 163, 289, 342, 350, 383, 421, 463], "model": [13, 15, 16, 29, 41, 42, 43, 44, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 115, 117, 139, 140, 141, 147, 148, 149, 150, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 168, 170, 171, 176, 180, 181, 183, 190, 191, 192, 195, 197, 198, 199, 201, 203, 207, 208, 211, 212, 219, 222, 223, 225, 240, 241, 244, 245, 254, 255, 262, 265, 266, 268, 281, 282, 284, 285, 286, 287, 288, 296, 297, 298, 299, 302, 305, 306, 308, 309, 310, 311, 316, 320, 321, 322, 323, 324, 325, 326, 328, 331, 334, 341, 349, 350, 360, 376, 381, 382, 383, 384, 385, 387, 388, 390, 392, 395, 401, 402, 404, 410, 412, 414, 415, 417, 421, 422, 424, 425, 427, 432, 442, 443, 444, 445, 447, 448, 449, 450, 451, 456, 457, 459, 460, 462, 464, 469, 471, 472, 475, 481, 483, 484, 486, 488, 491, 492, 494, 495, 496, 497, 498], "an": [13, 66, 67, 69, 104, 140, 142, 150, 153, 155, 163, 169, 190, 207, 208, 216, 221, 225, 240, 244, 249, 259, 264, 268, 281, 288, 289, 293, 294, 302, 303, 325, 341, 342, 346, 347, 350, 377, 382, 383, 402, 404, 415, 417, 419, 421, 422, 424, 425, 427, 443, 444, 445, 446, 447, 452, 460, 461, 462, 464, 468, 469, 472, 481, 483, 485, 486, 488, 492, 493, 494, 495, 496], "neural": [13, 150, 170, 171, 185, 186, 187, 188, 199, 207, 208, 235, 236, 237, 240, 241, 244, 247, 250, 278, 279, 281, 283, 288, 295, 296, 298, 311, 316, 319, 322, 324, 325, 330, 336, 341, 348, 349, 350, 354, 361, 383, 390, 391, 397, 412, 417, 420, 425, 426, 427, 442, 443, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 462, 463, 465, 466, 469, 471, 472, 474, 476, 478, 479, 480, 483, 484, 486, 488, 490, 491, 493, 494, 495, 496, 498, 499], "compressor": [13, 170, 171, 187, 188, 199, 207, 208, 235, 236, 237, 240, 241, 244, 247, 250, 278, 279, 281, 283, 288, 295, 296, 298, 319, 322, 324, 325, 330, 336, 341, 348, 349, 350, 354, 361, 383, 391, 397, 412, 417, 420, 422, 425, 426, 427, 442, 443, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 462, 463, 464, 465, 469, 471, 472, 474, 476, 478, 479, 480, 483, 484, 485, 486, 488, 490, 491, 493, 494, 495, 496, 497, 498, 499], "tupl": [13, 104, 147, 163, 177, 208, 211, 212, 236, 240, 254, 255, 278, 281, 286, 337, 350, 383, 398, 404, 426, 445, 460, 461, 488, 495], "symnet": 13, "arg": [13, 52, 104, 223, 224, 225, 266, 267, 268, 319, 328, 387, 402, 410, 411, 445, 450, 461, 470, 488, 490, 493, 494, 495], "aux": 13, "data": [13, 42, 43, 54, 104, 139, 147, 150, 155, 160, 163, 164, 168, 183, 207, 208, 211, 212, 241, 243, 254, 255, 286, 288, 328, 338, 340, 341, 350, 376, 381, 383, 387, 399, 401, 404, 407, 412, 415, 424, 425, 443, 444, 445, 450, 454, 455, 458, 460, 461, 462, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497], "descript": [13, 131, 402, 420, 421, 426, 427, 444, 493], "ncmodel": 13, "fuse": [13, 57, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 90, 91, 92, 93, 95, 130, 135, 161, 163, 168, 421, 493, 494], "suppli": 13, "get_framework_nam": 13, "get": [13, 42, 44, 66, 67, 69, 103, 104, 147, 149, 156, 160, 163, 164, 170, 177, 179, 180, 181, 183, 186, 193, 200, 201, 202, 203, 205, 208, 216, 240, 241, 247, 249, 259, 281, 286, 319, 321, 323, 331, 338, 340, 349, 358, 383, 392, 399, 401, 407, 415, 426, 443, 453, 457, 458, 461, 467, 486, 490, 493, 496, 497, 500], "name": [13, 43, 44, 52, 66, 67, 69, 103, 104, 109, 115, 139, 147, 148, 149, 150, 155, 156, 160, 161, 163, 164, 165, 170, 176, 177, 179, 183, 185, 190, 193, 194, 199, 200, 201, 202, 203, 205, 207, 208, 223, 224, 225, 228, 232, 238, 240, 241, 245, 248, 249, 266, 267, 268, 271, 275, 281, 284, 285, 286, 291, 296, 314, 319, 321, 323, 338, 340, 344, 349, 354, 358, 360, 383, 399, 401, 405, 407, 415, 421, 426, 427, 445, 447, 450, 452, 454, 459, 460, 461, 463, 467, 474, 478, 482, 485, 488, 491, 492, 494, 496, 498, 499], "context": [13, 415, 487, 490], "prepare_model_data": 13, "nc_model": [13, 311, 316], "data_x": 13, "prepar": [13, 163, 421, 424, 445, 450, 455, 488], "dataload": [13, 15, 42, 139, 140, 149, 150, 160, 163, 164, 170, 180, 181, 183, 199, 203, 211, 212, 223, 234, 244, 254, 255, 266, 277, 282, 288, 311, 316, 325, 341, 376, 381, 383, 404, 407, 421, 424, 425, 426, 447, 448, 449, 450, 455, 456, 461, 462, 484, 488, 489, 493, 494, 495, 497, 498], "need": [13, 42, 104, 108, 160, 164, 170, 183, 199, 208, 211, 212, 213, 221, 222, 225, 232, 240, 243, 245, 246, 254, 255, 256, 264, 265, 268, 275, 281, 286, 325, 331, 349, 350, 360, 383, 392, 404, 414, 415, 421, 425, 444, 445, 447, 448, 450, 457, 461, 464, 466, 467, 470, 474, 475, 476, 478, 479, 481, 482, 485, 487, 488, 489, 490, 491, 493, 495, 496, 498], "run": [13, 139, 147, 155, 164, 170, 190, 203, 207, 208, 211, 212, 222, 239, 241, 254, 255, 265, 280, 320, 321, 328, 350, 383, 387, 404, 420, 425, 442, 450, 453, 454, 461, 464, 466, 468, 469, 470, 472, 474, 475, 476, 478, 479, 481, 486, 488, 490, 491, 492, 494, 496, 498], "loader": [13, 139, 211, 212, 254, 255, 350, 383, 404, 410, 444, 488], "dataloaderwrap": 13, "prepare_model": 13, "create_data_exampl": 13, "creat": [13, 16, 104, 153, 207, 208, 213, 223, 225, 243, 256, 266, 268, 292, 302, 303, 338, 345, 377, 382, 399, 401, 402, 407, 419, 422, 425, 445, 463, 474, 476, 478, 479, 482, 488, 492, 494, 496, 497], "exampl": [13, 150, 155, 163, 164, 170, 177, 183, 184, 199, 207, 208, 223, 224, 225, 236, 240, 266, 267, 268, 278, 281, 292, 293, 294, 296, 322, 345, 346, 347, 349, 350, 360, 383, 401, 402, 404, 419, 420, 424, 426, 427, 432, 456, 457, 464, 467, 468, 469, 472, 489, 491, 495, 496, 497, 500], "prepare_dataload": 13, "io": [13, 155], "ndarray_to_devic": 13, "ndarrai": [13, 42, 43, 66, 67, 69, 240, 281, 405, 453, 495], "devic": [13, 78, 88, 89, 90, 91, 92, 93, 96, 106, 130, 135, 146, 149, 154, 155, 164, 180, 183, 184, 199, 203, 207, 208, 426, 444, 448, 461, 462, 464, 467, 472, 481, 487, 490], "is_model_quant": 13, "query_quantizable_nod": 13, "node": [13, 42, 43, 49, 52, 53, 54, 55, 59, 61, 63, 66, 67, 69, 73, 76, 79, 81, 82, 83, 97, 101, 102, 104, 109, 131, 139, 147, 183, 284, 286, 358, 382, 425, 426, 447, 450, 494, 496, 499], "given": [13, 16, 66, 67, 69, 103, 104, 115, 147, 156, 163, 240, 281, 292, 345, 383, 422, 427, 485, 493, 495], "map": [13, 43, 104, 147, 155, 208, 240, 281, 284, 286, 287, 291, 293, 294, 296, 311, 316, 321, 324, 344, 346, 347, 349, 445, 450, 460, 461, 474, 478, 485, 488, 490], "quantize_sym_model": 13, "qconfig": [13, 163, 490, 494], "accord": [13, 121, 163, 170, 207, 208, 223, 224, 225, 240, 266, 267, 268, 281, 331, 390, 392, 407, 422, 425, 445, 450, 485, 489, 493, 495, 496], "run_forward": 13, "b_filter": 13, "collector": [13, 150, 405], "pre_batch": 13, "post_batch": 13, "forward": [13, 203, 424, 426, 461, 485, 487, 488, 490, 493, 494], "propag": [13, 99], "filter": [13, 223, 224, 225, 226, 227, 228, 230, 234, 266, 267, 268, 269, 270, 271, 273, 277, 288, 341, 415, 427, 445, 457, 485, 494], "which": [13, 42, 54, 82, 109, 149, 150, 155, 160, 179, 183, 184, 186, 190, 191, 192, 194, 197, 198, 199, 201, 203, 207, 208, 223, 224, 225, 236, 241, 266, 267, 268, 278, 289, 294, 303, 305, 306, 308, 309, 310, 314, 319, 320, 321, 323, 328, 342, 347, 349, 354, 360, 383, 387, 415, 419, 421, 422, 425, 426, 427, 443, 444, 445, 447, 448, 450, 453, 454, 457, 460, 461, 462, 463, 465, 469, 472, 475, 481, 482, 484, 485, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498], "batch": [13, 163, 213, 215, 216, 221, 222, 243, 256, 258, 259, 264, 265, 404, 444, 448, 449, 461, 484, 485, 495, 496, 499], "infer": [13, 104, 164, 183, 287, 324, 358, 360, 383, 404, 425, 426, 443, 448, 449, 461, 462, 481, 483, 485, 486, 488, 490, 493, 494, 496], "collect": [13, 16, 43, 163, 238, 240, 243, 245, 246, 248, 281, 294, 296, 347, 349, 405, 415, 426, 488, 494, 496], "inform": [13, 150, 179, 180, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 208, 211, 212, 243, 245, 246, 254, 255, 319, 321, 322, 323, 325, 349, 415, 419, 420, 423, 424, 425, 426, 427, 428, 430, 434, 437, 440, 443, 448, 454, 461, 463, 476, 479, 482, 485, 489, 491, 494, 498, 499, 500], "dure": [13, 139, 153, 155, 185, 189, 201, 207, 208, 319, 323, 360, 415, 426, 447, 461, 463, 483, 484, 485, 488, 493, 494, 498], "call": [13, 42, 155, 160, 165, 183, 191, 192, 197, 292, 321, 345, 421, 422, 425, 444, 456, 470, 472, 482, 488, 493, 494, 495], "prior": [13, 87, 496], "after": [13, 77, 163, 181, 185, 190, 192, 197, 207, 208, 223, 236, 240, 243, 266, 278, 281, 321, 388, 402, 415, 422, 426, 445, 447, 448, 449, 452, 457, 460, 461, 474, 475, 478, 482, 483, 484, 485, 488, 489, 492, 493, 494, 495, 496], "count": [13, 422, 445, 490], "int": [13, 16, 42, 43, 104, 139, 147, 159, 163, 164, 181, 207, 208, 222, 223, 224, 236, 240, 265, 266, 267, 278, 281, 285, 286, 290, 292, 296, 303, 343, 345, 349, 368, 377, 382, 401, 402, 415, 444, 445, 460, 461, 487, 495], "make_symbol_block": 13, "gluon": [13, 350, 383, 463], "symbolblock": 13, "make_modul": 13, "parse_tune_config": 13, "tune_cfg": [13, 147, 148, 163, 425, 427, 496], "quantizable_nod": 13, "strategi": [13, 163, 197, 207, 208, 209, 225, 252, 268, 288, 341, 424, 425, 426, 427, 432, 443, 444, 450, 457, 461, 469, 481, 486, 487, 488, 489, 491, 497, 498], "config": [13, 114, 115, 117, 121, 163, 170, 179, 180, 181, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 207, 211, 212, 223, 254, 255, 266, 305, 306, 308, 309, 310, 311, 316, 319, 320, 321, 322, 323, 338, 339, 341, 350, 377, 382, 399, 400, 401, 402, 404, 407, 414, 415, 422, 424, 426, 427, 432, 442, 444, 447, 448, 449, 450, 452, 455, 457, 460, 461, 462, 463, 484, 485, 487, 488, 489, 490, 492, 494, 496], "tune": [13, 44, 170, 207, 208, 211, 212, 223, 225, 254, 255, 266, 268, 287, 324, 326, 327, 328, 329, 331, 332, 333, 334, 337, 338, 339, 340, 350, 360, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 398, 399, 400, 401, 404, 415, 425, 426, 443, 444, 445, 447, 450, 457, 459, 461, 462, 481, 483, 485, 486, 489, 490, 491, 492, 494, 498], "from": [13, 43, 44, 60, 66, 67, 69, 104, 147, 155, 156, 160, 163, 170, 171, 172, 177, 179, 180, 186, 187, 188, 189, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 207, 208, 211, 212, 213, 216, 220, 223, 224, 225, 226, 227, 228, 230, 235, 236, 242, 243, 246, 254, 255, 256, 259, 263, 266, 267, 268, 269, 270, 271, 273, 278, 282, 284, 285, 286, 289, 292, 293, 294, 298, 303, 319, 320, 321, 323, 338, 340, 342, 345, 346, 347, 350, 358, 360, 383, 399, 401, 402, 404, 407, 414, 415, 419, 421, 422, 425, 427, 442, 444, 445, 447, 448, 449, 450, 451, 452, 453, 455, 457, 460, 462, 463, 464, 468, 469, 470, 472, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497], "distribute_calib_tensor": 13, "calib_tensor": 13, "calib_cfg": 13, "tensor_to_nod": 13, "distribut": [13, 16, 142, 169, 207, 208, 213, 215, 216, 218, 221, 222, 243, 256, 258, 259, 261, 264, 265, 409, 424, 426, 444, 448, 458, 476, 479, 486, 488, 490, 491, 493, 497, 499], "depend": [13, 211, 212, 241, 254, 255, 350, 383, 404, 420, 453, 454, 487, 488, 496], "algorithm": [13, 149, 163, 176, 204, 208, 289, 296, 304, 341, 342, 349, 407, 409, 422, 425, 426, 427, 448, 449, 454, 457, 470, 475, 485, 488, 490, 494, 498], "set": [13, 43, 56, 95, 104, 114, 147, 155, 160, 163, 170, 203, 205, 207, 208, 211, 212, 213, 223, 225, 228, 240, 241, 246, 247, 254, 255, 256, 266, 268, 271, 281, 292, 298, 311, 316, 320, 325, 345, 349, 350, 358, 382, 383, 402, 404, 412, 415, 419, 422, 426, 442, 444, 445, 448, 450, 452, 454, 456, 457, 458, 460, 461, 462, 464, 466, 468, 482, 485, 487, 488, 490, 492, 493, 496, 498], "kl": [13, 16, 207, 208, 405, 409, 426, 427, 443, 454, 461, 496, 498], "minmax": [13, 16, 426, 427, 443, 454, 488, 498], "calib_model": 13, "qsym_model": 13, "calib_data": 13, "calibdata": 13, "threshold": [13, 166, 405, 409, 460], "amp_convert": 13, "amp_cfg": 13, "support": [13, 42, 43, 96, 103, 160, 168, 172, 180, 186, 193, 197, 198, 207, 208, 211, 212, 222, 223, 225, 232, 236, 240, 242, 243, 244, 247, 254, 255, 265, 266, 268, 275, 278, 281, 288, 296, 298, 303, 319, 321, 325, 332, 338, 341, 349, 350, 354, 360, 383, 393, 399, 402, 404, 407, 409, 415, 417, 424, 426, 461, 464, 469, 472, 475, 481, 486, 489, 492, 496, 497], "amp": [13, 464, 471], "wrap": [13, 104, 115, 172, 242, 292, 345, 421, 450, 476, 479], "dataiterload": 13, "data_it": [13, 183], "collectorbas": 13, "calibcollector": 13, "include_tensors_kl": 13, "include_tensors_minmax": 13, "num_bin": [13, 16, 405], "8001": [13, 405], "tensorcollector": 13, "include_nod": 13, "qtensor_to_tensor": 13, "build": [13, 42, 114, 165, 166, 168, 169, 194, 299, 302, 353, 355, 357, 358, 359, 425, 426, 427, 458, 463, 474, 476, 478, 479, 482, 486, 492, 496], "up": [13, 99, 194, 240, 281, 320, 450, 451, 454, 457, 472, 476, 479, 481, 486, 487, 488, 492, 495, 496, 498], "namecollector": 13, "cache_kl": 13, "cache_minmax": 13, "tensors_kl": 13, "tensors_minmax": 13, "onnxruntimeadaptor": 14, "rt": 14, "onnxrt_qlinearopsadaptor": [14, 425], "onnxrt_integeropsadaptor": 14, "onnxrt_qdqadaptor": 14, "onnxrtaug": 15, "dump_op_typ": 15, "black_nod": [15, 139], "white_nod": 15, "cpuexecutionprovid": [15, 41, 42, 462, 488], "reduce_rang": [15, 41, 42, 207, 208, 427, 487], "augment": 15, "dump": [15, 153, 163, 170, 286, 415, 488, 491, 494], "calib_registri": 16, "calib_method": 16, "calibratorbas": 16, "minmaxcalibr": 16, "percentilecalibr": 16, "2048": [16, 415], "percentil": [16, 139, 164, 443], "99": [16, 493, 499], "999": [16, 498], "option": [16, 104, 155, 164, 185, 207, 208, 211, 212, 223, 240, 254, 255, 266, 281, 285, 286, 292, 298, 319, 325, 338, 341, 345, 349, 350, 383, 399, 401, 402, 404, 408, 415, 426, 427, 444, 445, 454, 458, 461, 475, 485, 488, 490, 492, 495, 496, 498], "number": [16, 66, 67, 104, 139, 163, 164, 177, 181, 187, 188, 207, 208, 221, 224, 236, 240, 264, 267, 278, 281, 293, 294, 296, 319, 328, 346, 347, 349, 377, 382, 387, 402, 407, 415, 442, 444, 445, 450, 460, 485, 488, 490, 492, 495, 496], "bin": [16, 155, 156, 415, 453], "histogram": [16, 405, 415, 494], "valu": [16, 43, 54, 66, 67, 69, 88, 89, 104, 142, 147, 155, 163, 169, 170, 177, 179, 183, 184, 194, 202, 203, 204, 205, 207, 208, 211, 212, 223, 226, 227, 236, 240, 241, 254, 255, 266, 269, 270, 278, 281, 292, 296, 320, 328, 331, 338, 345, 349, 350, 383, 387, 392, 399, 401, 402, 404, 405, 407, 415, 421, 426, 427, 443, 445, 447, 454, 460, 461, 462, 467, 483, 485, 487, 488, 490, 491, 493, 495, 496, 498], "default": [16, 96, 147, 155, 164, 203, 205, 207, 208, 211, 212, 215, 223, 224, 225, 236, 240, 254, 255, 258, 266, 267, 268, 278, 281, 285, 286, 289, 298, 320, 340, 342, 349, 358, 401, 407, 415, 421, 425, 444, 445, 454, 457, 458, 460, 461, 462, 469, 472, 474, 478, 483, 485, 487, 488, 489, 490, 492, 493, 495, 496, 498], "float": [16, 43, 139, 140, 150, 164, 185, 190, 200, 203, 207, 208, 223, 236, 266, 278, 290, 292, 293, 294, 321, 343, 345, 346, 347, 398, 402, 412, 415, 445, 460, 487, 488, 493, 495], "A": [16, 53, 73, 74, 102, 115, 139, 140, 147, 153, 163, 164, 171, 176, 177, 179, 180, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 207, 208, 225, 240, 243, 245, 246, 268, 281, 282, 289, 292, 293, 294, 296, 299, 302, 303, 304, 311, 314, 316, 319, 320, 321, 322, 323, 328, 342, 345, 346, 347, 349, 350, 354, 358, 387, 404, 415, 424, 426, 444, 445, 451, 454, 460, 461, 463, 474, 475, 478, 481, 485, 486, 488, 490, 493, 495, 496, 498], "between": [16, 42, 142, 169, 196, 207, 208, 240, 281, 293, 296, 346, 349, 377, 382, 415, 421, 425, 426, 427, 443, 447, 448, 457, 460, 461, 472, 488, 491, 492, 493, 495, 496], "0": [16, 43, 52, 89, 104, 147, 155, 163, 164, 166, 168, 172, 177, 179, 181, 203, 207, 208, 213, 215, 218, 222, 223, 226, 227, 230, 236, 240, 242, 243, 256, 258, 261, 265, 266, 269, 270, 273, 278, 281, 286, 287, 296, 303, 311, 316, 324, 349, 360, 383, 388, 402, 421, 444, 445, 448, 450, 452, 453, 454, 458, 459, 460, 461, 462, 467, 469, 474, 478, 485, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498], "100": [16, 170, 177, 207, 208, 225, 268, 402, 442, 445, 450, 456, 461, 487, 488, 493, 495, 496, 498, 499], "klcalibr": 16, "128": [16, 163, 164, 223, 226, 227, 240, 266, 269, 270, 281, 445, 461, 488, 495], "num_quantized_bin": 16, "histogramcollector": 16, "collctor": 16, "smooth_distribut": 16, "p": [16, 482, 490], "ep": [16, 169, 462], "0001": [16, 177, 207, 208, 448, 461, 487], "smooth": [16, 139, 140, 147, 160, 168, 207, 208, 337, 485], "discret": [16, 177, 496], "mai": [16, 147, 153, 155, 305, 306, 308, 309, 310, 402, 419, 420, 426, 443, 447, 452, 453, 459, 462, 474, 478, 486, 488, 496], "have": [16, 73, 82, 140, 147, 155, 180, 184, 186, 193, 221, 243, 264, 289, 292, 319, 321, 342, 345, 349, 383, 401, 402, 419, 420, 426, 427, 444, 445, 447, 450, 454, 459, 460, 461, 462, 464, 481, 483, 485, 488, 490, 493, 496, 497], "been": [16, 155, 180, 186, 193, 289, 319, 321, 342, 420, 422, 427, 448, 461, 462, 481, 490, 493], "normal": [16, 33, 240, 281, 294, 347, 461, 483, 490, 493, 495], "1": [16, 42, 43, 53, 73, 88, 104, 108, 112, 145, 147, 155, 158, 160, 163, 164, 166, 168, 169, 170, 172, 177, 179, 191, 192, 194, 207, 208, 213, 215, 218, 222, 223, 224, 226, 227, 230, 231, 236, 240, 241, 242, 243, 256, 258, 261, 265, 266, 267, 269, 270, 273, 274, 278, 281, 287, 292, 293, 294, 296, 311, 316, 321, 324, 325, 345, 346, 347, 349, 360, 383, 401, 402, 407, 419, 421, 424, 425, 427, 443, 444, 445, 447, 448, 452, 454, 455, 458, 460, 462, 465, 467, 483, 484, 485, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498], "replac": [16, 160, 164, 294, 347, 450, 461, 472, 491], "zero": [16, 43, 149, 164, 190, 203, 240, 281, 321, 415, 424, 485, 488, 490, 493, 495, 496], "multipli": 16, "scale": [16, 43, 99, 140, 142, 149, 158, 160, 162, 163, 164, 168, 169, 236, 240, 278, 281, 488, 490, 492, 493, 495, 496], "factor": [16, 140, 490, 493, 499], "take": [16, 185, 208, 211, 212, 216, 240, 245, 254, 255, 259, 281, 319, 328, 349, 350, 383, 387, 404, 419, 421, 422, 444, 447, 448, 454, 461, 481, 485, 488, 489, 495, 496, 498], "correspond": [16, 150, 183, 194, 207, 208, 223, 266, 289, 292, 296, 342, 345, 349, 407, 415, 425, 454, 461, 485, 487, 488, 492, 493, 496], "amount": 16, "off": [16, 66, 67, 69, 420, 490], "non": [16, 320, 415, 421, 447, 496], "ref": [16, 147], "http": [16, 149, 150, 179, 187, 188, 197, 198, 199, 223, 225, 266, 268, 289, 290, 292, 293, 294, 319, 321, 322, 342, 343, 345, 346, 347, 349, 383, 421, 424, 445, 447, 455, 458, 459, 461, 470, 476, 479, 491], "hanj": 16, "c": [16, 73, 225, 268, 445, 453, 458, 490, 496], "illinoi": 16, "edu": [16, 225, 268, 445], "cs412": 16, "bk3": 16, "diverg": [16, 405, 409, 427, 443, 448, 496], "pdf": 16, "github": [16, 150, 187, 188, 199, 223, 266, 289, 290, 293, 294, 319, 322, 342, 343, 346, 347, 349, 383, 420, 445, 447, 451, 458, 459, 461, 470, 476, 479, 491], "com": [16, 150, 187, 188, 199, 223, 266, 289, 290, 293, 294, 319, 322, 342, 343, 346, 347, 349, 383, 419, 424, 445, 447, 455, 458, 459, 461, 464, 470, 491, 492, 499], "apach": [16, 459], "incub": 16, "blob": [16, 150, 187, 188, 289, 290, 293, 294, 319, 342, 343, 346, 347, 349, 383, 461, 470], "master": [16, 187, 188, 199, 289, 290, 293, 294, 319, 322, 342, 343, 346, 347, 349, 383, 461, 496], "python": [16, 74, 147, 153, 155, 225, 244, 268, 288, 341, 402, 415, 417, 420, 421, 445, 447, 450, 453, 458, 461, 466, 472, 475, 481, 486, 495], "contrib": [16, 288, 341], "py": [16, 147, 150, 170, 190, 207, 208, 290, 292, 293, 294, 321, 343, 345, 346, 347, 402, 421, 425, 447, 450, 458, 461, 466, 468, 469, 470, 476, 479, 488, 491, 494], "microsoft": [16, 425], "onnxruntim": [16, 207, 208, 219, 225, 232, 262, 268, 275, 297, 377, 425, 443, 444, 457, 458, 462, 487], "main": [16, 149, 177, 194, 199, 247, 322, 421, 444, 447, 450, 461, 468, 470, 482, 485, 488, 490], "tool": [16, 147, 285, 415, 424, 425, 461, 474, 478, 485, 486, 488], "arrai": [16, 43, 147, 155, 240, 281, 292, 303, 345, 415, 495], "small": [16, 66, 67, 68, 390, 422, 485, 490, 496, 499], "probabl": [16, 207, 208, 409, 490], "activationoper": 18, "onnx_quant": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "onnx_nod": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 86, 100, 110], "removableactivationoper": 18, "remov": [18, 43, 55, 56, 59, 73, 79, 82, 83, 84, 95, 97, 139, 181, 194, 294, 347, 419, 420, 461, 474, 478, 485, 494], "qactivationoper": 18, "children": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 156], "initi": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 42, 43, 104, 115, 147, 155, 172, 190, 211, 212, 220, 223, 242, 254, 255, 263, 266, 320, 321, 338, 383, 399, 404, 422, 427, 445, 460, 480, 485, 488, 493, 496], "qoper": [18, 34, 207, 208, 452], "format": [18, 43, 52, 147, 207, 208, 223, 224, 225, 266, 267, 268, 286, 292, 298, 338, 345, 399, 402, 426, 427, 445, 450, 452, 460, 461, 462, 463, 464, 488, 491], "float16activationoper": 18, "float16": [18, 21, 43, 445, 490], "argmaxoper": 19, "qargmaxoper": 19, "attentionoper": 20, "qattentionoper": 20, "qattent": 20, "binari": [21, 147, 296, 349, 453, 460, 476, 479, 491], "binaryoper": 21, "qbinaryoper": 21, "qbinari": 21, "float16binaryoper": 21, "concatoper": 22, "qconcatoper": 22, "qconcat": 22, "convoper": 23, "qconvoper": 23, "qlinearconv": 23, "direct8bit": 24, "direct8bitoper": 24, "qdirectoper": 24, "qdirect": 24, "embedlayernorm": 25, "embedlayernormalizationoper": 25, "qembedlayernormalizationoper": 25, "qembedlayernorm": 25, "gatheroper": 26, "qgatheroper": 26, "qgather": 26, "globalaveragepool": 27, "globalaveragepooloper": 27, "qglobalaveragepooloper": 27, "qlinearglobalaveragepool": 27, "gemmoper": 28, "qgemmoper": 28, "qgemm": 28, "lstmoper": 30, "matmuloper": 31, "qmatmuloper": 31, "qlinearmatmul": 31, "fusedmatmuloper": 31, "fusedmatmul": 31, "maxpooloper": 32, "qmaxpooloper": 32, "qmaxpool": 32, "batchnormalizationoper": 33, "batchnorm": [33, 61, 66, 120, 421, 493], "normalizationoper": 33, "op_registri": 34, "op_typ": [34, 139, 147, 339, 400], "qop_registri": 34, "padoper": 35, "qpadoper": 35, "qpad": 35, "averagepool": 36, "pooloper": 36, "qpooloper": 36, "qlinearaveragepool": 36, "reduceoper": 37, "resizeoper": 38, "qresizeoper": 38, "qresiz": 38, "splitoper": 39, "qsplitoper": 39, "qsplit": 39, "unari": 40, "unaryoper": 40, "q_config": [41, 163, 286, 425], "mode": [41, 42, 43, 44, 109, 155, 160, 232, 275, 292, 338, 345, 358, 399, 412, 415, 425, 426, 447, 457, 474, 478, 488, 489, 496], "static": [41, 42, 46, 160, 168, 183, 208, 286, 338, 383, 399, 425, 426, 427, 447, 452, 457, 461, 464, 469, 470, 471, 472, 475, 481, 493, 496, 499], "quantization_param": 41, "op_types_to_quant": 41, "fallback_list": 41, "fp32": [41, 42, 78, 130, 135, 142, 163, 164, 169, 207, 208, 211, 212, 254, 255, 285, 286, 296, 331, 338, 349, 388, 392, 399, 407, 414, 415, 424, 425, 427, 447, 454, 455, 460, 461, 462, 471, 487, 488, 489, 490, 491, 492, 493, 494, 496, 498, 499], "add_qdq_pair_to_weight": [41, 207, 208, 488], "optypes_to_exclude_output_qu": [41, 207, 208, 488], "dedicated_qdq_pair": [41, 207, 208, 488], "smoothquant": [42, 160, 163, 168, 424, 486, 490, 497], "onnxrt": [42, 43, 223, 225, 232, 240, 266, 268, 275, 281, 296, 349, 376, 413, 425, 447, 462, 488, 499], "get_quant_dequant_output": 42, "input_data": [42, 444], "output_data": 42, "loss": [42, 172, 207, 208, 242, 287, 296, 311, 316, 324, 349, 404, 443, 447, 448, 449, 450, 451, 460, 461, 462, 472, 484, 485, 488, 490, 493, 496, 498], "output": [42, 43, 52, 56, 58, 73, 97, 104, 109, 147, 163, 164, 183, 184, 189, 203, 205, 207, 208, 211, 212, 245, 249, 254, 255, 285, 286, 289, 319, 342, 349, 350, 358, 383, 404, 410, 411, 415, 421, 425, 426, 448, 449, 450, 452, 454, 456, 460, 461, 463, 472, 481, 482, 484, 485, 487, 488, 490, 491, 493, 494, 495, 496, 498], "numpi": [42, 43, 66, 67, 69, 104, 147, 240, 281, 292, 303, 345, 453, 495], "7": [42, 164, 170, 207, 208, 360, 427, 442, 453, 454, 458, 461, 485, 488, 491, 493, 496, 499], "bit": [42, 163, 164, 207, 208, 401, 427, 443, 449, 462, 486, 488, 490, 493], "execut": [42, 43, 52, 149, 155, 170, 190, 191, 192, 207, 208, 321, 325, 327, 382, 383, 384, 386, 404, 407, 414, 415, 447, 448, 449, 461, 462, 466, 467, 474, 475, 478, 481, 482, 484, 485, 488, 492, 496, 499], "provid": [42, 43, 101, 104, 109, 183, 211, 212, 240, 254, 255, 281, 287, 292, 311, 316, 324, 325, 345, 350, 383, 404, 408, 410, 422, 424, 425, 426, 427, 442, 444, 447, 449, 450, 451, 457, 458, 460, 461, 462, 463, 464, 468, 472, 475, 481, 482, 485, 487, 488, 490, 494, 496, 497, 498, 499], "make_sub_graph": 42, "opset": [42, 101, 103, 104, 208, 285, 286, 452], "ir_vers": 42, "thi": [42, 44, 85, 109, 131, 138, 142, 146, 150, 153, 155, 163, 164, 169, 171, 176, 181, 183, 185, 187, 188, 189, 190, 194, 195, 196, 197, 199, 200, 201, 207, 208, 211, 212, 222, 223, 224, 225, 226, 227, 228, 230, 240, 243, 249, 250, 254, 255, 265, 266, 267, 268, 269, 270, 271, 273, 281, 289, 292, 293, 294, 296, 305, 306, 308, 309, 310, 311, 316, 319, 321, 323, 324, 325, 328, 331, 342, 345, 346, 347, 349, 350, 360, 383, 387, 392, 401, 402, 404, 414, 415, 419, 420, 421, 422, 425, 426, 427, 443, 444, 445, 448, 449, 450, 452, 453, 454, 457, 459, 460, 461, 462, 463, 464, 466, 467, 469, 470, 472, 474, 476, 478, 479, 480, 481, 482, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497], "quant_dequant_data": 42, "qtype": [42, 43, 425], "3": [42, 147, 155, 192, 208, 225, 240, 268, 281, 292, 345, 402, 421, 422, 424, 443, 444, 445, 448, 450, 452, 454, 455, 458, 460, 461, 462, 464, 468, 472, 474, 478, 483, 487, 488, 490, 491, 492, 493, 495, 496, 499], "scheme": [42, 43, 158, 163, 164, 425, 426, 427, 444, 454, 472, 490, 496, 498], "sym": [42, 43, 164, 426, 427, 454, 488, 490, 498], "dequant": [42, 43, 56, 87, 90, 91, 92, 93, 95, 150, 163, 164, 415, 421, 426, 493, 494], "asym": [42, 43, 158, 163, 164, 427, 454, 490, 498], "ortsmoothqu": 42, "fake": [42, 112, 158, 160, 164, 168, 401, 461, 488, 490, 493], "channel": [42, 43, 142, 160, 164, 168, 169, 181, 184, 189, 207, 208, 236, 240, 278, 281, 319, 425, 427, 457, 458, 464, 466, 471, 485, 490, 495, 499], "For": [42, 164, 168, 183, 184, 187, 188, 199, 208, 225, 240, 268, 281, 293, 294, 296, 319, 322, 346, 347, 349, 350, 383, 419, 421, 423, 425, 427, 448, 449, 450, 452, 454, 457, 464, 466, 467, 469, 472, 485, 489, 493, 494, 496, 498, 499], "more": [42, 147, 160, 168, 187, 188, 240, 281, 319, 422, 423, 424, 426, 443, 445, 448, 450, 452, 455, 457, 458, 461, 462, 464, 472, 476, 479, 483, 484, 485, 489, 490, 493, 496, 497, 499], "detail": [42, 160, 168, 183, 240, 281, 415, 416, 419, 420, 424, 426, 427, 443, 448, 454, 455, 456, 460, 461, 462, 464, 472, 481, 485, 491, 492, 494, 496, 497], "pleas": [42, 149, 150, 160, 168, 179, 187, 188, 189, 197, 198, 199, 207, 208, 223, 224, 225, 228, 266, 267, 268, 271, 319, 321, 322, 349, 383, 402, 421, 422, 423, 424, 425, 442, 443, 445, 449, 450, 452, 458, 460, 462, 464, 465, 469, 472, 485, 488, 489, 491, 492, 493, 497], "refer": [42, 149, 150, 160, 168, 179, 187, 188, 189, 197, 198, 199, 203, 207, 208, 223, 266, 289, 290, 296, 319, 321, 322, 342, 343, 349, 383, 402, 421, 425, 426, 442, 444, 445, 447, 449, 450, 452, 456, 458, 459, 460, 461, 462, 464, 469, 472, 483, 487, 491, 495, 496], "accur": [42, 149, 160, 168, 198, 490, 493], "effici": [42, 160, 168, 422, 443, 444, 448, 464, 484, 486, 490, 493, 496], "post": [42, 96, 97, 149, 160, 168, 197, 208, 211, 212, 254, 255, 383, 419, 424, 425, 426, 447, 449, 450, 452, 457, 458, 464, 470, 481, 485, 486, 490, 493, 494, 496], "train": [42, 55, 79, 149, 160, 168, 171, 191, 192, 195, 197, 198, 207, 208, 211, 212, 223, 225, 240, 250, 254, 255, 266, 268, 281, 282, 298, 321, 341, 383, 407, 422, 425, 426, 432, 445, 447, 448, 449, 452, 457, 462, 464, 470, 481, 484, 485, 486, 490, 492, 493, 496, 498], "larg": [42, 160, 168, 198, 424, 444, 448, 461, 485, 486, 490, 493, 499], "languag": [42, 160, 168, 198, 289, 342, 419, 424, 452, 485, 486, 490, 493], "2": [42, 43, 52, 73, 104, 108, 155, 160, 164, 166, 168, 170, 185, 191, 192, 207, 208, 224, 241, 267, 292, 294, 296, 321, 328, 345, 347, 349, 360, 387, 402, 421, 424, 425, 443, 444, 445, 447, 448, 454, 457, 458, 459, 460, 462, 483, 485, 486, 488, 490, 491, 492, 493, 495, 496, 497], "spiq": [42, 160, 168, 493], "free": [42, 160, 168, 197, 211, 212, 254, 255, 383, 419, 424, 470, 475, 483, 492, 493], "per": [42, 43, 160, 164, 168, 170, 207, 208, 241, 409, 425, 427, 444, 489, 490, 499], "we": [42, 43, 66, 67, 69, 73, 85, 142, 155, 160, 168, 169, 170, 183, 187, 194, 207, 208, 222, 241, 243, 265, 289, 292, 342, 345, 390, 419, 421, 425, 426, 427, 444, 447, 450, 452, 454, 460, 461, 468, 469, 472, 476, 479, 481, 482, 483, 484, 485, 487, 488, 490, 491, 492, 493, 494, 496, 497], "onli": [42, 52, 62, 69, 85, 108, 114, 142, 155, 160, 162, 164, 168, 169, 170, 177, 180, 186, 193, 207, 208, 223, 241, 243, 247, 266, 286, 298, 319, 321, 332, 383, 393, 401, 402, 415, 424, 425, 426, 427, 442, 443, 444, 447, 448, 450, 453, 454, 461, 462, 469, 482, 485, 486, 487, 488, 493, 494, 496, 497, 498], "inplac": [42, 160], "mean": [42, 160, 185, 194, 207, 208, 236, 240, 278, 281, 294, 296, 319, 331, 347, 349, 392, 421, 426, 427, 444, 447, 450, 454, 460, 461, 467, 485, 488, 490, 493, 495, 496, 498], "weight": [42, 43, 59, 60, 121, 140, 142, 147, 150, 160, 162, 163, 164, 169, 179, 180, 184, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 200, 202, 207, 208, 286, 319, 321, 338, 349, 383, 390, 399, 401, 415, 416, 424, 425, 426, 427, 443, 447, 449, 454, 456, 461, 483, 485, 487, 488, 493, 494, 496, 497, 498], "chang": [42, 95, 142, 160, 169, 191, 192, 194, 195, 197, 198, 201, 207, 208, 321, 323, 390, 415, 420, 426, 444, 450, 453, 459, 461, 464, 474, 475, 478, 481, 485, 494, 495, 496], "you": [42, 155, 160, 207, 208, 221, 223, 264, 266, 321, 349, 383, 420, 421, 426, 444, 445, 447, 450, 458, 459, 460, 462, 464, 466, 467, 469, 474, 478, 481, 482, 485, 488, 491, 492, 493, 494, 497], "can": [42, 142, 150, 155, 160, 169, 176, 183, 184, 185, 190, 198, 199, 201, 207, 208, 211, 212, 222, 225, 240, 241, 243, 254, 255, 265, 268, 281, 292, 294, 296, 319, 321, 323, 345, 347, 349, 350, 360, 383, 404, 415, 421, 422, 424, 425, 426, 427, 442, 444, 445, 447, 448, 449, 450, 452, 454, 457, 458, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 472, 474, 475, 476, 478, 479, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499], "recov": [42, 160, 415, 425, 449, 493], "helper": [43, 44, 109, 115, 147, 163, 223, 224, 225, 239, 266, 267, 268, 280, 284, 285, 286, 358, 413], "dtype_to_nam": 43, "dtype_map": 43, "dtype": [43, 101, 104, 207, 208, 226, 227, 236, 240, 269, 270, 278, 281, 426, 427, 445, 447, 452, 454, 464, 487, 488, 490, 493, 494, 495, 498], "its": [43, 59, 95, 147, 150, 183, 192, 195, 197, 203, 208, 219, 225, 240, 262, 268, 281, 284, 290, 291, 321, 328, 343, 344, 387, 419, 445, 448, 459, 460, 462, 472, 474, 478, 481, 482, 485, 490, 492, 495, 496], "string": [43, 44, 115, 147, 149, 153, 155, 170, 172, 176, 177, 183, 185, 190, 199, 200, 201, 203, 204, 207, 208, 225, 242, 247, 268, 282, 287, 289, 292, 298, 299, 300, 302, 303, 311, 316, 319, 320, 321, 322, 323, 324, 342, 345, 354, 358, 407, 412, 415, 460, 493, 495], "represent": [43, 153, 419, 421, 443, 449, 485, 488], "quanttyp": [43, 401], "repres": [43, 185, 189, 190, 199, 200, 203, 225, 230, 268, 273, 292, 294, 296, 345, 347, 349, 419, 427, 443, 445, 452, 485, 488, 496], "make_quant_nod": 43, "make": [43, 104, 142, 169, 176, 185, 190, 199, 201, 221, 264, 319, 321, 323, 415, 419, 420, 425, 426, 442, 444, 454, 460, 461, 469, 474, 478, 481, 488, 489, 490, 492, 493, 496], "quantizelinear": 43, "make_dquant_nod": 43, "axi": [43, 208], "dequantizelinear": 43, "is_b_transpos": 43, "wheter": 43, "inuput": 43, "b": [43, 73, 223, 266, 443, 445, 460, 485, 490, 493, 496], "transpos": [43, 72, 189, 236, 240, 281, 285, 319, 495], "split_shared_bia": 43, "share": [43, 81, 97, 108, 140, 164, 453, 454, 493, 496], "float_to_float16": 43, "float_to_bfloat16": 43, "bfloat16": [43, 462, 464, 472, 489], "cast_tensor": 43, "tensorproto": [43, 104], "remove_init_from_model_input": 43, "collate_pr": 43, "result": [43, 147, 150, 163, 236, 240, 278, 281, 289, 292, 293, 294, 296, 342, 345, 346, 347, 349, 363, 383, 390, 404, 414, 415, 419, 422, 424, 444, 447, 448, 450, 457, 459, 460, 461, 469, 470, 481, 482, 483, 485, 486, 488, 490, 492, 493, 494, 495, 496, 497, 499], "quantize_data_with_scale_zero": 43, "zero_point": 43, "point": [43, 164, 236, 278, 293, 294, 303, 328, 346, 347, 387, 415, 460, 481, 488, 490, 493, 495, 496], "To": [43, 292, 345, 360, 420, 426, 427, 445, 447, 450, 462, 465, 468, 474, 476, 478, 479, 487, 489, 490, 491, 493, 496, 498], "pack": [43, 60], "comput": [43, 104, 150, 163, 289, 290, 293, 294, 296, 342, 343, 346, 347, 349, 404, 415, 443, 444, 449, 452, 460, 461, 462, 464, 475, 485, 486, 488, 490, 493, 496], "linear": [43, 149, 158, 162, 168, 181, 183, 184, 189, 194, 203, 207, 208, 319, 421, 448, 452, 461, 485, 490, 493, 496], "transform": [43, 49, 142, 144, 145, 146, 149, 158, 159, 162, 197, 223, 224, 225, 226, 227, 228, 230, 232, 234, 266, 267, 268, 269, 270, 271, 273, 275, 277, 288, 341, 421, 422, 424, 443, 445, 448, 449, 450, 451, 455, 461, 464, 469, 470, 471, 472, 485, 486, 489, 490, 493, 494, 496, 498, 499], "when": [43, 52, 63, 69, 147, 153, 155, 184, 190, 195, 203, 207, 208, 223, 224, 232, 240, 266, 267, 275, 281, 290, 320, 321, 343, 383, 404, 419, 422, 426, 444, 445, 461, 472, 474, 475, 478, 482, 485, 488, 490, 493, 495, 496], "uint8": [43, 164, 236, 278, 292, 340, 345, 401, 425, 445, 454, 487, 488, 495, 498], "rmin": [43, 488], "rmax": [43, 488], "m": [43, 150, 187, 188, 207, 208, 319, 448, 458, 464, 466, 469, 472, 476, 479, 485, 499], "where": [43, 155, 207, 208, 292, 296, 345, 349, 401, 415, 427, 443, 447, 448, 474, 478, 482, 493, 494], "max": [43, 103, 142, 164, 169, 177, 207, 208, 240, 281, 293, 294, 328, 346, 347, 387, 415, 424, 447, 458, 461, 485, 488, 493, 495, 496], "ab": [43, 149, 164, 179, 197, 198, 321, 488, 493], "np": [43, 240, 281, 328, 387, 450, 495, 496], "calculate_scale_zp": 43, "quantize_rang": 43, "calcul": [43, 59, 163, 179, 187, 203, 208, 226, 227, 269, 270, 293, 294, 319, 321, 331, 346, 347, 392, 405, 415, 443, 445, 460, 461, 472, 483, 485, 488, 492, 493, 496, 498], "quantize_data": 43, "add": [43, 51, 63, 108, 118, 147, 203, 207, 208, 223, 225, 247, 266, 268, 320, 338, 399, 415, 420, 421, 427, 444, 445, 450, 452, 454, 460, 461, 476, 479, 492, 494, 496, 497], "necessari": [43, 199, 419, 422, 426, 463, 482, 485, 492, 496], "intermedi": [43, 150, 172, 207, 208, 242, 421, 457, 488], "trasnform": 43, "full": [43, 223, 224, 225, 266, 267, 268, 415, 424, 443, 445, 447, 453, 459, 482, 485, 490, 491], "equat": [43, 294, 296, 347, 349, 488, 493], "r": [43, 142, 169, 447, 458, 482, 488, 499], "": [43, 104, 142, 147, 155, 169, 183, 184, 185, 189, 190, 191, 192, 195, 197, 198, 203, 204, 205, 207, 208, 222, 225, 239, 240, 241, 243, 245, 265, 268, 280, 281, 294, 319, 321, 347, 349, 350, 354, 383, 412, 415, 419, 422, 426, 427, 447, 448, 450, 452, 454, 457, 461, 462, 469, 472, 474, 478, 481, 484, 485, 486, 487, 488, 490, 491, 492, 493, 496, 497, 498, 499], "q": [43, 106, 108, 130, 426, 490, 493], "z": [43, 443, 448, 493], "real": [43, 226, 243, 269, 426, 443, 450, 486, 488], "origin": [43, 160, 163, 183, 195, 203, 208, 223, 240, 241, 266, 281, 305, 306, 308, 309, 310, 320, 321, 340, 388, 401, 415, 420, 445, 469, 485, 488, 495, 496, 498], "quantize_data_per_channel": 43, "dequantize_data_with_scale_zero": 43, "tensor_valu": 43, "scale_valu": 43, "zo_valu": 43, "sacal": 43, "dequantize_data": 43, "valueinfo": 43, "tensor_nam": [43, 147, 155, 156], "new_dtyp": 43, "cast": [43, 56, 489, 495], "info": [43, 163, 164, 187, 188, 203, 238, 243, 248, 319, 354, 411, 415, 421, 447, 463], "quantizedvalu": 43, "new_quantized_nam": 43, "scale_nam": 43, "zero_point_nam": 43, "quantized_value_typ": 43, "quint8": 43, "linearli": 43, "intial": 43, "quantizediniti": 43, "quantized_data": 43, "quantizationmod": 43, "quantizedvaluetyp": 43, "quantformat": 43, "quantize_nparrai": 43, "arr": [43, 415], "low": [43, 211, 212, 226, 227, 254, 255, 269, 270, 287, 297, 324, 350, 425, 426, 442, 443, 445, 450, 461, 462, 486, 488, 490, 493, 496], "high": [43, 226, 227, 269, 270, 445, 447, 458, 486, 496], "attribute_to_kwarg": 43, "attribut": [43, 82, 103, 104, 147, 163, 183, 194, 204, 205, 208, 415, 425, 444, 454, 456, 461, 487, 498], "kwarg": [43, 104, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 134, 136, 137, 164, 181, 207, 208, 225, 238, 240, 245, 248, 268, 281, 337, 339, 349, 350, 351, 353, 355, 357, 358, 359, 383, 398, 400, 402, 404, 410, 411, 414, 415, 444], "make_nod": 43, "find_by_nam": 43, "item_list": 43, "find": [43, 66, 67, 69, 104, 147, 296, 303, 328, 349, 387, 415, 425, 447, 467, 474, 478, 481, 482, 492, 494, 496], "item": [43, 203, 205, 207, 208, 239, 280, 320, 338, 399, 443, 450, 485, 493, 496], "trt_env_setup": 43, "environ": [43, 170, 241, 419, 442, 474, 478, 481, 496], "variabl": [43, 153, 170, 200, 207, 208, 225, 241, 268, 328, 387, 401, 458, 485, 496], "tensorrt": [43, 443, 462, 488], "to_numpi": 43, "get_ops_recurs": 44, "prefix": [44, 147, 148, 155, 156, 161, 170, 464, 469, 494], "graph_info": 44, "templateadaptor": 44, "tampl": 44, "dictionari": [44, 66, 67, 69, 147, 148, 150, 155, 163, 176, 204, 205, 207, 208, 239, 280, 292, 299, 302, 304, 345, 415], "yaml": [44, 203, 204, 205, 208, 211, 212, 223, 225, 241, 254, 255, 266, 268, 282, 287, 298, 299, 300, 302, 311, 316, 324, 325, 414, 415, 425, 427, 456, 460, 461, 483, 487, 494, 495], "file": [44, 104, 147, 153, 155, 156, 163, 167, 199, 203, 204, 207, 208, 211, 212, 223, 224, 225, 228, 239, 240, 246, 249, 254, 255, 266, 267, 268, 271, 280, 281, 282, 287, 292, 298, 299, 300, 302, 311, 316, 320, 322, 324, 325, 345, 350, 360, 366, 367, 371, 383, 414, 415, 422, 425, 426, 427, 450, 453, 456, 459, 460, 461, 463, 467, 476, 479, 480, 481, 482, 483, 487, 488, 490, 494, 495], "pytorchadaptor": 44, "api": [44, 69, 74, 109, 149, 251, 287, 292, 324, 337, 338, 345, 349, 383, 398, 399, 402, 415, 420, 421, 428, 430, 434, 437, 440, 447, 452, 457, 461, 466, 470, 471, 472, 491, 492, 496, 500], "pytorch_ipexadaptor": 44, "intel": [44, 187, 188, 199, 244, 247, 283, 288, 295, 296, 319, 322, 330, 336, 341, 348, 349, 361, 383, 391, 397, 417, 419, 420, 422, 423, 425, 426, 427, 443, 445, 446, 448, 449, 451, 452, 454, 455, 459, 462, 463, 464, 469, 471, 472, 483, 484, 485, 486, 488, 489, 491, 493, 494, 496, 497, 498], "extens": [44, 153, 155, 415, 422, 424, 425, 454, 457, 458, 461, 462, 463, 465, 470, 471, 472, 476, 479, 480, 485, 486, 488, 493, 496, 497, 498], "ipex": [44, 157, 163, 207, 208, 457, 461, 462, 466, 470, 471, 493], "pytorch_fxadaptor": 44, "fx": [44, 163, 207, 332, 393, 457, 462, 470, 471, 486, 488, 489], "graph": [44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 116, 129, 131, 135, 138, 141, 142, 144, 145, 146, 147, 183, 222, 265, 287, 351, 358, 382, 421, 425, 445, 448, 450, 456, 463, 464, 488, 489, 494], "pytorchweightonlyadaptor": 44, "pytorchqueri": 44, "querybackendcap": [45, 425, 426], "tensorflowadaptor": 46, "stock": [46, 470, 493], "spr": 46, "tensorflow_itexadaptor": 46, "itex": [46, 108, 207, 208, 285, 462, 488, 493], "tensorflowqueri": [46, 425], "performance_onli": [46, 47, 48, 106, 130, 135, 146, 207, 461], "itex_mod": [46, 47, 88, 106, 130, 135], "quant_mod": [46, 338, 399, 426, 427], "graphconvert": 47, "qt_config": 47, "recip": [47, 183, 207, 208, 287, 324, 461, 490, 493, 496], "int8_sequ": 47, "fp32_op": [47, 49, 106], "bf16_op": [47, 49, 106, 426, 489], "data_load": [47, 48, 425], "fake_qu": [47, 87, 106, 130, 135], "qdq_enabl": 47, "new_api": [47, 48, 70, 71, 76, 78, 91, 98, 130, 135, 142], "use_bf16": [47, 48, 207, 487], "without": [48, 89, 147, 195, 240, 281, 321, 340, 401, 419, 448, 450, 461, 472, 485, 486, 487, 496, 497], "graphconverterwithoutcalib": 48, "recover_config": 48, "rewrit": [49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 105, 106, 107, 108, 180], "bf16convert": [49, 489], "biasadd": [51, 58, 63, 65, 108, 454], "convertaddtobiasaddoptim": 51, "conv2d": [51, 58, 59, 60, 64, 65, 70, 124, 134, 142, 149, 426, 427, 447, 452, 454, 493, 494, 496], "addv2": [51, 68, 454], "layout": 52, "convertlayoutoptim": 52, "optim": [52, 73, 74, 78, 79, 115, 117, 174, 175, 176, 180, 183, 192, 197, 204, 207, 208, 244, 250, 287, 288, 304, 324, 328, 341, 387, 404, 405, 412, 415, 422, 424, 442, 447, 448, 449, 450, 454, 455, 457, 458, 461, 463, 464, 466, 468, 469, 472, 475, 486, 487, 488, 489, 492, 493, 494, 496, 498], "nchw": [52, 236], "nhwc": [52, 236], "It": [52, 155, 171, 185, 211, 212, 249, 254, 255, 294, 296, 303, 319, 324, 331, 347, 349, 350, 383, 388, 392, 404, 425, 426, 427, 443, 447, 448, 461, 467, 470, 475, 481, 482, 485, 488, 491, 492, 496, 498], "exist": [52, 170, 205, 241, 358, 452, 460, 468, 496], "4": [52, 158, 163, 164, 170, 185, 194, 207, 208, 232, 235, 236, 240, 275, 278, 281, 289, 290, 292, 342, 343, 345, 401, 402, 419, 425, 427, 442, 450, 451, 454, 457, 458, 460, 461, 469, 485, 488, 490, 493, 495, 496, 499], "abov": [52, 425, 426, 427, 448, 485, 488, 493, 496], "graph_def": [52, 147, 285, 350, 358, 382, 383], "leakyrelu": [53, 493], "convertleakyreluoptim": 53, "below": [53, 65, 73, 207, 208, 325, 349, 383, 420, 421, 424, 425, 426, 427, 444, 447, 448, 450, 456, 460, 464, 466, 474, 475, 478, 481, 483, 484, 485, 487, 488, 490, 492, 493, 494, 496, 497], "subgraph": [53, 65, 104, 161, 496], "mul": [53, 64, 65, 68, 168, 452, 493], "maximum": [53, 185, 190, 207, 208, 223, 240, 266, 281, 290, 321, 328, 343, 387, 427, 443, 445, 447, 461, 485, 488, 495], "note": [53, 153, 189, 292, 332, 345, 393, 422, 426, 427, 444, 447, 450, 452, 454, 458, 461, 466, 469, 474, 478, 481, 485, 488, 490, 493, 494, 496, 497, 498], "coeffici": [53, 485], "less": [53, 147, 207, 208, 415, 442, 448, 461, 485], "than": [53, 147, 223, 240, 266, 281, 415, 422, 424, 442, 445, 456, 483, 484, 485, 488, 490, 492, 495, 496], "convers": [53, 208, 298, 425, 426, 461, 462, 488, 489, 493], "valid": [53, 66, 67, 104, 190, 193, 203, 207, 208, 225, 268, 292, 320, 321, 345, 358, 420, 422, 424, 425, 445, 447, 448, 451, 454, 457, 459, 461, 472, 485, 488, 491], "nan": 54, "random": [54, 147, 176, 207, 208, 236, 240, 278, 281, 288, 304, 328, 330, 341, 387, 391, 415, 420, 422, 461, 485, 487, 495, 498], "convertnantorandom": 54, "const": [54, 55, 62, 63, 66, 67, 69, 81, 97], "consist": [54, 62, 420, 421, 493, 496], "placehold": [55, 221, 264], "convertplaceholdertoconst": 55, "rerewrit": 56, "dequantizecastoptim": 56, "b16": 56, "dilat": 57, "contract": 57, "dilatedcontract": 57, "spacetobatchnd": 57, "batchtospacend": 57, "pattern": [57, 58, 60, 77, 95, 106, 107, 108, 130, 135, 163, 176, 177, 178, 179, 180, 183, 184, 190, 191, 192, 193, 195, 197, 198, 200, 204, 207, 208, 225, 268, 288, 309, 310, 312, 317, 321, 338, 341, 399, 425, 445, 454, 457, 461, 482, 484, 487, 493, 496, 499], "inject": [58, 461], "dummi": [58, 183, 226, 227, 269, 270, 296, 349, 424, 445, 455, 460, 461], "injectdummybiasaddoptim": 58, "fusion": [58, 60, 69, 77, 108, 125, 126, 127, 130, 131, 132, 136, 421, 425, 454], "expanddim": 59, "expanddimsoptim": 59, "next": [59, 216, 259, 402, 422, 426, 427, 444, 487, 490, 496], "featch": 60, "reshap": [60, 66, 67, 72, 493], "fetchweightfromreshapeoptim": 60, "handl": [60, 147, 160, 168, 411, 421, 423, 444, 493], "fold": [61, 62, 286, 454, 493], "foldbatchnormnodesoptim": 61, "graphfoldconstantoptim": 62, "sequenc": [62, 104, 184, 187, 188, 207, 208, 223, 239, 240, 266, 280, 281, 290, 294, 319, 343, 347, 425, 445, 454, 485, 490, 495], "self": [62, 183, 207, 208, 360, 425, 426, 444, 445, 457, 460, 492, 494, 496], "supported_op_typ": 62, "fusebiasaddandaddoptim": 63, "second": [63, 155, 184, 207, 208, 223, 266, 388, 415, 447, 461, 474, 478, 482, 490, 493, 496, 498], "columnwis": 64, "fusecolumnwisemuloptim": 64, "depthwiseconv2dn": [64, 70, 124, 134, 454], "math": [65, 488], "fuseconvwithmathoptim": 65, "elimin": 65, "sub": [65, 163, 170, 183, 241, 422, 496], "realdiv": [65, 68], "decompos": [66, 67], "fusedecomposedbnoptim": 66, "input_graph_def": [66, 67, 69], "node_name_from_input": [66, 67, 69], "node_nam": [66, 67, 69, 147, 358, 368, 426], "strip": [66, 67, 69, 82, 83, 147, 494], "port": [66, 67, 69], "other": [66, 67, 69, 153, 160, 168, 222, 265, 294, 347, 358, 419, 420, 421, 426, 427, 447, 454, 457, 459, 461, 463, 483, 485, 488, 493, 495, 496, 499], "underli": [66, 67, 69, 155], "node_from_map": [66, 67, 69], "node_map": [66, 67, 69], "pull": [66, 67, 69], "def": [66, 67, 69, 211, 212, 254, 255, 383, 402, 404, 421, 425, 444, 445, 448, 449, 450, 460, 461, 488, 493, 494, 496], "entri": [66, 67, 69, 150, 247, 287, 325, 415, 459], "index": [66, 67, 69, 104, 170, 203, 208, 216, 221, 225, 259, 264, 268, 303, 415, 445, 460, 482, 493], "everi": [66, 67, 69, 185, 188, 190, 207, 208, 319, 321, 425, 444, 469, 474, 478, 496], "identifi": [66, 67, 69, 155, 292, 345, 358, 485], "want": [66, 67, 69, 183, 207, 208, 221, 223, 264, 266, 321, 388, 404, 421, 425, 444, 445, 450, 461, 469, 481, 482, 483, 492, 494, 496], "nodedef": [66, 67, 69], "rais": [66, 67, 69, 104, 153, 155, 180, 186, 193, 203, 292, 319, 320, 321, 345, 350, 402, 424, 485, 486], "valueerror": [66, 67, 69, 292, 345, 402, 453], "If": [66, 67, 69, 73, 155, 164, 170, 207, 208, 211, 212, 225, 240, 254, 255, 268, 281, 320, 350, 383, 402, 404, 420, 421, 426, 442, 444, 445, 450, 458, 459, 460, 461, 467, 475, 476, 479, 481, 483, 488, 490, 492, 493, 494, 495, 496], "isn": [66, 67, 69], "t": [66, 67, 69, 142, 155, 169, 185, 207, 208, 240, 243, 281, 294, 347, 421, 425, 447, 448, 450, 461, 462, 482, 485, 488, 496, 498], "present": [66, 67, 69, 447, 486, 493], "values_from_const": [66, 67, 69], "node_def": [66, 67, 69], "extract": [66, 67, 69, 147, 183, 225, 268, 340, 401, 445], "ha": [66, 67, 69, 73, 149, 155, 189, 190, 241, 289, 319, 321, 342, 402, 420, 422, 425, 426, 427, 444, 452, 457, 461, 462, 467, 481, 485, 487, 488, 489, 492, 493, 496], "access": [66, 67, 69, 204, 205, 208, 410, 415, 476, 479], "valid_reshape_input": [66, 67], "reshape_in0_ndef": [66, 67], "reshape_in1_ndef": [66, 67], "ar": [66, 67, 104, 155, 163, 185, 190, 191, 192, 197, 198, 207, 208, 223, 240, 266, 281, 292, 296, 303, 319, 320, 321, 325, 327, 328, 345, 349, 384, 386, 387, 401, 402, 407, 414, 415, 419, 420, 421, 422, 425, 426, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 467, 469, 472, 475, 481, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498], "bypass_reshap": [66, 67], "input_node_map": [66, 67], "input_nam": [66, 67, 101, 141, 208, 285, 286, 452], "get_const_dim_count": [66, 67], "dimens": [66, 67, 104, 215, 240, 258, 281, 445, 448, 495], "instancenorm": [67, 493], "fusedecomposedinoptim": 67, "gelu": 68, "fusegeluoptim": 68, "sqrt": [68, 447], "erf": 68, "samll": 69, "layernorm": [69, 493], "fuselayernormoptim": 69, "remap": [69, 155], "smaller": [69, 240, 281, 448, 461, 485, 495], "case": [69, 73, 155, 164, 170, 208, 222, 239, 240, 241, 265, 280, 281, 287, 311, 316, 324, 360, 427, 444, 448, 449, 450, 454, 456, 460, 465, 469, 481, 482, 483, 485, 486, 488, 490, 491, 495, 497, 498, 499], "fusedbatcnormv3": 69, "And": [69, 421, 442, 461, 467, 493], "further": [69, 208, 419, 462, 463, 464, 466, 475, 481, 488], "restrict": [69, 155, 207, 208, 485, 492], "2d": [69, 493], "3d": [69, 486, 493], "kera": [69, 115, 183, 203, 208, 225, 232, 247, 268, 275, 353, 358, 426, 444, 450, 463, 471, 472], "fusepadwithconv2doptim": 70, "excluded_op_nam": [70, 71, 204, 207, 208, 461, 485], "cfg": [70, 71, 163, 204, 338, 399, 407, 426, 427], "itex_qdq_mod": [70, 71], "conv3d": [70, 124], "fusepadwithfp32conv2doptim": 71, "fusetransposereshapeoptim": 72, "cse": [73, 97], "graphcseoptim": 73, "introduc": [73, 420, 425, 426, 427, 454, 461, 488, 490, 491, 493, 497], "ident": [73, 79, 184, 419, 448], "three": [73, 203, 223, 266, 327, 384, 386, 421, 425, 426, 443, 458, 462, 475, 484, 488, 489, 492, 493, 494], "d": [73, 163, 448, 456, 482, 499], "those": [73, 155, 331, 392, 415, 447, 448, 449, 456, 461, 462, 484, 485, 488, 496], "child": [73, 149, 156, 494], "b1": 73, "c1c2": 73, "d1": [73, 415], "c1": 73, "c2": 73, "memori": [73, 287, 311, 316, 324, 360, 415, 443, 444, 449, 461, 462, 464, 483, 485, 488, 490, 493, 496, 499], "bound": [73, 170, 177, 240, 281, 292, 328, 345, 387, 460, 495], "like": [73, 95, 97, 147, 155, 183, 203, 208, 211, 212, 213, 225, 254, 255, 256, 268, 287, 296, 321, 324, 325, 349, 358, 383, 404, 420, 421, 422, 425, 426, 447, 448, 449, 457, 469, 484, 485, 488, 490, 491, 493, 496], "relu": [73, 77, 108, 421, 454, 493, 494], "relu6": [73, 454], "updat": [73, 156, 163, 179, 185, 203, 321, 349, 383, 412, 453, 460, 461, 467, 472, 475, 485, 493, 496, 497], "graphdef": [73, 147, 358, 382, 463], "grappler": [74, 454], "grappleroptim": 74, "input_output_nam": 74, "opt_cfg": 74, "wrapper": [74, 101, 102, 103, 104, 121, 139, 148, 158, 162, 172, 180, 222, 240, 242, 243, 245, 246, 265, 281, 292, 296, 345, 349, 354, 358, 489], "leverag": [74, 422, 424, 448, 452, 464, 481, 484, 488, 490, 496], "built": [74, 209, 210, 214, 219, 223, 224, 229, 231, 233, 234, 236, 237, 240, 245, 247, 252, 253, 257, 260, 262, 266, 267, 272, 274, 276, 277, 278, 279, 281, 325, 349, 352, 360, 383, 404, 422, 425, 445, 450, 461, 474, 478, 483, 488, 495, 496, 498], "convert_add_to_biasadd": [75, 86, 110], "convert_layout": [75, 86, 110], "convert_leakyrelu": [75, 86, 110], "convert_nan_to_random": [75, 86, 110], "convert_placeholder_to_const": [75, 86, 110], "dequantize_cast_optim": [75, 86, 110], "dilated_contract": [75, 86, 110], "dummy_biasadd": [75, 86, 110], "expanddims_optim": [75, 86, 110], "fetch_weight_from_reshap": [75, 86, 110], "fold_batch_norm": [75, 86, 110], "fold_const": [75, 86, 110], "fuse_biasadd_add": [75, 86, 110], "fuse_column_wise_mul": [75, 86, 110], "fuse_conv_with_math": [75, 86, 110], "fuse_decomposed_bn": [75, 86, 110], "fuse_decomposed_in": [75, 86, 110], "fuse_gelu": [75, 86, 110], "fuse_layer_norm": [75, 86, 110], "fuse_pad_with_conv": [75, 86, 110], "fuse_pad_with_fp32_conv": [75, 86, 110], "fuse_reshape_transpos": [75, 86, 110], "graph_cse_optim": [75, 86, 110], "grappler_pass": [75, 86, 110], "insert_print_nod": [75, 86, 110], "move_squeeze_after_relu": [75, 86, 110], "pre_optim": [75, 86, 110], "remove_training_nod": [75, 86, 110], "rename_batch_norm": [75, 86, 110], "split_shared_input": [75, 86, 110], "strip_equivalent_nod": [75, 86, 110, 147], "strip_unused_nod": [75, 86, 110, 147], "switch_optim": [75, 86, 110], "insert": [76, 104, 106, 108, 112, 145, 160, 168, 421, 426, 444, 457, 461, 464, 485, 488, 489, 493, 494], "print": [76, 149, 150, 183, 296, 349, 402, 415, 450, 460, 461, 485, 493, 496], "insertprintminmaxnod": 76, "pre_node_nam": 76, "post_node_nam": 76, "pass": [76, 147, 153, 155, 170, 349, 383, 415, 421, 425, 442, 445, 448, 449, 450, 456, 460, 461, 482, 485, 487, 488, 489, 493, 498], "sampl": [76, 164, 207, 208, 216, 221, 223, 224, 225, 236, 240, 259, 264, 266, 267, 268, 278, 281, 296, 303, 328, 349, 387, 422, 444, 445, 451, 457, 482, 488, 495, 496, 498, 499], "move": [77, 155, 421, 487, 490, 491], "squeez": [77, 421], "movesqueezeafterreluoptim": 77, "match": [77, 101, 155, 183, 292, 293, 345, 346, 448, 482, 490], "pre": [78, 115, 156, 183, 211, 212, 223, 254, 255, 266, 350, 383, 404, 445, 448, 449, 461, 469, 485, 486, 488, 490, 494, 496], "entranc": [78, 177, 214], "preoptim": 78, "removetrainingnodesoptim": 79, "protected_nod": 79, "types_to_splic": 79, "checknumer": 79, "stopgradi": 79, "renam": [80, 491], "fusedbatchnorm": 80, "fusedbatchnormv2": 80, "renamebatchnormoptim": 80, "splitsharedinputoptim": 81, "equival": [82, 158, 162, 493], "stripequivalentnodesoptim": 82, "output_node_nam": [82, 83, 130, 131, 135, 147], "same": [82, 140, 147, 164, 197, 208, 223, 240, 266, 281, 292, 345, 415, 425, 427, 442, 444, 445, 448, 450, 454, 461, 465, 469, 474, 478, 485, 487, 488, 490, 493, 494, 495, 496], "unus": [83, 147], "stripunusednodesoptim": 83, "input_node_nam": [83, 130, 135, 147], "switch": [84, 464, 494], "switchoptim": 84, "condit": [84, 223, 224, 225, 240, 266, 267, 268, 281, 327, 384, 386, 445, 459, 495, 496], "graphrewriterbas": 85, "abstract": [85, 171, 177, 240, 281, 282, 287, 324, 425, 427, 456], "freeze_fake_qu": [86, 94, 110], "freeze_valu": [86, 94, 110], "freeze_value_without_calib": [86, 94, 110], "fuse_conv_redundant_dequant": [86, 94, 110], "fuse_conv_requant": [86, 94, 110], "fuse_matmul_redundant_dequant": [86, 94, 110], "fuse_matmul_requant": [86, 94, 110], "meta_op_optim": [86, 94, 110], "post_hostconst_convert": [86, 94, 110], "post_quantized_op_cs": [86, 94, 110], "rnn_convert": [86, 94, 110], "scale_propag": [86, 94, 110], "onnx_graph": [86, 100, 110], "onnx_schema": [86, 100, 110], "tf2onnx_util": [86, 100, 110], "insert_qdq_pattern": [86, 105, 110], "merge_duplicated_qdq": [86, 105, 110], "share_qdq_y_pattern": [86, 105, 110], "freez": [87, 88, 89, 464, 485], "fakequ": 87, "freezefakequantopoptim": 87, "follow": [87, 109, 184, 225, 268, 289, 292, 342, 345, 419, 420, 421, 422, 425, 426, 427, 444, 445, 448, 449, 450, 454, 458, 459, 460, 461, 462, 463, 464, 465, 466, 474, 478, 484, 485, 487, 488, 493, 494, 496], "freezevaluetransform": 88, "max_min_data": [88, 89], "postfix": [88, 89], "tensor_data": [88, 415, 416], "th": [88, 89], "gpu": [88, 89, 96, 155, 207, 208, 424, 442, 457, 461, 462, 466, 472, 481, 487, 488], "freezevaluewithoutcalibtransform": 89, "95": [89, 296, 349, 460, 493, 499], "quantizedconv": [90, 91], "quantizeddeconv": 90, "redund": [90, 92], "fuseconvredundantdequantizetransform": 90, "cpu": [90, 91, 92, 93, 154, 155, 207, 208, 415, 424, 426, 442, 443, 457, 461, 462, 464, 466, 472, 481, 486, 487, 488, 489, 494], "_quantizedconv": 90, "_quantizeddeconv": 90, "successor": [90, 91, 92, 93], "requant": [91, 93, 494], "fuseconvrequantizetransform": 91, "quantizedmatmul": [92, 93], "fusematmulredundantdequantizetransform": 92, "_quantizedmatmul": [92, 93], "fusematmulrequantizedequantizetransform": 93, "quantizedmatmulwithbiasanddequant": 93, "fusematmulrequantizetransform": 93, "fusematmulrequantizedequantizenewapitransform": 93, "fusematmulrequantizenewapitransform": 93, "newapi": 93, "meta": [95, 486], "metainfochangingmemopoptim": 95, "metaop": 95, "With": [95, 360, 421, 425, 427, 444, 461, 469, 474, 478, 482, 483, 485, 486, 492, 493, 496, 499], "better": [95, 207, 208, 211, 212, 254, 255, 303, 350, 383, 404, 449, 460, 462, 485, 486, 488, 490, 492, 496], "perform": [95, 139, 170, 200, 207, 208, 223, 235, 236, 241, 266, 278, 287, 311, 316, 324, 331, 349, 360, 383, 388, 392, 421, 422, 425, 426, 442, 445, 446, 447, 449, 451, 452, 457, 458, 460, 461, 462, 463, 464, 466, 470, 472, 475, 481, 483, 484, 485, 486, 487, 488, 489, 490, 493, 494, 496, 498, 499], "hostconst": 96, "posthostconstconvert": 96, "just": [96, 213, 238, 240, 243, 245, 246, 248, 256, 281, 360, 422, 461, 471, 475, 481, 484, 488, 493, 495, 496], "postcseoptim": 97, "duplic": [97, 107, 328, 387], "quantizev2": 97, "decreas": [97, 485], "size": [97, 164, 187, 188, 215, 216, 222, 225, 231, 236, 240, 258, 259, 265, 268, 274, 278, 281, 319, 360, 415, 419, 426, 444, 445, 450, 453, 461, 481, 482, 483, 485, 490, 493, 495, 498, 499], "rnn": 98, "quantizedrnnconvert": 98, "calibration_data": [98, 106], "rnn_detail": 98, "scalepropagationtransform": 99, "direct": [99, 189, 319, 485], "export": [100, 208, 288, 292, 341, 345, 424, 455, 467, 482, 494, 497], "onnxgraph": 101, "output_shap": 101, "extra_opset": 101, "output_nam": [101, 141, 208, 285, 286, 452], "is_subgraph": 101, "graph_nam": 101, "manipul": [101, 102], "onnxnod": 102, "skip_convers": 102, "schema": [103, 164], "onnxopschema": 103, "domain": [103, 104, 207, 208, 485, 496], "since_vers": 103, "get_schema": 103, "max_inclusive_opset_vers": 103, "within": [103, 191, 192, 197, 198, 287, 292, 324, 345, 358, 377, 382, 419, 421, 427, 443, 462, 474, 478, 481, 486, 493, 496], "get_max_supported_opset_vers": 103, "packag": [103, 425, 453, 458, 481, 482, 486, 491, 496], "set_nam": 104, "find_opset": 104, "assert_error": 104, "bool_val": 104, "error_msg": 104, "error": [104, 150, 155, 296, 331, 349, 392, 411, 447, 460, 465, 493, 496], "messag": [104, 145, 496], "map_numpy_to_onnx_dtyp": 104, "np_dtype": 104, "map_onnx_to_numpy_typ": 104, "onnx_typ": 104, "add_port_to_nam": 104, "nr": 104, "get_tensorflow_node_attr": 104, "pars": [104, 163, 223, 224, 236, 240, 266, 267, 278, 281, 366, 367, 371, 426, 427, 495], "get_tensorflow_tensor_shap": 104, "shape": [104, 147, 185, 226, 227, 236, 240, 269, 270, 278, 281, 292, 345, 424, 445, 454, 455, 461, 493, 495], "get_tensorflow_node_shape_attr": 104, "attr": [104, 147, 183], "map_tensorflow_dtyp": 104, "get_tensorflow_tensor_data": 104, "convert_tensorflow_tensor_to_onnx": 104, "read_tensorflow_node_attr": 104, "read": [104, 147, 155, 228, 240, 271, 281, 320, 445, 489, 492], "infer_onnx_shape_dtyp": 104, "opset_vers": [104, 141, 208, 285, 286, 452], "input_shap": [104, 227, 270, 445], "input_dtyp": 104, "sometim": [104, 421, 447, 488], "so": [104, 240, 281, 401, 421, 425, 447, 453, 457, 462, 467, 469, 488, 489, 490, 493, 494, 495, 497], "make_onnx_shap": 104, "seqtyp": 104, "tensor_dtyp": 104, "around": 104, "signifi": 104, "make_onnx_inputs_output": 104, "elem_typ": 104, "text": [104, 199, 239, 240, 280, 281, 289, 294, 322, 342, 347, 452, 459, 470, 485, 486, 490, 493, 495, 499], "datatyp": [104, 163, 489, 496, 499], "save_protobuf": 104, "path": [104, 147, 156, 163, 183, 199, 203, 204, 223, 224, 225, 240, 266, 267, 268, 281, 282, 285, 286, 287, 298, 299, 300, 302, 311, 316, 320, 322, 324, 325, 338, 350, 358, 382, 383, 399, 412, 415, 421, 422, 425, 445, 447, 450, 456, 460, 461, 462, 463, 467, 470, 481, 484, 490, 495, 498], "as_text": 104, "save": [104, 154, 155, 180, 203, 207, 208, 225, 268, 285, 286, 325, 358, 383, 404, 405, 410, 415, 421, 425, 456, 461, 462, 463, 465, 469, 474, 478, 484, 488, 490, 493], "protobuf": 104, "is_onnx_domain": 104, "is_list_or_tupl": 104, "are_shapes_equ": 104, "src": [104, 482], "dest": 104, "equal": [104, 142, 147, 169, 402, 415, 485], "get_subgraphs_from_onnx": 104, "model_proto": 104, "over": [104, 155, 225, 268, 296, 349, 426, 451, 455, 457, 460, 472, 481, 487, 493, 496], "df": 104, "initialize_name_count": 104, "avoid": [104, 155, 164, 223, 266, 421, 490, 494], "conflict": [104, 453], "counter": 104, "make_nam": 104, "get_index_from_strided_slice_of_shap": 104, "outputs_to_valu": 104, "stride": [104, 240, 281, 495], "slice": 104, "compute_const_folding_using_tf": 104, "g": [104, 155, 185, 207, 208, 448, 451, 455, 464, 469, 485, 490, 491, 493, 496], "const_node_valu": 104, "graph_output": 104, "constant": [104, 286, 288, 328, 330, 336, 341, 387, 391, 397, 408, 444, 454, 495], "tf": [104, 115, 147, 183, 203, 222, 223, 224, 225, 240, 265, 266, 267, 268, 281, 356, 358, 450, 463, 486, 489, 495], "generategraphwithqdqpattern": 106, "op_wise_config": [106, 130, 135, 426], "quantized_nod": 106, "dq": [106, 108, 130, 493], "pair": [106, 207, 208, 426, 444, 461, 462, 491], "befor": [106, 108, 149, 168, 176, 185, 190, 192, 197, 199, 201, 207, 208, 223, 266, 319, 321, 323, 420, 427, 444, 445, 448, 449, 450, 453, 454, 458, 461, 476, 479, 488, 492, 494, 496], "merg": [107, 215, 258, 338, 399, 476, 479, 494, 496], "mergeduplicatedqdqoptim": 107, "y": [108, 207, 208, 240, 281, 328, 387, 447, 453, 467, 493, 495], "shareqdqforitexypatternoptim": 108, "one": [108, 109, 114, 155, 163, 164, 170, 185, 189, 194, 197, 198, 199, 201, 240, 250, 281, 289, 292, 296, 298, 319, 322, 323, 342, 345, 349, 422, 425, 443, 448, 449, 450, 454, 457, 458, 460, 461, 462, 464, 465, 469, 470, 472, 474, 475, 478, 481, 482, 483, 484, 485, 487, 488, 490, 491, 493, 495, 496], "enabl": [108, 150, 164, 190, 207, 208, 321, 426, 427, 450, 458, 462, 464, 466, 469, 470, 472, 485, 486, 496], "break": [108, 450, 461], "graphanalyz": 109, "extend_engin": 109, "analyz": [109, 183, 358, 492, 493, 494], "under": [109, 207, 208, 225, 268, 414, 422, 445, 459, 460, 461, 464, 469, 470, 481, 484, 485, 490, 493, 494, 496], "singleton": [109, 415], "specifi": [109, 155, 163, 170, 203, 207, 208, 211, 212, 240, 241, 254, 255, 281, 287, 292, 296, 299, 302, 311, 316, 324, 325, 345, 349, 350, 383, 402, 404, 414, 415, 426, 427, 450, 454, 460, 461, 469, 483, 487, 495, 496, 498], "graphrewriterhelp": 109, "encapsul": [109, 211, 212, 254, 255, 350, 383, 404, 463], "quantize_lay": [110, 111, 113], "fake_quant": [110, 111, 113], "quantize_config": [110, 111, 113, 426], "quantize_help": [110, 111, 113], "quantize_wrapp": [110, 111, 113], "fuse_qdq_bn": [110, 111, 129], "fuse_qdq_concatv2": [110, 111, 129], "fuse_qdq_conv": [110, 111, 129], "fuse_qdq_deconv": [110, 111, 129], "fuse_qdq_in": [110, 111, 129], "fuse_qdq_matmul": [110, 111, 129], "fuse_qdq_pool": [110, 111, 129], "optimize_qdq": [110, 111, 129], "optimize_lay": [111, 113, 116], "quantize_layer_add": [111, 113, 116], "quantize_layer_bas": [111, 113, 116], "quantize_layer_bn": [111, 113, 116], "fakequantizebas": 112, "abc": [112, 294, 347, 425, 494, 496], "appli": [112, 125, 126, 127, 130, 132, 136, 158, 162, 171, 194, 196, 250, 290, 343, 419, 426, 427, 461, 464, 466, 472, 481, 484, 485, 488, 489, 492, 493, 496, 497, 498], "fakequant": 112, "per_channel": [112, 426, 427, 454, 488, 498], "num_bit": [112, 158, 163, 164, 493], "8": [112, 155, 164, 207, 208, 239, 280, 421, 426, 443, 454, 458, 485, 486, 490, 493, 496, 499], "channel_axi": [112, 166, 169], "symmetr": [112, 427, 488, 490, 495, 496], "narrow_rang": 112, "quantizeconfig": [114, 115], "custom": [114, 153, 164, 170, 325, 349, 360, 414, 442, 448, 449, 464, 485, 486, 490, 492], "There": [114, 325, 327, 384, 386, 447, 448, 454, 457, 461, 464, 490, 493, 496, 498], "instanc": [114, 115, 170, 207, 208, 211, 212, 241, 254, 255, 293, 294, 296, 299, 302, 305, 306, 308, 309, 310, 328, 340, 346, 347, 349, 350, 383, 387, 401, 404, 412, 415, 419, 421, 425, 442, 461, 466, 472, 496, 498, 499], "global": [114, 185, 207, 208, 305, 306, 308, 309, 310, 319, 401, 415, 421, 461, 485, 487, 496], "class": [115, 153, 163, 180, 186, 193, 303, 350, 383, 421, 422, 426, 444, 445, 448, 460, 461, 472, 483, 484, 488, 491, 494, 496, 498], "init_quantize_config": 115, "quantize_recip": 115, "begin": [115, 191, 192, 197, 321, 444, 448, 449, 461, 485, 496], "process": [115, 139, 150, 170, 185, 190, 191, 192, 199, 201, 203, 207, 208, 211, 212, 223, 224, 225, 236, 240, 241, 254, 255, 266, 267, 268, 278, 281, 319, 321, 323, 327, 328, 350, 383, 384, 386, 387, 404, 414, 415, 422, 425, 426, 427, 443, 444, 445, 448, 449, 450, 452, 461, 465, 484, 485, 488, 493, 494, 495, 498], "model_nam": [115, 207, 208], "special": [115, 155, 183, 360, 421, 444, 460, 461, 483, 485, 497], "decid": [115, 207, 208, 290, 321, 343, 425, 426, 461, 488, 491, 496], "qat_clone_funct": 115, "leav": [115, 475], "quantizewrapp": [115, 121], "wrapped_lay": 115, "config_quantizable_lay": 117, "quantizelayeradd": 118, "quantizelay": 119, "quantizelayerbas": 119, "quantizelayerbatchnorm": 120, "quantizewrapperbas": 121, "fusedbatchnormv3": [122, 132], "fusenodestartwithfusedbatchnormv3": [122, 132], "_quantizedfusedbatchnorm": 122, "concatv2": [123, 133, 146, 454], "fusenodestartwithconcatv2": [123, 133], "quantizedconcatv2": [123, 133], "fusenodestartwithconv2d": [124, 134], "conv2dbackpropinput": 125, "conv3dbackpropinputv2": 125, "fusenodestartwithdeconv2d": 125, "fusedinstancenorm": 126, "fusenodestartwithfusedinstancenorm": 126, "batchmatmul": 127, "batchmatmulv2": 127, "fusenodestartwithmatmul": [127, 136], "avgpool": [128, 137, 454], "fusenodestartwithpool": [128, 137], "optimizeqdqgraph": 130, "input_graph": [130, 135, 142, 378, 382, 425], "op_wise_sequ": [130, 135], "quantizegraph": 131, "quantizegraphbas": 131, "quantizenodebas": 131, "quantizegraphforintel": 135, "common": [138, 153, 155, 176, 208, 238, 288, 298, 302, 303, 304, 341, 407, 419, 445, 449, 450, 452, 456, 458, 461, 488, 493], "herlper": 138, "quantizegraphhelp": 138, "sever": [138, 201, 240, 281, 323, 422, 447, 448, 449, 457, 461, 462, 474, 478, 485, 487, 493, 495, 496, 498], "staticmethod": 138, "function": [138, 153, 191, 192, 197, 207, 208, 211, 212, 224, 254, 255, 267, 299, 302, 311, 316, 421, 422, 425, 426, 427, 442, 444, 448, 449, 452, 456, 457, 458, 460, 461, 462, 472, 482, 485, 488, 490, 491, 492, 493, 494, 496, 497], "smoothquantcalibr": 139, "dataset": [139, 140, 163, 199, 211, 212, 213, 215, 216, 218, 220, 221, 222, 234, 243, 254, 255, 256, 258, 259, 261, 263, 264, 265, 277, 288, 292, 293, 294, 296, 325, 341, 345, 346, 347, 349, 350, 383, 404, 407, 422, 424, 425, 426, 444, 450, 455, 460, 461, 469, 485, 488, 491, 493, 496, 498, 499], "outlier": [139, 426, 443, 447, 490, 493], "ignor": [139, 415, 443, 445, 490, 493], "smoothquantscal": 140, "alpha": [140, 158, 168, 179, 200, 488], "scales_per_op": 140, "method": [140, 142, 153, 155, 163, 164, 176, 200, 207, 208, 216, 221, 222, 223, 225, 232, 240, 243, 259, 264, 265, 266, 268, 275, 281, 302, 303, 304, 338, 399, 401, 407, 408, 410, 411, 421, 422, 424, 443, 444, 445, 447, 448, 449, 460, 461, 484, 485, 488, 489, 490, 493, 495, 496], "individu": [140, 185, 319, 377, 382, 419, 485, 493], "tensorflowqdqtoonnxqdqconvert": 141, "shape_overrid": 141, "inputs_as_nchw": [141, 285], "default_opset_vers": 141, "bia": [142, 207, 208, 490, 494], "correct": [142, 169, 203, 207, 208, 292, 293, 294, 296, 320, 345, 346, 347, 349, 419, 464], "biascorrect": 142, "fp32_graph": 142, "weight_empir": 142, "Will": [142, 448, 457], "our": [142, 163, 207, 208, 422, 424, 452, 461, 482, 492, 497], "task": [142, 223, 230, 266, 273, 296, 349, 445, 448, 449, 452, 457, 460, 461, 485, 490, 493], "close": [142, 169, 443], "w_int8": [142, 169], "u": [142, 169, 424, 464], "w_fp32": [142, 169], "varianc": [142, 169, 447], "ratio": [142, 169, 185, 190, 203, 207, 208, 236, 240, 278, 281, 321, 445, 461, 485, 495, 499], "differ": [142, 165, 169, 172, 176, 194, 207, 208, 216, 225, 240, 242, 259, 268, 281, 287, 296, 302, 304, 313, 324, 349, 360, 409, 419, 421, 422, 426, 444, 445, 447, 448, 450, 451, 456, 457, 460, 461, 463, 474, 478, 483, 485, 488, 493, 494, 495, 496], "wise": [142, 152, 154, 156, 164, 169, 207, 208, 328, 331, 387, 388, 392, 426, 457, 485, 494, 496, 498], "minim": [142, 169, 328, 387, 426, 427, 443, 448, 451, 460, 461, 474, 478, 485, 488, 496], "round": [142, 164, 169, 488, 490, 493], "scale_c": [142, 169], "shift": [142, 169, 236, 278, 482, 495], "notic": [142, 169, 241, 459, 462, 491], "first": [142, 155, 169, 184, 205, 207, 208, 223, 266, 292, 338, 345, 388, 399, 415, 421, 422, 425, 426, 427, 445, 447, 458, 462, 466, 475, 476, 479, 482, 487, 488, 489, 490, 492, 493, 494, 496, 498], "empir": [142, 169], "solut": [142, 169, 424, 425, 426, 453, 466, 470, 475, 486, 491, 493, 496, 497], "don": [142, 169, 185, 207, 208, 421, 485, 496], "min": [142, 164, 169, 177, 208, 415, 447, 485, 488, 493, 495, 496], "graphtransform": 143, "graphtransformbas": 143, "input_pb": [143, 145, 146], "log": [145, 170, 183, 366, 367, 371, 411, 421, 472, 492, 494, 496], "insertlog": 145, "node_name_list": 145, "show_nam": 145, "show_op": 145, "first_n": 145, "summar": [145, 448], "1024": [145, 225, 268, 467], "dump_fp32": 145, "rerang": 146, "rerangequantizedconcat": 146, "rerange_quant": 146, "version1_lt_version2": [147, 415], "version1": [147, 415], "version2": [147, 415], "version1_gt_version2": [147, 415], "greater": [147, 415, 485, 496], "version1_eq_version2": [147, 415], "version1_gte_version2": [147, 415], "version1_lte_version2": [147, 415], "disable_random": 147, "seed": [147, 176, 207, 208, 304, 415, 461, 498], "disabl": [147, 207, 208, 419, 481, 489], "read_graph": 147, "in_graph": 147, "in_graph_is_binari": 147, "write_graph": 147, "out_graph_def": 147, "out_graph_fil": 147, "write": [147, 232, 275, 415, 450, 456, 461, 464, 494], "is_ckpt_format": 147, "model_path": [147, 447], "ckpt": [147, 350, 358, 383, 499], "folder": [147, 225, 230, 268, 273, 350, 383, 414, 445, 469, 474, 478, 490, 494], "is_saved_model_format": 147, "saved_model": [147, 298], "get_estimator_graph": 147, "estim": [147, 296, 349, 358, 496], "input_fn": [147, 358], "get_tensor_by_nam": 147, "try_cnt": 147, "consid": [147, 296, 349, 419, 443, 448, 482, 496], "import": [147, 170, 177, 207, 208, 298, 350, 360, 383, 402, 404, 415, 421, 422, 424, 427, 442, 444, 445, 447, 448, 449, 450, 452, 455, 460, 461, 462, 463, 464, 468, 470, 483, 484, 485, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497], "scope": [147, 426, 461], "onc": [147, 155, 201, 247, 323, 327, 384, 386, 426, 427, 444, 481, 485, 486, 496, 499], "both": [147, 208, 419, 422, 425, 449, 461, 465, 485, 487, 488, 493, 496], "compat": [147, 358, 450, 463, 476, 479, 481, 491], "v1": [147, 235, 236, 278, 293, 294, 296, 346, 347, 349, 358, 450, 452, 453, 460, 463, 485, 491, 492, 499], "suffix": 147, "time": [147, 155, 207, 208, 240, 281, 296, 328, 349, 360, 387, 415, 426, 444, 447, 450, 453, 461, 469, 471, 474, 478, 481, 482, 483, 485, 486, 488, 490, 492, 494, 495, 496], "got": [147, 426, 453, 494], "iterator_sess_run": 147, "sess": [147, 358], "iter_op": 147, "feed_dict": [147, 222, 265], "output_tensor": [147, 358], "measur": [147, 241, 350, 409, 422, 425, 442, 447, 448, 460, 461, 490, 494, 496, 499], "integr": [147, 172, 242, 425, 461, 482, 490], "session": [147, 222, 265, 358, 461, 494], "makeiter": 147, "feed": [147, 222, 265, 448, 485], "end": [147, 190, 191, 192, 197, 207, 208, 223, 239, 240, 266, 280, 281, 321, 327, 384, 386, 425, 426, 427, 448, 449, 454, 458, 461, 475, 483, 485, 494, 495, 496], "predict": [147, 240, 245, 281, 289, 293, 294, 296, 342, 346, 347, 349, 383, 422, 448, 460, 472, 490, 493, 494, 495], "pred": [147, 296, 349, 460], "collate_tf_pr": 147, "collat": [147, 163, 444], "tbe": 147, "get_input_output_node_nam": 147, "fix_ref_type_of_graph_def": 147, "fix": [147, 195, 197, 223, 266, 321, 420, 444, 445, 468, 485, 493, 496], "strip_unused_lib": 147, "offici": [147, 289, 293, 294, 342, 346, 347, 419, 493], "r1": 147, "15": [147, 454, 458], "branch": 147, "get_graph_def": 147, "auto_input_output": 147, "get_model_input_shap": 147, "inout": 147, "get_tensor_val_from_graph_nod": 147, "graph_node_name_map": 147, "kei": [147, 150, 155, 160, 183, 194, 203, 205, 207, 208, 303, 320, 358, 402, 405, 407, 415, 424, 426, 486, 490, 494, 496], "val": [147, 203, 225, 228, 268, 271, 320, 447, 461], "tensor_v": 147, "int8_node_name_revers": 147, "revers": 147, "tf_diagnosis_help": 147, "fp32_model": [147, 150, 163, 286, 415, 425], "quan_model": 147, "save_path": [147, 285, 286, 425, 463], "diagnosi": [147, 207, 208, 461, 486, 491, 497], "generate_feed_dict": 147, "input_tensor": [147, 358], "get_weight_from_input_tensor": 147, "input_tensor_nam": [147, 358], "associ": [147, 155, 292, 345], "quant": [147, 163, 164, 207, 208, 338, 399, 421, 461, 488], "search": [147, 149, 176, 177, 183, 197, 204, 208, 211, 212, 254, 255, 287, 289, 299, 302, 303, 304, 324, 328, 342, 387, 424, 457, 460, 464, 465, 475, 485, 486, 490, 494, 496, 497], "look": [147, 194, 424, 425, 427, 454, 460, 498], "sq_weight_tensor": 147, "sq_weights_nod": 147, "two": [147, 150, 155, 170, 184, 189, 196, 201, 225, 230, 241, 268, 273, 292, 319, 323, 325, 332, 345, 393, 415, 421, 422, 444, 445, 448, 450, 452, 454, 461, 462, 488, 489, 490, 492, 496, 498], "torch": [148, 149, 150, 151, 152, 155, 158, 159, 160, 161, 163, 164, 168, 180, 183, 184, 186, 194, 204, 207, 208, 286, 350, 383, 414, 421, 424, 427, 428, 448, 450, 452, 461, 462, 463, 464, 469, 472, 488, 490, 493, 494], "bf16modulewrapp": 148, "bf16modul": 148, "mix": [148, 157, 207, 208, 326, 338, 350, 385, 399, 424, 425, 432, 457, 464, 470, 471, 472, 497], "precis": [148, 157, 207, 208, 211, 212, 254, 255, 287, 294, 296, 297, 324, 326, 338, 347, 349, 350, 360, 385, 388, 399, 415, 424, 425, 426, 432, 442, 443, 449, 450, 454, 457, 464, 470, 471, 472, 486, 487, 488, 493, 496, 497], "mixed_precision_model": 148, "bf16_symbolic_trac": 148, "fx_sub_module_list": 148, "trace": [148, 150, 161, 163, 183, 207, 208, 286, 390, 421, 471, 496], "_description_": 148, "is_leaf": 149, "judg": 149, "nn": [149, 158, 160, 163, 164, 183, 184, 194, 207, 208, 286, 350, 383, 414, 421, 448, 461, 463, 490, 493, 494], "trace_gptq_target_block": 149, "module_typ": 149, "modulelist": 149, "stack": 149, "structur": [149, 184, 195, 196, 207, 208, 321, 339, 400, 457, 480, 482, 485, 488, 494, 497, 499], "critic": [149, 194, 419], "llm": [149, 198, 490, 493], "gptq_related_block": 149, "embed": [149, 163, 443, 485], "transfrom": 149, "transformers_pr": 149, "todo": [149, 223, 226, 266, 269, 292, 338, 345, 399], "transformers_nam": 149, "find_lay": 149, "conv1d": [149, 427], "find_layers_nam": 149, "log_quantizable_layers_per_transform": 149, "transformer_block": 149, "maxq": 149, "gptquantiz": 149, "weight_config": [149, 162, 164], "compress": [149, 288, 311, 316, 341, 360, 404, 417, 424, 432, 448, 457, 461, 481, 483, 484, 485, 486, 488, 493, 497, 499], "pretrain": [149, 410, 464, 470], "url": [149, 225, 268, 459], "arxiv": [149, 179, 197, 198, 321, 443, 485, 490, 493], "org": [149, 179, 197, 198, 292, 321, 345, 420, 421, 447, 458, 476, 479], "2210": [149, 490], "17323": [149, 490], "hessian": [150, 390, 496], "awar": [150, 164, 171, 208, 250, 298, 319, 390, 404, 424, 425, 426, 427, 443, 449, 450, 452, 457, 481, 484, 486, 490, 496], "node_collector": 150, "hook": [150, 171, 194, 249, 250, 311, 316, 407, 448, 449, 461, 485, 493, 494], "record": [150, 163, 164, 172, 223, 224, 225, 231, 242, 249, 266, 267, 268, 274, 415, 445, 492, 494, 496], "hessiantrac": 150, "q_model": [150, 154, 208, 298, 383, 421, 424, 444, 445, 447, 450, 452, 455, 456, 460, 461, 463, 488, 489, 490], "criterion": [150, 171, 173, 178, 179, 185, 190, 191, 192, 194, 197, 198, 202, 207, 208, 244, 247, 288, 341, 448, 449, 461, 485, 488, 496, 498], "yao": 150, "zhewei": 150, "et": [150, 443, 490, 493], "al": [150, 443, 490, 493], "pyhessian": 150, "network": [150, 179, 185, 186, 321, 390, 422, 443, 448, 449, 452, 461, 486, 488, 493, 496], "through": [150, 211, 212, 254, 255, 349, 350, 383, 424, 442, 454, 456, 457, 460, 467, 483, 484, 485, 487, 488, 493], "len": [150, 208, 240, 281, 445, 450, 495], "2020": 150, "ieee": [150, 462, 493], "intern": [150, 338, 399, 444, 445, 460, 485], "confer": [150, 485, 493], "big": [150, 447], "dong": 150, "zhen": 150, "hawq": [150, 390, 496], "v2": [150, 390, 444, 450, 452, 453, 458, 470, 491, 496, 497, 499], "advanc": [150, 207, 208, 419, 424, 426, 432, 488, 498], "system": [150, 155, 170, 241, 415, 442, 467, 499], "33": [150, 499], "18518": 150, "18529": 150, "openvinotoolkit": 150, "nncf": 150, "develop": [150, 360, 420, 421, 458, 461, 462, 464, 470, 481, 485, 486, 489, 492], "hessian_trac": 150, "compare_weight": 150, "float_dict": 150, "ani": [150, 155, 292, 294, 337, 345, 347, 377, 382, 398, 402, 412, 415, 419, 420, 424, 427, 450, 464, 469, 482, 485, 492], "quantized_dict": 150, "compar": [150, 296, 349, 415, 449, 460, 485, 488, 490, 492, 494, 496], "being": [150, 292, 345, 427], "wt_compare_dict": 150, "float_model": 150, "state_dict": [150, 450, 490, 494], "qmodel": 150, "compute_error": 150, "state": [150, 184, 427, 467, 485], "weight_dict": 150, "hawq_top": 150, "enable_act": 150, "modul": [151, 152, 180, 186, 193, 301, 307, 317, 318, 421, 444, 448, 457, 460, 461, 463, 485, 487, 489, 490, 494, 497], "portabl": 153, "serial": [153, 155], "see": [153, 240, 281, 289, 342, 419, 421, 423, 459, 461, 474, 475, 478, 481, 482, 490, 493, 494, 496], "copyreg": 153, "mechan": [153, 179, 485, 492, 497], "pickler": 153, "pickletool": 153, "comment": [153, 419, 426, 445, 460, 461, 490, 495], "unpickl": [153, 155], "load": [153, 155, 156, 223, 239, 240, 266, 280, 281, 350, 358, 383, 414, 415, 426, 444, 474, 478, 482, 487, 488, 493], "misc": [153, 459], "format_vers": 153, "compatible_format": 153, "except": [153, 155, 402, 415], "pickleerror": 153, "pickl": [153, 155], "picklingerror": 153, "unpicklingerror": 153, "problem": [153, 223, 266, 296, 349, 460, 462, 482], "secur": [153, 424, 486, 500], "violat": 153, "also": [153, 184, 222, 225, 240, 265, 268, 281, 289, 342, 349, 360, 383, 420, 422, 425, 426, 427, 444, 447, 451, 455, 457, 460, 461, 464, 469, 474, 475, 478, 481, 482, 483, 485, 486, 488, 489, 493, 496], "includ": [153, 172, 179, 183, 185, 200, 202, 207, 208, 223, 225, 232, 240, 242, 266, 268, 275, 281, 287, 297, 319, 324, 402, 415, 419, 420, 425, 426, 427, 444, 445, 447, 458, 459, 460, 461, 464, 467, 470, 475, 485, 488, 489, 490, 494, 496], "necessarili": 153, "limit": [153, 177, 328, 387, 415, 424, 447, 448, 490, 491, 494], "attributeerror": [153, 402], "eoferror": 153, "importerror": [153, 453], "indexerror": 153, "layerwisequ": 154, "pretrained_model_name_or_path": [154, 156], "op_cfg": 154, "output_dir": [154, 410, 461, 469, 470], "order": [154, 163, 289, 290, 325, 328, 331, 340, 342, 343, 387, 392, 401, 421, 447, 460, 487, 493, 494, 496], "memomeri": 154, "f": [155, 180, 448, 450, 488, 490, 493], "file_lik": 155, "map_loc": 155, "pickle_modul": [155, 180], "weights_onli": 155, "pickle_load_arg": 155, "facil": 155, "treat": [155, 444], "storag": [155, 424, 455, 460, 490, 493], "thei": [155, 241, 402, 419, 448, 454, 461, 469, 483], "deseri": 155, "were": [155, 296, 349, 467, 485], "fail": [155, 421, 444, 452], "e": [155, 185, 207, 208, 419, 448, 451, 455, 464, 469, 470, 474, 478, 485, 490, 493, 496], "becaus": [155, 189, 194, 240, 281, 319, 421, 488, 493, 495, 496], "doesn": [155, 240, 281, 425, 450, 461, 462, 482, 498], "certain": [155, 492], "howev": [155, 485, 490, 493], "dynam": [155, 208, 213, 256, 286, 338, 399, 425, 444, 448, 452, 457, 461, 464, 469, 470, 471, 472, 475, 481, 486, 496, 499], "altern": [155, 207, 208, 383], "argument": [155, 208, 402, 422, 447, 490], "callabl": [155, 207, 208, 294, 347, 404, 444], "locat": [155, 165, 203, 240, 281, 450, 467, 474, 478, 481, 488, 491, 495, 498], "resid": 155, "tag": [155, 358, 493, 494], "wa": [155, 207, 208, 425, 461, 486, 496], "builtin": [155, 450], "cuda": [155, 203, 462, 464, 466, 488], "device_id": 155, "either": [155, 208, 292, 345, 465, 469, 484, 487, 488], "final": [155, 183, 190, 203, 321, 426, 461, 467, 483, 485, 488, 491, 496], "alreadi": [155, 170, 225, 239, 241, 268, 280, 425, 445, 457, 476, 479, 496], "right": [155, 236, 278, 292, 345, 419, 421, 481, 493, 495], "otherwis": [155, 225, 240, 268, 281, 415, 419, 426, 445, 476, 479, 487, 495], "fall": [155, 163], "back": [155, 163, 240, 246, 281, 447, 481], "behavior": [155, 419, 420, 425, 426, 427, 454, 463, 494, 496, 498], "wasn": 155, "indic": [155, 171, 207, 208, 216, 221, 223, 259, 264, 266, 282, 292, 303, 345, 421, 444, 453, 490, 494], "appear": [155, 419, 475, 481], "ones": [155, 292, 345, 485], "put": [155, 225, 268, 445, 448], "user": [155, 170, 183, 195, 203, 207, 208, 211, 212, 225, 228, 232, 240, 241, 247, 254, 255, 268, 271, 275, 281, 287, 311, 316, 322, 324, 325, 349, 350, 360, 383, 388, 401, 404, 415, 421, 422, 424, 425, 426, 427, 432, 442, 444, 448, 449, 452, 454, 457, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 472, 475, 481, 483, 484, 485, 486, 488, 489, 491, 493, 494, 495, 496, 500], "register_packag": 155, "readlin": 155, "tell": [155, 349, 383, 487], "seek": 155, "o": [155, 402, 458, 466, 493], "pathlik": 155, "how": [155, 164, 171, 179, 185, 191, 192, 197, 198, 207, 208, 240, 281, 282, 319, 420, 421, 423, 425, 444, 445, 448, 449, 450, 456, 460, 461, 475, 476, 479, 480, 481, 485, 486, 488, 493, 495, 496, 497, 498], "metadata": 155, "primit": 155, "keyword": [155, 208], "unless": [155, 454], "implicitli": 155, "known": [155, 243, 328, 387, 461, 494, 496], "insecur": 155, "possibl": [155, 241, 447, 484, 485, 489, 496], "construct": [155, 223, 226, 227, 230, 238, 243, 245, 246, 248, 266, 269, 270, 273, 349, 354, 358, 401, 407, 419, 426, 427, 445, 450, 485, 496], "malici": 155, "arbitrari": [155, 461, 484], "code": [155, 183, 211, 212, 241, 254, 255, 298, 322, 325, 383, 404, 421, 424, 425, 426, 427, 445, 448, 449, 450, 456, 457, 459, 460, 464, 466, 468, 469, 470, 472, 475, 481, 483, 484, 485, 486, 487, 488, 492, 493, 494, 495], "never": [155, 496], "could": [155, 160, 168, 185, 211, 212, 225, 254, 255, 268, 325, 350, 383, 404, 419, 421, 449, 461, 484, 485, 488, 490, 493, 497], "come": [155, 496], "untrust": 155, "unsaf": 155, "tamper": 155, "trust": [155, 447], "load_state_dict": 155, "ram": 155, "surg": 155, "checkpoint": [155, 358, 414, 463], "By": [155, 183, 207, 208, 289, 342, 426, 427, 460, 463, 474, 475, 478, 486, 496], "decod": [155, 235, 236, 278, 289, 342, 460, 495], "byte": 155, "utf": [155, 239, 280], "unicodedecodeerror": 155, "ascii": 155, "codec": 155, "0x": 155, "incorrect": 155, "extra": [155, 294, 347, 461], "encod": [155, 292, 345, 495], "latin1": 155, "them": [155, 183, 223, 266, 421, 427, 444, 447, 452, 454, 456, 484, 485, 490, 496], "keep": [155, 194, 203, 320, 388, 421, 425, 480, 481, 491], "later": [155, 160, 168, 494], "byte_arrai": 155, "xdoctest": 155, "skip": [155, 494, 496], "undefin": [155, 203, 320], "filepath": [155, 415], "pt": [155, 414, 463, 486, 488, 489, 490], "onto": 155, "lambda": 155, "loc": 155, "bytesio": 155, "open": [155, 244, 288, 341, 407, 417, 419, 424, 452, 453, 461, 476, 479, 482, 486], "rb": 155, "buffer": 155, "get_children": 156, "get_named_children": 156, "dowload_hf_model": 156, "repo_id": 156, "cache_dir": 156, "repo_typ": 156, "revis": 156, "download": [156, 225, 268, 445, 447, 458, 491], "hug": [156, 424, 486], "face": [156, 419, 424, 432, 464, 468, 486, 491, 499], "hf": 156, "hub": [156, 424, 451, 455, 472], "load_shel": 156, "empti": [156, 207, 208, 467], "get_super_module_by_nam": 156, "module_nam": [156, 179, 180, 190, 191, 192, 193, 195, 196, 197, 198, 200, 202, 321, 415], "father": [156, 183], "update_modul": 156, "new_modul": [156, 160, 163], "load_layer_wise_quantized_model": 156, "load_tensor_from_shard": 156, "shard": 156, "load_tensor": 156, "ipex_mixed_precis": 157, "example_input": [157, 160, 162, 163, 164, 207, 208, 286, 452], "fakeaffinetensorquantfunct": 158, "affin": [158, 488], "teqlinearfakequ": 158, "orig_lay": 158, "group_siz": [158, 163, 164, 401, 490], "teqmullinear": 158, "input_scal": 158, "trainabl": [158, 162], "teq": [158, 490], "detector": 159, "transformerbasedmodelblockpatterndetector": 159, "pattern_lst": 159, "block_pattern": 159, "detect": [159, 163, 183, 207, 208, 292, 296, 345, 349, 354, 421, 464, 471, 472, 485, 496], "ffn": [159, 194], "get_modul": 160, "set_modul": [160, 163], "torchsmoothqu": [160, 493], "q_func": [160, 211, 212, 254, 255, 326, 328, 331, 334, 384, 385, 387, 388, 390, 392, 395, 425, 461, 496], "traced_model": [160, 161], "whose": [160, 168, 185, 320, 456, 493, 496], "absorb": [160, 164, 168], "graphtrac": 160, "trace_and_fuse_sub_graph": 161, "is_qat": 161, "tequant": 162, "absorb_to_lay": [162, 164], "extra_config": [162, 164], "get_embedding_contigu": 163, "contigu": 163, "is_fused_modul": 163, "_propagate_qconfig_help": 163, "collate_torch_pr": 163, "fetch": [163, 167, 216, 259, 426, 445], "collate_result": 163, "input2tupl": 163, "append_attr": 163, "fx_model": 163, "fx_white_list": 163, "append": [163, 325, 328, 387, 421, 449, 461, 484], "graphmodul": [163, 421, 489], "addit": [163, 208, 404, 426, 427, 448, 475, 491, 496], "dir": [163, 223, 266, 414, 445, 453, 456], "generate_activation_observ": 163, "observ": [163, 427, 492, 494, 496], "what": [163, 190, 221, 264, 349, 383, 404, 419, 486], "check_cfg_and_qconfig": 163, "op_infos_from_cfg": 163, "output_tensor_ids_op_nam": 163, "paser_cfg": 163, "ops_nam": 163, "get_quantizable_ops_from_cfg": 163, "input_tensor_ids_op_nam": 163, "update_sq_scal": 163, "ipex_config_path": 163, "smoothquant_scale_info": 163, "ipex_config": 163, "json": [163, 224, 240, 267, 281, 445, 463, 482, 490, 495], "temporari": [163, 415, 419], "auto_copi": 163, "fetch_modul": 163, "op_nam": [163, 204, 207, 208, 339, 400, 415, 416, 426, 461, 485, 494], "simple_infer": 163, "get_example_input": 163, "example_inp": 163, "get_fallback_ord": 163, "confidence_batch": [163, 496], "fallback": [163, 208, 331, 332, 390, 392, 393, 452, 462, 489, 496], "requantize_cfg": 163, "confid": 163, "ordered_op": 163, "get_mse_order_per_fp32": 163, "mse": [163, 164, 207, 208, 288, 296, 330, 341, 349, 383, 391, 415, 447, 460, 487, 490, 491], "influenc": [163, 485], "last": [163, 179, 203, 207, 208, 444, 462, 464, 466, 471, 475, 488, 493], "fallback_ord": 163, "get_mse_order_per_int8": 163, "get_torch_vers": 163, "match_datatype_pattern": 163, "calculate_quant_min_max": 163, "unsign": [163, 340, 401, 427], "qmin": 163, "qmax": 163, "get_depth": 163, "depth": [163, 448, 489], "get_dict_at_depth": 163, "target_depth": 163, "nest": [163, 205], "get_element_under_depth": 163, "ops_lst": 163, "get_op_type_by_nam": 163, "quantizable_op": 163, "collect_weight_info": 163, "fc": [163, 208], "rtn": [163, 490], "param": [163, 170, 213, 241, 247, 256, 296, 328, 349, 387, 415, 425, 463, 496], "configu": 163, "_type_": 163, "qdq_weight_asym": 164, "quantil": [164, 496], "return_int": 164, "clip": [164, 490, 493], "choos": [164, 225, 268, 457, 469, 486, 491, 493, 496, 498], "qdq_weight_sym": 164, "full_rang": 164, "rang": [164, 226, 227, 240, 269, 270, 281, 402, 404, 424, 425, 427, 443, 445, 447, 448, 449, 450, 461, 484, 485, 488, 490, 493, 495], "amax": 164, "qdq_weight_actor": 164, "quant_weight": 164, "group": [164, 200, 306, 457, 485, 490, 494, 495, 496, 499], "mani": [164, 349, 383, 444, 458, 490, 496, 498], "element": [164, 187, 188, 203, 221, 264, 292, 319, 345, 415, 445, 457, 460, 485, 490, 493], "zp": [164, 493], "rtn_quantiz": 164, "32": [164, 181, 401, 450, 456, 490, 493, 499], "sym_full_rang": 164, "nearst": 164, "num": [164, 415, 444], "configir": 164, "fc2": 164, "gptq_perm": 164, "gptq": [164, 490], "perm": [164, 240, 281, 495], "int32": [164, 445, 490], "gptq_quantiz": 164, "get_module_input_output": 164, "module_hook_config": 164, "calib_func": [164, 383, 489], "help": [164, 249, 298, 463, 464, 470, 481, 490, 496, 497], "module_name_list": 164, "requir": [164, 207, 208, 214, 325, 358, 382, 421, 425, 426, 442, 443, 444, 447, 449, 450, 454, 461, 462, 463, 465, 475, 481, 485, 488, 490, 491, 492, 493, 494, 496, 498], "fc1": 164, "input_valu": 164, "output_valu": 164, "awq_quant": 164, "absorb_dict": 164, "n_sampl": 164, "auto_scal": [164, 490], "mse_rang": [164, 490], "n_block": [164, 490], "5": [164, 168, 172, 207, 208, 227, 236, 242, 270, 278, 296, 349, 383, 425, 445, 452, 454, 460, 461, 485, 487, 488, 490, 493, 495, 496, 498, 499], "awq": [164, 490], "absorb_lay": 164, "absorbed_lay": 164, "fc3": 164, "salient": [164, 485], "oom": 164, "teq_quant": 164, "quant_weight_w_scal": 164, "algorithm_registri": 165, "algorithm_typ": 165, "registr": [165, 225, 232, 240, 268, 275, 281, 314], "algorithmschedul": 165, "conf": [165, 170, 171, 208, 211, 212, 241, 254, 255, 298, 305, 306, 308, 309, 310, 311, 316, 326, 328, 331, 334, 338, 350, 360, 383, 384, 385, 387, 388, 390, 392, 395, 399, 402, 404, 421, 422, 424, 427, 442, 448, 455, 456, 461, 462, 463, 484, 488, 489, 490, 492, 493, 496], "control": [165, 207, 208, 421, 461, 485, 496], "phase": [165, 422, 461, 485, 488, 489, 496], "fastbiascorrect": [166, 169], "fast_bias_correct": [167, 207, 208, 341, 488], "weight_correct": [167, 207, 208, 341, 488], "kernel": [168, 207, 208, 425, 426, 496], "futur": [168, 211, 212, 243, 254, 255, 457, 461, 472, 497], "weightcorrect": 169, "1e": [169, 493, 498], "05": [169, 208, 296, 349, 460, 493, 499], "evalu": [170, 171, 185, 207, 211, 212, 223, 241, 254, 255, 266, 282, 289, 292, 293, 294, 296, 298, 342, 345, 346, 347, 349, 350, 360, 383, 404, 407, 422, 425, 426, 445, 448, 449, 456, 457, 460, 461, 462, 464, 470, 472, 475, 481, 483, 485, 488, 492, 494, 496, 498], "set_env_var": [170, 241], "env_var": [170, 241], "overwrite_exist": [170, 241], "env": [170, 241, 453], "set_all_env_var": [170, 241], "physic": [170, 241, 419, 442], "core": [170, 207, 208, 241, 442, 459, 474, 478, 499], "get_architectur": [170, 241], "architectur": [170, 241, 299, 302, 424, 442, 448, 461, 485, 486, 490, 497], "get_threads_per_cor": [170, 241], "thread": [170, 207, 208, 241, 377, 382, 444], "get_thread": [170, 241], "get_physical_id": [170, 241], "socket": [170, 241, 415, 499], "get_core_id": [170, 241], "id": [170, 239, 241, 280, 289, 291, 292, 293, 294, 342, 344, 345, 346, 347, 460, 492, 496], "get_bounded_thread": [170, 241], "core_id": [170, 241], "bind": [170, 241], "run_inst": 170, "b_dataload": [170, 207, 208, 442, 461], "b_func": [170, 442], "benchmarkconfig": [170, 207, 208, 442, 447, 461], "accuraci": [170, 203, 207, 208, 211, 212, 254, 255, 282, 287, 296, 311, 316, 324, 349, 350, 360, 383, 388, 402, 404, 412, 421, 424, 426, 427, 443, 444, 445, 447, 449, 450, 451, 452, 460, 461, 472, 481, 483, 484, 485, 486, 487, 490, 491, 492, 493, 494, 497, 498, 499], "goal": [170, 282, 287, 311, 316, 324, 350, 383, 426, 444, 484, 488, 496], "prefer": [170, 287, 324, 383, 485, 490], "space": [170, 176, 177, 191, 192, 197, 198, 207, 208, 211, 212, 254, 255, 287, 294, 299, 302, 303, 304, 324, 328, 331, 338, 347, 350, 383, 387, 392, 399, 419, 420, 422, 425, 426, 427, 485, 488, 498], "etc": [170, 171, 239, 280, 282, 287, 294, 311, 316, 324, 347, 350, 383, 414, 448, 457, 485, 492, 496], "generate_prefix": 170, "core_list": 170, "command": [170, 241, 404, 447, 450, 464, 466, 469, 474, 478, 482], "numactl": [170, 453, 467, 475], "call_on": 170, "cmd": [170, 482], "log_fil": [170, 376, 381], "window": [170, 442, 481, 482], "config_inst": 170, "raw_cmd": 170, "multi": [170, 181, 183, 194, 292, 345, 349, 383, 422, 444, 445, 457, 461, 483, 485, 488, 496], "trigger": [170, 190, 321, 420], "raw": [170, 224, 228, 231, 267, 271, 274, 331, 392, 460, 496], "summary_benchmark": 170, "summari": [170, 404, 447, 476, 479, 494, 499], "profil": [170, 341], "benchmark_with_raw_cmd": 170, "commend": 170, "fit_with_raw_cmd": 170, "cores_per_inst": [170, 207, 208, 442, 461, 487], "num_of_inst": [170, 207, 208, 442, 461, 487], "test": [170, 207, 208, 240, 281, 420, 424, 447, 458, 499], "fit": [170, 185, 207, 208, 328, 350, 383, 387, 402, 404, 421, 424, 442, 444, 445, 447, 450, 455, 456, 460, 461, 462, 463, 485, 488, 489, 490], "pb": [170, 207, 208, 350, 358, 383, 424, 442, 450, 455, 461, 463, 494, 499], "eval_dataload": [170, 207, 208, 211, 212, 254, 255, 325, 326, 328, 331, 334, 350, 383, 384, 385, 387, 388, 390, 392, 395, 404, 442, 456, 460, 461, 488, 496], "compon": [171, 282, 288, 325, 341, 421, 447, 450, 458, 459, 464, 481, 484], "quantizationawaretrainingcallback": 171, "pruningcallback": 171, "distillationcallback": 171, "basecallback": 171, "design": [171, 222, 245, 250, 265, 349, 388, 422, 424, 461, 469, 472, 485, 488, 497], "mainli": [171, 201, 250, 323, 461, 485, 488], "prune": [171, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 207, 208, 250, 251, 288, 305, 306, 308, 309, 310, 314, 316, 317, 319, 320, 321, 323, 325, 341, 415, 424, 450, 451, 454, 455, 457, 484, 486, 497, 498], "distil": [171, 178, 207, 208, 242, 249, 250, 288, 341, 424, 451, 455, 457, 484, 497, 498], "In": [171, 187, 188, 189, 194, 195, 196, 200, 208, 222, 250, 265, 292, 319, 321, 345, 360, 419, 421, 422, 424, 425, 426, 444, 445, 447, 448, 449, 450, 460, 461, 471, 474, 475, 478, 483, 484, 485, 488, 489, 490, 492, 493, 494, 495, 496, 497], "adaptor": [171, 207, 208, 340, 401, 407, 424, 427, 457, 489, 491, 493, 494, 497], "deriv": [171, 179, 187, 188, 189, 195, 196, 197, 198, 199, 200, 201, 202, 282, 319, 321, 323], "pipelin": [171, 282, 299, 300, 325, 449, 461, 484], "knowledg": [171, 172, 207, 208, 242, 282, 449, 451, 455, 457, 461, 463, 498], "transfer": [171, 230, 273, 282, 445, 448, 449, 461, 493], "teacher": [171, 207, 208, 282, 448, 449, 461, 499], "student": [171, 207, 208, 223, 249, 266, 282, 445, 448, 449, 499], "distillation_conf": [171, 204, 282], "_epoch_ran": [171, 282], "integ": [171, 189, 190, 207, 208, 282, 292, 296, 303, 319, 321, 345, 349, 402, 425, 427, 443, 488, 493, 496], "much": [171, 179, 207, 208, 240, 281, 282, 448, 475, 493, 495], "epoch": [171, 191, 192, 197, 282, 321, 404, 444, 448, 449, 450, 461, 484, 485, 498], "ran": [171, 282], "eval_frequ": [171, 282], "frequenc": [171, 190, 207, 208, 282, 321, 461, 485, 498], "term": [171, 191, 192, 197, 198, 200, 282, 420, 443, 448, 459, 460, 483, 484, 496], "best_scor": [171, 282], "best": [171, 240, 281, 282, 287, 324, 331, 392, 419, 422, 458, 464, 470, 481, 483, 488, 490, 495, 496], "metric": [171, 207, 208, 211, 212, 244, 254, 255, 282, 287, 288, 303, 311, 316, 324, 325, 341, 350, 383, 404, 407, 422, 425, 426, 445, 447, 450, 461, 462, 488, 492, 494, 496, 497, 498, 499], "best_model": [171, 282, 490], "found": [171, 282, 424, 448, 462, 469, 493, 496, 499], "critet": [172, 242], "tensorflowknowledgedistillationloss": [172, 242], "pytorchknowledgedistillationloss": [172, 242, 461], "pytorchintermediatelayersknowledgedistillationloss": [172, 242], "tensorflowcriterion": [172, 242], "pytorchcriterion": [172, 242], "criterion_registri": [172, 242], "criterion_typ": [172, 242], "registry_criterion": [172, 242], "knowledgedistillationframework": [172, 242], "student_model": [172, 208, 242, 461], "teacher_model": [172, 207, 208, 242, 448, 449, 461], "knowledgedistillationloss": [172, 242, 461, 498], "temperatur": [172, 207, 208, 242, 461, 498], "loss_typ": [172, 176, 207, 208, 242, 461, 498], "ce": [172, 207, 208, 242, 461, 498], "loss_weight": [172, 207, 208, 242, 461, 498], "pytorchknowledgedistillationlosswrapp": [172, 242], "param_dict": [172, 242, 247], "tensorflowknowledgedistillationlosswrapp": [172, 242], "tensorflowknowledgedistillationlossextern": [172, 242], "intermediatelayersknowledgedistillationloss": [172, 242], "layer_map": [172, 208, 242, 448], "add_origin_loss": [172, 208, 242], "pytorch": [172, 180, 183, 186, 189, 190, 193, 198, 199, 207, 208, 222, 223, 225, 228, 232, 240, 242, 247, 249, 265, 266, 268, 271, 275, 281, 286, 287, 296, 297, 317, 319, 322, 324, 332, 341, 349, 350, 359, 383, 393, 408, 415, 421, 422, 424, 425, 426, 427, 443, 444, 448, 449, 451, 454, 457, 458, 461, 462, 463, 464, 466, 469, 470, 471, 472, 481, 485, 486, 487, 490, 491, 493, 496, 498], "pytorchintermediatelayersknowledgedistillationlosswrapp": [172, 242], "selfknowledgedistillationloss": [172, 242], "selfknowledg": [172, 242], "pytorchselfknowledgedistillationloss": [172, 242], "pytorchselfknowledgedistillationlosswrapp": [172, 242], "hyper": [174, 498], "sa_optim": [174, 178], "simul": [175, 427], "anneal": 175, "register_search": 176, "searcher": [176, 183, 208, 304], "registri": [176, 177, 179, 185, 190, 199, 200, 201, 202, 319, 321, 323, 422], "sure": [176, 185, 190, 199, 201, 319, 321, 323, 442], "search_spac": [176, 204, 208, 299, 302, 303, 304], "gridsearch": [176, 304], "grid": [176, 208, 304, 422, 485], "whole": [176, 304, 427, 488, 499], "exhaust": [176, 208, 288, 304, 330, 341, 391, 487], "randomsearch": [176, 304], "randomli": [176, 240, 281, 304, 328, 387, 422, 493, 495, 496], "bayesianoptimizationsearch": [176, 304], "42": [176, 208, 304, 499], "bayesian": [176, 208, 288, 304, 330, 341, 391, 422, 485, 487], "xgbsearcher": 176, "higher_is_bett": [176, 207, 208, 349, 383, 496, 498], "reg": [176, 178, 180, 191, 192, 197, 198, 208], "min_train_sampl": [176, 208], "10": [176, 207, 208, 225, 268, 328, 387, 424, 442, 445, 452, 458, 461, 485, 487, 495, 496, 499], "xgboost": [176, 485], "searchspac": 177, "factori": [177, 356, 363, 365, 370, 373, 375, 380], "actual": [177, 296, 349, 450, 493], "interv": [177, 196, 485], "descret": 177, "store": [177, 179, 180, 183, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 207, 208, 225, 268, 314, 321, 456], "continu": [177, 188, 292, 319, 345, 422, 461, 482, 485, 497], "learning_r": [177, 207, 208, 461, 487, 498], "001": [177, 225, 268, 445, 450, 493, 498], "num_train_epoch": [177, 461, 485], "20": [177, 240, 281, 493, 495, 498, 499], "weight_decai": [177, 461, 498], "register_searchspac": 177, "pruner": [177, 178, 288, 305, 306, 307, 308, 309, 311, 316, 317, 319, 322, 341, 461, 485, 498], "basesearchspac": 177, "discretesearchspac": 177, "continuoussearchspac": 177, "hpo": [178, 211, 254, 485], "model_slim": [178, 180, 194], "auto_slim": [178, 180, 182], "pattern_analyz": [178, 180, 182], "weight_slim": [178, 180, 182, 194], "mha": [178, 180, 186, 193], "ninm": [178, 180, 186], "nxm": [178, 180, 186, 196, 207, 208, 315, 319, 485], "basic": [178, 180, 183, 185, 193, 207, 208, 239, 280, 288, 299, 319, 330, 334, 337, 341, 391, 395, 398, 404, 457, 458, 461, 487, 492], "block_mask": [178, 179, 180, 193], "pattern_lock": [178, 180, 193, 207, 208, 288, 307, 341], "progress": [178, 180, 193, 225, 268, 475, 481, 485, 488], "retrain_fre": [178, 179, 180, 193], "criteria": [178, 180, 207, 208, 287, 311, 316, 319, 321, 324, 421, 481, 493], "schedul": [178, 180, 190, 191, 192, 197, 198, 200, 207, 208, 288, 317, 321, 341, 461, 484], "tf_criteria": [178, 180], "callback": [178, 311, 316, 404, 407, 421, 461, 484, 485, 488], "register_criterion": [179, 202], "get_criterion": 179, "pruningcriterion": [179, 202], "about": [179, 202, 415, 419, 444, 461, 489, 496, 497, 499], "score": [179, 185, 190, 194, 202, 207, 208, 289, 290, 292, 293, 294, 296, 321, 342, 343, 345, 346, 347, 349, 390, 407, 421, 460, 483, 485, 492, 496], "magnitudecriterion": [179, 202], "magnitud": [179, 202, 207, 208, 288, 296, 307, 341, 349, 457, 485], "criterion_class": [179, 202], "determin": [179, 185, 190, 202, 207, 208, 409, 419, 421, 443, 485, 488, 493], "gradientcriterion": 179, "gradient": [179, 305, 457, 461, 485, 499], "absolut": [179, 207, 208, 296, 349, 460, 461, 485, 488, 496], "snipcriterion": 179, "snip": [179, 207, 208, 321, 457, 485, 499], "product": [179, 424, 457, 462, 464, 465, 481, 486, 488, 492, 496], "singl": [179, 201, 207, 208, 216, 223, 240, 259, 266, 281, 292, 321, 323, 345, 349, 383, 421, 445, 447, 458, 485], "shot": [179, 197, 198, 201, 250, 321, 323, 422, 457, 461, 485, 486], "connect": [179, 321, 481, 485, 492], "sensit": [179, 305, 321, 457, 485], "1810": [179, 321], "02340": [179, 321], "snipmomentumcriterion": 179, "snip_momentum": [179, 207, 208, 461, 485], "momentum": [179, 321, 457, 461, 485, 498], "preserv": [179, 443], "step": [179, 189, 190, 191, 192, 196, 197, 201, 207, 208, 319, 321, 323, 404, 426, 427, 447, 448, 449, 450, 461, 476, 479, 481, 484, 485, 487, 489, 490, 492, 493, 494, 496], "beta": 179, "blockmaskcriterion": 179, "9": [179, 207, 208, 421, 458, 461, 485, 487, 493, 496, 498, 499], "retrainfreecriterion": 179, "pickle_protocol": 180, "_use_new_zipfile_seri": 180, "prepare_prun": [180, 485], "loss_func": [180, 199], "assertionerror": [180, 186, 193, 203, 319, 320, 321, 350], "cuurent": [180, 193, 321], "auto": [181, 183, 207, 208, 326, 341, 385, 391, 415, 421, 443, 464, 467, 469, 471, 472, 485, 488, 490], "slim": [181, 182, 183, 292, 345, 356, 358, 463, 485], "round_multipli": 181, "spars": [181, 195, 321, 445, 486], "automat": [181, 183, 184, 207, 208, 225, 228, 235, 236, 268, 271, 278, 287, 297, 324, 421, 424, 442, 445, 457, 461, 462, 464, 466, 469, 470, 472, 474, 475, 476, 478, 479, 481, 484, 485, 488, 493, 495, 496], "model_slim_ffn2": 181, "some": [181, 183, 207, 208, 223, 266, 320, 426, 427, 445, 447, 452, 458, 460, 461, 483, 485, 488, 489, 490, 493, 494, 496, 497, 499], "part": [181, 190, 319, 321, 421, 458, 462, 476, 479, 485, 493, 497], "perman": [181, 419, 485], "obtain": [181, 183, 192, 197, 200, 203, 320, 421, 426, 485, 492, 493, 496], "acceler": [181, 424, 448, 461, 464, 472, 481, 485, 486, 489, 490, 493, 496], "directli": [181, 207, 208, 222, 265, 292, 296, 320, 345, 349, 460, 461, 468, 485, 487, 488, 494], "sprase": 181, "multipl": [181, 207, 208, 209, 210, 214, 215, 223, 224, 226, 227, 228, 229, 230, 234, 237, 240, 247, 252, 253, 257, 258, 260, 266, 267, 269, 270, 271, 272, 273, 277, 279, 281, 297, 350, 351, 352, 354, 360, 442, 445, 452, 461, 484, 485, 492, 493, 496], "model_slim_mha": 181, "parse_auto_slim_config": 181, "ffn2_sparsiti": 181, "mha_spars": 181, "generate_ffn2_pruning_config": 181, "consecut": [181, 183, 184, 485], "generate_mha_pruning_config": 181, "head": [181, 183, 187, 194, 203, 485, 499], "get_attribut": 183, "level": [183, 388, 402, 411, 419, 493, 496], "descent": 183, "get_common_modul": 183, "layer1": [183, 207, 208, 461, 485, 488], "layer2": [183, 461, 485, 488], "nearest": [183, 240, 281, 490, 495], "print_iter": 183, "recipesearch": 183, "root": [183, 223, 224, 225, 228, 266, 267, 268, 271, 296, 349, 445, 450, 460, 461, 498], "levelwis": 183, "wai": [183, 224, 225, 228, 267, 268, 271, 422, 427, 444, 445, 447, 460, 461, 464, 467, 482, 484, 485, 488, 490, 493, 496, 498], "huggingfac": [183, 194, 223, 266, 410, 445, 451, 455, 469, 470, 471, 472, 493, 499], "bert": [183, 208, 219, 222, 223, 240, 262, 265, 266, 281, 424, 445, 448, 460, 462, 469, 485, 495, 499], "recipe_sampl": 183, "bertattent": 183, "dens": [183, 201, 207, 208, 323, 485, 499], "infom": [183, 243], "searching_result": 183, "jitbasicsearch": 183, "placeholder_shap": 183, "placeholder_dtyp": 183, "jit": [183, 207, 464, 466, 471, 493, 494], "script": [183, 289, 290, 293, 294, 342, 343, 346, 347, 450, 457, 464, 468, 471, 472, 475, 486], "static_graph": 183, "flatten_static_graph": 183, "target_lay": 183, "linear2linearsearch": 183, "target_op_lut": 183, "lookup": 183, "tabl": [183, 194, 415, 427, 447, 452, 499], "current_pattern": 183, "statu": [183, 412, 419, 444, 483, 485], "selfmhasearch": 183, "classifierheadsearch": 183, "classifi": [183, 203, 223, 266, 296, 349, 445, 448], "classifierheadsearchertf": 183, "squeezer": 184, "postcompressionutil": 184, "librari": [184, 244, 288, 341, 377, 417, 420, 424, 458, 461, 462, 466, 475, 481, 486, 488], "relat": [184, 200, 282, 292, 311, 316, 319, 345, 401, 407, 427, 464, 485, 498], "linearcompress": 184, "root_linear": 184, "target_linear": 184, "while": [184, 195, 203, 321, 328, 387, 425, 426, 445, 451, 457, 462, 464, 469, 481, 487, 488, 490, 493], "hidden": [184, 189, 319, 425], "layer_1": 184, "act_fn": 184, "layer_2": 184, "linearcompressioniter": 184, "linear_pattern": 184, "register_pattern": [185, 319], "basepattern": [185, 187, 189], "unit": [185, 319, 420, 485], "4x1": [185, 207, 208, 315, 461, 485, 499], "is_glob": [185, 319], "local": [185, 207, 208, 319, 415, 474, 478, 485, 492], "contrast": [185, 319, 495], "keep_mask_lay": 185, "invalid_lay": 185, "max_sparsity_ratio_per_op": [185, 190, 204, 207, 208, 461, 485], "sparsiti": [185, 187, 188, 190, 191, 192, 195, 197, 198, 201, 203, 207, 208, 321, 323, 415, 424, 445, 457, 461, 497, 499], "reach": [185, 201, 207, 208, 323, 420, 424, 444, 485, 496], "min_sparsity_ratio_per_op": [185, 204, 207, 208, 461, 485], "minimum": [185, 207, 208, 427, 443, 447, 461, 472, 485, 496], "target_spars": [185, 204, 207, 208, 461, 485, 487, 498], "pytorchbasepattern": [185, 200], "kerasbasepattern": 185, "get_pattern": [186, 319], "patternmha": 187, "doc": [187, 188, 207, 208, 319, 337, 338, 349, 383, 398, 399, 402, 415, 460, 461, 476, 479], "md": [187, 188, 207, 208, 319, 349, 383, 426, 443, 450, 488], "n": [187, 188, 207, 208, 224, 240, 267, 281, 290, 319, 343, 402, 427, 445, 447, 448, 485, 488, 490, 493, 495], "pytorchpatternninm": 188, "out": [188, 207, 208, 223, 224, 225, 266, 267, 268, 287, 319, 324, 420, 421, 424, 445, 464, 469, 474, 475, 476, 478, 479, 481, 485, 487, 488, 490], "pytorchpatternnxm": 189, "kept": [189, 319], "block_siz": [189, 319], "height": [189, 236, 240, 278, 281, 319, 450, 495, 498], "width": [189, 236, 240, 278, 281, 319, 443, 450, 485, 488, 495, 498], "vertic": [189, 240, 281, 319, 495], "keraspatternnxm": 189, "register_prun": [190, 199, 321], "baseprun": [190, 195, 197, 199], "current_sparsity_ratio": [190, 321], "global_step": [190, 321], "total": [190, 240, 281, 296, 321, 349, 445, 447, 485, 495, 499], "start_step": [190, 204, 207, 208, 321, 461, 485, 487], "end_step": [190, 204, 207, 208, 321, 461, 485, 487], "pruning_frequ": [190, 204, 207, 208, 461, 485], "target_sparsity_ratio": [190, 321], "show": [190, 415, 419, 448, 450, 461, 467, 482, 493, 496, 497], "pytorchbaseprun": [190, 198], "kerasbaseprun": 190, "pytorchbasicprun": 191, "arrang": [191, 192, 197, 198, 224, 225, 228, 267, 268, 271, 445, 485], "proce": [191, 192, 197, 198], "regul": [191, 192, 197, 198], "kerasbasicprun": 191, "pytorchblockmaskprun": 192, "grad": [192, 197], "parse_valid_pruner_typ": 193, "get_prun": [193, 321], "pythonmultiheadattentionprun": 194, "mha_modul": 194, "partial": [194, 485, 488], "qkv": 194, "feedward": 194, "simultan": [194, 464, 484, 487], "qkv_name": 194, "query_layer_nam": 194, "key_layer_nam": 194, "value_layer_nam": 194, "ffn_name": 194, "attention_ffn_nam": 194, "mha_nam": 194, "qkv_modul": 194, "ffn_modul": 194, "mha_compress": 194, "mhacompress": 194, "modifi": [194, 225, 268, 382, 401, 421, 427, 450, 454, 485, 498], "linear_lay": 194, "independ": [194, 377, 382, 427], "length": [194, 207, 208, 223, 240, 266, 281, 292, 345, 424, 445, 460, 486, 488, 495], "4x": [194, 422, 488], "subsequ": [194, 426, 464, 481], "head_mask": 194, "mha_head_s": 194, "similar": [194, 461, 487, 493, 496, 498], "mha_scor": 194, "lock": [195, 309, 310, 457, 484, 485], "pytorchpatternlockprun": 195, "parent": [195, 196, 201, 315, 321, 323, 494], "pytorchprogressiveprun": 196, "basicprun": [196, 199], "interpol": [196, 240, 281, 460, 485, 495], "fine": [196, 223, 266, 445, 467, 485, 486, 488], "grain": [196, 485, 486, 496], "improv": [196, 420, 443, 461, 464, 481, 482, 485, 486, 488, 489, 490, 496, 497, 499], "ad": [196, 223, 266, 289, 328, 342, 387, 426, 427, 447, 462, 464, 469, 472, 476, 479, 485, 494], "retrain": [197, 449, 485], "pytorchretrainfreeprun": 197, "pruner_class": [197, 198], "rearrang": 197, "fast": [197, 207, 208, 424, 486], "retrainfreeprun": [197, 199], "effect": [197, 425, 486], "2204": 197, "09656": 197, "sparsegptprun": [198, 199], "most": [198, 207, 208, 296, 349, 447, 461, 462, 485, 488, 490, 493, 496, 499], "sparsegpt": [198, 199], "massiv": 198, "One": [198, 427, 445, 450, 457, 485, 486, 496], "2301": 198, "00774": 198, "opt": [199, 424, 469, 493, 496], "least": [199, 322, 461, 485, 496], "templat": [199, 322, 461, 485], "tree": [199, 322, 338, 399], "nlp": [199, 207, 208, 322, 469, 485, 488], "huggingface_model": [199, 322], "classif": [199, 223, 240, 266, 281, 296, 322, 349, 448, 452, 460, 470, 485, 486], "pytorch_prun": [199, 288, 341], "eager": [199, 322, 382, 450, 457, 488, 489, 494], "config_file_path": [199, 322], "pruner_info": [199, 322], "pruning_class": 199, "avil": 199, "regular": [200, 289, 320, 342], "register_reg": 200, "regulariz": 200, "get_reg_typ": 200, "get_reg": 200, "basereg": 200, "grouplasso": 200, "coeff": 200, "lasso": [200, 306, 457, 485], "select": [200, 203, 208, 223, 266, 421, 422, 443, 457, 458, 481, 485, 488, 490, 494, 496], "reg_term": 200, "coeffient": 200, "register_schedul": [201, 323], "get_schedul": [201, 323], "pruningschedul": 201, "gradual": [201, 323, 485], "oneshotschedul": [201, 323], "iterativeschedul": [201, 323], "get_tf_criterion": 202, "get_sparsity_ratio": 203, "elementwise_over_matmul_gemm_conv": 203, "elementwise_over_al": 203, "blockwise_over_matmul_gemm_conv": 203, "get_sparsity_ratio_tf": 203, "check_config": [203, 320], "prune_config": [203, 320], "everyth": [203, 320, 469], "reset_none_to_default": 203, "update_param": 203, "process_weight_config": 203, "global_config": [203, 305, 306, 308, 309, 310], "local_config": [203, 207, 208, 305, 306, 308, 309, 310], "default_config": 203, "pruners_info": 203, "process_yaml_config": 203, "check_key_valid": 203, "template_config": 203, "user_config": 203, "process_and_check_config": [203, 320], "process_config": [203, 320], "parse_last_linear": 203, "often": [203, 444, 448, 484, 485], "act": [203, 221, 264, 419], "might": [203, 421, 496], "caus": [203, 426, 444, 465, 485, 490], "drop": [203, 292, 320, 345, 461, 462, 475, 485, 490, 499], "parse_last_linear_tf": 203, "parse_to_prun": [203, 320], "parse_to_prune_tf": 203, "generate_pruner_config": 203, "dotdict": [203, 204, 208, 360, 415], "get_lay": 203, "collect_layer_input": 203, "layer_idx": 203, "layer_input": 203, "previou": [203, 426, 427, 461, 485, 491, 493, 494, 496, 497], "prunerv2": 204, "pruning_typ": [204, 207, 208, 461, 485], "pruning_scop": [204, 207, 208, 461, 485], "sparsity_decay_typ": [204, 207, 208, 461, 485], "pruning_op_typ": [204, 207, 208, 461, 485], "reg_typ": 204, "criterion_reduce_typ": 204, "resume_from_pruned_checkpoint": 204, "similiar": 204, "cfg_fname": 204, "parser": 204, "quantization_conf": 204, "pruning_conf": 204, "graph_optimization_conf": [204, 287], "mixedprecision_conf": 204, "benchmark_conf": 204, "nasconfig": [204, 208, 300, 302, 422], "approach": [204, 207, 208, 299, 300, 302, 421, 422, 443, 445, 448, 457, 461, 469, 481, 486, 487, 490, 496, 498], "search_algorithm": [204, 208, 288, 301, 341, 422], "na": [204, 208, 288, 341, 354, 457, 499], "procedur": [204, 422, 485], "defaultconf": 204, "instead": [204, 205, 208, 222, 265, 415, 467, 469, 472, 485], "notat": [204, 205, 208, 415], "deep_get": [205, 360], "dot": [205, 462, 488], "eg": [205, 225, 268, 445, 487], "person": [205, 419, 486], "john": 205, "deep": [205, 424, 425, 426, 444, 457, 458, 461, 462, 464, 466, 469, 470, 472, 475, 481, 486, 488, 496, 497, 499], "deep_set": [205, 360], "sex": [205, 419], "male": 205, "pythonic_config": 206, "random_se": [207, 208, 328, 387, 461, 498], "1978": [207, 208], "workspac": [207, 208, 414, 415, 463], "default_workspac": [207, 208], "resume_from": [207, 208, 415], "tensorboard": [207, 208, 407, 415, 425, 461], "set_random_se": [207, 208, 415], "set_workspac": [207, 208, 415], "set_resume_from": [207, 208, 415], "set_tensorboard": [207, 208, 415], "directori": [207, 208, 224, 225, 267, 268, 358, 410, 412, 414, 415, 445, 450, 453, 474, 476, 478, 479, 494], "histori": [207, 208, 414, 415, 481, 496], "nc_workspac": [207, 208], "datetim": [207, 208], "now": [207, 208, 240, 281, 421, 422, 427, 445, 450, 472, 487, 495, 496], "strftime": [207, 208], "d_": [207, 208], "h": [207, 208, 240, 281, 450, 495], "resum": [207, 208, 211, 212, 254, 255, 326, 334, 384, 385, 387, 388, 390, 392, 395], "flag": [207, 208, 290, 343, 447], "visual": [207, 208, 424, 472, 481, 492, 494, 496, 497], "displai": [207, 208, 337, 338, 398, 399, 415, 481], "2022": [207, 208, 424, 459, 490, 493, 499], "workspace_path": [207, 208], "accuracycriterion": [207, 208, 461, 496], "rel": [207, 208, 360, 461, 487, 496, 498, 499], "tolerable_loss": [207, 208, 461, 496], "01": [207, 208, 461, 487, 490, 496, 498, 499], "higher": [207, 208, 211, 212, 254, 255, 303, 350, 383, 404, 421, 447, 448, 452, 460, 485, 488, 492], "accept": [207, 208, 402, 419, 442, 444], "accuracy_criterion": [207, 208, 360, 461, 483, 487, 496, 498], "avail": [207, 208, 354, 428, 430, 434, 437, 440, 451, 453, 455, 457, 474, 478, 485, 496, 499], "warmup": [207, 208, 442, 461, 487], "inter_num_of_thread": [207, 208, 377, 382, 461, 487], "intra_num_of_thread": [207, 208, 377, 382, 461, 487], "benchmark": [207, 208, 243, 288, 325, 341, 360, 415, 424, 432, 463, 464, 468, 472, 475, 481, 496, 497, 498, 499], "onnxrt_trt_ep": [207, 208, 462, 488], "onnxrt_cuda_ep": [207, 208, 462, 488], "inter": [207, 208, 221, 225, 264, 268], "intra": [207, 208], "quantizationconfig": 207, "post_training_static_qu": [207, 445, 461, 487, 496], "calibration_sampling_s": [207, 208, 461], "op_type_dict": [207, 208, 427, 487, 488, 490, 496], "op_name_dict": [207, 208, 447, 461, 488, 496], "strategy_kwarg": [207, 208, 492, 496], "timeout": [207, 208, 461, 487, 496, 498], "max_trial": [207, 208, 461, 496], "quant_level": [207, 208, 496], "posttrainingquantconfig": [207, 208, 383, 421, 424, 427, 444, 447, 452, 455, 460, 461, 463, 488, 489, 490, 492, 493, 496], "quantizationawaretrainingconfig": [207, 208, 404, 421, 449, 452, 461, 488, 489, 496], "cv": [207, 208, 485], "object_detect": [207, 208, 292, 345], "recommendation_system": [207, 208], "explicitli": [207, 208, 456, 485], "overrid": [207, 208, 415], "quantiztaion": [207, 208], "smooth_quant_arg": [207, 208, 488, 493], "gemm_to_matmul": [207, 208, 488], "graph_optimization_level": [207, 208, 487, 488], "disable_al": [207, 208, 487], "enable_bas": [207, 208], "enable_extend": [207, 208], "enable_al": [207, 208], "first_conv_or_matmul_quant": [207, 208, 488], "last_conv_or_matmul_quant": [207, 208, 488], "pre_post_process_quant": [207, 208, 488], "preprocess": [207, 208, 223, 240, 266, 281, 401, 407, 450, 495], "postprocess": [207, 208, 234, 237, 240, 244, 281, 288, 341, 349, 383, 407, 425, 461, 494, 495], "vaild": [207, 208], "dedic": [207, 208], "quant_format": [207, 208, 286, 452], "constraint": [207, 208, 287, 324, 461, 485, 492, 496, 498], "conv1": [207, 208, 488, 498], "tuning_strategi": [207, 208], "guarante": [207, 208, 461], "models": [207, 208, 360, 461, 483, 487], "footprint": [207, 208, 287, 311, 316, 324, 360, 449, 461, 483, 485, 487], "earli": [207, 208, 461, 488, 496, 498], "stop": [207, 208, 461, 496, 497, 498], "field": [207, 208, 225, 268, 292, 345, 421, 425, 427, 450, 461, 492, 496, 498], "exit": [207, 208, 327, 384, 386, 461, 498], "excluded_precis": [207, 208, 489], "exclud": [207, 208, 425, 443, 489], "conserv": [207, 208, 341, 391], "use_distributed_tun": 207, "weightpruningconfig": [207, 208, 461, 484, 485], "pruning_config": [207, 208, 461], "98": [207, 208, 461, 485, 487, 499], "exp": [207, 208, 461, 485], "link": [207, 208, 223, 266, 349, 383, 443, 445, 452, 474, 478, 481, 499], "90": [207, 208, 498, 499], "magnitude_progress": [207, 208], "snip_progress": [207, 208], "snip_momentum_progress": [207, 208], "feasibl": [207, 208], "situat": [207, 208, 450, 485], "unstructur": [207, 208, 315, 457, 485, 499], "8x1": [207, 208], "channelx1": [207, 208, 485], "1xchannel": [207, 208, 485], "itrex": [207, 208], "start": [207, 208, 240, 281, 292, 345, 388, 458, 486, 495, 496, 497, 500], "togeth": [207, 208, 240, 281, 448, 458, 468, 486, 494, 495], "sort": [207, 208, 331, 392, 447, 496], "sinc": [207, 208, 287, 289, 311, 316, 324, 342, 448, 452, 458, 460, 475, 481, 484, 490, 491], "lead": [207, 208, 448, 461, 462, 485, 490, 493], "increas": [207, 208, 446, 457, 464, 481, 496], "cube": [207, 208, 485], "6": [207, 208, 424, 454, 488, 493, 496, 499], "update_config": [207, 208], "knowledgedistillationlossconfig": [207, 208, 448, 449, 461, 484], "hyperparamet": [207, 208, 337, 492, 493, 496], "entropi": [207, 208, 443, 496], "groundtruth": [207, 208, 292, 345], "label": [207, 208, 211, 212, 223, 225, 226, 227, 228, 231, 236, 240, 245, 254, 255, 266, 268, 269, 270, 271, 274, 278, 281, 289, 291, 296, 342, 344, 349, 350, 383, 404, 421, 444, 445, 447, 460, 461, 488, 495], "tpye": [207, 208], "sum": [207, 208, 296, 349, 447, 448], "distillationconfig": [207, 208, 404, 448, 449, 461, 484], "prepare_compress": [207, 208, 404, 421, 448, 449, 461, 484, 485, 488], "criterion_conf": [207, 208], "d_conf": [207, 208, 449, 461, 484], "compression_manag": [207, 208, 404, 421, 448, 449, 461, 484, 485, 488], "sgd": [207, 208, 247, 448, 461, 487, 498], "featur": [207, 208, 223, 224, 236, 240, 266, 267, 278, 281, 420, 424, 442, 444, 446, 448, 461, 462, 463, 464, 468, 469, 472, 481, 485, 486, 491, 495], "distil_loss": [207, 208, 461], "crossentropyloss": [207, 208, 242, 448, 461], "lr": [207, 208, 448, 450, 461], "onnxrt_dnnl_ep": [208, 462, 488], "tuningcriterion": [208, 461, 483, 492, 496], "tuning_criterion": [208, 461, 483, 492, 496], "weight_onli": [208, 490], "ptq": [208, 383, 421, 447, 450, 457, 461, 488, 493, 494, 496], "tri": [208, 496], "meet": [208, 214, 325, 327, 384, 386, 421, 426, 483, 486, 487, 488, 490, 494, 496], "mse_v2": [208, 288, 330, 341, 391], "hawq_v2": [208, 341, 391], "docstr": [208, 402], "copi": [208, 320, 415, 444], "deepcopi": 208, "model_origin": [208, 383, 489], "qat_op_name_dict": 208, "low_memory_usag": 208, "hpoconfig": 208, "xgb": 208, "bo": 208, "intermediatelayersknowledgedistillationlossconfig": [208, 448], "relationship": 208, "student_layer_nam": 208, "student_layer_output_process": 208, "teacher_layer_nam": 208, "teacher_layer_output_process": 208, "desir": [208, 236, 240, 278, 281, 426, 427, 495], "serv": [208, 358], "numer": [208, 296, 349, 427, 462, 486, 488], "abbrevi": 208, "layer_nam": 208, "l1": 208, "selfknowledgedistillationlossconfig": [208, 448, 461], "student1_layer_name1": 208, "teacher_layer_name1": 208, "student2_layer_name1": 208, "student1_layer_name2": 208, "teacher_layer_name2": 208, "student2_layer_name2": 208, "soft": 208, "l2": [208, 485], "hard": [208, 444, 447], "resblock": 208, "deepst": 208, "02": [208, 493, 499], "mixedprecisionconfig": [208, 350, 402, 461, 462], "mixedprecis": [208, 297, 461], "fp16": [208, 338, 399, 488], "won": [208, 488], "work": [208, 287, 324, 423, 426, 444, 448, 476, 479, 489, 490, 491, 493, 494], "mix_precis": [208, 341, 402, 461, 462], "converted_model": [208, 350, 461, 462], "exportconfig": 208, "14": [208, 285, 286, 452, 458, 493, 499], "dynamic_ax": [208, 286, 452], "qlinear": [208, 225, 232, 268, 275, 296, 349, 425, 471], "ax": [208, 286], "onnxqlinear2qdqconfig": 208, "onnxqlinear2qdq": 208, "torch2onnxconfig": [208, 452], "torch2onnx": [208, 283, 288, 341], "qdq_op_fp32_bia": 208, "qdq_op_int32_bia": 208, "qdq_op_fp32_bias_qdq": 208, "resnet50": [208, 424, 447, 450, 452, 462, 464, 468, 485, 488, 492, 499], "int8_onnx_config": [208, 452], "randn": [208, 452], "224": [208, 236, 278, 424, 445, 450, 452, 455, 461, 464, 495, 498], "batch_siz": [208, 213, 215, 218, 221, 222, 223, 224, 243, 256, 258, 261, 264, 265, 266, 267, 286, 422, 444, 445, 450, 452, 456, 461, 464, 488], "tf2onnxconfig": [208, 452], "tf2onnx": [208, 283, 288, 341], "output_graph": 208, "dyna": [208, 288, 301, 341, 422, 457, 487], "sigopt": [209, 210, 252, 253, 288, 341, 486], "tpe": [209, 210, 252, 253, 288, 341], "sigopttunestrategi": [211, 254], "q_dataload": [211, 212, 254, 255, 326, 328, 331, 334, 384, 385, 387, 388, 390, 392, 395, 456, 496], "eval_func": [211, 212, 254, 255, 325, 326, 328, 331, 334, 350, 383, 384, 385, 387, 388, 390, 392, 395, 402, 404, 421, 444, 445, 447, 448, 449, 450, 461, 488, 489, 490, 496, 498], "eval_metr": [211, 212, 350, 383, 384, 385, 387, 388, 390, 392, 395, 404, 460, 488], "q_hook": [211, 212, 254, 255, 326, 328, 331, 334, 384, 385, 387, 388, 390, 392, 395], "mandatori": [211, 212, 254, 255, 383, 461, 498], "yield": [211, 212, 221, 243, 254, 255, 264, 328, 350, 383, 387, 402, 404, 444, 488, 496], "_": [211, 212, 254, 255, 383, 421, 422, 425, 426, 443, 444, 447, 448, 450, 452, 454, 461, 462, 463, 464, 470, 474, 476, 478, 479, 483, 485, 488, 490, 491, 492, 493, 494, 496, 498], "well": [211, 212, 254, 255, 350, 383, 404, 422, 424, 445, 485, 488, 491, 493, 498], "taken": [211, 212, 254, 255, 350, 383, 404, 488], "reserv": [211, 212, 254, 255], "abl": [211, 212, 254, 255, 350, 383, 404, 472, 481, 488], "tuner": [211, 212, 254, 255, 287, 324, 350, 383, 404, 488], "scalar": [211, 212, 254, 255, 350, 383, 404, 460, 488], "pseudo": [211, 212, 254, 255, 383, 404, 494], "someth": [211, 212, 225, 254, 255, 268, 383, 404], "fefin": [212, 255], "tpetunestrategi": [212, 255], "basedatalod": [213, 256], "basedataload": [213, 218, 220, 256, 261, 263], "last_batch": [213, 215, 218, 222, 243, 256, 258, 261, 265], "rollov": [213, 215, 218, 222, 243, 256, 258, 261, 265, 444], "collate_fn": [213, 215, 216, 218, 222, 243, 256, 258, 259, 261, 265, 445], "sampler": [213, 215, 217, 218, 222, 243, 256, 258, 260, 261, 265, 277, 288, 337, 398, 444, 450], "batch_sampl": [213, 215, 218, 222, 243, 256, 258, 261, 265], "num_work": [213, 215, 218, 222, 243, 256, 258, 261, 265, 461, 488], "pin_memori": [213, 215, 218, 222, 243, 256, 258, 261, 265], "shuffl": [213, 215, 218, 222, 243, 256, 258, 261, 265, 444, 461, 488], "_generate_dataload": [213, 256], "check_dataload": 214, "default_col": [215, 258], "outer": [215, 258], "defaultdataload": [215, 222, 258, 265], "definit": [216, 221, 259, 264], "style": [216, 230, 259, 273, 402, 420, 445, 456], "drop_last": [216, 221, 259, 264], "iterablefetch": [216, 259], "indexfetch": [216, 259], "base_dataload": [217, 260, 277, 288], "default_dataload": [217, 260, 277, 288], "fetcher": [217, 260, 277, 288], "mxnet_dataload": [217, 260, 277, 288], "onnxrt_dataload": [217, 260, 277, 288, 376], "pytorch_dataload": [217, 260, 277, 288], "tensorflow_dataload": [217, 260, 277, 288, 381], "mxnetdataload": [218, 261], "onnxrtbertdataload": [219, 262], "varient": [219, 262], "onnxrtdataload": [219, 262, 376], "pytorchdataload": [220, 263], "data_sourc": [221, 264, 407], "__iter__": [221, 225, 264, 268, 444, 445, 461], "matter": [221, 264, 489], "iterablesampl": [221, 264], "squential": [221, 264], "your": [221, 223, 264, 266, 420, 444, 445, 447, 450, 459, 461, 464, 467, 468, 469, 474, 475, 476, 478, 479, 481, 485, 486, 492, 494, 496, 497], "clear": [221, 264, 425, 454, 460, 461], "iterabledataset": [221, 225, 264, 268], "try": [221, 264, 421, 447, 485, 488, 493, 496], "indexdataset": [221, 264], "__getitem__": [221, 225, 240, 264, 268, 281, 445, 461], "__len__": [221, 225, 264, 268, 445], "retriev": [221, 264], "sequentialsampl": [221, 264], "sequenti": [221, 264, 325, 327, 384, 386, 496], "batchsampl": [221, 264], "tfdatadataload": [222, 265], "tensorflow1": [222, 265], "coupl": [222, 265], "satisfi": [222, 265, 447, 458], "usag": [222, 265, 292, 298, 325, 345, 402, 426, 445, 450, 451, 464, 472, 483, 487, 495], "tf1": [222, 265, 463], "although": [222, 265, 492], "tensorflowbertdataload": [222, 265], "tensorflowmodelzoobertdataload": [222, 265], "zoo": [222, 240, 265, 281, 424, 451, 455, 499], "tensorflowdataload": [222, 265, 381], "pytorchbertdataset": [223, 266], "model_typ": [223, 266, 415, 445], "tensordataset": [223, 266, 445], "repo": [223, 266, 418, 445, 451, 474, 476, 478, 479, 500], "easi": [223, 266, 324, 452, 461, 486, 488, 492], "squad": [223, 240, 266, 281, 293, 294, 296, 346, 347, 349, 445, 460, 485, 495, 499], "distilbert": [223, 266, 424, 445, 462, 486, 499], "xlnet": [223, 266, 445, 499], "xlm": [223, 266, 445, 499], "101": [223, 266, 296, 349, 460, 493, 499], "2043": [223, 266], "2001": [223, 266], "onnxrtbertdataset": [223, 266], "data_dir": [223, 266, 445], "model_name_or_path": [223, 266, 445, 461, 469, 470], "max_seq_length": [223, 240, 266, 281, 445, 495], "do_lower_cas": [223, 239, 240, 266, 280, 281, 445, 495], "mrpc": [223, 266, 296, 349, 445, 460, 469, 485, 496, 499], "dynamic_length": [223, 266, 445], "shortcut": [223, 266, 445], "token": [223, 234, 237, 240, 266, 277, 279, 281, 288, 289, 290, 341, 342, 343, 410, 445, 460, 461, 490, 492, 493, 495, 496], "longer": [223, 240, 266, 281, 445, 495], "truncat": [223, 240, 266, 281, 445, 495], "shorter": [223, 240, 266, 281, 445, 495], "lowercas": [223, 266, 445], "choic": [223, 266, 425, 445, 460, 493], "qqp": [223, 266, 445, 460, 499], "qnli": [223, 266, 445, 460, 499], "rte": [223, 266, 445, 460, 499], "st": [223, 266, 445, 460], "cola": [223, 266, 445, 460, 499], "mnli": [223, 266, 445, 460, 499], "wnli": [223, 266, 445, 460], "mobilebert": [223, 266, 445, 448, 499], "roberta": [223, 266, 445, 499], "uncas": [223, 240, 266, 281, 445, 495, 499], "load_and_cache_exampl": [223, 266], "cach": [223, 266, 453, 488, 490], "convert_examples_to_featur": [223, 240, 266, 281], "max_length": [223, 266], "label_list": [223, 266, 296, 349], "output_mod": [223, 266], "pad_token": [223, 266], "pad_token_segment_id": [223, 266], "mask_padding_with_zero": [223, 266], "inputfeatur": [223, 240, 266, 281], "properti": [223, 266, 401, 459], "input_id": [223, 240, 266, 281, 461], "vocabulari": [223, 239, 240, 266, 280, 281, 495], "attention_mask": [223, 266, 461], "usual": [223, 266, 426, 447, 448, 484, 485, 488, 493], "NOT": [223, 266, 454], "token_type_id": [223, 266, 461], "segment": [223, 266, 290, 292, 343, 345], "portion": [223, 266], "regress": [223, 266, 447], "seq_length": [223, 266], "tensorflowbertdataset": [223, 266], "label_fil": [223, 240, 266, 281, 445, 495], "tfrecord": [223, 224, 225, 266, 267, 268, 445], "guid": [223, 266, 421, 424, 445, 448, 458, 464, 472, 481, 500], "parsedecodebert": [223, 266], "tensorflowmodelzoobertdataset": [223, 224, 266, 267], "num_cor": [223, 224, 228, 266, 267, 271, 445], "28": [223, 224, 228, 266, 267, 271, 445, 499], "coco": [224, 231, 235, 267, 274, 292, 296, 345, 349, 460, 485], "parsedecodecoco": [224, 267], "cocorecorddataset": [224, 267], "interleav": [224, 267, 445], "parallel": [224, 267, 377, 382, 445, 461, 496], "cocoraw": [224, 267, 445], "img_dir": [224, 267, 445], "val2017": [224, 267, 445], "anno_dir": [224, 267, 445], "annot": [224, 267, 292, 345, 402, 426, 427, 445, 460, 485, 496], "instances_val2017": [224, 267, 445], "jpg": [224, 228, 230, 267, 271, 273, 445], "imag": [224, 225, 228, 230, 236, 240, 267, 268, 271, 273, 278, 281, 292, 345, 445, 450, 452, 485, 487, 493, 494, 495, 499], "coconpi": [224, 267, 445], "npy_dir": [224, 267, 445], "npy": [224, 267, 445], "tensorflowdataset": [225, 268], "pytorchdataset": [225, 268], "mxnetdataset": [225, 268], "onnxrtqldataset": [225, 268], "onnxrtitdataset": [225, 268], "IT": [225, 232, 268, 275, 486], "pytorchmxnetwrapdataset": [225, 268], "datafunc": [225, 268], "pytorchmxnetwrapfunct": [225, 240, 268, 281], "framework_dataset": [225, 268], "convent": [225, 268, 292, 345, 448], "imageclassifi": [225, 268], "tensorflow_itex": [225, 228, 230, 232, 268, 271, 273, 275, 444, 487], "onnxrt_qdq": [225, 232, 268, 275, 487], "onnxrt_qlinearop": [225, 232, 240, 268, 275, 281, 487], "onnxrt_integerop": [225, 232, 240, 268, 275, 281, 487], "pytorch_ipex": [225, 232, 268, 275, 461, 487, 498], "pytorch_fx": [225, 232, 268, 275, 461, 487], "dataset_registri": [225, 268], "dataset_typ": [225, 268], "dataset_format": [225, 268], "data_format": [225, 236, 268, 278], "raw_imag": [225, 268], "overwrit": [225, 268, 474, 478], "download_url": [225, 268], "filenam": [225, 268, 415, 445], "md5": [225, 268], "address": [225, 268, 419, 462, 486], "gen_bar_updat": [225, 268], "bar": [225, 268, 481, 486], "check_integr": [225, 268], "fpath": [225, 268], "checksum": [225, 268], "calculate_md5": [225, 268], "chunk_siz": [225, 268], "cifar10": [225, 268, 445], "cifar100": [225, 268, 445], "databas": [225, 268], "www": [225, 268, 445, 499], "toronto": [225, 268, 445], "kriz": [225, 268, 445], "cifar": [225, 268, 445, 499], "tar": [225, 268, 445, 447, 476, 479], "gz": [225, 268, 445, 447, 476, 479], "manual": [225, 268, 445, 464, 470, 472, 475], "subset": [225, 228, 268, 271, 445], "internet": [225, 268, 445], "again": [225, 268, 445, 489], "pytorchcifar10": [225, 268], "mxnetcifar10": [225, 268], "tensorflowcifar10": [225, 268], "pytorchcifar100": [225, 268], "mxnetcifar100": [225, 268], "tensorflowcifar100": [225, 268], "mnist": [225, 268, 445, 450], "nation": [225, 268, 419], "institut": [225, 268], "standard": [225, 240, 268, 281, 426, 447, 452, 460, 495, 496], "technologi": [225, 268, 461], "fashionmnist": [225, 268, 445], "npz": [225, 268, 445], "idx1": [225, 268, 445], "ubyt": [225, 268, 445], "idx3": [225, 268, 445], "t10k": [225, 268, 445], "pytorchmnist": [225, 268], "mxnetmnist": [225, 268], "tensorflowmnist": [225, 268], "pytorchfashionmnist": [225, 268], "mxnetfashionmnist": [225, 268], "tensorflowfashionmnist": [225, 268], "imagefold": [225, 268, 445, 450, 461], "expect": [225, 268, 419, 420, 453, 481, 488, 490, 496], "subfold": [225, 268], "belong": [225, 268, 354, 488], "class_1": [225, 268, 445], "xxx": [225, 268, 420, 445, 461], "png": [225, 268, 445], "xxy": [225, 268, 445], "xxz": [225, 268, 445], "class_n": [225, 268, 445], "123": [225, 268, 445, 495], "nsdf3": [225, 268, 445], "asd932_": [225, 268, 445], "categori": [225, 268, 291, 344, 442, 445, 471], "mxnetimagefold": [225, 268], "tensorflowtfrecorddataset": [225, 268], "tensorflowimagerecord": [225, 268], "imagenet": [225, 228, 236, 268, 271, 278, 422, 447, 461, 470, 485, 494, 495, 498, 499], "000": [225, 268, 424, 445], "099": [225, 268, 445], "tensorflowvocrecord": [225, 268], "pascal": [225, 268], "voc": [225, 268, 296, 349], "2012": [225, 268], "00000": [225, 268], "00004": [225, 268], "00001": [225, 268], "00003": [225, 268], "dummydataset": [226, 227, 269, 270], "127": [226, 227, 269, 270, 445, 488, 493], "float32": [226, 227, 240, 269, 270, 281, 292, 345, 425, 442, 445, 461, 488, 490, 493, 495], "stand_norm": [226, 227, 269, 270, 445], "dummy_v2": [227, 270, 445], "sparse_dummy_v2": [227, 270, 445], "label_shap": [227, 270, 445], "sparsedummydataset": [227, 270], "dense_shap": [227, 270, 445], "sparse_ratio": [227, 270, 445], "imagenetraw": [228, 271, 445], "data_path": [228, 271, 445], "image_list": [228, 271, 445], "img1": [228, 271, 445], "img2": [228, 271, 445], "imgx": [228, 271, 445], "val_map": [228, 271, 445], "txt": [228, 271, 445, 447, 458], "pytorchimagenetraw": [228, 271], "mxnetimagenetraw": [228, 271], "tensorflowimagenetraw": [228, 271], "inteltensorflow": [228, 230, 271, 273, 458], "tensorflowimagenetdataset": [228, 271], "onnxrtimagenetdataset": [228, 271], "bert_dataset": [229, 234, 272, 277, 288, 341], "coco_dataset": [229, 234, 272, 277, 288, 341], "dummy_dataset": [229, 234, 272, 277, 288, 341], "dummy_dataset_v2": [229, 234, 272, 277, 288, 341], "imagenet_dataset": [229, 234, 272, 277, 288, 341], "style_transfer_dataset": [229, 234, 272, 277, 288, 341], "styletransferdataset": [230, 273], "content_fold": [230, 273, 445], "style_fold": [230, 273, 445], "crop_ratio": [230, 273, 445], "resize_shap": [230, 273, 445], "256": [230, 236, 273, 278, 445, 450, 461, 495], "image_format": [230, 273, 445], "holder": [230, 273, 445], "labelbalancecocorecordfilt": [231, 274], "balanc": [231, 274, 490, 493], "labelbalancecocorawfilt": [231, 274], "tensorflowfilt": [232, 275], "onnxrtqlfilt": [232, 275], "onnxrtitfilt": [232, 275], "pytorchfilt": [232, 275], "mxnetfilt": [232, 275], "filter_registri": [232, 275], "filter_typ": [232, 275], "__call__": [232, 275], "coco_filt": [233, 234, 276, 277, 288, 341], "imagenet_transform": [234, 237, 277, 279, 288, 341], "parsedecodecocotransform": 235, "quantizedinput": [236, 278, 495], "labelshift": [236, 278, 495], "label_shift": [236, 278, 495], "parsedecodeimagenet": [236, 278, 495], "proto": [236, 240, 278, 281, 495], "parsedecodeimagenettransform": [236, 278], "tensorflowtransposelastchannel": 236, "tensorflowshiftrescal": 236, "rescal": [236, 240, 281, 495], "tensorflowresizecropimagenettransform": [236, 278], "random_crop": [236, 278, 495], "resize_sid": [236, 278, 495], "resize_method": [236, 278], "bilinear": [236, 240, 278, 281, 495], "random_flip_left_right": [236, 278, 495], "mean_valu": [236, 278, 495], "channels_last": [236, 278, 464], "subpixel": [236, 278], "rgb": [236, 278], "seri": [236, 278, 424, 458, 461, 495], "applic": [236, 278, 427, 452, 464, 481, 486, 490, 493, 494, 495, 497], "crop": [236, 240, 278, 281, 445, 495], "flip": [236, 240, 278, 281, 495], "left": [236, 240, 278, 281, 475, 481, 493, 495], "std": [236, 240, 278, 281, 461, 495], "bilinearimagenettransform": [236, 278], "central_fract": [236, 278, 495], "875": [236, 278, 495], "fraction": [236, 278, 495], "onnxbilinearimagenettransform": [236, 278], "onnxresizecropimagenettransform": [236, 278], "std_valu": [236, 278], "229": [236, 278, 461], "225": [236, 278, 461], "resizewithaspectratio": [236, 278], "87": [236, 278, 499], "inter_pol": [236, 278], "cv2": [236, 278], "inter_area": [236, 278], "aspect": [236, 240, 278, 281, 495], "postprocess_cl": [238, 248, 461], "user_postprocess": [238, 248], "convert_to_unicod": [239, 280], "unicod": [239, 280], "assum": [239, 280, 292, 303, 345, 425, 454, 481], "load_vocab": [239, 280], "vocab_fil": [239, 240, 280, 281, 495], "convert_by_vocab": [239, 280], "vocab": [239, 280], "whitespace_token": [239, 280], "whitespac": [239, 280, 294, 347], "clean": [239, 280, 420, 461], "piec": [239, 280, 289, 342, 460, 490], "fulltoken": [239, 280], "tokenzi": [239, 280], "basictoken": [239, 280], "punctuat": [239, 280, 289, 294, 342, 347], "lower": [239, 240, 280, 281, 294, 347, 388, 449, 485, 486, 488, 493, 495, 496], "wordpiecetoken": [239, 280], "unk_token": [239, 280], "unk": [239, 280], "max_input_chars_per_word": [239, 280], "200": [239, 280, 421, 496], "wordpiec": [239, 240, 280, 281, 495], "concat_gener": [240, 281], "inc": [240, 281, 419, 424, 426, 464, 471, 481, 486, 487, 491, 496], "tensorflowtransform": [240, 281], "mxnettransform": [240, 281], "pytorchtransform": [240, 281], "onnxrtqltransform": [240, 281], "onnxrtittransform": [240, 281], "transform_registri": [240, 281], "transform_typ": [240, 281], "basetransform": [240, 281], "tensorflowwrapfunct": [240, 281], "transform_func": [240, 281], "pytorchmxnettransform": [240, 281], "get_torchvision_map": [240, 281], "torchvis": [240, 281, 451, 455, 464, 470], "composetransform": [240, 281], "transform_list": [240, 281, 495], "compos": [240, 281, 407, 495], "croptoboundingbox": [240, 281, 495], "offset_height": [240, 281, 495], "offset_width": [240, 281, 495], "target_height": [240, 281, 495], "target_width": [240, 281, 495], "box": [240, 281, 292, 296, 345, 349, 421, 460, 464, 475, 481, 494, 495, 496], "coordin": [240, 281, 328, 387, 495, 496], "top": [240, 281, 287, 296, 311, 316, 324, 349, 460, 481, 495], "corner": [240, 281, 425, 427, 495], "horizont": [240, 281, 495], "mxnetcroptoboundingbox": [240, 281], "onnxrtcroptoboundingbox": [240, 281], "tensorflowcroptoboundingbox": [240, 281], "resizewithratio": [240, 281, 495], "min_dim": [240, 281, 495], "800": [240, 281, 495], "max_dim": [240, 281, 495], "1365": [240, 281, 495], "constant_valu": [240, 281], "longest": [240, 281, 495], "side": [240, 281, 445, 475, 495], "exce": [240, 281, 495], "tensorflowresizewithratio": [240, 281], "permut": [240, 281, 495], "tensorflowtranspos": [240, 281], "mxnettranspos": [240, 281], "pytorchtranspos": [240, 281], "randomverticalflip": [240, 281, 495], "tensorflowrandomverticalflip": [240, 281], "randomhorizontalflip": [240, 281, 461, 495], "tensorflowrandomhorizontalflip": [240, 281], "toarrai": [240, 281, 495], "pil": [240, 281, 495], "casttftransform": [240, 281], "castonnxtransform": [240, 281], "castpytorchtransform": [240, 281], "centercroptftransform": [240, 281], "center": [240, 281, 423, 424, 458, 495, 496], "paddedcentercroptransform": [240, 281], "crop_pad": [240, 281], "resizetftransform": [240, 281], "bicub": [240, 281, 495], "resizepytorchtransform": [240, 281], "randomcroptftransform": [240, 281], "randomresizedcroppytorchtransform": [240, 281], "08": [240, 281, 495, 499], "randomresizedcropmxnettransform": [240, 281], "randomresizedcroptftransform": [240, 281], "normalizetftransform": [240, 281], "deviat": [240, 281, 447, 495], "broadcast": [240, 281, 450, 495], "rescalekeraspretraintransform": [240, 281], "rescaletftransform": [240, 281], "rescaletransform": [240, 281], "alignimagechanneltransform": [240, 281], "dim": [240, 281, 490, 493, 495], "align": [240, 281, 419, 495], "w": [240, 281, 485, 493, 495], "must": [240, 281, 292, 345, 420, 421, 426, 442, 444, 458, 488, 495], "pytorchalignimagechannel": [240, 281], "tondarraytransform": [240, 281], "resizemxnettransform": [240, 281], "resizetransform": [240, 281], "cropresizetftransform": [240, 281], "boundari": [240, 281, 495], "area": [240, 281, 292, 345, 460, 495], "pytorchcropresizetransform": [240, 281], "mxnetcropresizetransform": [240, 281], "cropresizetransform": [240, 281], "centercroptransform": [240, 281], "mxnetnormalizetransform": [240, 281], "pytorchnormalizetransform": [240, 281], "normalizetransform": [240, 281], "randomcroptransform": [240, 281], "randomresizedcroptransform": [240, 281], "get_final_text": [240, 281], "pred_text": [240, 281], "orig_text": [240, 281], "project": [240, 281, 418, 419, 420, 486, 492, 496, 500], "squadexampl": [240, 281], "qas_id": [240, 281], "question_text": [240, 281], "doc_token": [240, 281], "orig_answer_text": [240, 281], "start_posit": [240, 281], "end_posit": [240, 281], "is_imposs": [240, 281], "simpl": [240, 281, 458, 461, 492, 493, 496], "answer": [240, 281, 293, 294, 346, 347, 419, 485, 495, 499], "posit": [240, 281, 419, 460, 464], "unique_id": [240, 281], "example_index": [240, 281], "doc_span_index": [240, 281], "token_to_orig_map": [240, 281], "token_is_max_context": [240, 281], "input_mask": [240, 281, 461], "segment_id": [240, 281, 461], "read_squad_exampl": [240, 281], "input_fil": [240, 281], "doc_strid": [240, 281, 495], "max_query_length": [240, 281, 495], "output_fn": [240, 281], "inputbatch": [240, 281], "collecttransform": [240, 281], "10833": [240, 281], "tfsquadv1posttransform": [240, 281], "n_best_siz": [240, 281, 495], "384": [240, 281, 495], "64": [240, 281, 422, 490, 493, 495, 499], "max_answer_length": [240, 281, 495], "30": [240, 281, 451, 455, 457, 493, 495, 499], "nbest_predict": [240, 281, 495], "question": [240, 281, 293, 294, 346, 347, 419, 420, 425, 458, 464, 485, 493, 495, 499], "anoth": [240, 281, 289, 298, 342, 415, 447, 448, 474, 478, 495, 496], "long": [240, 281, 453, 490, 495], "document": [240, 281, 402, 420, 426, 427, 432, 450, 462, 466, 476, 479, 480, 485, 491, 495, 497], "chunk": [240, 281, 495], "tfmodelzoocollecttransform": [240, 281], "tfsquadv1modelzooposttransform": [240, 281], "squadv1": [240, 281, 495], "parsedecodevoctransform": [240, 281], "conf_fname_or_obj": [241, 250, 282, 287, 297, 298, 299, 300, 302, 311, 316, 324], "unnecessari": [241, 461], "tensorflowcrossentropyloss": 242, "pytorchcrossentropyloss": 242, "tensorflowsparsecategoricalcrossentropi": 242, "sparsecategoricalcrossentropyloss": 242, "setter": 243, "calib_dataload": [243, 325, 383, 421, 424, 444, 445, 447, 455, 456, 460, 461, 488, 489], "reason": [243, 419, 426, 444, 490, 494, 496], "know": [243, 450, 491], "metric_cl": [245, 349, 383, 461], "user_metr": [245, 349, 383], "alwai": [245, 292, 345, 349, 383, 447, 460, 461], "recommend": [245, 349, 425, 445, 454, 472, 475, 480, 482, 485, 487, 496], "set_backend": 246, "tensorflowoptim": 247, "pytorchoptim": 247, "optimizer_registri": 247, "optimizer_typ": 247, "cross": [247, 296, 349, 456, 496], "tensorflowsgd": 247, "tensorflowadamw": 247, "tensorflow_addon": 247, "adamw": 247, "tensorflowadam": 247, "adam": [247, 498], "pytorchsgd": 247, "record_output": 249, "output_process": 249, "get_activ": 249, "tensorflowimagefold": 268, "qlinear2qdq": [283, 288, 341], "qlinearop": [284, 447, 457, 472, 488, 499], "check_model": 284, "modelproto": [284, 350, 463], "onnx_qlinear_to_qdq": 284, "input_name_to_nod": 284, "destin": [284, 298], "tf_to_fp32_onnx": 285, "tf_to_int8_onnx": 285, "int8_model": [285, 286, 425], "get_node_map": 286, "fp32_onnx_path": 286, "module_node_map": 286, "get_quantizable_onnx_op": 286, "quantize_nod": 286, "dynamic_quant_export": 286, "pt_fp32_model": 286, "pt_int8_model": 286, "weight_typ": 286, "s8": 286, "static_quant_export": 286, "_quantiz": 286, "torch_to_fp32_onnx": 286, "do_constant_fold": 286, "verbos": [286, 328, 387], "torch_to_int8_onnx": 286, "achiev": [287, 324, 452, 461, 484, 485, 486, 488, 494, 496], "across": [287, 297, 324, 350, 446, 461, 485, 493, 496], "variou": [287, 297, 324, 350, 427, 457, 464, 485, 487], "dl": [287, 297, 311, 316, 324, 350, 447, 456, 468, 481, 486, 499], "bring": [287, 324, 475, 493], "unifi": [287, 324, 425, 426, 427, 444, 456, 457, 460, 461, 463], "vari": [287, 311, 316, 324, 485, 493, 499], "roc": [287, 296, 311, 316, 324, 349], "flexibl": [287, 311, 316, 324, 448, 485, 490], "via": [287, 311, 316, 324, 419, 450, 457, 461, 464, 481, 485], "popular": [288, 341, 417, 424, 425, 426, 443, 448, 451, 452, 455, 461, 485, 488, 490, 496, 497], "techniqu": [288, 341, 417, 424, 457, 461, 464, 484, 485, 486, 487, 488, 497, 498, 499], "bleu": [288, 290, 295, 341, 343, 348, 460, 485], "bleu_util": [288, 295, 341, 348], "coco_label_map": [288, 295, 341, 348], "coco_tool": [288, 295, 341, 348], "evaluate_squad": [288, 295, 341, 348], "f1": [288, 293, 295, 296, 341, 346, 348, 349, 450, 460, 461, 492, 499], "basic_na": [288, 301, 341], "nas_util": [288, 301, 341], "pruner_legaci": [288, 341], "gradient_sensit": [288, 307, 341], "group_lasso": [288, 307, 341], "pruning_recip": [288, 341], "tile_pattern": [288, 312, 313], "logger": [288, 317, 341, 405, 408, 415], "prune_util": [288, 317, 341], "tuning_sampl": [288, 330, 336, 341, 391, 397], "tuning_spac": [288, 330, 336, 337, 339, 341, 391, 397, 398, 400], "tuning_struct": [288, 330, 336, 337, 338, 341, 391, 397, 398, 399], "auto_mixed_precis": [288, 330, 341, 391], "graph_optim": [288, 341], "mixed_precis": [288, 341, 350, 461], "model_convers": [288, 341], "pruning_v2": [288, 341], "unicoderegex": [289, 342], "hoc": [289, 342], "hack": [289, 342], "recogn": [289, 342, 496], "nondigit_punct_r": [289, 342], "compil": [289, 342, 461], "express": [289, 342, 419], "preced": [289, 342, 493], "digit": [289, 342, 415, 486], "punct_nondigit_r": [289, 342], "symbol_r": [289, 342], "bleu_token": [289, 342], "mose": [289, 342, 490], "smt": [289, 342], "mosesdecod": [289, 342], "mteval": [289, 342], "v14": [289, 342], "pl": [289, 342], "l954": [289, 342], "l983": [289, 342], "bilingu": [289, 342], "understudi": [289, 342], "qualiti": [289, 342], "machin": [289, 342, 452, 458, 467, 481, 486, 493, 494], "translat": [289, 290, 342, 343, 485, 496], "natur": [289, 342, 452], "approxim": [289, 290, 342, 343, 426, 460], "glue": [289, 296, 342, 349, 445, 460, 461, 470], "word": [289, 342, 460, 485, 490, 499], "ngram": [289, 342, 460], "breviti": [289, 290, 342, 343, 460], "penalti": [289, 290, 342, 343, 460], "doe": [289, 342, 401, 444, 445, 460, 461, 490, 491, 495], "beam": [289, 342, 460], "tensor2tensor": [290, 343], "bleu_hook": [290, 343], "compute_bleu": [290, 343], "reference_corpu": [290, 343], "translation_corpu": [290, 343], "max_ord": [290, 343], "use_bp": [290, 343], "against": [290, 343], "gram": [290, 343], "bleu_scor": [290, 343], "third": [292, 345, 459], "parti": [292, 345, 459, 488], "pycocotool": [292, 345, 453, 458], "noth": [292, 345, 496], "thu": [292, 345, 461, 485, 488], "cannot": [292, 345, 421, 453, 494], "jonathanhuang": [292, 345], "image_id": [292, 345, 460], "invok": [292, 345, 426], "groundtruth_dict": [292, 345], "exportgroundtruthtococo": [292, 345], "groundtruth_boxes_list": [292, 345], "groundtruth_classes_list": [292, 345], "max_num_class": [292, 345], "output_path": [292, 345], "detections_list": [292, 345], "exportdetectionstococo": [292, 345], "detection_boxes_list": [292, 345], "detection_scores_list": [292, 345], "detection_classes_list": [292, 345], "cocowrapp": [292, 345], "loadannot": [292, 345], "cocoevalwrapp": [292, 345], "agnostic_mod": [292, 345], "computemetr": [292, 345], "detection_typ": [292, 345], "bbox": [292, 345, 421, 460], "hold": [292, 328, 345, 387, 445], "iou_typ": [292, 345], "iou_thr": [292, 296, 345, 349, 460], "map_point": [292, 296, 345, 349, 460], "cocoev": [292, 345], "mscoco": [292, 345], "Then": [292, 345, 426, 447, 474, 476, 478, 479, 493, 496], "exportsingleimagegroundtruthtococo": [292, 345], "next_annotation_id": [292, 345], "category_id_set": [292, 345], "groundtruth_box": [292, 345], "groundtruth_class": [292, 345], "groundtruth_mask": [292, 345], "groundtruth_is_crowd": [292, 345], "ingest": [292, 345], "here": [292, 345, 402, 426, 445, 450, 451, 452, 454, 455, 460, 469, 476, 479, 481, 488, 491, 492, 499], "exportsingleimagedetectionstococo": [292, 345], "uniqu": [292, 325, 345, 488], "assign": [292, 345, 415, 450, 487, 496], "num_gt_box": [292, 345], "num_detect": [292, 296, 345, 349, 460, 461, 498], "image_height": [292, 345], "image_width": [292, 345], "detection_mask": [292, 345], "crowd": [292, 345], "insid": [292, 345, 448, 449, 482, 485, 496], "exportsingleimagedetectionboxestococo": [292, 345], "detection_box": [292, 345, 461, 498], "detection_scor": [292, 345, 461, 498], "detection_class": [292, 345, 461, 498], "exporsingleimagedetectionboxestococo": [292, 345], "exportsingleimagedetectionmaskstococo": [292, 345], "allenai": [293, 294, 346, 347], "bi": [293, 294, 346, 347], "att": [293, 294, 346, 347], "flow": [293, 294, 346, 347, 421, 422, 461], "f1_score": [293, 294, 346, 347], "ground_truth": [293, 294, 346, 347], "ground": [293, 294, 346, 347], "truth": [293, 294, 346, 347], "metric_max_over_ground_truth": [293, 294, 346, 347], "metric_fn": [293, 294, 346, 347], "exact_match_scor": [293, 346], "exact": [293, 346], "averag": [293, 294, 296, 346, 347, 349, 460, 461, 496], "articl": [293, 294, 346, 347], "paragraph": [293, 294, 346, 347], "qa": [293, 294, 346, 347], "cantain": [293, 294, 346, 347], "normalize_answ": [294, 347], "newlin": [294, 347, 415], "tab": [294, 347, 481, 494], "harmon": [294, 296, 347, 349], "recal": [294, 296, 347, 349], "answer_start": [294, 347], "177": [294, 347], "denver": [294, 347], "bronco": [294, 347], "nfl": [294, 347], "team": [294, 347, 419, 489], "afc": [294, 347], "super": [294, 347, 422], "bowl": [294, 347], "50": [294, 347, 422, 426, 493, 499], "56be4db0acb8001400a502ec": [294, 347], "form": [294, 347, 447, 448, 481], "percentag": [294, 347, 443, 498], "tensorflowmetr": [296, 349], "maintain": [296, 349, 419, 420, 424, 463, 464, 476, 479, 490, 491], "pytorchmetr": [296, 349], "mxnetmetr": [296, 349], "onnxrtqlmetr": [296, 349], "onnxrtitmetr": [296, 349], "metric_registri": [296, 349], "metric_typ": [296, 349], "decorator_metr": [296, 349], "basemetr": [296, 349, 383], "single_output": [296, 349], "hvd": [296, 349, 450], "wrappytorchmetr": [296, 349], "wrapmxnetmetr": [296, 349], "wraponnxrtmetr": [296, 349], "proport": [296, 349], "pred_list": [296, 349], "pytorchloss": [296, 349], "mae": [296, 349, 460], "compare_label": [296, 349, 383, 460], "rmse": [296, 349, 460, 496], "squar": [296, 331, 349, 392, 447, 460, 493, 496], "tensorflowtopk": [296, 349], "k": [296, 349, 383, 460], "among": [296, 349, 475, 493], "outcom": [296, 349], "num_correct": [296, 349], "num_sampl": [296, 349], "generaltopk": [296, 349], "cocomapv2": [296, 349, 460], "anno_path": [296, 349, 460], "map_kei": [296, 349], "detectionboxes_precis": [296, 349], "output_index_map": [296, 349, 460], "tensorflowmap": [296, 349], "tensorflowcocomap": [296, 349], "tensorflowvocmap": [296, 349], "squadf1": [296, 349, 460], "miou": [296, 349], "num_class": [296, 349], "21": [296, 349, 469, 470, 486, 493, 499], "iou": [296, 349], "intersect": [296, 349, 425, 460], "union": [296, 349, 404, 460], "onnxrtglu": [296, 349], "dlrm": [296, 349], "modelconvers": 298, "typic": [298, 325, 422, 424, 449, 451, 455, 485, 499], "basicna": 299, "model_build": [299, 302], "conf_fnam": 299, "nasbas": [302, 422], "nas_registri": 303, "nas_method": 303, "create_search_space_pool": 303, "idx": [303, 445], "enumer": [303, 404, 425, 448, 449, 450, 461, 484, 485, 494], "find_pareto_front": 303, "pareto": [303, 422], "front": [303, 422], "n_point": 303, "n_metric": 303, "n_pareto_point": 303, "gradientsensitivityprun": 305, "pytorchmodel": [305, 306, 308, 309, 310, 359], "overwritten": [305, 306, 308, 309, 310, 469], "grouplassoprun": 306, "legaci": 307, "basicmagnitudeprun": 308, "patternlockprun": [309, 321], "pruner_registri": 310, "clase": 310, "pruningconf": [311, 316], "tfpruningcallback": [311, 316], "input_model": [311, 316, 463, 494], "pure": [311, 316, 485], "pattern_registri": 314, "pattern_typ": 314, "patternbas": 314, "mask_shap": [314, 315], "is_contigu": 314, "tile": 315, "tilepatternbas": 315, "tilepattern_1x1": 315, "1x1": [315, 448, 461, 485], "tilepattern_2x2": 315, "2x2": [315, 493], "tilepattern_1x16": 315, "1x16": 315, "tilepattern_4x1": 315, "tilepattern_1x2": 315, "1x2": [315, 493], "patternnxm": 319, "patternninm": 319, "reset_non_value_to_default": 320, "obejct": 320, "parse_not_to_prun": 320, "update_frequency_on_step": [321, 487], "max_sparsity_ratio_per_lay": [321, 487], "magnitudeprun": 321, "snipprun": 321, "snipmomentumprun": 321, "moreoev": 321, "quantconf": 324, "server": [325, 481], "seper": 325, "opt_model": [325, 461], "fulli": [325, 461, 488, 493], "train_func": [325, 404, 450, 461, 488], "automixedprecisiontunestrategi": [326, 385], "basictunestrategi": [327, 386], "stage": [327, 332, 384, 386, 393, 448, 485, 494, 496], "polici": [327, 331, 384, 386, 392, 419, 424, 498, 500], "bayesiantunestrategi": [328, 387], "acq_max": [328, 387], "ac": [328, 387], "gp": [328, 387], "y_max": [328, 387], "n_warmup": [328, 387], "10000": [328, 387, 485], "n_iter": [328, 387], "acquisit": [328, 387], "gaussian": [328, 387, 496], "relev": [328, 387, 426, 427], "acq": [328, 387], "randomst": [328, 387], "scipi": [328, 387], "x_max": [328, 387], "targetspac": [328, 387], "pbound": [328, 387], "9527": [328, 387, 461, 498], "allow": [328, 387, 448, 450, 460, 461, 462, 487, 493, 496, 498], "bayesianoptim": [328, 387], "exhaustivetunestrategi": [329, 389], "msetunestrategi": [331, 392], "mse_v2tunestrategi": [332, 393], "revert": [332, 340, 393, 401, 496], "randomtunestrategi": [333, 394], "strategy_registri": [334, 395, 496], "tunestrategi": [334, 395, 496], "tuningsamplerregistri": 337, "tuningsampl": [337, 398], "tuningord": [337, 398], "Not": [337, 338, 398, 399, 415, 422], "tuningspac": [337, 338, 398, 399], "tuning_order_lst": [337, 398], "initial_op_tuning_cfg": [337, 398], "modelwisetuningsampl": [337, 398], "tuning_items_prior": [337, 398], "op_dtype_dict": [337, 398], "optuningconfig": [337, 338, 339, 398, 399, 400], "optypewisetuningsampl": [337, 398], "opwisetuningsampl": [337, 398], "fallbacktuningsampl": [337, 398], "op_dtyp": [337, 398], "accumul": [337, 398, 496], "skip_first": [337, 398], "smoothquantsampl": [337, 398], "tuningitem": [338, 399], "item_typ": [338, 399], "pattern_to_intern": [338, 399], "default_dtyp": [338, 399], "pattern_to_path": [338, 399], "quant_mode_from_pattern": [338, 399], "internal_pattern": [338, 399], "initial_tuning_cfg_with_quant_mod": [338, 399], "op_name_typ": [338, 399], "step1": [338, 399], "step2": [338, 399], "complet": [338, 399, 425, 426, 488, 496, 498, 499], "step3": [338, 399], "step4": [338, 399], "step5": [338, 399], "op_quant_mod": [339, 400], "ordereddefaultdict": [340, 401], "extract_data_typ": [340, 401], "data_typ": [340, 401], "sign": [340, 401, 420, 427, 443, 488, 492], "reverted_data_typ": [340, 401], "signed_flag": [340, 401], "get_adaptor_nam": [340, 401], "experiment": [341, 376, 381, 422, 445, 449, 450, 452, 461, 485, 487, 491, 495], "base_model": [341, 352], "keras_model": [341, 352], "mxnet_model": [341, 352], "nets_factori": [341, 352], "onnx_model": [341, 352, 376], "tensorflow_model": [341, 352, 381], "torch_model": [341, 352], "collect_layer_histogram": [341, 408], "create_obj_from_config": [341, 408], "kl_diverg": [341, 408], "load_huggingfac": [341, 408, 461], "neural_insights_util": [341, 408], "weights_detail": [341, 408], "sub_class": [349, 383], "register_customer_metr": 349, "topk": [349, 383, 450, 460, 461, 488], "matrix": [349, 383, 424, 472, 497], "frozen": [350, 358, 383, 463], "savedmodel": [350, 358, 383, 499], "chould": 350, "onnx_ml_pb2": [350, 463], "hybirdblock": [350, 383], "paramt": [350, 404], "basemodel": 351, "plai": [351, 486, 490, 493], "role": [351, 490, 493], "kerasmodel": 353, "get_model_fwk_nam": 354, "fwk": 354, "mxnetmodel": 355, "net": 356, "tfslimnetsfactori": 356, "onnxmodel": [357, 376], "get_model_typ": 358, "validate_graph_nod": 358, "validate_and_inference_input_output": 358, "output_tensor_nam": 358, "graph_sess": 358, "graph_def_sess": 358, "frozen_pb_sess": 358, "load_saved_model": 358, "saved_model_tag": 358, "signatur": 358, "saved_model_dir": 358, "metagraphdef": 358, "keras_sess": 358, "slim_sess": 358, "checkpoint_sess": 358, "estimator_sess": 358, "saved_model_sess": 358, "tensorflowbasemodel": [358, 381], "tensorflowsavedmodelmodel": 358, "tensorflowqatmodel": 358, "tensorflowcheckpointmodel": 358, "tensorflowmodel": 358, "pytorchbasemodel": 359, "pytorchfxmodel": 359, "ipexmodel": 359, "driven": [360, 424, 461, 481, 483, 494], "objective_registri": 360, "objective_custom_registri": 360, "obj_cl": 360, "eural_compressor": 360, "objective_cl": 360, "user_object": 360, "__class__": 360, "__name__": 360, "objective_cfg": 360, "usr_cfg": 360, "user_obj_cfg": 360, "easili": [360, 425, 465, 469, 481, 483, 493], "peak": [360, 483], "multiobject": 360, "metric_criterion": 360, "metric_weight": 360, "obj_criterion": 360, "obj_weight": 360, "is_measur": 360, "parserfactori": 362, "onnxrtparserfactori": 364, "onnxprofilingpars": 366, "respons": [366, 367, 371, 488], "profilingpars": 367, "profilingresult": 368, "total_execution_tim": 368, "accelerator_execution_tim": 368, "cpu_execution_tim": 368, "op_run": 368, "op_defin": 368, "tensorflowparserfactori": 369, "tensorflowprofilingpars": 371, "profilerfactori": [372, 374, 379], "create_onnx_config": 377, "ort": 377, "sessionopt": 377, "delete_assign": 382, "create_tf_config": 382, "tf_modul": 382, "configproto": 382, "set_eager_execut": 382, "entir": [383, 404, 421, 426, 427, 443, 485, 493], "autotunestrategi": 384, "conservativetunestrategi": 388, "o0": [388, 496], "who": [388, 419], "hawq_v2tunestrategi": 390, "made": [390, 425, 488, 491, 496], "impact": [390, 491, 496], "tunestrategymeta": 395, "metaclass": 395, "lowerbitssampl": 398, "blockfallbacktuningsampl": 398, "op_block_lst": 398, "target_dtyp": 398, "alpha_list": 398, "quantopt": 401, "quant_typ": 401, "quant_opt": 401, "preprocess_user_cfg": 401, "op_user_cfg": 401, "op_user_cfg_modifi": 401, "build_slave_faker_model": 401, "slave": [401, 496], "virtual": [401, 486], "classregist": 401, "fun": 402, "attribute1": 402, "module_debug_level1": 402, "debug": [402, 411, 447, 474, 478, 482, 496, 497], "function1": 402, "param1": 402, "param2": 402, "parameter1": 402, "parameter2": 402, "function2": 402, "pep": 402, "484": 402, "output_model": [402, 461, 494], "function3": 402, "section": [402, 427, 447, 448, 449, 481, 485, 487, 498], "restructuredtext": 402, "liter": 402, "generator1": 402, "example_gener": 402, "exampleclass": 402, "param3": 402, "public": [402, 419, 476, 479], "attr1": 402, "attr2": 402, "attr5": 402, "api_doc_exampl": 403, "loop": [404, 421, 422, 426, 427, 454, 492, 496], "compressionmanag": 404, "uesd": 404, "deal": 404, "pruningconfig": 404, "orchestr": [404, 424, 457, 497], "on_train_begin": [404, 421, 448, 449, 461, 484, 485, 488], "train_loop": [404, 461, 484], "on_epoch_begin": [404, 407, 448, 449, 461, 484], "on_step_begin": [404, 407, 448, 449, 461, 484, 485], "on_after_compute_loss": [404, 448, 449, 461, 484], "backward": [404, 448, 449, 450, 461, 484, 485, 488, 491], "on_before_optimizer_step": [404, 448, 449, 461, 484, 485], "on_step_end": [404, 407, 448, 449, 461, 484], "on_epoch_end": [404, 407, 448, 449, 461, 484], "on_train_end": [404, 448, 449, 461, 484, 485, 488], "path_to_sav": 404, "manag": [404, 407, 461, 464, 465, 475], "top1": [404, 460, 485, 488, 499], "callbacks_list": 404, "layerhistogramcollector": 405, "layer_tensor": 405, "include_lay": 405, "get_func_from_config": 407, "func_dict": 407, "get_preprocess": 407, "get_metr": 407, "get_postprocess": 407, "get_algorithm": 407, "algo": 407, "create_dataset": 407, "cfg_preprocess": 407, "cfg_filter": 407, "create_dataload": 407, "dataloader_cfg": 407, "create_eval_func": 407, "postprocess_cfg": 407, "fp32_baselin": [407, 425], "baselin": [407, 492, 494], "create_train_func": 407, "train_cfg": 407, "Their": 407, "auxiliari": 408, "optimizedmodel": 410, "from_pretrain": [410, 461], "save_for_huggingface_upstream": [410, 461], "msg": 411, "fatal": 411, "warn": 411, "warin": 411, "alia": [411, 415, 466, 471], "insight": [412, 424, 447, 486, 491, 496, 497], "register_neural_insights_workload": 412, "workload_loc": [412, 415], "workload_mod": 412, "workload": [412, 415, 486], "uuid": 412, "update_neural_insights_workload": 412, "workload_uuid": 412, "update_neural_insights_workload_accuracy_data": 412, "baseline_accuraci": 412, "optimized_accuraci": 412, "is_int8_model": 414, "checkpoint_dir": 414, "history_cfg": 414, "best_configur": 414, "best_model_weight": 414, "snapshot": 414, "cfg_from_fil": 415, "yaml_fil": [415, 445, 450], "lazyimport": 415, "lazi": 415, "till": [415, 496], "decorat": 415, "time_limit": 415, "get_siz": 415, "seen": [415, 425], "recurs": 415, "compute_spars": 415, "fault_tolerant_fil": 415, "equal_dict": 415, "d2": 415, "compare_kei": 415, "ignore_kei": 415, "cpuinfo": 415, "dump_elapsed_tim": [415, 425], "customized_msg": 415, "elaps": 415, "combine_histogram": 415, "old_hist": 415, "old": [415, 461, 491], "get_tensor_histogram": 415, "get_all_fp32_data": 415, "get_tuning_histori": 415, "tuning_history_path": 415, "offlin": [415, 419, 461, 488, 493], "str2arrai": 415, "dequantize_weight": 415, "weight_tensor": 415, "min_filter_tensor": 415, "max_filter_tensor": 415, "scale_info": 415, "captureoutputtofil": 415, "tmp_file_path": 415, "stream": [415, 499], "sy": [415, 467], "stderr": 415, "captur": 415, "statist": [415, 416], "header": [415, 453], "field_nam": 415, "output_handl": 415, "printer": 415, "global_st": 415, "load_data_from_pkl": 415, "pkl": 415, "dump_data_to_loc": 415, "show_memory_info": 415, "hint": 415, "dump_class_attr": 415, "compare_object": 415, "obj1": 415, "obj2": 415, "ignore_attr": 415, "comparison": [415, 491, 494], "alias_param": 415, "param_nam": 415, "param_alia": 415, "alias": 415, "print_tabl": 415, "column_map": 415, "table_entri": 415, "titl": [415, 459, 482, 496], "insert_newlin": 415, "prettyt": 415, "column": [415, 493], "func": [415, 426, 488, 498], "handler": [415, 496], "row": [415, 447, 493], "decim": 415, "get_tensors_info": 415, "get_weights_detail": 415, "weightdetail": 415, "dump_tabl": 415, "file_typ": 415, "csv": [415, 422], "dump_table_to_csv": 415, "get_number_of_socket": 415, "platform": [415, 424, 457, 464, 472, 486, 488], "opentri": 415, "activation_min": 415, "activation_max": 415, "print_op_list": 415, "get_op_list": 415, "minmax_file_path": 415, "input_model_tensor": 415, "optimized_model_tensor": 415, "activation_min_max": 415, "calculate_ms": 415, "mse_metric_gap": 415, "fp32_tensor": 415, "dequantize_tensor": 415, "euclidean": [415, 448], "distanc": [415, 448], "weightsdetail": 416, "input_tensor_data": 416, "optimized_tensor_data": 416, "weightsstatist": 416, "welcom": [418, 419, 420, 424, 500], "interest": [419, 424, 494], "foster": 419, "particip": 419, "commun": 419, "harass": 419, "experi": [419, 464, 492, 493, 496], "everyon": 419, "regardless": 419, "ag": 419, "bodi": 419, "ethnic": 419, "characterist": 419, "gender": 419, "educ": 419, "socio": 419, "econom": 419, "race": 419, "religion": 419, "sexual": 419, "orient": 419, "contribut": [419, 424, 485], "inclus": 419, "Being": 419, "respect": [419, 454, 485, 493, 498], "viewpoint": 419, "gracefulli": 419, "focus": [419, 425], "empathi": 419, "toward": [419, 448], "member": [419, 425], "unaccept": 419, "imageri": 419, "unwelcom": 419, "troll": 419, "insult": 419, "derogatori": 419, "polit": 419, "attack": 419, "privat": 419, "publish": [419, 459, 462, 482, 493], "electron": 419, "explicit": 419, "permiss": 419, "inappropri": 419, "profession": 419, "clarifi": 419, "appropri": [419, 443, 493], "fair": 419, "action": [419, 476, 479], "edit": 419, "reject": 419, "commit": [419, 420], "wiki": 419, "issu": [419, 420, 423, 458, 488, 494], "ban": 419, "temporarili": 419, "deem": 419, "threaten": 419, "offens": 419, "harm": 419, "mail": 419, "social": [419, 424, 486], "media": [419, 424, 486], "account": [419, 492, 496], "appoint": 419, "onlin": [419, 492], "event": [419, 494], "abus": 419, "report": [419, 420, 492], "contact": [419, 491, 492], "complaint": 419, "review": [419, 420], "investig": 419, "circumst": [419, 487], "oblig": 419, "confidenti": 419, "regard": [419, 489], "incid": 419, "separ": [419, 456, 459, 484, 487], "good": [419, 488, 496], "faith": 419, "repercuss": 419, "leadership": 419, "faq": [419, 424], "page": [419, 420], "send": [420, 426], "view": [420, 424, 451, 472, 481, 491], "pylint": 420, "flake8": 420, "autopep8": 420, "cover": [420, 452, 456, 486], "would": [420, 461, 485, 488, 493], "adopt": [420, 464, 485, 486, 493], "certif": 420, "agre": 420, "j": [420, 424, 493, 499], "bug": 420, "jira": 420, "ticket": 420, "potenti": [420, 422, 447], "risk": 420, "pr": [420, 444, 460, 476, 479, 491], "reproduc": 420, "hardwar": [420, 424, 425, 448, 457, 461, 481, 485, 486, 487], "submit": [420, 486], "intend": 420, "safe": 420, "collabor": [420, 466, 472], "adher": 420, "toolkit": [421, 458, 464, 472, 486, 497], "tracer": 421, "resolv": [421, 423], "floatfunct": 421, "cat": [421, 452, 467], "done": [421, 448, 449, 465, 481, 485, 488], "10004": [421, 422, 425, 444, 448, 449, 454, 457, 462, 484, 487, 490, 498], "neural_compressor": [421, 422, 424, 427, 442, 444, 445, 447, 448, 449, 450, 452, 455, 456, 460, 461, 462, 463, 483, 484, 485, 487, 488, 489, 491, 492, 493, 495, 496, 498], "eval": [421, 444, 447, 464, 488, 494], "conduct": [421, 461, 469, 481, 496, 497], "imper": 421, "therefor": [421, 461, 485, 488, 491, 493], "lot": [421, 493], "As": [421, 426, 444, 448, 460, 461, 475, 485, 490, 496], "failur": 421, "successfulli": [421, 450, 486], "suggest": [421, 492], "traceabl": 421, "proxi": 421, "tutori": [421, 472, 486, 497], "prototyp": 421, "html": [421, 424, 476, 479], "highlight": 421, "untrac": 421, "ssd": [421, 452, 499], "resnet34": [421, 499], "r34": 421, "bboxes_labels_scor": 421, "prob": 421, "45": [421, 493, 499], "max_output": 421, "zip": 421, "dbox": 421, "dlabel": 421, "dscore": 421, "decode_singl": 421, "autom": [422, 424, 464, 481, 482, 486, 493], "artifici": 422, "ann": 422, "par": 422, "outperform": 422, "hand": 422, "propos": [422, 425, 448, 462, 493], "lie": [422, 443], "predictor": 422, "shown": [422, 444, 447, 448, 460, 461, 475, 483, 484, 485, 493, 496], "figur": [422, 474, 475, 478], "popul": 422, "inner": 422, "evolutionari": 422, "cycl": 422, "until": [422, 426, 496], "conclud": 422, "met": [422, 454, 488, 494], "yet": [422, 476, 479, 482], "simplest": [422, 443, 467], "launcher": [422, 424, 448, 449, 472, 497], "agent": 422, "nsga2": 422, "supernet": 422, "ofa_mbv3_d234_e346_k357_w1": 422, "acc": [422, 485, 494, 499], "mac": [422, 482], "num_ev": 422, "250": [422, 485], "results_csv_path": 422, "search_result": 422, "dataset_path": 422, "ilsvrc2012": 422, "aim": [422, 424, 464, 485, 493, 496, 497], "mobilenetv3": 422, "lt": [422, 445, 499], "wmt": 422, "en": 422, "de": 422, "guidelin": [423, 424], "mainstream": [424, 497], "learn": [424, 425, 426, 444, 445, 452, 456, 457, 458, 461, 462, 464, 466, 469, 470, 472, 475, 476, 479, 481, 485, 486, 488, 493, 494, 496, 497], "runtim": [424, 425, 426, 428, 444, 447, 451, 454, 457, 462, 466, 471, 472, 487, 491], "workflow": [424, 426, 427, 447, 448, 452, 458, 462, 476, 479, 494, 497], "particular": [424, 485], "wide": [424, 451, 462, 485, 488, 499], "xeon": [424, 458, 459, 462, 486, 488, 489, 499], "scalabl": [424, 458, 462, 486, 488, 489], "processor": [424, 462, 486, 488, 489], "flex": [424, 458], "amd": [424, 457, 458, 499], "arm": [424, 457, 458, 499], "nvidia": [424, 443, 457, 458, 499], "bloom": [424, 493], "176b": [424, 493], "7b": [424, 493, 499], "stabl": [424, 458, 485, 486], "diffus": [424, 486], "gpt": [424, 485, 493, 499], "vision": [424, 452, 468, 493], "coder": [424, 457, 465, 466, 469, 472, 475, 486], "cloud": [424, 486], "marketplac": [424, 482, 486], "googl": [424, 462, 486], "amazon": [424, 464, 472], "web": [424, 494], "servic": [424, 481, 486], "azur": [424, 486], "softwar": [424, 459, 485, 486, 491], "alibaba": [424, 471, 478, 479, 486], "tencent": [424, 486], "taco": [424, 486], "ai": [424, 464, 486, 489, 497], "ecosystem": [424, 486], "lightn": [424, 471], "pip": [424, 447, 450, 453, 455, 458, 466, 469, 474, 476, 478, 479, 491], "wget": [424, 447, 453, 455], "googleapi": [424, 455], "v1_6": [424, 455], "mobilenet_v1_1": [424, 455], "0_224_frozen": [424, 455], "overview": [424, 496], "jupyterlab": [424, 464, 470, 472, 474, 478, 497], "studio": [424, 472, 481, 497], "topic": 424, "innov": [424, 472, 486], "onnxcommunitymeetup2023": [424, 486], "juli": [424, 486], "2023": [424, 490, 493, 499], "blog": [424, 486], "llama": [424, 486], "msft": [424, 486], "oliv": [424, 486], "friendli": [424, 454, 461, 486, 493, 497, 498], "toolchain": [424, 453, 486], "june": [424, 486], "neurip": [424, 486], "oct": [424, 486], "quala": [424, 486], "minilm": [424, 486, 499], "releas": [424, 458, 470, 472, 474, 478, 480, 500], "legal": [424, 500], "idea": [424, 485, 493, 496], "feel": 424, "bridg": [425, 426, 457], "vanilla": [425, 426, 457], "abcadaptor": 425, "__init__": [425, 444, 445, 460, 496], "query_fw_cap": [425, 427], "query_fused_pattern": 425, "he": 425, "besid": [425, 448, 490], "describ": [425, 427, 447, 454, 494], "past": [425, 490], "mainten": 425, "difficult": [425, 493], "abil": [425, 426, 445, 454, 493], "modif": [425, 454, 469], "fragment": 425, "scenario": [425, 442, 448, 461, 485, 490], "granular": [425, 426, 427, 454, 457, 467, 488, 493, 498], "semant": [425, 454], "mla": [425, 462, 488], "becom": [425, 452, 485, 490], "explor": 425, "inspect_tensor": 425, "op_list": [425, 494], "iteration_list": 425, "inspect_typ": 425, "save_to_disk": 425, "quantization_cfg": 425, "set_tensor": 425, "tensor_dict": 425, "diagnosis_help": 425, "fw": 426, "outlin": [426, 427], "instruct": [426, 427, 448, 458, 462, 476, 479, 486, 487, 488], "extend": [426, 427], "accommod": [426, 427], "incorpor": [426, 427, 449, 496], "give": [426, 481, 496], "diagram": [426, 427, 447, 496], "illustr": [426, 427, 449, 496], "sequencediagram": [426, 427], "autonumb": [426, 427], "query_framework_cap": 426, "opwis": 426, "optypewis": 426, "travers": [426, 427, 496], "\u2776": 426, "\u2777": 426, "\u2778": 426, "\u2779": 426, "\u277a": 426, "\u277b": 426, "\u277c": 426, "These": [426, 457], "chapter": 426, "confirm": 426, "chosen": [426, 443], "framework_yaml": 426, "int8_conv_config": 426, "node_op": 426, "optype_wise_": 426, "per_tensor": [426, 427, 454, 488, 498], "exmapl": 426, "tuning_cfg_to_fw": 426, "Its": [426, 443], "calib_iter": 426, "dispatch": [426, 457], "is_perchannel": 426, "is_asymmetr": 426, "weight_bit": 426, "convert_bf16": 426, "calib": 426, "larger": [426, 485, 490, 493], "somewhat": 426, "distort": 426, "line": [426, 450, 457, 464, 469, 470, 494], "At": [426, 496], "explain": [427, 447, 493], "let": [427, 454, 469, 485, 487, 498], "overal": [427, 498], "drive": 427, "uint4": 427, "asymmetr": [427, 488, 496], "kullback": [427, 448], "leibler": [427, 448], "pytorch_cpu": 427, "1_11_capabl": 427, "cap_s8_1_11": 427, "cap_s8_1_11_conv1d": 427, "per_channel_symmetr": 427, "addition": [427, 450, 496], "per_tensor_symmetr": 427, "due": [427, 452, 485, 488, 493, 494], "nativ": 427, "with_arg": 427, "qscheme": 427, "torch_dtyp": 427, "quant_min": 427, "quant_max": 427, "linux": [442, 453, 475, 481], "x86_64": 442, "aarch64": 442, "prove": [443, 493], "benefici": 443, "uniform": 443, "\u03b2": 443, "\u03b1": 443, "fundament": [443, 461], "primari": [443, 496], "focu": [443, 496], "essenti": [443, 453], "remaind": 443, "enhanc": [443, 464, 486, 489], "resolut": 443, "extrem": 443, "still": [443, 461, 486, 488, 489], "retain": 443, "noteworthi": 443, "vanhouck": 443, "vincent": 443, "andrew": 443, "senior": 443, "mark": 443, "mao": 443, "speed": [443, 461, 472, 485, 486, 488, 496], "2011": 443, "szymon": 443, "migacz": 443, "2017": 443, "mckinstri": 443, "jeffrei": 443, "l": [443, 448, 494, 496], "discov": [443, 494], "preprint": [443, 485, 490, 493], "1809": 443, "04191": 443, "2018": 443, "encount": 444, "consum": 444, "previous": 444, "lack": [444, 453], "faster": [444, 446, 452, 486, 496, 499], "Of": 444, "getitem": 444, "fn": 444, "evenli": 444, "divid": [444, 493, 496], "discard": 444, "throw": 444, "awai": 444, "draw": [444, 492, 496], "worker": [444, 461, 488], "subprocess": 444, "pin": [444, 474, 478], "reshuffl": 444, "manner": [444, 448, 463], "newdataload": 444, "customis": [444, 445, 460], "ensp": [445, 495], "imagerecord": [445, 450, 498], "image_nam": 445, "cocorecord": 445, "gt": [445, 493, 495], "int64": 445, "offer": 445, "style_transf": 445, "content": 445, "tfrecorddataset": 445, "labelbal": 445, "300": 445, "16": [445, 490, 493, 499], "helloworld": [445, 462, 495], "aid": 446, "deploy": [446, 464, 481, 486, 493], "infrastructur": 446, "gap": [447, 463], "diagnos": 447, "gui": [447, 457, 485], "termin": [447, 474, 475, 478], "repeat": [447, 496], "durat": [447, 492], "git": [447, 453, 458], "clone": [447, 458, 474, 478], "cd": [447, 450, 458], "setup": [447, 454, 458, 476, 479, 485], "ilsvr2012": 447, "caff": 447, "berkeleyvis": 447, "caffe_ilsvrc12": 447, "xvzf": 447, "image_recognit": [447, 494], "resnet50_torchvis": 447, "ptq_static": 447, "resnet50_v1": [447, 450, 461], "dataset_loc": [447, 494], "label_path": 447, "quantiti": 447, "vec": 447, "mu": 447, "frac": [447, 493], "sigma": 447, "var": 447, "happen": 447, "dispers": 447, "rule": [447, 464, 485], "v0": [447, 494], "cg": [447, 494], "conv0": [447, 494], "expens": [448, 461, 496], "deploi": [448, 461, 490, 496], "power": [448, 461, 475, 486], "mobil": [448, 461, 499], "produc": 448, "logit": 448, "softmax": 448, "kd": 448, "patient": 448, "compact": [448, 461, 467, 485], "agnost": 448, "resourc": [448, 496], "convolut": [448, 486], "ia": 448, "attach": [448, 461, 493], "shallow": 448, "deepest": 448, "deeper": 448, "paper": [448, 485, 490, 493], "10006": [448, 449], "student_output": [448, 449], "student_loss": [448, 449], "training_func_for_nc": [448, 449], "distil_loss_conf": 448, "accordingli": [448, 472], "promis": [449, 461, 485], "huge": [449, 485], "heavi": 449, "light": 449, "booster": 449, "degrad": [449, 485, 496], "novel": [449, 464, 475, 481], "place": [449, 458, 485, 494], "comb": 449, "distillation_criterion": [449, 461, 484], "q_conf": 449, "horovod": 450, "instal": [450, 453, 455, 464, 466, 469, 472, 476, 479, 481, 482, 500], "program": [450, 459, 464, 481], "enable_eager_execut": 450, "yaml_file_path": 450, "pre_process": 450, "simpli": [450, 463, 464, 466, 469, 481], "evaluation_result": 450, "evaluation_time_cost": 450, "partit": [450, 485], "distributedsampl": 450, "train_sampl": 450, "train_dataset": [450, 488], "num_replica": 450, "rank": 450, "train_load": 450, "train_kwarg": 450, "adadelta": 450, "distributedoptim": 450, "named_paramet": 450, "broadcast_paramet": 450, "root_rank": 450, "broadcast_optimizer_st": 450, "set_epoch": 450, "batch_idx": 450, "zero_grad": [450, 461, 485], "nll_loss": 450, "log_interv": 450, "0f": 450, "tloss": 450, "6f": 450, "dry_run": 450, "test_func": 450, "host": 450, "num_of_process": 450, "002": 450, "ssh": [450, 481], "prompt": 450, "readm": 450, "exactli": [450, 465], "recognit": [450, 452, 485, 494], "resizecropimagenet": [450, 495], "realiz": [450, 483, 489, 492], "tow": 450, "node1": 450, "node2": 450, "TO": [450, 466], "your_node1_nam": 450, "your_node2_nam": 450, "resnet50_fp32_pretrained_model": 450, "nc_resnet50_v1": 450, "resnet": [450, 499], "varieti": [451, 487, 496], "demonstr": [451, 464, 494], "10k": [451, 455], "speedup": [451, 457, 488], "2x": [451, 457], "vnni": [451, 457, 487, 488], "exchang": 452, "hope": 452, "inc_model": [452, 463], "fp32_onnx_config": 452, "verifi": 452, "vgg16": [452, 499], "mobilenet": [452, 492, 499], "rcnn": 452, "torchscript": [452, 493], "unsupport": [452, 461, 485], "add_relu": 452, "conv1d_relu": 452, "conv2d_relu": 452, "group_norm": 452, "hardswish": 452, "instance_norm": 452, "layer_norm": 452, "leaky_relu": 452, "sigmoid": 452, "bare": 453, "metal": 453, "sudo": [453, 467], "apt": [453, 458, 467, 475], "python3": 453, "dev": [453, 474, 478], "distutil": 453, "libgl1": 453, "mesa": 453, "glx": 453, "libglib2": 453, "ln": 453, "sf": 453, "usr": 453, "incompat": 453, "88": [453, 492, 499], "80": [453, 493, 494, 499], "pyobject": 453, "reinstal": 453, "libgl": 453, "No": [453, 461, 486], "yum": [453, 458], "opencv": [453, 475], "conda": [453, 458, 467, 475, 491], "13": [453, 458, 491, 493, 499], "pend": 453, "sqlalchemi": 453, "27": [453, 499], "alemb": 453, "forg": [453, 458], "quick": [454, 462, 497, 498], "dive": [454, 497], "purpos": [454, 462, 481, 487, 488], "syntax": 454, "go": [454, 476, 479, 487, 495], "up1": 454, "up2": 454, "valid_mixed_precis": 454, "addn": 454, "grappler_optim": 454, "constfold": 454, "arithmet": 454, "debug_stripp": 454, "major": [456, 488, 493], "concept": [456, 492, 497], "rather": 456, "custom_metr": 456, "refin": [456, 485], "broad": [457, 470, 497], "420": 457, "geomean": 457, "snippet": 457, "upload": [457, 476, 479], "click": [457, 464, 465, 472, 475, 481, 486, 494], "button": [457, 475, 481], "qintegerop": [457, 488], "plan": 457, "oneapi": [458, 486, 497], "analyt": [458, 486, 497], "success": 458, "11": [458, 460, 462, 493, 496, 499], "frequent": 458, "ask": 458, "pypi": [458, 476, 479], "nightli": 458, "consolid": 458, "latest": [458, 486, 491], "eas": [458, 466, 486], "along": [458, 485], "streamlin": [458, 486], "scienc": 458, "websit": 458, "anaconda": 458, "suit": [458, 482, 494], "esri": 458, "formerli": 458, "skylak": 458, "cascad": 458, "lake": [458, 462, 486], "cooper": [458, 462, 486], "ic": [458, 486], "sapphir": 458, "rapid": 458, "hbm": 458, "arctic": 458, "sound": 458, "pont": 458, "vecchio": 458, "cento": [458, 499], "ubuntu": 458, "22": [458, 499], "04": [458, 499], "fortensorflow": 458, "forpytorch": 458, "12": 458, "tf_enable_onednn_opt": 458, "onednn": [458, 462, 488], "newer": 458, "copyright": 459, "subject": 459, "accompani": [459, 496], "research": [459, 493], "wish": 459, "bibtex": 459, "author": 459, "feng": 459, "tian": 459, "hanwen": 459, "haihao": [459, 485], "shen": [459, 485], "suyu": 459, "chen": 459, "howpublish": 459, "year": 459, "logo": 459, "atom": 459, "phi": 459, "pentium": 459, "vtune": 459, "corpor": 459, "subsidiari": 459, "brand": 459, "claim": 459, "popularli": 460, "industri": [460, 486], "label_map": 460, "decis": 460, "ap": 460, "curv": 460, "turn": [460, 475], "target_boxes_num": 460, "str_label": 460, "int_label": 460, "inturn": 460, "cocomap": 460, "vocmap": 460, "categor": 460, "multiclass": 460, "multilabel": 460, "newmetr": 460, "reset": 460, "reflect": [460, 495], "new_metr": 460, "deliv": [461, 486, 491], "conveni": 461, "upgrad": 461, "veri": [461, 482, 488, 496, 497], "comprehens": [461, 497], "kind": 461, "resort": 461, "automodelforsequenceclassif": 461, "autotoken": 461, "val_dataset": [461, 488], "val_dataload": [461, 488], "ping_memori": [461, 488], "formul": 461, "effort": 461, "written": 461, "onnxrt_integ": [461, 498], "onnxrt_qlinear": [461, 498], "image_tensor": [461, 498], "post_training_dynamic_qu": [461, 487, 496], "1000": [461, 498], "2000": 461, "sampling_s": [461, 498], "model_wis": [461, 498], "op_dict": 461, "op_wis": [461, 494, 498], "sigopt_api_token": [461, 492, 496], "sigopt_project_id": [461, 492, 496], "sigopt_experiment_nam": [461, 492, 496], "demo": 461, "600": 461, "training_arg": 461, "emul": [461, 488], "trainer": [461, 472], "briefli": [461, 493], "maxim": [461, 485, 496], "pruning_func": 461, "train_dataload": [461, 485, 488], "n_gpu": 461, "gradient_accumulation_step": 461, "clip_grad_norm_": 461, "max_grad_norm": 461, "rate": [461, 485, 488], "start_epoch": [461, 487, 498], "end_epoch": [461, 487, 498], "97": [461, 493, 499], "newli": [461, 485], "on_after_optimizer_step": [461, 485], "layer3": [461, 485], "lr_schedul": [461, 485], "0004": 461, "nesterov": [461, 498], "randomresizedcrop": [461, 495], "totensor": [461, 495], "485": [461, 499], "456": [461, 499], "406": 461, "nepoch": 461, "cnt": 461, "loss_sum": 461, "iter_bar": 461, "tqdm": 461, "desc": 461, "teacher_logit": 461, "train_fun": 461, "training_func": 461, "recent": [461, 462], "growth": [461, 462, 485], "complex": [461, 462, 485], "significantli": [461, 462, 485, 496], "bandwidth": [461, 462, 490], "exit_polici": [461, 498], "determinist": 461, "meaning": [461, 484], "reli": [461, 493], "prune_conf": 461, "quantization_aware_training_conf": 461, "aforement": 461, "inset": 461, "p_conf": [461, 484], "ssd_mobilenet_v1": 461, "benchmarkconf": 461, "half": [462, 472], "sixteen": 462, "launch": [462, 482], "3rd": [462, 486, 488, 489], "gen": [462, 486, 488, 489], "codenam": 462, "boost": [462, 465, 481, 485, 486], "x86": 462, "avx512": [462, 488], "vcvtne2ps2bf16": 462, "vcvtneps2bf16": 462, "vdpbf16p": 462, "fbgemm": [462, 488], "tensorrtexecutionprovid": [462, 488], "cudaexecutionprovid": [462, 488], "dnnlexecutionprovid": [462, 488], "avx512_bf16": 462, "plu": 462, "resnet18": [462, 466, 499], "persist": 463, "brought": [463, 465, 472, 488], "tf2": 463, "h5": 463, "hybridblock": 463, "0000": 463, "saved_result": [463, 490], "simplifi": [464, 475, 481, 485, 486], "acquir": 464, "analysi": [464, 481, 485, 492], "heurist": [464, 481], "great": 464, "facilit": 464, "autocast": 464, "my_model": 464, "no_grad": 464, "memory_format": 464, "112": [464, 499], "rand": [464, 493], "plugin": [464, 482], "aw": [464, 472, 486, 499], "sagemak": [464, 472], "inlin": [464, 469, 472], "neural_cod": [464, 466, 468, 469, 470, 472], "bench": 464, "superbench": 464, "enjoi": [465, 469, 472], "rebuild": [465, 474, 478], "reload": [465, 482], "modern": [466, 490], "democrat": [466, 486], "programm": [466, 472, 481], "nano_bf16_channels_last": 466, "nano_bf16_ipex_channels_last": 466, "nano_bf16_ipex": 466, "nano_bf16": 466, "nano_fp32_channels_last": 466, "nano_fp32_ipex_channels_last": 466, "nano_fp32_ipex": 466, "nano_gpu_to_cpu": 466, "nano_int8": 466, "nano_jit_bf16_channels_last": 466, "nano_jit_bf16_ipex_channels_last": 466, "nano_jit_bf16_ipex": 466, "nano_jit_bf16": 466, "nano_jit_fp32_channels_last": 466, "nano_jit_fp32_ipex_channels_last": 466, "nano_jit_fp32_ipex": 466, "nano_jit_fp32": 466, "nano_onnxruntime_fp32": 466, "nano_onnxruntime_int8_qlinear": 466, "openvino": 466, "nano_openvino_fp32": 466, "nano_openvino_int8": 466, "bc": [467, 475], "conda_prefix": 467, "echo": 467, "tradit": [467, 485], "libjemalloc": 467, "libiomp5": 467, "home": 467, "lib": 467, "ld_preload": 467, "malloc_conf": 467, "oversize_threshold": 467, "background_thread": 467, "metadata_thp": 467, "dirty_decay_m": 467, "9000000000": 467, "muzzy_decay_m": 467, "kmp_affin": 467, "kmp_blocktim": 467, "dnnl_primitive_cache_capac": 467, "cpufreq": 467, "scaling_governor": 467, "powersav": 467, "tee": 467, "pytorch_jit_script": [468, 471], "pytorch_channels_last": [468, 471], "run_bench": 468, "patch": [468, 481], "patch_path": 468, "your_patch_path": 468, "sweep": 468, "sweep_object": 468, "bench_config": 468, "bench_featur": 468, "sai": 469, "run_glu": [469, 470], "requisit": 469, "task_nam": [469, 470], "do_ev": [469, 470], "remain": 469, "itself": 469, "run_glue_optim": 469, "static_ipex": 469, "auto_qu": 470, "v4": [470, 499], "albert": [470, 499], "sst2": 470, "alexnet": [470, 499], "pytorch_amp": 471, "optimize_for_infer": 471, "pytorch_jit_trac": 471, "pytorch_jit_script_ofi": 471, "pytorch_jit_trace_ofi": 471, "torchdynamo": 471, "pytorch_torchdynamo_jit_script": 471, "pytorch_torchdynamo_jit_trac": 471, "pytorch_torchdynamo_jit_script_ofi": 471, "pytorch_torchdynamo_jit_trace_ofi": 471, "pytorch_inc_bf16": 471, "pytorch_inc_static_quant_fx": 471, "pytorch_inc_static_quant_ipex": 471, "pytorch_inc_dynamic_qu": 471, "pytorch_ipex_fp32": 471, "pytorch_ipex_bf16": 471, "pytorch_ipex_int8_static_qu": 471, "pytorch_ipex_int8_dynamic_qu": 471, "blade": 471, "disc": 471, "pytorch_aliblad": 471, "pytorch_lightning_bf16_cpu": 471, "tensorflow_amp": 471, "keras_amp": 471, "tensorflow_inc": 471, "keras_inc": 471, "onnx_inc_static_quant_qlinear": 471, "onnx_inc_static_quant_qdq": 471, "onnx_inc_dynamic_qu": 471, "optimum": [471, 472], "pytorch_inc_huggingface_optimum_stat": 471, "pytorch_inc_huggingface_optimum_dynam": 471, "intel_extension_for_transform": 471, "bigdl": [471, 472], "nano": [471, 472], "nano_": 471, "inc_auto": 471, "delight": 472, "announc": 472, "v": [472, 481, 485, 496, 498], "500": 472, "jupyt": [472, 474, 475, 478], "isa": 472, "adjust": [472, 488, 493], "xpu": 472, "delta": 472, "acc_delta": 472, "int8_acc": 472, "fp32_acc": 472, "ext": [474, 476, 478, 479, 480], "lab": [474, 475, 476, 478, 479], "nodej": [474, 478], "jlpm": [474, 478], "yarn": [474, 478], "npm": [474, 475, 478], "lieu": [474, 478], "labextens": [474, 475, 478], "typescript": [474, 478], "watch": [474, 478], "immedi": [474, 478, 485], "refresh": [474, 478], "browser": [474, 478], "wait": [474, 478, 481], "rebuilt": [474, 478], "easier": [474, 478, 481, 486], "symlink": [474, 478], "down": 475, "finish": 475, "enter": [475, 481], "blank": 475, "cell": 475, "gain": [475, 484, 486], "mkl": 475, "jemalloc": 475, "pip3": 475, "headless": 475, "pyproject": [476, 479], "toml": [476, 479], "twine": [476, 479], "whl": [476, 479], "dist": [476, 479], "sdist": [476, 479], "bdist_wheel": [476, 479], "deprec": [476, 479, 491, 495], "frontend": [476, 479], "login": [476, 479, 492], "repositori": [476, 479], "cut": [476, 479], "fork": [476, 479], "admin_github_token": [476, 479], "pypi_token": [476, 479], "npm_token": [476, 479], "secret": [476, 479], "panel": [476, 479, 481], "draft": [476, 479], "changelog": [476, 479, 480], "pkg": [476, 479], "bot": [476, 479], "pick": [476, 479, 482], "feedstock": [476, 479], "hatch": 479, "notabl": 480, "vscode": [480, 482], "daili": 481, "advantag": [481, 485, 487, 496], "remot": 481, "re": [481, 490], "market": 481, "uninstal": 481, "fill": [481, 492, 495, 496], "upper": 481, "sidebar": 481, "hover": 481, "track": [481, 492], "argpars": 481, "pop": 481, "diff": 481, "manifest": 482, "declar": 482, "palett": 482, "registercommand": 482, "amodio": 482, "tsl": 482, "matcher": 482, "dbaeumer": 482, "eslint": 482, "press": 482, "f5": 482, "ctrl": 482, "hello": 482, "world": 482, "breakpoint": 482, "consol": 482, "relaunch": 482, "toolbar": 482, "node_modul": 482, "viewlet": 482, "dropdown": 482, "runner": 482, "startup": 482, "bundl": 482, "multi_object": 483, "benefit": 484, "instanti": 484, "neuron": 485, "art": 485, "grown": 485, "unpreced": 485, "increasingli": 485, "crucial": 485, "stand": [485, 496], "delet": 485, "commonli": 485, "shrink": 485, "contextu": 485, "scene": 485, "haven": 485, "color": 485, "lowest": [485, 496], "formula": [485, 493], "emsp": 485, "downstream": 485, "finetun": [485, 499], "prone": 485, "co": 485, "discourag": 485, "push": [485, 490, 493], "penal": 485, "parameter": 485, "exemplifi": 485, "complement": 485, "fortieth": 485, "miss": [485, 488], "pruner2": 485, "mention": [485, 490], "readi": 485, "hesit": 485, "sst": [485, 499], "25": [485, 493, 499], "63": [485, 493, 499], "24": [485, 493, 496, 499], "35": [485, 499], "flan": 485, "t5": 485, "english": 485, "romanian": 485, "404": [485, 499], "381": 485, "yolov5": 485, "75": [485, 493, 499], "2x1": [485, 499], "801": 485, "7895": 485, "signific": [485, 486, 493], "reduct": [485, 498], "namhoon": 485, "lee": 485, "thalaiyasingam": 485, "ajanthan": 485, "philip": 485, "torr": 485, "2019": 485, "zafrir": 485, "ofir": 485, "ariel": 485, "larei": 485, "boudoukh": 485, "mosh": 485, "wasserblat": 485, "2111": 485, "05754": 485, "2021": 485, "medium": 486, "chatbot": 486, "netflix": 486, "apr": 486, "mlperf": [486, 499], "5x": 486, "heterogen": 486, "mar": 486, "busi": 486, "jan": 486, "amx": 486, "4th": [486, 488], "mleffici": 486, "dec": 486, "wechat": 486, "deepen": 486, "foundat": 486, "intellig": 486, "vmware": 486, "applianc": 486, "bitnami": 486, "nov": 486, "sota": 486, "few": [486, 496], "plug": 486, "twitter": 486, "linkedin": 486, "zone": 486, "land": 486, "gcp": 486, "pat": 486, "keynot": 486, "intelon": 486, "sep": 486, "chines": 486, "aug": 486, "purif": 486, "sacrif": 486, "jun": 486, "partner": 486, "feb": 486, "joint": 486, "bilibili": 486, "gestalt": 486, "ml": 486, "doubl": 486, "reconstruct": 486, "abound": 486, "lpot": [486, 491], "nextplatform": 486, "cern": 486, "gan": 486, "3dgan": 486, "iml": 486, "workshop": 486, "asplo": 486, "18": [486, 499], "highli": 486, "intelcaff": 486, "aris": 487, "henc": 487, "onnxrt_qoper": 487, "quant_aware_train": 487, "weight_compress": [487, 498], "initial_spars": [487, 498], "prune_typ": [487, 498], "basic_magnitud": [487, 498], "update_frequ": 487, "prune_domain": 487, "tile_pattern_1x1": 487, "invent": 488, "int4": 488, "cost": [488, 490], "On": [488, 499], "theoret": [488, 490], "zeropoint": 488, "255": [488, 493], "overflow": 488, "solv": [488, 491], "unseen": 488, "enough": 488, "peopl": 488, "mimic": 488, "fact": 488, "ultim": 488, "pain": 488, "lossi": 488, "chart": [488, 492, 494], "understand": [488, 494, 497], "philosophi": 488, "request": 488, "neither": 488, "nor": 488, "val_load": 488, "avg": 488, "themselv": 488, "ON": 489, "forc": 489, "postposttrainingquantconfig": 489, "bf16wrapper": 489, "retrac": 489, "preval": 490, "grow": 490, "demand": 490, "w8a8": 490, "trade": 490, "bottleneck": 490, "roughli": 490, "speak": 490, "capac": [490, 492], "flop": 490, "famou": 490, "approx": 490, "bmm": 490, "100x": 490, "straightforward": [490, 493], "excel": 490, "stai": [490, 493], "89": [490, 493, 499], "weightonlylinear": 490, "date": 490, "restor": 490, "qweight": 490, "wip": 490, "gptq_arg": 490, "percdamp": 490, "awq_arg": 490, "compressed_model": 490, "export_compressed_model": 490, "compression_dtyp": 490, "compression_dim": 490, "scale_dtyp": 490, "xiao": [490, 493], "guangxuan": [490, 493], "2211": [490, 493], "10438": [490, 493], "wei": [490, 493], "xiui": [490, 493], "suppress": [490, 493], "2209": [490, 493], "13325": [490, 493], "lin": 490, "ji": 490, "2306": 490, "00978": 490, "frantar": 490, "elia": 490, "site": 491, "assist": 491, "sed": 491, "your_script": 491, "backbon": 492, "interact": 492, "sigopt_experiment_id": 492, "nc": [492, 496], "suffici": 492, "ordinari": 492, "receiv": 492, "latenc": [492, 496], "8266": 492, "8372": 492, "2132": 492, "83": [492, 493, 499], "7495": 492, "8299": 492, "8294": 492, "85": [492, 493, 499], "0837": 492, "8291": 492, "4469": 492, "gigant": 493, "systemat": 493, "quantif": 493, "migrat": [493, 497], "difficulti": 493, "mathemat": 493, "allevi": 493, "coarsest": 493, "finer": [493, 496], "matric": 493, "similarli": 493, "finest": 493, "consumpt": 493, "why": [493, 494], "suppos": 493, "6839": 493, "4741": 493, "7451": 493, "9301": 493, "1742": 493, "6835": 493, "q_min": 493, "q_max": 493, "q_x": 493, "clamp_": 493, "round_": 493, "w_q": 493, "00296431384049356": 493, "59": [493, 499], "172": 493, "192": 493, "w_dq": 493, "1220": 493, "0500": 493, "1430": 493, "2570": 493, "1890": 493, "mseloss": 493, "1983354538679123": 493, "6848": 493, "4743": 493, "7440": 493, "9308": 493, "1749": 493, "385297635664756e": 493, "07": [493, 498, 499], "affect": 493, "quantize_per_channel": 493, "x_tmp": 493, "detach": 493, "keepdim": 493, "dequantize_per_channel": 493, "0029": [493, 499], "0036": 493, "162": [493, 499], "48": [493, 499], "72": [493, 499], "93": [493, 499], "207": 493, "139": 493, "6837": 493, "4734": 493, "1751": 493, "6821": 493, "637690492221736e": 493, "6376e": 493, "3852e": 493, "cdot": 493, "quantize_per_tensor_absmax": 493, "n_bit": 493, "div_": 493, "0806": 493, "7589": 493, "6038": 493, "3815": 493, "5040": 493, "7174": 493, "5444": 493, "5826": 493, "7772": 493, "5555": 493, "3740": 493, "3253": 493, "0698": 493, "1381": 493, "5972": 493, "0086": 493, "0737": 493, "8298": 493, "6883": 493, "2991": 493, "1601": 493, "6506": 493, "8246": 493, "3924": 493, "3845": 493, "8768": 493, "w_scale": 493, "x_q": 493, "x_scale": 493, "84": [493, 499], "120": 493, "0059755356051027775": 493, "119": 493, "57": [493, 499], "91": [493, 499], "006533813662827015": 493, "y_q": 493, "17509": 493, "7608": 493, "4055": 493, "16599": 493, "21020": 493, "10016": 493, "9860": 493, "22444": 493, "y_dq": 493, "6836": 493, "2970": 493, "1583": 493, "6481": 493, "8207": 493, "3911": 493, "3850": 493, "8763": 493, "though": 493, "simplic": 493, "middl": 493, "denot": 493, "fp1": 493, "fp2": 493, "subsect": [493, 498], "even": 493, "intuit": 493, "x1": [493, 496], "x2": [493, 496], "herebi": 493, "recalcul": 493, "sq": 493, "overhead": 493, "hardtanh": 493, "t5norm": 493, "llamanorm": 493, "groupnorm": 493, "lambada": 493, "sweet": 493, "spot": 493, "region": 493, "bigscienc": 493, "560m": 493, "65": [493, 499], "44": [493, 499], "66": [493, 499], "76": [493, 499], "1b7": 493, "71": [493, 499], "43": [493, 499], "67": [493, 499], "78": [493, 495, 499], "56": [493, 499], "58": [493, 499], "55": [493, 499], "3b": 493, "73": [493, 499], "69": [493, 499], "74": [493, 499], "7b1": 493, "77": [493, 499], "46": [493, 499], "17": [493, 499], "82": [493, 499], "52": [493, 499], "facebook": 493, "125m": 493, "41": [493, 499], "70": [493, 499], "94": [493, 495, 499], "79": [493, 494, 499], "60": [493, 499], "81": [493, 499], "26": [493, 499], "39": [493, 499], "68": [493, 495, 499], "eleutherai": [493, 499], "6b": [493, 499], "29": [493, 499], "96": [493, 499], "jason": 493, "emerg": 493, "transact": 493, "yvinec": 493, "edouard": 493, "proceed": 493, "cvf": 493, "winter": 493, "valuabl": 494, "instrument": 494, "writer": 494, "_pre_eval_hook": 494, "_post_eval_hook": 494, "submodul": 494, "whitelist": 494, "_recordingobserv": 494, "output_tensors_dict": 494, "current_it": 494, "get_tensor_valu": 494, "_observer_forward_hook": 494, "activation_post_process": 494, "_add_observer_": 494, "named_children": 494, "leaf": 494, "add_modul": 494, "register_forward_hook": 494, "dump_tim": 494, "summarywrit": 494, "_acc": 494, "tune_": 494, "add_graph": 494, "get_observer_dict": 494, "observer_dict": 494, "is_quant": 494, "add_histogram": 494, "shell": 494, "bind_al": 494, "logdir_spec": 494, "tune_0_acc0": 494, "tune_1": 494, "tune_1_acc0": 494, "four": 494, "baseline_acc_0": 494, "776": 494, "tune_1_acc_0": 494, "095": 494, "runs_v3": 494, "run_tuning_dump_tensor": 494, "sh": 494, "inceptionv3": 494, "bash": 494, "run_quant": 494, "topologi": 494, "inception_v3": 494, "inceptionv3_fp32_pretrained_model": 494, "nc_inceptionv3": 494, "inceptionv3_dump_tensor": 494, "poor": 494, "eightbit": 494, "disappear": 494, "centercrop": 495, "randomcrop": 495, "cropres": 495, "decodeimag": 495, "jpeg": 495, "encodejp": 495, "alignimagechannel": 495, "116": 495, "103": 495, "017": 495, "bilinearimagenet": [495, 498], "topilimag": 495, "padding_mod": 495, "border": 495, "pixel": 495, "edg": 495, "colorjitt": 495, "bright": 495, "satur": 495, "hue": 495, "jitter": 495, "tondarrai": 495, "quickli": [496, 497], "human": 496, "concret": 496, "aggress": 496, "classic": 496, "flowchart": 496, "htmllabel": 496, "td": 496, "classdef": 496, "itemstyl": 496, "cce5ff": 496, "stroke": 496, "99ccff": 496, "s1": 496, "s2": 496, "s3": 496, "s4": 496, "s5": 496, "s6": 496, "s7": 496, "nbsp": 496, "subgraphstyl": 496, "ffffff": 496, "attempt": 496, "post_training_auto_qu": 496, "trial": 496, "increment": 496, "ii": 496, "highest": 496, "spent": 496, "hawq_v2_loss": 496, "model_loss": 496, "black": 496, "compli": 496, "posterior": 496, "short": 496, "loglevel": 496, "endlessli": 496, "perspect": 496, "smbo": 496, "appl": 496, "surrog": 496, "densiti": 496, "parzen": 496, "greatest": 496, "hour": 496, "dai": 496, "next_tune_cfg": 496, "overridden": 496, "cluster": 496, "seamlessli": 496, "mpi": 496, "replic": 496, "replica": 496, "fed": 496, "synchron": 496, "mpirun": 496, "number_of_process": 496, "run_cmd": 496, "abctunestrategi": 496, "familiar": 497, "notebook": 497, "introduct": 497, "organ": 498, "logic": 498, "mobilenet_v1": 498, "40": [498, 499], "06": [498, 499], "beta_1": 498, "beta_2": 498, "epsilon": 498, "sparsecategoricalcrossentropi": 498, "sum_over_batch_s": 498, "from_logit": 498, "54": [498, 499], "19": [498, 499], "1x": 499, "platinum": 499, "8480": 499, "8ghz": 499, "ht": 499, "turbo": 499, "256gb": 499, "16x16gb": 499, "ddr5": 499, "4800": 499, "mt": 499, "bio": 499, "3a14": 499, "tel2p1": 499, "microcod": 499, "0x2b0001b0": 499, "gcc": 499, "20210514": 499, "red": 499, "hat": 499, "visit": 499, "1s4c14ins1bsthroughput": 499, "sec": 499, "2721": 499, "638": 499, "26x": 499, "23": 499, "31": 499, "2123": 499, "552": 499, "84x": 499, "resnet101": 499, "37": 499, "1477": 499, "432": 499, "42x": 499, "incept": 499, "3267": 499, "92": 499, "1266": 499, "03": 499, "58x": 499, "38": 499, "2399": 499, "1098": 499, "18x": 499, "v3": 499, "1593": 499, "508": 499, "13x": 499, "1032": 499, "249": 499, "14x": 499, "34": 499, "427": 499, "185": 499, "30x": 499, "5503": 499, "1791": 499, "62": 499, "07x": 499, "3639": 499, "1864": 499, "95x": 499, "47": 499, "1538": 499, "236": 499, "51x": 499, "vgg19": 499, "1368": 499, "196": 499, "resnetv2": 499, "1105": 499, "657": 499, "68x": 499, "716": 499, "49": 499, "369": 499, "94x": 499, "152": 499, "269": 499, "89x": 499, "densenet": 499, "121": 499, "617": 499, "498": 499, "24x": 499, "161": 499, "372": 499, "242": 499, "54x": 499, "169": 499, "496": 499, "411": 499, "21x": 499, "efficientnet": 499, "b0": 499, "748": 499, "709": 499, "05x": 499, "00": 499, "134": 499, "34x": 499, "1273": 499, "671": 499, "90x": 499, "136": 499, "53": 499, "1235": 499, "477": 499, "09": 499, "179": 499, "85x": 499, "cnn": 499, "79x": 499, "83x": 499, "156": 499, "67x": 499, "23x": 499, "173": 499, "00x": 499, "yolov3": 499, "211": 499, "41x": 499, "82x": 499, "61": 499, "49x": 499, "86": 499, "424": 499, "174": 499, "44x": 499, "29x": 499, "55612": 499, "43479": 499, "28x": 499, "1s56c1ins1bsthroughput": 499, "65x": 499, "gpt2": 499, "2716": 499, "569": 499, "77x": 499, "2683": 499, "476": 499, "64x": 499, "2349": 499, "1035": 499, "27x": 499, "930": 499, "763": 499, "262": 499, "91x": 499, "4003": 499, "1677": 499, "39x": 499, "2766": 499, "36": 499, "2643": 499, "1495": 499, "238": 499, "1372": 499, "199": 499, "88x": 499, "1457": 499, "630": 499, "31x": 499, "842": 499, "338": 499, "645": 499, "231": 499, "938": 499, "707": 499, "33x": 499, "1533": 499, "1258": 499, "22x": 499, "981": 499, "647": 499, "52x": 499, "850": 499, "444": 499, "37x": 499, "543": 499, "74x": 499, "93x": 499, "947": 499, "233": 499, "788": 499, "462": 499, "71x": 499, "15x": 499, "51958": 499, "39974": 499, "1631": 499, "662": 499, "46x": 499, "1162": 499, "330": 499, "968": 499, "334": 499, "resnest50": 499, "394": 499, "resnext101_32x8d": 499, "558": 499, "108": 499, "efficientnet_b0": 499, "703": 499, "656": 499, "efficientnet_b3": 499, "510": 499, "391": 499, "efficientnet_b7": 499, "150": 499, "55x": 499, "peleenet": 499, "857": 499, "585": 499, "yolo": 499, "160": 499, "66x": 499, "141": 499, "407": 499, "camembert": 499, "402": 499, "32x": 499, "343": 499, "804": 499, "352": 499, "17x": 499, "302": 499, "183": 499, "382": 499, "19x": 499, "35x": 499, "51": 499, "414": 499, "stsb": 499, "413": 499, "410": 499, "138": 499, "69x": 499, "385": 499, "76x": 499, "126": 499, "wikitext": 499, "reform": 499, "crime": 499, "punish": 499, "449": 499, "364": 499, "lvwerra": 499, "pegasu": 499, "samsum": 499, "openai": 499, "whisper": 499, "abeja": 499, "neox": 499, "japanes": 499, "1723": 499, "654": 499, "63x": 499, "1141": 499, "306": 499, "73x": 499, "106": 499, "1379": 499, "729": 499, "389": 499, "25x": 499, "1980": 499, "672": 499, "5032": 499, "1500": 499, "resnext101_32x16d_wsl": 499, "533": 499, "36x": 499, "556": 499, "149": 499, "1412": 499, "710": 499, "99x": 499, "1564": 499, "712": 499, "20x": 499, "1377": 499, "719": 499, "1446": 499, "06x": 499, "1579": 499, "747": 499, "11x": 499, "1508": 499, "749": 499, "01x": 499, "6950": 499, "4214": 499, "6881": 499, "4192": 499, "6563": 499, "3804": 499, "6631": 499, "3922": 499, "423": 499, "158": 499, "571": 499, "53x": 499, "598": 499, "163": 499, "594": 499, "164": 499, "62x": 499, "5473": 499, "2567": 499, "5455": 499, "2563": 499, "shufflenet": 499, "6818": 499, "3839": 499, "78x": 499, "5750": 499, "3861": 499, "googlenet": 499, "1783": 499, "1095": 499, "1755": 499, "1071": 499, "squeezenet": 499, "9918": 499, "5639": 499, "9423": 499, "5501": 499, "caffenet": 499, "3363": 499, "1015": 499, "3276": 499, "798": 499, "10x": 499, "2104": 499, "985": 499, "2054": 499, "745": 499, "zfnet": 499, "864": 499, "866": 499, "455": 499, "1802": 499, "1170": 499, "1813": 499, "1164": 499, "56x": 499, "2615": 499, "1349": 499, "2343": 499, "1322": 499, "499": 499, "1288": 499, "878": 499, "47x": 499, "1173": 499, "851": 499, "38x": 499, "1114": 499, "825": 499, "1056": 499, "792": 499, "669": 499, "140": 499, "110": 499, "yolov4": 499, "12x": 499, "duc": 499, "tini": 499, "1163": 499, "993": 499, "ultra": 499, "8501": 499, "1922": 499, "emot": 499, "ferplu": 499, "3552": 499, "3114": 499, "arcfac": 499, "246": 499, "399": 499, "226": 499, "392": 499, "223": 499, "integerop": 499, "474": 499, "222": 499, "557": 499, "963": 499, "529": 499, "603": 499, "398": 499, "187": 499, "96x": 499, "144": 499, "124": 499, "bidaf": 499, "2757": 499, "2279": 499, "lm": 499, "357": 499, "472": 499, "365": 499, "214": 499, "70x": 499, "489": 499, "212": 499, "213": 499, "61x": 499, "270": 499, "215": 499, "491": 499, "l12": 499, "h384": 499, "1051": 499, "583": 499, "80x": 499, "1076": 499, "589": 499, "896": 499, "396": 499, "753": 499, "274": 499, "210": 499, "271": 499, "l6": 499, "1124": 499, "2010": 499, "1127": 499, "401": 499, "494": 499, "electra": 499, "discrimin": 499, "1804": 499, "1154": 499, "1961": 499, "1158": 499, "mini": 499, "4986": 499, "3444": 499, "45x": 499, "5603": 499, "3320": 499, "bart": 499, "deberta": 499, "147": 499, "170": 499, "16x": 499, "spanbert": 499, "multilingu": 499, "159": 499, "distilgpt2": 499, "layoutlm": 499, "funsd": 499, "50x": 499, "layoutlmv3": 499, "fcn": 499, "taskdataset": 499, "accuracyspars": 499, "ratiospars": 499, "commentsbalancedor": 499, "unbalanc": 499, "answeringsquad": 499, "87f1": 499, "momentumunbalanc": 499, "momentumbalanc": 499, "90f1": 499, "59f1": 499, "23f1": 499, "classificationmrpc": 499, "52f1": 499, "26f1": 499, "classificationsst": 499, "61accuraci": 499, "recognitionimagenet": 499, "95top1": 499, "v5s6": 499, "detectioncoco": 499, "ap0": 499, "6ap0": 499, "393": 499, "584": 499, "34f1": 499, "lassounbalanc": 499, "classificationmnli": 499, "mm": 499, "allbalanc": 499, "32accuraci": 499, "sensitivitybalanc": 499, "classificationqqp": 499, "classificationqnli": 499, "54accuraci": 499, "em": 499, "mobilenetv2": 499, "7965": 499, "wideresnet40": 499, "9522": 499, "8178": 499, "0213": 499, "8235": 499, "027": 499, "5494": 499, "7153": 499, "5540": 499, "0046": 499, "5523": 499, "vgg": 499, "bn": 499, "7022": 499, "7415": 499, "7025": 499, "0003": 499, "6739": 499, "7399": 499, "6845": 499, "0106": 499, "blendcnn": 499, "7034": 499, "8382": 499, "bilstm": 499, "8314": 499, "9403": 499, "9048": 499, "0734": 499, "7323": 499, "8256": 499, "8084": 499, "8814": 499, "7442": 499, "8371": 499, "0119": 499, "0115": 499, "tinybert": 499, "8018": 499, "8044": 499, "8363": 499, "8411": 499, "8025": 499, "8074": 499, "0007": 499, "0030": 499, "8626": 499, "8213": 499, "9091": 499, "8782": 499, "8684": 499, "8259": 499, "0058": 499, "distilroberta": 499, "6057": 499, "6455": 499, "6187": 499, "0130": 499, "c6i": 499, "2xlarg": 499, "c6a": 499, "c6g": 499, "a100cuda": 499, "executionprovid": 499}, "objects": {"": [[0, 0, 0, "-", "block_mask"], [341, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[2, 0, 0, "-", "adaptor"], [167, 0, 0, "-", "algorithm"], [170, 0, 0, "-", "benchmark"], [178, 0, 0, "-", "compression"], [206, 0, 0, "-", "conf"], [208, 0, 0, "-", "config"], [209, 0, 0, "-", "contrib"], [234, 0, 0, "-", "data"], [288, 0, 0, "-", "experimental"], [348, 0, 0, "-", "metric"], [350, 0, 0, "-", "mix_precision"], [352, 0, 0, "-", "model"], [360, 0, 0, "-", "objective"], [361, 0, 0, "-", "profiling"], [383, 0, 0, "-", "quantization"], [391, 0, 0, "-", "strategy"], [403, 0, 0, "-", "template"], [404, 0, 0, "-", "training"], [408, 0, 0, "-", "utils"], [417, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[1, 0, 0, "-", "adaptor"], [3, 0, 0, "-", "keras"], [7, 0, 0, "-", "keras_utils"], [11, 0, 0, "-", "mxnet"], [12, 0, 0, "-", "mxnet_utils"], [14, 0, 0, "-", "onnxrt"], [17, 0, 0, "-", "ox_utils"], [44, 0, 0, "-", "pytorch"], [45, 0, 0, "-", "query"], [46, 0, 0, "-", "tensorflow"], [110, 0, 0, "-", "tf_utils"], [151, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[1, 1, 1, "", "Adaptor"], [1, 2, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.keras": [[3, 1, 1, "", "KerasAdaptor"], [3, 1, 1, "", "KerasQuery"]], "neural_compressor.adaptor.keras_utils": [[4, 0, 0, "-", "conv2d"], [5, 0, 0, "-", "dense"], [6, 0, 0, "-", "depthwise_conv2d"], [8, 0, 0, "-", "pool2d"], [9, 0, 0, "-", "quantizer"], [10, 0, 0, "-", "separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, 1, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet_utils": [[13, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, 1, 1, "", "CalibCollector"], [13, 1, 1, "", "CalibData"], [13, 1, 1, "", "CollectorBase"], [13, 1, 1, "", "DataIterLoader"], [13, 1, 1, "", "DataLoaderWrap"], [13, 1, 1, "", "NameCollector"], [13, 1, 1, "", "OpType"], [13, 1, 1, "", "TensorCollector"], [13, 2, 1, "", "amp_convert"], [13, 2, 1, "", "calib_model"], [13, 2, 1, "", "check_mx_version"], [13, 2, 1, "", "combine_capabilities"], [13, 2, 1, "", "create_data_example"], [13, 2, 1, "", "distribute_calib_tensors"], [13, 2, 1, "", "ensure_list"], [13, 2, 1, "", "fuse"], [13, 2, 1, "", "get_framework_name"], [13, 2, 1, "", "is_model_quantized"], [13, 2, 1, "", "isiterable"], [13, 2, 1, "", "make_module"], [13, 2, 1, "", "make_nc_model"], [13, 2, 1, "", "make_symbol_block"], [13, 2, 1, "", "ndarray_to_device"], [13, 2, 1, "", "parse_tune_config"], [13, 2, 1, "", "prepare_dataloader"], [13, 2, 1, "", "prepare_model"], [13, 2, 1, "", "prepare_model_data"], [13, 2, 1, "", "quantize_sym_model"], [13, 2, 1, "", "query_quantizable_nodes"], [13, 2, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[14, 1, 1, "", "ONNXRT_IntegerOpsAdaptor"], [14, 1, 1, "", "ONNXRT_QDQAdaptor"], [14, 1, 1, "", "ONNXRT_QLinearOpsAdaptor"], [14, 1, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.ox_utils": [[15, 0, 0, "-", "calibration"], [16, 0, 0, "-", "calibrator"], [29, 0, 0, "-", "operators"], [41, 0, 0, "-", "quantizer"], [42, 0, 0, "-", "smooth_quant"], [43, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, 1, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, 1, 1, "", "CalibratorBase"], [16, 1, 1, "", "HistogramCollector"], [16, 1, 1, "", "KLCalibrator"], [16, 1, 1, "", "MinMaxCalibrator"], [16, 1, 1, "", "PercentileCalibrator"], [16, 2, 1, "", "calib_registry"], [16, 2, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[18, 0, 0, "-", "activation"], [19, 0, 0, "-", "argmax"], [20, 0, 0, "-", "attention"], [21, 0, 0, "-", "binary_op"], [22, 0, 0, "-", "concat"], [23, 0, 0, "-", "conv"], [24, 0, 0, "-", "direct_q8"], [25, 0, 0, "-", "embed_layernorm"], [26, 0, 0, "-", "gather"], [27, 0, 0, "-", "gavgpool"], [28, 0, 0, "-", "gemm"], [30, 0, 0, "-", "lstm"], [31, 0, 0, "-", "matmul"], [32, 0, 0, "-", "maxpool"], [33, 0, 0, "-", "norm"], [34, 0, 0, "-", "ops"], [35, 0, 0, "-", "pad"], [36, 0, 0, "-", "pooling"], [37, 0, 0, "-", "reduce"], [38, 0, 0, "-", "resize"], [39, 0, 0, "-", "split"], [40, 0, 0, "-", "unary_op"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, 1, 1, "", "ActivationOperator"], [18, 1, 1, "", "Float16ActivationOperator"], [18, 1, 1, "", "QActivationOperator"], [18, 1, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, 1, 1, "", "ArgMaxOperator"], [19, 1, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, 1, 1, "", "AttentionOperator"], [20, 1, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, 1, 1, "", "BinaryOperator"], [21, 1, 1, "", "Float16BinaryOperator"], [21, 1, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, 1, 1, "", "ConcatOperator"], [22, 1, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, 1, 1, "", "ConvOperator"], [23, 1, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, 1, 1, "", "Direct8BitOperator"], [24, 1, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, 1, 1, "", "EmbedLayerNormalizationOperator"], [25, 1, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, 1, 1, "", "GatherOperator"], [26, 1, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, 1, 1, "", "GlobalAveragePoolOperator"], [27, 1, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, 1, 1, "", "GemmOperator"], [28, 1, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, 1, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, 1, 1, "", "FusedMatMulOperator"], [31, 1, 1, "", "MatMulOperator"], [31, 1, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, 1, 1, "", "MaxPoolOperator"], [32, 1, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, 1, 1, "", "BatchNormalizationOperator"], [33, 1, 1, "", "NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, 1, 1, "", "Operator"], [34, 1, 1, "", "QOperator"], [34, 2, 1, "", "op_registry"], [34, 2, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, 1, 1, "", "PadOperator"], [35, 1, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, 1, 1, "", "PoolOperator"], [36, 1, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, 1, 1, "", "ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, 1, 1, "", "QResizeOperator"], [38, 1, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, 1, 1, "", "QSplitOperator"], [39, 1, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, 1, 1, "", "UnaryOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, 1, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, 1, 1, "", "ORTSmoothQuant"], [42, 2, 1, "", "get_quant_dequant_output"], [42, 2, 1, "", "make_sub_graph"], [42, 2, 1, "", "quant_dequant_data"]], "neural_compressor.adaptor.ox_utils.util": [[43, 1, 1, "", "QuantFormat"], [43, 1, 1, "", "QuantType"], [43, 1, 1, "", "QuantizationMode"], [43, 1, 1, "", "QuantizedInitializer"], [43, 1, 1, "", "QuantizedValue"], [43, 1, 1, "", "QuantizedValueType"], [43, 1, 1, "", "ValueInfo"], [43, 2, 1, "", "attribute_to_kwarg"], [43, 2, 1, "", "calculate_scale_zp"], [43, 2, 1, "", "cast_tensor"], [43, 2, 1, "", "collate_preds"], [43, 2, 1, "", "dequantize_data"], [43, 2, 1, "", "dequantize_data_with_scale_zero"], [43, 2, 1, "", "dtype_to_name"], [43, 2, 1, "", "find_by_name"], [43, 2, 1, "", "float_to_bfloat16"], [43, 2, 1, "", "float_to_float16"], [43, 2, 1, "", "is_B_transposed"], [43, 2, 1, "", "make_dquant_node"], [43, 2, 1, "", "make_quant_node"], [43, 2, 1, "", "quantize_data"], [43, 2, 1, "", "quantize_data_per_channel"], [43, 2, 1, "", "quantize_data_with_scale_zero"], [43, 2, 1, "", "quantize_nparray"], [43, 2, 1, "", "remove_init_from_model_input"], [43, 2, 1, "", "split_shared_bias"], [43, 2, 1, "", "to_numpy"], [43, 2, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.pytorch": [[44, 1, 1, "", "PyTorchAdaptor"], [44, 1, 1, "", "PyTorchQuery"], [44, 1, 1, "", "PyTorchWeightOnlyAdaptor"], [44, 1, 1, "", "PyTorch_FXAdaptor"], [44, 1, 1, "", "PyTorch_IPEXAdaptor"], [44, 1, 1, "", "TemplateAdaptor"], [44, 2, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.query": [[45, 1, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.tensorflow": [[46, 1, 1, "", "TensorFlowAdaptor"], [46, 1, 1, "", "TensorflowQuery"], [46, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[47, 0, 0, "-", "graph_converter"], [48, 0, 0, "-", "graph_converter_without_calib"], [86, 0, 0, "-", "graph_rewriter"], [109, 0, 0, "-", "graph_util"], [111, 0, 0, "-", "quantize_graph"], [138, 0, 0, "-", "quantize_graph_common"], [139, 0, 0, "-", "smooth_quant_calibration"], [140, 0, 0, "-", "smooth_quant_scaler"], [141, 0, 0, "-", "tf2onnx_converter"], [144, 0, 0, "-", "transform_graph"], [147, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, 1, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[50, 0, 0, "-", "bf16"], [75, 0, 0, "-", "generic"], [85, 0, 0, "-", "graph_base"], [94, 0, 0, "-", "int8"], [100, 0, 0, "-", "onnx"], [105, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[49, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, 1, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[51, 0, 0, "-", "convert_add_to_biasadd"], [52, 0, 0, "-", "convert_layout"], [53, 0, 0, "-", "convert_leakyrelu"], [54, 0, 0, "-", "convert_nan_to_random"], [55, 0, 0, "-", "convert_placeholder_to_const"], [56, 0, 0, "-", "dequantize_cast_optimizer"], [57, 0, 0, "-", "dilated_contraction"], [58, 0, 0, "-", "dummy_biasadd"], [59, 0, 0, "-", "expanddims_optimizer"], [60, 0, 0, "-", "fetch_weight_from_reshape"], [61, 0, 0, "-", "fold_batch_norm"], [62, 0, 0, "-", "fold_constant"], [63, 0, 0, "-", "fuse_biasadd_add"], [64, 0, 0, "-", "fuse_column_wise_mul"], [65, 0, 0, "-", "fuse_conv_with_math"], [66, 0, 0, "-", "fuse_decomposed_bn"], [67, 0, 0, "-", "fuse_decomposed_in"], [68, 0, 0, "-", "fuse_gelu"], [69, 0, 0, "-", "fuse_layer_norm"], [70, 0, 0, "-", "fuse_pad_with_conv"], [71, 0, 0, "-", "fuse_pad_with_fp32_conv"], [72, 0, 0, "-", "fuse_reshape_transpose"], [73, 0, 0, "-", "graph_cse_optimizer"], [74, 0, 0, "-", "grappler_pass"], [76, 0, 0, "-", "insert_print_node"], [77, 0, 0, "-", "move_squeeze_after_relu"], [78, 0, 0, "-", "pre_optimize"], [79, 0, 0, "-", "remove_training_nodes"], [80, 0, 0, "-", "rename_batch_norm"], [81, 0, 0, "-", "split_shared_input"], [82, 0, 0, "-", "strip_equivalent_nodes"], [83, 0, 0, "-", "strip_unused_nodes"], [84, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, 1, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, 1, 1, "", "FuseDecomposedBNOptimizer"], [66, 2, 1, "", "bypass_reshape"], [66, 2, 1, "", "get_const_dim_count"], [66, 2, 1, "", "node_from_map"], [66, 2, 1, "", "node_name_from_input"], [66, 2, 1, "", "valid_reshape_inputs"], [66, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, 1, 1, "", "FuseDecomposedINOptimizer"], [67, 2, 1, "", "bypass_reshape"], [67, 2, 1, "", "get_const_dim_count"], [67, 2, 1, "", "node_from_map"], [67, 2, 1, "", "node_name_from_input"], [67, 2, 1, "", "valid_reshape_inputs"], [67, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, 1, 1, "", "FuseLayerNormOptimizer"], [69, 2, 1, "", "node_from_map"], [69, 2, 1, "", "node_name_from_input"], [69, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, 1, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[87, 0, 0, "-", "freeze_fake_quant"], [88, 0, 0, "-", "freeze_value"], [89, 0, 0, "-", "freeze_value_without_calib"], [90, 0, 0, "-", "fuse_conv_redundant_dequantize"], [91, 0, 0, "-", "fuse_conv_requantize"], [92, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [93, 0, 0, "-", "fuse_matmul_requantize"], [95, 0, 0, "-", "meta_op_optimizer"], [96, 0, 0, "-", "post_hostconst_converter"], [97, 0, 0, "-", "post_quantized_op_cse"], [98, 0, 0, "-", "rnn_convert"], [99, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [93, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [93, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [93, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, 0, 0, "-", "onnx_graph"], [102, 0, 0, "-", "onnx_node"], [103, 0, 0, "-", "onnx_schema"], [104, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, 1, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, 1, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, 1, 1, "", "OnnxOpSchema"], [103, 2, 1, "", "get_max_supported_opset_version"], [103, 2, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, 1, 1, "", "SeqType"], [104, 2, 1, "", "add_port_to_name"], [104, 2, 1, "", "are_shapes_equal"], [104, 2, 1, "", "assert_error"], [104, 2, 1, "", "compute_const_folding_using_tf"], [104, 2, 1, "", "convert_tensorflow_tensor_to_onnx"], [104, 2, 1, "", "find_opset"], [104, 2, 1, "", "get_index_from_strided_slice_of_shape"], [104, 2, 1, "", "get_subgraphs_from_onnx"], [104, 2, 1, "", "get_tensorflow_node_attr"], [104, 2, 1, "", "get_tensorflow_node_shape_attr"], [104, 2, 1, "", "get_tensorflow_tensor_data"], [104, 2, 1, "", "get_tensorflow_tensor_shape"], [104, 2, 1, "", "infer_onnx_shape_dtype"], [104, 2, 1, "", "initialize_name_counter"], [104, 2, 1, "", "is_list_or_tuple"], [104, 2, 1, "", "is_onnx_domain"], [104, 2, 1, "", "make_onnx_inputs_outputs"], [104, 2, 1, "", "make_onnx_shape"], [104, 2, 1, "", "map_numpy_to_onnx_dtype"], [104, 2, 1, "", "map_onnx_to_numpy_type"], [104, 2, 1, "", "map_tensorflow_dtype"], [104, 2, 1, "", "read_tensorflow_node_attrs"], [104, 2, 1, "", "save_protobuf"], [104, 2, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, 0, 0, "-", "insert_qdq_pattern"], [107, 0, 0, "-", "merge_duplicated_qdq"], [108, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, 1, 1, "", "GraphAnalyzer"], [109, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[113, 0, 0, "-", "qat"], [129, 0, 0, "-", "qdq"], [131, 0, 0, "-", "quantize_graph_base"], [132, 0, 0, "-", "quantize_graph_bn"], [133, 0, 0, "-", "quantize_graph_concatv2"], [134, 0, 0, "-", "quantize_graph_conv"], [135, 0, 0, "-", "quantize_graph_for_intel_cpu"], [136, 0, 0, "-", "quantize_graph_matmul"], [137, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[112, 0, 0, "-", "fake_quantize"], [114, 0, 0, "-", "quantize_config"], [115, 0, 0, "-", "quantize_helper"], [116, 0, 0, "-", "quantize_layers"], [121, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, 1, 1, "", "FakeQuantize"], [112, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, 1, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, 2, 1, "", "init_quantize_config"], [115, 2, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, 0, 0, "-", "optimize_layer"], [118, 0, 0, "-", "quantize_layer_add"], [119, 0, 0, "-", "quantize_layer_base"], [120, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, 1, 1, "", "QuantizeWrapper"], [121, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[122, 0, 0, "-", "fuse_qdq_bn"], [123, 0, 0, "-", "fuse_qdq_concatv2"], [124, 0, 0, "-", "fuse_qdq_conv"], [125, 0, 0, "-", "fuse_qdq_deconv"], [126, 0, 0, "-", "fuse_qdq_in"], [127, 0, 0, "-", "fuse_qdq_matmul"], [128, 0, 0, "-", "fuse_qdq_pooling"], [130, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, 1, 1, "", "QuantizeGraphBase"], [131, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[139, 1, 1, "", "SmoothQuantCalibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[140, 1, 1, "", "SmoothQuantScaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[141, 1, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[142, 0, 0, "-", "bias_correction"], [143, 0, 0, "-", "graph_transform_base"], [145, 0, 0, "-", "insert_logging"], [146, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[142, 1, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[143, 1, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[145, 1, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[146, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[147, 2, 1, "", "collate_tf_preds"], [147, 2, 1, "", "disable_random"], [147, 2, 1, "", "fix_ref_type_of_graph_def"], [147, 2, 1, "", "generate_feed_dict"], [147, 2, 1, "", "get_estimator_graph"], [147, 2, 1, "", "get_graph_def"], [147, 2, 1, "", "get_input_output_node_names"], [147, 2, 1, "", "get_model_input_shape"], [147, 2, 1, "", "get_tensor_by_name"], [147, 2, 1, "", "get_tensor_val_from_graph_node"], [147, 2, 1, "", "get_weight_from_input_tensor"], [147, 2, 1, "", "int8_node_name_reverse"], [147, 2, 1, "", "is_ckpt_format"], [147, 2, 1, "", "is_saved_model_format"], [147, 2, 1, "", "iterator_sess_run"], [147, 2, 1, "", "read_graph"], [147, 2, 1, "", "strip_equivalent_nodes"], [147, 2, 1, "", "strip_unused_nodes"], [147, 2, 1, "", "tf_diagnosis_helper"], [147, 2, 1, "", "version1_eq_version2"], [147, 2, 1, "", "version1_gt_version2"], [147, 2, 1, "", "version1_gte_version2"], [147, 2, 1, "", "version1_lt_version2"], [147, 2, 1, "", "version1_lte_version2"], [147, 2, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[148, 0, 0, "-", "bf16_convert"], [149, 0, 0, "-", "gptq"], [150, 0, 0, "-", "hawq_metric"], [152, 0, 0, "-", "layer_wise_quant"], [157, 0, 0, "-", "mixed_precision"], [158, 0, 0, "-", "model_wrapper"], [159, 0, 0, "-", "pattern_detector"], [160, 0, 0, "-", "smooth_quant"], [161, 0, 0, "-", "symbolic_trace"], [162, 0, 0, "-", "teq"], [163, 0, 0, "-", "util"], [164, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[148, 1, 1, "", "BF16ModuleWrapper"], [148, 2, 1, "", "Convert"], [148, 2, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.gptq": [[149, 1, 1, "", "GPTQ"], [149, 1, 1, "", "GPTQuantizer"], [149, 2, 1, "", "find_layers"], [149, 2, 1, "", "find_layers_name"], [149, 2, 1, "", "is_leaf"], [149, 2, 1, "", "log_quantizable_layers_per_transformer"], [149, 2, 1, "", "quantize"], [149, 2, 1, "", "trace_gptq_target_blocks"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[150, 1, 1, "", "HessianTrace"], [150, 1, 1, "", "Node_collector"], [150, 2, 1, "", "compare_weights"], [150, 2, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[153, 0, 0, "-", "modified_pickle"], [154, 0, 0, "-", "quantize"], [155, 0, 0, "-", "torch_load"], [156, 0, 0, "-", "utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[153, 3, 1, "", "PickleError"], [153, 3, 1, "", "PicklingError"], [153, 3, 1, "", "UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[154, 1, 1, "", "LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[155, 2, 1, "", "load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[156, 2, 1, "", "dowload_hf_model"], [156, 2, 1, "", "get_children"], [156, 2, 1, "", "get_named_children"], [156, 2, 1, "", "get_super_module_by_name"], [156, 2, 1, "", "load_layer_wise_quantized_model"], [156, 2, 1, "", "load_shell"], [156, 2, 1, "", "load_tensor"], [156, 2, 1, "", "load_tensor_from_shard"], [156, 2, 1, "", "update_module"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[157, 2, 1, "", "ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[158, 1, 1, "", "FakeAffineTensorQuantFunction"], [158, 1, 1, "", "TEQLinearFakeQuant"], [158, 1, 1, "", "TEQMulLinear"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[159, 1, 1, "", "TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[160, 1, 1, "", "GraphTrace"], [160, 1, 1, "", "TorchSmoothQuant"], [160, 2, 1, "", "get_module"], [160, 2, 1, "", "set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[161, 2, 1, "", "symbolic_trace"], [161, 2, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.teq": [[162, 1, 1, "", "TEQuantizer"]], "neural_compressor.adaptor.torch_utils.util": [[163, 2, 1, "", "append_attr"], [163, 2, 1, "", "auto_copy"], [163, 2, 1, "", "calculate_quant_min_max"], [163, 2, 1, "", "check_cfg_and_qconfig"], [163, 2, 1, "", "collate_torch_preds"], [163, 2, 1, "", "collect_weight_info"], [163, 2, 1, "", "fetch_module"], [163, 2, 1, "", "generate_activation_observer"], [163, 2, 1, "", "get_depth"], [163, 2, 1, "", "get_dict_at_depth"], [163, 2, 1, "", "get_element_under_depth"], [163, 2, 1, "", "get_embedding_contiguous"], [163, 2, 1, "", "get_example_input"], [163, 2, 1, "", "get_fallback_order"], [163, 2, 1, "", "get_mse_order_per_fp32"], [163, 2, 1, "", "get_mse_order_per_int8"], [163, 2, 1, "", "get_op_type_by_name"], [163, 2, 1, "", "get_quantizable_ops_from_cfgs"], [163, 2, 1, "", "get_torch_version"], [163, 2, 1, "", "input2tuple"], [163, 2, 1, "", "is_fused_module"], [163, 2, 1, "", "match_datatype_pattern"], [163, 2, 1, "", "paser_cfgs"], [163, 2, 1, "", "set_module"], [163, 2, 1, "", "simple_inference"], [163, 2, 1, "", "update_sq_scale"]], "neural_compressor.adaptor.torch_utils.weight_only": [[164, 2, 1, "", "awq_quantize"], [164, 2, 1, "", "get_module_input_output"], [164, 2, 1, "", "gptq_quantize"], [164, 2, 1, "", "qdq_weight_actor"], [164, 2, 1, "", "qdq_weight_asym"], [164, 2, 1, "", "qdq_weight_sym"], [164, 2, 1, "", "quant_weight"], [164, 2, 1, "", "quant_weight_w_scale"], [164, 2, 1, "", "rtn_quantize"], [164, 2, 1, "", "teq_quantize"]], "neural_compressor.algorithm": [[165, 0, 0, "-", "algorithm"], [166, 0, 0, "-", "fast_bias_correction"], [168, 0, 0, "-", "smooth_quant"], [169, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[165, 1, 1, "", "ALGORITHMS"], [165, 1, 1, "", "Algorithm"], [165, 1, 1, "", "AlgorithmScheduler"], [165, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[166, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[168, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[169, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[170, 2, 1, "", "benchmark_with_raw_cmd"], [170, 2, 1, "", "call_one"], [170, 2, 1, "", "config_instance"], [170, 2, 1, "", "fit"], [170, 2, 1, "", "generate_prefix"], [170, 2, 1, "", "get_architecture"], [170, 2, 1, "", "get_bounded_threads"], [170, 2, 1, "", "get_core_ids"], [170, 2, 1, "", "get_physical_ids"], [170, 2, 1, "", "get_threads"], [170, 2, 1, "", "get_threads_per_core"], [170, 2, 1, "", "profile"], [170, 2, 1, "", "run_instance"], [170, 2, 1, "", "set_all_env_var"], [170, 2, 1, "", "set_env_var"], [170, 2, 1, "", "summary_benchmark"]], "neural_compressor.compression": [[171, 0, 0, "-", "callbacks"], [173, 0, 0, "-", "distillation"], [174, 0, 0, "-", "hpo"], [180, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[171, 1, 1, "", "BaseCallbacks"], [171, 1, 1, "", "DistillationCallbacks"], [171, 1, 1, "", "PruningCallbacks"], [171, 1, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[171, 4, 1, "", "_epoch_ran"], [171, 4, 1, "", "best_model"], [171, 4, 1, "", "best_score"], [171, 4, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[172, 0, 0, "-", "criterions"]], "neural_compressor.compression.distillation.criterions": [[172, 1, 1, "", "Criterions"], [172, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [172, 1, 1, "", "KnowledgeDistillationFramework"], [172, 1, 1, "", "KnowledgeDistillationLoss"], [172, 1, 1, "", "PyTorchCriterions"], [172, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [172, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [172, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [172, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [172, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [172, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [172, 1, 1, "", "SelfKnowledgeDistillationLoss"], [172, 1, 1, "", "TensorflowCriterions"], [172, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [172, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [172, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [172, 2, 1, "", "criterion_registry"]], "neural_compressor.compression.hpo": [[175, 0, 0, "-", "sa_optimizer"], [176, 0, 0, "-", "search_algorithms"], [177, 0, 0, "-", "search_space"]], "neural_compressor.compression.hpo.search_algorithms": [[176, 1, 1, "", "BayesianOptimizationSearcher"], [176, 1, 1, "", "GridSearcher"], [176, 1, 1, "", "RandomSearcher"], [176, 1, 1, "", "Searcher"], [176, 1, 1, "", "XgbSearcher"], [176, 2, 1, "", "register_searcher"]], "neural_compressor.compression.hpo.search_space": [[177, 1, 1, "", "BaseSearchSpace"], [177, 1, 1, "", "ContinuousSearchSpace"], [177, 1, 1, "", "DiscreteSearchSpace"], [177, 1, 1, "", "SearchSpace"], [177, 2, 1, "", "register_searchspace"]], "neural_compressor.compression.pruner": [[179, 0, 0, "-", "criteria"], [182, 0, 0, "-", "model_slim"], [186, 0, 0, "-", "patterns"], [180, 2, 1, "", "prepare_pruning"], [193, 0, 0, "-", "pruners"], [199, 0, 0, "-", "pruning"], [200, 0, 0, "-", "regs"], [180, 2, 1, "", "save"], [201, 0, 0, "-", "schedulers"], [202, 0, 0, "-", "tf_criteria"], [203, 0, 0, "-", "utils"]], "neural_compressor.compression.pruner.criteria": [[179, 1, 1, "", "BlockMaskCriterion"], [179, 1, 1, "", "GradientCriterion"], [179, 1, 1, "", "MagnitudeCriterion"], [179, 1, 1, "", "PruningCriterion"], [179, 1, 1, "", "RetrainFreeCriterion"], [179, 1, 1, "", "SnipCriterion"], [179, 1, 1, "", "SnipMomentumCriterion"], [179, 2, 1, "", "get_criterion"], [179, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.BlockMaskCriterion": [[179, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[179, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[179, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[179, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[179, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[179, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[179, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.model_slim": [[181, 0, 0, "-", "auto_slim"], [183, 0, 0, "-", "pattern_analyzer"], [184, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[181, 2, 1, "", "generate_ffn2_pruning_config"], [181, 2, 1, "", "generate_mha_pruning_config"], [181, 2, 1, "", "model_slim"], [181, 2, 1, "", "model_slim_ffn2"], [181, 2, 1, "", "model_slim_mha"], [181, 2, 1, "", "parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[183, 1, 1, "", "ClassifierHeadSearcher"], [183, 1, 1, "", "ClassifierHeadSearcherTF"], [183, 1, 1, "", "JitBasicSearcher"], [183, 1, 1, "", "Linear2LinearSearcher"], [183, 1, 1, "", "RecipeSearcher"], [183, 1, 1, "", "SelfMHASearcher"], [183, 2, 1, "", "get_attributes"], [183, 2, 1, "", "get_common_module"], [183, 2, 1, "", "print_iterables"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher": [[183, 4, 1, "", "device"], [183, 4, 1, "", "flatten_static_graph"], [183, 4, 1, "", "model"], [183, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF": [[183, 4, 1, "", "device"], [183, 4, 1, "", "flatten_static_graph"], [183, 4, 1, "", "model"], [183, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[183, 4, 1, "", "device"], [183, 4, 1, "", "flatten_static_graph"], [183, 4, 1, "", "model"], [183, 4, 1, "", "searching_results"], [183, 4, 1, "", "static_graph"], [183, 4, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[183, 4, 1, "", "current_pattern"], [183, 4, 1, "", "device"], [183, 4, 1, "", "flatten_static_graph"], [183, 4, 1, "", "model"], [183, 4, 1, "", "searching_results"], [183, 4, 1, "", "static_graph"], [183, 4, 1, "", "target_layers"], [183, 4, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[183, 4, 1, "", "model"], [183, 4, 1, "", "recipe"], [183, 4, 1, "", "searching_results"], [183, 4, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[183, 4, 1, "", "device"], [183, 4, 1, "", "flatten_static_graph"], [183, 4, 1, "", "model"], [183, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[184, 1, 1, "", "LinearCompression"], [184, 1, 1, "", "LinearCompressionIterator"], [184, 1, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[184, 4, 1, "", "device"], [184, 4, 1, "", "layer_1"], [184, 4, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[184, 4, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[185, 0, 0, "-", "base"], [186, 2, 1, "", "get_pattern"], [187, 0, 0, "-", "mha"], [188, 0, 0, "-", "ninm"], [189, 0, 0, "-", "nxm"]], "neural_compressor.compression.pruner.patterns.base": [[185, 1, 1, "", "BasePattern"], [185, 1, 1, "", "KerasBasePattern"], [185, 1, 1, "", "PytorchBasePattern"], [185, 2, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.base.BasePattern": [[185, 4, 1, "", "config"], [185, 4, 1, "", "invalid_layers"], [185, 4, 1, "", "is_global"], [185, 4, 1, "", "keep_mask_layers"], [185, 4, 1, "", "max_sparsity_ratio_per_op"], [185, 4, 1, "", "min_sparsity_ratio_per_op"], [185, 4, 1, "", "modules"], [185, 4, 1, "", "pattern"], [185, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.KerasBasePattern": [[185, 4, 1, "", "config"], [185, 4, 1, "", "invalid_layers"], [185, 4, 1, "", "is_global"], [185, 4, 1, "", "keep_mask_layers"], [185, 4, 1, "", "max_sparsity_ratio_per_op"], [185, 4, 1, "", "min_sparsity_ratio_per_op"], [185, 4, 1, "", "modules"], [185, 4, 1, "", "pattern"], [185, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern": [[185, 4, 1, "", "config"], [185, 4, 1, "", "invalid_layers"], [185, 4, 1, "", "is_global"], [185, 4, 1, "", "keep_mask_layers"], [185, 4, 1, "", "max_sparsity_ratio_per_op"], [185, 4, 1, "", "min_sparsity_ratio_per_op"], [185, 4, 1, "", "modules"], [185, 4, 1, "", "pattern"], [185, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.mha": [[187, 1, 1, "", "PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha.PatternMHA": [[187, 4, 1, "", "M"], [187, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.ninm": [[188, 1, 1, "", "PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM": [[188, 4, 1, "", "M"], [188, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.nxm": [[189, 1, 1, "", "KerasPatternNxM"], [189, 1, 1, "", "PytorchPatternNxM"]], "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM": [[189, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM": [[189, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[190, 0, 0, "-", "base"], [191, 0, 0, "-", "basic"], [192, 0, 0, "-", "block_mask"], [193, 2, 1, "", "get_pruner"], [194, 0, 0, "-", "mha"], [193, 2, 1, "", "parse_valid_pruner_types"], [195, 0, 0, "-", "pattern_lock"], [196, 0, 0, "-", "progressive"], [197, 0, 0, "-", "retrain_free"], [198, 0, 0, "-", "sparse_gpt"]], "neural_compressor.compression.pruner.pruners.base": [[190, 1, 1, "", "BasePruner"], [190, 1, 1, "", "KerasBasePruner"], [190, 1, 1, "", "PytorchBasePruner"], [190, 2, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.base.BasePruner": [[190, 4, 1, "", "config"], [190, 4, 1, "", "current_sparsity_ratio"], [190, 4, 1, "", "end_step"], [190, 4, 1, "", "global_step"], [190, 4, 1, "", "masks"], [190, 4, 1, "", "max_sparsity_ratio_per_op"], [190, 4, 1, "", "modules"], [190, 4, 1, "", "pattern"], [190, 4, 1, "", "pruning_frequency"], [190, 4, 1, "", "scheduler"], [190, 4, 1, "", "scores"], [190, 4, 1, "", "start_step"], [190, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.KerasBasePruner": [[190, 4, 1, "", "config"], [190, 4, 1, "", "current_sparsity_ratio"], [190, 4, 1, "", "end_step"], [190, 4, 1, "", "global_step"], [190, 4, 1, "", "masks"], [190, 4, 1, "", "max_sparsity_ratio_per_op"], [190, 4, 1, "", "modules"], [190, 4, 1, "", "pattern"], [190, 4, 1, "", "pruning_frequency"], [190, 4, 1, "", "scheduler"], [190, 4, 1, "", "scores"], [190, 4, 1, "", "start_step"], [190, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner": [[190, 4, 1, "", "config"], [190, 4, 1, "", "current_sparsity_ratio"], [190, 4, 1, "", "end_step"], [190, 4, 1, "", "global_step"], [190, 4, 1, "", "masks"], [190, 4, 1, "", "max_sparsity_ratio_per_op"], [190, 4, 1, "", "modules"], [190, 4, 1, "", "pattern"], [190, 4, 1, "", "pruning_frequency"], [190, 4, 1, "", "scheduler"], [190, 4, 1, "", "scores"], [190, 4, 1, "", "start_step"], [190, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.basic": [[191, 1, 1, "", "KerasBasicPruner"], [191, 1, 1, "", "PytorchBasicPruner"]], "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner": [[191, 4, 1, "", "criterion"], [191, 4, 1, "", "pattern"], [191, 4, 1, "", "reg"], [191, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner": [[191, 4, 1, "", "criterion"], [191, 4, 1, "", "pattern"], [191, 4, 1, "", "reg"], [191, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.block_mask": [[192, 1, 1, "", "PytorchBlockMaskPruner"]], "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner": [[192, 4, 1, "", "criterion"], [192, 4, 1, "", "pattern"], [192, 4, 1, "", "reg"], [192, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.mha": [[194, 1, 1, "", "PythonMultiheadAttentionPruner"]], "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner": [[194, 4, 1, "", "head_masks"], [194, 4, 1, "", "linear_layers"], [194, 4, 1, "", "mha_compressions"], [194, 4, 1, "", "mha_scores"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[195, 1, 1, "", "PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[196, 1, 1, "", "PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[197, 1, 1, "", "PytorchRetrainFreePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner": [[197, 4, 1, "", "criterion"], [197, 4, 1, "", "pattern"], [197, 4, 1, "", "reg"], [197, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[198, 1, 1, "", "SparseGPTPruner"]], "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner": [[198, 4, 1, "", "criterion"], [198, 4, 1, "", "pattern"], [198, 4, 1, "", "reg"], [198, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruning": [[199, 1, 1, "", "BasePruning"], [199, 1, 1, "", "BasicPruning"], [199, 1, 1, "", "RetrainFreePruning"], [199, 1, 1, "", "SparseGPTPruning"], [199, 2, 1, "", "register_pruning"]], "neural_compressor.compression.pruner.pruning.BasePruning": [[199, 4, 1, "", "config_file_path"], [199, 4, 1, "", "model"], [199, 4, 1, "", "pruner_info"], [199, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.BasicPruning": [[199, 4, 1, "", "config_file_path"], [199, 4, 1, "", "model"], [199, 4, 1, "", "pruner_info"], [199, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.RetrainFreePruning": [[199, 4, 1, "", "config_file_path"], [199, 4, 1, "", "model"], [199, 4, 1, "", "pruner_info"], [199, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.regs": [[200, 1, 1, "", "BaseReg"], [200, 1, 1, "", "GroupLasso"], [200, 2, 1, "", "get_reg"], [200, 2, 1, "", "get_reg_type"], [200, 2, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[200, 4, 1, "", "alpha"], [200, 4, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[201, 1, 1, "", "IterativeScheduler"], [201, 1, 1, "", "OneshotScheduler"], [201, 1, 1, "", "PruningScheduler"], [201, 2, 1, "", "get_scheduler"], [201, 2, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[201, 4, 1, "", "config"]], "neural_compressor.compression.pruner.tf_criteria": [[202, 1, 1, "", "MagnitudeCriterion"], [202, 1, 1, "", "PruningCriterion"], [202, 2, 1, "", "get_tf_criterion"], [202, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion": [[202, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.tf_criteria.PruningCriterion": [[202, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.utils": [[203, 2, 1, "", "check_config"], [203, 2, 1, "", "check_key_validity"], [203, 2, 1, "", "collect_layer_inputs"], [203, 2, 1, "", "generate_pruner_config"], [203, 2, 1, "", "get_layers"], [203, 2, 1, "", "get_sparsity_ratio"], [203, 2, 1, "", "get_sparsity_ratio_tf"], [203, 2, 1, "", "parse_last_linear"], [203, 2, 1, "", "parse_last_linear_tf"], [203, 2, 1, "", "parse_to_prune"], [203, 2, 1, "", "parse_to_prune_tf"], [203, 2, 1, "", "process_and_check_config"], [203, 2, 1, "", "process_config"], [203, 2, 1, "", "process_weight_config"], [203, 2, 1, "", "process_yaml_config"], [203, 2, 1, "", "reset_none_to_default"], [203, 2, 1, "", "update_params"]], "neural_compressor.conf": [[204, 0, 0, "-", "config"], [205, 0, 0, "-", "dotdict"], [207, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[204, 1, 1, "", "Benchmark_Conf"], [204, 1, 1, "", "Conf"], [204, 1, 1, "", "DefaultConf"], [204, 1, 1, "", "Distillation_Conf"], [204, 1, 1, "", "Graph_Optimization_Conf"], [204, 1, 1, "", "MixedPrecision_Conf"], [204, 1, 1, "", "NASConfig"], [204, 1, 1, "", "PrunerV2"], [204, 1, 1, "", "Pruning_Conf"], [204, 1, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[205, 1, 1, "", "DotDict"], [205, 2, 1, "", "deep_get"], [205, 2, 1, "", "deep_set"]], "neural_compressor.conf.pythonic_config": [[207, 1, 1, "", "AccuracyCriterion"], [207, 1, 1, "", "BenchmarkConfig"], [207, 1, 1, "", "DistillationConfig"], [207, 1, 1, "", "KnowledgeDistillationLossConfig"], [207, 1, 1, "", "Options"], [207, 1, 1, "", "QuantizationConfig"], [207, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.config": [[208, 1, 1, "", "AccuracyCriterion"], [208, 1, 1, "", "BenchmarkConfig"], [208, 1, 1, "", "DistillationConfig"], [208, 1, 1, "", "DotDict"], [208, 1, 1, "", "ExportConfig"], [208, 1, 1, "", "HPOConfig"], [208, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [208, 1, 1, "", "Keras"], [208, 1, 1, "", "KnowledgeDistillationLossConfig"], [208, 1, 1, "", "MXNet"], [208, 1, 1, "", "MixedPrecisionConfig"], [208, 1, 1, "", "NASConfig"], [208, 1, 1, "", "ONNX"], [208, 1, 1, "", "ONNXQlinear2QDQConfig"], [208, 1, 1, "", "Options"], [208, 1, 1, "", "PostTrainingQuantConfig"], [208, 1, 1, "", "PyTorch"], [208, 1, 1, "", "QuantizationAwareTrainingConfig"], [208, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [208, 1, 1, "", "TF2ONNXConfig"], [208, 1, 1, "", "TensorFlow"], [208, 1, 1, "", "Torch2ONNXConfig"], [208, 1, 1, "", "TuningCriterion"], [208, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[210, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[211, 0, 0, "-", "sigopt"], [212, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[211, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[212, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[217, 0, 0, "-", "dataloaders"], [229, 0, 0, "-", "datasets"], [233, 0, 0, "-", "filters"], [237, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[213, 0, 0, "-", "base_dataloader"], [214, 0, 0, "-", "dataloader"], [215, 0, 0, "-", "default_dataloader"], [216, 0, 0, "-", "fetcher"], [218, 0, 0, "-", "mxnet_dataloader"], [219, 0, 0, "-", "onnxrt_dataloader"], [220, 0, 0, "-", "pytorch_dataloader"], [221, 0, 0, "-", "sampler"], [222, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[213, 1, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[214, 1, 1, "", "DataLoader"], [214, 2, 1, "", "check_dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[215, 1, 1, "", "DefaultDataLoader"], [215, 2, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[216, 1, 1, "", "Fetcher"], [216, 1, 1, "", "IndexFetcher"], [216, 1, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[218, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[219, 1, 1, "", "ONNXRTBertDataLoader"], [219, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[220, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[221, 1, 1, "", "BatchSampler"], [221, 1, 1, "", "IterableSampler"], [221, 1, 1, "", "Sampler"], [221, 1, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[222, 1, 1, "", "TFDataDataLoader"], [222, 1, 1, "", "TensorflowBertDataLoader"], [222, 1, 1, "", "TensorflowDataLoader"], [222, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[223, 0, 0, "-", "bert_dataset"], [224, 0, 0, "-", "coco_dataset"], [225, 0, 0, "-", "dataset"], [226, 0, 0, "-", "dummy_dataset"], [227, 0, 0, "-", "dummy_dataset_v2"], [228, 0, 0, "-", "imagenet_dataset"], [230, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[223, 1, 1, "", "InputFeatures"], [223, 1, 1, "", "ONNXRTBertDataset"], [223, 1, 1, "", "ParseDecodeBert"], [223, 1, 1, "", "PytorchBertDataset"], [223, 1, 1, "", "TensorflowBertDataset"], [223, 1, 1, "", "TensorflowModelZooBertDataset"], [223, 2, 1, "", "convert_examples_to_features"], [223, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[224, 1, 1, "", "COCONpy"], [224, 1, 1, "", "COCORaw"], [224, 1, 1, "", "COCORecordDataset"], [224, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[225, 1, 1, "", "CIFAR10"], [225, 1, 1, "", "CIFAR100"], [225, 1, 1, "", "Dataset"], [225, 1, 1, "", "Datasets"], [225, 1, 1, "", "FashionMNIST"], [225, 1, 1, "", "ImageFolder"], [225, 1, 1, "", "IterableDataset"], [225, 1, 1, "", "MNIST"], [225, 1, 1, "", "MXNetCIFAR10"], [225, 1, 1, "", "MXNetCIFAR100"], [225, 1, 1, "", "MXNetDatasets"], [225, 1, 1, "", "MXNetFashionMNIST"], [225, 1, 1, "", "MXNetImageFolder"], [225, 1, 1, "", "MXNetMNIST"], [225, 1, 1, "", "ONNXRTITDatasets"], [225, 1, 1, "", "ONNXRTQLDatasets"], [225, 1, 1, "", "PyTorchDatasets"], [225, 1, 1, "", "PytorchCIFAR10"], [225, 1, 1, "", "PytorchCIFAR100"], [225, 1, 1, "", "PytorchFashionMNIST"], [225, 1, 1, "", "PytorchMNIST"], [225, 1, 1, "", "PytorchMxnetWrapDataset"], [225, 1, 1, "", "PytorchMxnetWrapFunction"], [225, 1, 1, "", "Tensorflow"], [225, 1, 1, "", "TensorflowCIFAR10"], [225, 1, 1, "", "TensorflowCIFAR100"], [225, 1, 1, "", "TensorflowDatasets"], [225, 1, 1, "", "TensorflowFashionMNIST"], [225, 1, 1, "", "TensorflowImageRecord"], [225, 1, 1, "", "TensorflowMNIST"], [225, 1, 1, "", "TensorflowTFRecordDataset"], [225, 1, 1, "", "TensorflowVOCRecord"], [225, 2, 1, "", "calculate_md5"], [225, 2, 1, "", "check_integrity"], [225, 2, 1, "", "dataset_registry"], [225, 2, 1, "", "download_url"], [225, 5, 1, "", "framework_datasets"], [225, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[226, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[227, 1, 1, "", "DummyDataset"], [227, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[228, 1, 1, "", "ImagenetRaw"], [228, 1, 1, "", "MXNetImagenetRaw"], [228, 1, 1, "", "ONNXRTImagenetDataset"], [228, 1, 1, "", "PytorchImagenetRaw"], [228, 1, 1, "", "TensorflowImagenetDataset"], [228, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[230, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[231, 0, 0, "-", "coco_filter"], [232, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[231, 1, 1, "", "LabelBalanceCOCORawFilter"], [231, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[232, 1, 1, "", "FILTERS"], [232, 1, 1, "", "Filter"], [232, 1, 1, "", "MXNetFilters"], [232, 1, 1, "", "ONNXRTITFilters"], [232, 1, 1, "", "ONNXRTQLFilters"], [232, 1, 1, "", "PyTorchFilters"], [232, 1, 1, "", "TensorflowFilters"], [232, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[235, 0, 0, "-", "coco_transform"], [236, 0, 0, "-", "imagenet_transform"], [238, 0, 0, "-", "postprocess"], [239, 0, 0, "-", "tokenization"], [240, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.coco_transform": [[235, 1, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[236, 1, 1, "", "BilinearImagenetTransform"], [236, 1, 1, "", "LabelShift"], [236, 1, 1, "", "ONNXResizeCropImagenetTransform"], [236, 1, 1, "", "OnnxBilinearImagenetTransform"], [236, 1, 1, "", "ParseDecodeImagenet"], [236, 1, 1, "", "ParseDecodeImagenetTransform"], [236, 1, 1, "", "QuantizedInput"], [236, 1, 1, "", "ResizeWithAspectRatio"], [236, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [236, 1, 1, "", "TensorflowShiftRescale"], [236, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[238, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[239, 1, 1, "", "BasicTokenizer"], [239, 1, 1, "", "FullTokenizer"], [239, 1, 1, "", "WordpieceTokenizer"], [239, 2, 1, "", "convert_by_vocab"], [239, 2, 1, "", "convert_to_unicode"], [239, 2, 1, "", "load_vocab"], [239, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[240, 1, 1, "", "AlignImageChannelTransform"], [240, 1, 1, "", "BaseTransform"], [240, 1, 1, "", "CastONNXTransform"], [240, 1, 1, "", "CastPyTorchTransform"], [240, 1, 1, "", "CastTFTransform"], [240, 1, 1, "", "CenterCropTFTransform"], [240, 1, 1, "", "CenterCropTransform"], [240, 1, 1, "", "CollectTransform"], [240, 1, 1, "", "ComposeTransform"], [240, 1, 1, "", "CropResizeTFTransform"], [240, 1, 1, "", "CropResizeTransform"], [240, 1, 1, "", "CropToBoundingBox"], [240, 1, 1, "", "InputFeatures"], [240, 1, 1, "", "MXNetCropResizeTransform"], [240, 1, 1, "", "MXNetCropToBoundingBox"], [240, 1, 1, "", "MXNetNormalizeTransform"], [240, 1, 1, "", "MXNetTransforms"], [240, 1, 1, "", "MXNetTranspose"], [240, 1, 1, "", "NormalizeTFTransform"], [240, 1, 1, "", "NormalizeTransform"], [240, 1, 1, "", "ONNXRTCropToBoundingBox"], [240, 1, 1, "", "ONNXRTITTransforms"], [240, 1, 1, "", "ONNXRTQLTransforms"], [240, 1, 1, "", "PaddedCenterCropTransform"], [240, 1, 1, "", "ParseDecodeVocTransform"], [240, 1, 1, "", "PyTorchAlignImageChannel"], [240, 1, 1, "", "PyTorchCropResizeTransform"], [240, 1, 1, "", "PyTorchNormalizeTransform"], [240, 1, 1, "", "PyTorchTransforms"], [240, 1, 1, "", "PyTorchTranspose"], [240, 1, 1, "", "PytorchMxnetTransform"], [240, 1, 1, "", "PytorchMxnetWrapFunction"], [240, 1, 1, "", "RandomCropTFTransform"], [240, 1, 1, "", "RandomCropTransform"], [240, 1, 1, "", "RandomHorizontalFlip"], [240, 1, 1, "", "RandomResizedCropMXNetTransform"], [240, 1, 1, "", "RandomResizedCropPytorchTransform"], [240, 1, 1, "", "RandomResizedCropTFTransform"], [240, 1, 1, "", "RandomResizedCropTransform"], [240, 1, 1, "", "RandomVerticalFlip"], [240, 1, 1, "", "RescaleKerasPretrainTransform"], [240, 1, 1, "", "RescaleTFTransform"], [240, 1, 1, "", "RescaleTransform"], [240, 1, 1, "", "ResizeMXNetTransform"], [240, 1, 1, "", "ResizePytorchTransform"], [240, 1, 1, "", "ResizeTFTransform"], [240, 1, 1, "", "ResizeTransform"], [240, 1, 1, "", "ResizeWithRatio"], [240, 1, 1, "", "SquadExample"], [240, 1, 1, "", "TFModelZooCollectTransform"], [240, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [240, 1, 1, "", "TFSquadV1PostTransform"], [240, 1, 1, "", "TRANSFORMS"], [240, 1, 1, "", "TensorflowCropToBoundingBox"], [240, 1, 1, "", "TensorflowRandomHorizontalFlip"], [240, 1, 1, "", "TensorflowRandomVerticalFlip"], [240, 1, 1, "", "TensorflowResizeWithRatio"], [240, 1, 1, "", "TensorflowTransform"], [240, 1, 1, "", "TensorflowTransforms"], [240, 1, 1, "", "TensorflowTranspose"], [240, 1, 1, "", "TensorflowWrapFunction"], [240, 1, 1, "", "ToArray"], [240, 1, 1, "", "ToNDArrayTransform"], [240, 1, 1, "", "Transforms"], [240, 1, 1, "", "Transpose"], [240, 2, 1, "", "convert_examples_to_features"], [240, 2, 1, "", "get_final_text"], [240, 2, 1, "", "get_torchvision_map"], [240, 2, 1, "", "read_squad_examples"], [240, 2, 1, "", "transform_registry"]], "neural_compressor.experimental": [[241, 0, 0, "-", "benchmark"], [244, 0, 0, "-", "common"], [250, 0, 0, "-", "component"], [251, 0, 0, "-", "compression"], [252, 0, 0, "-", "contrib"], [277, 0, 0, "-", "data"], [282, 0, 0, "-", "distillation"], [283, 0, 0, "-", "export"], [287, 0, 0, "-", "graph_optimization"], [295, 0, 0, "-", "metric"], [297, 0, 0, "-", "mixed_precision"], [298, 0, 0, "-", "model_conversion"], [301, 0, 0, "-", "nas"], [307, 0, 0, "-", "pruner_legacy"], [311, 0, 0, "-", "pruning"], [312, 0, 0, "-", "pruning_recipes"], [316, 0, 0, "-", "pruning_v2"], [317, 0, 0, "-", "pytorch_pruner"], [324, 0, 0, "-", "quantization"], [325, 0, 0, "-", "scheduler"], [330, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[241, 1, 1, "", "Benchmark"], [241, 2, 1, "", "get_architecture"], [241, 2, 1, "", "get_bounded_threads"], [241, 2, 1, "", "get_core_ids"], [241, 2, 1, "", "get_physical_ids"], [241, 2, 1, "", "get_threads"], [241, 2, 1, "", "get_threads_per_core"], [241, 2, 1, "", "set_all_env_var"], [241, 2, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[242, 0, 0, "-", "criterion"], [243, 0, 0, "-", "dataloader"], [245, 0, 0, "-", "metric"], [246, 0, 0, "-", "model"], [247, 0, 0, "-", "optimizer"], [248, 0, 0, "-", "postprocess"], [249, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[242, 1, 1, "", "Criterions"], [242, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [242, 1, 1, "", "KnowledgeDistillationFramework"], [242, 1, 1, "", "KnowledgeDistillationLoss"], [242, 1, 1, "", "PyTorchCriterions"], [242, 1, 1, "", "PyTorchCrossEntropyLoss"], [242, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [242, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [242, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [242, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [242, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [242, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [242, 1, 1, "", "SelfKnowledgeDistillationLoss"], [242, 1, 1, "", "TensorFlowCrossEntropyLoss"], [242, 1, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [242, 1, 1, "", "TensorflowCriterions"], [242, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [242, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [242, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [242, 2, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[243, 1, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[245, 1, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[246, 1, 1, "", "Model"], [246, 2, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[247, 1, 1, "", "Optimizers"], [247, 1, 1, "", "PyTorchOptimizers"], [247, 1, 1, "", "PyTorchSGD"], [247, 1, 1, "", "TensorFlowAdam"], [247, 1, 1, "", "TensorFlowAdamW"], [247, 1, 1, "", "TensorFlowSGD"], [247, 1, 1, "", "TensorflowOptimizers"], [247, 2, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[248, 1, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[249, 2, 1, "", "get_activation"], [249, 2, 1, "", "record_output"]], "neural_compressor.experimental.component": [[250, 1, 1, "", "Component"]], "neural_compressor.experimental.contrib": [[253, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[254, 0, 0, "-", "sigopt"], [255, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[254, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[255, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[260, 0, 0, "-", "dataloaders"], [272, 0, 0, "-", "datasets"], [276, 0, 0, "-", "filters"], [279, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[256, 0, 0, "-", "base_dataloader"], [257, 0, 0, "-", "dataloader"], [258, 0, 0, "-", "default_dataloader"], [259, 0, 0, "-", "fetcher"], [261, 0, 0, "-", "mxnet_dataloader"], [262, 0, 0, "-", "onnxrt_dataloader"], [263, 0, 0, "-", "pytorch_dataloader"], [264, 0, 0, "-", "sampler"], [265, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[256, 1, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[258, 1, 1, "", "DefaultDataLoader"], [258, 2, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[259, 1, 1, "", "Fetcher"], [259, 1, 1, "", "IndexFetcher"], [259, 1, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[261, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[262, 1, 1, "", "ONNXRTBertDataLoader"], [262, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[263, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[264, 1, 1, "", "BatchSampler"], [264, 1, 1, "", "IterableSampler"], [264, 1, 1, "", "Sampler"], [264, 1, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[265, 1, 1, "", "TFDataDataLoader"], [265, 1, 1, "", "TensorflowBertDataLoader"], [265, 1, 1, "", "TensorflowDataLoader"], [265, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[266, 0, 0, "-", "bert_dataset"], [267, 0, 0, "-", "coco_dataset"], [268, 0, 0, "-", "dataset"], [269, 0, 0, "-", "dummy_dataset"], [270, 0, 0, "-", "dummy_dataset_v2"], [271, 0, 0, "-", "imagenet_dataset"], [273, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[266, 1, 1, "", "InputFeatures"], [266, 1, 1, "", "ONNXRTBertDataset"], [266, 1, 1, "", "ParseDecodeBert"], [266, 1, 1, "", "PytorchBertDataset"], [266, 1, 1, "", "TensorflowBertDataset"], [266, 1, 1, "", "TensorflowModelZooBertDataset"], [266, 2, 1, "", "convert_examples_to_features"], [266, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[267, 1, 1, "", "COCONpy"], [267, 1, 1, "", "COCORaw"], [267, 1, 1, "", "COCORecordDataset"], [267, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[268, 1, 1, "", "CIFAR10"], [268, 1, 1, "", "CIFAR100"], [268, 1, 1, "", "Dataset"], [268, 1, 1, "", "Datasets"], [268, 1, 1, "", "FashionMNIST"], [268, 1, 1, "", "ImageFolder"], [268, 1, 1, "", "IterableDataset"], [268, 1, 1, "", "MNIST"], [268, 1, 1, "", "MXNetCIFAR10"], [268, 1, 1, "", "MXNetCIFAR100"], [268, 1, 1, "", "MXNetDatasets"], [268, 1, 1, "", "MXNetFashionMNIST"], [268, 1, 1, "", "MXNetImageFolder"], [268, 1, 1, "", "MXNetMNIST"], [268, 1, 1, "", "ONNXRTITDatasets"], [268, 1, 1, "", "ONNXRTQLDatasets"], [268, 1, 1, "", "PyTorchDatasets"], [268, 1, 1, "", "PytorchCIFAR10"], [268, 1, 1, "", "PytorchCIFAR100"], [268, 1, 1, "", "PytorchFashionMNIST"], [268, 1, 1, "", "PytorchMNIST"], [268, 1, 1, "", "PytorchMxnetWrapDataset"], [268, 1, 1, "", "PytorchMxnetWrapFunction"], [268, 1, 1, "", "TensorflowCIFAR10"], [268, 1, 1, "", "TensorflowCIFAR100"], [268, 1, 1, "", "TensorflowDatasets"], [268, 1, 1, "", "TensorflowFashionMNIST"], [268, 1, 1, "", "TensorflowImageFolder"], [268, 1, 1, "", "TensorflowImageRecord"], [268, 1, 1, "", "TensorflowMNIST"], [268, 1, 1, "", "TensorflowTFRecordDataset"], [268, 1, 1, "", "TensorflowVOCRecord"], [268, 2, 1, "", "calculate_md5"], [268, 2, 1, "", "check_integrity"], [268, 2, 1, "", "dataset_registry"], [268, 2, 1, "", "download_url"], [268, 5, 1, "", "framework_datasets"], [268, 2, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[269, 1, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[270, 1, 1, "", "DummyDataset"], [270, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[271, 1, 1, "", "ImagenetRaw"], [271, 1, 1, "", "MXNetImagenetRaw"], [271, 1, 1, "", "ONNXRTImagenetDataset"], [271, 1, 1, "", "PytorchImagenetRaw"], [271, 1, 1, "", "TensorflowImagenetDataset"], [271, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[273, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[274, 0, 0, "-", "coco_filter"], [275, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[274, 1, 1, "", "LabelBalanceCOCORawFilter"], [274, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[275, 1, 1, "", "FILTERS"], [275, 1, 1, "", "Filter"], [275, 1, 1, "", "MXNetFilters"], [275, 1, 1, "", "ONNXRTITFilters"], [275, 1, 1, "", "ONNXRTQLFilters"], [275, 1, 1, "", "PyTorchFilters"], [275, 1, 1, "", "TensorflowFilters"], [275, 2, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[278, 0, 0, "-", "imagenet_transform"], [280, 0, 0, "-", "tokenization"], [281, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[278, 1, 1, "", "BilinearImagenetTransform"], [278, 1, 1, "", "LabelShift"], [278, 1, 1, "", "ONNXResizeCropImagenetTransform"], [278, 1, 1, "", "OnnxBilinearImagenetTransform"], [278, 1, 1, "", "ParseDecodeImagenet"], [278, 1, 1, "", "ParseDecodeImagenetTransform"], [278, 1, 1, "", "QuantizedInput"], [278, 1, 1, "", "ResizeWithAspectRatio"], [278, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[280, 1, 1, "", "BasicTokenizer"], [280, 1, 1, "", "FullTokenizer"], [280, 1, 1, "", "WordpieceTokenizer"], [280, 2, 1, "", "convert_by_vocab"], [280, 2, 1, "", "convert_to_unicode"], [280, 2, 1, "", "load_vocab"], [280, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[281, 1, 1, "", "AlignImageChannelTransform"], [281, 1, 1, "", "BaseTransform"], [281, 1, 1, "", "CastONNXTransform"], [281, 1, 1, "", "CastPyTorchTransform"], [281, 1, 1, "", "CastTFTransform"], [281, 1, 1, "", "CenterCropTFTransform"], [281, 1, 1, "", "CenterCropTransform"], [281, 1, 1, "", "CollectTransform"], [281, 1, 1, "", "ComposeTransform"], [281, 1, 1, "", "CropResizeTFTransform"], [281, 1, 1, "", "CropResizeTransform"], [281, 1, 1, "", "CropToBoundingBox"], [281, 1, 1, "", "InputFeatures"], [281, 1, 1, "", "MXNetCropResizeTransform"], [281, 1, 1, "", "MXNetCropToBoundingBox"], [281, 1, 1, "", "MXNetNormalizeTransform"], [281, 1, 1, "", "MXNetTransforms"], [281, 1, 1, "", "MXNetTranspose"], [281, 1, 1, "", "NormalizeTFTransform"], [281, 1, 1, "", "NormalizeTransform"], [281, 1, 1, "", "ONNXRTCropToBoundingBox"], [281, 1, 1, "", "ONNXRTITTransforms"], [281, 1, 1, "", "ONNXRTQLTransforms"], [281, 1, 1, "", "PaddedCenterCropTransform"], [281, 1, 1, "", "ParseDecodeVocTransform"], [281, 1, 1, "", "PyTorchAlignImageChannel"], [281, 1, 1, "", "PyTorchCropResizeTransform"], [281, 1, 1, "", "PyTorchNormalizeTransform"], [281, 1, 1, "", "PyTorchTransforms"], [281, 1, 1, "", "PyTorchTranspose"], [281, 1, 1, "", "PytorchMxnetTransform"], [281, 1, 1, "", "PytorchMxnetWrapFunction"], [281, 1, 1, "", "RandomCropTFTransform"], [281, 1, 1, "", "RandomCropTransform"], [281, 1, 1, "", "RandomHorizontalFlip"], [281, 1, 1, "", "RandomResizedCropMXNetTransform"], [281, 1, 1, "", "RandomResizedCropPytorchTransform"], [281, 1, 1, "", "RandomResizedCropTFTransform"], [281, 1, 1, "", "RandomResizedCropTransform"], [281, 1, 1, "", "RandomVerticalFlip"], [281, 1, 1, "", "RescaleKerasPretrainTransform"], [281, 1, 1, "", "RescaleTFTransform"], [281, 1, 1, "", "RescaleTransform"], [281, 1, 1, "", "ResizeMXNetTransform"], [281, 1, 1, "", "ResizePytorchTransform"], [281, 1, 1, "", "ResizeTFTransform"], [281, 1, 1, "", "ResizeTransform"], [281, 1, 1, "", "ResizeWithRatio"], [281, 1, 1, "", "SquadExample"], [281, 1, 1, "", "TFModelZooCollectTransform"], [281, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [281, 1, 1, "", "TFSquadV1PostTransform"], [281, 1, 1, "", "TRANSFORMS"], [281, 1, 1, "", "TensorflowCropToBoundingBox"], [281, 1, 1, "", "TensorflowRandomHorizontalFlip"], [281, 1, 1, "", "TensorflowRandomVerticalFlip"], [281, 1, 1, "", "TensorflowResizeWithRatio"], [281, 1, 1, "", "TensorflowTransform"], [281, 1, 1, "", "TensorflowTransforms"], [281, 1, 1, "", "TensorflowTranspose"], [281, 1, 1, "", "TensorflowWrapFunction"], [281, 1, 1, "", "ToArray"], [281, 1, 1, "", "ToNDArrayTransform"], [281, 1, 1, "", "Transforms"], [281, 1, 1, "", "Transpose"], [281, 2, 1, "", "convert_examples_to_features"], [281, 2, 1, "", "get_final_text"], [281, 2, 1, "", "get_torchvision_map"], [281, 2, 1, "", "read_squad_examples"], [281, 2, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[282, 1, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[282, 4, 1, "", "_epoch_ran"], [282, 4, 1, "", "best_model"], [282, 4, 1, "", "best_score"], [282, 4, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[284, 0, 0, "-", "qlinear2qdq"], [285, 0, 0, "-", "tf2onnx"], [286, 0, 0, "-", "torch2onnx"]], "neural_compressor.experimental.export.qlinear2qdq": [[284, 2, 1, "", "check_model"], [284, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[285, 2, 1, "", "tf_to_fp32_onnx"], [285, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[286, 2, 1, "", "dynamic_quant_export"], [286, 2, 1, "", "get_node_mapping"], [286, 2, 1, "", "get_quantizable_onnx_ops"], [286, 2, 1, "", "static_quant_export"], [286, 2, 1, "", "torch_to_fp32_onnx"], [286, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.experimental.graph_optimization": [[287, 1, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[289, 0, 0, "-", "bleu"], [290, 0, 0, "-", "bleu_util"], [291, 0, 0, "-", "coco_label_map"], [292, 0, 0, "-", "coco_tools"], [293, 0, 0, "-", "evaluate_squad"], [294, 0, 0, "-", "f1"], [296, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[289, 1, 1, "", "BLEU"], [289, 1, 1, "", "UnicodeRegex"], [289, 2, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[289, 4, 1, "", "labels"], [289, 4, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[289, 4, 1, "", "nondigit_punct_re"], [289, 4, 1, "", "punct_nondigit_re"], [289, 4, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[290, 2, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[292, 1, 1, "", "COCOEvalWrapper"], [292, 1, 1, "", "COCOWrapper"], [292, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [292, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [292, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[292, 4, 1, "", "dataset"], [292, 4, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[293, 2, 1, "", "evaluate"], [293, 2, 1, "", "exact_match_score"], [293, 2, 1, "", "f1_score"], [293, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[294, 2, 1, "", "evaluate"], [294, 2, 1, "", "f1_score"], [294, 2, 1, "", "metric_max_over_ground_truths"], [294, 2, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[296, 1, 1, "", "Accuracy"], [296, 1, 1, "", "BaseMetric"], [296, 1, 1, "", "COCOmAPv2"], [296, 1, 1, "", "F1"], [296, 1, 1, "", "GeneralTopK"], [296, 1, 1, "", "Loss"], [296, 1, 1, "", "MAE"], [296, 1, 1, "", "METRICS"], [296, 1, 1, "", "MSE"], [296, 1, 1, "", "MXNetMetrics"], [296, 1, 1, "", "ONNXRTGLUE"], [296, 1, 1, "", "ONNXRTITMetrics"], [296, 1, 1, "", "ONNXRTQLMetrics"], [296, 1, 1, "", "PyTorchLoss"], [296, 1, 1, "", "PyTorchMetrics"], [296, 1, 1, "", "RMSE"], [296, 1, 1, "", "ROC"], [296, 1, 1, "", "SquadF1"], [296, 1, 1, "", "TensorflowCOCOMAP"], [296, 1, 1, "", "TensorflowMAP"], [296, 1, 1, "", "TensorflowMetrics"], [296, 1, 1, "", "TensorflowTopK"], [296, 1, 1, "", "TensorflowVOCMAP"], [296, 1, 1, "", "WrapMXNetMetric"], [296, 1, 1, "", "WrapONNXRTMetric"], [296, 1, 1, "", "WrapPyTorchMetric"], [296, 1, 1, "", "mIOU"], [296, 2, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[296, 4, 1, "", "label_list"], [296, 4, 1, "", "pred_list"], [296, 4, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[296, 4, 1, "", "k"], [296, 4, 1, "", "num_correct"], [296, 4, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[296, 4, 1, "", "sample"], [296, 4, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[296, 4, 1, "", "compare_label"], [296, 4, 1, "", "label_list"], [296, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[296, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[296, 4, 1, "", "compare_label"], [296, 4, 1, "", "label_list"], [296, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[296, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[296, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[296, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[296, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[296, 4, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[296, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[296, 4, 1, "", "k"], [296, 4, 1, "", "num_correct"], [296, 4, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[297, 1, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[298, 1, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[299, 0, 0, "-", "basic_nas"], [300, 0, 0, "-", "dynas"], [302, 0, 0, "-", "nas"], [303, 0, 0, "-", "nas_utils"], [304, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[299, 1, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[300, 1, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[302, 1, 1, "", "NAS"], [302, 1, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[303, 2, 1, "", "create_search_space_pool"], [303, 2, 1, "", "find_pareto_front"], [303, 2, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[304, 1, 1, "", "BayesianOptimizationSearcher"], [304, 1, 1, "", "GridSearcher"], [304, 1, 1, "", "RandomSearcher"], [304, 1, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[305, 0, 0, "-", "gradient_sensitivity"], [306, 0, 0, "-", "group_lasso"], [308, 0, 0, "-", "magnitude"], [309, 0, 0, "-", "pattern_lock"], [310, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[305, 1, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[306, 1, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[308, 1, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[309, 1, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[310, 1, 1, "", "Pruner"], [310, 2, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[311, 1, 1, "", "Pruning"], [311, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[311, 4, 1, "", "conf"], [311, 4, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[313, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[314, 0, 0, "-", "pattern"], [315, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[314, 1, 1, "", "PATTERNS"], [314, 1, 1, "", "PatternBase"], [314, 2, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[314, 4, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[315, 1, 1, "", "TilePatternBase"], [315, 1, 1, "", "TilePattern_1x1"], [315, 1, 1, "", "TilePattern_1x16"], [315, 1, 1, "", "TilePattern_1x2"], [315, 1, 1, "", "TilePattern_2x2"], [315, 1, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[316, 1, 1, "", "Pruning"], [316, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[316, 4, 1, "", "conf"], [316, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[318, 0, 0, "-", "logger"], [319, 0, 0, "-", "patterns"], [320, 0, 0, "-", "prune_utils"], [321, 0, 0, "-", "pruner"], [322, 0, 0, "-", "pruning"], [323, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[319, 1, 1, "", "Pattern"], [319, 1, 1, "", "PatternNInM"], [319, 1, 1, "", "PatternNxM"], [319, 2, 1, "", "get_pattern"], [319, 2, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[319, 4, 1, "", "is_global"], [319, 4, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[319, 4, 1, "", "M"], [319, 4, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[319, 4, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[320, 2, 1, "", "check_config"], [320, 2, 1, "", "parse_not_to_prune"], [320, 2, 1, "", "parse_to_prune"], [320, 2, 1, "", "process_and_check_config"], [320, 2, 1, "", "process_config"], [320, 2, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[321, 1, 1, "", "MagnitudePruner"], [321, 1, 1, "", "PatternLockPruner"], [321, 1, 1, "", "Pruner"], [321, 1, 1, "", "SnipMomentumPruner"], [321, 1, 1, "", "SnipPruner"], [321, 2, 1, "", "get_pruner"], [321, 2, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[321, 4, 1, "", "config"], [321, 4, 1, "", "current_sparsity_ratio"], [321, 4, 1, "", "end_step"], [321, 4, 1, "", "global_step"], [321, 4, 1, "", "masks"], [321, 4, 1, "", "max_sparsity_ratio_per_layer"], [321, 4, 1, "", "modules"], [321, 4, 1, "", "pattern"], [321, 4, 1, "", "scheduler"], [321, 4, 1, "", "scores"], [321, 4, 1, "", "start_step"], [321, 4, 1, "", "target_sparsity_ratio"], [321, 4, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[322, 1, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[322, 4, 1, "", "config_file_path"], [322, 4, 1, "", "model"], [322, 4, 1, "", "pruner_info"], [322, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[323, 1, 1, "", "IterativeScheduler"], [323, 1, 1, "", "OneshotScheduler"], [323, 1, 1, "", "Scheduler"], [323, 2, 1, "", "get_scheduler"], [323, 2, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[323, 4, 1, "", "config"]], "neural_compressor.experimental.quantization": [[324, 1, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[325, 1, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[326, 0, 0, "-", "auto_mixed_precision"], [327, 0, 0, "-", "basic"], [328, 0, 0, "-", "bayesian"], [329, 0, 0, "-", "exhaustive"], [331, 0, 0, "-", "mse"], [332, 0, 0, "-", "mse_v2"], [333, 0, 0, "-", "random"], [334, 0, 0, "-", "strategy"], [336, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[326, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[327, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[328, 1, 1, "", "BayesianOptimization"], [328, 1, 1, "", "BayesianTuneStrategy"], [328, 1, 1, "", "TargetSpace"], [328, 2, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[329, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[331, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[332, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[333, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[334, 1, 1, "", "TuneStrategy"], [334, 2, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[335, 0, 0, "-", "constant"], [337, 0, 0, "-", "tuning_sampler"], [338, 0, 0, "-", "tuning_space"], [339, 0, 0, "-", "tuning_structs"], [340, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[337, 1, 1, "", "FallbackTuningSampler"], [337, 1, 1, "", "ModelWiseTuningSampler"], [337, 1, 1, "", "OpTypeWiseTuningSampler"], [337, 1, 1, "", "OpWiseTuningSampler"], [337, 1, 1, "", "SmoothQuantSampler"], [337, 1, 1, "", "TuningOrder"], [337, 1, 1, "", "TuningSampler"], [337, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[338, 1, 1, "", "TuningItem"], [338, 1, 1, "", "TuningSpace"], [338, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [338, 2, 1, "", "pattern_to_internal"], [338, 2, 1, "", "pattern_to_path"], [338, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[339, 1, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[340, 1, 1, "", "OrderedDefaultDict"], [340, 2, 1, "", "extract_data_type"], [340, 2, 1, "", "get_adaptor_name"], [340, 2, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[342, 0, 0, "-", "bleu"], [343, 0, 0, "-", "bleu_util"], [344, 0, 0, "-", "coco_label_map"], [345, 0, 0, "-", "coco_tools"], [346, 0, 0, "-", "evaluate_squad"], [347, 0, 0, "-", "f1"], [349, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[342, 1, 1, "", "BLEU"], [342, 1, 1, "", "UnicodeRegex"], [342, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[342, 4, 1, "", "labels"], [342, 4, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[342, 4, 1, "", "nondigit_punct_re"], [342, 4, 1, "", "punct_nondigit_re"], [342, 4, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[343, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[345, 1, 1, "", "COCOEvalWrapper"], [345, 1, 1, "", "COCOWrapper"], [345, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [345, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [345, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[345, 4, 1, "", "dataset"], [345, 4, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[346, 2, 1, "", "evaluate"], [346, 2, 1, "", "exact_match_score"], [346, 2, 1, "", "f1_score"], [346, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[347, 2, 1, "", "evaluate"], [347, 2, 1, "", "f1_score"], [347, 2, 1, "", "metric_max_over_ground_truths"], [347, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[349, 1, 1, "", "Accuracy"], [349, 1, 1, "", "BaseMetric"], [349, 1, 1, "", "COCOmAPv2"], [349, 1, 1, "", "F1"], [349, 1, 1, "", "GeneralTopK"], [349, 1, 1, "", "Loss"], [349, 1, 1, "", "MAE"], [349, 1, 1, "", "METRICS"], [349, 1, 1, "", "MSE"], [349, 1, 1, "", "MXNetMetrics"], [349, 1, 1, "", "Metric"], [349, 1, 1, "", "ONNXRTGLUE"], [349, 1, 1, "", "ONNXRTITMetrics"], [349, 1, 1, "", "ONNXRTQLMetrics"], [349, 1, 1, "", "PyTorchLoss"], [349, 1, 1, "", "PyTorchMetrics"], [349, 1, 1, "", "RMSE"], [349, 1, 1, "", "ROC"], [349, 1, 1, "", "SquadF1"], [349, 1, 1, "", "TensorflowCOCOMAP"], [349, 1, 1, "", "TensorflowMAP"], [349, 1, 1, "", "TensorflowMetrics"], [349, 1, 1, "", "TensorflowTopK"], [349, 1, 1, "", "TensorflowVOCMAP"], [349, 1, 1, "", "WrapMXNetMetric"], [349, 1, 1, "", "WrapONNXRTMetric"], [349, 1, 1, "", "WrapPyTorchMetric"], [349, 1, 1, "", "mIOU"], [349, 2, 1, "", "metric_registry"], [349, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[349, 4, 1, "", "label_list"], [349, 4, 1, "", "pred_list"], [349, 4, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[349, 4, 1, "", "k"], [349, 4, 1, "", "num_correct"], [349, 4, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[349, 4, 1, "", "sample"], [349, 4, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[349, 4, 1, "", "compare_label"], [349, 4, 1, "", "label_list"], [349, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[349, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[349, 4, 1, "", "compare_label"], [349, 4, 1, "", "label_list"], [349, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[349, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[349, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[349, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[349, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[349, 4, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[349, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[349, 4, 1, "", "k"], [349, 4, 1, "", "num_correct"], [349, 4, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[350, 2, 1, "", "fit"]], "neural_compressor.model": [[351, 0, 0, "-", "base_model"], [353, 0, 0, "-", "keras_model"], [354, 0, 0, "-", "model"], [355, 0, 0, "-", "mxnet_model"], [356, 0, 0, "-", "nets_factory"], [357, 0, 0, "-", "onnx_model"], [358, 0, 0, "-", "tensorflow_model"], [359, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[351, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[353, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[354, 1, 1, "", "Model"], [354, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[355, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[356, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[357, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[358, 1, 1, "", "TensorflowBaseModel"], [358, 1, 1, "", "TensorflowCheckpointModel"], [358, 1, 1, "", "TensorflowModel"], [358, 1, 1, "", "TensorflowQATModel"], [358, 1, 1, "", "TensorflowSavedModelModel"], [358, 2, 1, "", "checkpoint_session"], [358, 2, 1, "", "estimator_session"], [358, 2, 1, "", "frozen_pb_session"], [358, 2, 1, "", "get_model_type"], [358, 2, 1, "", "graph_def_session"], [358, 2, 1, "", "graph_session"], [358, 2, 1, "", "keras_session"], [358, 2, 1, "", "load_saved_model"], [358, 2, 1, "", "saved_model_session"], [358, 2, 1, "", "slim_session"], [358, 2, 1, "", "validate_and_inference_input_output"], [358, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[359, 1, 1, "", "IPEXModel"], [359, 1, 1, "", "PyTorchBaseModel"], [359, 1, 1, "", "PyTorchFXModel"], [359, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[360, 1, 1, "", "Accuracy"], [360, 1, 1, "", "Footprint"], [360, 1, 1, "", "ModelSize"], [360, 1, 1, "", "MultiObjective"], [360, 1, 1, "", "Objective"], [360, 1, 1, "", "Performance"], [360, 2, 1, "", "objective_custom_registry"], [360, 2, 1, "", "objective_registry"]], "neural_compressor.profiling": [[363, 0, 0, "-", "parser"], [373, 0, 0, "-", "profiler"]], "neural_compressor.profiling.parser": [[362, 0, 0, "-", "factory"], [365, 0, 0, "-", "onnx_parser"], [367, 0, 0, "-", "parser"], [368, 0, 0, "-", "result"], [370, 0, 0, "-", "tensorflow_parser"]], "neural_compressor.profiling.parser.factory": [[362, 1, 1, "", "ParserFactory"]], "neural_compressor.profiling.parser.onnx_parser": [[364, 0, 0, "-", "factory"], [366, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[364, 1, 1, "", "OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[366, 1, 1, "", "OnnxProfilingParser"]], "neural_compressor.profiling.parser.parser": [[367, 1, 1, "", "ProfilingParser"]], "neural_compressor.profiling.parser.result": [[368, 1, 1, "", "ProfilingResult"]], "neural_compressor.profiling.parser.tensorflow_parser": [[369, 0, 0, "-", "factory"], [371, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[369, 1, 1, "", "TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[371, 1, 1, "", "TensorFlowProfilingParser"]], "neural_compressor.profiling.profiler": [[372, 0, 0, "-", "factory"], [375, 0, 0, "-", "onnxrt_profiler"], [378, 0, 0, "-", "profiler"], [380, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.profiling.profiler.factory": [[372, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[374, 0, 0, "-", "factory"], [376, 0, 0, "-", "profiler"], [377, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[374, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[376, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[377, 2, 1, "", "create_onnx_config"]], "neural_compressor.profiling.profiler.profiler": [[378, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[379, 0, 0, "-", "factory"], [381, 0, 0, "-", "profiler"], [382, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[379, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[381, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[382, 2, 1, "", "create_tf_config"], [382, 2, 1, "", "delete_assign"], [382, 2, 1, "", "set_eager_execution"]], "neural_compressor.quantization": [[383, 2, 1, "", "fit"]], "neural_compressor.strategy": [[384, 0, 0, "-", "auto"], [385, 0, 0, "-", "auto_mixed_precision"], [386, 0, 0, "-", "basic"], [387, 0, 0, "-", "bayesian"], [388, 0, 0, "-", "conservative"], [389, 0, 0, "-", "exhaustive"], [390, 0, 0, "-", "hawq_v2"], [392, 0, 0, "-", "mse"], [393, 0, 0, "-", "mse_v2"], [394, 0, 0, "-", "random"], [395, 0, 0, "-", "strategy"], [397, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[384, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[385, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[386, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[387, 1, 1, "", "BayesianOptimization"], [387, 1, 1, "", "BayesianTuneStrategy"], [387, 1, 1, "", "TargetSpace"], [387, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[388, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[389, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[390, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[392, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[393, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[394, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[395, 1, 1, "", "TuneStrategy"], [395, 1, 1, "", "TuneStrategyMeta"], [395, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[396, 0, 0, "-", "constant"], [398, 0, 0, "-", "tuning_sampler"], [399, 0, 0, "-", "tuning_space"], [400, 0, 0, "-", "tuning_structs"], [401, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[398, 1, 1, "", "BlockFallbackTuningSampler"], [398, 1, 1, "", "FallbackTuningSampler"], [398, 1, 1, "", "LowerBitsSampler"], [398, 1, 1, "", "ModelWiseTuningSampler"], [398, 1, 1, "", "OpTypeWiseTuningSampler"], [398, 1, 1, "", "OpWiseTuningSampler"], [398, 1, 1, "", "SmoothQuantSampler"], [398, 1, 1, "", "TuningOrder"], [398, 1, 1, "", "TuningSampler"]], "neural_compressor.strategy.utils.tuning_space": [[399, 1, 1, "", "TuningItem"], [399, 1, 1, "", "TuningSpace"], [399, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [399, 2, 1, "", "pattern_to_internal"], [399, 2, 1, "", "pattern_to_path"], [399, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[400, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[401, 1, 1, "", "ClassRegister"], [401, 1, 1, "", "OrderedDefaultDict"], [401, 1, 1, "", "QuantOptions"], [401, 1, 1, "", "QuantType"], [401, 2, 1, "", "build_slave_faker_model"], [401, 2, 1, "", "extract_data_type"], [401, 2, 1, "", "get_adaptor_name"], [401, 2, 1, "", "preprocess_user_cfg"], [401, 2, 1, "", "reverted_data_type"]], "neural_compressor.template": [[402, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[402, 1, 1, "", "ExampleClass"], [402, 4, 1, "", "attribute1"], [402, 2, 1, "", "function1"], [402, 2, 1, "", "function2"], [402, 2, 1, "", "function3"], [402, 2, 1, "", "generator1"], [402, 5, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[402, 4, 1, "", "attr1"], [402, 4, 1, "", "attr2"], [402, 4, 1, "", "attr5"]], "neural_compressor.training": [[404, 1, 1, "", "CallBacks"], [404, 1, 1, "", "CompressionManager"], [404, 2, 1, "", "fit"], [404, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[405, 0, 0, "-", "collect_layer_histogram"], [406, 0, 0, "-", "constant"], [407, 0, 0, "-", "create_obj_from_config"], [409, 0, 0, "-", "kl_divergence"], [410, 0, 0, "-", "load_huggingface"], [411, 0, 0, "-", "logger"], [412, 0, 0, "-", "neural_insights_utils"], [413, 0, 0, "-", "options"], [414, 0, 0, "-", "pytorch"], [415, 0, 0, "-", "utility"], [416, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[405, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[407, 2, 1, "", "create_dataloader"], [407, 2, 1, "", "create_dataset"], [407, 2, 1, "", "create_eval_func"], [407, 2, 1, "", "create_train_func"], [407, 2, 1, "", "get_algorithm"], [407, 2, 1, "", "get_func_from_config"], [407, 2, 1, "", "get_metrics"], [407, 2, 1, "", "get_postprocess"], [407, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[409, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[410, 1, 1, "", "OptimizedModel"], [410, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[411, 1, 1, "", "Logger"], [411, 2, 1, "", "debug"], [411, 2, 1, "", "error"], [411, 2, 1, "", "fatal"], [411, 2, 1, "", "info"], [411, 2, 1, "", "log"], [411, 2, 1, "", "warn"], [411, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[412, 2, 1, "", "register_neural_insights_workload"], [412, 2, 1, "", "update_neural_insights_workload"], [412, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[413, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[414, 2, 1, "", "is_int8_model"], [414, 2, 1, "", "load"]], "neural_compressor.utils.utility": [[415, 1, 1, "", "CaptureOutputToFile"], [415, 1, 1, "", "CpuInfo"], [415, 2, 1, "", "Dequantize"], [415, 1, 1, "", "DotDict"], [415, 1, 1, "", "GLOBAL_STATE"], [415, 1, 1, "", "LazyImport"], [415, 1, 1, "", "MODE"], [415, 1, 1, "", "OpEntry"], [415, 1, 1, "", "Statistics"], [415, 2, 1, "", "alias_param"], [415, 2, 1, "", "calculate_mse"], [415, 2, 1, "", "combine_histogram"], [415, 2, 1, "", "compare_objects"], [415, 2, 1, "", "compute_sparsity"], [415, 2, 1, "", "dequantize_weight"], [415, 2, 1, "", "dump_class_attrs"], [415, 2, 1, "", "dump_data_to_local"], [415, 2, 1, "", "dump_elapsed_time"], [415, 2, 1, "", "dump_table"], [415, 2, 1, "", "dump_table_to_csv"], [415, 2, 1, "", "equal_dicts"], [415, 2, 1, "", "fault_tolerant_file"], [415, 2, 1, "", "get_all_fp32_data"], [415, 2, 1, "", "get_number_of_sockets"], [415, 2, 1, "", "get_op_list"], [415, 2, 1, "", "get_size"], [415, 2, 1, "", "get_tensor_histogram"], [415, 2, 1, "", "get_tensors_info"], [415, 2, 1, "", "get_tuning_history"], [415, 2, 1, "", "get_weights_details"], [415, 2, 1, "", "load_data_from_pkl"], [415, 2, 1, "", "mse_metric_gap"], [415, 2, 1, "", "print_op_list"], [415, 2, 1, "", "print_table"], [415, 2, 1, "", "recover"], [415, 2, 1, "", "set_random_seed"], [415, 2, 1, "", "set_resume_from"], [415, 2, 1, "", "set_tensorboard"], [415, 2, 1, "", "set_workspace"], [415, 2, 1, "", "show_memory_info"], [415, 2, 1, "", "singleton"], [415, 2, 1, "", "str2array"], [415, 2, 1, "", "time_limit"], [415, 2, 1, "", "version1_eq_version2"], [415, 2, 1, "", "version1_gt_version2"], [415, 2, 1, "", "version1_gte_version2"], [415, 2, 1, "", "version1_lt_version2"], [415, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[416, 1, 1, "", "WeightsDetails"], [416, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:exception", "4": "py:attribute", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "exception", "Python exception"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "data", "Python data"]}, "titleterms": {"block_mask": [0, 192], "neural_compressor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417], "adaptor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 425, 426, 428], "modul": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 176, 177, 179, 181, 183, 184, 185, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 254, 255, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 278, 280, 281, 282, 284, 285, 286, 287, 289, 290, 292, 293, 294, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 308, 309, 310, 311, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 337, 338, 339, 340, 342, 343, 345, 346, 347, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 362, 364, 366, 367, 368, 369, 371, 372, 374, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 398, 399, 400, 401, 402, 404, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416], "content": [1, 2, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 176, 177, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 340, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 364, 366, 367, 368, 369, 371, 372, 374, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 398, 399, 400, 401, 402, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 424], "class": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 150, 154, 158, 159, 160, 162, 165, 166, 167, 168, 169, 171, 172, 176, 177, 179, 183, 184, 185, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 254, 255, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 287, 288, 289, 292, 295, 296, 297, 298, 299, 300, 302, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 337, 338, 339, 340, 342, 345, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 364, 366, 367, 368, 369, 371, 372, 374, 376, 378, 379, 381, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 398, 399, 400, 401, 402, 404, 405, 408, 409, 410, 411, 413, 415, 416, 425], "function": [1, 13, 16, 34, 42, 43, 44, 66, 67, 69, 103, 104, 115, 117, 147, 148, 149, 150, 155, 156, 157, 160, 161, 163, 164, 165, 167, 170, 172, 176, 177, 179, 180, 181, 183, 185, 186, 190, 193, 199, 200, 201, 202, 203, 205, 214, 215, 223, 225, 229, 232, 233, 234, 237, 239, 240, 241, 242, 244, 246, 247, 249, 258, 266, 268, 272, 275, 276, 277, 279, 280, 281, 284, 285, 286, 289, 290, 292, 293, 294, 295, 296, 303, 310, 314, 319, 320, 321, 323, 328, 334, 338, 340, 342, 343, 345, 346, 347, 348, 349, 350, 354, 358, 360, 377, 382, 383, 387, 395, 399, 401, 402, 404, 407, 408, 410, 411, 412, 414, 415, 450], "subpackag": [2, 17, 86, 110, 111, 113, 151, 178, 180, 209, 234, 252, 277, 288, 312, 330, 341, 391], "submodul": [2, 12, 17, 29, 50, 75, 86, 94, 100, 105, 110, 111, 113, 116, 129, 144, 151, 152, 167, 173, 174, 178, 180, 182, 186, 193, 206, 210, 217, 229, 233, 237, 244, 253, 260, 272, 276, 279, 283, 288, 295, 301, 307, 313, 317, 330, 336, 341, 348, 352, 363, 365, 370, 373, 375, 380, 391, 397, 403, 408], "packag": [2, 29, 167, 180, 186, 193, 217, 229, 233, 234, 237, 244, 260, 272, 276, 277, 279, 288, 295, 307, 312, 313, 330, 348, 352, 391, 408, 474, 476, 478, 479], "kera": 3, "keras_util": [4, 5, 6, 7, 8, 9, 10], "conv2d": 4, "dens": 5, "depthwise_conv2d": 6, "pool2d": 8, "quantiz": [9, 41, 154, 324, 383, 421, 424, 426, 427, 439, 443, 447, 449, 452, 455, 458, 461, 462, 470, 481, 487, 488, 489, 490, 493, 499], "separable_conv2d": 10, "mxnet": [11, 445, 460, 488, 495], "mxnet_util": [12, 13], "util": [13, 43, 147, 156, 163, 203, 335, 336, 337, 338, 339, 340, 377, 382, 396, 397, 398, 399, 400, 401, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 430], "onnxrt": [14, 445, 460, 495], "ox_util": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], "calibr": [15, 16, 426, 443], "oper": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 426, 427], "activ": 18, "argmax": 19, "attent": 20, "binary_op": 21, "concat": 22, "conv": 23, "direct_q8": 24, "embed_layernorm": 25, "gather": 26, "gavgpool": 27, "gemm": 28, "lstm": 30, "matmul": [31, 493], "maxpool": 32, "norm": 33, "op": [34, 452], "pad": 35, "pool": 36, "reduc": 37, "resiz": 38, "split": 39, "unary_op": 40, "smooth_quant": [42, 160, 168], "pytorch": [44, 414, 445, 450, 452, 460, 488, 489, 494, 495, 499], "queri": [45, 425], "tensorflow": [46, 445, 450, 452, 460, 488, 489, 494, 495, 499], "tf_util": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], "graph_convert": 47, "graph_converter_without_calib": 48, "graph_rewrit": [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "bf16": [49, 50, 462], "bf16_convert": [49, 148], "gener": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 426], "convert_add_to_biasadd": 51, "convert_layout": 52, "convert_leakyrelu": 53, "convert_nan_to_random": 54, "convert_placeholder_to_const": 55, "dequantize_cast_optim": 56, "dilated_contract": 57, "dummy_biasadd": 58, "expanddims_optim": 59, "fetch_weight_from_reshap": 60, "fold_batch_norm": 61, "fold_const": 62, "fuse_biasadd_add": 63, "fuse_column_wise_mul": 64, "fuse_conv_with_math": 65, "fuse_decomposed_bn": 66, "fuse_decomposed_in": 67, "fuse_gelu": 68, "fuse_layer_norm": 69, "fuse_pad_with_conv": 70, "fuse_pad_with_fp32_conv": 71, "fuse_reshape_transpos": 72, "graph_cse_optim": 73, "grappler_pass": 74, "insert_print_nod": 76, "move_squeeze_after_relu": 77, "pre_optim": 78, "remove_training_nod": 79, "rename_batch_norm": 80, "split_shared_input": 81, "strip_equivalent_nod": 82, "strip_unused_nod": 83, "switch_optim": 84, "graph_bas": 85, "int8": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 452, 499], "freeze_fake_qu": 87, "freeze_valu": 88, "freeze_value_without_calib": 89, "fuse_conv_redundant_dequant": 90, "fuse_conv_requant": 91, "fuse_matmul_redundant_dequant": 92, "fuse_matmul_requant": 93, "meta_op_optim": 95, "post_hostconst_convert": 96, "post_quantized_op_cs": 97, "rnn_convert": 98, "scale_propag": 99, "onnx": [100, 101, 102, 103, 104, 429, 458, 488, 499], "onnx_graph": 101, "onnx_nod": 102, "onnx_schema": 103, "tf2onnx_util": 104, "qdq": [105, 106, 107, 108, 122, 123, 124, 125, 126, 127, 128, 129, 130, 499], "insert_qdq_pattern": 106, "merge_duplicated_qdq": 107, "share_qdq_y_pattern": 108, "graph_util": 109, "quantize_graph": [111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137], "qat": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 499], "fake_quant": 112, "quantize_config": 114, "quantize_help": 115, "quantize_lay": [116, 117, 118, 119, 120], "optimize_lay": 117, "quantize_layer_add": 118, "quantize_layer_bas": 119, "quantize_layer_bn": 120, "quantize_wrapp": 121, "fuse_qdq_bn": 122, "fuse_qdq_concatv2": 123, "fuse_qdq_conv": 124, "fuse_qdq_deconv": 125, "fuse_qdq_in": 126, "fuse_qdq_matmul": 127, "fuse_qdq_pool": 128, "optimize_qdq": 130, "quantize_graph_bas": 131, "quantize_graph_bn": 132, "quantize_graph_concatv2": 133, "quantize_graph_conv": 134, "quantize_graph_for_intel_cpu": 135, "quantize_graph_matmul": 136, "quantize_graph_pool": 137, "quantize_graph_common": 138, "smooth_quant_calibr": 139, "smooth_quant_scal": 140, "tf2onnx_convert": 141, "transform_graph": [142, 143, 144, 145, 146], "bias_correct": 142, "graph_transform_bas": 143, "insert_log": 145, "rerange_quantized_concat": 146, "torch_util": [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 249], "gptq": 149, "hawq_metr": 150, "layer_wise_qu": [152, 153, 154, 155, 156], "modified_pickl": 153, "torch_load": 155, "mixed_precis": [157, 297], "model_wrapp": 158, "pattern_detector": 159, "symbolic_trac": 161, "teq": 162, "weight_onli": 164, "algorithm": [165, 166, 167, 168, 169, 443, 493, 496], "fast_bias_correct": 166, "weight_correct": 169, "benchmark": [170, 241, 433, 442, 447, 461, 487], "compress": [171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 251, 434, 490], "callback": 171, "distil": [172, 173, 282, 448, 449, 461, 487, 499], "criterion": [172, 242], "hpo": [174, 175, 176, 177], "sa_optim": 175, "search_algorithm": [176, 304], "search_spac": 177, "pruner": [179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 310, 321], "criteria": [179, 485, 496], "model_slim": [181, 182, 183, 184], "auto_slim": 181, "pattern_analyz": 183, "weight_slim": 184, "pattern": [185, 186, 187, 188, 189, 313, 314, 315, 319, 485], "base": [185, 190, 458, 497], "mha": [187, 194], "ninm": 188, "nxm": 189, "basic": [191, 327, 386, 422, 496], "pattern_lock": [195, 309], "progress": 196, "retrain_fre": 197, "sparse_gpt": 198, "prune": [199, 311, 322, 461, 485, 487, 499], "reg": 200, "schedul": [201, 323, 325, 485], "tf_criteria": 202, "conf": [204, 205, 206, 207], "config": [204, 208, 435, 445, 483], "dotdict": 205, "pythonic_config": 207, "contrib": [209, 210, 211, 212, 252, 253, 254, 255], "strategi": [210, 211, 212, 253, 254, 255, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 440, 492, 496], "sigopt": [211, 254, 492, 496], "tpe": [212, 255, 496], "data": [213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 426, 427, 447, 451], "dataload": [213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 243, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 444, 445], "base_dataload": [213, 256], "default_dataload": [215, 258], "fetcher": [216, 259], "attribut": [217, 225, 234, 268, 277, 288, 312, 352, 402, 408, 419], "mxnet_dataload": [218, 261], "onnxrt_dataload": [219, 262], "pytorch_dataload": [220, 263], "sampler": [221, 264], "tensorflow_dataload": [222, 265], "dataset": [223, 224, 225, 226, 227, 228, 229, 230, 266, 267, 268, 269, 270, 271, 272, 273, 445, 447, 456], "bert_dataset": [223, 266], "coco_dataset": [224, 267], "dummy_dataset": [226, 269], "dummy_dataset_v2": [227, 270], "imagenet_dataset": [228, 271], "style_transfer_dataset": [230, 273], "filter": [231, 232, 233, 274, 275, 276], "coco_filt": [231, 274], "transform": [235, 236, 237, 238, 239, 240, 278, 279, 280, 281, 456, 495], "coco_transform": 235, "imagenet_transform": [236, 278], "postprocess": [238, 248], "token": [239, 280], "experiment": [241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "common": [242, 243, 244, 245, 246, 247, 248, 249, 421, 453], "metric": [245, 289, 290, 291, 292, 293, 294, 295, 296, 342, 343, 344, 345, 346, 347, 348, 349, 456, 460], "model": [246, 351, 352, 353, 354, 355, 356, 357, 358, 359, 426, 437, 452, 455, 458, 461, 463, 470, 485, 490, 493, 499], "optim": [247, 471, 481, 484, 485, 497], "compon": 250, "export": [283, 284, 285, 286, 452, 490], "qlinear2qdq": 284, "tf2onnx": 285, "torch2onnx": 286, "graph_optim": 287, "bleu": [289, 342], "bleu_util": [290, 343], "coco_label_map": [291, 344], "coco_tool": [292, 345], "evaluate_squad": [293, 346], "f1": [294, 347], "model_convers": 298, "na": [299, 300, 301, 302, 303, 304, 422, 487], "basic_na": 299, "dyna": 300, "nas_util": 303, "pruner_legaci": [305, 306, 307, 308, 309, 310], "gradient_sensit": 305, "group_lasso": 306, "magnitud": 308, "pruning_recip": [312, 313, 314, 315], "tile_pattern": 315, "pruning_v2": 316, "pytorch_prun": [317, 318, 319, 320, 321, 322, 323], "logger": [318, 411], "prune_util": 320, "auto_mixed_precis": [326, 385], "bayesian": [328, 387, 496], "exhaust": [329, 389, 496], "mse": [331, 392, 496], "mse_v2": [332, 393, 496], "random": [333, 394, 496], "constant": [335, 396, 406], "tuning_sampl": [337, 398], "tuning_spac": [338, 399], "tuning_struct": [339, 400], "mix_precis": 350, "base_model": 351, "keras_model": 353, "mxnet_model": 355, "nets_factori": 356, "onnx_model": 357, "tensorflow_model": 358, "torch_model": 359, "object": [360, 438, 483], "profil": [361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 447], "parser": [362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "factori": [362, 364, 369, 372, 374, 379], "onnx_pars": [364, 365, 366], "result": 368, "tensorflow_pars": [369, 370, 371], "onnxrt_profil": [374, 375, 376, 377], "tensorflow_profil": [379, 380, 381, 382], "auto": [384, 475, 481, 489, 493, 496], "conserv": [388, 496], "hawq_v2": [390, 496], "templat": [402, 403, 420], "api_doc_exampl": 402, "train": [404, 421, 441, 450, 461, 488], "collect_layer_histogram": 405, "create_obj_from_config": 407, "kl_diverg": 409, "load_huggingfac": 410, "neural_insights_util": 412, "option": [413, 450, 469], "weights_detail": 416, "version": 417, "intel": [418, 424, 444, 447, 457, 458, 460, 461, 467, 475, 481, 499, 500], "neural": [418, 421, 422, 424, 444, 447, 457, 458, 460, 461, 464, 468, 470, 475, 481, 485, 492, 497, 500], "compressor": [418, 421, 424, 444, 447, 457, 458, 460, 461, 475, 481, 492, 500], "document": [418, 424, 431, 500], "section": [418, 500], "contributor": [419, 420], "coven": [419, 420], "code": [419, 420, 422, 461, 482, 490, 497], "conduct": [419, 420], "our": [419, 493], "pledg": 419, "standard": 419, "respons": 419, "scope": [419, 485], "enforc": 419, "contribut": [420, 474, 478], "guidelin": 420, "pull": 420, "request": [420, 462], "checklist": 420, "support": [420, 421, 422, 425, 427, 442, 443, 444, 445, 447, 448, 449, 450, 452, 454, 457, 458, 460, 462, 463, 465, 466, 470, 471, 483, 484, 485, 487, 488, 490, 493, 494, 495, 498], "fx": 421, "introduct": [421, 422, 425, 426, 427, 442, 443, 444, 445, 447, 448, 449, 450, 452, 454, 457, 460, 462, 463, 481, 483, 484, 485, 487, 488, 490, 492, 493, 494, 495, 496, 498], "mode": [421, 499], "matrix": [421, 422, 425, 442, 443, 444, 445, 447, 448, 449, 450, 452, 454, 457, 460, 462, 463, 466, 483, 484, 485, 487, 488, 490, 493, 494, 498], "get": [421, 422, 424, 425, 442, 444, 445, 447, 448, 449, 450, 454, 455, 460, 462, 464, 475, 482, 483, 484, 485, 487, 488, 494, 498], "start": [421, 422, 424, 425, 442, 444, 445, 447, 448, 449, 450, 454, 455, 460, 462, 464, 465, 469, 475, 483, 484, 485, 487, 488, 494, 498], "post": [421, 461, 488], "static": [421, 488], "dynam": [421, 422, 488], "awar": [421, 461, 488], "exampl": [421, 422, 425, 431, 442, 444, 445, 447, 448, 449, 450, 451, 452, 460, 461, 462, 463, 466, 470, 483, 484, 485, 488, 490, 493, 494, 499], "note": [421, 491], "detail": 421, "problem": 421, "architectur": [422, 446, 457, 458], "search": [422, 481], "api": [422, 424, 425, 426, 431, 432, 442, 444, 445, 448, 449, 450, 455, 456, 460, 462, 464, 468, 482, 483, 484, 485, 487, 497], "usag": [422, 470, 481, 494, 496], "1": [422, 450, 453, 456, 461, 481, 499], "python": [422, 424, 444, 455, 460, 464, 468, 469, 476, 479, 487, 497], "yaml": [422, 426, 445, 450, 454, 498], "2": [422, 450, 453, 456, 461, 481, 499], "onli": [422, 490], "advanc": [422, 497], "custom": [422, 444, 460, 496], "secur": [423, 450], "polici": [423, 496], "report": 423, "vulner": 423, "instal": [424, 447, 458, 465, 467, 474, 475, 478], "from": [424, 426, 458, 461], "pypi": [424, 470], "select": [424, 475], "public": [424, 486], "event": [424, 486], "addit": 424, "research": 424, "collabor": 424, "work": [425, 488], "flow": [425, 488], "background": [425, 481], "ad": 425, "new": [425, 427, 476, 479, 496], "backend": [425, 488], "capabl": [425, 490], "implement": [425, 426], "onnxrtadaptor": 425, "how": [426, 427, 447], "add": 426, "an": 426, "list": [426, 451, 495], "need": 426, "design": [426, 446, 496], "framework": [426, 444, 445, 452, 454, 463, 487, 490, 493], "query_fw_cap": 426, "accord": [426, 427], "tune_cfg": 426, "prepar": [426, 447, 492], "fp32": [426, 452], "graph": 426, "run": [426, 447, 482], "sampl": [426, 455], "iter": 426, "calcul": 426, "rang": 426, "type": [427, 485], "like": 427, "int4": 427, "few": 427, "line": 427, "chang": [427, 456, 480, 482, 491], "defin": [427, 450], "abil": 427, "specif": [427, 445], "invok": 427, "kernel": 427, "tune": [427, 488, 493, 496], "configur": [427, 450, 454, 487, 492, 498], "us": [427, 444, 460], "summari": 427, "runtim": [429, 458, 488, 499], "torch": [430, 499], "mix": [436, 461, 462, 489], "precis": [436, 461, 462, 489], "refer": [443, 485, 488, 490, 493], "build": [444, 453, 460], "file": [445, 454, 498], "user": [445, 450, 456, 487, 490, 497, 498], "workflow": 446, "diagnosi": 447, "featur": [447, 450, 454, 457, 470, 471, 475, 487, 488, 494, 498], "modifi": 447, "script": 447, "see": 447, "do": [447, 464], "paramet": 447, "descript": 447, "suggest": 447, "fallback": 447, "set": [447, 467, 481], "knowledg": [448, 499], "intermedi": 448, "layer": [448, 493], "self": 448, "distribut": [450, 470, 496], "infer": 450, "evalu": 450, "pure": 450, "horovodrun": 450, "execut": 450, "releas": [451, 476, 479, 491], "appendix": 452, "frequent": 453, "ask": 453, "question": 453, "issu": [453, 491], "3": [453, 465, 481], "4": [453, 472, 481, 486], "quick": [455, 469], "valid": [455, 458, 493, 499], "incompat": [456, 491], "between": 456, "v1": 456, "face": 456, "built": [456, 458, 460], "infrastructur": 457, "linux": 458, "prerequisit": 458, "binari": 458, "sourc": 458, "ai": 458, "kit": 458, "window": 458, "system": 458, "requir": [458, 474, 478], "hardwar": [458, 462, 499], "environ": [458, 467], "cpu": [458, 467, 499], "64": 458, "compat": 458, "processor": 458, "gpu": 458, "": [458, 482], "xe": 458, "multipl": [458, 483, 499], "vendor": 458, "through": [458, 499], "softwar": [458, 462], "legal": 459, "inform": 459, "licens": 459, "citat": 459, "trademark": 459, "migrat": 461, "x": 461, "orchestr": [461, 484], "fp16": 462, "dure": [462, 489], "accuraci": [462, 488, 496], "driven": 462, "coder": [464, 468, 470, 481, 497], "what": [464, 482], "we": 464, "offer": 464, "jupyt": [464, 465, 476, 479], "lab": [464, 465], "extens": [464, 474, 475, 478, 481, 482, 499], "launcher": [464, 469], "contact": 464, "aw": 465, "amazon": 465, "sagemak": 465, "For": 465, "studio": 465, "notebook": 465, "instanc": 465, "guid": [465, 497], "bigdl": 466, "nano": 466, "platform": [467, 492], "best": [467, 475], "perform": [467, 492], "mkl": 467, "openmp": 467, "jemalloc": 467, "numa": 467, "control": 467, "variabl": 467, "frequenc": 467, "govern": 467, "enabl": [468, 475, 481], "bench": 468, "superbench": 468, "argument": 469, "v0": 472, "highlight": 472, "other": 472, "changelog": [473, 477], "neural_compressor_ext_lab": [474, 476], "uninstal": [474, 478], "develop": [474, 478], "jupyterlab": 475, "Or": 475, "let": 475, "u": 475, "help": 475, "you": 475, "pre": 475, "requisit": 475, "make": [476, 479, 482], "manual": [476, 479], "npm": [476, 479], "autom": [476, 479], "publish": [476, 479], "conda": [476, 479], "forg": [476, 479], "neural_compressor_ext_lab_alibaba": [478, 479], "log": 480, "unreleas": 480, "vscode": 481, "open": 481, "icon": 481, "5": 481, "welcom": 482, "your": 482, "v": 482, "folder": 482, "setup": 482, "up": 482, "straight": 482, "awai": 482, "explor": 482, "test": 482, "go": 482, "further": 482, "singl": 483, "One": 484, "shot": 484, "network": 485, "sparsiti": 485, "decai": 485, "regular": 485, "spars": 485, "deploy": 485, "hyperparamet": 485, "full": 486, "70": 486, "2023": 486, "17": 486, "2022": 486, "34": 486, "2021": 486, "15": [486, 499], "2018": 486, "2020": 486, "style": 487, "access": 487, "fundament": [488, 493], "scheme": 488, "ipex": 488, "approach": 488, "With": 488, "without": 488, "specifi": 488, "rule": 488, "recip": 488, "devic": 488, "turn": 489, "off": 489, "weight": 490, "known": 491, "benefit": 492, "comparison": 492, "differ": 492, "smooth": 493, "quant": 493, "per": 493, "tensor": 493, "channel": 493, "limit": 493, "smoothquant": 493, "enhanc": 493, "wise": 493, "alpha": 493, "engin": 493, "tensorboard": 494, "space": 496, "exit": 496, "process": 496, "overview": 497, "zero": 497, "topic": 497, "innov": 497, "product": 497, "12": 499, "0": 499, "ptq": 499}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"block_mask": [[0, "module-block_mask"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "Module Contents": [[1, "module-contents"], [3, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [112, "module-contents"], [114, "module-contents"], [115, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [130, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [176, "module-contents"], [177, "module-contents"], [179, "module-contents"], [181, "module-contents"], [183, "module-contents"], [184, "module-contents"], [185, "module-contents"], [187, "module-contents"], [188, "module-contents"], [189, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [194, "module-contents"], [195, "module-contents"], [196, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [204, "module-contents"], [205, "module-contents"], [207, "module-contents"], [208, "module-contents"], [211, "module-contents"], [212, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"], [221, "module-contents"], [222, "module-contents"], [223, "module-contents"], [224, "module-contents"], [225, "module-contents"], [226, "module-contents"], [227, "module-contents"], [228, "module-contents"], [230, "module-contents"], [231, "module-contents"], [232, "module-contents"], [235, "module-contents"], [236, "module-contents"], [238, "module-contents"], [239, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [245, "module-contents"], [246, "module-contents"], [247, "module-contents"], [248, "module-contents"], [249, "module-contents"], [250, "module-contents"], [254, "module-contents"], [255, "module-contents"], [256, "module-contents"], [258, "module-contents"], [259, "module-contents"], [261, "module-contents"], [262, "module-contents"], [263, "module-contents"], [264, "module-contents"], [265, "module-contents"], [266, "module-contents"], [267, "module-contents"], [268, "module-contents"], [269, "module-contents"], [270, "module-contents"], [271, "module-contents"], [273, "module-contents"], [274, "module-contents"], [275, "module-contents"], [278, "module-contents"], [280, "module-contents"], [281, "module-contents"], [282, "module-contents"], [284, "module-contents"], [285, "module-contents"], [286, "module-contents"], [287, "module-contents"], [289, "module-contents"], [290, "module-contents"], [292, "module-contents"], [293, "module-contents"], [294, "module-contents"], [296, "module-contents"], [297, "module-contents"], [298, "module-contents"], [299, "module-contents"], [300, "module-contents"], [302, "module-contents"], [303, "module-contents"], [304, "module-contents"], [305, "module-contents"], [306, "module-contents"], [308, "module-contents"], [309, "module-contents"], [310, "module-contents"], [311, "module-contents"], [314, "module-contents"], [315, "module-contents"], [316, "module-contents"], [319, "module-contents"], [320, "module-contents"], [321, "module-contents"], [322, "module-contents"], [323, "module-contents"], [324, "module-contents"], [325, "module-contents"], [326, "module-contents"], [327, "module-contents"], [328, "module-contents"], [329, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [337, "module-contents"], [338, "module-contents"], [339, "module-contents"], [340, "module-contents"], [342, "module-contents"], [343, "module-contents"], [345, "module-contents"], [346, "module-contents"], [347, "module-contents"], [349, "module-contents"], [350, "module-contents"], [351, "module-contents"], [353, "module-contents"], [354, "module-contents"], [355, "module-contents"], [356, "module-contents"], [357, "module-contents"], [358, "module-contents"], [359, "module-contents"], [360, "module-contents"], [362, "module-contents"], [364, "module-contents"], [366, "module-contents"], [367, "module-contents"], [368, "module-contents"], [369, "module-contents"], [371, "module-contents"], [372, "module-contents"], [374, "module-contents"], [376, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [381, "module-contents"], [382, "module-contents"], [383, "module-contents"], [384, "module-contents"], [385, "module-contents"], [386, "module-contents"], [387, "module-contents"], [388, "module-contents"], [389, "module-contents"], [390, "module-contents"], [392, "module-contents"], [393, "module-contents"], [394, "module-contents"], [395, "module-contents"], [398, "module-contents"], [399, "module-contents"], [400, "module-contents"], [401, "module-contents"], [402, "module-contents"], [404, "module-contents"], [405, "module-contents"], [407, "module-contents"], [409, "module-contents"], [410, "module-contents"], [411, "module-contents"], [412, "module-contents"], [413, "module-contents"], [414, "module-contents"], [415, "module-contents"], [416, "module-contents"]], "Classes": [[1, "classes"], [3, "classes"], [11, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [101, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [112, "classes"], [114, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [130, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [145, "classes"], [146, "classes"], [148, "classes"], [149, "classes"], [150, "classes"], [154, "classes"], [158, "classes"], [159, "classes"], [160, "classes"], [162, "classes"], [165, "classes"], [166, "classes"], [167, "classes"], [168, "classes"], [169, "classes"], [171, "classes"], [172, "classes"], [176, "classes"], [177, "classes"], [179, "classes"], [183, "classes"], [184, "classes"], [185, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [204, "classes"], [205, "classes"], [207, "classes"], [208, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [222, "classes"], [223, "classes"], [224, "classes"], [225, "classes"], [226, "classes"], [227, "classes"], [228, "classes"], [229, "classes"], [230, "classes"], [231, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [250, "classes"], [254, "classes"], [255, "classes"], [256, "classes"], [258, "classes"], [259, "classes"], [261, "classes"], [262, "classes"], [263, "classes"], [264, "classes"], [265, "classes"], [266, "classes"], [267, "classes"], [268, "classes"], [269, "classes"], [270, "classes"], [271, "classes"], [272, "classes"], [273, "classes"], [274, "classes"], [275, "classes"], [276, "classes"], [277, "classes"], [278, "classes"], [279, "classes"], [280, "classes"], [281, "classes"], [282, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [292, "classes"], [295, "classes"], [296, "classes"], [297, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [302, "classes"], [304, "classes"], [305, "classes"], [306, "classes"], [308, "classes"], [309, "classes"], [310, "classes"], [311, "classes"], [312, "classes"], [313, "classes"], [314, "classes"], [315, "classes"], [316, "classes"], [319, "classes"], [321, "classes"], [322, "classes"], [323, "classes"], [324, "classes"], [325, "classes"], [326, "classes"], [327, "classes"], [328, "classes"], [329, "classes"], [331, "classes"], [332, "classes"], [333, "classes"], [334, "classes"], [337, "classes"], [338, "classes"], [339, "classes"], [340, "classes"], [342, "classes"], [345, "classes"], [348, "classes"], [349, "classes"], [351, "classes"], [352, "classes"], [353, "classes"], [354, "classes"], [355, "classes"], [356, "classes"], [357, "classes"], [358, "classes"], [359, "classes"], [360, "classes"], [362, "classes"], [364, "classes"], [366, "classes"], [367, "classes"], [368, "classes"], [369, "classes"], [371, "classes"], [372, "classes"], [374, "classes"], [376, "classes"], [378, "classes"], [379, "classes"], [381, "classes"], [384, "classes"], [385, "classes"], [386, "classes"], [387, "classes"], [388, "classes"], [389, "classes"], [390, "classes"], [392, "classes"], [393, "classes"], [394, "classes"], [395, "classes"], [398, "classes"], [399, "classes"], [400, "classes"], [401, "classes"], [402, "classes"], [404, "classes"], [405, "classes"], [408, "classes"], [409, "classes"], [410, "classes"], [411, "classes"], [413, "classes"], [415, "classes"], [416, "classes"]], "Functions": [[1, "functions"], [13, "functions"], [16, "functions"], [34, "functions"], [42, "functions"], [43, "functions"], [44, "functions"], [66, "functions"], [67, "functions"], [69, "functions"], [103, "functions"], [104, "functions"], [115, "functions"], [117, "functions"], [147, "functions"], [148, "functions"], [149, "functions"], [150, "functions"], [155, "functions"], [156, "functions"], [157, "functions"], [160, "functions"], [161, "functions"], [163, "functions"], [164, "functions"], [165, "functions"], [167, "functions"], [170, "functions"], [172, "functions"], [176, "functions"], [177, "functions"], [179, "functions"], [180, "functions"], [181, "functions"], [183, "functions"], [185, "functions"], [186, "functions"], [190, "functions"], [193, "functions"], [199, "functions"], [200, "functions"], [201, "functions"], [202, "functions"], [203, "functions"], [205, "functions"], [214, "functions"], [215, "functions"], [223, "functions"], [225, "functions"], [229, "functions"], [232, "functions"], [233, "functions"], [234, "functions"], [237, "functions"], [239, "functions"], [240, "functions"], [241, "functions"], [242, "functions"], [244, "functions"], [246, "functions"], [247, "functions"], [249, "functions"], [258, "functions"], [266, "functions"], [268, "functions"], [272, "functions"], [275, "functions"], [276, "functions"], [277, "functions"], [279, "functions"], [280, "functions"], [281, "functions"], [284, "functions"], [285, "functions"], [286, "functions"], [289, "functions"], [290, "functions"], [292, "functions"], [293, "functions"], [294, "functions"], [295, "functions"], [296, "functions"], [303, "functions"], [310, "functions"], [314, "functions"], [319, "functions"], [320, "functions"], [321, "functions"], [323, "functions"], [328, "functions"], [334, "functions"], [338, "functions"], [340, "functions"], [342, "functions"], [343, "functions"], [345, "functions"], [346, "functions"], [347, "functions"], [348, "functions"], [349, "functions"], [350, "functions"], [354, "functions"], [358, "functions"], [360, "functions"], [377, "functions"], [382, "functions"], [383, "functions"], [387, "functions"], [395, "functions"], [399, "functions"], [401, "functions"], [402, "functions"], [404, "functions"], [407, "functions"], [408, "functions"], [410, "functions"], [411, "functions"], [412, "functions"], [414, "functions"], [415, "functions"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "Subpackages": [[2, "subpackages"], [17, "subpackages"], [86, "subpackages"], [110, "subpackages"], [111, "subpackages"], [113, "subpackages"], [151, "subpackages"], [178, "subpackages"], [180, "subpackages"], [209, "subpackages"], [234, "subpackages"], [252, "subpackages"], [277, "subpackages"], [288, "subpackages"], [312, "subpackages"], [330, "subpackages"], [341, "subpackages"], [391, "subpackages"]], "Submodules": [[2, "submodules"], [12, "submodules"], [17, "submodules"], [29, "submodules"], [50, "submodules"], [75, "submodules"], [86, "submodules"], [94, "submodules"], [100, "submodules"], [105, "submodules"], [110, "submodules"], [111, "submodules"], [113, "submodules"], [116, "submodules"], [129, "submodules"], [144, "submodules"], [151, "submodules"], [152, "submodules"], [167, "submodules"], [173, "submodules"], [174, "submodules"], [178, "submodules"], [180, "submodules"], [182, "submodules"], [186, "submodules"], [193, "submodules"], [206, "submodules"], [210, "submodules"], [217, "submodules"], [229, "submodules"], [233, "submodules"], [237, "submodules"], [244, "submodules"], [253, "submodules"], [260, "submodules"], [272, "submodules"], [276, "submodules"], [279, "submodules"], [283, "submodules"], [288, "submodules"], [295, "submodules"], [301, "submodules"], [307, "submodules"], [313, "submodules"], [317, "submodules"], [330, "submodules"], [336, "submodules"], [341, "submodules"], [348, "submodules"], [352, "submodules"], [363, "submodules"], [365, "submodules"], [370, "submodules"], [373, "submodules"], [375, "submodules"], [380, "submodules"], [391, "submodules"], [397, "submodules"], [403, "submodules"], [408, "submodules"]], "Package Contents": [[2, "package-contents"], [29, "package-contents"], [167, "package-contents"], [180, "package-contents"], [186, "package-contents"], [193, "package-contents"], [217, "package-contents"], [229, "package-contents"], [233, "package-contents"], [234, "package-contents"], [237, "package-contents"], [244, "package-contents"], [260, "package-contents"], [272, "package-contents"], [276, "package-contents"], [277, "package-contents"], [279, "package-contents"], [288, "package-contents"], [295, "package-contents"], [307, "package-contents"], [312, "package-contents"], [313, "package-contents"], [330, "package-contents"], [348, "package-contents"], [352, "package-contents"], [391, "package-contents"], [408, "package-contents"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[44, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[45, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[46, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[110, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[139, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[141, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[142, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[147, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[148, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.gptq": [[149, "module-neural_compressor.adaptor.torch_utils.gptq"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[150, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[151, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[152, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[153, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[154, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[155, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[156, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[157, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[158, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[159, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[160, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[161, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.teq": [[162, "module-neural_compressor.adaptor.torch_utils.teq"]], "neural_compressor.adaptor.torch_utils.util": [[163, "module-neural_compressor.adaptor.torch_utils.util"]], "}": [[163, "id3"]], "neural_compressor.adaptor.torch_utils.weight_only": [[164, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "neural_compressor.algorithm.algorithm": [[165, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[166, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[167, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[168, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[169, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[170, "module-neural_compressor.benchmark"]], "neural_compressor.compression.callbacks": [[171, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[172, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[173, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression.hpo": [[174, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[175, "module-neural_compressor.compression.hpo.sa_optimizer"]], "neural_compressor.compression.hpo.search_algorithms": [[176, "module-neural_compressor.compression.hpo.search_algorithms"]], "neural_compressor.compression.hpo.search_space": [[177, "module-neural_compressor.compression.hpo.search_space"]], "neural_compressor.compression": [[178, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[179, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner": [[180, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[181, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "neural_compressor.compression.pruner.model_slim": [[182, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[183, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[184, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns.base": [[185, "module-neural_compressor.compression.pruner.patterns.base"]], "neural_compressor.compression.pruner.patterns": [[186, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.patterns.mha": [[187, "module-neural_compressor.compression.pruner.patterns.mha"]], "neural_compressor.compression.pruner.patterns.ninm": [[188, "module-neural_compressor.compression.pruner.patterns.ninm"]], "neural_compressor.compression.pruner.patterns.nxm": [[189, "module-neural_compressor.compression.pruner.patterns.nxm"]], "neural_compressor.compression.pruner.pruners.base": [[190, "module-neural_compressor.compression.pruner.pruners.base"]], "neural_compressor.compression.pruner.pruners.basic": [[191, "module-neural_compressor.compression.pruner.pruners.basic"]], "neural_compressor.compression.pruner.pruners.block_mask": [[192, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "neural_compressor.compression.pruner.pruners": [[193, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.pruners.mha": [[194, "module-neural_compressor.compression.pruner.pruners.mha"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[195, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "neural_compressor.compression.pruner.pruners.progressive": [[196, "module-neural_compressor.compression.pruner.pruners.progressive"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[197, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[198, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"]], "neural_compressor.compression.pruner.pruning": [[199, "module-neural_compressor.compression.pruner.pruning"]], "neural_compressor.compression.pruner.regs": [[200, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[201, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.tf_criteria": [[202, "module-neural_compressor.compression.pruner.tf_criteria"]], "neural_compressor.compression.pruner.utils": [[203, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.conf.config": [[204, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[205, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[206, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[207, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[208, "module-neural_compressor.config"]], "neural_compressor.contrib": [[209, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[210, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[211, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[212, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[213, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[214, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[215, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[216, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[217, "module-neural_compressor.data.dataloaders"]], "Attributes": [[217, "attributes"], [225, "attributes"], [234, "attributes"], [268, "attributes"], [277, "attributes"], [288, "attributes"], [312, "attributes"], [352, "attributes"], [402, "attributes"], [408, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[218, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[219, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[220, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[221, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[222, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[223, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[224, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[225, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[226, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[227, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[228, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[229, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[230, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[231, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[232, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[233, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[234, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[235, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[236, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[237, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[238, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[239, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[240, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[241, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[242, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[243, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[244, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[245, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[246, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[247, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[248, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[249, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[250, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[251, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[252, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[253, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[254, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[255, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[256, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[257, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[258, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[259, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[260, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[261, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[262, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[263, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[264, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[265, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[266, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[267, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[268, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[269, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[270, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[271, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[272, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[273, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[274, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[275, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[276, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[277, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[278, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[279, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[280, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[281, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[282, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[283, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[284, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[285, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[286, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.graph_optimization": [[287, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[288, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[289, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[290, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[291, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[292, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[293, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[294, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[295, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[296, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[297, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[298, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[299, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[300, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[301, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[302, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[303, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[304, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[305, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[306, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[307, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[308, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[309, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[310, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[311, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[312, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[313, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[314, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[315, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[316, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[317, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[318, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[319, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[320, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[321, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[322, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[323, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[324, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[325, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[326, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[327, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[328, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[329, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[330, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.mse": [[331, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[332, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[333, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[334, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils.constant": [[335, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[336, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[337, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[338, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[339, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[340, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor": [[341, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[342, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[343, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[344, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[345, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[346, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[347, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[348, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[349, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[350, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[351, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[352, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[353, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[354, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[355, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[356, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[357, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[358, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[359, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[360, "module-neural_compressor.objective"]], "neural_compressor.profiling": [[361, "module-neural_compressor.profiling"]], "neural_compressor.profiling.parser.factory": [[362, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[363, "module-neural_compressor.profiling.parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[364, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[365, "module-neural_compressor.profiling.parser.onnx_parser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[366, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "neural_compressor.profiling.parser.parser": [[367, "module-neural_compressor.profiling.parser.parser"]], "neural_compressor.profiling.parser.result": [[368, "module-neural_compressor.profiling.parser.result"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[369, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[370, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[371, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "neural_compressor.profiling.profiler.factory": [[372, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[373, "module-neural_compressor.profiling.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[374, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[375, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[376, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[377, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "neural_compressor.profiling.profiler.profiler": [[378, "module-neural_compressor.profiling.profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[379, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[380, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[381, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[382, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "neural_compressor.quantization": [[383, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[384, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[385, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[386, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[387, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[388, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[389, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[390, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[391, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[392, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[393, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[394, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[395, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[396, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[397, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[398, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[399, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[400, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[401, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[402, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[403, "module-neural_compressor.template"]], "neural_compressor.training": [[404, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[405, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[406, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[407, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[408, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[409, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[410, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[411, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[412, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[413, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[414, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[415, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[416, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[417, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[418, "intel-neural-compressor-documentation"], [500, "intel-neural-compressor-documentation"]], "Sections": [[418, "sections"], [500, "sections"]], "Contributor Covenant Code of Conduct": [[419, "contributor-covenant-code-of-conduct"], [420, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[419, "our-pledge"]], "Our Standards": [[419, "our-standards"]], "Our Responsibilities": [[419, "our-responsibilities"]], "Scope": [[419, "scope"]], "Enforcement": [[419, "enforcement"]], "Attribution": [[419, "attribution"]], "Contribution Guidelines": [[420, "contribution-guidelines"]], "Pull Request Checklist": [[420, "pull-request-checklist"]], "Pull Request Template": [[420, "pull-request-template"]], "Support": [[420, "support"]], "FX": [[421, "fx"]], "Introduction": [[421, "introduction"], [422, "introduction"], [425, "introduction"], [426, "introduction"], [427, "introduction"], [442, "introduction"], [443, "introduction"], [444, "introduction"], [445, "introduction"], [448, "introduction"], [449, "introduction"], [450, "introduction"], [452, "introduction"], [454, "introduction"], [457, "introduction"], [460, "introduction"], [462, "introduction"], [463, "introduction"], [483, "introduction"], [484, "introduction"], [485, "introduction"], [487, "introduction"], [490, "introduction"], [492, "introduction"], [493, "introduction"], [494, "introduction"], [495, "introduction"], [496, "introduction"], [498, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[421, "fx-mode-support-matrix-in-neural-compressor"]], "Get Started": [[421, "get-started"], [488, "get-started"]], "Post Training Static Quantization": [[421, "post-training-static-quantization"], [488, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[421, "post-training-dynamic-quantization"], [488, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[421, "quantization-aware-training"]], "Examples": [[421, "examples"], [422, "examples"], [442, "examples"], [444, "examples"], [445, "examples"], [448, "examples"], [449, "examples"], [450, "examples"], [451, "examples"], [452, "examples"], [461, "examples"], [462, "examples"], [463, "examples"], [484, "examples"], [485, "examples"], [488, "examples"], [490, "examples"], [494, "examples"]], "Note": [[421, "note"]], "Details": [[421, "details"]], "Common Problem": [[421, "common-problem"]], "Dynamic Quantization": [[421, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[421, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[422, "neural-architecture-search"]], "Basic NAS": [[422, "basic-nas"]], "Dynamic NAS": [[422, "dynamic-nas"]], "NAS Support Matrix": [[422, "nas-support-matrix"]], "Get Started with NAS API": [[422, "get-started-with-nas-api"]], "Basic Usage": [[422, "basic-usage"]], "1. Python code + YAML": [[422, "python-code-yaml"]], "2. Python code only": [[422, "python-code-only"]], "Advanced Usage (Custom NAS)": [[422, "advanced-usage-custom-nas"]], "Security Policy": [[423, "security-policy"]], "Report a Vulnerability": [[423, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[424, "intel-neural-compressor"], [481, "intel-neural-compressor"]], "Installation": [[424, "installation"], [458, "installation"], [475, "installation"]], "Install from pypi": [[424, "install-from-pypi"]], "Getting Started": [[424, "getting-started"], [455, "getting-started"]], "Quantization with Python API": [[424, "quantization-with-python-api"], [455, "quantization-with-python-api"]], "Documentation": [[424, "documentation"]], "Selected Publications/Events": [[424, "selected-publications-events"]], "Additional Content": [[424, "additional-content"]], "Research Collaborations": [[424, "research-collaborations"]], "Adaptor": [[425, "adaptor"], [428, "adaptor"]], "Adaptor Support Matrix": [[425, "adaptor-support-matrix"]], "Working Flow": [[425, "working-flow"], [488, "working-flow"]], "Get Started with Adaptor API": [[425, "get-started-with-adaptor-api"]], "Query API": [[425, "query-api"]], "Background": [[425, "background"]], "Query API Introduction": [[425, "query-api-introduction"]], "Example of Adding a New Backend Support": [[425, "example-of-adding-a-new-backend-support"]], "Capability": [[425, "capability"]], "Implement ONNXRTAdaptor Class": [[425, "implement-onnxrtadaptor-class"]], "How to Add An Adaptor": [[426, "how-to-add-an-adaptor"]], "API List that Need to Implement": [[426, "api-list-that-need-to-implement"]], "Design the framework YAML": [[426, "design-the-framework-yaml"]], "Add query_fw_capability to Adaptor": [[426, "add-query-fw-capability-to-adaptor"]], "Add quantize API according to tune_cfg": [[426, "add-quantize-api-according-to-tune-cfg"]], "Prepare calibration model from fp32 graph": [[426, "prepare-calibration-model-from-fp32-graph"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[426, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Calculate the data range and generate quantized model": [[426, "calculate-the-data-range-and-generate-quantized-model"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[427, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "Define the Quantization Ability of the Specific Operator": [[427, "define-the-quantization-ability-of-the-specific-operator"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[427, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Use the New Data Type": [[427, "use-the-new-data-type"]], "Summary": [[427, "summary"]], "ONNX Runtime": [[429, "onnx-runtime"]], "Torch Utils": [[430, "torch-utils"]], "API Document Example": [[431, "api-document-example"]], "APIs": [[432, "apis"]], "Benchmark": [[433, "benchmark"], [461, "benchmark"], [487, "benchmark"]], "Compression": [[434, "compression"]], "Config": [[435, "config"]], "Mix Precision": [[436, "mix-precision"], [461, "mix-precision"]], "Model": [[437, "model"], [463, "model"]], "Objective": [[438, "objective"], [483, "objective"]], "Quantization": [[439, "quantization"], [487, "quantization"], [488, "quantization"]], "Strategy": [[440, "strategy"]], "Training": [[441, "training"]], "Benchmarking": [[442, "benchmarking"]], "Benchmark Support Matrix": [[442, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[442, "get-started-with-benchmark-api"]], "Calibration Algorithms in Quantization": [[443, "calibration-algorithms-in-quantization"]], "Calibration Algorithms": [[443, "calibration-algorithms"]], "Support Matrix": [[443, "support-matrix"], [466, "support-matrix"]], "Reference": [[443, "reference"], [485, "reference"], [488, "reference"], [490, "reference"], [493, "reference"]], "DataLoader": [[444, "dataloader"]], "Supported Framework Dataloader Matrix": [[444, "supported-framework-dataloader-matrix"]], "Get Started with DataLoader": [[444, "get-started-with-dataloader"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[444, "use-intel-neural-compressor-dataloader-api"]], "Build Custom Dataloader with Python API": [[444, "build-custom-dataloader-with-python-api"]], "Dataset": [[445, "dataset"]], "Supported Framework Dataset Matrix": [[445, "supported-framework-dataset-matrix"]], "TensorFlow": [[445, "tensorflow"], [460, "tensorflow"], [495, "tensorflow"]], "PyTorch": [[445, "pytorch"], [460, "pytorch"], [489, "pytorch"]], "MXNet": [[445, "mxnet"], [460, "mxnet"], [495, "mxnet"]], "ONNXRT": [[445, "onnxrt"], [460, "onnxrt"], [495, "onnxrt"]], "Get start with Dataset API": [[445, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[445, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[445, "user-specific-dataset"]], "Design": [[446, "design"], [496, "design"], [496, "id1"], [496, "id3"], [496, "id5"], [496, "id7"], [496, "id9"], [496, "id11"], [496, "id13"], [496, "id15"], [496, "id17"], [496, "id19"], [496, "id21"]], "Architecture": [[446, "architecture"], [457, "architecture"]], "Workflow": [[446, "workflow"]], "Diagnosis": [[447, "diagnosis"]], "Diagnosis introduction": [[447, "diagnosis-introduction"]], "Supported feature matrix": [[447, "supported-feature-matrix"]], "Get started": [[447, "get-started"]], "Install Intel\u00ae Neural Compressor": [[447, "install-intel-neural-compressor"]], "Modify script": [[447, "modify-script"]], "Quantization diagnosis": [[447, "quantization-diagnosis"]], "Benchmark diagnosis": [[447, "benchmark-diagnosis"]], "Example": [[447, "example"], [460, "example"], [466, "example"], [470, "example"], [483, "example"], [493, "example"]], "Prepare dataset": [[447, "prepare-dataset"]], "Run quantization script": [[447, "run-quantization-script"]], "Run benchmark script": [[447, "run-benchmark-script"]], "See quantization data": [[447, "see-quantization-data"]], "How to do diagnosis": [[447, "how-to-do-diagnosis"]], "Parameter description": [[447, "parameter-description"]], "Diagnosis suggestions": [[447, "diagnosis-suggestions"]], "Fallback setting example": [[447, "fallback-setting-example"]], "See profiling data": [[447, "see-profiling-data"]], "Distillation": [[448, "distillation"], [461, "distillation"], [487, "distillation"]], "Knowledge Distillation": [[448, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[448, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[448, "self-distillation"]], "Distillation Support Matrix": [[448, "distillation-support-matrix"]], "Get Started with Distillation API": [[448, "get-started-with-distillation-api"]], "Distillation for Quantization": [[449, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[449, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[449, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[450, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[450, "supported-feature-matrix"], [454, "supported-feature-matrix"], [457, "supported-feature-matrix"], [487, "supported-feature-matrix"], [488, "supported-feature-matrix"], [494, "supported-feature-matrix"], [498, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[450, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[450, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[450, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[450, "horovodrun-execution"]], "Security": [[450, "security"]], "PyTorch Examples:": [[450, "pytorch-examples"]], "TensorFlow Examples:": [[450, "tensorflow-examples"]], "Example List": [[451, "example-list"]], "Release Data": [[451, "release-data"]], "Export": [[452, "export"]], "Supported Framework Model Matrix": [[452, "supported-framework-model-matrix"], [463, "supported-framework-model-matrix"], [490, "supported-framework-model-matrix"]], "PyTorch Model": [[452, "pytorch-model"]], "FP32 Model Export": [[452, "fp32-model-export"], [452, "id1"]], "INT8 Model Export": [[452, "int8-model-export"], [452, "id2"]], "Tensorflow Model": [[452, "tensorflow-model"]], "Appendix": [[452, "appendix"]], "Supported quantized ops": [[452, "supported-quantized-ops"]], "Frequently Asked Questions": [[453, "frequently-asked-questions"]], "Common Build Issues": [[453, "common-build-issues"]], "Issue 1:": [[453, "issue-1"]], "Issue 2:": [[453, "issue-2"]], "Issue 3:": [[453, "issue-3"]], "Issue 4:": [[453, "issue-4"]], "Framework YAML Configuration Files": [[454, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[454, "get-started-with-framework-yaml-files"]], "Quick Samples": [[455, "quick-samples"]], "Validated Models": [[455, "validated-models"], [493, "validated-models"], [499, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[456, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[456, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[456, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[457, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[458, "linux-installation"]], "Prerequisites": [[458, "prerequisites"], [458, "id1"]], "Install from Binary": [[458, "install-from-binary"], [458, "id2"]], "Install from Source": [[458, "install-from-source"], [458, "id3"]], "Install from AI Kit": [[458, "install-from-ai-kit"]], "Windows Installation": [[458, "windows-installation"]], "System Requirements": [[458, "system-requirements"]], "Validated Hardware Environment": [[458, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[458, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[458, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[458, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[458, "validated-software-environment"]], "Legal Information": [[459, "legal-information"]], "License": [[459, "license"]], "Citation": [[459, "citation"]], "Trademarks": [[459, "trademarks"]], "Metrics": [[460, "metrics"]], "Supported Built-in Metric Matrix": [[460, "supported-built-in-metric-matrix"]], "Get Started with Metric": [[460, "get-started-with-metric"]], "Use Intel\u00ae Neural Compressor Metric API": [[460, "use-intel-neural-compressor-metric-api"]], "Build Custom Metric with Python API": [[460, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[461, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[461, "model-quantization"]], "Post-training Quantization": [[461, "post-training-quantization"]], "Quantization Aware Training": [[461, "quantization-aware-training"], [488, "quantization-aware-training"], [488, "id1"]], "Pruning": [[461, "pruning"], [485, "pruning"], [487, "pruning"]], "Orchestration": [[461, "orchestration"]], "Mixed Precision": [[462, "mixed-precision"]], "Mixed Precision Support Matrix": [[462, "mixed-precision-support-matrix"]], "Hardware and Software requests for BF16": [[462, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[462, "hardware-and-software-requests-for-fp16"]], "During quantization mixed precision": [[462, "during-quantization-mixed-precision"]], "Accuracy-driven mixed precision": [[462, "accuracy-driven-mixed-precision"]], "Get Started with Mixed Precision API": [[462, "get-started-with-mixed-precision-api"]], "Neural Coder": [[464, "neural-coder"], [481, "neural-coder"], [481, "id1"]], "What do we offer?": [[464, "what-do-we-offer"]], "Getting Started!": [[464, "getting-started"], [475, "getting-started"]], "Jupyter Lab Extension": [[464, "jupyter-lab-extension"]], "Python Launcher": [[464, "python-launcher"], [469, "python-launcher"]], "Python API": [[464, "python-api"]], "Contact": [[464, "contact"]], "AWS Amazon SageMaker Support": [[465, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[465, "start-jupyter-lab-3"]], "For SageMaker Studio": [[465, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[465, "for-sagemaker-notebook-instance"]], "Installation Guide": [[465, "installation-guide"]], "BigDL Nano Support": [[466, "bigdl-nano-support"]], "Intel CPU Platforms: Best Performance Setting": [[467, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[467, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[467, "install-numa-controller"]], "Environment Variables": [[467, "environment-variables"]], "Frequency Governers": [[467, "frequency-governers"]], "Neural Coder as Python API": [[468, "neural-coder-as-python-api"]], "Enable": [[468, "enable"]], "Bench": [[468, "bench"]], "SuperBench": [[468, "superbench"]], "Quick-Start": [[469, "quick-start"]], "Launcher Arguments (Optional)": [[469, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[470, "neural-coder-for-quantization"]], "Features Supported": [[470, "features-supported"]], "Models Supported": [[470, "models-supported"]], "Usage": [[470, "usage"], [494, "usage"], [494, "id1"], [496, "usage"], [496, "id2"], [496, "id4"], [496, "id6"], [496, "id8"], [496, "id10"], [496, "id12"], [496, "id14"], [496, "id16"], [496, "id18"], [496, "id20"], [496, "id22"]], "PyPI distribution:": [[470, "pypi-distribution"]], "Supported Optimization Features": [[471, "supported-optimization-features"]], "v0.4": [[472, "v0-4"]], "Highlights": [[472, "highlights"]], "Others": [[472, "others"]], "Changelog": [[473, "changelog"], [477, "changelog"]], "neural_compressor_ext_lab": [[474, "neural-compressor-ext-lab"]], "Requirements": [[474, "requirements"], [478, "requirements"]], "Install": [[474, "install"], [478, "install"]], "Uninstall": [[474, "uninstall"], [478, "uninstall"]], "Contributing": [[474, "contributing"], [478, "contributing"]], "Development install": [[474, "development-install"], [478, "development-install"]], "Development uninstall": [[474, "development-uninstall"], [478, "development-uninstall"]], "Packaging the extension": [[474, "packaging-the-extension"], [478, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[475, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[475, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[475, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[475, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[476, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[476, "manual-release"], [479, "manual-release"]], "Python package": [[476, "python-package"], [479, "python-package"]], "NPM package": [[476, "npm-package"], [479, "npm-package"]], "Automated releases with the Jupyter Releaser": [[476, "automated-releases-with-the-jupyter-releaser"], [479, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[476, "publishing-to-conda-forge"], [479, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[478, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[479, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[480, "change-log"]], "[Unreleased]": [[480, "unreleased"]], "Background Introduction": [[481, "background-introduction"]], "Neural Coder Extension in VSCode": [[481, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[481, "neural-coder-extension-usage"]], "1. Open": [[481, "open"]], "2. Search": [[481, "search"]], "3. Setting": [[481, "setting"]], "4. Icon": [[481, "icon"]], "5. optimization (quantization)": [[481, "optimization-quantization"]], "5.1 Enable": [[481, "enable"]], "5.2 Auto": [[481, "auto"]], "Welcome to your VS Code Extension": [[482, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[482, "what-s-in-the-folder"]], "Setup": [[482, "setup"]], "Get up and running straight away": [[482, "get-up-and-running-straight-away"]], "Make changes": [[482, "make-changes"]], "Explore the API": [[482, "explore-the-api"]], "Run tests": [[482, "run-tests"]], "Go further": [[482, "go-further"]], "Single Objective": [[483, "single-objective"]], "Multiple Objectives": [[483, "multiple-objectives"]], "Objective Support Matrix": [[483, "objective-support-matrix"]], "Get Started with Objective API": [[483, "get-started-with-objective-api"]], "Config Single Objective": [[483, "config-single-objective"]], "Config Multiple Objectives": [[483, "config-multiple-objectives"]], "Optimization Orchestration": [[484, "optimization-orchestration"]], "One-shot": [[484, "one-shot"]], "Orchestration Support Matrix": [[484, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[484, "get-started-with-orchestration-api"]], "Neural Network Pruning": [[485, "neural-network-pruning"]], "Pruning Patterns": [[485, "pruning-patterns"]], "Pruning Criteria": [[485, "pruning-criteria"]], "Pruning Types": [[485, "pruning-types"]], "Pruning Schedules": [[485, "pruning-schedules"]], "Pruning Scope": [[485, "pruning-scope"]], "Sparsity Decay Types": [[485, "sparsity-decay-types"]], "Regularization": [[485, "regularization"]], "Pruning Support Matrix": [[485, "pruning-support-matrix"]], "Get Started with Pruning API": [[485, "get-started-with-pruning-api"]], "Sparse Model Deployment": [[485, "sparse-model-deployment"]], "Pruning with Hyperparameter Optimization": [[485, "pruning-with-hyperparameter-optimization"]], "Full Publications/Events (70)": [[486, "full-publications-events-70"]], "2023 (17)": [[486, "id1"]], "2022 (34)": [[486, "id2"]], "2021 (15)": [[486, "id3"]], "2018 - 2020 (4)": [[486, "id4"]], "Pythonic Style Access for Configurations": [[487, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[487, "pythonic-api-for-user-configurations"], [487, "id1"]], "Pythonic API for Framework Configurations": [[487, "pythonic-api-for-framework-configurations"], [487, "id2"]], "Get Started with Pythonic API for Configurations": [[487, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[487, "nas"]], "Quantization Introduction": [[488, "quantization-introduction"]], "Quantization Fundamentals": [[488, "quantization-fundamentals"], [493, "quantization-fundamentals"]], "Quantization Support Matrix": [[488, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[488, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[488, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[488, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[488, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[488, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[488, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[488, "with-or-without-accuracy-aware-tuning"]], "Post Training Quantization": [[488, "post-training-quantization"]], "Specify Quantization Rules": [[488, "specify-quantization-rules"]], "Specify Quantization Recipes": [[488, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[488, "specify-quantization-backend-and-device"]], "Turn OFF Auto Mixed Precision during Quantization": [[489, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[489, "tensorflow"]], "Weight Only Quantization": [[490, "weight-only-quantization"]], "Quantization Capability:": [[490, "quantization-capability"]], "Export Compressed Model": [[490, "export-compressed-model"]], "User code:": [[490, "user-code"]], "Release": [[491, "release"]], "Release Notes": [[491, "release-notes"]], "Known Issues": [[491, "known-issues"]], "Incompatible Changes": [[491, "incompatible-changes"]], "SigOpt Strategy": [[492, "sigopt-strategy"]], "Preparation": [[492, "preparation"]], "SigOpt Platform": [[492, "sigopt-platform"]], "Neural Compressor Configuration": [[492, "neural-compressor-configuration"]], "Performance": [[492, "performance"]], "Benefit of SigOpt Strategy": [[492, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[492, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[493, "smooth-quant"]], "Per-tensor & Per-channel": [[493, "per-tensor-per-channel"]], "Per-tensor example": [[493, "per-tensor-example"]], "Per-channel example": [[493, "per-channel-example"]], "Matmul quantization example": [[493, "matmul-quantization-example"]], "Per-channel limitation": [[493, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[493, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[493, "smoothquant"]], "Our enhancement:": [[493, "our-enhancement"]], "Algorithm: Layer-wise Auto-tuning of $\\alpha$.": [[493, "algorithm-layer-wise-auto-tuning-of-alpha"]], "Engineering": [[493, "engineering"]], "Supported Framework Matrix": [[493, "supported-framework-matrix"]], "TensorBoard": [[494, "tensorboard"]], "Get Started with TensorBoard": [[494, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[494, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[494, "tensorflow-tensorboard"]], "PyTorch Examples": [[494, "pytorch-examples"]], "TensorFlow Examples": [[494, "tensorflow-examples"]], "Transform": [[495, "transform"]], "Transform Support List": [[495, "transform-support-list"]], "Pytorch": [[495, "pytorch"]], "Tuning Strategies": [[496, "tuning-strategies"]], "Strategy Design": [[496, "strategy-design"]], "Tuning Space": [[496, "tuning-space"]], "Exit Policy": [[496, "exit-policy"]], "Accuracy Criteria": [[496, "accuracy-criteria"]], "Tuning Process": [[496, "tuning-process"]], "Tuning Algorithms": [[496, "tuning-algorithms"]], "Auto": [[496, "auto"]], "Conservative Tuning": [[496, "conservative-tuning"]], "Basic": [[496, "basic"]], "MSE": [[496, "mse"]], "MSE_V2": [[496, "mse-v2"]], "HAWQ_V2": [[496, "hawq-v2"]], "Bayesian": [[496, "bayesian"]], "Exhaustive": [[496, "exhaustive"]], "Random": [[496, "random"]], "SigOpt": [[496, "sigopt"]], "TPE": [[496, "tpe"]], "Distributed Tuning": [[496, "distributed-tuning"]], "Customize a New Tuning Strategy": [[496, "customize-a-new-tuning-strategy"]], "User Guide": [[497, "user-guide"]], "Overview": [[497, "overview"]], "Python-based APIs": [[497, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[497, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[497, "advanced-topics"]], "Innovations for Productivity": [[497, "innovations-for-productivity"]], "User YAML Configuration Files": [[498, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[498, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[499, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.12.0": [[499, "tensorflow-models-with-intel-tensorflow-2-12-0"]], "TensorFlow Models with Intel\u00ae Extension for TensorFlow* 1.2.0": [[499, "tensorflow-models-with-intel-extension-for-tensorflow-1-2-0"]], "PyTorch Models with Torch 2.0.1+cpu in PTQ Mode": [[499, "pytorch-models-with-torch-2-0-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.0.1+cpu in QAT Mode": [[499, "pytorch-models-with-torch-2-0-1-cpu-in-qat-mode"]], "PyTorch Models with Intel\u00ae Extension for PyTorch* 2.0.1+cpu": [[499, "pytorch-models-with-intel-extension-for-pytorch-2-0-1-cpu"]], "ONNX Models with ONNX Runtime 1.15.0": [[499, "onnx-models-with-onnx-runtime-1-15-0"]], "Validated Pruning Examples": [[499, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[499, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[499, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"block_mask": [[0, "module-block_mask"]], "module": [[0, "module-block_mask"], [1, "module-neural_compressor.adaptor.adaptor"], [2, "module-neural_compressor.adaptor"], [3, "module-neural_compressor.adaptor.keras"], [4, "module-neural_compressor.adaptor.keras_utils.conv2d"], [5, "module-neural_compressor.adaptor.keras_utils.dense"], [6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"], [7, "module-neural_compressor.adaptor.keras_utils"], [8, "module-neural_compressor.adaptor.keras_utils.pool2d"], [9, "module-neural_compressor.adaptor.keras_utils.quantizer"], [10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"], [11, "module-neural_compressor.adaptor.mxnet"], [12, "module-neural_compressor.adaptor.mxnet_utils"], [13, "module-neural_compressor.adaptor.mxnet_utils.util"], [14, "module-neural_compressor.adaptor.onnxrt"], [15, "module-neural_compressor.adaptor.ox_utils.calibration"], [16, "module-neural_compressor.adaptor.ox_utils.calibrator"], [17, "module-neural_compressor.adaptor.ox_utils"], [18, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [20, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [22, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [23, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [26, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [29, "module-neural_compressor.adaptor.ox_utils.operators"], [30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [33, "module-neural_compressor.adaptor.ox_utils.operators.norm"], [34, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [35, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"], [38, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [39, "module-neural_compressor.adaptor.ox_utils.operators.split"], [40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"], [41, "module-neural_compressor.adaptor.ox_utils.quantizer"], [42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"], [43, "module-neural_compressor.adaptor.ox_utils.util"], [44, "module-neural_compressor.adaptor.pytorch"], [45, "module-neural_compressor.adaptor.query"], [46, "module-neural_compressor.adaptor.tensorflow"], [47, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [109, "module-neural_compressor.adaptor.tf_utils.graph_util"], [110, "module-neural_compressor.adaptor.tf_utils"], [111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [139, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"], [140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"], [141, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [142, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [143, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [144, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [145, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [146, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [147, "module-neural_compressor.adaptor.tf_utils.util"], [148, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [149, "module-neural_compressor.adaptor.torch_utils.gptq"], [150, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [151, "module-neural_compressor.adaptor.torch_utils"], [152, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"], [153, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"], [154, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"], [155, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"], [156, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"], [157, "module-neural_compressor.adaptor.torch_utils.mixed_precision"], [158, "module-neural_compressor.adaptor.torch_utils.model_wrapper"], [159, "module-neural_compressor.adaptor.torch_utils.pattern_detector"], [160, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [161, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [162, "module-neural_compressor.adaptor.torch_utils.teq"], [163, "module-neural_compressor.adaptor.torch_utils.util"], [164, "module-neural_compressor.adaptor.torch_utils.weight_only"], [165, "module-neural_compressor.algorithm.algorithm"], [166, "module-neural_compressor.algorithm.fast_bias_correction"], [167, "module-neural_compressor.algorithm"], [168, "module-neural_compressor.algorithm.smooth_quant"], [169, "module-neural_compressor.algorithm.weight_correction"], [170, "module-neural_compressor.benchmark"], [171, "module-neural_compressor.compression.callbacks"], [172, "module-neural_compressor.compression.distillation.criterions"], [173, "module-neural_compressor.compression.distillation"], [174, "module-neural_compressor.compression.hpo"], [175, "module-neural_compressor.compression.hpo.sa_optimizer"], [176, "module-neural_compressor.compression.hpo.search_algorithms"], [177, "module-neural_compressor.compression.hpo.search_space"], [178, "module-neural_compressor.compression"], [179, "module-neural_compressor.compression.pruner.criteria"], [180, "module-neural_compressor.compression.pruner"], [181, "module-neural_compressor.compression.pruner.model_slim.auto_slim"], [182, "module-neural_compressor.compression.pruner.model_slim"], [183, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"], [184, "module-neural_compressor.compression.pruner.model_slim.weight_slim"], [185, "module-neural_compressor.compression.pruner.patterns.base"], [186, "module-neural_compressor.compression.pruner.patterns"], [187, "module-neural_compressor.compression.pruner.patterns.mha"], [188, "module-neural_compressor.compression.pruner.patterns.ninm"], [189, "module-neural_compressor.compression.pruner.patterns.nxm"], [190, "module-neural_compressor.compression.pruner.pruners.base"], [191, "module-neural_compressor.compression.pruner.pruners.basic"], [192, "module-neural_compressor.compression.pruner.pruners.block_mask"], [193, "module-neural_compressor.compression.pruner.pruners"], [194, "module-neural_compressor.compression.pruner.pruners.mha"], [195, "module-neural_compressor.compression.pruner.pruners.pattern_lock"], [196, "module-neural_compressor.compression.pruner.pruners.progressive"], [197, "module-neural_compressor.compression.pruner.pruners.retrain_free"], [198, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"], [199, "module-neural_compressor.compression.pruner.pruning"], [200, "module-neural_compressor.compression.pruner.regs"], [201, "module-neural_compressor.compression.pruner.schedulers"], [202, "module-neural_compressor.compression.pruner.tf_criteria"], [203, "module-neural_compressor.compression.pruner.utils"], [204, "module-neural_compressor.conf.config"], [205, "module-neural_compressor.conf.dotdict"], [206, "module-neural_compressor.conf"], [207, "module-neural_compressor.conf.pythonic_config"], [208, "module-neural_compressor.config"], [209, "module-neural_compressor.contrib"], [210, "module-neural_compressor.contrib.strategy"], [211, "module-neural_compressor.contrib.strategy.sigopt"], [212, "module-neural_compressor.contrib.strategy.tpe"], [213, "module-neural_compressor.data.dataloaders.base_dataloader"], [214, "module-neural_compressor.data.dataloaders.dataloader"], [215, "module-neural_compressor.data.dataloaders.default_dataloader"], [216, "module-neural_compressor.data.dataloaders.fetcher"], [217, "module-neural_compressor.data.dataloaders"], [218, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [219, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [220, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [221, "module-neural_compressor.data.dataloaders.sampler"], [222, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [223, "module-neural_compressor.data.datasets.bert_dataset"], [224, "module-neural_compressor.data.datasets.coco_dataset"], [225, "module-neural_compressor.data.datasets.dataset"], [226, "module-neural_compressor.data.datasets.dummy_dataset"], [227, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [228, "module-neural_compressor.data.datasets.imagenet_dataset"], [229, "module-neural_compressor.data.datasets"], [230, "module-neural_compressor.data.datasets.style_transfer_dataset"], [231, "module-neural_compressor.data.filters.coco_filter"], [232, "module-neural_compressor.data.filters.filter"], [233, "module-neural_compressor.data.filters"], [234, "module-neural_compressor.data"], [235, "module-neural_compressor.data.transforms.coco_transform"], [236, "module-neural_compressor.data.transforms.imagenet_transform"], [237, "module-neural_compressor.data.transforms"], [238, "module-neural_compressor.data.transforms.postprocess"], [239, "module-neural_compressor.data.transforms.tokenization"], [240, "module-neural_compressor.data.transforms.transform"], [241, "module-neural_compressor.experimental.benchmark"], [242, "module-neural_compressor.experimental.common.criterion"], [243, "module-neural_compressor.experimental.common.dataloader"], [244, "module-neural_compressor.experimental.common"], [245, "module-neural_compressor.experimental.common.metric"], [246, "module-neural_compressor.experimental.common.model"], [247, "module-neural_compressor.experimental.common.optimizer"], [248, "module-neural_compressor.experimental.common.postprocess"], [249, "module-neural_compressor.experimental.common.torch_utils"], [250, "module-neural_compressor.experimental.component"], [251, "module-neural_compressor.experimental.compression"], [252, "module-neural_compressor.experimental.contrib"], [253, "module-neural_compressor.experimental.contrib.strategy"], [254, "module-neural_compressor.experimental.contrib.strategy.sigopt"], [255, "module-neural_compressor.experimental.contrib.strategy.tpe"], [256, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [257, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [258, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [259, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [260, "module-neural_compressor.experimental.data.dataloaders"], [261, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [262, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [263, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [264, "module-neural_compressor.experimental.data.dataloaders.sampler"], [265, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [266, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [267, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [268, "module-neural_compressor.experimental.data.datasets.dataset"], [269, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [270, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [271, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [272, "module-neural_compressor.experimental.data.datasets"], [273, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [274, "module-neural_compressor.experimental.data.filters.coco_filter"], [275, "module-neural_compressor.experimental.data.filters.filter"], [276, "module-neural_compressor.experimental.data.filters"], [277, "module-neural_compressor.experimental.data"], [278, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [279, "module-neural_compressor.experimental.data.transforms"], [280, "module-neural_compressor.experimental.data.transforms.tokenization"], [281, "module-neural_compressor.experimental.data.transforms.transform"], [282, "module-neural_compressor.experimental.distillation"], [283, "module-neural_compressor.experimental.export"], [284, "module-neural_compressor.experimental.export.qlinear2qdq"], [285, "module-neural_compressor.experimental.export.tf2onnx"], [286, "module-neural_compressor.experimental.export.torch2onnx"], [287, "module-neural_compressor.experimental.graph_optimization"], [288, "module-neural_compressor.experimental"], [289, "module-neural_compressor.experimental.metric.bleu"], [290, "module-neural_compressor.experimental.metric.bleu_util"], [291, "module-neural_compressor.experimental.metric.coco_label_map"], [292, "module-neural_compressor.experimental.metric.coco_tools"], [293, "module-neural_compressor.experimental.metric.evaluate_squad"], [294, "module-neural_compressor.experimental.metric.f1"], [295, "module-neural_compressor.experimental.metric"], [296, "module-neural_compressor.experimental.metric.metric"], [297, "module-neural_compressor.experimental.mixed_precision"], [298, "module-neural_compressor.experimental.model_conversion"], [299, "module-neural_compressor.experimental.nas.basic_nas"], [300, "module-neural_compressor.experimental.nas.dynas"], [301, "module-neural_compressor.experimental.nas"], [302, "module-neural_compressor.experimental.nas.nas"], [303, "module-neural_compressor.experimental.nas.nas_utils"], [304, "module-neural_compressor.experimental.nas.search_algorithms"], [305, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [306, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [307, "module-neural_compressor.experimental.pruner_legacy"], [308, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [309, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [310, "module-neural_compressor.experimental.pruner_legacy.pruner"], [311, "module-neural_compressor.experimental.pruning"], [312, "module-neural_compressor.experimental.pruning_recipes"], [313, "module-neural_compressor.experimental.pruning_recipes.patterns"], [314, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [315, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [316, "module-neural_compressor.experimental.pruning_v2"], [317, "module-neural_compressor.experimental.pytorch_pruner"], [318, "module-neural_compressor.experimental.pytorch_pruner.logger"], [319, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [320, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [321, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [322, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [323, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [324, "module-neural_compressor.experimental.quantization"], [325, "module-neural_compressor.experimental.scheduler"], [326, "module-neural_compressor.experimental.strategy.auto_mixed_precision"], [327, "module-neural_compressor.experimental.strategy.basic"], [328, "module-neural_compressor.experimental.strategy.bayesian"], [329, "module-neural_compressor.experimental.strategy.exhaustive"], [330, "module-neural_compressor.experimental.strategy"], [331, "module-neural_compressor.experimental.strategy.mse"], [332, "module-neural_compressor.experimental.strategy.mse_v2"], [333, "module-neural_compressor.experimental.strategy.random"], [334, "module-neural_compressor.experimental.strategy.strategy"], [335, "module-neural_compressor.experimental.strategy.utils.constant"], [336, "module-neural_compressor.experimental.strategy.utils"], [337, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"], [338, "module-neural_compressor.experimental.strategy.utils.tuning_space"], [339, "module-neural_compressor.experimental.strategy.utils.tuning_structs"], [340, "module-neural_compressor.experimental.strategy.utils.utility"], [341, "module-neural_compressor"], [342, "module-neural_compressor.metric.bleu"], [343, "module-neural_compressor.metric.bleu_util"], [344, "module-neural_compressor.metric.coco_label_map"], [345, "module-neural_compressor.metric.coco_tools"], [346, "module-neural_compressor.metric.evaluate_squad"], [347, "module-neural_compressor.metric.f1"], [348, "module-neural_compressor.metric"], [349, "module-neural_compressor.metric.metric"], [350, "module-neural_compressor.mix_precision"], [351, "module-neural_compressor.model.base_model"], [352, "module-neural_compressor.model"], [353, "module-neural_compressor.model.keras_model"], [354, "module-neural_compressor.model.model"], [355, "module-neural_compressor.model.mxnet_model"], [356, "module-neural_compressor.model.nets_factory"], [357, "module-neural_compressor.model.onnx_model"], [358, "module-neural_compressor.model.tensorflow_model"], [359, "module-neural_compressor.model.torch_model"], [360, "module-neural_compressor.objective"], [361, "module-neural_compressor.profiling"], [362, "module-neural_compressor.profiling.parser.factory"], [363, "module-neural_compressor.profiling.parser"], [364, "module-neural_compressor.profiling.parser.onnx_parser.factory"], [365, "module-neural_compressor.profiling.parser.onnx_parser"], [366, "module-neural_compressor.profiling.parser.onnx_parser.parser"], [367, "module-neural_compressor.profiling.parser.parser"], [368, "module-neural_compressor.profiling.parser.result"], [369, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"], [370, "module-neural_compressor.profiling.parser.tensorflow_parser"], [371, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"], [372, "module-neural_compressor.profiling.profiler.factory"], [373, "module-neural_compressor.profiling.profiler"], [374, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"], [375, "module-neural_compressor.profiling.profiler.onnxrt_profiler"], [376, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"], [377, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"], [378, "module-neural_compressor.profiling.profiler.profiler"], [379, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"], [380, "module-neural_compressor.profiling.profiler.tensorflow_profiler"], [381, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"], [382, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"], [383, "module-neural_compressor.quantization"], [384, "module-neural_compressor.strategy.auto"], [385, "module-neural_compressor.strategy.auto_mixed_precision"], [386, "module-neural_compressor.strategy.basic"], [387, "module-neural_compressor.strategy.bayesian"], [388, "module-neural_compressor.strategy.conservative"], [389, "module-neural_compressor.strategy.exhaustive"], [390, "module-neural_compressor.strategy.hawq_v2"], [391, "module-neural_compressor.strategy"], [392, "module-neural_compressor.strategy.mse"], [393, "module-neural_compressor.strategy.mse_v2"], [394, "module-neural_compressor.strategy.random"], [395, "module-neural_compressor.strategy.strategy"], [396, "module-neural_compressor.strategy.utils.constant"], [397, "module-neural_compressor.strategy.utils"], [398, "module-neural_compressor.strategy.utils.tuning_sampler"], [399, "module-neural_compressor.strategy.utils.tuning_space"], [400, "module-neural_compressor.strategy.utils.tuning_structs"], [401, "module-neural_compressor.strategy.utils.utility"], [402, "module-neural_compressor.template.api_doc_example"], [403, "module-neural_compressor.template"], [404, "module-neural_compressor.training"], [405, "module-neural_compressor.utils.collect_layer_histogram"], [406, "module-neural_compressor.utils.constant"], [407, "module-neural_compressor.utils.create_obj_from_config"], [408, "module-neural_compressor.utils"], [409, "module-neural_compressor.utils.kl_divergence"], [410, "module-neural_compressor.utils.load_huggingface"], [411, "module-neural_compressor.utils.logger"], [412, "module-neural_compressor.utils.neural_insights_utils"], [413, "module-neural_compressor.utils.options"], [414, "module-neural_compressor.utils.pytorch"], [415, "module-neural_compressor.utils.utility"], [416, "module-neural_compressor.utils.weights_details"], [417, "module-neural_compressor.version"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasQuery"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase"]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector"]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator"]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator"]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator"]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "float16activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.Float16ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "float16binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.Float16BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[30, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "fusedmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.FusedMatMulOperator"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "batchnormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.BatchNormalizationOperator"]], "normalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "reduceoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "unaryoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[41, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "ortsmoothquant (class in neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.ORTSmoothQuant"]], "get_quant_dequant_output() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.get_quant_dequant_output"]], "make_sub_graph() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.make_sub_graph"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "quant_dequant_data() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.quant_dequant_data"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "to_numpy() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.to_numpy"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchquery (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorchQuery"]], "pytorchweightonlyadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorchWeightOnlyAdaptor"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "neural_compressor.adaptor.pytorch": [[44, "module-neural_compressor.adaptor.pytorch"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[45, "neural_compressor.adaptor.query.QueryBackendCapability"]], "neural_compressor.adaptor.query": [[45, "module-neural_compressor.adaptor.query"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow": [[46, "module-neural_compressor.adaptor.tensorflow"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[47, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[48, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[49, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[109, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[109, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[110, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "smoothquantcalibration (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[139, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[139, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "smoothquantscaler (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[140, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScaler"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[141, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[141, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[142, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[142, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[143, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[145, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[146, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "get_weight_from_input_tensor() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_weight_from_input_tensor"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[147, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[148, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[148, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[148, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[148, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "gptq (class in neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.GPTQ"]], "gptquantizer (class in neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.GPTQuantizer"]], "find_layers() (in module neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.find_layers"]], "find_layers_name() (in module neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.find_layers_name"]], "is_leaf() (in module neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.is_leaf"]], "log_quantizable_layers_per_transformer() (in module neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.log_quantizable_layers_per_transformer"]], "neural_compressor.adaptor.torch_utils.gptq": [[149, "module-neural_compressor.adaptor.torch_utils.gptq"]], "quantize() (in module neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.quantize"]], "trace_gptq_target_blocks() (in module neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.trace_gptq_target_blocks"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[150, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[150, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[150, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[150, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[150, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[151, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[152, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "pickleerror": [[153, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PickleError"]], "picklingerror": [[153, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PicklingError"]], "unpicklingerror": [[153, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[153, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "layerwisequant (class in neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize)": [[154, "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize.LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[154, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "load() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load)": [[155, "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load.load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[155, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "dowload_hf_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[156, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.dowload_hf_model"]], "get_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[156, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_children"]], "get_named_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[156, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_named_children"]], "get_super_module_by_name() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[156, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_super_module_by_name"]], "load_layer_wise_quantized_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[156, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_layer_wise_quantized_model"]], "load_shell() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[156, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_shell"]], "load_tensor() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[156, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor"]], "load_tensor_from_shard() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[156, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor_from_shard"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[156, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "update_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[156, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.update_module"]], "ipex_mixed_precision() (in module neural_compressor.adaptor.torch_utils.mixed_precision)": [[157, "neural_compressor.adaptor.torch_utils.mixed_precision.ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[157, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "fakeaffinetensorquantfunction (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[158, "neural_compressor.adaptor.torch_utils.model_wrapper.FakeAffineTensorQuantFunction"]], "teqlinearfakequant (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[158, "neural_compressor.adaptor.torch_utils.model_wrapper.TEQLinearFakeQuant"]], "teqmullinear (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[158, "neural_compressor.adaptor.torch_utils.model_wrapper.TEQMulLinear"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[158, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.adaptor.torch_utils.pattern_detector)": [[159, "neural_compressor.adaptor.torch_utils.pattern_detector.TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[159, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "graphtrace (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[160, "neural_compressor.adaptor.torch_utils.smooth_quant.GraphTrace"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[160, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "get_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[160, "neural_compressor.adaptor.torch_utils.smooth_quant.get_module"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[160, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "set_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[160, "neural_compressor.adaptor.torch_utils.smooth_quant.set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[161, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[161, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[161, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "tequantizer (class in neural_compressor.adaptor.torch_utils.teq)": [[162, "neural_compressor.adaptor.torch_utils.teq.TEQuantizer"]], "neural_compressor.adaptor.torch_utils.teq": [[162, "module-neural_compressor.adaptor.torch_utils.teq"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[163, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[163, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[163, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[163, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[163, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "collect_weight_info() (in module neural_compressor.adaptor.torch_utils.util)": [[163, "neural_compressor.adaptor.torch_utils.util.collect_weight_info"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[163, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[163, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[163, "neural_compressor.adaptor.torch_utils.util.get_depth"]], "get_dict_at_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[163, "neural_compressor.adaptor.torch_utils.util.get_dict_at_depth"]], "get_element_under_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[163, "neural_compressor.adaptor.torch_utils.util.get_element_under_depth"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[163, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[163, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[163, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[163, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[163, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_op_type_by_name() (in module neural_compressor.adaptor.torch_utils.util)": [[163, "neural_compressor.adaptor.torch_utils.util.get_op_type_by_name"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[163, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[163, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[163, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[163, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[163, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern"]], "neural_compressor.adaptor.torch_utils.util": [[163, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[163, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[163, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[163, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.util)": [[163, "neural_compressor.adaptor.torch_utils.util.update_sq_scale"]], "awq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[164, "neural_compressor.adaptor.torch_utils.weight_only.awq_quantize"]], "get_module_input_output() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[164, "neural_compressor.adaptor.torch_utils.weight_only.get_module_input_output"]], "gptq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[164, "neural_compressor.adaptor.torch_utils.weight_only.gptq_quantize"]], "neural_compressor.adaptor.torch_utils.weight_only": [[164, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "qdq_weight_actor() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[164, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_actor"]], "qdq_weight_asym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[164, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_asym"]], "qdq_weight_sym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[164, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_sym"]], "quant_weight() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[164, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight"]], "quant_weight_w_scale() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[164, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight_w_scale"]], "rtn_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[164, "neural_compressor.adaptor.torch_utils.weight_only.rtn_quantize"]], "teq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[164, "neural_compressor.adaptor.torch_utils.weight_only.teq_quantize"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[165, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[165, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[165, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[165, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[165, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[166, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[166, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[167, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[168, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[168, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[169, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[169, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[170, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[170, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[170, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[170, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[170, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[170, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[170, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[170, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[170, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[170, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[170, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[170, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[170, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[170, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[170, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[170, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[170, "neural_compressor.benchmark.summary_benchmark"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[171, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[171, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[171, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[171, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[171, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[171, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[171, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[171, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "neural_compressor.compression.callbacks": [[171, "module-neural_compressor.compression.callbacks"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[172, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[172, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[172, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[172, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[172, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[172, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[172, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[172, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[172, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[172, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[172, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[172, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[172, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[172, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[172, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[172, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[172, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "neural_compressor.compression.distillation.criterions": [[172, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[173, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression.hpo": [[174, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[175, "module-neural_compressor.compression.hpo.sa_optimizer"]], "bayesianoptimizationsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[176, "neural_compressor.compression.hpo.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[176, "neural_compressor.compression.hpo.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[176, "neural_compressor.compression.hpo.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.compression.hpo.search_algorithms)": [[176, "neural_compressor.compression.hpo.search_algorithms.Searcher"]], "xgbsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[176, "neural_compressor.compression.hpo.search_algorithms.XgbSearcher"]], "neural_compressor.compression.hpo.search_algorithms": [[176, "module-neural_compressor.compression.hpo.search_algorithms"]], "register_searcher() (in module neural_compressor.compression.hpo.search_algorithms)": [[176, "neural_compressor.compression.hpo.search_algorithms.register_searcher"]], "basesearchspace (class in neural_compressor.compression.hpo.search_space)": [[177, "neural_compressor.compression.hpo.search_space.BaseSearchSpace"]], "continuoussearchspace (class in neural_compressor.compression.hpo.search_space)": [[177, "neural_compressor.compression.hpo.search_space.ContinuousSearchSpace"]], "discretesearchspace (class in neural_compressor.compression.hpo.search_space)": [[177, "neural_compressor.compression.hpo.search_space.DiscreteSearchSpace"]], "searchspace (class in neural_compressor.compression.hpo.search_space)": [[177, "neural_compressor.compression.hpo.search_space.SearchSpace"]], "neural_compressor.compression.hpo.search_space": [[177, "module-neural_compressor.compression.hpo.search_space"]], "register_searchspace() (in module neural_compressor.compression.hpo.search_space)": [[177, "neural_compressor.compression.hpo.search_space.register_searchspace"]], "neural_compressor.compression": [[178, "module-neural_compressor.compression"]], "blockmaskcriterion (class in neural_compressor.compression.pruner.criteria)": [[179, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[179, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[179, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[179, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[179, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[179, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[179, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[179, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[179, "module-neural_compressor.compression.pruner.criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[179, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.blockmaskcriterion attribute)": [[179, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[179, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[179, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[179, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[179, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[179, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[179, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.compression.pruner": [[180, "module-neural_compressor.compression.pruner"]], "prepare_pruning() (in module neural_compressor.compression.pruner)": [[180, "neural_compressor.compression.pruner.prepare_pruning"]], "save() (in module neural_compressor.compression.pruner)": [[180, "neural_compressor.compression.pruner.save"]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[181, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_ffn2_pruning_config"]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[181, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_mha_pruning_config"]], "model_slim() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[181, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim"]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[181, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_ffn2"]], "model_slim_mha() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[181, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_mha"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[181, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[181, "neural_compressor.compression.pruner.model_slim.auto_slim.parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim": [[182, "module-neural_compressor.compression.pruner.model_slim"]], "classifierheadsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher"]], "classifierheadsearchertf (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF"]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher"]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher"]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher"]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph"]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes"]], "get_common_module() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_common_module"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[183, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "print_iterables() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.print_iterables"]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut"]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[183, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets"]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[184, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression"]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[184, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator"]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[184, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils"]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[184, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device"]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[184, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1"]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[184, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2"]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[184, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[184, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "basepattern (class in neural_compressor.compression.pruner.patterns.base)": [[185, "neural_compressor.compression.pruner.patterns.base.BasePattern"]], "kerasbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[185, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern"]], "pytorchbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[185, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern"]], "config (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[185, "neural_compressor.compression.pruner.patterns.base.BasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[185, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[185, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.config"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[185, "neural_compressor.compression.pruner.patterns.base.BasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[185, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[185, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[185, "neural_compressor.compression.pruner.patterns.base.BasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[185, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[185, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[185, "neural_compressor.compression.pruner.patterns.base.BasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[185, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[185, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[185, "neural_compressor.compression.pruner.patterns.base.BasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[185, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[185, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[185, "neural_compressor.compression.pruner.patterns.base.BasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[185, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[185, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[185, "neural_compressor.compression.pruner.patterns.base.BasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[185, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[185, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.modules"]], "neural_compressor.compression.pruner.patterns.base": [[185, "module-neural_compressor.compression.pruner.patterns.base"]], "pattern (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[185, "neural_compressor.compression.pruner.patterns.base.BasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[185, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[185, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.pattern"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns.base)": [[185, "neural_compressor.compression.pruner.patterns.base.register_pattern"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[185, "neural_compressor.compression.pruner.patterns.base.BasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[185, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[185, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.target_sparsity"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[186, "neural_compressor.compression.pruner.patterns.get_pattern"]], "neural_compressor.compression.pruner.patterns": [[186, "module-neural_compressor.compression.pruner.patterns"]], "m (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[187, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.M"]], "n (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[187, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.N"]], "patternmha (class in neural_compressor.compression.pruner.patterns.mha)": [[187, "neural_compressor.compression.pruner.patterns.mha.PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha": [[187, "module-neural_compressor.compression.pruner.patterns.mha"]], "m (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[188, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[188, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.N"]], "pytorchpatternninm (class in neural_compressor.compression.pruner.patterns.ninm)": [[188, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm": [[188, "module-neural_compressor.compression.pruner.patterns.ninm"]], "keraspatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[189, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM"]], "pytorchpatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[189, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.keraspatternnxm attribute)": [[189, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM.block_size"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.pytorchpatternnxm attribute)": [[189, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM.block_size"]], "neural_compressor.compression.pruner.patterns.nxm": [[189, "module-neural_compressor.compression.pruner.patterns.nxm"]], "basepruner (class in neural_compressor.compression.pruner.pruners.base)": [[190, "neural_compressor.compression.pruner.pruners.base.BasePruner"]], "kerasbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[190, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner"]], "pytorchbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[190, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner"]], "config (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.BasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.config"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.BasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.BasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.end_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.BasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.global_step"]], "masks (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.BasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.BasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.BasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.modules"]], "neural_compressor.compression.pruner.pruners.base": [[190, "module-neural_compressor.compression.pruner.pruners.base"]], "pattern (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pattern"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.BasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pruning_frequency"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners.base)": [[190, "neural_compressor.compression.pruner.pruners.base.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.BasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scores"]], "start_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.BasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.BasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[190, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.target_sparsity_ratio"]], "kerasbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[191, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner"]], "pytorchbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[191, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner"]], "criterion (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.criterion"]], "neural_compressor.compression.pruner.pruners.basic": [[191, "module-neural_compressor.compression.pruner.pruners.basic"]], "pattern (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.scheduler"]], "pytorchblockmaskpruner (class in neural_compressor.compression.pruner.pruners.block_mask)": [[192, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner"]], "criterion (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.criterion"]], "neural_compressor.compression.pruner.pruners.block_mask": [[192, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "pattern (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.scheduler"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[193, "neural_compressor.compression.pruner.pruners.get_pruner"]], "neural_compressor.compression.pruner.pruners": [[193, "module-neural_compressor.compression.pruner.pruners"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[193, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pythonmultiheadattentionpruner (class in neural_compressor.compression.pruner.pruners.mha)": [[194, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner"]], "head_masks (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.head_masks"]], "linear_layers (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.linear_layers"]], "mha_compressions (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_compressions"]], "mha_scores (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_scores"]], "neural_compressor.compression.pruner.pruners.mha": [[194, "module-neural_compressor.compression.pruner.pruners.mha"]], "pytorchpatternlockpruner (class in neural_compressor.compression.pruner.pruners.pattern_lock)": [[195, "neural_compressor.compression.pruner.pruners.pattern_lock.PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[195, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "pytorchprogressivepruner (class in neural_compressor.compression.pruner.pruners.progressive)": [[196, "neural_compressor.compression.pruner.pruners.progressive.PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[196, "module-neural_compressor.compression.pruner.pruners.progressive"]], "pytorchretrainfreepruner (class in neural_compressor.compression.pruner.pruners.retrain_free)": [[197, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner"]], "criterion (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.criterion"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[197, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "pattern (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.scheduler"]], "sparsegptpruner (class in neural_compressor.compression.pruner.pruners.sparse_gpt)": [[198, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner"]], "criterion (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.criterion"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[198, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"]], "pattern (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.scheduler"]], "basepruning (class in neural_compressor.compression.pruner.pruning)": [[199, "neural_compressor.compression.pruner.pruning.BasePruning"]], "basicpruning (class in neural_compressor.compression.pruner.pruning)": [[199, "neural_compressor.compression.pruner.pruning.BasicPruning"]], "retrainfreepruning (class in neural_compressor.compression.pruner.pruning)": [[199, "neural_compressor.compression.pruner.pruning.RetrainFreePruning"]], "sparsegptpruning (class in neural_compressor.compression.pruner.pruning)": [[199, "neural_compressor.compression.pruner.pruning.SparseGPTPruning"]], "config_file_path (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[199, "neural_compressor.compression.pruner.pruning.BasePruning.config_file_path"]], "config_file_path (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[199, "neural_compressor.compression.pruner.pruning.BasicPruning.config_file_path"]], "config_file_path (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[199, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.config_file_path"]], "model (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[199, "neural_compressor.compression.pruner.pruning.BasePruning.model"]], "model (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[199, "neural_compressor.compression.pruner.pruning.BasicPruning.model"]], "model (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[199, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.model"]], "neural_compressor.compression.pruner.pruning": [[199, "module-neural_compressor.compression.pruner.pruning"]], "pruner_info (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[199, "neural_compressor.compression.pruner.pruning.BasePruning.pruner_info"]], "pruner_info (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[199, "neural_compressor.compression.pruner.pruning.BasicPruning.pruner_info"]], "pruner_info (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[199, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruner_info"]], "pruners (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[199, "neural_compressor.compression.pruner.pruning.BasePruning.pruners"]], "pruners (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[199, "neural_compressor.compression.pruner.pruning.BasicPruning.pruners"]], "pruners (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[199, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruners"]], "register_pruning() (in module neural_compressor.compression.pruner.pruning)": [[199, "neural_compressor.compression.pruner.pruning.register_pruning"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[200, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[200, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[200, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[200, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[200, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[200, "module-neural_compressor.compression.pruner.regs"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[200, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[200, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[201, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[201, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[201, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[201, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[201, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[201, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[201, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "magnitudecriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[202, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[202, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion"]], "get_tf_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[202, "neural_compressor.compression.pruner.tf_criteria.get_tf_criterion"]], "neural_compressor.compression.pruner.tf_criteria": [[202, "module-neural_compressor.compression.pruner.tf_criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[202, "neural_compressor.compression.pruner.tf_criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.tf_criteria.magnitudecriterion attribute)": [[202, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.tf_criteria.pruningcriterion attribute)": [[202, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion.scores"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[203, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[203, "neural_compressor.compression.pruner.utils.check_key_validity"]], "collect_layer_inputs() (in module neural_compressor.compression.pruner.utils)": [[203, "neural_compressor.compression.pruner.utils.collect_layer_inputs"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[203, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_layers() (in module neural_compressor.compression.pruner.utils)": [[203, "neural_compressor.compression.pruner.utils.get_layers"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[203, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "get_sparsity_ratio_tf() (in module neural_compressor.compression.pruner.utils)": [[203, "neural_compressor.compression.pruner.utils.get_sparsity_ratio_tf"]], "neural_compressor.compression.pruner.utils": [[203, "module-neural_compressor.compression.pruner.utils"]], "parse_last_linear() (in module neural_compressor.compression.pruner.utils)": [[203, "neural_compressor.compression.pruner.utils.parse_last_linear"]], "parse_last_linear_tf() (in module neural_compressor.compression.pruner.utils)": [[203, "neural_compressor.compression.pruner.utils.parse_last_linear_tf"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[203, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "parse_to_prune_tf() (in module neural_compressor.compression.pruner.utils)": [[203, "neural_compressor.compression.pruner.utils.parse_to_prune_tf"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[203, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[203, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[203, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[203, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[203, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[203, "neural_compressor.compression.pruner.utils.update_params"]], "benchmark_conf (class in neural_compressor.conf.config)": [[204, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[204, "neural_compressor.conf.config.Conf"]], "defaultconf (class in neural_compressor.conf.config)": [[204, "neural_compressor.conf.config.DefaultConf"]], "distillation_conf (class in neural_compressor.conf.config)": [[204, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[204, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[204, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[204, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[204, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[204, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[204, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[204, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[205, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[205, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[205, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[205, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[206, "module-neural_compressor.conf"]], "accuracycriterion (class in neural_compressor.conf.pythonic_config)": [[207, "neural_compressor.conf.pythonic_config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.conf.pythonic_config)": [[207, "neural_compressor.conf.pythonic_config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.conf.pythonic_config)": [[207, "neural_compressor.conf.pythonic_config.DistillationConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.conf.pythonic_config)": [[207, "neural_compressor.conf.pythonic_config.KnowledgeDistillationLossConfig"]], "options (class in neural_compressor.conf.pythonic_config)": [[207, "neural_compressor.conf.pythonic_config.Options"]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[207, "neural_compressor.conf.pythonic_config.QuantizationConfig"]], "weightpruningconfig (class in neural_compressor.conf.pythonic_config)": [[207, "neural_compressor.conf.pythonic_config.WeightPruningConfig"]], "neural_compressor.conf.pythonic_config": [[207, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[208, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[208, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[208, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[208, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[208, "neural_compressor.config.ExportConfig"]], "hpoconfig (class in neural_compressor.config)": [[208, "neural_compressor.config.HPOConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[208, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[208, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[208, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[208, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[208, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[208, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[208, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[208, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[208, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[208, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[208, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[208, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[208, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[208, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[208, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[208, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[208, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[208, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[208, "module-neural_compressor.config"]], "neural_compressor.contrib": [[209, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[210, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[211, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[211, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[212, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[212, "module-neural_compressor.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[213, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader": [[213, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[214, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "check_dataloader() (in module neural_compressor.data.dataloaders.dataloader)": [[214, "neural_compressor.data.dataloaders.dataloader.check_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[214, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[215, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[215, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[215, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[216, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[216, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[216, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[216, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[217, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[218, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[218, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[219, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[219, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[219, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[220, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[220, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[221, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[221, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[221, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[221, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[221, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[222, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[222, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[222, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[222, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[222, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[223, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[223, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[223, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[223, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[223, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[223, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[223, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[223, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[223, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[224, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[224, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[224, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[224, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[224, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[225, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[225, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[225, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[225, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[225, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[225, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[225, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[225, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[225, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[225, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[225, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[225, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[225, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[225, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[225, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[225, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[225, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[225, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[225, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[225, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[225, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[225, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[225, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[225, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[225, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[225, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[225, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[225, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[225, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[225, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[225, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[225, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[225, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[225, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[225, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[225, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[225, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[225, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[225, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[226, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[226, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[227, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[227, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[227, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[228, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[228, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[228, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[228, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[228, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[228, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[228, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[229, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[230, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[230, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[231, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[231, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[231, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[232, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[232, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[232, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[232, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[232, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[232, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[232, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[232, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[232, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[233, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[234, "module-neural_compressor.data"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[235, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[235, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[236, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[236, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[236, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[236, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[236, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[236, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[236, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[236, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[236, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[236, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale"]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[236, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.imagenet_transform": [[236, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[237, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[238, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[238, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[239, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[239, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[239, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[239, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[239, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[239, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[239, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[239, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.TRANSFORMS"], [240, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[240, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[240, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[241, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[241, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[241, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[241, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[241, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[241, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[241, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[241, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[241, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[241, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[242, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[242, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[242, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[242, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[242, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[242, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[242, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[242, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[242, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[242, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[242, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[242, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[242, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[242, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[242, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[242, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[242, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[242, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[242, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[242, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[242, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[243, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[243, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[244, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[245, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[245, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[246, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[246, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[246, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[247, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[247, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[247, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[247, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[247, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[247, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[247, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[247, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[247, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[248, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[248, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[249, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[249, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[249, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[250, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[250, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[251, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[252, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[253, "module-neural_compressor.experimental.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[254, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[254, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[255, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[255, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[256, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[256, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[257, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[258, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[258, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[258, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[259, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[259, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[259, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[259, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[260, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[261, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[261, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[262, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[262, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[262, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[263, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[263, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[264, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[264, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[264, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[264, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[264, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[265, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[265, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[265, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[265, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[265, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[266, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[266, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[266, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[266, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[266, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[266, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[266, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[266, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[266, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[267, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[267, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[267, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[267, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[267, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[268, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[268, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[268, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[268, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[268, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[268, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[268, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[268, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[268, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[268, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[268, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[268, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[268, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[268, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[268, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[268, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[268, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[268, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[268, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[268, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[268, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[268, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[268, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[268, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[268, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[268, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[268, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[268, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[268, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[268, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[268, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[268, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[268, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[268, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[268, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[268, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[268, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[268, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[268, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[269, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[269, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[270, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[270, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[270, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[271, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[271, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[271, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[271, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[271, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[271, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[271, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[272, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[273, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[273, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[274, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[274, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[274, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[275, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[275, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[275, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[275, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[275, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[275, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[275, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[275, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[275, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[276, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[277, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[278, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[278, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[278, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[278, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[278, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[278, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[278, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[278, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[278, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[278, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[279, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[280, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[280, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[280, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[280, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[280, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[280, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[280, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[280, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [281, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[281, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[281, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[282, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[282, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[282, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[282, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[282, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[282, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[283, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[284, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[284, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[284, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[285, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[285, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[285, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "dynamic_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[286, "neural_compressor.experimental.export.torch2onnx.dynamic_quant_export"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[286, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[286, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[286, "module-neural_compressor.experimental.export.torch2onnx"]], "static_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[286, "neural_compressor.experimental.export.torch2onnx.static_quant_export"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[286, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[286, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[287, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[287, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[288, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[289, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[289, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[289, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[289, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[289, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[289, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[289, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[289, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[289, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[290, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[290, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[291, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[292, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[292, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[292, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[292, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[292, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[292, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[292, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[292, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[293, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[293, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[293, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[293, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[293, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[294, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[294, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[294, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[294, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[294, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[295, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[296, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[296, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[296, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[296, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[296, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[296, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[296, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[296, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[296, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[296, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[296, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[296, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[296, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[296, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[296, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[296, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[296, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[296, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[296, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[296, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[296, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[296, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[296, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[296, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[296, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[296, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[296, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[296, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[296, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[296, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[296, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[296, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[296, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[296, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[296, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[296, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[296, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[296, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[296, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[296, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[296, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[296, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[296, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[296, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[296, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[296, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[296, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[296, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[296, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[296, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[296, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[296, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[296, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[297, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[297, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[298, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[298, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[299, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[299, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[300, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[300, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[301, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[302, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[302, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[302, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[303, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[303, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[303, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[303, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[304, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[304, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[304, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[304, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[304, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[305, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[305, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[306, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[306, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[307, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[308, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[308, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[309, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[309, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[310, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[310, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[310, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[311, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[311, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[311, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[311, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[311, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[312, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[313, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[314, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[314, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[314, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[314, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[314, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[315, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[315, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[315, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[315, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[315, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[315, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[315, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[316, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[316, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[316, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[316, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[316, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[317, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[318, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[319, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[319, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[319, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[319, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[319, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[319, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[319, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[319, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[319, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[319, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[319, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[320, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[320, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[320, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[320, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[320, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[320, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[320, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[321, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[321, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[321, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[321, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[321, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[321, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[321, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[321, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[321, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[321, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[321, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[321, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[321, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[321, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[321, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[321, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[321, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[321, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[321, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[321, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[321, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[322, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[322, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[322, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[322, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[322, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[322, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[323, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[323, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[323, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[323, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[323, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[323, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[323, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[324, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[324, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[325, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[325, "module-neural_compressor.experimental.scheduler"]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[326, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[326, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[327, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[327, "module-neural_compressor.experimental.strategy.basic"]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[328, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[328, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[328, "neural_compressor.experimental.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[328, "neural_compressor.experimental.strategy.bayesian.acq_max"]], "neural_compressor.experimental.strategy.bayesian": [[328, "module-neural_compressor.experimental.strategy.bayesian"]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[329, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.exhaustive": [[329, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[330, "module-neural_compressor.experimental.strategy"]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[331, "neural_compressor.experimental.strategy.mse.MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[331, "module-neural_compressor.experimental.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[332, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[332, "module-neural_compressor.experimental.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[333, "neural_compressor.experimental.strategy.random.RandomTuneStrategy"]], "neural_compressor.experimental.strategy.random": [[333, "module-neural_compressor.experimental.strategy.random"]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[334, "neural_compressor.experimental.strategy.strategy.TuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[334, "module-neural_compressor.experimental.strategy.strategy"]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[334, "neural_compressor.experimental.strategy.strategy.strategy_registry"]], "neural_compressor.experimental.strategy.utils.constant": [[335, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[336, "module-neural_compressor.experimental.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[337, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[337, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[337, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[337, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[337, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[337, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[337, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[337, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[337, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[338, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[338, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[338, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[338, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[338, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[338, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[338, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[339, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[339, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[340, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[340, "neural_compressor.experimental.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[340, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.experimental.strategy.utils.utility": [[340, "module-neural_compressor.experimental.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[340, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type"]], "neural_compressor": [[341, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[342, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[342, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[342, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[342, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[342, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[342, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[342, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[342, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[342, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[343, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[343, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[344, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[345, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[345, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[345, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[345, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[345, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[345, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[345, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[345, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[346, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[346, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[346, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[346, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[346, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[347, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[347, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[347, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[347, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[347, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[348, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[349, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[349, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[349, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[349, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[349, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[349, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[349, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[349, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[349, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[349, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[349, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[349, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[349, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[349, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[349, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[349, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[349, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[349, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[349, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[349, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[349, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[349, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[349, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[349, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[349, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[349, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[349, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[349, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[349, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[349, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[349, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[349, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[349, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[349, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[349, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[349, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[349, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[349, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[349, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[349, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[349, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[349, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[349, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[349, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[349, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[349, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[349, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[349, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[349, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[349, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[349, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[349, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[349, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[349, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[349, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[350, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[350, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[351, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[351, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[352, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[353, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[353, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[354, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[354, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[354, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[355, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[355, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[356, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[356, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[357, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[357, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[358, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[358, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[358, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[358, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[358, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[358, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[358, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[358, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[358, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[358, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[358, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[358, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[358, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[358, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[358, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[358, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[358, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[358, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[359, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[359, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[359, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[359, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[359, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[360, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[360, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[360, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[360, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[360, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[360, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[360, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[360, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[360, "neural_compressor.objective.objective_registry"]], "neural_compressor.profiling": [[361, "module-neural_compressor.profiling"]], "parserfactory (class in neural_compressor.profiling.parser.factory)": [[362, "neural_compressor.profiling.parser.factory.ParserFactory"]], "neural_compressor.profiling.parser.factory": [[362, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[363, "module-neural_compressor.profiling.parser"]], "onnxrtparserfactory (class in neural_compressor.profiling.parser.onnx_parser.factory)": [[364, "neural_compressor.profiling.parser.onnx_parser.factory.OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[364, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[365, "module-neural_compressor.profiling.parser.onnx_parser"]], "onnxprofilingparser (class in neural_compressor.profiling.parser.onnx_parser.parser)": [[366, "neural_compressor.profiling.parser.onnx_parser.parser.OnnxProfilingParser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[366, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "profilingparser (class in neural_compressor.profiling.parser.parser)": [[367, "neural_compressor.profiling.parser.parser.ProfilingParser"]], "neural_compressor.profiling.parser.parser": [[367, "module-neural_compressor.profiling.parser.parser"]], "profilingresult (class in neural_compressor.profiling.parser.result)": [[368, "neural_compressor.profiling.parser.result.ProfilingResult"]], "neural_compressor.profiling.parser.result": [[368, "module-neural_compressor.profiling.parser.result"]], "tensorflowparserfactory (class in neural_compressor.profiling.parser.tensorflow_parser.factory)": [[369, "neural_compressor.profiling.parser.tensorflow_parser.factory.TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[369, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[370, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "tensorflowprofilingparser (class in neural_compressor.profiling.parser.tensorflow_parser.parser)": [[371, "neural_compressor.profiling.parser.tensorflow_parser.parser.TensorFlowProfilingParser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[371, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "profilerfactory (class in neural_compressor.profiling.profiler.factory)": [[372, "neural_compressor.profiling.profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.factory": [[372, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[373, "module-neural_compressor.profiling.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.onnxrt_profiler.factory)": [[374, "neural_compressor.profiling.profiler.onnxrt_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[374, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[375, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "profiler (class in neural_compressor.profiling.profiler.onnxrt_profiler.profiler)": [[376, "neural_compressor.profiling.profiler.onnxrt_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[376, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "create_onnx_config() (in module neural_compressor.profiling.profiler.onnxrt_profiler.utils)": [[377, "neural_compressor.profiling.profiler.onnxrt_profiler.utils.create_onnx_config"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[377, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "profiler (class in neural_compressor.profiling.profiler.profiler)": [[378, "neural_compressor.profiling.profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.profiler": [[378, "module-neural_compressor.profiling.profiler.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.tensorflow_profiler.factory)": [[379, "neural_compressor.profiling.profiler.tensorflow_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[379, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[380, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "profiler (class in neural_compressor.profiling.profiler.tensorflow_profiler.profiler)": [[381, "neural_compressor.profiling.profiler.tensorflow_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[381, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "create_tf_config() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[382, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.create_tf_config"]], "delete_assign() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[382, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[382, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "set_eager_execution() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[382, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.set_eager_execution"]], "fit() (in module neural_compressor.quantization)": [[383, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[383, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[384, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[384, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[385, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[385, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[386, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[386, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[387, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[387, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[387, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[387, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[387, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[388, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[388, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[389, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[389, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[390, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[390, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[391, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[392, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[392, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[393, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[393, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[394, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[394, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[395, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[395, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[395, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[395, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[396, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[397, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[398, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[398, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[398, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[398, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[398, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[398, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[398, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[398, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[398, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "neural_compressor.strategy.utils.tuning_sampler": [[398, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[399, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[399, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[399, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[399, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[399, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[399, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[399, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[400, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[400, "module-neural_compressor.strategy.utils.tuning_structs"]], "classregister (class in neural_compressor.strategy.utils.utility)": [[401, "neural_compressor.strategy.utils.utility.ClassRegister"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[401, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[401, "neural_compressor.strategy.utils.utility.QuantOptions"]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[401, "neural_compressor.strategy.utils.utility.QuantType"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[401, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[401, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[401, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[401, "module-neural_compressor.strategy.utils.utility"]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[401, "neural_compressor.strategy.utils.utility.preprocess_user_cfg"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[401, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[402, "neural_compressor.template.api_doc_example.ExampleClass"]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[402, "neural_compressor.template.api_doc_example.ExampleClass.attr1"]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[402, "neural_compressor.template.api_doc_example.ExampleClass.attr2"]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[402, "neural_compressor.template.api_doc_example.ExampleClass.attr5"]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[402, "neural_compressor.template.api_doc_example.attribute1"]], "function1() (in module neural_compressor.template.api_doc_example)": [[402, "neural_compressor.template.api_doc_example.function1"]], "function2() (in module neural_compressor.template.api_doc_example)": [[402, "neural_compressor.template.api_doc_example.function2"]], "function3() (in module neural_compressor.template.api_doc_example)": [[402, "neural_compressor.template.api_doc_example.function3"]], "generator1() (in module neural_compressor.template.api_doc_example)": [[402, "neural_compressor.template.api_doc_example.generator1"]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[402, "neural_compressor.template.api_doc_example.module_debug_level1"]], "neural_compressor.template.api_doc_example": [[402, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[403, "module-neural_compressor.template"]], "callbacks (class in neural_compressor.training)": [[404, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[404, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[404, "neural_compressor.training.fit"]], "neural_compressor.training": [[404, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[404, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[405, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[405, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[406, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[407, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[407, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[407, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[407, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[407, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[407, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[407, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[407, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[407, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[407, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[408, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[409, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[409, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[410, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "neural_compressor.utils.load_huggingface": [[410, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[410, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[411, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[411, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[411, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[411, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[411, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[411, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[411, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[411, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[411, "neural_compressor.utils.logger.warning"]], "neural_compressor.utils.neural_insights_utils": [[412, "module-neural_compressor.utils.neural_insights_utils"]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[412, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload"]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[412, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload"]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[412, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[413, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[413, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[414, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[414, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[414, "module-neural_compressor.utils.pytorch"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.Dequantize"]], "dotdict (class in neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.calculate_mse"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.compute_sparsity"]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.dequantize_weight"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[415, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[415, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[416, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[416, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[416, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[417, "module-neural_compressor.version"]]}})