Search.setIndex({"docnames": ["autoapi/block_mask/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/teq/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/hpo/index", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index", "autoapi/neural_compressor/compression/hpo/search_algorithms/index", "autoapi/neural_compressor/compression/hpo/search_space/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/base/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/patterns/mha/index", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index", "autoapi/neural_compressor/compression/pruner/pruners/base/index", "autoapi/neural_compressor/compression/pruner/pruners/basic/index", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/pruners/mha/index", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/tf_criteria/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/compression/pruning/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/profiling/parser/factory/index", "autoapi/neural_compressor/profiling/parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index", "autoapi/neural_compressor/profiling/parser/parser/index", "autoapi/neural_compressor/profiling/parser/result/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index", "autoapi/neural_compressor/profiling/profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index", "autoapi/neural_compressor/profiling/profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/template/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/calibration", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/diagnosis", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/block_mask/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/teq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/hpo/index.rst", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index.rst", "autoapi/neural_compressor/compression/hpo/search_algorithms/index.rst", "autoapi/neural_compressor/compression/hpo/search_space/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/base/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/mha/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/base/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/basic/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/mha/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/tf_criteria/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/compression/pruning/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/profiling/parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/result/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index.rst", "autoapi/neural_compressor/profiling/profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index.rst", "autoapi/neural_compressor/profiling/profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/template/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/calibration.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/diagnosis.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.reduce</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.unary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_scaler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.pattern_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.teq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.sa_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.search_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.auto_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.pattern_analyzer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.weight_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.ninm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.nxm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.progressive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.retrain_free</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.tf_criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template.api_doc_example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.neural_insights_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.weights_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "Calibration Algorithms in Quantization", "DataLoader", "Dataset", "Design", "Diagnosis", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (70)", "Pythonic Style Access for Configurations", "Quantization", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"block": [0, 154, 159, 174, 184, 187, 192, 196, 313, 354, 396, 451, 477, 479, 484, 487, 490], "mask": [0, 180, 182, 185, 187, 191, 192, 216, 260, 286, 315, 339, 479, 493], "adaptor_registri": [1, 419], "cl": [1, 160, 167, 171, 172, 180, 185, 193, 194, 218, 225, 233, 235, 240, 262, 269, 275, 297, 304, 308, 313, 315, 317, 328, 343, 354, 389, 409], "sourc": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 171, 172, 174, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 272, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 302, 303, 304, 305, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 356, 358, 360, 361, 362, 363, 365, 366, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 392, 393, 394, 395, 396, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 415, 418, 453, 455, 468, 470, 472, 473, 475, 480], "The": [1, 3, 11, 14, 16, 34, 52, 73, 112, 118, 120, 139, 147, 152, 158, 160, 165, 166, 167, 171, 172, 174, 178, 180, 182, 183, 185, 186, 187, 192, 193, 194, 195, 196, 197, 198, 200, 201, 204, 205, 206, 216, 217, 218, 219, 220, 224, 225, 233, 235, 238, 240, 243, 245, 248, 249, 250, 260, 261, 262, 263, 264, 268, 269, 275, 276, 281, 283, 284, 285, 287, 288, 290, 292, 293, 294, 296, 297, 299, 300, 302, 303, 304, 305, 308, 310, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 325, 326, 327, 328, 332, 334, 336, 337, 338, 340, 341, 343, 344, 352, 354, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 393, 395, 396, 398, 399, 401, 403, 404, 408, 409, 410, 413, 415, 416, 419, 420, 421, 422, 424, 428, 431, 434, 436, 437, 438, 439, 441, 442, 444, 446, 448, 450, 451, 452, 454, 455, 456, 457, 460, 461, 463, 466, 468, 469, 470, 472, 473, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493], "decor": [1, 16, 34, 66, 67, 69, 147, 160, 171, 172, 180, 185, 194, 233, 240, 275, 290, 297, 304, 308, 313, 315, 317, 328, 331, 343, 354, 389, 409, 415, 416, 419, 490], "us": [1, 13, 16, 34, 42, 43, 47, 48, 69, 102, 104, 115, 140, 150, 152, 158, 159, 165, 167, 171, 172, 174, 178, 180, 185, 189, 190, 194, 195, 198, 200, 201, 204, 205, 214, 215, 216, 217, 218, 219, 220, 223, 232, 233, 234, 235, 240, 248, 249, 258, 259, 260, 261, 262, 263, 264, 267, 274, 275, 279, 280, 281, 283, 284, 286, 290, 291, 292, 297, 304, 305, 308, 310, 313, 315, 316, 317, 318, 319, 322, 325, 328, 331, 332, 336, 337, 339, 343, 354, 371, 376, 377, 381, 384, 386, 389, 393, 395, 396, 399, 400, 401, 402, 409, 413, 414, 415, 416, 419, 420, 436, 437, 439, 441, 442, 443, 444, 446, 448, 450, 452, 453, 455, 456, 457, 458, 459, 460, 462, 463, 466, 468, 470, 472, 473, 475, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493], "regist": [1, 16, 34, 160, 167, 171, 172, 174, 180, 181, 185, 188, 193, 194, 195, 218, 225, 233, 235, 240, 262, 269, 275, 290, 297, 304, 308, 313, 315, 317, 328, 331, 343, 354, 389, 395, 406, 416, 419, 439, 444, 454, 455, 476, 477, 487, 490], "all": [1, 13, 16, 34, 44, 62, 96, 149, 158, 159, 160, 162, 165, 166, 172, 180, 188, 196, 200, 201, 206, 207, 214, 218, 225, 233, 234, 240, 243, 245, 250, 258, 262, 269, 275, 280, 283, 286, 288, 290, 297, 304, 308, 309, 313, 319, 328, 331, 336, 339, 341, 343, 345, 354, 389, 395, 401, 409, 413, 418, 419, 420, 421, 438, 439, 444, 448, 452, 455, 458, 466, 469, 470, 473, 474, 475, 476, 478, 479, 480, 482, 483, 487, 489, 490], "subclass": [1, 16, 34, 160, 171, 172, 180, 185, 194, 211, 215, 218, 225, 233, 240, 255, 259, 262, 269, 275, 290, 297, 304, 308, 313, 315, 317, 328, 331, 343, 354, 389, 419], "paramet": [1, 11, 13, 14, 16, 42, 43, 44, 66, 67, 69, 85, 104, 115, 131, 139, 140, 147, 148, 149, 150, 155, 156, 158, 159, 160, 165, 166, 167, 169, 171, 172, 174, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 204, 205, 215, 216, 218, 225, 229, 233, 235, 240, 245, 248, 249, 259, 260, 262, 269, 272, 275, 276, 278, 279, 280, 281, 283, 284, 286, 287, 288, 290, 292, 293, 294, 296, 297, 298, 299, 300, 302, 303, 304, 305, 308, 310, 313, 314, 315, 316, 317, 318, 322, 328, 332, 334, 336, 337, 339, 340, 341, 343, 344, 348, 352, 354, 371, 376, 377, 381, 389, 393, 395, 396, 398, 401, 405, 406, 408, 409, 415, 420, 438, 439, 442, 444, 451, 454, 455, 469, 475, 476, 479, 482, 484, 486, 487, 489, 490, 492], "framework_specific_info": [1, 3, 11, 14, 44, 46, 419], "base": [1, 3, 11, 13, 14, 16, 34, 45, 46, 85, 104, 115, 119, 121, 131, 143, 150, 154, 158, 160, 166, 171, 172, 173, 174, 175, 181, 188, 193, 195, 201, 206, 209, 214, 216, 218, 225, 233, 243, 250, 253, 258, 260, 262, 269, 275, 290, 296, 298, 304, 305, 308, 310, 315, 325, 328, 332, 343, 345, 352, 353, 354, 386, 389, 393, 416, 418, 419, 420, 421, 439, 443, 444, 448, 455, 456, 463, 464, 466, 475, 479, 482, 484, 486, 488, 490, 493], "framework": [1, 3, 11, 13, 14, 44, 165, 167, 181, 185, 188, 192, 202, 203, 207, 208, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 230, 233, 235, 236, 240, 246, 247, 251, 252, 254, 256, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 271, 273, 275, 281, 290, 291, 318, 326, 332, 343, 344, 345, 346, 348, 387, 393, 401, 418, 419, 421, 437, 441, 444, 445, 449, 450, 451, 452, 454, 455, 456, 479, 480, 482, 485, 488, 489, 490, 491, 492, 493], "layer": [1, 3, 11, 14, 45, 46, 115, 116, 117, 118, 120, 121, 149, 155, 159, 163, 167, 176, 178, 179, 180, 184, 189, 196, 200, 201, 235, 242, 313, 314, 399, 401, 409, 419, 420, 421, 443, 451, 479, 485], "mxnet_util": 2, "util": [2, 12, 17, 104, 109, 110, 138, 141, 148, 150, 151, 156, 173, 175, 200, 201, 242, 282, 284, 314, 324, 335, 337, 369, 374, 385, 420, 421, 422, 437, 444, 455, 458, 482, 490, 491], "ox_util": 2, "oper": [2, 17, 43, 103, 109, 139, 147, 178, 179, 184, 200, 201, 229, 272, 313, 371, 376, 415, 436, 438, 441, 446, 475, 482, 484, 487, 489, 490], "activ": [2, 17, 29, 140, 158, 159, 200, 201, 242, 332, 393, 395, 419, 420, 421, 437, 441, 443, 448, 455, 476, 481, 482, 484, 487, 488, 492], "argmax": [2, 17, 29], "attent": [2, 17, 29, 154, 176, 178, 189, 200, 201, 216, 260, 413, 442, 479], "binary_op": [2, 17, 29], "concat": [2, 17, 29, 146], "conv": [2, 17, 29, 57, 61, 65, 70, 71, 72, 91, 108, 163, 200, 201, 415, 420, 421, 455, 479, 481, 482, 490], "direct_q8": [2, 17, 29], "embed_layernorm": [2, 17, 29], "gather": [2, 13, 17, 29, 200, 201, 313], "gavgpool": [2, 17, 29], "gemm": [2, 17, 29, 200, 201], "lstm": [2, 17, 29], "matmul": [2, 17, 29, 51, 58, 64, 72, 93, 108, 127, 136, 184, 200, 201, 313, 448, 490], "maxpool": [2, 17, 29, 128, 137, 448], "norm": [2, 17, 29], "op": [2, 13, 17, 29, 44, 51, 56, 64, 65, 66, 67, 68, 69, 70, 71, 73, 77, 80, 84, 87, 90, 91, 92, 93, 95, 104, 106, 108, 122, 123, 124, 130, 132, 133, 134, 135, 140, 142, 145, 147, 148, 150, 156, 158, 163, 178, 200, 201, 280, 325, 332, 333, 371, 376, 382, 384, 386, 393, 394, 395, 403, 409, 419, 420, 421, 441, 448, 455, 456, 479, 482, 483, 485, 487, 488, 490, 492], "pad": [2, 17, 29, 70, 71, 216, 233, 260, 275, 439, 489], "pool": [2, 17, 29], "reduc": [2, 17, 29, 200, 201, 419, 437, 443, 455, 456, 475, 476, 479, 480, 482, 483, 484, 487, 490, 492], "resiz": [2, 17, 29, 216, 217, 229, 233, 260, 261, 272, 275, 439, 489], "split": [2, 17, 29, 43, 81, 159, 232, 233, 274, 275, 415, 484, 487, 489], "unary_op": [2, 17, 29], "calibr": [2, 11, 13, 14, 17, 48, 88, 89, 139, 158, 159, 165, 200, 201, 204, 205, 248, 249, 281, 318, 377, 403, 419, 421, 439, 450, 451, 482, 490, 491, 492], "quantiz": [2, 11, 13, 14, 16, 17, 42, 43, 47, 48, 87, 91, 93, 95, 98, 106, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 148, 149, 150, 152, 153, 155, 157, 158, 159, 163, 165, 166, 200, 201, 204, 205, 229, 236, 243, 248, 249, 272, 280, 281, 282, 292, 319, 325, 331, 335, 382, 384, 386, 395, 398, 399, 403, 408, 409, 419, 426, 438, 439, 444, 445, 448, 450, 451, 454, 457, 458, 463, 465, 466, 469, 478, 480, 485, 488, 489, 490, 491, 492], "smooth_quant": [2, 17, 162, 200, 201, 335, 482, 487], "tf_util": 2, "graph_rewrit": [2, 110], "bf16": [2, 56, 86, 110, 148, 200, 201, 332, 393, 419, 420, 448, 455, 460, 465, 469, 475, 483, 490, 493], "gener": [2, 13, 47, 48, 86, 110, 121, 147, 149, 158, 165, 178, 196, 204, 205, 206, 215, 218, 219, 220, 221, 233, 248, 249, 250, 259, 262, 263, 264, 265, 275, 283, 291, 322, 336, 344, 372, 377, 381, 396, 398, 415, 419, 421, 438, 442, 454, 455, 456, 458, 463, 468, 470, 472, 473, 475, 477, 479, 480, 482, 483, 484, 487, 488, 489, 490], "int8": [2, 18, 19, 43, 86, 110, 122, 123, 124, 130, 132, 133, 134, 135, 142, 147, 159, 164, 165, 200, 201, 229, 272, 278, 279, 280, 332, 334, 393, 395, 408, 409, 415, 418, 419, 420, 421, 436, 439, 443, 448, 455, 456, 460, 463, 465, 466, 469, 475, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 492], "onnx": [2, 14, 15, 16, 29, 41, 43, 86, 110, 141, 163, 200, 201, 212, 256, 278, 279, 280, 344, 351, 371, 407, 418, 419, 420, 422, 438, 441, 445, 446, 448, 449, 451, 456, 457, 460, 465, 466, 480, 481, 484, 485, 487, 490], "qdq": [2, 42, 86, 110, 111, 112, 141, 158, 159, 200, 201, 278, 279, 280, 419, 441, 446, 451, 465, 466, 482, 485, 487], "graph_bas": [2, 86, 110], "quantize_graph": [2, 110], "qat": [2, 110, 111, 156, 201, 292, 352, 443, 444, 451, 455, 482], "quantize_graph_bas": [2, 110, 111], "quantize_graph_bn": [2, 110, 111], "quantize_graph_concatv2": [2, 110, 111], "quantize_graph_conv": [2, 110, 111], "quantize_graph_for_intel_cpu": [2, 110, 111], "quantize_graph_matmul": [2, 110, 111], "quantize_graph_pool": [2, 110, 111], "transform_graph": [2, 110], "bias_correct": [2, 110, 144], "graph_transform_bas": [2, 110, 144], "insert_log": [2, 110, 144], "rerange_quantized_concat": [2, 110, 144], "graph_convert": [2, 110], "graph_converter_without_calib": [2, 110], "graph_util": [2, 110], "quantize_graph_common": [2, 110], "smooth_quant_calibr": [2, 110], "smooth_quant_scal": [2, 110], "tf2onnx_convert": [2, 110], "torch_util": [2, 237, 282, 335, 487], "bf16_convert": [2, 50, 86, 110, 151], "hawq_metr": [2, 151], "model_wrapp": [2, 15, 151], "pattern_detector": [2, 151], "symbolic_trac": [2, 151], "tensorflow": [2, 50, 52, 74, 75, 76, 86, 94, 100, 101, 102, 103, 104, 105, 109, 110, 111, 113, 116, 129, 139, 140, 141, 144, 147, 195, 200, 201, 215, 216, 217, 218, 221, 223, 225, 233, 235, 240, 259, 260, 261, 262, 265, 267, 269, 275, 279, 280, 281, 284, 286, 290, 291, 292, 318, 326, 337, 339, 343, 344, 352, 370, 371, 375, 376, 377, 387, 409, 416, 418, 419, 420, 437, 438, 441, 442, 443, 445, 448, 449, 451, 452, 455, 456, 457, 465, 466, 479, 480, 481, 486, 487, 490, 492], "kerasadaptor": 3, "kerasqueri": 3, "local_config_fil": [3, 11, 14, 46], "none": [3, 13, 14, 41, 43, 44, 46, 47, 48, 62, 88, 101, 103, 104, 109, 115, 141, 147, 149, 150, 152, 153, 155, 157, 158, 159, 165, 166, 167, 172, 176, 178, 182, 196, 197, 198, 200, 201, 204, 205, 206, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 229, 233, 234, 235, 236, 243, 245, 248, 249, 250, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 272, 275, 276, 279, 280, 281, 286, 290, 291, 292, 293, 296, 305, 310, 314, 318, 322, 325, 327, 328, 332, 339, 343, 344, 354, 370, 375, 376, 377, 378, 381, 382, 386, 388, 389, 393, 396, 398, 399, 401, 406, 408, 409, 419, 420, 438, 439, 454, 482, 484, 488, 489, 490], "defin": [3, 11, 14, 45, 85, 150, 153, 171, 172, 178, 180, 185, 186, 187, 192, 193, 194, 200, 201, 204, 205, 248, 249, 293, 294, 296, 297, 298, 305, 310, 313, 314, 315, 317, 344, 377, 398, 408, 413, 416, 419, 420, 438, 439, 442, 443, 448, 451, 454, 455, 476, 478, 479, 482, 486, 487, 488, 490, 492], "queri": [3, 11, 13, 14, 46, 147, 158, 178, 189, 200, 201, 420, 421, 482], "interfac": [3, 11, 14, 45, 85, 112, 197, 281, 305, 310, 318, 319, 401, 451, 455, 466, 482, 485], "each": [3, 11, 14, 45, 140, 147, 150, 200, 201, 214, 218, 221, 229, 233, 258, 262, 265, 272, 275, 284, 286, 287, 288, 325, 337, 339, 340, 341, 386, 409, 414, 419, 420, 421, 439, 441, 442, 443, 448, 455, 460, 466, 469, 475, 477, 479, 486, 487, 488, 489, 490, 491], "adapt": [3, 11, 14, 45, 413, 418, 420, 439, 466, 480], "should": [3, 11, 14, 45, 53, 114, 115, 166, 176, 178, 189, 200, 201, 204, 205, 214, 216, 218, 233, 238, 248, 249, 258, 260, 262, 275, 280, 284, 337, 343, 344, 377, 396, 398, 409, 415, 416, 419, 420, 421, 439, 442, 444, 454, 455, 461, 470, 473, 475, 477, 479, 482, 489, 490, 492], "implement": [3, 11, 14, 45, 109, 142, 146, 204, 205, 211, 214, 215, 216, 218, 248, 249, 255, 258, 259, 260, 262, 283, 336, 344, 354, 377, 384, 398, 421, 438, 439, 454, 455, 466, 476, 479, 482, 484, 485, 488, 490, 492], "inherit": [3, 11, 14, 45, 166, 167, 190, 191, 194, 200, 213, 233, 235, 243, 257, 275, 315, 317, 416, 419, 420, 439], "specif": [3, 11, 14, 42, 45, 103, 115, 159, 165, 196, 200, 201, 216, 217, 218, 219, 223, 225, 240, 260, 261, 262, 263, 267, 269, 292, 299, 300, 302, 303, 304, 343, 377, 406, 413, 416, 419, 420, 437, 438, 441, 442, 448, 450, 454, 455, 456, 457, 458, 462, 463, 465, 469, 475, 477, 479, 481, 490, 492], "backend": [3, 11, 14, 15, 41, 42, 45, 163, 200, 201, 202, 203, 207, 208, 212, 216, 217, 219, 220, 221, 222, 223, 227, 230, 233, 239, 240, 246, 247, 251, 252, 254, 256, 260, 261, 263, 264, 265, 266, 267, 271, 273, 275, 291, 326, 344, 345, 346, 348, 387, 415, 421, 441, 444, 450, 451, 455, 456, 464, 481, 489, 492], "own": [3, 11, 14, 45, 73, 214, 233, 258, 275, 354, 416, 420, 438, 439, 451, 454, 477, 484, 486, 491], "mxnetadaptor": 11, "do": [11, 14, 149, 166, 200, 201, 215, 216, 259, 260, 276, 280, 283, 286, 316, 336, 339, 408, 413, 420, 439, 444, 448, 451, 454, 455, 470, 473, 479, 483, 485, 487, 490], "inspect": [11, 14, 485, 488], "tensor": [11, 13, 14, 15, 16, 43, 69, 104, 147, 150, 158, 159, 174, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 201, 233, 275, 278, 280, 313, 315, 325, 352, 386, 409, 415, 421, 438, 439, 441, 479, 482, 485, 488, 489, 490], "dict": [11, 13, 14, 44, 115, 147, 148, 149, 150, 158, 159, 160, 165, 171, 174, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 204, 205, 215, 234, 240, 248, 249, 259, 278, 280, 285, 286, 287, 288, 290, 293, 296, 297, 298, 305, 308, 310, 313, 314, 315, 316, 317, 322, 325, 331, 334, 338, 339, 340, 341, 343, 344, 352, 377, 392, 395, 396, 398, 399, 401, 408, 409, 415, 420, 446, 454, 479, 481, 482, 487, 488, 490], "configur": [11, 13, 14, 44, 117, 148, 158, 165, 196, 197, 200, 201, 204, 205, 207, 218, 221, 234, 239, 248, 249, 262, 265, 276, 280, 281, 292, 293, 294, 296, 305, 310, 314, 318, 319, 325, 343, 344, 354, 377, 386, 395, 398, 400, 401, 407, 408, 415, 416, 419, 420, 439, 441, 455, 462, 476, 477, 479, 482, 485, 489, 490, 493], "mxnetqueri": 11, "mxnet": [12, 13, 16, 201, 211, 215, 218, 221, 225, 233, 255, 259, 262, 265, 269, 275, 281, 290, 318, 343, 344, 349, 377, 418, 419, 420, 437, 438, 445, 448, 451, 452, 455, 456, 457, 481, 490, 492], "init": [12, 17, 42, 162, 168, 175, 177, 439, 454, 490], "optyp": [13, 200, 201, 278, 420], "enum": 13, "type": [13, 16, 42, 43, 44, 73, 95, 104, 115, 121, 131, 139, 147, 148, 149, 150, 158, 159, 160, 167, 171, 172, 178, 179, 180, 185, 193, 194, 196, 198, 200, 201, 214, 216, 218, 225, 233, 235, 240, 258, 260, 262, 269, 275, 280, 283, 284, 286, 290, 297, 304, 308, 313, 315, 317, 322, 328, 332, 334, 336, 337, 339, 343, 352, 354, 381, 382, 389, 393, 395, 396, 408, 409, 414, 419, 420, 439, 441, 444, 446, 448, 451, 455, 456, 476, 482, 484, 486, 489, 490, 491, 492], "isiter": 13, "obj": [13, 104, 196, 215, 245, 259, 276, 281, 292, 293, 294, 296, 305, 310, 314, 318, 344, 354, 377, 398, 401, 409], "bool": [13, 42, 140, 147, 149, 156, 158, 159, 180, 200, 201, 216, 218, 229, 233, 260, 262, 272, 275, 280, 284, 290, 313, 331, 337, 343, 392, 396, 408, 409, 438, 439, 454, 481, 489], "check": [13, 66, 67, 104, 147, 158, 159, 196, 207, 218, 262, 278, 314, 408, 409, 414, 418, 441, 444, 452, 459, 461, 463, 470, 473, 474, 485], "whether": [13, 104, 115, 147, 149, 159, 180, 200, 201, 214, 216, 229, 233, 258, 260, 272, 275, 284, 286, 290, 313, 337, 339, 343, 401, 408, 409, 419, 439, 454, 482, 484, 487, 489], "object": [13, 42, 43, 44, 73, 85, 104, 115, 131, 148, 150, 156, 158, 165, 166, 174, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 204, 205, 206, 216, 217, 218, 233, 234, 236, 245, 248, 249, 250, 260, 261, 262, 275, 276, 281, 286, 294, 296, 299, 300, 302, 303, 304, 305, 310, 313, 314, 315, 316, 317, 318, 322, 335, 339, 343, 344, 352, 353, 371, 376, 377, 381, 395, 398, 401, 408, 409, 415, 416, 420, 426, 436, 438, 439, 447, 454, 455, 457, 478, 479, 481, 482, 489, 490, 491, 493], "i": [13, 43, 44, 47, 48, 52, 53, 56, 59, 63, 69, 81, 84, 104, 131, 142, 147, 149, 150, 152, 156, 158, 164, 165, 166, 174, 178, 179, 185, 190, 191, 192, 193, 195, 196, 200, 201, 204, 205, 206, 214, 215, 216, 217, 218, 219, 220, 223, 225, 229, 233, 234, 236, 240, 242, 243, 248, 249, 250, 258, 259, 260, 261, 262, 263, 264, 267, 269, 272, 275, 283, 286, 288, 290, 292, 297, 305, 310, 314, 315, 319, 326, 336, 339, 341, 343, 344, 354, 360, 361, 365, 377, 382, 387, 395, 396, 398, 408, 409, 413, 414, 415, 416, 419, 420, 421, 422, 424, 428, 431, 434, 436, 437, 438, 439, 441, 442, 443, 444, 446, 447, 448, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 466, 468, 469, 470, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493], "iter": [13, 15, 104, 139, 147, 159, 165, 179, 185, 192, 194, 200, 201, 204, 205, 209, 214, 218, 219, 236, 248, 249, 253, 258, 262, 263, 315, 317, 344, 377, 398, 401, 415, 416, 419, 436, 438, 439, 455, 479, 481, 482, 488, 490, 492], "return": [13, 16, 44, 52, 66, 67, 69, 73, 104, 115, 147, 148, 149, 150, 156, 158, 159, 160, 165, 167, 171, 172, 178, 180, 181, 185, 188, 193, 194, 196, 198, 204, 205, 218, 225, 229, 233, 234, 235, 240, 245, 248, 249, 262, 269, 272, 275, 280, 283, 284, 286, 287, 288, 290, 296, 297, 304, 308, 313, 314, 315, 317, 322, 328, 332, 334, 336, 337, 339, 340, 341, 343, 344, 348, 352, 354, 371, 376, 377, 381, 389, 393, 395, 396, 398, 401, 406, 408, 409, 415, 416, 420, 421, 438, 439, 444, 454, 457, 477, 479, 482, 487, 488, 490], "true": [13, 84, 112, 145, 147, 159, 165, 171, 200, 201, 214, 216, 218, 219, 232, 233, 234, 258, 260, 262, 263, 274, 275, 280, 284, 290, 308, 331, 337, 343, 354, 377, 392, 396, 401, 408, 409, 420, 438, 439, 441, 444, 448, 454, 455, 458, 461, 462, 481, 482, 484, 487, 488, 489, 490, 492], "els": [13, 147, 159, 201, 214, 258, 354, 406, 463, 488], "fals": [13, 14, 15, 41, 42, 46, 47, 48, 70, 71, 88, 91, 98, 101, 102, 104, 112, 130, 135, 142, 145, 146, 147, 156, 158, 159, 165, 167, 200, 201, 206, 208, 211, 212, 213, 215, 216, 218, 229, 233, 234, 235, 236, 242, 250, 252, 255, 256, 257, 259, 260, 262, 272, 275, 286, 290, 339, 343, 354, 377, 396, 401, 409, 419, 420, 438, 439, 448, 454, 455, 468, 472, 481, 482, 484, 487, 488, 489, 490, 492], "boolean": 13, "ensure_list": 13, "x": [13, 53, 73, 149, 179, 200, 201, 215, 233, 259, 275, 322, 381, 396, 437, 441, 444, 456, 457, 482, 487, 488, 489, 491], "ensur": [13, 233, 275, 322, 381, 444, 482, 489], "list": [13, 42, 43, 52, 104, 139, 147, 148, 149, 150, 154, 158, 165, 172, 178, 179, 184, 189, 200, 201, 204, 205, 209, 216, 229, 233, 234, 248, 249, 253, 260, 272, 275, 279, 280, 283, 284, 286, 287, 288, 290, 297, 305, 310, 313, 316, 331, 336, 337, 339, 340, 341, 343, 344, 352, 360, 361, 365, 377, 392, 396, 398, 399, 409, 415, 418, 419, 439, 446, 448, 452, 455, 458, 463, 465, 468, 469, 472, 477, 479, 481, 482, 483, 487, 488, 490], "input": [13, 15, 42, 43, 44, 52, 59, 63, 66, 67, 69, 70, 71, 73, 81, 82, 84, 85, 104, 108, 109, 115, 121, 140, 147, 148, 153, 155, 156, 157, 158, 159, 163, 178, 179, 200, 201, 204, 205, 216, 217, 218, 220, 229, 232, 233, 238, 248, 249, 260, 261, 262, 264, 272, 274, 275, 278, 279, 280, 343, 344, 348, 352, 377, 398, 406, 408, 409, 416, 419, 420, 436, 437, 438, 439, 441, 442, 443, 444, 446, 448, 450, 454, 455, 456, 457, 458, 463, 479, 481, 482, 484, 487, 488, 489, 492], "check_mx_vers": 13, "version": [13, 52, 103, 153, 158, 178, 201, 279, 280, 335, 413, 415, 419, 448, 452, 453, 455, 468, 470, 472, 473, 480, 487, 490, 491], "str": [13, 42, 139, 148, 150, 154, 155, 156, 158, 159, 160, 167, 178, 200, 201, 216, 217, 218, 225, 229, 233, 235, 239, 240, 260, 261, 262, 269, 272, 275, 279, 280, 283, 284, 286, 288, 290, 297, 308, 331, 334, 336, 337, 339, 341, 343, 362, 370, 372, 375, 376, 392, 395, 396, 401, 406, 409, 410, 438, 439, 454, 481, 488, 489], "mx": 13, "__version__": 13, "combine_cap": 13, "current": [13, 69, 103, 155, 174, 178, 181, 185, 200, 201, 292, 299, 300, 302, 303, 304, 313, 315, 322, 326, 381, 387, 409, 415, 416, 419, 421, 437, 444, 448, 455, 458, 462, 475, 477, 479, 482, 487, 490], "new": [13, 16, 147, 155, 165, 206, 218, 233, 234, 250, 262, 275, 314, 354, 414, 420, 444, 455, 456, 469, 475, 476, 479, 480, 482, 484, 485, 486, 489, 491, 492], "combin": [13, 158, 200, 201, 204, 205, 229, 243, 248, 249, 272, 344, 377, 398, 409, 415, 419, 451, 455, 478, 480, 482, 483, 484, 489, 490], "capabl": [13, 46, 332, 393, 420, 421, 436, 448, 455, 456, 466, 479, 481, 482, 490, 492], "contain": [13, 66, 67, 69, 73, 138, 147, 150, 158, 159, 165, 166, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 200, 201, 204, 205, 216, 217, 218, 248, 249, 260, 261, 262, 276, 280, 281, 286, 287, 288, 292, 305, 308, 310, 313, 314, 315, 316, 317, 318, 339, 340, 341, 344, 377, 398, 401, 408, 437, 439, 442, 451, 454, 476, 479, 484, 488, 490, 491], "make_nc_model": 13, "target": [13, 42, 43, 101, 149, 178, 194, 196, 201, 314, 317, 322, 381, 439, 444, 455, 479, 488, 489, 490, 492], "sym_model": 13, "ctx": 13, "input_desc": 13, "convert": [13, 43, 47, 48, 49, 51, 52, 53, 54, 55, 65, 73, 85, 98, 99, 101, 102, 103, 104, 130, 135, 141, 148, 158, 178, 200, 201, 216, 229, 232, 233, 260, 272, 274, 275, 279, 286, 292, 314, 332, 339, 393, 396, 415, 420, 455, 456, 460, 482, 483, 487, 489, 490], "symbol": [13, 148, 156, 158, 283, 336, 344, 377, 415, 457], "model": [13, 15, 16, 29, 41, 42, 43, 44, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 115, 117, 139, 140, 141, 147, 148, 149, 150, 152, 154, 155, 156, 157, 158, 159, 163, 165, 166, 171, 176, 178, 185, 186, 187, 190, 192, 194, 196, 200, 201, 204, 205, 212, 215, 216, 218, 233, 234, 237, 238, 245, 248, 249, 256, 259, 260, 262, 275, 276, 278, 279, 280, 281, 282, 290, 291, 292, 293, 296, 299, 300, 302, 303, 304, 305, 310, 314, 315, 316, 317, 318, 319, 322, 325, 327, 328, 335, 343, 344, 354, 370, 375, 376, 377, 378, 381, 382, 386, 388, 389, 395, 396, 398, 404, 406, 408, 409, 411, 415, 416, 418, 419, 421, 426, 436, 437, 438, 439, 441, 442, 443, 444, 445, 450, 451, 453, 454, 456, 458, 463, 465, 466, 469, 475, 477, 478, 480, 482, 485, 486, 488, 489, 490, 491, 492], "an": [13, 66, 67, 69, 104, 140, 142, 150, 158, 164, 185, 200, 201, 209, 214, 218, 233, 237, 242, 253, 258, 262, 275, 282, 283, 287, 288, 296, 297, 319, 335, 336, 340, 341, 344, 371, 376, 377, 396, 398, 409, 411, 413, 415, 416, 418, 419, 421, 437, 438, 439, 440, 441, 446, 454, 455, 456, 458, 462, 463, 466, 475, 477, 479, 480, 482, 486, 487, 488, 489, 490], "neural": [13, 150, 165, 166, 180, 181, 182, 183, 200, 201, 228, 229, 230, 233, 234, 237, 240, 243, 272, 273, 275, 277, 282, 289, 290, 292, 305, 310, 313, 316, 318, 319, 324, 330, 335, 342, 343, 344, 348, 355, 377, 384, 385, 391, 406, 411, 414, 419, 420, 421, 436, 437, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 456, 457, 459, 460, 463, 465, 466, 468, 470, 472, 473, 474, 477, 478, 480, 482, 484, 485, 487, 488, 489, 490, 492, 493], "compressor": [13, 165, 166, 182, 183, 200, 201, 228, 229, 230, 233, 234, 237, 240, 243, 272, 273, 275, 277, 282, 289, 290, 292, 313, 316, 318, 319, 324, 330, 335, 342, 343, 344, 348, 355, 377, 385, 391, 406, 411, 414, 416, 419, 420, 421, 436, 437, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 456, 457, 458, 459, 463, 465, 466, 468, 470, 472, 473, 474, 477, 478, 479, 480, 482, 484, 485, 487, 488, 489, 490, 491, 492, 493], "tupl": [13, 104, 147, 158, 172, 201, 204, 205, 229, 233, 248, 249, 272, 275, 280, 331, 344, 377, 392, 398, 420, 439, 454, 455, 482, 489], "symnet": 13, "arg": [13, 52, 104, 216, 217, 218, 260, 261, 262, 313, 322, 381, 396, 404, 405, 439, 444, 455, 464, 482, 484, 487, 488, 489], "aux": 13, "data": [13, 42, 43, 54, 104, 139, 147, 150, 155, 158, 159, 163, 178, 200, 201, 204, 205, 234, 236, 248, 249, 280, 282, 322, 332, 334, 335, 344, 370, 375, 377, 381, 393, 395, 398, 401, 406, 409, 418, 419, 437, 438, 439, 444, 448, 449, 452, 454, 455, 456, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491], "descript": [13, 131, 396, 414, 415, 420, 421, 438, 487], "ncmodel": 13, "fuse": [13, 57, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 90, 91, 92, 93, 95, 130, 135, 156, 158, 163, 415, 487, 488], "suppli": 13, "get_framework_nam": 13, "get": [13, 42, 44, 66, 67, 69, 103, 104, 147, 149, 155, 158, 159, 165, 172, 174, 176, 178, 181, 188, 193, 194, 195, 198, 201, 209, 233, 234, 240, 242, 253, 275, 280, 313, 315, 317, 325, 332, 334, 343, 352, 377, 386, 393, 395, 401, 409, 420, 437, 447, 451, 452, 455, 461, 480, 484, 487, 490, 491, 494], "name": [13, 43, 44, 52, 66, 67, 69, 103, 104, 109, 115, 139, 147, 148, 149, 150, 155, 156, 158, 159, 160, 165, 171, 172, 174, 178, 180, 185, 188, 189, 193, 194, 195, 198, 200, 201, 216, 217, 218, 221, 225, 231, 233, 234, 238, 241, 242, 260, 261, 262, 265, 269, 275, 278, 279, 280, 285, 290, 308, 313, 315, 317, 332, 334, 338, 343, 348, 352, 354, 377, 393, 395, 399, 401, 409, 415, 420, 421, 439, 441, 444, 446, 448, 453, 454, 455, 457, 461, 468, 472, 476, 479, 482, 485, 486, 488, 490, 492, 493], "context": [13, 409, 481, 484], "prepare_model_data": 13, "nc_model": [13, 305, 310], "data_x": 13, "prepar": [13, 158, 415, 418, 439, 444, 449, 482], "dataload": [13, 15, 42, 139, 140, 149, 150, 155, 158, 159, 165, 176, 178, 204, 205, 216, 227, 237, 248, 249, 260, 271, 276, 282, 305, 310, 319, 335, 370, 375, 377, 398, 401, 415, 418, 419, 420, 441, 442, 443, 444, 449, 450, 455, 456, 478, 482, 483, 487, 488, 489, 491, 492], "need": [13, 42, 104, 108, 155, 159, 165, 178, 201, 204, 205, 206, 214, 215, 218, 225, 233, 236, 238, 239, 248, 249, 250, 258, 259, 262, 269, 275, 280, 319, 325, 343, 344, 354, 377, 386, 398, 408, 409, 415, 419, 438, 439, 441, 442, 444, 451, 455, 458, 460, 461, 464, 468, 469, 470, 472, 473, 475, 476, 479, 481, 482, 483, 484, 485, 487, 489, 490, 492], "run": [13, 139, 147, 159, 165, 185, 196, 200, 201, 204, 205, 215, 232, 234, 248, 249, 259, 274, 314, 315, 322, 344, 377, 381, 398, 414, 419, 436, 444, 447, 448, 455, 458, 460, 462, 463, 464, 466, 468, 469, 470, 472, 473, 475, 480, 482, 484, 485, 486, 488, 490, 492], "loader": [13, 139, 204, 205, 248, 249, 344, 377, 398, 404, 438, 482], "dataloaderwrap": 13, "prepare_model": 13, "create_data_exampl": 13, "creat": [13, 16, 104, 200, 201, 206, 216, 218, 236, 250, 260, 262, 286, 296, 297, 332, 339, 371, 376, 393, 395, 396, 401, 413, 416, 419, 439, 457, 468, 470, 472, 473, 476, 482, 486, 488, 490, 491], "exampl": [13, 150, 158, 159, 165, 172, 178, 179, 200, 201, 216, 217, 218, 229, 233, 260, 261, 262, 272, 275, 286, 287, 288, 290, 316, 339, 340, 341, 343, 344, 354, 377, 395, 396, 398, 413, 414, 418, 420, 421, 426, 450, 451, 458, 461, 462, 463, 466, 483, 485, 489, 490, 491, 494], "prepare_dataload": 13, "io": 13, "ndarray_to_devic": 13, "ndarrai": [13, 42, 43, 66, 67, 69, 233, 275, 399, 447, 489], "devic": [13, 78, 88, 89, 90, 91, 92, 93, 96, 106, 130, 135, 146, 149, 159, 178, 179, 200, 201, 420, 438, 442, 455, 456, 458, 461, 466, 475, 481, 484], "is_model_quant": 13, "query_quantizable_nod": 13, "node": [13, 42, 43, 49, 52, 53, 54, 55, 59, 61, 63, 66, 67, 69, 73, 76, 79, 81, 82, 83, 97, 101, 102, 104, 109, 131, 139, 147, 178, 278, 280, 352, 376, 419, 420, 441, 444, 488, 490, 493], "given": [13, 16, 66, 67, 69, 103, 104, 115, 147, 158, 233, 275, 286, 339, 377, 416, 421, 479, 487, 489], "map": [13, 43, 104, 147, 201, 233, 275, 278, 280, 281, 285, 287, 288, 290, 305, 310, 315, 318, 338, 340, 341, 343, 439, 444, 454, 455, 468, 472, 479, 482, 484], "quantize_sym_model": 13, "qconfig": [13, 158, 484, 488], "accord": [13, 121, 158, 165, 200, 201, 216, 217, 218, 233, 260, 261, 262, 275, 325, 384, 386, 401, 416, 419, 439, 444, 479, 483, 487, 489, 490], "run_forward": 13, "b_filter": 13, "collector": [13, 150, 399], "pre_batch": 13, "post_batch": 13, "forward": [13, 418, 420, 455, 479, 481, 482, 484, 487, 488], "propag": [13, 99], "filter": [13, 216, 217, 218, 219, 220, 221, 223, 227, 260, 261, 262, 263, 264, 265, 267, 271, 282, 335, 409, 421, 439, 451, 479, 488], "which": [13, 42, 54, 82, 109, 149, 150, 155, 174, 178, 179, 181, 185, 186, 187, 189, 192, 194, 196, 200, 201, 216, 217, 218, 229, 234, 260, 261, 262, 272, 283, 288, 297, 299, 300, 302, 303, 304, 308, 313, 314, 315, 317, 322, 336, 341, 343, 348, 354, 377, 381, 409, 413, 415, 416, 419, 420, 421, 437, 438, 439, 441, 442, 444, 447, 448, 451, 454, 455, 456, 457, 459, 463, 466, 469, 475, 476, 478, 479, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492], "batch": [13, 158, 206, 208, 209, 214, 215, 236, 250, 252, 253, 258, 259, 398, 438, 442, 443, 455, 478, 479, 489, 490, 493], "infer": [13, 104, 159, 178, 281, 318, 352, 354, 377, 398, 419, 420, 437, 442, 443, 455, 456, 475, 477, 479, 480, 482, 484, 487, 488, 490], "collect": [13, 16, 43, 158, 231, 233, 236, 238, 239, 241, 275, 288, 290, 341, 343, 399, 409, 420, 482, 488, 490], "inform": [13, 150, 174, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 201, 204, 205, 236, 238, 239, 248, 249, 313, 315, 316, 317, 319, 343, 409, 413, 414, 417, 418, 419, 420, 421, 422, 424, 428, 431, 434, 437, 442, 448, 455, 457, 470, 473, 476, 479, 483, 485, 488, 492, 493, 494], "dure": [13, 139, 180, 184, 194, 200, 201, 313, 317, 354, 409, 420, 441, 455, 457, 477, 478, 479, 482, 487, 488, 492], "call": [13, 42, 155, 160, 178, 186, 187, 192, 286, 315, 339, 415, 416, 419, 438, 450, 464, 466, 476, 482, 487, 488, 489], "prior": [13, 87, 490], "after": [13, 77, 158, 176, 180, 185, 187, 192, 200, 201, 216, 229, 233, 236, 260, 272, 275, 315, 382, 396, 409, 416, 420, 439, 441, 442, 443, 446, 451, 454, 455, 468, 469, 472, 476, 477, 478, 479, 482, 483, 486, 487, 488, 489, 490], "count": [13, 416, 439, 484], "int": [13, 16, 42, 43, 104, 139, 147, 154, 158, 159, 176, 200, 201, 215, 216, 217, 229, 233, 259, 260, 261, 272, 275, 279, 280, 284, 286, 290, 297, 337, 339, 343, 362, 371, 376, 395, 396, 409, 438, 439, 454, 455, 481, 489], "make_symbol_block": 13, "gluon": [13, 344, 377, 457], "symbolblock": 13, "make_modul": 13, "parse_tune_config": 13, "tune_cfg": [13, 147, 148, 158, 419, 421, 490], "quantizable_nod": 13, "strategi": [13, 158, 192, 200, 201, 202, 218, 246, 262, 282, 335, 418, 419, 420, 421, 426, 437, 438, 444, 451, 455, 463, 475, 480, 481, 482, 483, 485, 491, 492], "config": [13, 114, 115, 117, 121, 158, 165, 174, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 200, 204, 205, 216, 245, 248, 249, 260, 299, 300, 302, 303, 304, 305, 310, 313, 314, 315, 316, 317, 332, 333, 335, 344, 371, 376, 393, 394, 395, 396, 398, 401, 408, 409, 416, 418, 420, 421, 426, 436, 438, 441, 442, 443, 444, 446, 449, 451, 454, 455, 456, 457, 478, 479, 481, 482, 483, 484, 486, 488, 490], "tune": [13, 44, 165, 200, 201, 204, 205, 216, 218, 248, 249, 260, 262, 281, 318, 320, 321, 322, 323, 325, 326, 327, 328, 331, 332, 333, 334, 344, 354, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 392, 393, 394, 395, 398, 409, 419, 420, 437, 438, 439, 441, 444, 451, 453, 455, 456, 475, 477, 479, 480, 483, 484, 485, 486, 488, 492], "from": [13, 43, 44, 60, 66, 67, 69, 104, 147, 155, 158, 165, 166, 167, 172, 174, 181, 182, 183, 184, 188, 190, 191, 192, 193, 194, 195, 196, 200, 201, 204, 205, 206, 209, 213, 216, 217, 218, 219, 220, 221, 223, 228, 229, 235, 236, 239, 248, 249, 250, 253, 257, 260, 261, 262, 263, 264, 265, 267, 272, 276, 278, 279, 280, 283, 286, 287, 288, 292, 297, 313, 314, 315, 317, 332, 334, 336, 339, 340, 341, 344, 352, 354, 377, 393, 395, 396, 398, 401, 408, 409, 413, 415, 416, 419, 421, 436, 438, 439, 441, 442, 443, 444, 445, 446, 447, 449, 451, 454, 456, 457, 458, 462, 463, 464, 466, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491], "distribute_calib_tensor": 13, "calib_tensor": 13, "calib_cfg": 13, "tensor_to_nod": 13, "distribut": [13, 16, 142, 164, 200, 201, 206, 208, 209, 211, 212, 213, 214, 215, 236, 250, 252, 253, 255, 256, 257, 258, 259, 403, 418, 420, 438, 442, 452, 470, 473, 480, 482, 484, 485, 487, 491, 493], "depend": [13, 204, 205, 234, 248, 249, 344, 377, 398, 414, 447, 448, 481, 482, 490], "algorithm": [13, 149, 158, 171, 197, 201, 283, 290, 298, 335, 336, 343, 401, 403, 416, 419, 420, 421, 442, 443, 448, 451, 464, 469, 479, 482, 484, 488, 492], "set": [13, 43, 56, 95, 104, 114, 147, 155, 158, 165, 196, 198, 200, 201, 204, 205, 206, 216, 218, 221, 233, 234, 239, 240, 248, 249, 250, 260, 262, 265, 275, 286, 292, 305, 310, 314, 319, 339, 343, 344, 352, 376, 377, 396, 398, 406, 409, 413, 416, 420, 436, 438, 439, 442, 444, 446, 448, 450, 451, 452, 454, 455, 456, 458, 460, 462, 476, 479, 481, 482, 484, 486, 487, 490, 492], "kl": [13, 16, 200, 201, 399, 403, 420, 421, 437, 448, 455, 490, 492], "minmax": [13, 16, 420, 421, 437, 448, 482, 492], "calib_model": 13, "qsym_model": 13, "calib_data": 13, "calibdata": 13, "threshold": [13, 161, 399, 403, 454], "amp_convert": 13, "amp_cfg": 13, "support": [13, 42, 43, 96, 103, 155, 163, 167, 181, 188, 192, 200, 201, 204, 205, 215, 216, 218, 225, 229, 233, 235, 236, 237, 240, 245, 248, 249, 259, 260, 262, 269, 272, 275, 282, 290, 292, 297, 313, 315, 319, 326, 332, 335, 343, 344, 348, 354, 377, 387, 393, 396, 398, 401, 403, 409, 411, 418, 420, 455, 458, 463, 466, 469, 475, 480, 483, 486, 490, 491], "amp": [13, 458, 465], "wrap": [13, 104, 115, 167, 235, 286, 339, 415, 444, 470, 473], "dataiterload": 13, "data_it": [13, 178], "collectorbas": 13, "calibcollector": 13, "include_tensors_kl": 13, "include_tensors_minmax": 13, "num_bin": [13, 16, 399], "8001": [13, 399], "tensorcollector": 13, "include_nod": 13, "qtensor_to_tensor": 13, "build": [13, 42, 114, 160, 161, 163, 164, 189, 293, 296, 347, 349, 351, 352, 353, 419, 420, 421, 452, 457, 468, 470, 472, 473, 476, 480, 486, 490], "up": [13, 99, 189, 233, 275, 314, 444, 445, 448, 451, 466, 470, 473, 475, 480, 481, 482, 486, 489, 490, 492], "namecollector": 13, "cache_kl": 13, "cache_minmax": 13, "tensors_kl": 13, "tensors_minmax": 13, "onnxruntimeadaptor": 14, "rt": 14, "onnxrt_qlinearopsadaptor": [14, 419], "onnxrt_integeropsadaptor": 14, "onnxrt_qdqadaptor": 14, "onnxrtqueri": 14, "dynam": [14, 201, 206, 250, 280, 332, 393, 419, 438, 442, 446, 451, 455, 458, 463, 464, 465, 466, 469, 475, 480, 490, 493], "static": [14, 41, 42, 46, 155, 163, 178, 201, 280, 332, 377, 393, 419, 420, 421, 441, 446, 451, 455, 458, 463, 464, 465, 466, 469, 475, 487, 490, 493], "format": [14, 18, 43, 52, 147, 200, 201, 216, 217, 218, 260, 261, 262, 280, 286, 292, 332, 339, 393, 396, 420, 421, 439, 444, 446, 454, 455, 456, 457, 458, 482, 485], "onnxrtaug": 15, "dump_op_typ": 15, "black_nod": [15, 139], "white_nod": 15, "cpuexecutionprovid": [15, 41, 42, 456, 482], "reduce_rang": [15, 41, 42, 200, 201, 421, 481], "augment": 15, "dump": [15, 158, 165, 280, 409, 482, 485, 488], "calib_registri": 16, "calib_method": 16, "calibratorbas": 16, "minmaxcalibr": 16, "percentilecalibr": 16, "2048": [16, 409], "percentil": [16, 139, 159, 437], "99": [16, 487, 493], "999": [16, 492], "option": [16, 104, 159, 180, 200, 201, 204, 205, 216, 233, 248, 249, 260, 275, 279, 280, 286, 292, 313, 319, 332, 335, 339, 343, 344, 377, 393, 395, 396, 398, 402, 409, 420, 421, 438, 439, 448, 452, 455, 469, 479, 482, 484, 486, 489, 490, 492], "number": [16, 66, 67, 104, 139, 158, 159, 172, 176, 182, 183, 200, 201, 214, 217, 229, 233, 258, 261, 272, 275, 287, 288, 290, 313, 322, 340, 341, 343, 371, 376, 381, 396, 401, 409, 436, 438, 439, 444, 454, 479, 482, 484, 486, 489, 490], "bin": [16, 409, 447], "histogram": [16, 399, 409, 488], "valu": [16, 43, 54, 66, 67, 69, 88, 89, 104, 142, 147, 158, 164, 165, 172, 174, 178, 179, 189, 195, 196, 198, 200, 201, 204, 205, 216, 219, 220, 229, 233, 234, 248, 249, 260, 263, 264, 272, 275, 286, 290, 314, 322, 325, 332, 339, 343, 344, 377, 381, 386, 393, 395, 396, 398, 399, 401, 409, 415, 420, 421, 437, 439, 441, 448, 454, 455, 456, 461, 477, 479, 481, 482, 484, 485, 487, 489, 490, 492], "default": [16, 96, 147, 159, 196, 198, 200, 201, 204, 205, 208, 216, 217, 218, 229, 233, 248, 249, 252, 260, 261, 262, 272, 275, 279, 280, 283, 292, 314, 334, 336, 343, 352, 395, 401, 409, 415, 419, 438, 439, 448, 451, 452, 454, 455, 456, 463, 466, 468, 472, 477, 479, 481, 482, 483, 484, 486, 487, 489, 490, 492], "float": [16, 43, 139, 140, 150, 159, 180, 185, 193, 196, 200, 201, 216, 229, 260, 272, 284, 286, 287, 288, 315, 337, 339, 340, 341, 392, 396, 406, 409, 439, 454, 481, 482, 487, 489], "A": [16, 53, 73, 74, 102, 115, 139, 140, 147, 158, 159, 166, 171, 172, 174, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 200, 201, 218, 233, 236, 238, 239, 245, 262, 275, 276, 283, 286, 287, 288, 290, 293, 296, 297, 298, 305, 308, 310, 313, 314, 315, 316, 317, 322, 336, 339, 340, 341, 343, 344, 348, 352, 381, 398, 409, 418, 420, 438, 439, 445, 448, 454, 455, 457, 468, 469, 472, 475, 479, 480, 482, 484, 487, 489, 490, 492], "between": [16, 42, 142, 164, 191, 200, 201, 233, 275, 287, 290, 340, 343, 371, 376, 409, 415, 419, 420, 421, 437, 441, 442, 451, 454, 455, 466, 482, 485, 486, 487, 489, 490], "0": [16, 43, 52, 89, 104, 147, 158, 159, 161, 163, 167, 172, 174, 176, 200, 201, 206, 208, 211, 212, 213, 215, 216, 219, 220, 223, 229, 233, 235, 236, 250, 252, 255, 256, 257, 259, 260, 263, 264, 267, 272, 275, 280, 281, 290, 297, 305, 310, 318, 343, 354, 377, 382, 396, 415, 438, 439, 442, 444, 446, 447, 448, 452, 453, 454, 455, 456, 461, 463, 468, 472, 479, 481, 482, 484, 485, 486, 487, 488, 489, 490, 492], "100": [16, 165, 172, 200, 201, 218, 262, 396, 436, 439, 444, 450, 455, 481, 482, 487, 489, 490, 492, 493], "klcalibr": 16, "128": [16, 158, 159, 216, 219, 220, 233, 260, 263, 264, 275, 439, 455, 482, 489], "num_quantized_bin": 16, "histogramcollector": 16, "collctor": 16, "smooth_distribut": 16, "p": [16, 476, 484], "ep": [16, 164, 456], "0001": [16, 172, 200, 201, 442, 455, 481], "smooth": [16, 139, 140, 147, 155, 163, 200, 201, 331, 479], "discret": [16, 172, 490], "mai": [16, 147, 299, 300, 302, 303, 304, 396, 413, 414, 420, 437, 441, 446, 447, 453, 456, 468, 472, 480, 482, 490], "have": [16, 73, 82, 140, 147, 179, 181, 188, 214, 236, 258, 283, 286, 313, 315, 336, 339, 343, 377, 395, 396, 413, 414, 420, 421, 438, 439, 441, 444, 448, 453, 454, 455, 456, 458, 475, 477, 479, 482, 484, 487, 490, 491], "been": [16, 181, 188, 283, 313, 315, 336, 414, 416, 421, 442, 455, 456, 475, 484, 487], "normal": [16, 33, 233, 275, 288, 341, 455, 477, 484, 487, 489], "1": [16, 42, 43, 53, 73, 88, 104, 108, 112, 145, 147, 153, 155, 158, 159, 161, 163, 164, 165, 167, 172, 174, 186, 187, 189, 200, 201, 206, 208, 211, 212, 213, 215, 216, 217, 219, 220, 223, 224, 229, 233, 234, 235, 236, 250, 252, 255, 256, 257, 259, 260, 261, 263, 264, 267, 268, 272, 275, 281, 286, 287, 288, 290, 305, 310, 315, 318, 319, 339, 340, 341, 343, 354, 377, 395, 396, 401, 413, 415, 418, 419, 421, 437, 438, 439, 441, 442, 446, 448, 449, 452, 454, 456, 459, 461, 477, 478, 479, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492], "replac": [16, 155, 159, 288, 341, 444, 455, 466, 485], "zero": [16, 43, 149, 185, 196, 233, 275, 315, 409, 418, 479, 482, 484, 487, 489, 490], "multipli": 16, "scale": [16, 43, 99, 140, 142, 149, 153, 155, 157, 158, 159, 163, 164, 229, 233, 272, 275, 482, 484, 486, 487, 489, 490], "factor": [16, 140, 484, 487, 493], "take": [16, 180, 201, 204, 205, 209, 233, 238, 248, 249, 253, 275, 313, 322, 343, 344, 377, 381, 398, 413, 415, 416, 438, 441, 442, 448, 455, 475, 479, 482, 483, 489, 490, 492], "correspond": [16, 150, 178, 189, 200, 201, 216, 260, 283, 286, 290, 336, 339, 343, 401, 409, 419, 448, 455, 479, 481, 482, 486, 487, 490], "amount": 16, "off": [16, 66, 67, 69, 414, 484], "non": [16, 314, 409, 415, 441, 490], "ref": [16, 147], "http": [16, 149, 150, 174, 182, 183, 192, 216, 218, 260, 262, 283, 284, 286, 287, 288, 313, 315, 316, 336, 337, 339, 340, 341, 343, 377, 415, 418, 439, 441, 449, 452, 453, 455, 464, 470, 473, 485], "hanj": 16, "c": [16, 73, 218, 262, 439, 447, 452, 484, 490], "illinoi": 16, "edu": [16, 218, 262, 439], "cs412": 16, "bk3": 16, "diverg": [16, 399, 403, 421, 437, 442, 490], "pdf": 16, "github": [16, 150, 182, 183, 216, 260, 283, 284, 287, 288, 313, 316, 336, 337, 340, 341, 343, 377, 414, 439, 441, 445, 452, 453, 455, 464, 470, 473, 485], "com": [16, 150, 182, 183, 216, 260, 283, 284, 287, 288, 313, 316, 336, 337, 340, 341, 343, 377, 413, 418, 439, 441, 449, 452, 453, 455, 458, 464, 485, 486, 493], "apach": [16, 453], "incub": 16, "blob": [16, 150, 182, 183, 283, 284, 287, 288, 313, 336, 337, 340, 341, 343, 377, 455, 464], "master": [16, 182, 183, 283, 284, 287, 288, 313, 316, 336, 337, 340, 341, 343, 377, 455, 490], "python": [16, 74, 147, 218, 237, 262, 282, 335, 396, 409, 411, 414, 415, 439, 441, 444, 447, 452, 455, 460, 466, 469, 475, 480, 489], "contrib": [16, 282, 335], "py": [16, 147, 150, 165, 185, 200, 201, 284, 286, 287, 288, 315, 337, 339, 340, 341, 396, 415, 419, 441, 444, 452, 455, 460, 462, 463, 464, 470, 473, 482, 485, 488], "microsoft": [16, 419], "onnxruntim": [16, 200, 201, 212, 218, 225, 256, 262, 269, 291, 371, 419, 437, 438, 451, 452, 456, 481], "main": [16, 149, 172, 189, 240, 316, 415, 438, 441, 444, 455, 462, 464, 476, 479, 482, 484], "tool": [16, 147, 279, 409, 418, 419, 455, 468, 472, 479, 480, 482], "arrai": [16, 43, 147, 233, 275, 286, 297, 339, 409, 489], "small": [16, 66, 67, 68, 384, 416, 479, 484, 490, 493], "probabl": [16, 200, 201, 403, 484], "activationoper": 18, "onnx_quant": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "onnx_nod": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 86, 100, 110], "removableactivationoper": 18, "remov": [18, 43, 55, 56, 59, 73, 79, 82, 83, 84, 95, 97, 139, 176, 189, 288, 341, 413, 414, 455, 468, 472, 479, 488], "qactivationoper": 18, "children": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39], "initi": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 42, 43, 104, 115, 147, 167, 185, 204, 205, 213, 216, 235, 248, 249, 257, 260, 314, 315, 332, 377, 393, 398, 416, 421, 439, 454, 474, 479, 482, 487, 490], "qoper": [18, 34, 200, 201, 446], "float16activationoper": 18, "float16": [18, 21, 43, 439, 484], "argmaxoper": 19, "qargmaxoper": 19, "attentionoper": 20, "qattentionoper": 20, "qattent": 20, "binari": [21, 147, 290, 343, 447, 454, 470, 473, 485], "binaryoper": 21, "qbinaryoper": 21, "qbinari": 21, "float16binaryoper": 21, "concatoper": 22, "qconcatoper": 22, "qconcat": 22, "convoper": 23, "qconvoper": 23, "qlinearconv": 23, "direct8bit": 24, "direct8bitoper": 24, "qdirectoper": 24, "qdirect": 24, "embedlayernorm": 25, "embedlayernormalizationoper": 25, "qembedlayernormalizationoper": 25, "qembedlayernorm": 25, "gatheroper": 26, "qgatheroper": 26, "qgather": 26, "globalaveragepool": 27, "globalaveragepooloper": 27, "qglobalaveragepooloper": 27, "qlinearglobalaveragepool": 27, "gemmoper": 28, "qgemmoper": 28, "qgemm": 28, "lstmoper": 30, "matmuloper": 31, "qmatmuloper": 31, "qlinearmatmul": 31, "fusedmatmuloper": 31, "fusedmatmul": 31, "maxpooloper": 32, "qmaxpooloper": 32, "qmaxpool": 32, "batchnormalizationoper": 33, "batchnorm": [33, 61, 66, 120, 415, 487], "normalizationoper": 33, "op_registri": 34, "op_typ": [34, 139, 147, 333, 394], "qop_registri": 34, "padoper": 35, "qpadoper": 35, "qpad": 35, "averagepool": 36, "pooloper": 36, "qpooloper": 36, "qlinearaveragepool": 36, "reduceoper": 37, "resizeoper": 38, "qresizeoper": 38, "qresiz": 38, "splitoper": 39, "qsplitoper": 39, "qsplit": 39, "unari": 40, "unaryoper": 40, "q_config": [41, 158, 280, 419], "mode": [41, 42, 43, 44, 109, 155, 225, 269, 286, 332, 339, 352, 393, 406, 409, 419, 420, 441, 451, 468, 472, 482, 483, 490], "quantization_param": 41, "op_types_to_quant": 41, "fallback_list": 41, "fp32": [41, 42, 78, 130, 135, 142, 158, 159, 164, 200, 201, 204, 205, 248, 249, 279, 280, 290, 325, 332, 343, 382, 386, 393, 401, 408, 409, 418, 419, 421, 441, 448, 449, 454, 455, 456, 465, 481, 482, 483, 484, 485, 486, 487, 488, 490, 492, 493], "add_qdq_pair_to_weight": [41, 200, 201, 482], "optypes_to_exclude_output_qu": [41, 200, 201, 482], "dedicated_qdq_pair": [41, 200, 201, 482], "smoothquant": [42, 155, 158, 163, 418, 480, 484, 491], "onnxrt": [42, 43, 216, 218, 225, 233, 260, 262, 269, 275, 290, 343, 370, 407, 419, 441, 456, 482, 493], "get_quant_dequant_output": 42, "input_data": [42, 438], "output_data": 42, "loss": [42, 167, 200, 201, 235, 281, 290, 305, 310, 318, 343, 398, 437, 441, 442, 443, 444, 445, 454, 455, 456, 466, 478, 479, 482, 484, 487, 490, 492], "output": [42, 43, 52, 56, 58, 73, 97, 104, 109, 147, 158, 159, 178, 179, 184, 198, 200, 201, 204, 205, 238, 242, 248, 249, 279, 280, 283, 313, 336, 343, 344, 352, 377, 398, 404, 405, 409, 415, 419, 420, 442, 443, 444, 446, 448, 450, 454, 455, 457, 466, 475, 476, 478, 479, 481, 482, 484, 485, 487, 488, 489, 490, 492], "numpi": [42, 43, 66, 67, 69, 104, 147, 233, 275, 286, 297, 339, 447, 489], "7": [42, 159, 165, 200, 201, 354, 421, 436, 447, 448, 452, 455, 479, 482, 485, 487, 490, 493], "bit": [42, 158, 159, 200, 201, 395, 421, 437, 443, 456, 480, 482, 484, 487], "execut": [42, 43, 52, 149, 165, 185, 186, 187, 200, 201, 315, 319, 321, 376, 377, 378, 380, 398, 401, 408, 409, 441, 442, 443, 455, 456, 460, 461, 468, 469, 472, 475, 476, 478, 479, 482, 486, 490, 493], "provid": [42, 43, 101, 104, 109, 178, 204, 205, 233, 248, 249, 275, 281, 286, 305, 310, 318, 319, 339, 344, 377, 398, 402, 404, 416, 418, 419, 420, 421, 436, 438, 441, 443, 444, 445, 451, 452, 454, 455, 456, 457, 458, 462, 466, 469, 475, 476, 479, 481, 482, 484, 488, 490, 491, 492, 493], "make_sub_graph": 42, "opset": [42, 101, 103, 104, 201, 279, 280, 446], "ir_vers": 42, "thi": [42, 44, 85, 109, 131, 138, 142, 146, 150, 158, 159, 164, 166, 171, 176, 178, 180, 182, 183, 184, 185, 189, 190, 191, 192, 193, 194, 200, 201, 204, 205, 215, 216, 217, 218, 219, 220, 221, 223, 233, 236, 242, 243, 248, 249, 259, 260, 261, 262, 263, 264, 265, 267, 275, 283, 286, 287, 288, 290, 299, 300, 302, 303, 304, 305, 310, 313, 315, 317, 318, 319, 322, 325, 336, 339, 340, 341, 343, 344, 354, 377, 381, 386, 395, 396, 398, 408, 409, 413, 414, 415, 416, 419, 420, 421, 437, 438, 439, 442, 443, 444, 446, 447, 448, 451, 453, 454, 455, 456, 457, 458, 460, 461, 463, 464, 466, 468, 470, 472, 473, 474, 475, 476, 479, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491], "quant_dequant_data": 42, "qtype": [42, 43, 419], "3": [42, 147, 187, 201, 218, 233, 262, 275, 286, 339, 396, 415, 416, 418, 437, 438, 439, 442, 444, 446, 448, 449, 452, 454, 455, 456, 458, 462, 466, 468, 472, 477, 481, 482, 484, 485, 486, 487, 489, 490, 493], "scheme": [42, 43, 153, 158, 159, 419, 420, 421, 438, 448, 466, 484, 490, 492], "sym": [42, 43, 159, 420, 421, 448, 482, 484, 492], "dequant": [42, 43, 56, 87, 90, 91, 92, 93, 95, 150, 158, 159, 409, 415, 420, 487, 488], "asym": [42, 43, 153, 158, 159, 421, 448, 484, 492], "ortsmoothqu": 42, "fake": [42, 112, 153, 155, 159, 163, 395, 455, 482, 484, 487], "channel": [42, 43, 142, 155, 159, 163, 164, 176, 179, 184, 200, 201, 229, 233, 272, 275, 313, 419, 421, 451, 452, 458, 460, 465, 479, 484, 489, 493], "For": [42, 159, 163, 178, 179, 182, 183, 201, 218, 233, 262, 275, 287, 288, 290, 313, 316, 340, 341, 343, 344, 377, 413, 415, 417, 419, 421, 442, 443, 444, 446, 448, 451, 458, 460, 461, 463, 466, 479, 483, 487, 488, 490, 492, 493], "more": [42, 147, 155, 163, 182, 183, 233, 275, 313, 416, 417, 418, 420, 437, 439, 442, 444, 446, 449, 451, 452, 455, 456, 458, 466, 470, 473, 477, 478, 479, 483, 484, 487, 490, 491, 493], "detail": [42, 155, 163, 178, 233, 275, 409, 410, 413, 414, 418, 420, 421, 437, 442, 448, 449, 450, 454, 455, 456, 458, 466, 475, 479, 485, 486, 488, 490, 491], "pleas": [42, 149, 150, 155, 163, 174, 182, 183, 184, 192, 200, 201, 216, 217, 218, 221, 260, 261, 262, 265, 313, 315, 316, 343, 377, 396, 415, 416, 417, 418, 419, 436, 437, 439, 443, 444, 446, 452, 454, 456, 458, 459, 463, 466, 479, 482, 483, 485, 486, 487, 491], "refer": [42, 149, 150, 155, 163, 174, 182, 183, 184, 192, 196, 200, 201, 216, 260, 283, 284, 290, 313, 315, 316, 336, 337, 343, 377, 396, 415, 419, 420, 436, 438, 439, 441, 443, 444, 446, 450, 452, 453, 454, 455, 456, 458, 463, 466, 477, 481, 485, 489, 490], "accur": [42, 149, 155, 163, 484, 487], "effici": [42, 155, 163, 416, 437, 438, 442, 458, 478, 480, 484, 487, 490], "post": [42, 96, 97, 149, 155, 163, 192, 201, 204, 205, 248, 249, 377, 413, 418, 419, 420, 441, 443, 444, 446, 451, 452, 458, 464, 475, 479, 480, 484, 487, 488, 490], "train": [42, 55, 79, 149, 155, 163, 166, 186, 187, 190, 192, 200, 201, 204, 205, 216, 218, 233, 243, 248, 249, 260, 262, 275, 276, 292, 315, 335, 377, 401, 416, 419, 420, 426, 439, 441, 442, 443, 446, 451, 456, 458, 464, 475, 478, 479, 480, 484, 486, 487, 490, 492], "larg": [42, 155, 163, 418, 438, 442, 455, 479, 480, 484, 487, 493], "languag": [42, 155, 163, 283, 336, 413, 418, 446, 479, 480, 484, 487], "2": [42, 43, 52, 73, 104, 108, 155, 159, 161, 163, 165, 180, 186, 187, 200, 201, 217, 234, 261, 286, 288, 290, 315, 322, 339, 341, 343, 354, 381, 396, 415, 418, 419, 437, 438, 439, 441, 442, 448, 451, 452, 453, 454, 456, 477, 479, 480, 482, 484, 485, 486, 487, 489, 490, 491], "spiq": [42, 155, 163, 487], "free": [42, 155, 163, 192, 204, 205, 248, 249, 377, 413, 418, 464, 469, 477, 486, 487], "per": [42, 43, 155, 159, 163, 165, 200, 201, 234, 403, 419, 421, 438, 483, 484, 493], "we": [42, 43, 66, 67, 69, 73, 85, 142, 155, 163, 164, 165, 178, 182, 189, 200, 201, 215, 234, 236, 259, 283, 286, 336, 339, 384, 413, 415, 419, 420, 421, 438, 441, 444, 446, 448, 454, 455, 462, 463, 466, 470, 473, 475, 476, 477, 478, 479, 481, 482, 484, 485, 486, 487, 488, 490, 491], "onli": [42, 52, 62, 69, 85, 108, 114, 142, 155, 157, 159, 163, 164, 165, 172, 181, 188, 200, 201, 216, 234, 236, 240, 260, 280, 292, 313, 315, 326, 377, 387, 395, 396, 409, 418, 419, 420, 421, 436, 437, 438, 441, 442, 444, 447, 448, 455, 456, 463, 476, 479, 480, 481, 482, 487, 488, 490, 491, 492], "inplac": [42, 155], "mean": [42, 155, 180, 189, 200, 201, 229, 233, 272, 275, 288, 290, 313, 325, 341, 343, 386, 415, 420, 421, 438, 441, 444, 448, 454, 455, 461, 479, 482, 484, 487, 489, 490, 492], "weight": [42, 43, 59, 60, 121, 140, 142, 147, 150, 155, 157, 158, 159, 164, 174, 179, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 195, 200, 201, 280, 313, 315, 332, 343, 377, 384, 393, 395, 409, 410, 418, 419, 420, 421, 437, 441, 443, 448, 450, 455, 477, 479, 481, 482, 487, 488, 490, 491, 492], "chang": [42, 95, 142, 155, 164, 186, 187, 189, 190, 192, 194, 200, 201, 315, 317, 384, 409, 414, 420, 438, 444, 447, 453, 455, 458, 468, 469, 472, 475, 479, 488, 489, 490], "you": [42, 155, 200, 201, 214, 216, 258, 260, 315, 343, 377, 414, 415, 420, 438, 439, 441, 444, 452, 453, 454, 456, 458, 460, 461, 463, 468, 472, 475, 476, 479, 482, 485, 486, 487, 488, 491], "can": [42, 142, 150, 155, 164, 171, 178, 179, 180, 185, 194, 200, 201, 204, 205, 215, 218, 233, 234, 236, 248, 249, 259, 262, 275, 286, 288, 290, 313, 315, 317, 339, 341, 343, 344, 354, 377, 398, 409, 415, 416, 418, 419, 420, 421, 436, 438, 439, 441, 442, 443, 444, 446, 448, 451, 452, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 466, 468, 469, 470, 472, 473, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493], "recov": [42, 155, 409, 419, 443, 487], "helper": [43, 44, 109, 115, 147, 158, 216, 217, 218, 232, 260, 261, 262, 274, 278, 279, 280, 352, 407], "dtype_to_nam": 43, "dtype_map": 43, "dtype": [43, 101, 104, 200, 201, 219, 220, 229, 233, 263, 264, 272, 275, 420, 421, 439, 441, 446, 448, 458, 481, 482, 484, 487, 488, 489, 492], "its": [43, 59, 95, 147, 150, 178, 187, 190, 192, 201, 212, 218, 233, 256, 262, 275, 278, 284, 285, 315, 322, 337, 338, 381, 413, 439, 442, 453, 454, 456, 466, 468, 472, 475, 476, 479, 484, 486, 489, 490], "string": [43, 44, 115, 147, 149, 165, 167, 171, 172, 178, 180, 185, 193, 194, 196, 197, 200, 201, 218, 235, 240, 262, 276, 281, 283, 286, 292, 293, 294, 296, 297, 305, 310, 313, 314, 315, 316, 317, 318, 336, 339, 348, 352, 401, 406, 409, 454, 487, 489], "represent": [43, 413, 415, 437, 443, 479, 482], "quanttyp": [43, 395], "repres": [43, 180, 184, 185, 193, 196, 218, 223, 262, 267, 286, 288, 290, 339, 341, 343, 413, 421, 437, 439, 446, 479, 482, 490], "make_quant_nod": 43, "make": [43, 104, 142, 164, 171, 180, 185, 194, 214, 258, 313, 315, 317, 409, 413, 414, 419, 420, 436, 438, 448, 454, 455, 463, 468, 472, 475, 482, 483, 484, 486, 487, 490], "quantizelinear": 43, "make_dquant_nod": 43, "axi": [43, 201], "dequantizelinear": 43, "is_b_transpos": 43, "wheter": 43, "inuput": 43, "b": [43, 73, 216, 260, 437, 439, 454, 479, 484, 487, 490], "transpos": [43, 72, 184, 229, 233, 275, 279, 313, 489], "split_shared_bia": 43, "share": [43, 81, 97, 108, 140, 159, 447, 448, 487, 490], "float_to_float16": 43, "float_to_bfloat16": 43, "bfloat16": [43, 456, 458, 466, 483], "cast_tensor": 43, "tensorproto": [43, 104], "remove_init_from_model_input": 43, "collate_pr": 43, "result": [43, 147, 150, 158, 229, 233, 272, 275, 283, 286, 287, 288, 290, 336, 339, 340, 341, 343, 357, 377, 384, 398, 408, 409, 413, 416, 418, 438, 441, 442, 444, 451, 453, 454, 455, 463, 464, 475, 476, 477, 479, 480, 482, 484, 486, 487, 488, 489, 490, 491, 493], "quantize_data_with_scale_zero": 43, "zero_point": 43, "point": [43, 229, 272, 287, 288, 297, 322, 340, 341, 381, 409, 454, 475, 482, 484, 487, 489, 490], "To": [43, 286, 339, 354, 414, 420, 421, 439, 441, 444, 456, 459, 462, 468, 470, 472, 473, 481, 483, 484, 485, 487, 490, 492], "pack": [43, 60], "comput": [43, 104, 150, 158, 283, 284, 287, 288, 290, 336, 337, 340, 341, 343, 398, 409, 437, 438, 443, 446, 454, 455, 456, 458, 469, 479, 480, 482, 484, 487, 490], "linear": [43, 149, 153, 157, 163, 176, 178, 179, 184, 189, 196, 200, 201, 313, 415, 442, 446, 455, 479, 484, 487, 490], "transform": [43, 49, 142, 144, 145, 146, 149, 153, 154, 157, 192, 216, 217, 218, 219, 220, 221, 223, 225, 227, 260, 261, 262, 263, 264, 265, 267, 269, 271, 282, 335, 415, 416, 418, 437, 439, 442, 443, 444, 445, 449, 455, 458, 463, 464, 465, 466, 479, 480, 483, 484, 487, 488, 490, 492, 493], "when": [43, 52, 63, 69, 147, 179, 185, 190, 196, 200, 201, 216, 217, 225, 233, 260, 261, 269, 275, 284, 314, 315, 337, 377, 398, 413, 416, 420, 438, 439, 455, 466, 468, 469, 472, 476, 479, 482, 484, 487, 489, 490], "uint8": [43, 159, 229, 272, 286, 334, 339, 395, 419, 439, 448, 481, 482, 489, 492], "rmin": [43, 482], "rmax": [43, 482], "m": [43, 150, 182, 183, 200, 201, 313, 442, 452, 458, 460, 463, 466, 470, 473, 479, 493], "where": [43, 200, 201, 286, 290, 339, 343, 395, 409, 421, 437, 441, 442, 468, 472, 476, 487, 488], "max": [43, 103, 142, 159, 164, 172, 200, 201, 233, 275, 287, 288, 322, 340, 341, 381, 409, 418, 441, 452, 455, 479, 482, 487, 489, 490], "ab": [43, 149, 159, 174, 192, 315, 482, 487], "np": [43, 233, 275, 322, 381, 444, 489, 490], "calculate_scale_zp": 43, "quantize_rang": 43, "calcul": [43, 59, 158, 174, 182, 196, 201, 219, 220, 263, 264, 287, 288, 313, 315, 325, 340, 341, 386, 399, 409, 437, 439, 454, 455, 466, 477, 479, 482, 486, 487, 490, 492], "quantize_data": 43, "add": [43, 51, 63, 108, 118, 147, 196, 200, 201, 216, 218, 240, 260, 262, 314, 332, 393, 409, 414, 415, 421, 438, 439, 444, 446, 448, 454, 455, 470, 473, 486, 488, 490, 491], "necessari": [43, 413, 416, 420, 457, 476, 479, 486, 490], "intermedi": [43, 150, 167, 200, 201, 235, 415, 451, 482], "trasnform": 43, "full": [43, 216, 217, 218, 260, 261, 262, 409, 418, 437, 439, 441, 447, 453, 476, 479, 484, 485], "equat": [43, 288, 290, 341, 343, 482, 487], "r": [43, 142, 164, 441, 452, 476, 482, 493], "": [43, 104, 142, 147, 164, 178, 179, 180, 184, 185, 186, 187, 190, 192, 197, 198, 200, 201, 215, 218, 232, 233, 234, 236, 238, 245, 259, 262, 274, 275, 288, 313, 315, 341, 343, 344, 348, 377, 406, 409, 413, 416, 420, 421, 441, 442, 444, 446, 448, 451, 455, 456, 463, 466, 468, 472, 475, 478, 479, 480, 481, 482, 484, 485, 486, 487, 490, 491, 492, 493], "q": [43, 106, 108, 130, 420, 484, 487], "z": [43, 437, 442, 487], "real": [43, 219, 236, 263, 420, 437, 444, 480, 482], "origin": [43, 155, 158, 178, 190, 196, 201, 216, 233, 234, 260, 275, 299, 300, 302, 303, 304, 314, 315, 334, 382, 395, 409, 414, 439, 463, 479, 482, 489, 490, 492], "quantize_data_per_channel": 43, "dequantize_data_with_scale_zero": 43, "tensor_valu": 43, "scale_valu": 43, "zo_valu": 43, "sacal": 43, "dequantize_data": 43, "valueinfo": 43, "tensor_nam": [43, 147], "new_dtyp": 43, "cast": [43, 56, 483, 489], "info": [43, 158, 159, 182, 183, 196, 231, 236, 241, 313, 348, 405, 409, 415, 441, 457], "quantizedvalu": 43, "new_quantized_nam": 43, "scale_nam": 43, "zero_point_nam": 43, "quantized_value_typ": 43, "quint8": 43, "linearli": 43, "intial": 43, "quantizediniti": 43, "quantized_data": 43, "quantizationmod": 43, "quantizedvaluetyp": 43, "quantformat": 43, "quantize_nparrai": 43, "arr": [43, 409], "low": [43, 204, 205, 219, 220, 248, 249, 263, 264, 281, 291, 318, 344, 419, 420, 436, 437, 439, 444, 455, 456, 480, 482, 484, 487, 490], "high": [43, 219, 220, 263, 264, 439, 441, 452, 480, 490], "attribute_to_kwarg": 43, "attribut": [43, 82, 103, 104, 147, 158, 178, 189, 198, 201, 409, 419, 438, 448, 450, 455, 481, 492], "kwarg": [43, 104, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 134, 136, 137, 159, 176, 200, 201, 218, 231, 233, 238, 241, 262, 275, 331, 333, 343, 344, 345, 347, 349, 351, 352, 353, 377, 392, 394, 396, 398, 404, 405, 408, 409, 438], "make_nod": 43, "find_by_nam": 43, "item_list": 43, "find": [43, 66, 67, 69, 104, 147, 290, 297, 322, 343, 381, 409, 419, 441, 461, 468, 472, 475, 476, 486, 488, 490], "item": [43, 196, 198, 200, 201, 232, 274, 314, 332, 393, 437, 444, 479, 487, 490], "trt_env_setup": 43, "environ": [43, 165, 234, 413, 436, 468, 472, 475, 490], "variabl": [43, 165, 193, 200, 201, 218, 234, 262, 322, 381, 395, 452, 479, 490], "tensorrt": [43, 437, 456, 482], "to_numpi": 43, "get_ops_recurs": 44, "prefix": [44, 147, 148, 156, 165, 458, 463, 488], "graph_info": 44, "templateadaptor": 44, "tampl": 44, "dictionari": [44, 66, 67, 69, 147, 148, 150, 158, 171, 198, 200, 201, 232, 274, 286, 293, 296, 298, 339, 409], "yaml": [44, 196, 198, 201, 204, 205, 216, 218, 234, 248, 249, 260, 262, 276, 281, 292, 293, 294, 296, 305, 310, 318, 319, 408, 409, 419, 421, 450, 454, 455, 477, 481, 488, 489], "file": [44, 104, 147, 158, 162, 196, 197, 200, 201, 204, 205, 216, 217, 218, 221, 232, 233, 239, 242, 248, 249, 260, 261, 262, 265, 274, 275, 276, 281, 286, 292, 293, 294, 296, 305, 310, 314, 316, 318, 319, 339, 344, 354, 360, 361, 365, 377, 408, 409, 416, 419, 420, 421, 444, 447, 450, 453, 454, 455, 457, 461, 470, 473, 474, 475, 476, 477, 481, 482, 484, 488, 489], "pytorchadaptor": 44, "api": [44, 69, 74, 109, 149, 244, 281, 286, 318, 331, 332, 339, 343, 377, 392, 393, 396, 409, 414, 415, 422, 424, 428, 431, 434, 441, 446, 451, 455, 460, 464, 465, 466, 485, 486, 490, 494], "pytorch_ipexadaptor": 44, "intel": [44, 182, 183, 237, 240, 277, 282, 289, 290, 313, 316, 324, 330, 335, 342, 343, 355, 377, 385, 391, 411, 413, 414, 416, 417, 419, 420, 421, 437, 439, 440, 442, 443, 445, 446, 448, 449, 453, 456, 457, 458, 463, 465, 466, 477, 478, 479, 480, 482, 483, 485, 487, 488, 490, 491, 492], "extens": [44, 409, 416, 418, 419, 448, 451, 452, 455, 456, 457, 459, 464, 465, 466, 470, 473, 474, 479, 480, 482, 487, 490, 491, 492], "ipex": [44, 152, 158, 200, 201, 451, 455, 456, 460, 464, 465, 487], "pytorch_fxadaptor": 44, "fx": [44, 158, 200, 326, 387, 451, 456, 464, 465, 480, 482, 483], "graph": [44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 116, 129, 131, 135, 138, 141, 142, 144, 145, 146, 147, 178, 215, 259, 281, 345, 352, 376, 415, 419, 439, 442, 444, 450, 457, 458, 482, 483, 488], "pytorchweightonlyadaptor": 44, "querybackendcap": [45, 419, 420], "tensorflowadaptor": 46, "stock": [46, 464, 487], "spr": 46, "tensorflow_itexadaptor": 46, "itex": [46, 108, 200, 201, 279, 456, 482, 487], "tensorflowqueri": [46, 419], "performance_onli": [46, 47, 48, 106, 130, 135, 146, 200, 455], "itex_mod": [46, 47, 88, 106, 130, 135], "quant_mod": [46, 332, 393, 420, 421], "graphconvert": 47, "qt_config": 47, "recip": [47, 178, 200, 201, 281, 318, 455, 484, 487, 490], "int8_sequ": 47, "fp32_op": [47, 49, 106], "bf16_op": [47, 49, 106, 420, 483], "data_load": [47, 48, 419], "fake_qu": [47, 87, 106, 130, 135], "qdq_enabl": 47, "new_api": [47, 48, 70, 71, 76, 78, 91, 98, 130, 135, 142], "use_bf16": [47, 48, 200, 481], "without": [48, 89, 147, 190, 233, 275, 315, 334, 395, 413, 442, 444, 455, 466, 479, 480, 481, 490, 491], "graphconverterwithoutcalib": 48, "recover_config": 48, "rewrit": [49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 105, 106, 107, 108, 245], "bf16convert": [49, 483], "biasadd": [51, 58, 63, 65, 108, 448], "convertaddtobiasaddoptim": 51, "conv2d": [51, 58, 59, 60, 64, 65, 70, 124, 134, 142, 149, 420, 421, 441, 446, 448, 487, 488, 490], "addv2": [51, 68, 448], "layout": 52, "convertlayoutoptim": 52, "optim": [52, 73, 74, 78, 79, 115, 117, 169, 170, 171, 178, 187, 192, 197, 200, 201, 237, 243, 245, 281, 282, 298, 318, 322, 335, 381, 398, 399, 406, 409, 416, 418, 436, 441, 442, 443, 444, 448, 449, 451, 452, 455, 457, 458, 460, 462, 463, 466, 469, 480, 481, 482, 483, 486, 487, 488, 490, 492], "nchw": [52, 229], "nhwc": [52, 229], "It": [52, 166, 180, 204, 205, 242, 248, 249, 288, 290, 297, 313, 318, 325, 341, 343, 344, 377, 382, 386, 398, 419, 420, 421, 437, 441, 442, 455, 461, 464, 469, 475, 476, 479, 482, 485, 486, 490, 492], "exist": [52, 165, 198, 234, 352, 446, 454, 462, 490], "4": [52, 153, 158, 159, 165, 180, 189, 200, 201, 225, 228, 229, 233, 269, 272, 275, 283, 284, 286, 336, 337, 339, 395, 396, 413, 419, 421, 436, 444, 445, 448, 451, 452, 454, 455, 463, 479, 482, 484, 487, 489, 490, 493], "abov": [52, 419, 420, 421, 442, 479, 482, 487, 490], "graph_def": [52, 147, 279, 344, 352, 376, 377], "leakyrelu": [53, 487], "convertleakyreluoptim": 53, "below": [53, 65, 73, 200, 201, 319, 343, 377, 414, 415, 418, 419, 420, 421, 438, 441, 442, 444, 450, 454, 458, 460, 468, 469, 472, 475, 477, 478, 479, 481, 482, 484, 486, 487, 488, 490, 491], "subgraph": [53, 65, 104, 156, 490], "mul": [53, 64, 65, 68, 163, 446, 487], "maximum": [53, 180, 185, 200, 201, 216, 233, 260, 275, 284, 315, 322, 337, 381, 421, 437, 439, 441, 455, 479, 482, 489], "note": [53, 184, 286, 326, 339, 387, 416, 420, 421, 438, 441, 444, 446, 448, 452, 455, 460, 463, 468, 472, 475, 479, 482, 484, 487, 488, 490, 491, 492], "coeffici": [53, 479], "less": [53, 147, 200, 201, 409, 436, 442, 455, 479], "than": [53, 147, 216, 233, 260, 275, 409, 416, 418, 436, 439, 450, 477, 478, 479, 482, 484, 486, 489, 490], "convers": [53, 201, 292, 419, 420, 455, 456, 482, 483, 487], "valid": [53, 66, 67, 104, 185, 188, 196, 200, 201, 218, 262, 286, 314, 315, 339, 352, 414, 416, 418, 419, 439, 441, 442, 445, 448, 451, 453, 455, 466, 479, 482, 485], "nan": 54, "random": [54, 147, 171, 200, 201, 229, 233, 272, 275, 282, 298, 322, 324, 335, 381, 385, 409, 414, 416, 455, 479, 481, 489, 492], "convertnantorandom": 54, "const": [54, 55, 62, 63, 66, 67, 69, 81, 97], "consist": [54, 62, 414, 415, 487, 490], "placehold": [55, 214, 258], "convertplaceholdertoconst": 55, "rerewrit": 56, "dequantizecastoptim": 56, "b16": 56, "dilat": 57, "contract": 57, "dilatedcontract": 57, "spacetobatchnd": 57, "batchtospacend": 57, "pattern": [57, 58, 60, 77, 95, 106, 107, 108, 130, 135, 158, 171, 172, 173, 174, 175, 178, 179, 185, 186, 187, 188, 190, 192, 193, 197, 200, 201, 218, 262, 282, 303, 304, 306, 311, 315, 332, 335, 393, 419, 439, 448, 451, 455, 476, 478, 481, 487, 490, 493], "inject": [58, 455], "dummi": [58, 178, 219, 220, 263, 264, 290, 343, 418, 439, 449, 454, 455], "injectdummybiasaddoptim": 58, "fusion": [58, 60, 69, 77, 108, 125, 126, 127, 130, 131, 132, 136, 415, 419, 448], "expanddim": 59, "expanddimsoptim": 59, "next": [59, 209, 253, 396, 416, 420, 421, 438, 481, 484, 490], "featch": 60, "reshap": [60, 66, 67, 72, 487], "fetchweightfromreshapeoptim": 60, "handl": [60, 147, 155, 163, 405, 415, 417, 438, 487], "fold": [61, 62, 280, 448, 487], "foldbatchnormnodesoptim": 61, "graphfoldconstantoptim": 62, "sequenc": [62, 104, 179, 182, 183, 200, 201, 216, 232, 233, 260, 274, 275, 284, 288, 313, 337, 341, 419, 439, 448, 479, 484, 489], "self": [62, 178, 200, 201, 354, 419, 420, 438, 439, 451, 454, 486, 488, 490], "supported_op_typ": 62, "fusebiasaddandaddoptim": 63, "second": [63, 179, 200, 201, 216, 260, 382, 409, 441, 455, 468, 472, 476, 484, 487, 490, 492], "columnwis": 64, "fusecolumnwisemuloptim": 64, "depthwiseconv2dn": [64, 70, 124, 134, 448], "math": [65, 482], "fuseconvwithmathoptim": 65, "elimin": 65, "sub": [65, 158, 165, 178, 234, 416, 490], "realdiv": [65, 68], "decompos": [66, 67], "fusedecomposedbnoptim": 66, "input_graph_def": [66, 67, 69], "node_name_from_input": [66, 67, 69], "node_nam": [66, 67, 69, 147, 352, 362, 420], "strip": [66, 67, 69, 82, 83, 147, 488], "port": [66, 67, 69], "other": [66, 67, 69, 155, 163, 215, 259, 288, 341, 352, 413, 414, 415, 420, 421, 441, 448, 451, 453, 455, 457, 477, 479, 482, 487, 489, 490, 493], "underli": [66, 67, 69], "node_from_map": [66, 67, 69], "node_map": [66, 67, 69], "pull": [66, 67, 69], "def": [66, 67, 69, 204, 205, 248, 249, 377, 396, 398, 415, 419, 438, 439, 442, 443, 444, 454, 455, 482, 487, 488, 490], "entri": [66, 67, 69, 150, 240, 281, 319, 409, 453], "index": [66, 67, 69, 104, 165, 201, 209, 214, 218, 253, 258, 262, 297, 409, 439, 454, 476, 487], "everi": [66, 67, 69, 180, 183, 185, 200, 201, 313, 315, 419, 438, 463, 468, 472, 490], "identifi": [66, 67, 69, 286, 339, 352, 479], "want": [66, 67, 69, 178, 200, 201, 214, 216, 258, 260, 315, 382, 398, 415, 419, 438, 439, 444, 455, 463, 475, 476, 477, 486, 488, 490], "nodedef": [66, 67, 69], "rais": [66, 67, 69, 104, 181, 188, 196, 286, 313, 314, 315, 339, 344, 396, 418, 479, 480], "valueerror": [66, 67, 69, 286, 339, 396, 447], "If": [66, 67, 69, 73, 159, 165, 200, 201, 204, 205, 218, 233, 248, 249, 262, 275, 314, 344, 377, 396, 398, 414, 415, 420, 436, 438, 439, 444, 452, 453, 454, 455, 461, 469, 470, 473, 475, 477, 482, 484, 486, 487, 488, 489, 490], "isn": [66, 67, 69], "t": [66, 67, 69, 142, 164, 180, 200, 201, 233, 236, 275, 288, 341, 415, 419, 441, 442, 444, 455, 456, 476, 479, 482, 490, 492], "present": [66, 67, 69, 441, 480, 487], "values_from_const": [66, 67, 69], "node_def": [66, 67, 69], "extract": [66, 67, 69, 147, 178, 218, 262, 334, 395, 439], "ha": [66, 67, 69, 73, 149, 184, 185, 234, 283, 313, 315, 336, 396, 414, 416, 419, 420, 421, 438, 446, 451, 455, 456, 461, 475, 479, 481, 482, 483, 486, 487, 490], "access": [66, 67, 69, 198, 201, 404, 409, 470, 473], "valid_reshape_input": [66, 67], "reshape_in0_ndef": [66, 67], "reshape_in1_ndef": [66, 67], "ar": [66, 67, 104, 158, 180, 185, 186, 187, 192, 200, 201, 216, 233, 260, 275, 286, 290, 297, 313, 314, 315, 319, 321, 322, 339, 343, 378, 380, 381, 395, 396, 401, 408, 409, 413, 414, 415, 416, 419, 420, 438, 439, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 461, 463, 466, 469, 475, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492], "bypass_reshap": [66, 67], "input_node_map": [66, 67], "input_nam": [66, 67, 101, 141, 201, 279, 280, 446], "get_const_dim_count": [66, 67], "dimens": [66, 67, 104, 208, 233, 252, 275, 439, 442, 489], "instancenorm": [67, 487], "fusedecomposedinoptim": 67, "gelu": 68, "fusegeluoptim": 68, "sqrt": [68, 441], "erf": 68, "samll": 69, "layernorm": [69, 487], "fuselayernormoptim": 69, "remap": 69, "smaller": [69, 233, 275, 442, 455, 479, 489], "case": [69, 73, 159, 165, 201, 215, 232, 233, 234, 259, 274, 275, 281, 305, 310, 318, 354, 421, 438, 442, 443, 444, 448, 450, 454, 459, 463, 475, 476, 477, 479, 480, 482, 484, 485, 489, 491, 492, 493], "fusedbatcnormv3": 69, "And": [69, 415, 436, 455, 461, 487], "further": [69, 201, 413, 456, 457, 458, 460, 469, 475, 482], "restrict": [69, 200, 201, 479, 486], "2d": [69, 487], "3d": [69, 480, 487], "kera": [69, 115, 178, 196, 201, 218, 225, 240, 262, 269, 347, 352, 420, 438, 444, 457, 465, 466], "fusepadwithconv2doptim": 70, "excluded_op_nam": [70, 71, 197, 200, 201, 455, 479], "cfg": [70, 71, 158, 197, 332, 393, 401, 420, 421], "itex_qdq_mod": [70, 71], "conv3d": [70, 124], "fusepadwithfp32conv2doptim": 71, "fusetransposereshapeoptim": 72, "cse": [73, 97], "graphcseoptim": 73, "introduc": [73, 414, 419, 420, 421, 448, 455, 482, 484, 485, 487, 491], "ident": [73, 79, 179, 413, 442], "three": [73, 196, 216, 260, 321, 378, 380, 415, 419, 420, 437, 452, 456, 469, 478, 482, 483, 486, 487, 488], "d": [73, 158, 442, 450, 476, 493], "those": [73, 325, 386, 409, 441, 442, 443, 450, 455, 456, 478, 479, 482, 490], "child": [73, 149, 488], "b1": 73, "c1c2": 73, "d1": [73, 409], "c1": 73, "c2": 73, "memori": [73, 281, 305, 310, 318, 354, 409, 437, 438, 443, 455, 456, 458, 477, 479, 482, 484, 487, 490, 493], "bound": [73, 165, 172, 233, 275, 286, 322, 339, 381, 454, 489], "like": [73, 95, 97, 147, 178, 196, 201, 204, 205, 206, 218, 248, 249, 250, 262, 281, 290, 315, 318, 319, 343, 352, 377, 398, 414, 415, 416, 419, 420, 441, 442, 443, 451, 463, 478, 479, 482, 484, 485, 487, 490], "relu": [73, 77, 108, 415, 448, 487, 488], "relu6": [73, 448], "updat": [73, 158, 174, 180, 196, 315, 343, 377, 406, 447, 454, 455, 461, 466, 469, 479, 487, 490, 491], "graphdef": [73, 147, 352, 376, 457], "grappler": [74, 448], "grappleroptim": 74, "input_output_nam": 74, "opt_cfg": 74, "wrapper": [74, 101, 102, 103, 104, 121, 139, 148, 153, 157, 167, 215, 233, 235, 236, 238, 239, 245, 259, 275, 286, 290, 339, 343, 348, 352, 483], "leverag": [74, 416, 418, 442, 446, 458, 475, 478, 482, 484, 490], "built": [74, 202, 203, 207, 212, 216, 217, 222, 224, 226, 227, 229, 230, 233, 238, 240, 246, 247, 251, 254, 256, 260, 261, 266, 268, 270, 271, 272, 273, 275, 319, 343, 346, 354, 377, 398, 416, 419, 439, 444, 455, 468, 472, 477, 482, 489, 490, 492], "convert_add_to_biasadd": [75, 86, 110], "convert_layout": [75, 86, 110], "convert_leakyrelu": [75, 86, 110], "convert_nan_to_random": [75, 86, 110], "convert_placeholder_to_const": [75, 86, 110], "dequantize_cast_optim": [75, 86, 110], "dilated_contract": [75, 86, 110], "dummy_biasadd": [75, 86, 110], "expanddims_optim": [75, 86, 110], "fetch_weight_from_reshap": [75, 86, 110], "fold_batch_norm": [75, 86, 110], "fold_const": [75, 86, 110], "fuse_biasadd_add": [75, 86, 110], "fuse_column_wise_mul": [75, 86, 110], "fuse_conv_with_math": [75, 86, 110], "fuse_decomposed_bn": [75, 86, 110], "fuse_decomposed_in": [75, 86, 110], "fuse_gelu": [75, 86, 110], "fuse_layer_norm": [75, 86, 110], "fuse_pad_with_conv": [75, 86, 110], "fuse_pad_with_fp32_conv": [75, 86, 110], "fuse_reshape_transpos": [75, 86, 110], "graph_cse_optim": [75, 86, 110], "grappler_pass": [75, 86, 110], "insert_print_nod": [75, 86, 110], "move_squeeze_after_relu": [75, 86, 110], "pre_optim": [75, 86, 110], "remove_training_nod": [75, 86, 110], "rename_batch_norm": [75, 86, 110], "split_shared_input": [75, 86, 110], "strip_equivalent_nod": [75, 86, 110, 147], "strip_unused_nod": [75, 86, 110, 147], "switch_optim": [75, 86, 110], "insert": [76, 104, 106, 108, 112, 145, 155, 163, 415, 420, 438, 451, 455, 458, 479, 482, 483, 487, 488], "print": [76, 149, 150, 178, 290, 343, 396, 409, 444, 454, 455, 479, 487, 490], "insertprintminmaxnod": 76, "pre_node_nam": 76, "post_node_nam": 76, "pass": [76, 147, 165, 343, 377, 409, 415, 419, 436, 439, 442, 443, 444, 450, 454, 455, 476, 479, 481, 482, 483, 487, 492], "sampl": [76, 159, 200, 201, 209, 214, 216, 217, 218, 229, 233, 253, 258, 260, 261, 262, 272, 275, 290, 297, 322, 343, 381, 416, 438, 439, 445, 451, 476, 482, 489, 490, 492, 493], "move": [77, 415, 481, 484, 485], "squeez": [77, 415], "movesqueezeafterreluoptim": 77, "match": [77, 101, 178, 286, 287, 339, 340, 442, 476, 484], "pre": [78, 115, 178, 204, 205, 216, 248, 249, 260, 344, 377, 398, 439, 442, 443, 455, 463, 479, 480, 482, 484, 488, 490], "entranc": [78, 172, 207], "preoptim": 78, "removetrainingnodesoptim": 79, "protected_nod": 79, "types_to_splic": 79, "checknumer": 79, "stopgradi": 79, "renam": [80, 485], "fusedbatchnorm": 80, "fusedbatchnormv2": 80, "renamebatchnormoptim": 80, "splitsharedinputoptim": 81, "equival": [82, 153, 157, 487], "stripequivalentnodesoptim": 82, "output_node_nam": [82, 83, 130, 131, 135, 147], "same": [82, 140, 147, 159, 192, 201, 216, 233, 260, 275, 286, 339, 409, 419, 421, 436, 438, 439, 442, 444, 448, 455, 459, 463, 468, 472, 479, 481, 482, 484, 487, 488, 489, 490], "unus": [83, 147], "stripunusednodesoptim": 83, "input_node_nam": [83, 130, 135, 147], "switch": [84, 458, 488], "switchoptim": 84, "condit": [84, 216, 217, 218, 233, 260, 261, 262, 275, 321, 378, 380, 439, 453, 489, 490], "graphrewriterbas": 85, "abstract": [85, 166, 172, 233, 275, 276, 281, 318, 419, 421, 450], "freeze_fake_qu": [86, 94, 110], "freeze_valu": [86, 94, 110], "freeze_value_without_calib": [86, 94, 110], "fuse_conv_redundant_dequant": [86, 94, 110], "fuse_conv_requant": [86, 94, 110], "fuse_matmul_redundant_dequant": [86, 94, 110], "fuse_matmul_requant": [86, 94, 110], "meta_op_optim": [86, 94, 110], "post_hostconst_convert": [86, 94, 110], "post_quantized_op_cs": [86, 94, 110], "rnn_convert": [86, 94, 110], "scale_propag": [86, 94, 110], "onnx_graph": [86, 100, 110], "onnx_schema": [86, 100, 110], "tf2onnx_util": [86, 100, 110], "insert_qdq_pattern": [86, 105, 110], "merge_duplicated_qdq": [86, 105, 110], "share_qdq_y_pattern": [86, 105, 110], "freez": [87, 88, 89, 458, 479], "fakequ": 87, "freezefakequantopoptim": 87, "follow": [87, 109, 179, 218, 262, 283, 286, 336, 339, 413, 414, 415, 416, 419, 420, 421, 438, 439, 442, 443, 444, 448, 452, 453, 454, 455, 456, 457, 458, 459, 460, 468, 472, 478, 479, 481, 482, 487, 488, 490], "freezevaluetransform": 88, "max_min_data": [88, 89], "postfix": [88, 89], "tensor_data": [88, 409, 410], "th": [88, 89], "gpu": [88, 89, 96, 200, 201, 418, 436, 451, 455, 456, 460, 466, 475, 481, 482], "freezevaluewithoutcalibtransform": 89, "95": [89, 290, 343, 454, 487, 493], "quantizedconv": [90, 91], "quantizeddeconv": 90, "redund": [90, 92], "fuseconvredundantdequantizetransform": 90, "cpu": [90, 91, 92, 93, 200, 201, 409, 418, 420, 436, 437, 451, 455, 456, 458, 460, 466, 475, 480, 481, 482, 483, 488], "_quantizedconv": 90, "_quantizeddeconv": 90, "successor": [90, 91, 92, 93], "requant": [91, 93, 488], "fuseconvrequantizetransform": 91, "quantizedmatmul": [92, 93], "fusematmulredundantdequantizetransform": 92, "_quantizedmatmul": [92, 93], "fusematmulrequantizedequantizetransform": 93, "quantizedmatmulwithbiasanddequant": 93, "fusematmulrequantizetransform": 93, "fusematmulrequantizedequantizenewapitransform": 93, "fusematmulrequantizenewapitransform": 93, "newapi": 93, "meta": [95, 480], "metainfochangingmemopoptim": 95, "metaop": 95, "With": [95, 354, 415, 419, 421, 438, 455, 463, 468, 472, 476, 477, 479, 480, 486, 487, 490, 493], "better": [95, 200, 201, 204, 205, 248, 249, 297, 344, 377, 398, 443, 454, 456, 479, 480, 482, 484, 486, 490], "perform": [95, 139, 165, 193, 200, 201, 216, 228, 229, 234, 260, 272, 281, 305, 310, 318, 325, 343, 354, 377, 382, 386, 415, 416, 419, 420, 436, 439, 440, 441, 443, 445, 446, 451, 452, 454, 455, 456, 457, 458, 460, 464, 466, 469, 475, 477, 478, 479, 480, 481, 482, 483, 484, 487, 488, 490, 492, 493], "hostconst": 96, "posthostconstconvert": 96, "just": [96, 206, 231, 233, 236, 238, 239, 241, 250, 275, 354, 416, 455, 465, 469, 475, 478, 482, 487, 489, 490], "postcseoptim": 97, "duplic": [97, 107, 322, 381], "quantizev2": 97, "decreas": [97, 479], "size": [97, 159, 182, 183, 208, 209, 215, 218, 224, 229, 233, 252, 253, 259, 262, 268, 272, 275, 313, 354, 409, 413, 420, 438, 439, 444, 447, 455, 475, 476, 477, 479, 484, 487, 489, 492, 493], "rnn": 98, "quantizedrnnconvert": 98, "calibration_data": [98, 106], "rnn_detail": 98, "scalepropagationtransform": 99, "direct": [99, 184, 313, 479], "export": [100, 201, 282, 286, 335, 339, 418, 449, 461, 476, 488, 491], "onnxgraph": 101, "output_shap": 101, "extra_opset": 101, "output_nam": [101, 141, 201, 279, 280, 446], "is_subgraph": 101, "graph_nam": 101, "manipul": [101, 102], "onnxnod": 102, "skip_convers": 102, "schema": [103, 159], "onnxopschema": 103, "domain": [103, 104, 200, 201, 479, 490], "since_vers": 103, "get_schema": 103, "max_inclusive_opset_vers": 103, "within": [103, 186, 187, 192, 281, 286, 318, 339, 352, 371, 376, 413, 415, 421, 437, 456, 468, 472, 475, 480, 487, 490], "get_max_supported_opset_vers": 103, "packag": [103, 419, 447, 452, 475, 476, 480, 485, 490], "set_nam": 104, "find_opset": 104, "assert_error": 104, "bool_val": 104, "error_msg": 104, "error": [104, 150, 290, 325, 343, 386, 405, 441, 454, 459, 487, 490], "messag": [104, 145, 490], "map_numpy_to_onnx_dtyp": 104, "np_dtype": 104, "map_onnx_to_numpy_typ": 104, "onnx_typ": 104, "add_port_to_nam": 104, "nr": 104, "get_tensorflow_node_attr": 104, "pars": [104, 158, 216, 217, 229, 233, 260, 261, 272, 275, 360, 361, 365, 420, 421, 489], "get_tensorflow_tensor_shap": 104, "shape": [104, 147, 180, 219, 220, 229, 233, 263, 264, 272, 275, 286, 339, 418, 439, 448, 449, 455, 487, 489], "get_tensorflow_node_shape_attr": 104, "attr": [104, 147, 178], "map_tensorflow_dtyp": 104, "get_tensorflow_tensor_data": 104, "convert_tensorflow_tensor_to_onnx": 104, "read_tensorflow_node_attr": 104, "read": [104, 147, 221, 233, 265, 275, 314, 439, 483, 486], "infer_onnx_shape_dtyp": 104, "opset_vers": [104, 141, 201, 279, 280, 446], "input_shap": [104, 220, 264, 439], "input_dtyp": 104, "sometim": [104, 415, 441, 482], "so": [104, 233, 275, 395, 415, 419, 441, 447, 451, 456, 461, 463, 482, 483, 484, 487, 488, 489, 491], "make_onnx_shap": 104, "seqtyp": 104, "tensor_dtyp": 104, "around": 104, "signifi": 104, "make_onnx_inputs_output": 104, "elem_typ": 104, "text": [104, 232, 233, 274, 275, 283, 288, 316, 336, 341, 446, 453, 464, 479, 480, 484, 487, 489, 493], "datatyp": [104, 158, 483, 490, 493], "save_protobuf": 104, "path": [104, 147, 158, 178, 196, 197, 216, 217, 218, 233, 260, 261, 262, 275, 276, 279, 280, 281, 292, 293, 294, 296, 305, 310, 314, 316, 318, 319, 332, 344, 352, 376, 377, 393, 406, 409, 415, 416, 419, 439, 441, 444, 450, 454, 455, 456, 457, 461, 464, 475, 478, 484, 489, 492], "as_text": 104, "save": [104, 196, 200, 201, 218, 245, 262, 279, 280, 319, 352, 377, 398, 399, 404, 409, 415, 419, 450, 455, 456, 457, 459, 463, 468, 472, 478, 482, 484, 487], "protobuf": 104, "is_onnx_domain": 104, "is_list_or_tupl": 104, "are_shapes_equ": 104, "src": [104, 476], "dest": 104, "equal": [104, 142, 147, 164, 396, 409, 479], "get_subgraphs_from_onnx": 104, "model_proto": 104, "over": [104, 218, 262, 290, 343, 420, 445, 449, 451, 454, 466, 475, 481, 487, 490], "df": 104, "initialize_name_count": 104, "avoid": [104, 159, 216, 260, 415, 484, 488], "conflict": [104, 447], "counter": 104, "make_nam": 104, "get_index_from_strided_slice_of_shap": 104, "outputs_to_valu": 104, "stride": [104, 233, 275, 489], "slice": 104, "compute_const_folding_using_tf": 104, "g": [104, 180, 200, 201, 442, 445, 449, 458, 463, 479, 484, 485, 487, 490], "const_node_valu": 104, "graph_output": 104, "constant": [104, 280, 282, 322, 324, 330, 335, 381, 385, 391, 402, 438, 448, 489], "tf": [104, 115, 147, 178, 196, 215, 216, 217, 218, 233, 259, 260, 261, 262, 275, 350, 352, 444, 457, 480, 483, 489], "generategraphwithqdqpattern": 106, "op_wise_config": [106, 130, 135, 420], "quantized_nod": 106, "dq": [106, 108, 130, 487], "pair": [106, 200, 201, 420, 438, 455, 456, 485], "befor": [106, 108, 149, 163, 171, 180, 185, 187, 192, 194, 200, 201, 216, 260, 313, 315, 317, 414, 421, 438, 439, 442, 443, 444, 447, 448, 452, 455, 470, 473, 482, 486, 488, 490], "merg": [107, 208, 252, 332, 393, 470, 473, 488, 490], "mergeduplicatedqdqoptim": 107, "y": [108, 200, 201, 233, 275, 322, 381, 441, 447, 461, 487, 489], "shareqdqforitexypatternoptim": 108, "one": [108, 109, 114, 158, 159, 165, 180, 184, 189, 192, 194, 233, 243, 275, 283, 286, 290, 292, 313, 316, 317, 336, 339, 343, 416, 419, 437, 442, 443, 444, 448, 451, 452, 454, 455, 456, 458, 459, 463, 464, 466, 468, 469, 472, 475, 476, 477, 478, 479, 481, 482, 484, 485, 487, 489, 490], "enabl": [108, 150, 159, 185, 200, 201, 315, 420, 421, 444, 452, 456, 458, 460, 463, 464, 466, 479, 480, 490], "break": [108, 444, 455], "graphanalyz": 109, "extend_engin": 109, "analyz": [109, 178, 352, 486, 487, 488], "under": [109, 200, 201, 218, 262, 408, 416, 439, 453, 454, 455, 458, 463, 464, 475, 478, 479, 484, 487, 488, 490], "singleton": [109, 409], "specifi": [109, 158, 165, 200, 201, 204, 205, 233, 234, 248, 249, 275, 281, 286, 290, 293, 296, 305, 310, 318, 319, 339, 343, 344, 377, 396, 398, 408, 409, 420, 421, 444, 448, 454, 455, 463, 477, 481, 489, 490, 492], "graphrewriterhelp": 109, "encapsul": [109, 204, 205, 248, 249, 344, 377, 398, 457], "quantize_lay": [110, 111, 113], "fake_quant": [110, 111, 113], "quantize_config": [110, 111, 113, 420], "quantize_help": [110, 111, 113], "quantize_wrapp": [110, 111, 113], "fuse_qdq_bn": [110, 111, 129], "fuse_qdq_concatv2": [110, 111, 129], "fuse_qdq_conv": [110, 111, 129], "fuse_qdq_deconv": [110, 111, 129], "fuse_qdq_in": [110, 111, 129], "fuse_qdq_matmul": [110, 111, 129], "fuse_qdq_pool": [110, 111, 129], "optimize_qdq": [110, 111, 129], "optimize_lay": [111, 113, 116], "quantize_layer_add": [111, 113, 116], "quantize_layer_bas": [111, 113, 116], "quantize_layer_bn": [111, 113, 116], "fakequantizebas": 112, "abc": [112, 288, 341, 419, 488, 490], "appli": [112, 125, 126, 127, 130, 132, 136, 153, 157, 166, 189, 191, 243, 284, 337, 413, 420, 421, 455, 458, 460, 466, 475, 478, 479, 482, 483, 486, 487, 490, 491, 492], "fakequant": 112, "per_channel": [112, 420, 421, 448, 482, 492], "num_bit": [112, 153, 158, 159, 487], "8": [112, 159, 200, 201, 232, 274, 415, 420, 437, 448, 452, 479, 480, 484, 487, 490, 493], "channel_axi": [112, 161, 164], "symmetr": [112, 421, 482, 484, 489, 490], "narrow_rang": 112, "quantizeconfig": [114, 115], "custom": [114, 159, 165, 319, 343, 354, 408, 436, 442, 443, 458, 479, 480, 484, 486], "There": [114, 319, 321, 378, 380, 441, 442, 448, 451, 455, 458, 484, 487, 490, 492], "instanc": [114, 115, 165, 200, 201, 204, 205, 234, 248, 249, 287, 288, 290, 293, 296, 299, 300, 302, 303, 304, 322, 334, 340, 341, 343, 344, 377, 381, 395, 398, 406, 409, 413, 415, 419, 436, 455, 460, 466, 490, 492, 493], "global": [114, 180, 200, 201, 299, 300, 302, 303, 304, 313, 395, 409, 415, 455, 479, 481, 490], "class": [115, 158, 181, 188, 297, 344, 377, 415, 416, 420, 438, 439, 442, 454, 455, 466, 477, 478, 482, 485, 488, 490, 492], "init_quantize_config": 115, "quantize_recip": 115, "begin": [115, 186, 187, 192, 315, 438, 442, 443, 455, 479, 490], "process": [115, 139, 150, 165, 180, 185, 186, 187, 194, 196, 200, 201, 204, 205, 216, 217, 218, 229, 233, 234, 248, 249, 260, 261, 262, 272, 275, 313, 315, 317, 321, 322, 344, 377, 378, 380, 381, 398, 408, 409, 416, 419, 420, 421, 437, 438, 439, 442, 443, 444, 446, 455, 459, 478, 479, 482, 487, 488, 489, 492], "model_nam": [115, 200, 201], "special": [115, 178, 354, 415, 438, 454, 455, 477, 479, 491], "decid": [115, 200, 201, 284, 315, 337, 419, 420, 455, 482, 485, 490], "qat_clone_funct": 115, "leav": [115, 469], "quantizewrapp": [115, 121], "wrapped_lay": 115, "config_quantizable_lay": 117, "quantizelayeradd": 118, "quantizelay": 119, "quantizelayerbas": 119, "quantizelayerbatchnorm": 120, "quantizewrapperbas": 121, "fusedbatchnormv3": [122, 132], "fusenodestartwithfusedbatchnormv3": [122, 132], "_quantizedfusedbatchnorm": 122, "concatv2": [123, 133, 146, 448], "fusenodestartwithconcatv2": [123, 133], "quantizedconcatv2": [123, 133], "fusenodestartwithconv2d": [124, 134], "conv2dbackpropinput": 125, "conv3dbackpropinputv2": 125, "fusenodestartwithdeconv2d": 125, "fusedinstancenorm": 126, "fusenodestartwithfusedinstancenorm": 126, "batchmatmul": 127, "batchmatmulv2": 127, "fusenodestartwithmatmul": [127, 136], "avgpool": [128, 137, 448], "fusenodestartwithpool": [128, 137], "optimizeqdqgraph": 130, "input_graph": [130, 135, 142, 372, 376, 419], "op_wise_sequ": [130, 135], "quantizegraph": 131, "quantizegraphbas": 131, "quantizenodebas": 131, "quantizegraphforintel": 135, "common": [138, 171, 201, 231, 282, 292, 296, 297, 298, 335, 401, 413, 439, 443, 444, 446, 450, 452, 455, 482, 487], "herlper": 138, "quantizegraphhelp": 138, "sever": [138, 194, 233, 275, 317, 416, 441, 442, 443, 451, 455, 456, 468, 472, 479, 481, 487, 489, 490, 492], "staticmethod": 138, "function": [138, 186, 187, 192, 200, 201, 204, 205, 217, 248, 249, 261, 293, 296, 305, 310, 415, 416, 419, 420, 421, 436, 438, 442, 443, 446, 450, 451, 452, 454, 455, 456, 466, 476, 479, 482, 484, 485, 486, 487, 488, 490, 491], "smoothquantcalibr": 139, "dataset": [139, 140, 158, 204, 205, 206, 208, 209, 211, 212, 213, 214, 215, 227, 236, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 271, 282, 286, 287, 288, 290, 319, 335, 339, 340, 341, 343, 344, 377, 398, 401, 416, 418, 419, 420, 438, 444, 449, 454, 455, 463, 479, 482, 485, 487, 490, 492, 493], "outlier": [139, 420, 437, 441, 484, 487], "ignor": [139, 409, 437, 439, 484, 487], "smoothquantscal": 140, "alpha": [140, 153, 163, 174, 193, 482], "scales_per_op": 140, "method": [140, 142, 158, 159, 171, 193, 200, 201, 209, 214, 215, 216, 218, 225, 233, 236, 253, 258, 259, 260, 262, 269, 275, 296, 297, 298, 332, 393, 395, 401, 402, 404, 405, 415, 416, 418, 437, 438, 439, 441, 442, 443, 454, 455, 478, 479, 482, 483, 484, 487, 489, 490], "individu": [140, 180, 313, 371, 376, 413, 479, 487], "tensorflowqdqtoonnxqdqconvert": 141, "shape_overrid": 141, "inputs_as_nchw": [141, 279], "default_opset_vers": 141, "bia": [142, 200, 201, 484, 488], "correct": [142, 164, 196, 200, 201, 286, 287, 288, 290, 314, 339, 340, 341, 343, 413, 458], "biascorrect": 142, "fp32_graph": 142, "weight_empir": 142, "Will": [142, 442, 451], "our": [142, 158, 200, 201, 416, 418, 446, 455, 476, 486, 491], "task": [142, 216, 223, 260, 267, 290, 343, 439, 442, 443, 446, 451, 454, 455, 479, 484, 487], "close": [142, 164, 437], "w_int8": [142, 164], "u": [142, 164, 418, 458], "w_fp32": [142, 164], "varianc": [142, 164, 441], "ratio": [142, 164, 180, 185, 196, 200, 201, 229, 233, 272, 275, 315, 439, 455, 479, 489, 493], "differ": [142, 160, 164, 167, 171, 189, 200, 201, 209, 218, 233, 235, 253, 262, 275, 281, 290, 296, 298, 307, 318, 343, 354, 403, 413, 415, 416, 420, 438, 439, 441, 442, 444, 445, 450, 451, 454, 455, 457, 468, 472, 477, 479, 482, 487, 488, 489, 490], "wise": [142, 159, 164, 200, 201, 322, 325, 381, 382, 386, 420, 451, 479, 488, 490, 492], "minim": [142, 164, 322, 381, 420, 421, 437, 442, 445, 454, 455, 468, 472, 479, 482, 490], "round": [142, 159, 164, 482, 484, 487], "scale_c": [142, 164], "shift": [142, 164, 229, 272, 476, 489], "notic": [142, 164, 234, 453, 456, 485], "first": [142, 164, 179, 198, 200, 201, 216, 260, 286, 332, 339, 382, 393, 409, 415, 416, 419, 420, 421, 439, 441, 452, 456, 460, 469, 470, 473, 476, 481, 482, 483, 484, 486, 487, 488, 490, 492], "empir": [142, 164], "solut": [142, 164, 418, 419, 420, 447, 460, 464, 469, 480, 485, 487, 490, 491], "don": [142, 164, 180, 200, 201, 415, 479, 490], "min": [142, 159, 164, 172, 201, 409, 441, 479, 482, 487, 489, 490], "graphtransform": 143, "graphtransformbas": 143, "input_pb": [143, 145, 146], "log": [145, 165, 178, 360, 361, 365, 405, 415, 466, 486, 488, 490], "insertlog": 145, "node_name_list": 145, "show_nam": 145, "show_op": 145, "first_n": 145, "summar": [145, 442], "1024": [145, 218, 262, 461], "dump_fp32": 145, "rerang": 146, "rerangequantizedconcat": 146, "rerange_quant": 146, "version1_lt_version2": [147, 409], "version1": [147, 409], "version2": [147, 409], "version1_gt_version2": [147, 409], "greater": [147, 409, 479, 490], "version1_eq_version2": [147, 409], "version1_gte_version2": [147, 409], "version1_lte_version2": [147, 409], "disable_random": 147, "seed": [147, 171, 200, 201, 298, 409, 455, 492], "disabl": [147, 200, 201, 413, 475, 483], "read_graph": 147, "in_graph": 147, "in_graph_is_binari": 147, "write_graph": 147, "out_graph_def": 147, "out_graph_fil": 147, "write": [147, 225, 269, 409, 444, 450, 455, 458, 488], "is_ckpt_format": 147, "model_path": [147, 441], "ckpt": [147, 344, 352, 377, 493], "folder": [147, 218, 223, 262, 267, 344, 377, 408, 439, 463, 468, 472, 484, 488], "is_saved_model_format": 147, "saved_model": [147, 292], "get_estimator_graph": 147, "estim": [147, 290, 343, 352, 490], "input_fn": [147, 352], "get_tensor_by_nam": 147, "try_cnt": 147, "consid": [147, 290, 343, 413, 437, 442, 476, 490], "import": [147, 165, 172, 200, 201, 292, 344, 354, 377, 396, 398, 409, 415, 416, 418, 421, 436, 438, 439, 441, 442, 443, 444, 446, 449, 454, 455, 456, 457, 458, 462, 464, 477, 478, 479, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491], "scope": [147, 420, 455], "onc": [147, 194, 240, 317, 321, 378, 380, 420, 421, 438, 475, 479, 480, 490, 493], "both": [147, 201, 413, 416, 419, 443, 455, 459, 479, 481, 482, 487, 490], "compat": [147, 352, 444, 457, 470, 473, 475, 485], "v1": [147, 228, 229, 272, 287, 288, 290, 340, 341, 343, 352, 444, 446, 447, 454, 457, 479, 485, 486, 493], "suffix": 147, "time": [147, 200, 201, 233, 275, 290, 322, 343, 354, 381, 409, 420, 438, 441, 444, 447, 455, 463, 465, 468, 472, 475, 476, 477, 479, 480, 482, 484, 486, 488, 489, 490], "got": [147, 420, 447, 488], "iterator_sess_run": 147, "sess": [147, 352], "iter_op": 147, "feed_dict": [147, 215, 259], "output_tensor": [147, 352], "measur": [147, 234, 344, 403, 416, 419, 436, 441, 442, 454, 455, 484, 488, 490, 493], "integr": [147, 167, 235, 419, 455, 476, 484], "session": [147, 215, 259, 352, 455, 488], "makeiter": 147, "feed": [147, 215, 259, 442, 479], "end": [147, 185, 186, 187, 192, 200, 201, 216, 232, 233, 260, 274, 275, 315, 321, 378, 380, 419, 420, 421, 442, 443, 448, 452, 455, 469, 477, 479, 488, 489, 490], "predict": [147, 233, 238, 275, 283, 287, 288, 290, 336, 340, 341, 343, 377, 416, 442, 454, 466, 484, 487, 488, 489], "pred": [147, 290, 343, 454], "collate_tf_pr": 147, "collat": [147, 158, 438], "tbe": 147, "get_input_output_node_nam": 147, "fix_ref_type_of_graph_def": 147, "fix": [147, 190, 192, 216, 260, 315, 414, 438, 439, 462, 479, 487, 490], "strip_unused_lib": 147, "offici": [147, 283, 287, 288, 336, 340, 341, 413, 487], "r1": 147, "15": [147, 448, 452], "branch": 147, "get_graph_def": 147, "auto_input_output": 147, "get_model_input_shap": 147, "inout": 147, "get_tensor_val_from_graph_nod": 147, "graph_node_name_map": 147, "kei": [147, 150, 155, 178, 189, 196, 198, 200, 201, 297, 314, 352, 396, 399, 401, 409, 418, 420, 480, 484, 488, 490], "val": [147, 196, 218, 221, 262, 265, 314, 441, 455], "tensor_v": 147, "int8_node_name_revers": 147, "revers": 147, "tf_diagnosis_help": 147, "fp32_model": [147, 150, 158, 280, 409, 419], "quan_model": 147, "save_path": [147, 279, 280, 419, 457], "diagnosi": [147, 200, 201, 455, 480, 485, 491], "generate_feed_dict": 147, "input_tensor": [147, 352], "get_weight_from_input_tensor": 147, "input_tensor_nam": [147, 352], "associ": [147, 286, 339], "quant": [147, 158, 159, 200, 201, 332, 393, 415, 455, 482], "search": [147, 149, 171, 172, 178, 192, 197, 201, 204, 205, 248, 249, 281, 283, 293, 296, 297, 298, 318, 322, 336, 381, 418, 451, 454, 458, 459, 469, 479, 480, 484, 488, 490, 491], "look": [147, 189, 418, 419, 421, 448, 454, 492], "sq_weight_tensor": 147, "sq_weights_nod": 147, "two": [147, 150, 165, 179, 184, 191, 194, 218, 223, 234, 262, 267, 286, 313, 317, 319, 326, 339, 387, 409, 415, 416, 438, 439, 442, 444, 446, 448, 455, 456, 482, 483, 484, 486, 490, 492], "torch": [148, 149, 150, 151, 153, 154, 155, 156, 158, 159, 163, 178, 179, 181, 189, 197, 200, 201, 245, 280, 344, 377, 408, 415, 418, 421, 422, 442, 444, 446, 455, 456, 457, 458, 463, 466, 482, 484, 487, 488], "bf16modulewrapp": 148, "bf16modul": 148, "mix": [148, 152, 200, 201, 320, 332, 344, 379, 393, 418, 419, 426, 451, 458, 464, 465, 466, 491], "precis": [148, 152, 200, 201, 204, 205, 248, 249, 281, 288, 290, 291, 318, 320, 332, 341, 343, 344, 354, 379, 382, 393, 409, 418, 419, 420, 426, 436, 437, 443, 444, 448, 451, 458, 464, 465, 466, 480, 481, 482, 487, 490, 491], "mixed_precision_model": 148, "bf16_symbolic_trac": 148, "fx_sub_module_list": 148, "trace": [148, 150, 156, 158, 178, 200, 201, 280, 384, 415, 465, 490], "_description_": 148, "is_leaf": 149, "judg": 149, "nn": [149, 153, 155, 158, 159, 178, 179, 189, 200, 201, 245, 280, 344, 377, 408, 415, 442, 455, 457, 484, 487, 488], "trace_gptq_target_block": 149, "module_typ": 149, "modulelist": 149, "stack": 149, "structur": [149, 179, 190, 191, 200, 201, 315, 333, 394, 451, 474, 476, 479, 482, 488, 491, 493], "critic": [149, 189, 413], "llm": [149, 484, 487], "gptq_related_block": 149, "embed": [149, 158, 437, 479], "transfrom": 149, "transformers_pr": 149, "todo": [149, 216, 219, 260, 263, 286, 332, 339, 393], "transformers_nam": 149, "find_lay": 149, "conv1d": [149, 421], "find_layers_nam": 149, "log_quantizable_layers_per_transform": 149, "transformer_block": 149, "maxq": 149, "gptquantiz": 149, "weight_config": [149, 157, 159], "compress": [149, 282, 305, 310, 335, 354, 398, 411, 418, 426, 442, 451, 455, 475, 477, 478, 479, 480, 482, 487, 491, 493], "pretrain": [149, 404, 458, 464], "url": [149, 218, 262, 453], "arxiv": [149, 174, 192, 315, 437, 479, 484, 487], "org": [149, 174, 192, 286, 315, 339, 414, 415, 441, 452, 470, 473], "2210": [149, 484], "17323": [149, 484], "hessian": [150, 384, 490], "awar": [150, 159, 166, 201, 243, 292, 313, 384, 398, 418, 419, 420, 421, 437, 443, 444, 446, 451, 475, 478, 480, 484, 490], "node_collector": 150, "hook": [150, 166, 189, 242, 243, 305, 310, 401, 442, 443, 455, 479, 487, 488], "record": [150, 158, 159, 167, 216, 217, 218, 224, 235, 242, 260, 261, 262, 268, 409, 439, 486, 488, 490], "hessiantrac": 150, "q_model": [150, 201, 292, 377, 415, 418, 438, 439, 441, 444, 446, 449, 450, 454, 455, 457, 482, 483, 484], "criterion": [150, 166, 168, 173, 174, 180, 185, 186, 187, 189, 192, 195, 200, 201, 237, 240, 282, 335, 442, 443, 455, 479, 482, 490, 492], "yao": 150, "zhewei": 150, "et": [150, 437, 484, 487], "al": [150, 437, 484, 487], "pyhessian": 150, "network": [150, 174, 180, 181, 315, 384, 416, 437, 442, 443, 446, 455, 480, 482, 487, 490], "through": [150, 204, 205, 248, 249, 343, 344, 377, 418, 436, 448, 450, 451, 454, 461, 477, 478, 479, 481, 482, 487], "len": [150, 201, 233, 275, 439, 444, 489], "2020": 150, "ieee": [150, 456, 487], "intern": [150, 332, 393, 438, 439, 454, 479], "confer": [150, 479, 487], "big": [150, 441], "dong": 150, "zhen": 150, "hawq": [150, 384, 490], "v2": [150, 384, 438, 444, 446, 447, 452, 464, 485, 490, 491, 493], "advanc": [150, 200, 201, 413, 418, 420, 426, 482, 492], "system": [150, 165, 234, 409, 436, 461, 493], "33": [150, 493], "18518": 150, "18529": 150, "openvinotoolkit": 150, "nncf": 150, "develop": [150, 354, 414, 415, 452, 455, 456, 458, 464, 475, 479, 480, 483, 486], "hessian_trac": 150, "compare_weight": 150, "float_dict": 150, "ani": [150, 286, 288, 331, 339, 341, 371, 376, 392, 396, 406, 409, 413, 414, 418, 421, 444, 458, 463, 476, 479, 486], "quantized_dict": 150, "compar": [150, 290, 343, 409, 443, 454, 479, 482, 484, 486, 488, 490], "being": [150, 286, 339, 421], "wt_compare_dict": 150, "float_model": 150, "state_dict": [150, 444, 484, 488], "qmodel": 150, "compute_error": 150, "state": [150, 179, 421, 461, 479], "weight_dict": 150, "hawq_top": 150, "enable_act": 150, "modul": [151, 181, 188, 295, 301, 311, 312, 415, 438, 442, 451, 454, 455, 457, 479, 481, 483, 484, 488, 491], "ipex_mixed_precis": 152, "example_input": [152, 155, 157, 158, 159, 200, 201, 280, 446], "fakeaffinetensorquantfunct": 153, "affin": [153, 482], "teqlinearfakequ": 153, "orig_lay": 153, "group_siz": [153, 158, 159, 395, 484], "teqmullinear": 153, "input_scal": 153, "trainabl": [153, 157], "teq": [153, 484], "detector": 154, "transformerbasedmodelblockpatterndetector": 154, "pattern_lst": 154, "block_pattern": 154, "detect": [154, 158, 178, 200, 201, 286, 290, 339, 343, 348, 415, 458, 465, 466, 479, 490], "ffn": [154, 189], "get_modul": 155, "set_modul": [155, 158], "new_modul": [155, 158], "torchsmoothqu": [155, 487], "q_func": [155, 204, 205, 248, 249, 322, 325, 327, 328, 378, 381, 382, 386, 388, 389, 419, 455, 490], "traced_model": [155, 156], "whose": [155, 163, 180, 314, 450, 487, 490], "could": [155, 163, 180, 204, 205, 218, 248, 249, 262, 319, 344, 377, 398, 413, 415, 443, 455, 478, 479, 482, 484, 487, 491], "absorb": [155, 159, 163], "later": [155, 163, 488], "graphtrac": 155, "trace_and_fuse_sub_graph": 156, "is_qat": 156, "tequant": 157, "absorb_to_lay": [157, 159], "extra_config": [157, 159], "get_embedding_contigu": 158, "contigu": 158, "is_fused_modul": 158, "_propagate_qconfig_help": 158, "collate_torch_pr": 158, "fetch": [158, 162, 209, 253, 420, 439], "collate_result": 158, "input2tupl": 158, "append_attr": 158, "fx_model": 158, "fx_white_list": 158, "append": [158, 319, 322, 381, 415, 443, 455, 478], "graphmodul": [158, 415, 483], "addit": [158, 201, 398, 420, 421, 442, 469, 485, 490], "dir": [158, 216, 260, 408, 439, 447, 450], "generate_activation_observ": 158, "observ": [158, 421, 486, 488, 490], "what": [158, 185, 214, 258, 343, 377, 398, 413, 480], "check_cfg_and_qconfig": 158, "op_infos_from_cfg": 158, "output_tensor_ids_op_nam": 158, "paser_cfg": 158, "ops_nam": 158, "get_quantizable_ops_from_cfg": 158, "input_tensor_ids_op_nam": 158, "update_sq_scal": 158, "ipex_config_path": 158, "smoothquant_scale_info": 158, "ipex_config": 158, "json": [158, 217, 233, 261, 275, 439, 457, 476, 484, 489], "temporari": [158, 409, 413], "auto_copi": 158, "fetch_modul": 158, "op_nam": [158, 197, 200, 201, 333, 394, 409, 410, 420, 455, 479, 488], "simple_infer": 158, "get_example_input": 158, "example_inp": 158, "get_fallback_ord": 158, "confidence_batch": [158, 490], "fallback": [158, 201, 325, 326, 384, 386, 387, 446, 456, 483, 490], "requantize_cfg": 158, "fall": 158, "back": [158, 233, 239, 275, 441, 475], "order": [158, 283, 284, 319, 322, 325, 334, 336, 337, 381, 386, 395, 415, 441, 454, 481, 487, 488, 490], "confid": 158, "ordered_op": 158, "get_mse_order_per_fp32": 158, "mse": [158, 159, 200, 201, 282, 290, 324, 335, 343, 377, 385, 409, 441, 454, 481, 484, 485], "influenc": [158, 479], "last": [158, 174, 196, 200, 201, 438, 456, 458, 460, 465, 469, 482, 487], "fallback_ord": 158, "get_mse_order_per_int8": 158, "get_torch_vers": 158, "match_datatype_pattern": 158, "calculate_quant_min_max": 158, "unsign": [158, 334, 395, 421], "qmin": 158, "qmax": 158, "get_depth": 158, "depth": [158, 442, 483], "get_dict_at_depth": 158, "target_depth": 158, "nest": [158, 198], "get_element_under_depth": 158, "ops_lst": 158, "get_op_type_by_nam": 158, "quantizable_op": 158, "collect_weight_info": 158, "fc": [158, 201], "rtn": [158, 484], "param": [158, 165, 206, 234, 240, 250, 290, 322, 343, 381, 409, 419, 457, 490], "configu": 158, "_type_": 158, "qdq_weight_asym": 159, "quantil": [159, 490], "return_int": 159, "clip": [159, 484, 487], "choos": [159, 218, 262, 451, 463, 480, 485, 487, 490, 492], "qdq_weight_sym": 159, "full_rang": 159, "rang": [159, 219, 220, 233, 263, 264, 275, 396, 398, 418, 419, 421, 437, 439, 441, 442, 443, 444, 455, 478, 479, 482, 484, 487, 489], "amax": 159, "qdq_weight_actor": 159, "quant_weight": 159, "group": [159, 193, 300, 451, 479, 484, 488, 489, 490, 493], "how": [159, 166, 174, 180, 186, 187, 192, 200, 201, 233, 275, 276, 313, 414, 415, 417, 419, 438, 439, 442, 443, 444, 450, 454, 455, 469, 470, 473, 474, 475, 479, 480, 482, 487, 489, 490, 491, 492], "mani": [159, 343, 377, 438, 452, 484, 490, 492], "element": [159, 182, 183, 196, 214, 258, 286, 313, 339, 409, 439, 451, 454, 479, 484, 487], "zp": [159, 487], "rtn_quantiz": 159, "32": [159, 176, 395, 444, 450, 484, 487, 493], "sym_full_rang": 159, "nearst": 159, "num": [159, 409, 438], "configir": 159, "fc2": 159, "int32": [159, 439, 484], "gptq_quantiz": 159, "get_module_input_output": 159, "module_hook_config": 159, "calib_func": [159, 377, 483], "help": [159, 242, 292, 457, 458, 464, 475, 484, 490, 491], "module_name_list": 159, "requir": [159, 200, 201, 207, 319, 352, 376, 415, 419, 420, 436, 437, 438, 441, 443, 444, 448, 455, 456, 457, 459, 469, 475, 479, 482, 484, 485, 486, 487, 488, 490, 492], "fc1": 159, "input_valu": 159, "output_valu": 159, "awq_quant": 159, "absorb_dict": 159, "n_sampl": 159, "auto_scal": [159, 484], "mse_rang": [159, 484], "n_block": [159, 484], "5": [159, 163, 167, 200, 201, 220, 229, 235, 264, 272, 290, 343, 377, 419, 439, 446, 448, 454, 455, 479, 481, 482, 484, 487, 489, 490, 492, 493], "awq": [159, 484], "absorb_lay": 159, "absorbed_lay": 159, "fc3": 159, "salient": [159, 479], "oom": 159, "teq_quant": 159, "algorithm_registri": 160, "algorithm_typ": 160, "locat": [160, 196, 233, 275, 444, 461, 468, 472, 475, 482, 485, 489, 492], "registr": [160, 218, 225, 233, 262, 269, 275, 308], "algorithmschedul": 160, "conf": [160, 165, 166, 201, 204, 205, 234, 248, 249, 292, 299, 300, 302, 303, 304, 305, 310, 322, 325, 327, 328, 332, 344, 354, 377, 378, 381, 382, 386, 388, 389, 393, 396, 398, 415, 416, 418, 421, 436, 442, 449, 450, 455, 456, 457, 478, 482, 483, 484, 486, 487, 490], "control": [160, 200, 201, 415, 455, 479, 490], "phase": [160, 416, 455, 479, 482, 483, 490], "fastbiascorrect": [161, 164], "fast_bias_correct": [162, 200, 201, 335, 482], "weight_correct": [162, 200, 201, 335, 482], "kernel": [163, 200, 201, 419, 420, 490], "futur": [163, 204, 205, 236, 248, 249, 451, 455, 466, 491], "weightcorrect": 164, "1e": [164, 487, 492], "05": [164, 201, 290, 343, 454, 487, 493], "evalu": [165, 166, 180, 200, 204, 205, 216, 234, 248, 249, 260, 276, 283, 286, 287, 288, 290, 292, 336, 339, 340, 341, 343, 344, 354, 377, 398, 401, 416, 419, 420, 439, 442, 443, 450, 451, 454, 455, 456, 458, 464, 466, 469, 475, 477, 479, 482, 486, 488, 490, 492], "set_env_var": [165, 234], "env_var": [165, 234], "overwrite_exist": [165, 234], "env": [165, 234, 447], "alreadi": [165, 218, 232, 234, 262, 274, 419, 439, 451, 470, 473, 490], "set_all_env_var": [165, 234], "physic": [165, 234, 413, 436], "core": [165, 200, 201, 234, 436, 453, 468, 472, 493], "get_architectur": [165, 234], "architectur": [165, 234, 293, 296, 418, 436, 442, 455, 479, 480, 484, 491], "get_threads_per_cor": [165, 234], "thread": [165, 200, 201, 234, 371, 376, 438], "get_thread": [165, 234], "get_physical_id": [165, 234], "socket": [165, 234, 409, 493], "get_core_id": [165, 234], "id": [165, 232, 234, 274, 283, 285, 286, 287, 288, 336, 338, 339, 340, 341, 454, 486, 490], "get_bounded_thread": [165, 234], "core_id": [165, 234], "bind": [165, 234], "run_inst": 165, "b_dataload": [165, 200, 201, 436, 455], "b_func": [165, 436], "benchmarkconfig": [165, 200, 201, 436, 441, 455], "accuraci": [165, 196, 200, 201, 204, 205, 248, 249, 276, 281, 290, 305, 310, 318, 343, 344, 354, 377, 382, 396, 398, 406, 415, 418, 420, 421, 437, 438, 439, 441, 443, 444, 445, 446, 454, 455, 466, 475, 477, 478, 479, 480, 481, 484, 485, 486, 487, 488, 491, 492, 493], "goal": [165, 276, 281, 305, 310, 318, 344, 377, 420, 438, 478, 482, 490], "prefer": [165, 281, 318, 377, 479, 484], "space": [165, 171, 172, 186, 187, 192, 200, 201, 204, 205, 248, 249, 281, 288, 293, 296, 297, 298, 318, 322, 325, 332, 341, 344, 377, 381, 386, 393, 413, 414, 416, 419, 420, 421, 479, 482, 492], "etc": [165, 166, 232, 274, 276, 281, 288, 305, 310, 318, 341, 344, 377, 408, 442, 451, 479, 486, 490], "user": [165, 178, 190, 196, 200, 201, 204, 205, 218, 221, 225, 233, 234, 240, 245, 248, 249, 262, 265, 269, 275, 281, 305, 310, 316, 318, 319, 343, 344, 354, 377, 382, 395, 398, 409, 415, 416, 418, 419, 420, 421, 426, 436, 438, 442, 443, 446, 448, 451, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 466, 469, 475, 477, 478, 479, 480, 482, 483, 485, 487, 488, 489, 490, 494], "generate_prefix": 165, "core_list": 165, "command": [165, 234, 398, 441, 444, 458, 460, 463, 468, 472, 476], "numactl": [165, 447, 461, 469], "call_on": 165, "cmd": [165, 476], "log_fil": [165, 370, 375], "window": [165, 436, 475, 476], "config_inst": 165, "raw_cmd": 165, "multi": [165, 176, 178, 189, 286, 339, 343, 377, 416, 438, 439, 451, 455, 477, 479, 482, 490], "trigger": [165, 185, 315, 414], "raw": [165, 217, 221, 224, 261, 265, 268, 325, 386, 454, 490], "summary_benchmark": 165, "summari": [165, 398, 441, 470, 473, 488, 493], "profil": [165, 335], "benchmark_with_raw_cmd": 165, "commend": 165, "fit_with_raw_cmd": 165, "cores_per_inst": [165, 200, 201, 436, 455, 481], "num_of_inst": [165, 200, 201, 436, 455, 481], "test": [165, 200, 201, 233, 275, 414, 418, 441, 452, 493], "fit": [165, 180, 200, 201, 322, 344, 377, 381, 396, 398, 415, 418, 436, 438, 439, 441, 444, 449, 450, 454, 455, 456, 457, 479, 482, 483, 484], "pb": [165, 200, 201, 344, 352, 377, 418, 436, 444, 449, 455, 457, 488, 493], "eval_dataload": [165, 200, 201, 204, 205, 248, 249, 319, 322, 325, 327, 328, 344, 377, 378, 381, 382, 386, 388, 389, 398, 436, 450, 454, 455, 482, 490], "compon": [166, 276, 282, 319, 335, 415, 441, 444, 452, 453, 458, 475, 478], "quantizationawaretrainingcallback": 166, "pruningcallback": 166, "distillationcallback": 166, "basecallback": 166, "design": [166, 215, 238, 243, 259, 343, 382, 416, 418, 455, 463, 466, 479, 482, 491], "mainli": [166, 194, 243, 317, 455, 479, 482], "prune": [166, 174, 175, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 200, 201, 243, 244, 282, 299, 300, 302, 303, 304, 308, 310, 311, 313, 314, 315, 317, 319, 335, 409, 418, 444, 445, 448, 449, 451, 478, 480, 491, 492], "distil": [166, 173, 200, 201, 235, 242, 243, 282, 335, 418, 445, 449, 451, 478, 491, 492], "In": [166, 182, 183, 184, 189, 190, 191, 193, 201, 215, 243, 259, 286, 313, 315, 339, 354, 413, 415, 416, 418, 419, 420, 438, 439, 441, 442, 443, 444, 454, 455, 465, 468, 469, 472, 477, 478, 479, 482, 483, 484, 486, 487, 488, 489, 490, 491], "adaptor": [166, 200, 201, 334, 395, 401, 418, 421, 451, 483, 485, 487, 488, 491], "deriv": [166, 174, 182, 183, 184, 190, 191, 192, 193, 194, 195, 276, 313, 315, 317], "pipelin": [166, 276, 293, 294, 319, 443, 455, 478], "knowledg": [166, 167, 200, 201, 235, 276, 443, 445, 449, 451, 455, 457, 492], "transfer": [166, 223, 267, 276, 439, 442, 443, 455, 487], "teacher": [166, 200, 201, 276, 442, 443, 455, 493], "student": [166, 200, 201, 216, 242, 260, 276, 439, 442, 443, 493], "distillation_conf": [166, 197, 276], "_epoch_ran": [166, 276], "integ": [166, 184, 185, 200, 201, 276, 286, 290, 297, 313, 315, 339, 343, 396, 419, 421, 437, 482, 487, 490], "indic": [166, 200, 201, 209, 214, 216, 253, 258, 260, 276, 286, 297, 339, 415, 438, 447, 484, 488], "much": [166, 174, 200, 201, 233, 275, 276, 442, 469, 487, 489], "epoch": [166, 186, 187, 192, 276, 315, 398, 438, 442, 443, 444, 455, 478, 479, 492], "ran": [166, 276], "eval_frequ": [166, 276], "frequenc": [166, 185, 200, 201, 276, 315, 455, 479, 492], "term": [166, 186, 187, 192, 193, 276, 414, 437, 442, 453, 454, 477, 478, 490], "best_scor": [166, 276], "best": [166, 233, 275, 276, 281, 318, 325, 386, 413, 416, 452, 458, 464, 475, 477, 482, 484, 489, 490], "metric": [166, 200, 201, 204, 205, 237, 248, 249, 276, 281, 282, 297, 305, 310, 318, 319, 335, 344, 377, 398, 401, 416, 419, 420, 439, 441, 444, 455, 456, 482, 486, 488, 490, 491, 492, 493], "best_model": [166, 276, 484], "found": [166, 276, 418, 442, 456, 463, 487, 490, 493], "critet": [167, 235], "includ": [167, 174, 178, 180, 193, 195, 200, 201, 216, 218, 225, 233, 235, 260, 262, 269, 275, 281, 291, 313, 318, 396, 409, 413, 414, 419, 420, 421, 438, 439, 441, 452, 453, 454, 455, 458, 461, 464, 469, 479, 482, 483, 484, 488, 490], "tensorflowknowledgedistillationloss": [167, 235], "pytorchknowledgedistillationloss": [167, 235, 455], "pytorchintermediatelayersknowledgedistillationloss": [167, 235], "tensorflowcriterion": [167, 235], "pytorchcriterion": [167, 235], "criterion_registri": [167, 235], "criterion_typ": [167, 235], "registry_criterion": [167, 235], "knowledgedistillationframework": [167, 235], "student_model": [167, 201, 235, 455], "teacher_model": [167, 200, 201, 235, 442, 443, 455], "knowledgedistillationloss": [167, 235, 455, 492], "temperatur": [167, 200, 201, 235, 455, 492], "loss_typ": [167, 171, 200, 201, 235, 455, 492], "ce": [167, 200, 201, 235, 455, 492], "loss_weight": [167, 200, 201, 235, 455, 492], "pytorchknowledgedistillationlosswrapp": [167, 235], "param_dict": [167, 235, 240], "tensorflowknowledgedistillationlosswrapp": [167, 235], "tensorflowknowledgedistillationlossextern": [167, 235], "intermediatelayersknowledgedistillationloss": [167, 235], "layer_map": [167, 201, 235, 442], "add_origin_loss": [167, 201, 235], "pytorch": [167, 178, 181, 184, 185, 188, 200, 201, 215, 216, 218, 221, 225, 233, 235, 240, 242, 259, 260, 262, 265, 269, 275, 280, 281, 290, 291, 311, 313, 316, 318, 326, 335, 343, 344, 353, 377, 387, 402, 409, 415, 416, 418, 419, 420, 421, 437, 438, 442, 443, 445, 448, 451, 452, 455, 456, 457, 458, 460, 463, 464, 465, 466, 475, 479, 480, 481, 484, 485, 487, 490, 492], "pytorchintermediatelayersknowledgedistillationlosswrapp": [167, 235], "selfknowledgedistillationloss": [167, 235], "selfknowledg": [167, 235], "pytorchselfknowledgedistillationloss": [167, 235], "pytorchselfknowledgedistillationlosswrapp": [167, 235], "hyper": [169, 492], "sa_optim": [169, 173], "simul": [170, 421], "anneal": 170, "register_search": 171, "searcher": [171, 178, 201, 298], "registri": [171, 172, 174, 180, 185, 193, 194, 195, 313, 315, 317, 416], "sure": [171, 180, 185, 194, 313, 315, 317, 436], "search_spac": [171, 197, 201, 293, 296, 297, 298], "gridsearch": [171, 298], "grid": [171, 201, 298, 416, 479], "whole": [171, 298, 421, 482, 493], "exhaust": [171, 201, 282, 298, 324, 335, 385, 481], "randomsearch": [171, 298], "randomli": [171, 233, 275, 298, 322, 381, 416, 487, 489, 490], "bayesianoptimizationsearch": [171, 298], "42": [171, 201, 298, 493], "bayesian": [171, 201, 282, 298, 324, 335, 385, 416, 479, 481], "xgbsearcher": 171, "higher_is_bett": [171, 200, 201, 343, 377, 490, 492], "reg": [171, 173, 175, 186, 187, 192, 201], "min_train_sampl": [171, 201], "10": [171, 200, 201, 218, 262, 322, 381, 418, 436, 439, 446, 452, 455, 479, 481, 489, 490, 493], "xgboost": [171, 479], "searchspac": 172, "factori": [172, 350, 357, 359, 364, 367, 369, 374], "actual": [172, 290, 343, 444, 487], "limit": [172, 322, 381, 409, 418, 441, 442, 484, 485, 488], "interv": [172, 191, 479], "descret": 172, "store": [172, 174, 178, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 200, 201, 218, 262, 308, 315, 450], "continu": [172, 183, 286, 313, 339, 416, 455, 476, 479, 491], "learning_r": [172, 200, 201, 455, 481, 492], "001": [172, 218, 262, 439, 444, 487, 492], "num_train_epoch": [172, 455, 479], "20": [172, 233, 275, 487, 489, 492, 493], "weight_decai": [172, 455, 492], "register_searchspac": 172, "pruner": [172, 173, 282, 299, 300, 301, 302, 303, 305, 310, 311, 313, 316, 335, 455, 479, 492], "basesearchspac": 172, "discretesearchspac": 172, "continuoussearchspac": 172, "hpo": [173, 204, 248, 479], "model_slim": [173, 175, 189], "auto_slim": [173, 175, 177], "pattern_analyz": [173, 175, 177], "weight_slim": [173, 175, 177, 189], "mha": [173, 175, 181, 188], "ninm": [173, 175, 181], "nxm": [173, 175, 181, 191, 200, 201, 309, 313, 479], "basic": [173, 175, 178, 180, 188, 200, 201, 232, 274, 282, 293, 313, 324, 328, 331, 335, 385, 389, 392, 398, 451, 452, 455, 481, 486], "block_mask": [173, 175, 188], "pattern_lock": [173, 175, 188, 200, 201, 282, 301, 335], "progress": [173, 175, 188, 218, 262, 469, 475, 479, 482], "retrain_fre": [173, 174, 175, 188], "criteria": [173, 175, 200, 201, 281, 305, 310, 313, 315, 318, 415, 475, 487], "schedul": [173, 175, 185, 186, 187, 192, 193, 200, 201, 282, 311, 315, 335, 455, 478], "tf_criteria": [173, 175], "callback": [173, 305, 310, 398, 401, 415, 455, 478, 479, 482], "register_criterion": [174, 195], "get_criterion": 174, "pruningcriterion": [174, 195], "about": [174, 195, 409, 413, 438, 455, 483, 490, 491, 493], "module_nam": [174, 185, 186, 187, 188, 190, 191, 192, 193, 195, 315, 409], "score": [174, 180, 185, 189, 195, 200, 201, 283, 284, 286, 287, 288, 290, 315, 336, 337, 339, 340, 341, 343, 384, 401, 415, 454, 477, 479, 486, 490], "magnitudecriterion": [174, 195], "magnitud": [174, 195, 200, 201, 282, 290, 301, 335, 343, 451, 479], "criterion_class": [174, 195], "determin": [174, 180, 185, 195, 200, 201, 403, 413, 415, 437, 479, 482, 487], "gradientcriterion": 174, "gradient": [174, 299, 451, 455, 479, 493], "absolut": [174, 200, 201, 290, 343, 454, 455, 479, 482, 490], "snipcriterion": 174, "snip": [174, 200, 201, 315, 451, 479, 493], "product": [174, 418, 451, 456, 458, 459, 475, 480, 482, 486, 490], "singl": [174, 194, 200, 201, 209, 216, 233, 253, 260, 275, 286, 315, 317, 339, 343, 377, 415, 439, 441, 452, 479], "shot": [174, 192, 194, 243, 315, 317, 416, 451, 455, 479, 480], "connect": [174, 315, 475, 479, 486], "sensit": [174, 299, 315, 451, 479], "1810": [174, 315], "02340": [174, 315], "snipmomentumcriterion": 174, "snip_momentum": [174, 200, 201, 455, 479], "momentum": [174, 315, 451, 455, 479, 492], "mechan": [174, 479, 486, 491], "preserv": [174, 437], "step": [174, 184, 185, 186, 187, 191, 192, 194, 200, 201, 313, 315, 317, 398, 420, 421, 441, 442, 443, 444, 455, 470, 473, 475, 478, 479, 481, 483, 484, 486, 487, 488, 490], "beta": 174, "snipmomentumblockcriterion": 174, "9": [174, 200, 201, 415, 452, 455, 479, 481, 487, 490, 492, 493], "snip_momentum_block": 174, "retrainfreecriterion": 174, "auto": [176, 178, 200, 201, 320, 335, 379, 385, 409, 415, 437, 458, 461, 463, 465, 466, 479, 482, 484], "slim": [176, 177, 178, 286, 339, 350, 352, 457, 479], "round_multipli": 176, "spars": [176, 190, 315, 439, 480], "automat": [176, 178, 179, 200, 201, 218, 221, 228, 229, 262, 265, 272, 281, 291, 318, 415, 418, 436, 439, 451, 455, 456, 458, 460, 463, 464, 466, 468, 469, 470, 472, 473, 475, 478, 479, 482, 487, 489, 490], "model_slim_ffn2": 176, "some": [176, 178, 200, 201, 216, 260, 314, 420, 421, 439, 441, 446, 452, 454, 455, 477, 479, 482, 483, 484, 487, 488, 490, 491, 493], "part": [176, 185, 313, 315, 415, 452, 456, 470, 473, 479, 487, 491], "perman": [176, 413, 479], "obtain": [176, 178, 187, 192, 193, 196, 314, 415, 420, 479, 486, 487, 490], "acceler": [176, 418, 442, 455, 458, 466, 475, 479, 480, 483, 484, 487, 490], "directli": [176, 200, 201, 215, 259, 286, 290, 314, 339, 343, 454, 455, 462, 479, 481, 482, 488], "sprase": 176, "multipl": [176, 200, 201, 202, 203, 207, 208, 216, 217, 219, 220, 221, 222, 223, 227, 230, 233, 240, 246, 247, 251, 252, 254, 260, 261, 263, 264, 265, 266, 267, 271, 273, 275, 291, 344, 345, 346, 348, 354, 436, 439, 446, 455, 478, 479, 486, 487, 490], "model_slim_mha": 176, "parse_auto_slim_config": 176, "ffn2_sparsiti": 176, "mha_spars": 176, "generate_ffn2_pruning_config": 176, "consecut": [176, 178, 179, 479], "generate_mha_pruning_config": 176, "head": [176, 178, 182, 189, 196, 479, 493], "get_attribut": 178, "level": [178, 382, 396, 405, 413, 487, 490], "descent": 178, "get_common_modul": 178, "layer1": [178, 200, 201, 455, 479, 482], "layer2": [178, 455, 479, 482], "nearest": [178, 233, 275, 484, 489], "father": 178, "print_iter": 178, "recipesearch": 178, "root": [178, 216, 217, 218, 221, 260, 261, 262, 265, 290, 343, 439, 444, 454, 455, 492], "levelwis": 178, "wai": [178, 217, 218, 221, 261, 262, 265, 416, 421, 438, 439, 441, 454, 455, 458, 461, 476, 478, 479, 482, 484, 487, 490, 492], "huggingfac": [178, 189, 216, 260, 404, 439, 445, 449, 463, 464, 465, 466, 487, 493], "bert": [178, 201, 212, 215, 216, 233, 256, 259, 260, 275, 418, 439, 442, 454, 456, 463, 479, 489, 493], "recipe_sampl": 178, "bertattent": 178, "dens": [178, 194, 200, 201, 317, 479, 493], "infom": [178, 236], "searching_result": 178, "jitbasicsearch": 178, "placeholder_shap": 178, "placeholder_dtyp": 178, "By": [178, 200, 201, 283, 336, 420, 421, 454, 457, 468, 469, 472, 480, 490], "jit": [178, 200, 458, 460, 465, 487, 488], "script": [178, 283, 284, 287, 288, 336, 337, 340, 341, 444, 451, 458, 462, 465, 466, 469, 480], "them": [178, 216, 260, 415, 421, 438, 441, 446, 448, 450, 478, 479, 484, 490], "static_graph": 178, "flatten_static_graph": 178, "target_lay": 178, "linear2linearsearch": 178, "target_op_lut": 178, "lookup": 178, "tabl": [178, 189, 409, 421, 441, 446, 493], "code": [178, 204, 205, 234, 248, 249, 292, 316, 319, 377, 398, 415, 418, 419, 420, 421, 439, 442, 443, 444, 450, 451, 453, 454, 458, 460, 462, 463, 464, 466, 469, 475, 477, 478, 479, 480, 481, 482, 486, 487, 488, 489], "current_pattern": 178, "statu": [178, 406, 413, 438, 477, 479], "selfmhasearch": 178, "classifierheadsearch": 178, "final": [178, 185, 196, 315, 420, 455, 461, 477, 479, 482, 485, 490], "classifi": [178, 196, 216, 260, 290, 343, 439, 442], "classifierheadsearchertf": 178, "squeezer": 179, "postcompressionutil": 179, "librari": [179, 237, 282, 335, 371, 411, 414, 418, 452, 455, 456, 460, 469, 475, 480, 482], "relat": [179, 193, 276, 286, 305, 310, 313, 339, 395, 401, 421, 458, 479, 492], "linearcompress": 179, "root_linear": 179, "target_linear": 179, "also": [179, 215, 218, 233, 259, 262, 275, 283, 336, 343, 354, 377, 414, 416, 419, 420, 421, 438, 441, 445, 449, 451, 454, 455, 458, 463, 468, 469, 472, 475, 476, 477, 479, 480, 482, 483, 487, 490], "while": [179, 190, 196, 315, 322, 381, 419, 420, 439, 445, 451, 456, 458, 463, 475, 481, 482, 484, 487], "hidden": [179, 184, 313, 419], "layer_1": 179, "act_fn": 179, "layer_2": 179, "linearcompressioniter": 179, "linear_pattern": 179, "register_pattern": [180, 313], "basepattern": [180, 182, 184], "unit": [180, 313, 414, 479], "e": [180, 200, 201, 413, 442, 445, 449, 458, 463, 464, 468, 472, 479, 484, 487, 490], "4x1": [180, 200, 201, 309, 455, 479, 493], "is_glob": [180, 313], "local": [180, 200, 201, 313, 409, 468, 472, 479, 486], "contrast": [180, 313, 489], "keep_mask_lay": 180, "invalid_lay": 180, "max_sparsity_ratio_per_op": [180, 185, 197, 200, 201, 455, 479], "sparsiti": [180, 182, 183, 185, 186, 187, 190, 192, 194, 196, 200, 201, 315, 317, 409, 418, 439, 451, 455, 491, 493], "reach": [180, 194, 200, 201, 317, 414, 418, 438, 479, 490], "min_sparsity_ratio_per_op": [180, 197, 200, 201, 455, 479], "minimum": [180, 200, 201, 421, 437, 441, 455, 466, 479, 490], "target_spars": [180, 197, 200, 201, 455, 479, 481, 492], "pytorchbasepattern": [180, 193], "kerasbasepattern": 180, "get_pattern": [181, 313], "assertionerror": [181, 188, 196, 313, 314, 315, 344], "patternmha": 182, "doc": [182, 183, 200, 201, 313, 331, 332, 343, 377, 392, 393, 396, 409, 454, 455, 470, 473], "md": [182, 183, 200, 201, 313, 343, 377, 420, 437, 444, 482], "n": [182, 183, 200, 201, 217, 233, 261, 275, 284, 313, 337, 396, 421, 439, 441, 442, 479, 482, 484, 487, 489], "pytorchpatternninm": 183, "out": [183, 200, 201, 216, 217, 218, 260, 261, 262, 281, 313, 318, 414, 415, 418, 439, 458, 463, 468, 469, 470, 472, 473, 475, 479, 481, 482, 484], "pytorchpatternnxm": 184, "kept": [184, 313], "block_siz": [184, 313], "height": [184, 229, 233, 272, 275, 313, 444, 489, 492], "width": [184, 229, 233, 272, 275, 313, 437, 444, 479, 482, 489, 492], "vertic": [184, 233, 275, 313, 489], "becaus": [184, 189, 233, 275, 313, 415, 482, 487, 489, 490], "keraspatternnxm": 184, "register_prun": [185, 315], "baseprun": [185, 190, 192], "current_sparsity_ratio": [185, 315], "global_step": [185, 315], "total": [185, 233, 275, 290, 315, 343, 439, 441, 479, 489, 493], "start_step": [185, 197, 200, 201, 315, 455, 479, 481], "end_step": [185, 197, 200, 201, 315, 455, 479, 481], "pruning_frequ": [185, 197, 200, 201, 455, 479], "target_sparsity_ratio": [185, 315], "show": [185, 409, 413, 442, 444, 455, 461, 476, 487, 490, 491], "pytorchbaseprun": 185, "kerasbaseprun": 185, "pytorchbasicprun": 186, "arrang": [186, 187, 192, 217, 218, 221, 261, 262, 265, 439, 479], "proce": [186, 187, 192], "regul": [186, 187, 192], "kerasbasicprun": 186, "pytorchblockmaskprun": 187, "grad": [187, 192], "parse_valid_pruner_typ": 188, "get_prun": [188, 315], "cuurent": [188, 315], "pythonmultiheadattentionprun": 189, "mha_modul": 189, "partial": [189, 479, 482], "qkv": 189, "feedward": 189, "simultan": [189, 458, 478, 481], "qkv_name": 189, "query_layer_nam": 189, "key_layer_nam": 189, "value_layer_nam": 189, "ffn_name": 189, "attention_ffn_nam": 189, "mha_nam": 189, "keep": [189, 196, 314, 382, 415, 419, 474, 475, 485], "qkv_modul": 189, "ffn_modul": 189, "mha_compress": 189, "mhacompress": 189, "modifi": [189, 218, 245, 262, 376, 395, 415, 421, 444, 448, 479, 492], "linear_lay": 189, "independ": [189, 371, 376, 421], "length": [189, 200, 201, 216, 233, 260, 275, 286, 339, 418, 439, 454, 480, 482, 489], "4x": [189, 416, 482], "subsequ": [189, 420, 458, 475], "head_mask": 189, "mha_head_s": 189, "similar": [189, 455, 481, 487, 490, 492], "mha_scor": 189, "lock": [190, 303, 304, 451, 478, 479], "pytorchpatternlockprun": 190, "parent": [190, 191, 194, 309, 315, 317, 488], "pytorchprogressiveprun": 191, "basicprun": 191, "interpol": [191, 233, 275, 454, 479, 489], "fine": [191, 216, 260, 439, 461, 479, 480, 482], "grain": [191, 479, 480, 490], "improv": [191, 414, 437, 455, 458, 475, 476, 479, 480, 482, 483, 484, 490, 491, 493], "ad": [191, 216, 260, 283, 322, 336, 381, 420, 421, 441, 456, 458, 463, 466, 470, 473, 479, 488], "retrain": [192, 443, 479], "pytorchretrainfreeprun": 192, "pruner_class": 192, "rearrang": 192, "fast": [192, 200, 201, 418, 480], "retrainfreeprun": 192, "effect": [192, 419, 480], "2204": 192, "09656": 192, "regular": [193, 283, 314, 336], "register_reg": 193, "regulariz": 193, "get_reg_typ": 193, "get_reg": 193, "basereg": 193, "grouplasso": 193, "coeff": 193, "lasso": [193, 300, 451, 479], "select": [193, 201, 216, 260, 415, 416, 437, 451, 452, 475, 479, 482, 484, 488, 490], "reg_term": 193, "coeffient": 193, "register_schedul": [194, 317], "get_schedul": [194, 317], "pruningschedul": 194, "gradual": [194, 317, 479], "oneshotschedul": [194, 317], "iterativeschedul": [194, 317], "get_tf_criterion": 195, "get_sparsity_ratio": 196, "elementwise_over_matmul_gemm_conv": 196, "elementwise_over_al": 196, "blockwise_over_matmul_gemm_conv": 196, "get_sparsity_ratio_tf": 196, "check_config": [196, 314], "prune_config": [196, 314], "everyth": [196, 314, 463], "reset_none_to_default": 196, "undefin": [196, 314], "update_param": 196, "process_weight_config": 196, "global_config": [196, 299, 300, 302, 303, 304], "local_config": [196, 200, 201, 299, 300, 302, 303, 304], "default_config": 196, "pruners_info": 196, "process_yaml_config": 196, "check_key_valid": 196, "template_config": 196, "user_config": 196, "process_and_check_config": [196, 314], "process_config": [196, 314], "parse_last_linear": 196, "often": [196, 438, 442, 478, 479], "act": [196, 214, 258, 413], "might": [196, 415, 490], "caus": [196, 420, 438, 459, 479, 484], "drop": [196, 286, 314, 339, 455, 456, 469, 479, 484, 493], "parse_last_linear_tf": 196, "parse_to_prun": [196, 314], "parse_to_prune_tf": 196, "generate_pruner_config": 196, "dotdict": [196, 197, 201, 354, 409], "prunerv2": 197, "pruning_typ": [197, 200, 201, 455, 479], "pruning_scop": [197, 200, 201, 455, 479], "sparsity_decay_typ": [197, 200, 201, 455, 479], "pruning_op_typ": [197, 200, 201, 455, 479], "reg_typ": 197, "criterion_reduce_typ": 197, "resume_from_pruned_checkpoint": 197, "similiar": 197, "cfg_fname": 197, "parser": 197, "quantization_conf": 197, "pruning_conf": 197, "graph_optimization_conf": [197, 281], "mixedprecision_conf": 197, "benchmark_conf": 197, "nasconfig": [197, 201, 294, 296, 416], "approach": [197, 200, 201, 293, 294, 296, 415, 416, 437, 439, 442, 451, 455, 463, 475, 480, 481, 484, 490, 492], "search_algorithm": [197, 201, 282, 295, 335, 416], "na": [197, 201, 282, 335, 348, 451, 493], "procedur": [197, 416, 479], "deep_get": [198, 354], "dot": [198, 456, 482], "eg": [198, 218, 262, 439, 481], "person": [198, 413, 480], "john": 198, "deep": [198, 418, 419, 420, 438, 451, 452, 455, 456, 458, 460, 463, 464, 466, 469, 475, 480, 482, 490, 491, 493], "deep_set": [198, 354], "sex": [198, 413], "male": 198, "instead": [198, 201, 215, 259, 409, 461, 463, 466, 479], "notat": [198, 201, 409], "pythonic_config": 199, "random_se": [200, 201, 322, 381, 455, 492], "1978": [200, 201], "workspac": [200, 201, 408, 409, 457], "default_workspac": [200, 201], "resume_from": [200, 201, 409], "tensorboard": [200, 201, 401, 409, 419, 455], "set_random_se": [200, 201, 409], "set_workspac": [200, 201, 409], "set_resume_from": [200, 201, 409], "set_tensorboard": [200, 201, 409], "directori": [200, 201, 217, 218, 261, 262, 352, 404, 406, 408, 409, 439, 444, 447, 468, 470, 472, 473, 488], "histori": [200, 201, 408, 409, 475, 490], "nc_workspac": [200, 201], "datetim": [200, 201], "now": [200, 201, 233, 275, 415, 416, 421, 439, 444, 466, 481, 489, 490], "strftime": [200, 201], "d_": [200, 201], "h": [200, 201, 233, 275, 444, 489], "resum": [200, 201, 204, 205, 248, 249, 327, 328, 378, 381, 382, 386, 388, 389], "wa": [200, 201, 419, 455, 480, 490], "flag": [200, 201, 284, 337, 441], "visual": [200, 201, 418, 466, 475, 486, 488, 490, 491], "displai": [200, 201, 331, 332, 392, 393, 409, 475], "2022": [200, 201, 418, 453, 484, 487, 493], "workspace_path": [200, 201], "accuracycriterion": [200, 201, 455, 490], "rel": [200, 201, 354, 455, 481, 490, 492, 493], "tolerable_loss": [200, 201, 455, 490], "01": [200, 201, 455, 481, 484, 490, 492, 493], "higher": [200, 201, 204, 205, 248, 249, 297, 344, 377, 398, 415, 441, 442, 446, 454, 479, 482, 486], "accept": [200, 201, 396, 413, 436, 438], "accuracy_criterion": [200, 201, 354, 455, 477, 481, 490, 492], "avail": [200, 201, 348, 422, 424, 428, 431, 434, 445, 447, 449, 451, 468, 472, 479, 490, 493], "warmup": [200, 201, 436, 455, 481], "inter_num_of_thread": [200, 201, 371, 376, 455, 481], "intra_num_of_thread": [200, 201, 371, 376, 455, 481], "benchmark": [200, 201, 236, 282, 319, 335, 354, 409, 418, 426, 457, 458, 462, 466, 469, 475, 490, 491, 492, 493], "empti": [200, 201, 461], "onnxrt_trt_ep": [200, 201, 456, 482], "onnxrt_cuda_ep": [200, 201, 456, 482], "inter": [200, 201, 214, 218, 258, 262], "intra": [200, 201], "quantizationconfig": 200, "post_training_static_qu": [200, 439, 455, 481, 490], "calibration_sampling_s": [200, 201, 455], "op_type_dict": [200, 201, 421, 481, 482, 484, 490], "op_name_dict": [200, 201, 441, 455, 482, 490], "strategy_kwarg": [200, 201, 486, 490], "timeout": [200, 201, 455, 481, 490, 492], "max_trial": [200, 201, 455, 490], "quant_level": [200, 201, 490], "posttrainingquantconfig": [200, 201, 377, 415, 418, 421, 438, 441, 446, 449, 454, 455, 457, 482, 483, 484, 486, 487, 490], "quantizationawaretrainingconfig": [200, 201, 398, 415, 443, 446, 455, 482, 483, 490], "cv": [200, 201, 479], "object_detect": [200, 201, 286, 339], "nlp": [200, 201, 316, 463, 479, 482], "recommendation_system": [200, 201], "explicitli": [200, 201, 450, 479], "overrid": [200, 201, 409], "quantiztaion": [200, 201], "smooth_quant_arg": [200, 201, 482, 487], "gemm_to_matmul": [200, 201, 482], "graph_optimization_level": [200, 201, 481, 482], "disable_al": [200, 201, 481], "enable_bas": [200, 201], "enable_extend": [200, 201], "enable_al": [200, 201], "first_conv_or_matmul_quant": [200, 201, 482], "last_conv_or_matmul_quant": [200, 201, 482], "pre_post_process_quant": [200, 201, 482], "preprocess": [200, 201, 216, 233, 260, 275, 395, 401, 444, 489], "postprocess": [200, 201, 227, 230, 233, 237, 275, 282, 335, 343, 377, 401, 419, 455, 488, 489], "vaild": [200, 201], "dedic": [200, 201], "quant_format": [200, 201, 280, 446], "constraint": [200, 201, 281, 318, 455, 479, 486, 490, 492], "conv1": [200, 201, 482, 492], "tuning_strategi": [200, 201], "guarante": [200, 201, 455], "models": [200, 201, 354, 455, 477, 481], "footprint": [200, 201, 281, 305, 310, 318, 354, 443, 455, 477, 479, 481], "earli": [200, 201, 455, 482, 490, 492], "stop": [200, 201, 455, 490, 491, 492], "field": [200, 201, 218, 262, 286, 339, 415, 419, 421, 444, 455, 486, 490, 492], "exit": [200, 201, 321, 378, 380, 455, 492], "excluded_precis": [200, 201, 483], "exclud": [200, 201, 419, 437, 483], "conserv": [200, 201, 335, 385], "use_distributed_tun": 200, "weightpruningconfig": [200, 201, 245, 455, 478, 479], "pruning_config": [200, 201, 455], "98": [200, 201, 455, 479, 481, 493], "exp": [200, 201, 455, 479], "link": [200, 201, 216, 260, 343, 377, 437, 439, 446, 468, 472, 475, 493], "90": [200, 201, 492, 493], "magnitude_progress": [200, 201], "snip_progress": [200, 201], "snip_momentum_progress": [200, 201], "most": [200, 201, 290, 343, 441, 455, 456, 479, 482, 484, 487, 490, 493], "feasibl": [200, 201], "situat": [200, 201, 444, 479], "unstructur": [200, 201, 309, 451, 479, 493], "8x1": [200, 201], "channelx1": [200, 201, 479], "1xchannel": [200, 201, 479], "itrex": [200, 201], "start": [200, 201, 233, 275, 286, 339, 382, 452, 480, 489, 490, 491, 494], "togeth": [200, 201, 233, 275, 442, 452, 462, 480, 488, 489], "sort": [200, 201, 325, 386, 441, 490], "sinc": [200, 201, 281, 283, 305, 310, 318, 336, 442, 446, 452, 454, 469, 475, 478, 484, 485], "lead": [200, 201, 442, 455, 456, 479, 484, 487], "increas": [200, 201, 440, 451, 458, 475, 490], "cube": [200, 201, 479], "6": [200, 201, 418, 448, 482, 487, 490, 493], "update_config": [200, 201], "knowledgedistillationlossconfig": [200, 201, 442, 443, 455, 478], "hyperparamet": [200, 201, 331, 486, 487, 490], "entropi": [200, 201, 437, 490], "groundtruth": [200, 201, 286, 339], "label": [200, 201, 204, 205, 216, 218, 219, 220, 221, 224, 229, 233, 238, 248, 249, 260, 262, 263, 264, 265, 268, 272, 275, 283, 285, 290, 336, 338, 343, 344, 377, 398, 415, 438, 439, 441, 454, 455, 482, 489], "tpye": [200, 201], "sum": [200, 201, 290, 343, 441, 442], "distillationconfig": [200, 201, 398, 442, 443, 455, 478], "prepare_compress": [200, 201, 398, 415, 442, 443, 455, 478, 479, 482], "criterion_conf": [200, 201], "d_conf": [200, 201, 443, 455, 478], "compression_manag": [200, 201, 398, 415, 442, 443, 455, 478, 479, 482], "sgd": [200, 201, 240, 442, 455, 481, 492], "callabl": [200, 201, 288, 341, 398, 438], "featur": [200, 201, 216, 217, 229, 233, 260, 261, 272, 275, 414, 418, 436, 438, 440, 442, 455, 456, 457, 458, 462, 463, 466, 475, 479, 480, 485, 489], "altern": [200, 201, 377], "distil_loss": [200, 201, 455], "crossentropyloss": [200, 201, 235, 442, 455], "lr": [200, 201, 442, 444, 455], "onnxrt_dnnl_ep": [201, 456, 482], "tuningcriterion": [201, 455, 477, 486, 490], "tuning_criterion": [201, 455, 477, 486, 490], "weight_onli": [201, 484], "ptq": [201, 377, 415, 441, 444, 451, 455, 482, 487, 488, 490], "tri": [201, 490], "meet": [201, 207, 319, 321, 378, 380, 415, 420, 477, 480, 481, 482, 484, 488, 490], "mse_v2": [201, 282, 324, 335, 385], "hawq_v2": [201, 335, 385], "docstr": [201, 396], "copi": [201, 314, 409, 438], "deepcopi": 201, "model_origin": [201, 377, 483], "qat_op_name_dict": 201, "low_memory_usag": 201, "hpoconfig": 201, "xgb": 201, "bo": 201, "intermediatelayersknowledgedistillationlossconfig": [201, 442], "relationship": 201, "student_layer_nam": 201, "student_layer_output_process": 201, "teacher_layer_nam": 201, "teacher_layer_output_process": 201, "desir": [201, 229, 233, 272, 275, 420, 421, 489], "either": [201, 286, 339, 459, 463, 478, 481, 482], "serv": [201, 352], "numer": [201, 290, 343, 421, 456, 480, 482], "abbrevi": 201, "layer_nam": 201, "l1": 201, "selfknowledgedistillationlossconfig": [201, 442, 455], "student1_layer_name1": 201, "teacher_layer_name1": 201, "student2_layer_name1": 201, "student1_layer_name2": 201, "teacher_layer_name2": 201, "student2_layer_name2": 201, "soft": 201, "l2": [201, 479], "hard": [201, 438, 441], "resblock": 201, "deepst": 201, "02": [201, 487, 493], "mixedprecisionconfig": [201, 344, 396, 455, 456], "mixedprecis": [201, 291, 455], "fp16": [201, 332, 393, 482], "won": [201, 482], "work": [201, 281, 318, 417, 420, 438, 442, 470, 473, 483, 484, 485, 487, 488], "mix_precis": [201, 335, 396, 455, 456], "converted_model": [201, 344, 455, 456], "exportconfig": 201, "14": [201, 279, 280, 446, 452, 487, 493], "dynamic_ax": [201, 280, 446], "qlinear": [201, 218, 225, 262, 269, 290, 343, 419, 465], "ax": [201, 280], "onnxqlinear2qdqconfig": 201, "onnxqlinear2qdq": 201, "torch2onnxconfig": [201, 446], "torch2onnx": [201, 277, 282, 335], "qdq_op_fp32_bia": 201, "qdq_op_int32_bia": 201, "qdq_op_fp32_bias_qdq": 201, "resnet50": [201, 418, 441, 444, 446, 456, 458, 462, 479, 482, 486, 493], "int8_onnx_config": [201, 446], "randn": [201, 446], "224": [201, 229, 272, 418, 439, 444, 446, 449, 455, 458, 489, 492], "batch_siz": [201, 206, 208, 211, 212, 213, 214, 215, 216, 217, 236, 250, 252, 255, 256, 257, 258, 259, 260, 261, 280, 416, 438, 439, 444, 446, 450, 455, 458, 482], "tf2onnxconfig": [201, 446], "tf2onnx": [201, 277, 282, 335], "keyword": 201, "argument": [201, 396, 416, 441, 484], "output_graph": 201, "dyna": [201, 282, 295, 335, 416, 451, 481], "sigopt": [202, 203, 246, 247, 282, 335, 480], "tpe": [202, 203, 246, 247, 282, 335], "sigopttunestrategi": [204, 248], "q_dataload": [204, 205, 248, 249, 322, 325, 327, 328, 378, 381, 382, 386, 388, 389, 450, 490], "eval_func": [204, 205, 248, 249, 319, 322, 325, 327, 328, 344, 377, 378, 381, 382, 386, 388, 389, 396, 398, 415, 438, 439, 441, 442, 443, 444, 455, 482, 483, 484, 490, 492], "eval_metr": [204, 205, 344, 377, 378, 381, 382, 386, 388, 389, 398, 454, 482], "q_hook": [204, 205, 248, 249, 322, 325, 327, 328, 378, 381, 382, 386, 388, 389], "mandatori": [204, 205, 248, 249, 377, 455, 492], "yield": [204, 205, 214, 236, 248, 249, 258, 322, 344, 377, 381, 396, 398, 438, 482, 490], "_": [204, 205, 248, 249, 377, 415, 416, 419, 420, 437, 438, 441, 442, 444, 446, 448, 455, 456, 457, 458, 464, 468, 470, 472, 473, 477, 479, 482, 484, 485, 486, 487, 488, 490, 492], "well": [204, 205, 248, 249, 344, 377, 398, 416, 418, 439, 479, 482, 485, 487, 492], "taken": [204, 205, 248, 249, 344, 377, 398, 482], "reserv": [204, 205, 248, 249], "abl": [204, 205, 248, 249, 344, 377, 398, 466, 475, 482], "tuner": [204, 205, 248, 249, 281, 318, 344, 377, 398, 482], "scalar": [204, 205, 248, 249, 344, 377, 398, 454, 482], "pseudo": [204, 205, 248, 249, 377, 398, 488], "someth": [204, 205, 218, 248, 249, 262, 377, 398], "fefin": [205, 249], "tpetunestrategi": [205, 249], "basedatalod": [206, 250], "basedataload": [206, 211, 213, 250, 255, 257], "last_batch": [206, 208, 211, 212, 213, 215, 236, 250, 252, 255, 256, 257, 259], "rollov": [206, 208, 211, 212, 213, 215, 236, 250, 252, 255, 256, 257, 259, 438], "collate_fn": [206, 208, 209, 211, 212, 213, 215, 236, 250, 252, 253, 255, 256, 257, 259, 439], "sampler": [206, 208, 210, 211, 212, 213, 215, 236, 250, 252, 254, 255, 256, 257, 259, 271, 282, 331, 392, 438, 444], "batch_sampl": [206, 208, 211, 212, 213, 215, 236, 250, 252, 255, 256, 257, 259], "num_work": [206, 208, 211, 212, 213, 215, 236, 250, 252, 255, 256, 257, 259, 455, 482], "pin_memori": [206, 208, 211, 212, 213, 215, 236, 250, 252, 255, 256, 257, 259], "shuffl": [206, 208, 211, 212, 213, 215, 236, 250, 252, 255, 256, 257, 259, 438, 455, 482], "_generate_dataload": [206, 250], "check_dataload": 207, "default_col": [208, 252], "outer": [208, 252], "defaultdataload": [208, 215, 252, 259], "definit": [209, 214, 253, 258], "style": [209, 223, 253, 267, 396, 414, 439, 450], "drop_last": [209, 214, 253, 258], "iterablefetch": [209, 253], "indexfetch": [209, 253], "base_dataload": [210, 254, 271, 282], "default_dataload": [210, 254, 271, 282], "fetcher": [210, 254, 271, 282], "mxnet_dataload": [210, 254, 271, 282], "onnxrt_dataload": [210, 254, 271, 282, 370], "pytorch_dataload": [210, 254, 271, 282], "tensorflow_dataload": [210, 254, 271, 282, 375], "mxnetdataload": [211, 255], "onnxrtbertdataload": [212, 256], "varient": [212, 256], "onnxrtdataload": [212, 256, 370], "pytorchdataload": [213, 257], "data_sourc": [214, 258, 401], "__iter__": [214, 218, 258, 262, 438, 439, 455], "matter": [214, 258, 483], "iterablesampl": [214, 258], "squential": [214, 258], "your": [214, 216, 258, 260, 414, 438, 439, 441, 444, 453, 455, 458, 461, 462, 463, 468, 469, 470, 472, 473, 475, 479, 480, 486, 488, 490, 491], "clear": [214, 258, 419, 448, 454, 455], "iterabledataset": [214, 218, 258, 262], "try": [214, 258, 415, 441, 479, 482, 487, 490], "indexdataset": [214, 258], "__getitem__": [214, 218, 233, 258, 262, 275, 439, 455], "__len__": [214, 218, 258, 262, 439], "retriev": [214, 258], "sequentialsampl": [214, 258], "sequenti": [214, 258, 319, 321, 378, 380, 490], "batchsampl": [214, 258], "tfdatadataload": [215, 259], "tensorflow1": [215, 259], "coupl": [215, 259], "satisfi": [215, 259, 441, 452], "usag": [215, 259, 286, 292, 319, 339, 396, 420, 439, 444, 445, 458, 466, 477, 481, 489], "tf1": [215, 259, 457], "although": [215, 259, 486], "tensorflowbertdataload": [215, 259], "tensorflowmodelzoobertdataload": [215, 259], "zoo": [215, 233, 259, 275, 418, 445, 449, 493], "tensorflowdataload": [215, 259, 375], "pytorchbertdataset": [216, 260], "model_typ": [216, 260, 409, 439], "construct": [216, 219, 220, 223, 231, 236, 238, 239, 241, 260, 263, 264, 267, 343, 348, 352, 395, 401, 413, 420, 421, 439, 444, 479, 490], "tensordataset": [216, 260, 439], "repo": [216, 260, 412, 439, 445, 468, 470, 472, 473, 494], "easi": [216, 260, 318, 446, 455, 480, 482, 486], "load": [216, 232, 233, 260, 274, 275, 344, 352, 377, 408, 409, 420, 438, 468, 472, 476, 481, 482, 487], "squad": [216, 233, 260, 275, 287, 288, 290, 340, 341, 343, 439, 454, 479, 489, 493], "distilbert": [216, 260, 418, 439, 456, 480, 493], "xlnet": [216, 260, 439, 493], "xlm": [216, 260, 439, 493], "101": [216, 260, 290, 343, 454, 487, 493], "2043": [216, 260], "2001": [216, 260], "onnxrtbertdataset": [216, 260], "data_dir": [216, 260, 439], "model_name_or_path": [216, 260, 439, 455, 463, 464], "max_seq_length": [216, 233, 260, 275, 439, 489], "do_lower_cas": [216, 232, 233, 260, 274, 275, 439, 489], "mrpc": [216, 260, 290, 343, 439, 454, 463, 479, 490, 493], "dynamic_length": [216, 260, 439], "shortcut": [216, 260, 439], "token": [216, 227, 230, 233, 260, 271, 273, 275, 282, 283, 284, 335, 336, 337, 404, 439, 454, 455, 484, 486, 487, 489, 490], "longer": [216, 233, 260, 275, 439, 489], "truncat": [216, 233, 260, 275, 439, 489], "shorter": [216, 233, 260, 275, 439, 489], "lowercas": [216, 260, 439], "choic": [216, 260, 419, 439, 454, 487], "qqp": [216, 260, 439, 454, 493], "qnli": [216, 260, 439, 454, 493], "rte": [216, 260, 439, 454, 493], "st": [216, 260, 439, 454], "cola": [216, 260, 439, 454, 493], "mnli": [216, 260, 439, 454, 493], "wnli": [216, 260, 439, 454], "mobilebert": [216, 260, 439, 442, 493], "roberta": [216, 260, 439, 493], "uncas": [216, 233, 260, 275, 439, 489, 493], "load_and_cache_exampl": [216, 260], "cach": [216, 260, 447, 482, 484], "convert_examples_to_featur": [216, 233, 260, 275], "max_length": [216, 260], "label_list": [216, 260, 290, 343], "output_mod": [216, 260], "classif": [216, 233, 260, 275, 290, 316, 343, 442, 446, 454, 464, 479, 480], "pad_token": [216, 260], "pad_token_segment_id": [216, 260], "mask_padding_with_zero": [216, 260], "inputfeatur": [216, 233, 260, 275], "properti": [216, 260, 395, 453], "input_id": [216, 233, 260, 275, 455], "vocabulari": [216, 232, 233, 260, 274, 275, 489], "attention_mask": [216, 260, 455], "usual": [216, 260, 420, 441, 442, 478, 479, 482, 487], "NOT": [216, 260, 448], "token_type_id": [216, 260, 455], "segment": [216, 260, 284, 286, 337, 339], "portion": [216, 260], "problem": [216, 260, 290, 343, 454, 456, 476], "regress": [216, 260, 441], "seq_length": [216, 260], "tensorflowbertdataset": [216, 260], "label_fil": [216, 233, 260, 275, 439, 489], "tfrecord": [216, 217, 218, 260, 261, 262, 439], "guid": [216, 260, 415, 418, 439, 442, 452, 458, 466, 475, 494], "parsedecodebert": [216, 260], "tensorflowmodelzoobertdataset": [216, 217, 260, 261], "num_cor": [216, 217, 221, 260, 261, 265, 439], "28": [216, 217, 221, 260, 261, 265, 439, 493], "coco": [217, 224, 228, 261, 268, 286, 290, 339, 343, 454, 479], "parsedecodecoco": [217, 261], "cocorecorddataset": [217, 261], "interleav": [217, 261, 439], "parallel": [217, 261, 371, 376, 439, 455, 490], "cocoraw": [217, 261, 439], "img_dir": [217, 261, 439], "val2017": [217, 261, 439], "anno_dir": [217, 261, 439], "annot": [217, 261, 286, 339, 396, 420, 421, 439, 454, 479, 490], "instances_val2017": [217, 261, 439], "jpg": [217, 221, 223, 261, 265, 267, 439], "imag": [217, 218, 221, 223, 229, 233, 261, 262, 265, 267, 272, 275, 286, 339, 439, 444, 446, 479, 481, 487, 488, 489, 493], "coconpi": [217, 261, 439], "npy_dir": [217, 261, 439], "npy": [217, 261, 439], "tensorflowdataset": [218, 262], "pytorchdataset": [218, 262], "mxnetdataset": [218, 262], "onnxrtqldataset": [218, 262], "onnxrtitdataset": [218, 262], "IT": [218, 225, 262, 269, 480], "pytorchmxnetwrapdataset": [218, 262], "datafunc": [218, 262], "pytorchmxnetwrapfunct": [218, 233, 262, 275], "framework_dataset": [218, 262], "convent": [218, 262, 286, 339, 442], "imageclassifi": [218, 262], "tensorflow_itex": [218, 221, 223, 225, 262, 265, 267, 269, 438, 481], "onnxrt_qdq": [218, 225, 262, 269, 481], "onnxrt_qlinearop": [218, 225, 233, 262, 269, 275, 481], "onnxrt_integerop": [218, 225, 233, 262, 269, 275, 481], "pytorch_ipex": [218, 225, 262, 269, 455, 481, 492], "pytorch_fx": [218, 225, 262, 269, 455, 481], "dataset_registri": [218, 262], "dataset_typ": [218, 262], "dataset_format": [218, 262], "data_format": [218, 229, 262, 272], "raw_imag": [218, 262], "overwrit": [218, 262, 468, 472], "download_url": [218, 262], "filenam": [218, 262, 409, 439], "md5": [218, 262], "download": [218, 262, 439, 441, 452, 485], "address": [218, 262, 413, 456, 480], "gen_bar_updat": [218, 262], "bar": [218, 262, 475, 480], "check_integr": [218, 262], "fpath": [218, 262], "checksum": [218, 262], "calculate_md5": [218, 262], "chunk_siz": [218, 262], "cifar10": [218, 262, 439], "cifar100": [218, 262, 439], "databas": [218, 262], "otherwis": [218, 233, 262, 275, 409, 413, 420, 439, 470, 473, 481, 489], "www": [218, 262, 439, 493], "toronto": [218, 262, 439], "kriz": [218, 262, 439], "cifar": [218, 262, 439, 493], "tar": [218, 262, 439, 441, 470, 473], "gz": [218, 262, 439, 441, 470, 473], "manual": [218, 262, 439, 458, 464, 466, 469], "subset": [218, 221, 262, 265, 439], "internet": [218, 262, 439], "put": [218, 262, 439, 442], "again": [218, 262, 439, 483], "pytorchcifar10": [218, 262], "mxnetcifar10": [218, 262], "tensorflowcifar10": [218, 262], "pytorchcifar100": [218, 262], "mxnetcifar100": [218, 262], "tensorflowcifar100": [218, 262], "mnist": [218, 262, 439, 444], "nation": [218, 262, 413], "institut": [218, 262], "standard": [218, 233, 262, 275, 420, 441, 446, 454, 489, 490], "technologi": [218, 262, 455], "fashionmnist": [218, 262, 439], "npz": [218, 262, 439], "idx1": [218, 262, 439], "ubyt": [218, 262, 439], "idx3": [218, 262, 439], "t10k": [218, 262, 439], "pytorchmnist": [218, 262], "mxnetmnist": [218, 262], "tensorflowmnist": [218, 262], "pytorchfashionmnist": [218, 262], "mxnetfashionmnist": [218, 262], "tensorflowfashionmnist": [218, 262], "imagefold": [218, 262, 439, 444, 455], "expect": [218, 262, 413, 414, 447, 475, 482, 484, 490], "subfold": [218, 262], "belong": [218, 262, 348, 482], "class_1": [218, 262, 439], "xxx": [218, 262, 414, 439, 455], "png": [218, 262, 439], "xxy": [218, 262, 439], "xxz": [218, 262, 439], "class_n": [218, 262, 439], "123": [218, 262, 439, 489], "nsdf3": [218, 262, 439], "asd932_": [218, 262, 439], "categori": [218, 262, 285, 338, 436, 439, 465], "mxnetimagefold": [218, 262], "tensorflowtfrecorddataset": [218, 262], "tensorflowimagerecord": [218, 262], "imagenet": [218, 221, 229, 262, 265, 272, 416, 441, 455, 464, 479, 488, 489, 492, 493], "000": [218, 262, 418, 439], "099": [218, 262, 439], "tensorflowvocrecord": [218, 262], "pascal": [218, 262], "voc": [218, 262, 290, 343], "2012": [218, 262], "00000": [218, 262], "00004": [218, 262], "00001": [218, 262], "00003": [218, 262], "dummydataset": [219, 220, 263, 264], "127": [219, 220, 263, 264, 439, 482, 487], "float32": [219, 220, 233, 263, 264, 275, 286, 339, 419, 436, 439, 455, 482, 484, 487, 489], "stand_norm": [219, 220, 263, 264, 439], "dummy_v2": [220, 264, 439], "sparse_dummy_v2": [220, 264, 439], "label_shap": [220, 264, 439], "sparsedummydataset": [220, 264], "dense_shap": [220, 264, 439], "sparse_ratio": [220, 264, 439], "imagenetraw": [221, 265, 439], "data_path": [221, 265, 439], "image_list": [221, 265, 439], "img1": [221, 265, 439], "img2": [221, 265, 439], "imgx": [221, 265, 439], "val_map": [221, 265, 439], "txt": [221, 265, 439, 441, 452], "pytorchimagenetraw": [221, 265], "mxnetimagenetraw": [221, 265], "tensorflowimagenetraw": [221, 265], "inteltensorflow": [221, 223, 265, 267, 452], "tensorflowimagenetdataset": [221, 265], "onnxrtimagenetdataset": [221, 265], "bert_dataset": [222, 227, 266, 271, 282, 335], "coco_dataset": [222, 227, 266, 271, 282, 335], "dummy_dataset": [222, 227, 266, 271, 282, 335], "dummy_dataset_v2": [222, 227, 266, 271, 282, 335], "imagenet_dataset": [222, 227, 266, 271, 282, 335], "style_transfer_dataset": [222, 227, 266, 271, 282, 335], "styletransferdataset": [223, 267], "content_fold": [223, 267, 439], "style_fold": [223, 267, 439], "crop_ratio": [223, 267, 439], "resize_shap": [223, 267, 439], "256": [223, 229, 267, 272, 439, 444, 455, 489], "image_format": [223, 267, 439], "holder": [223, 267, 439], "labelbalancecocorecordfilt": [224, 268], "balanc": [224, 268, 484, 487], "labelbalancecocorawfilt": [224, 268], "tensorflowfilt": [225, 269], "onnxrtqlfilt": [225, 269], "onnxrtitfilt": [225, 269], "pytorchfilt": [225, 269], "mxnetfilt": [225, 269], "filter_registri": [225, 269], "filter_typ": [225, 269], "__call__": [225, 269], "coco_filt": [226, 227, 270, 271, 282, 335], "imagenet_transform": [227, 230, 271, 273, 282, 335], "parsedecodecocotransform": 228, "decod": [228, 229, 272, 283, 336, 454, 489], "quantizedinput": [229, 272, 489], "labelshift": [229, 272, 489], "label_shift": [229, 272, 489], "parsedecodeimagenet": [229, 272, 489], "proto": [229, 233, 272, 275, 489], "parsedecodeimagenettransform": [229, 272], "tensorflowtransposelastchannel": 229, "tensorflowshiftrescal": 229, "rescal": [229, 233, 275, 489], "tensorflowresizecropimagenettransform": [229, 272], "random_crop": [229, 272, 489], "resize_sid": [229, 272, 489], "resize_method": [229, 272], "bilinear": [229, 233, 272, 275, 489], "random_flip_left_right": [229, 272, 489], "mean_valu": [229, 272, 489], "channels_last": [229, 272, 458], "subpixel": [229, 272], "rgb": [229, 272], "seri": [229, 272, 418, 452, 455, 489], "applic": [229, 272, 421, 446, 458, 475, 480, 484, 487, 488, 489, 491], "crop": [229, 233, 272, 275, 439, 489], "flip": [229, 233, 272, 275, 489], "left": [229, 233, 272, 275, 469, 475, 487, 489], "right": [229, 272, 286, 339, 413, 415, 475, 487, 489], "std": [229, 233, 272, 275, 455, 489], "bilinearimagenettransform": [229, 272], "central_fract": [229, 272, 489], "875": [229, 272, 489], "fraction": [229, 272, 489], "onnxbilinearimagenettransform": [229, 272], "onnxresizecropimagenettransform": [229, 272], "std_valu": [229, 272], "229": [229, 272, 455], "225": [229, 272, 455], "resizewithaspectratio": [229, 272], "87": [229, 272, 493], "inter_pol": [229, 272], "cv2": [229, 272], "inter_area": [229, 272], "aspect": [229, 233, 272, 275, 489], "postprocess_cl": [231, 241, 455], "user_postprocess": [231, 241], "convert_to_unicod": [232, 274], "unicod": [232, 274], "assum": [232, 274, 286, 297, 339, 419, 448, 475], "utf": [232, 274], "load_vocab": [232, 274], "vocab_fil": [232, 233, 274, 275, 489], "convert_by_vocab": [232, 274], "vocab": [232, 274], "whitespace_token": [232, 274], "whitespac": [232, 274, 288, 341], "clean": [232, 274, 414, 455], "piec": [232, 274, 283, 336, 454, 484], "fulltoken": [232, 274], "tokenzi": [232, 274], "basictoken": [232, 274], "punctuat": [232, 274, 283, 288, 336, 341], "lower": [232, 233, 274, 275, 288, 341, 382, 443, 479, 480, 482, 487, 489, 490], "wordpiecetoken": [232, 274], "unk_token": [232, 274], "unk": [232, 274], "max_input_chars_per_word": [232, 274], "200": [232, 274, 415, 490], "wordpiec": [232, 233, 274, 275, 489], "concat_gener": [233, 275], "inc": [233, 275, 413, 418, 420, 458, 465, 475, 480, 481, 485, 490], "tensorflowtransform": [233, 275], "mxnettransform": [233, 275], "pytorchtransform": [233, 275], "onnxrtqltransform": [233, 275], "onnxrtittransform": [233, 275], "transform_registri": [233, 275], "transform_typ": [233, 275], "basetransform": [233, 275], "tensorflowwrapfunct": [233, 275], "transform_func": [233, 275], "pytorchmxnettransform": [233, 275], "get_torchvision_map": [233, 275], "torchvis": [233, 275, 445, 449, 458, 464], "composetransform": [233, 275], "transform_list": [233, 275, 489], "compos": [233, 275, 401, 489], "croptoboundingbox": [233, 275, 489], "offset_height": [233, 275, 489], "offset_width": [233, 275, 489], "target_height": [233, 275, 489], "target_width": [233, 275, 489], "box": [233, 275, 286, 290, 339, 343, 415, 454, 458, 469, 475, 488, 489, 490], "coordin": [233, 275, 322, 381, 489, 490], "top": [233, 275, 281, 290, 305, 310, 318, 343, 454, 475, 489], "corner": [233, 275, 419, 421, 489], "horizont": [233, 275, 489], "mxnetcroptoboundingbox": [233, 275], "onnxrtcroptoboundingbox": [233, 275], "tensorflowcroptoboundingbox": [233, 275], "resizewithratio": [233, 275, 489], "min_dim": [233, 275, 489], "800": [233, 275, 489], "max_dim": [233, 275, 489], "1365": [233, 275, 489], "constant_valu": [233, 275], "longest": [233, 275, 489], "side": [233, 275, 439, 469, 489], "doesn": [233, 275, 419, 444, 455, 456, 476, 492], "exce": [233, 275, 489], "tensorflowresizewithratio": [233, 275], "perm": [233, 275, 489], "permut": [233, 275, 489], "tensorflowtranspos": [233, 275], "mxnettranspos": [233, 275], "pytorchtranspos": [233, 275], "randomverticalflip": [233, 275, 489], "tensorflowrandomverticalflip": [233, 275], "randomhorizontalflip": [233, 275, 455, 489], "tensorflowrandomhorizontalflip": [233, 275], "toarrai": [233, 275, 489], "pil": [233, 275, 489], "casttftransform": [233, 275], "castonnxtransform": [233, 275], "castpytorchtransform": [233, 275], "centercroptftransform": [233, 275], "center": [233, 275, 417, 418, 452, 489, 490], "paddedcentercroptransform": [233, 275], "crop_pad": [233, 275], "resizetftransform": [233, 275], "bicub": [233, 275, 489], "resizepytorchtransform": [233, 275], "randomcroptftransform": [233, 275], "randomresizedcroppytorchtransform": [233, 275], "08": [233, 275, 489, 493], "randomresizedcropmxnettransform": [233, 275], "randomresizedcroptftransform": [233, 275], "normalizetftransform": [233, 275], "deviat": [233, 275, 441, 489], "broadcast": [233, 275, 444, 489], "rescalekeraspretraintransform": [233, 275], "rescaletftransform": [233, 275], "rescaletransform": [233, 275], "alignimagechanneltransform": [233, 275], "dim": [233, 275, 484, 487, 489], "align": [233, 275, 413, 489], "w": [233, 275, 479, 487, 489], "must": [233, 275, 286, 339, 414, 415, 420, 436, 438, 452, 482, 489], "pytorchalignimagechannel": [233, 275], "tondarraytransform": [233, 275], "resizemxnettransform": [233, 275], "resizetransform": [233, 275], "cropresizetftransform": [233, 275], "boundari": [233, 275, 489], "area": [233, 275, 286, 339, 454, 489], "pytorchcropresizetransform": [233, 275], "mxnetcropresizetransform": [233, 275], "cropresizetransform": [233, 275], "centercroptransform": [233, 275], "mxnetnormalizetransform": [233, 275], "pytorchnormalizetransform": [233, 275], "normalizetransform": [233, 275], "randomcroptransform": [233, 275], "randomresizedcroptransform": [233, 275], "get_final_text": [233, 275], "pred_text": [233, 275], "orig_text": [233, 275], "project": [233, 275, 412, 413, 414, 480, 486, 490, 494], "squadexampl": [233, 275], "qas_id": [233, 275], "question_text": [233, 275], "doc_token": [233, 275], "orig_answer_text": [233, 275], "start_posit": [233, 275], "end_posit": [233, 275], "is_imposs": [233, 275], "simpl": [233, 275, 452, 455, 486, 487, 490], "answer": [233, 275, 287, 288, 340, 341, 413, 479, 489, 493], "posit": [233, 275, 413, 454, 458], "unique_id": [233, 275], "example_index": [233, 275], "doc_span_index": [233, 275], "token_to_orig_map": [233, 275], "token_is_max_context": [233, 275], "input_mask": [233, 275, 455], "segment_id": [233, 275, 455], "read_squad_exampl": [233, 275], "input_fil": [233, 275], "doc_strid": [233, 275, 489], "max_query_length": [233, 275, 489], "output_fn": [233, 275], "inputbatch": [233, 275], "collecttransform": [233, 275], "10833": [233, 275], "tfsquadv1posttransform": [233, 275], "n_best_siz": [233, 275, 489], "384": [233, 275, 489], "64": [233, 275, 416, 484, 487, 489, 493], "max_answer_length": [233, 275, 489], "30": [233, 275, 445, 449, 451, 487, 489, 493], "nbest_predict": [233, 275, 489], "question": [233, 275, 287, 288, 340, 341, 413, 414, 419, 452, 458, 479, 487, 489, 493], "anoth": [233, 275, 283, 292, 336, 409, 441, 442, 468, 472, 489, 490], "long": [233, 275, 447, 484, 489], "document": [233, 275, 396, 414, 420, 421, 426, 444, 456, 460, 470, 473, 474, 479, 485, 489, 491], "chunk": [233, 275, 489], "tfmodelzoocollecttransform": [233, 275], "tfsquadv1modelzooposttransform": [233, 275], "squadv1": [233, 275, 489], "see": [233, 275, 283, 336, 413, 415, 417, 453, 455, 468, 469, 472, 475, 476, 484, 487, 488, 490], "parsedecodevoctransform": [233, 275], "conf_fname_or_obj": [234, 243, 276, 281, 291, 292, 293, 294, 296, 305, 310, 318], "thei": [234, 396, 413, 442, 448, 455, 463, 477], "possibl": [234, 441, 478, 479, 483, 490], "unnecessari": [234, 455], "tensorflowcrossentropyloss": 235, "pytorchcrossentropyloss": 235, "tensorflowsparsecategoricalcrossentropi": 235, "sparsecategoricalcrossentropyloss": 235, "setter": 236, "calib_dataload": [236, 319, 377, 415, 418, 438, 439, 441, 449, 450, 454, 455, 482, 483], "reason": [236, 413, 420, 438, 484, 488, 490], "know": [236, 444, 485], "known": [236, 322, 381, 455, 488, 490], "open": [237, 282, 335, 401, 411, 413, 418, 446, 447, 455, 470, 473, 476, 480], "metric_cl": [238, 343, 377, 455], "user_metr": [238, 343, 377], "alwai": [238, 286, 339, 343, 377, 441, 454, 455], "recommend": [238, 343, 419, 439, 448, 466, 469, 474, 476, 479, 481, 490], "set_backend": 239, "tensorflowoptim": 240, "pytorchoptim": 240, "optimizer_registri": 240, "optimizer_typ": 240, "cross": [240, 290, 343, 450, 490], "tensorflowsgd": 240, "tensorflowadamw": 240, "tensorflow_addon": 240, "adamw": 240, "tensorflowadam": 240, "adam": [240, 492], "pytorchsgd": 240, "record_output": 242, "output_process": 242, "get_activ": 242, "f": [245, 442, 444, 482, 484, 487], "pickle_modul": 245, "pickle_protocol": 245, "_use_new_zipfile_seri": 245, "prepare_prun": [245, 479], "opt": [245, 418, 463, 487, 490], "tensorflowimagefold": 262, "qlinear2qdq": [277, 282, 335], "qlinearop": [278, 441, 451, 466, 482, 493], "check_model": 278, "modelproto": [278, 344, 457], "onnx_qlinear_to_qdq": 278, "input_name_to_nod": 278, "destin": [278, 292], "tf_to_fp32_onnx": 279, "tf_to_int8_onnx": 279, "int8_model": [279, 280, 419], "get_node_map": 280, "fp32_onnx_path": 280, "module_node_map": 280, "get_quantizable_onnx_op": 280, "quantize_nod": 280, "dynamic_quant_export": 280, "pt_fp32_model": 280, "pt_int8_model": 280, "weight_typ": 280, "s8": 280, "static_quant_export": 280, "_quantiz": 280, "torch_to_fp32_onnx": 280, "do_constant_fold": 280, "verbos": [280, 322, 381], "torch_to_int8_onnx": 280, "achiev": [281, 318, 446, 455, 478, 479, 480, 482, 488, 490], "across": [281, 291, 318, 344, 440, 455, 479, 487, 490], "variou": [281, 291, 318, 344, 421, 451, 458, 479, 481], "dl": [281, 291, 305, 310, 318, 344, 441, 450, 462, 475, 480, 493], "bring": [281, 318, 469, 487], "unifi": [281, 318, 419, 420, 421, 438, 450, 451, 454, 455, 457], "vari": [281, 305, 310, 318, 479, 487, 493], "roc": [281, 290, 305, 310, 318, 343], "flexibl": [281, 305, 310, 318, 442, 479, 484], "via": [281, 305, 310, 318, 413, 444, 451, 455, 458, 475, 479], "popular": [282, 335, 411, 418, 419, 420, 437, 442, 445, 446, 449, 455, 479, 482, 484, 490, 491], "techniqu": [282, 335, 411, 418, 451, 455, 458, 478, 479, 480, 481, 482, 491, 492, 493], "bleu": [282, 284, 289, 335, 337, 342, 454, 479], "bleu_util": [282, 289, 335, 342], "coco_label_map": [282, 289, 335, 342], "coco_tool": [282, 289, 335, 342], "evaluate_squad": [282, 289, 335, 342], "f1": [282, 287, 289, 290, 335, 340, 342, 343, 444, 454, 455, 486, 493], "basic_na": [282, 295, 335], "nas_util": [282, 295, 335], "pruner_legaci": [282, 335], "gradient_sensit": [282, 301, 335], "group_lasso": [282, 301, 335], "pruning_recip": [282, 335], "tile_pattern": [282, 306, 307], "pytorch_prun": [282, 335], "logger": [282, 311, 335, 399, 402, 409], "prune_util": [282, 311, 335], "tuning_sampl": [282, 324, 330, 335, 385, 391], "tuning_spac": [282, 324, 330, 331, 333, 335, 385, 391, 392, 394], "tuning_struct": [282, 324, 330, 331, 332, 335, 385, 391, 392, 393], "auto_mixed_precis": [282, 324, 335, 385], "graph_optim": [282, 335], "mixed_precis": [282, 335, 344, 455], "model_convers": [282, 335], "pruning_v2": [282, 335], "unicoderegex": [283, 336], "hoc": [283, 336], "hack": [283, 336], "recogn": [283, 336, 490], "nondigit_punct_r": [283, 336], "compil": [283, 336, 455], "express": [283, 336, 413], "preced": [283, 336, 487], "digit": [283, 336, 409, 480], "punct_nondigit_r": [283, 336], "symbol_r": [283, 336], "bleu_token": [283, 336], "mose": [283, 336, 484], "smt": [283, 336], "mosesdecod": [283, 336], "mteval": [283, 336], "v14": [283, 336], "pl": [283, 336], "l954": [283, 336], "l983": [283, 336], "bilingu": [283, 336], "understudi": [283, 336], "qualiti": [283, 336], "machin": [283, 336, 446, 452, 461, 475, 480, 487, 488], "translat": [283, 284, 336, 337, 479, 490], "natur": [283, 336, 446], "approxim": [283, 284, 336, 337, 420, 454], "glue": [283, 290, 336, 343, 439, 454, 455, 464], "word": [283, 336, 454, 479, 484, 493], "ngram": [283, 336, 454], "breviti": [283, 284, 336, 337, 454], "penalti": [283, 284, 336, 337, 454], "doe": [283, 336, 395, 438, 439, 454, 455, 484, 485, 489], "beam": [283, 336, 454], "tensor2tensor": [284, 337], "bleu_hook": [284, 337], "compute_bleu": [284, 337], "reference_corpu": [284, 337], "translation_corpu": [284, 337], "max_ord": [284, 337], "use_bp": [284, 337], "against": [284, 337], "gram": [284, 337], "bleu_scor": [284, 337], "third": [286, 339, 453], "parti": [286, 339, 453, 482], "pycocotool": [286, 339, 447, 452], "noth": [286, 339, 490], "thu": [286, 339, 455, 479, 482], "cannot": [286, 339, 415, 447, 488], "jonathanhuang": [286, 339], "image_id": [286, 339, 454], "encod": [286, 339, 489], "invok": [286, 339, 420], "groundtruth_dict": [286, 339], "exportgroundtruthtococo": [286, 339], "groundtruth_boxes_list": [286, 339], "groundtruth_classes_list": [286, 339], "max_num_class": [286, 339], "output_path": [286, 339], "detections_list": [286, 339], "exportdetectionstococo": [286, 339], "detection_boxes_list": [286, 339], "detection_scores_list": [286, 339], "detection_classes_list": [286, 339], "cocowrapp": [286, 339], "loadannot": [286, 339], "cocoevalwrapp": [286, 339], "agnostic_mod": [286, 339], "computemetr": [286, 339], "detection_typ": [286, 339], "bbox": [286, 339, 415, 454], "hold": [286, 322, 339, 381, 439], "iou_typ": [286, 339], "iou_thr": [286, 290, 339, 343, 454], "map_point": [286, 290, 339, 343, 454], "cocoev": [286, 339], "mscoco": [286, 339], "Then": [286, 339, 420, 441, 468, 470, 472, 473, 487, 490], "exportsingleimagegroundtruthtococo": [286, 339], "next_annotation_id": [286, 339], "category_id_set": [286, 339], "groundtruth_box": [286, 339], "groundtruth_class": [286, 339], "groundtruth_mask": [286, 339], "groundtruth_is_crowd": [286, 339], "ingest": [286, 339], "here": [286, 339, 396, 420, 439, 444, 445, 446, 448, 449, 454, 463, 470, 473, 475, 482, 485, 486, 493], "ones": [286, 339, 479], "exportsingleimagedetectionstococo": [286, 339], "uniqu": [286, 319, 339, 482], "assign": [286, 339, 409, 444, 481, 490], "num_gt_box": [286, 339], "num_detect": [286, 290, 339, 343, 454, 455, 492], "image_height": [286, 339], "image_width": [286, 339], "detection_mask": [286, 339], "crowd": [286, 339], "insid": [286, 339, 442, 443, 476, 479, 490], "exportsingleimagedetectionboxestococo": [286, 339], "detection_box": [286, 339, 455, 492], "detection_scor": [286, 339, 455, 492], "detection_class": [286, 339, 455, 492], "exporsingleimagedetectionboxestococo": [286, 339], "exportsingleimagedetectionmaskstococo": [286, 339], "allenai": [287, 288, 340, 341], "bi": [287, 288, 340, 341], "att": [287, 288, 340, 341], "flow": [287, 288, 340, 341, 415, 416, 455], "f1_score": [287, 288, 340, 341], "ground_truth": [287, 288, 340, 341], "ground": [287, 288, 340, 341], "truth": [287, 288, 340, 341], "metric_max_over_ground_truth": [287, 288, 340, 341], "metric_fn": [287, 288, 340, 341], "exact_match_scor": [287, 340], "exact": [287, 340], "averag": [287, 288, 290, 340, 341, 343, 454, 455, 490], "articl": [287, 288, 340, 341], "paragraph": [287, 288, 340, 341], "qa": [287, 288, 340, 341], "cantain": [287, 288, 340, 341], "normalize_answ": [288, 341], "extra": [288, 341, 455], "newlin": [288, 341, 409], "tab": [288, 341, 475, 488], "harmon": [288, 290, 341, 343], "recal": [288, 290, 341, 343], "answer_start": [288, 341], "177": [288, 341], "denver": [288, 341], "bronco": [288, 341], "nfl": [288, 341], "team": [288, 341, 413, 483], "afc": [288, 341], "super": [288, 341, 416], "bowl": [288, 341], "50": [288, 341, 416, 420, 487, 493], "56be4db0acb8001400a502ec": [288, 341], "form": [288, 341, 441, 442, 475], "percentag": [288, 341, 437, 492], "tensorflowmetr": [290, 343], "maintain": [290, 343, 413, 414, 418, 457, 458, 470, 473, 484, 485], "pytorchmetr": [290, 343], "mxnetmetr": [290, 343], "onnxrtqlmetr": [290, 343], "onnxrtitmetr": [290, 343], "metric_registri": [290, 343], "metric_typ": [290, 343], "decorator_metr": [290, 343], "basemetr": [290, 343, 377], "single_output": [290, 343], "hvd": [290, 343, 444], "wrappytorchmetr": [290, 343], "wrapmxnetmetr": [290, 343], "wraponnxrtmetr": [290, 343], "proport": [290, 343], "were": [290, 343, 461, 479], "pred_list": [290, 343], "pytorchloss": [290, 343], "mae": [290, 343, 454], "compare_label": [290, 343, 377, 454], "rmse": [290, 343, 454, 490], "squar": [290, 325, 343, 386, 441, 454, 487, 490], "tensorflowtopk": [290, 343], "k": [290, 343, 377, 454], "among": [290, 343, 469, 487], "outcom": [290, 343], "num_correct": [290, 343], "num_sampl": [290, 343], "generaltopk": [290, 343], "cocomapv2": [290, 343, 454], "anno_path": [290, 343, 454], "map_kei": [290, 343], "detectionboxes_precis": [290, 343], "output_index_map": [290, 343, 454], "tensorflowmap": [290, 343], "tensorflowcocomap": [290, 343], "tensorflowvocmap": [290, 343], "squadf1": [290, 343, 454], "miou": [290, 343], "num_class": [290, 343], "21": [290, 343, 463, 464, 480, 487, 493], "iou": [290, 343], "intersect": [290, 343, 419, 454], "union": [290, 343, 398, 454], "onnxrtglu": [290, 343], "dlrm": [290, 343], "modelconvers": 292, "typic": [292, 319, 416, 418, 443, 445, 449, 479, 493], "basicna": 293, "model_build": [293, 296], "conf_fnam": 293, "nasbas": [296, 416], "nas_registri": 297, "nas_method": 297, "create_search_space_pool": 297, "idx": [297, 439], "enumer": [297, 398, 419, 442, 443, 444, 455, 478, 479, 488], "find_pareto_front": 297, "pareto": [297, 416], "front": [297, 416], "n_point": 297, "n_metric": 297, "n_pareto_point": 297, "gradientsensitivityprun": 299, "pytorchmodel": [299, 300, 302, 303, 304, 353], "overwritten": [299, 300, 302, 303, 304, 463], "grouplassoprun": 300, "legaci": 301, "basicmagnitudeprun": 302, "patternlockprun": [303, 315], "pruner_registri": 304, "clase": 304, "pruningconf": [305, 310], "tfpruningcallback": [305, 310], "input_model": [305, 310, 457, 488], "pure": [305, 310, 479], "pattern_registri": 308, "pattern_typ": 308, "patternbas": 308, "mask_shap": [308, 309], "is_contigu": 308, "tile": 309, "tilepatternbas": 309, "tilepattern_1x1": 309, "1x1": [309, 442, 455, 479], "tilepattern_2x2": 309, "2x2": [309, 487], "tilepattern_1x16": 309, "1x16": 309, "tilepattern_4x1": 309, "tilepattern_1x2": 309, "1x2": [309, 487], "patternnxm": 313, "patternninm": 313, "reset_non_value_to_default": 314, "obejct": 314, "parse_not_to_prun": 314, "update_frequency_on_step": [315, 481], "max_sparsity_ratio_per_lay": [315, 481], "magnitudeprun": 315, "snipprun": 315, "snipmomentumprun": 315, "moreoev": 315, "least": [316, 455, 479, 490], "templat": [316, 455, 479], "tree": [316, 332, 393], "huggingface_model": 316, "eager": [316, 376, 444, 451, 482, 483, 488], "config_file_path": 316, "pruner_info": 316, "quantconf": 318, "server": [319, 475], "seper": 319, "opt_model": [319, 455], "fulli": [319, 455, 482, 487], "train_func": [319, 398, 444, 455, 482], "automixedprecisiontunestrategi": [320, 379], "basictunestrategi": [321, 380], "stage": [321, 326, 378, 380, 387, 442, 479, 488, 490], "polici": [321, 325, 378, 380, 386, 413, 418, 492, 494], "bayesiantunestrategi": [322, 381], "acq_max": [322, 381], "ac": [322, 381], "gp": [322, 381], "y_max": [322, 381], "n_warmup": [322, 381], "10000": [322, 381, 479], "n_iter": [322, 381], "acquisit": [322, 381], "gaussian": [322, 381, 490], "relev": [322, 381, 420, 421], "acq": [322, 381], "randomst": [322, 381], "scipi": [322, 381], "x_max": [322, 381], "targetspac": [322, 381], "pbound": [322, 381], "9527": [322, 381, 455, 492], "allow": [322, 381, 442, 444, 454, 455, 456, 481, 487, 490, 492], "bayesianoptim": [322, 381], "exhaustivetunestrategi": [323, 383], "msetunestrategi": [325, 386], "mse_v2tunestrategi": [326, 387], "revert": [326, 334, 387, 395, 490], "randomtunestrategi": [327, 388], "strategy_registri": [328, 389, 490], "tunestrategi": [328, 389, 490], "tuningsamplerregistri": 331, "tuningsampl": [331, 392], "tuningord": [331, 392], "Not": [331, 332, 392, 393, 409, 416], "tuningspac": [331, 332, 392, 393], "tuning_order_lst": [331, 392], "initial_op_tuning_cfg": [331, 392], "modelwisetuningsampl": [331, 392], "tuning_items_prior": [331, 392], "op_dtype_dict": [331, 392], "optuningconfig": [331, 332, 333, 392, 393, 394], "optypewisetuningsampl": [331, 392], "opwisetuningsampl": [331, 392], "fallbacktuningsampl": [331, 392], "op_dtyp": [331, 392], "accumul": [331, 392, 490], "skip_first": [331, 392], "smoothquantsampl": [331, 392], "tuningitem": [332, 393], "item_typ": [332, 393], "pattern_to_intern": [332, 393], "default_dtyp": [332, 393], "pattern_to_path": [332, 393], "quant_mode_from_pattern": [332, 393], "internal_pattern": [332, 393], "initial_tuning_cfg_with_quant_mod": [332, 393], "op_name_typ": [332, 393], "step1": [332, 393], "step2": [332, 393], "complet": [332, 393, 419, 420, 482, 490, 492, 493], "step3": [332, 393], "step4": [332, 393], "step5": [332, 393], "op_quant_mod": [333, 394], "ordereddefaultdict": [334, 395], "extract_data_typ": [334, 395], "data_typ": [334, 395], "sign": [334, 395, 414, 421, 437, 482, 486], "reverted_data_typ": [334, 395], "signed_flag": [334, 395], "get_adaptor_nam": [334, 395], "experiment": [335, 370, 375, 416, 439, 443, 444, 446, 455, 479, 481, 485, 489], "base_model": [335, 346], "keras_model": [335, 346], "mxnet_model": [335, 346], "nets_factori": [335, 346], "onnx_model": [335, 346, 370], "tensorflow_model": [335, 346, 375], "torch_model": [335, 346], "collect_layer_histogram": [335, 402], "create_obj_from_config": [335, 402], "kl_diverg": [335, 402], "load_huggingfac": [335, 402, 455], "neural_insights_util": [335, 402], "weights_detail": [335, 402], "sub_class": [343, 377], "register_customer_metr": 343, "tell": [343, 377, 481], "topk": [343, 377, 444, 454, 455, 482], "matrix": [343, 377, 418, 466, 491], "frozen": [344, 352, 377, 457], "savedmodel": [344, 352, 377, 493], "chould": 344, "onnx_ml_pb2": [344, 457], "hybirdblock": [344, 377], "paramt": [344, 398], "basemodel": 345, "plai": [345, 480, 484, 487], "role": [345, 484, 487], "kerasmodel": 347, "get_model_fwk_nam": 348, "fwk": 348, "mxnetmodel": 349, "net": 350, "tfslimnetsfactori": 350, "onnxmodel": [351, 370], "get_model_typ": 352, "validate_graph_nod": 352, "validate_and_inference_input_output": 352, "output_tensor_nam": 352, "graph_sess": 352, "graph_def_sess": 352, "frozen_pb_sess": 352, "load_saved_model": 352, "saved_model_tag": 352, "signatur": 352, "saved_model_dir": 352, "tag": [352, 487, 488], "metagraphdef": 352, "keras_sess": 352, "slim_sess": 352, "checkpoint_sess": 352, "estimator_sess": 352, "saved_model_sess": 352, "tensorflowbasemodel": [352, 375], "tensorflowsavedmodelmodel": 352, "tensorflowqatmodel": 352, "tensorflowcheckpointmodel": 352, "checkpoint": [352, 408, 457], "tensorflowmodel": 352, "pytorchbasemodel": 353, "pytorchfxmodel": 353, "ipexmodel": 353, "driven": [354, 418, 455, 475, 477, 488], "objective_registri": 354, "objective_custom_registri": 354, "obj_cl": 354, "eural_compressor": 354, "objective_cl": 354, "user_object": 354, "__class__": 354, "__name__": 354, "objective_cfg": 354, "usr_cfg": 354, "user_obj_cfg": 354, "easili": [354, 419, 459, 463, 475, 477, 487], "peak": [354, 477], "multiobject": 354, "metric_criterion": 354, "metric_weight": 354, "obj_criterion": 354, "obj_weight": 354, "is_measur": 354, "parserfactori": 356, "onnxrtparserfactori": 358, "onnxprofilingpars": 360, "respons": [360, 361, 365, 482], "profilingpars": 361, "profilingresult": 362, "total_execution_tim": 362, "accelerator_execution_tim": 362, "cpu_execution_tim": 362, "op_run": 362, "op_defin": 362, "tensorflowparserfactori": 363, "tensorflowprofilingpars": 365, "profilerfactori": [366, 368, 373], "create_onnx_config": 371, "ort": 371, "sessionopt": 371, "delete_assign": 376, "create_tf_config": 376, "tf_modul": 376, "configproto": 376, "set_eager_execut": 376, "entir": [377, 398, 415, 420, 421, 437, 479, 487], "autotunestrategi": 378, "conservativetunestrategi": 382, "o0": [382, 490], "who": [382, 413], "hawq_v2tunestrategi": 384, "made": [384, 419, 482, 485, 490], "impact": [384, 485, 490], "tunestrategymeta": 389, "metaclass": 389, "lowerbitssampl": 392, "blockfallbacktuningsampl": 392, "op_block_lst": 392, "target_dtyp": 392, "alpha_list": 392, "quantopt": 395, "quant_typ": 395, "quant_opt": 395, "preprocess_user_cfg": 395, "op_user_cfg": 395, "op_user_cfg_modifi": 395, "build_slave_faker_model": 395, "slave": [395, 490], "virtual": [395, 480], "classregist": 395, "fun": 396, "attribute1": 396, "module_debug_level1": 396, "debug": [396, 405, 441, 468, 472, 476, 490, 491], "function1": 396, "param1": 396, "param2": 396, "parameter1": 396, "parameter2": 396, "o": [396, 452, 460, 487], "function2": 396, "pep": 396, "484": 396, "output_model": [396, 455, 488], "function3": 396, "section": [396, 421, 441, 442, 443, 475, 479, 481, 492], "restructuredtext": 396, "liter": 396, "attributeerror": 396, "except": [396, 409], "generator1": 396, "example_gener": 396, "exampleclass": 396, "param3": 396, "public": [396, 413, 470, 473], "attr1": 396, "attr2": 396, "attr5": 396, "api_doc_exampl": 397, "loop": [398, 415, 416, 420, 421, 448, 486, 490], "compressionmanag": 398, "uesd": 398, "deal": 398, "pruningconfig": 398, "orchestr": [398, 418, 451, 491], "on_train_begin": [398, 415, 442, 443, 455, 478, 479, 482], "train_loop": [398, 455, 478], "on_epoch_begin": [398, 401, 442, 443, 455, 478], "on_step_begin": [398, 401, 442, 443, 455, 478, 479], "on_after_compute_loss": [398, 442, 443, 455, 478], "backward": [398, 442, 443, 444, 455, 478, 479, 482, 485], "on_before_optimizer_step": [398, 442, 443, 455, 478, 479], "on_step_end": [398, 401, 442, 443, 455, 478], "on_epoch_end": [398, 401, 442, 443, 455, 478], "on_train_end": [398, 442, 443, 455, 478, 479, 482], "path_to_sav": 398, "manag": [398, 401, 455, 458, 459, 469], "top1": [398, 454, 479, 482, 493], "callbacks_list": 398, "layerhistogramcollector": 399, "layer_tensor": 399, "include_lay": 399, "get_func_from_config": 401, "func_dict": 401, "get_preprocess": 401, "get_metr": 401, "get_postprocess": 401, "get_algorithm": 401, "algo": 401, "create_dataset": 401, "cfg_preprocess": 401, "cfg_filter": 401, "create_dataload": 401, "dataloader_cfg": 401, "create_eval_func": 401, "postprocess_cfg": 401, "fp32_baselin": [401, 419], "baselin": [401, 486, 488], "create_train_func": 401, "train_cfg": 401, "Their": 401, "auxiliari": 402, "optimizedmodel": 404, "from_pretrain": [404, 455], "save_for_huggingface_upstream": [404, 455], "output_dir": [404, 455, 463, 464], "msg": 405, "fatal": 405, "warn": 405, "warin": 405, "alia": [405, 409, 460, 465], "insight": [406, 418, 441, 480, 485, 490, 491], "register_neural_insights_workload": 406, "workload_loc": [406, 409], "workload_mod": 406, "workload": [406, 409, 480], "uuid": 406, "update_neural_insights_workload": 406, "workload_uuid": 406, "update_neural_insights_workload_accuracy_data": 406, "baseline_accuraci": 406, "optimized_accuraci": 406, "is_int8_model": 408, "checkpoint_dir": 408, "history_cfg": 408, "best_configur": 408, "best_model_weight": 408, "pt": [408, 457, 480, 482, 483, 484], "snapshot": 408, "cfg_from_fil": 409, "yaml_fil": [409, 439, 444], "lazyimport": 409, "lazi": 409, "till": [409, 490], "decorat": 409, "time_limit": 409, "get_siz": 409, "seen": [409, 419], "recurs": 409, "compute_spars": 409, "fault_tolerant_fil": 409, "equal_dict": 409, "d2": 409, "compare_kei": 409, "ignore_kei": 409, "cpuinfo": 409, "dump_elapsed_tim": [409, 419], "customized_msg": 409, "elaps": 409, "combine_histogram": 409, "old_hist": 409, "old": [409, 455, 485], "get_tensor_histogram": 409, "get_all_fp32_data": 409, "get_tuning_histori": 409, "tuning_history_path": 409, "offlin": [409, 413, 455, 482, 487], "str2arrai": 409, "dequantize_weight": 409, "weight_tensor": 409, "min_filter_tensor": 409, "max_filter_tensor": 409, "scale_info": 409, "captureoutputtofil": 409, "tmp_file_path": 409, "stream": [409, 493], "sy": [409, 461], "stderr": 409, "captur": 409, "statist": [409, 410], "header": [409, 447], "field_nam": 409, "output_handl": 409, "printer": 409, "global_st": 409, "load_data_from_pkl": 409, "pkl": 409, "dump_data_to_loc": 409, "show_memory_info": 409, "hint": 409, "dump_class_attr": 409, "compare_object": 409, "obj1": 409, "obj2": 409, "ignore_attr": 409, "comparison": [409, 485, 488], "alias_param": 409, "param_nam": 409, "param_alia": 409, "alias": 409, "print_tabl": 409, "column_map": 409, "table_entri": 409, "titl": [409, 453, 476, 490], "insert_newlin": 409, "prettyt": 409, "column": [409, 487], "func": [409, 420, 482, 492], "handler": [409, 490], "row": [409, 441, 487], "decim": 409, "get_tensors_info": 409, "get_weights_detail": 409, "weightdetail": 409, "dump_tabl": 409, "filepath": 409, "file_typ": 409, "csv": [409, 416], "dump_table_to_csv": 409, "get_number_of_socket": 409, "platform": [409, 418, 451, 458, 466, 480, 482], "opentri": 409, "activation_min": 409, "activation_max": 409, "print_op_list": 409, "get_op_list": 409, "minmax_file_path": 409, "input_model_tensor": 409, "optimized_model_tensor": 409, "activation_min_max": 409, "calculate_ms": 409, "mse_metric_gap": 409, "fp32_tensor": 409, "dequantize_tensor": 409, "euclidean": [409, 442], "distanc": [409, 442], "weightsdetail": 410, "input_tensor_data": 410, "optimized_tensor_data": 410, "weightsstatist": 410, "welcom": [412, 413, 414, 418, 494], "interest": [413, 418, 488], "foster": 413, "particip": 413, "commun": 413, "harass": 413, "experi": [413, 458, 486, 487, 490], "everyon": 413, "regardless": 413, "ag": 413, "bodi": 413, "ethnic": 413, "characterist": 413, "gender": 413, "educ": 413, "socio": 413, "econom": 413, "appear": [413, 469, 475], "race": 413, "religion": 413, "sexual": 413, "orient": 413, "behavior": [413, 414, 419, 420, 421, 448, 457, 488, 490, 492], "contribut": [413, 418, 479], "inclus": 413, "Being": 413, "respect": [413, 448, 479, 487, 492], "viewpoint": 413, "gracefulli": 413, "focus": [413, 419], "empathi": 413, "toward": [413, 442], "member": [413, 419], "unaccept": 413, "imageri": 413, "unwelcom": 413, "troll": 413, "insult": 413, "derogatori": 413, "comment": [413, 420, 439, 454, 455, 484, 489], "polit": 413, "attack": 413, "privat": 413, "publish": [413, 453, 456, 476, 487], "electron": 413, "explicit": 413, "permiss": 413, "inappropri": 413, "profession": 413, "clarifi": 413, "appropri": [413, 437, 487], "fair": 413, "action": [413, 470, 473], "edit": 413, "reject": 413, "commit": [413, 414], "wiki": 413, "issu": [413, 414, 417, 452, 482, 488], "ban": 413, "temporarili": 413, "deem": 413, "threaten": 413, "offens": 413, "harm": 413, "mail": 413, "social": [413, 418, 480], "media": [413, 418, 480], "account": [413, 486, 490], "appoint": 413, "onlin": [413, 486], "event": [413, 488], "abus": 413, "report": [413, 414, 486], "contact": [413, 485, 486], "complaint": 413, "review": [413, 414], "investig": 413, "circumst": [413, 481], "oblig": 413, "confidenti": 413, "regard": [413, 483], "incid": 413, "separ": [413, 450, 453, 478, 481], "good": [413, 482, 490], "faith": 413, "face": [413, 418, 426, 458, 462, 480, 485, 493], "repercuss": 413, "leadership": 413, "faq": [413, 418], "page": [413, 414], "send": [414, 420], "view": [414, 418, 445, 466, 475, 485], "pylint": 414, "flake8": 414, "autopep8": 414, "cover": [414, 446, 450, 480], "would": [414, 455, 479, 482, 487], "adopt": [414, 458, 479, 480, 487], "certif": 414, "agre": 414, "j": [414, 418, 487, 493], "bug": 414, "jira": 414, "ticket": 414, "potenti": [414, 416, 441], "risk": 414, "pr": [414, 438, 454, 470, 473, 485], "reproduc": 414, "hardwar": [414, 418, 419, 442, 451, 455, 475, 479, 480, 481], "submit": [414, 480], "intend": 414, "safe": 414, "collabor": [414, 460, 466], "adher": 414, "toolkit": [415, 452, 458, 466, 480, 491], "tracer": 415, "resolv": [415, 417], "floatfunct": 415, "cat": [415, 446, 461], "done": [415, 442, 443, 459, 475, 479, 482], "10004": [415, 416, 419, 438, 442, 443, 448, 451, 456, 478, 481, 484, 492], "neural_compressor": [415, 416, 418, 421, 436, 438, 439, 441, 442, 443, 444, 446, 449, 450, 454, 455, 456, 457, 477, 478, 479, 481, 482, 483, 485, 486, 487, 489, 490, 492], "eval": [415, 438, 441, 458, 482, 488], "fail": [415, 438, 446], "conduct": [415, 455, 463, 475, 490, 491], "imper": 415, "therefor": [415, 455, 479, 482, 485, 487], "lot": [415, 487], "As": [415, 420, 438, 442, 454, 455, 469, 479, 484, 490], "failur": 415, "successfulli": [415, 444, 480], "suggest": [415, 486], "traceabl": 415, "proxi": 415, "tutori": [415, 466, 480, 491], "prototyp": 415, "html": [415, 418, 470, 473], "highlight": 415, "untrac": 415, "ssd": [415, 446, 493], "resnet34": [415, 493], "r34": 415, "bboxes_labels_scor": 415, "prob": 415, "45": [415, 487, 493], "max_output": 415, "zip": 415, "dbox": 415, "dlabel": 415, "dscore": 415, "decode_singl": 415, "autom": [416, 418, 458, 475, 476, 480, 487], "artifici": 416, "ann": 416, "par": 416, "outperform": 416, "hand": 416, "propos": [416, 419, 442, 456, 487], "lie": [416, 437], "predictor": 416, "shown": [416, 438, 441, 442, 454, 455, 469, 477, 478, 479, 487, 490], "figur": [416, 468, 469, 472], "popul": 416, "inner": 416, "evolutionari": 416, "cycl": 416, "until": [416, 420, 490], "conclud": 416, "met": [416, 448, 482, 488], "yet": [416, 470, 473, 476], "simplest": [416, 437, 461], "launcher": [416, 418, 442, 443, 466, 491], "agent": 416, "nsga2": 416, "supernet": 416, "ofa_mbv3_d234_e346_k357_w1": 416, "acc": [416, 479, 488, 493], "mac": [416, 476], "num_ev": 416, "250": [416, 479], "results_csv_path": 416, "search_result": 416, "dataset_path": 416, "ilsvrc2012": 416, "aim": [416, 418, 458, 479, 487, 490, 491], "mobilenetv3": 416, "lt": [416, 439, 493], "wmt": 416, "en": 416, "de": 416, "guidelin": [417, 418], "mainstream": [418, 491], "learn": [418, 419, 420, 438, 439, 446, 450, 451, 452, 455, 456, 458, 460, 463, 464, 466, 469, 470, 473, 475, 479, 480, 482, 487, 488, 490, 491], "runtim": [418, 419, 420, 422, 438, 441, 445, 448, 451, 456, 460, 465, 466, 481, 485], "workflow": [418, 420, 421, 441, 442, 446, 452, 456, 470, 473, 488, 491], "particular": [418, 479], "wide": [418, 445, 456, 479, 482, 493], "xeon": [418, 452, 453, 456, 480, 482, 483, 493], "scalabl": [418, 452, 456, 480, 482, 483], "processor": [418, 456, 480, 482, 483], "flex": [418, 452], "amd": [418, 451, 452, 493], "arm": [418, 451, 452, 493], "nvidia": [418, 437, 451, 452, 493], "bloom": [418, 487], "176b": [418, 487], "7b": [418, 487, 493], "stabl": [418, 452, 479, 480], "diffus": [418, 480], "gpt": [418, 479, 487, 493], "hub": [418, 445, 449, 466], "hug": [418, 480], "vision": [418, 446, 462, 487], "coder": [418, 451, 459, 460, 463, 466, 469, 480], "cloud": [418, 480], "marketplac": [418, 476, 480], "googl": [418, 456, 480], "amazon": [418, 458, 466], "web": [418, 488], "servic": [418, 475, 480], "azur": [418, 480], "softwar": [418, 453, 479, 480, 485], "alibaba": [418, 465, 472, 473, 480], "tencent": [418, 480], "taco": [418, 480], "ai": [418, 458, 480, 483, 491], "ecosystem": [418, 480], "lightn": [418, 465], "pip": [418, 441, 444, 447, 449, 452, 460, 463, 468, 470, 472, 473, 485], "wget": [418, 441, 447, 449], "storag": [418, 449, 454, 484, 487], "googleapi": [418, 449], "v1_6": [418, 449], "mobilenet_v1_1": [418, 449], "0_224_frozen": [418, 449], "overview": [418, 490], "jupyterlab": [418, 458, 464, 466, 468, 472, 491], "studio": [418, 466, 475, 491], "topic": 418, "innov": [418, 466, 480], "onnxcommunitymeetup2023": [418, 480], "juli": [418, 480], "2023": [418, 484, 487, 493], "blog": [418, 480], "llama": [418, 480], "msft": [418, 480], "oliv": [418, 480], "friendli": [418, 448, 455, 480, 487, 491, 492], "toolchain": [418, 447, 480], "june": [418, 480], "neurip": [418, 480], "oct": [418, 480], "quala": [418, 480], "minilm": [418, 480, 493], "releas": [418, 452, 464, 466, 468, 472, 474, 494], "legal": [418, 494], "secur": [418, 480, 494], "idea": [418, 479, 487, 490], "feel": 418, "bridg": [419, 420, 451], "vanilla": [419, 420, 451], "abcadaptor": 419, "__init__": [419, 438, 439, 454, 490], "query_fw_cap": [419, 421], "query_fused_pattern": 419, "he": 419, "besid": [419, 442, 484], "describ": [419, 421, 441, 448, 488], "past": [419, 484], "mainten": 419, "difficult": [419, 487], "abil": [419, 420, 439, 448, 487], "modif": [419, 448, 463], "fragment": 419, "scenario": [419, 436, 442, 455, 479, 484], "granular": [419, 420, 421, 448, 451, 461, 482, 487, 492], "semant": [419, 448], "mla": [419, 456, 482], "becom": [419, 446, 479, 484], "explor": 419, "inspect_tensor": 419, "op_list": [419, 488], "iteration_list": 419, "inspect_typ": 419, "save_to_disk": 419, "quantization_cfg": 419, "set_tensor": 419, "tensor_dict": 419, "diagnosis_help": 419, "fw": 420, "outlin": [420, 421], "instruct": [420, 421, 442, 452, 456, 470, 473, 480, 481, 482], "extend": [420, 421], "accommod": [420, 421], "incorpor": [420, 421, 443, 490], "give": [420, 475, 490], "diagram": [420, 421, 441, 490], "illustr": [420, 421, 443, 490], "sequencediagram": [420, 421], "autonumb": [420, 421], "query_framework_cap": 420, "opwis": 420, "optypewis": 420, "travers": [420, 421, 490], "\u2776": 420, "\u2777": 420, "\u2778": 420, "\u2779": 420, "\u277a": 420, "\u277b": 420, "previou": [420, 421, 455, 479, 485, 487, 488, 490, 491], "\u277c": 420, "These": [420, 451], "chapter": 420, "confirm": 420, "chosen": [420, 437], "framework_yaml": 420, "int8_conv_config": 420, "node_op": 420, "optype_wise_": 420, "per_tensor": [420, 421, 448, 482, 492], "exmapl": 420, "tuning_cfg_to_fw": 420, "Its": [420, 437], "calib_iter": 420, "dispatch": [420, 451], "is_perchannel": 420, "is_asymmetr": 420, "weight_bit": 420, "convert_bf16": 420, "calib": 420, "larger": [420, 479, 484, 487], "somewhat": 420, "distort": 420, "line": [420, 444, 451, 458, 463, 464, 488], "At": [420, 490], "explain": [421, 441, 487], "let": [421, 448, 463, 479, 481, 492], "overal": [421, 492], "drive": 421, "uint4": 421, "asymmetr": [421, 482, 490], "kullback": [421, 442], "leibler": [421, 442], "pytorch_cpu": 421, "1_11_capabl": 421, "cap_s8_1_11": 421, "cap_s8_1_11_conv1d": 421, "per_channel_symmetr": 421, "addition": [421, 444, 490], "per_tensor_symmetr": 421, "One": [421, 439, 444, 451, 479, 480, 490], "due": [421, 446, 479, 482, 487, 488], "nativ": 421, "with_arg": 421, "qscheme": 421, "torch_dtyp": 421, "quant_min": 421, "quant_max": 421, "linux": [436, 447, 469, 475], "x86_64": 436, "aarch64": 436, "prove": [437, 487], "benefici": 437, "uniform": 437, "\u03b2": 437, "\u03b1": 437, "fundament": [437, 455], "primari": [437, 490], "focu": [437, 490], "essenti": [437, 447], "remaind": 437, "enhanc": [437, 458, 480, 483], "resolut": 437, "extrem": 437, "still": [437, 455, 480, 482, 483], "retain": 437, "noteworthi": 437, "vanhouck": 437, "vincent": 437, "andrew": 437, "senior": 437, "mark": 437, "mao": 437, "speed": [437, 455, 466, 479, 480, 482, 490], "2011": 437, "szymon": 437, "migacz": 437, "2017": 437, "mckinstri": 437, "jeffrei": 437, "l": [437, 442, 488, 490], "discov": [437, 488], "preprint": [437, 479, 484, 487], "1809": 437, "04191": 437, "2018": 437, "encount": 438, "consum": 438, "previous": 438, "lack": [438, 447], "faster": [438, 440, 446, 480, 490, 493], "treat": 438, "Of": 438, "getitem": 438, "fn": 438, "evenli": 438, "divid": [438, 487, 490], "discard": 438, "throw": 438, "awai": 438, "draw": [438, 486, 490], "worker": [438, 455, 482], "subprocess": 438, "pin": [438, 468, 472], "reshuffl": 438, "manner": [438, 442, 457], "newdataload": 438, "customis": [438, 439, 454], "ensp": [439, 489], "imagerecord": [439, 444, 492], "image_nam": 439, "cocorecord": 439, "gt": [439, 487, 489], "int64": 439, "offer": 439, "style_transf": 439, "content": 439, "tfrecorddataset": 439, "labelbal": 439, "300": 439, "16": [439, 484, 487, 493], "helloworld": [439, 456, 489], "aid": 440, "deploy": [440, 458, 475, 480, 487], "infrastructur": 440, "gap": [441, 457], "diagnos": 441, "gui": [441, 451, 479], "termin": [441, 468, 469, 472], "repeat": [441, 490], "durat": [441, 486], "git": [441, 447, 452], "clone": [441, 452, 468, 472], "cd": [441, 444, 452], "setup": [441, 448, 452, 470, 473, 479], "ilsvr2012": 441, "caff": 441, "berkeleyvis": 441, "caffe_ilsvrc12": 441, "xvzf": 441, "image_recognit": [441, 488], "resnet50_torchvis": 441, "ptq_static": 441, "resnet50_v1": [441, 444, 455], "dataset_loc": [441, 488], "label_path": 441, "quantiti": 441, "vec": 441, "mu": 441, "frac": [441, 487], "sigma": 441, "var": 441, "happen": 441, "dispers": 441, "trust": 441, "rule": [441, 458, 479], "v0": [441, 488], "cg": [441, 488], "conv0": [441, 488], "expens": [442, 455, 490], "deploi": [442, 455, 484, 490], "power": [442, 455, 469, 480], "mobil": [442, 455, 493], "produc": 442, "logit": 442, "softmax": 442, "kd": 442, "patient": 442, "compact": [442, 455, 461, 479], "agnost": 442, "resourc": [442, 490], "convolut": [442, 480], "ia": 442, "attach": [442, 455, 487], "shallow": 442, "deepest": 442, "deeper": 442, "paper": [442, 479, 484, 487], "10006": [442, 443], "student_output": [442, 443], "student_loss": [442, 443], "training_func_for_nc": [442, 443], "distil_loss_conf": 442, "accordingli": [442, 466], "promis": [443, 455, 479], "huge": [443, 479], "heavi": 443, "light": 443, "booster": 443, "degrad": [443, 479, 490], "novel": [443, 458, 469, 475], "place": [443, 452, 479, 488], "comb": 443, "distillation_criterion": [443, 455, 478], "q_conf": 443, "horovod": 444, "instal": [444, 447, 449, 458, 460, 463, 466, 470, 473, 475, 476, 494], "builtin": 444, "program": [444, 453, 458, 475], "enable_eager_execut": 444, "yaml_file_path": 444, "pre_process": 444, "simpli": [444, 457, 458, 460, 463, 475], "evaluation_result": 444, "evaluation_time_cost": 444, "partit": [444, 479], "distributedsampl": 444, "train_sampl": 444, "train_dataset": [444, 482], "num_replica": 444, "rank": 444, "train_load": 444, "train_kwarg": 444, "adadelta": 444, "distributedoptim": 444, "named_paramet": 444, "broadcast_paramet": 444, "root_rank": 444, "broadcast_optimizer_st": 444, "set_epoch": 444, "batch_idx": 444, "zero_grad": [444, 455, 479], "nll_loss": 444, "log_interv": 444, "0f": 444, "tloss": 444, "6f": 444, "dry_run": 444, "test_func": 444, "host": 444, "num_of_process": 444, "002": 444, "ssh": [444, 475], "prompt": 444, "readm": 444, "exactli": [444, 459], "recognit": [444, 446, 479, 488], "resizecropimagenet": [444, 489], "realiz": [444, 477, 483, 486], "tow": 444, "node1": 444, "node2": 444, "TO": [444, 460], "your_node1_nam": 444, "your_node2_nam": 444, "resnet50_fp32_pretrained_model": 444, "nc_resnet50_v1": 444, "resnet": [444, 493], "varieti": [445, 481, 490], "demonstr": [445, 458, 488], "10k": [445, 449], "speedup": [445, 451, 482], "2x": [445, 451], "vnni": [445, 451, 481, 482], "exchang": 446, "hope": 446, "inc_model": [446, 457], "fp32_onnx_config": 446, "verifi": 446, "vgg16": [446, 493], "mobilenet": [446, 486, 493], "rcnn": 446, "torchscript": [446, 487], "unsupport": [446, 455, 479], "add_relu": 446, "conv1d_relu": 446, "conv2d_relu": 446, "group_norm": 446, "hardswish": 446, "instance_norm": 446, "layer_norm": 446, "leaky_relu": 446, "sigmoid": 446, "bare": 447, "metal": 447, "sudo": [447, 461], "apt": [447, 452, 461, 469], "python3": 447, "dev": [447, 468, 472], "distutil": 447, "libgl1": 447, "mesa": 447, "glx": 447, "libglib2": 447, "ln": 447, "sf": 447, "usr": 447, "incompat": 447, "88": [447, 486, 493], "80": [447, 487, 488, 493], "pyobject": 447, "reinstal": 447, "importerror": 447, "libgl": 447, "No": [447, 455, 480], "yum": [447, 452], "opencv": [447, 469], "conda": [447, 452, 461, 469, 485], "13": [447, 452, 485, 487, 493], "pend": 447, "sqlalchemi": 447, "27": [447, 493], "alemb": 447, "forg": [447, 452], "quick": [448, 456, 491, 492], "dive": [448, 491], "unless": 448, "purpos": [448, 456, 475, 481, 482], "syntax": 448, "go": [448, 470, 473, 481, 489], "up1": 448, "up2": 448, "valid_mixed_precis": 448, "addn": 448, "grappler_optim": 448, "constfold": 448, "arithmet": 448, "debug_stripp": 448, "major": [450, 482, 487], "concept": [450, 486, 491], "rather": 450, "custom_metr": 450, "refin": [450, 479], "broad": [451, 464, 491], "420": 451, "geomean": 451, "snippet": 451, "upload": [451, 470, 473], "click": [451, 458, 459, 466, 469, 475, 480, 488], "button": [451, 469, 475], "qintegerop": [451, 482], "plan": 451, "oneapi": [452, 480, 491], "analyt": [452, 480, 491], "success": 452, "11": [452, 454, 456, 487, 490, 493], "frequent": 452, "ask": 452, "pypi": [452, 470, 473], "nightli": 452, "consolid": 452, "latest": [452, 480, 485], "eas": [452, 460, 480], "along": [452, 479], "streamlin": [452, 480], "scienc": 452, "websit": 452, "anaconda": 452, "suit": [452, 476, 488], "esri": 452, "formerli": 452, "skylak": 452, "cascad": 452, "lake": [452, 456, 480], "cooper": [452, 456, 480], "ic": [452, 480], "sapphir": 452, "rapid": 452, "hbm": 452, "arctic": 452, "sound": 452, "pont": 452, "vecchio": 452, "cento": [452, 493], "ubuntu": 452, "22": [452, 493], "04": [452, 493], "fortensorflow": 452, "forpytorch": 452, "12": 452, "tf_enable_onednn_opt": 452, "onednn": [452, 456, 482], "newer": 452, "copyright": 453, "subject": 453, "accompani": [453, 490], "research": [453, 487], "wish": 453, "bibtex": 453, "misc": 453, "author": 453, "feng": 453, "tian": 453, "hanwen": 453, "haihao": [453, 479], "shen": [453, 479], "suyu": 453, "chen": 453, "howpublish": 453, "year": 453, "logo": 453, "atom": 453, "phi": 453, "pentium": 453, "vtune": 453, "corpor": 453, "subsidiari": 453, "brand": 453, "claim": 453, "popularli": 454, "industri": [454, 480], "label_map": 454, "decis": 454, "ap": 454, "curv": 454, "turn": [454, 469], "target_boxes_num": 454, "str_label": 454, "int_label": 454, "inturn": 454, "cocomap": 454, "vocmap": 454, "categor": 454, "multiclass": 454, "multilabel": 454, "newmetr": 454, "reset": 454, "reflect": [454, 489], "new_metr": 454, "deliv": [455, 480, 485], "conveni": 455, "upgrad": 455, "veri": [455, 476, 482, 490, 491], "comprehens": [455, 491], "kind": 455, "resort": 455, "automodelforsequenceclassif": 455, "autotoken": 455, "val_dataset": [455, 482], "val_dataload": [455, 482], "ping_memori": [455, 482], "formul": 455, "effort": 455, "written": 455, "onnxrt_integ": [455, 492], "onnxrt_qlinear": [455, 492], "image_tensor": [455, 492], "post_training_dynamic_qu": [455, 481, 490], "1000": [455, 492], "2000": 455, "sampling_s": [455, 492], "model_wis": [455, 492], "op_dict": 455, "op_wis": [455, 488, 492], "sigopt_api_token": [455, 486, 490], "sigopt_project_id": [455, 486, 490], "sigopt_experiment_nam": [455, 486, 490], "demo": 455, "600": 455, "training_arg": 455, "emul": [455, 482], "trainer": [455, 466], "briefli": [455, 487], "maxim": [455, 479, 490], "pruning_func": 455, "train_dataload": [455, 479, 482], "n_gpu": 455, "gradient_accumulation_step": 455, "clip_grad_norm_": 455, "max_grad_norm": 455, "rate": [455, 479, 482], "start_epoch": [455, 481, 492], "end_epoch": [455, 481, 492], "97": [455, 487, 493], "newli": [455, 479], "on_after_optimizer_step": [455, 479], "layer3": [455, 479], "lr_schedul": [455, 479], "0004": 455, "nesterov": [455, 492], "randomresizedcrop": [455, 489], "totensor": [455, 489], "485": [455, 493], "456": [455, 493], "406": 455, "nepoch": 455, "cnt": 455, "loss_sum": 455, "iter_bar": 455, "tqdm": 455, "desc": 455, "teacher_logit": 455, "train_fun": 455, "training_func": 455, "recent": [455, 456], "growth": [455, 456, 479], "complex": [455, 456, 479], "significantli": [455, 456, 479, 490], "bandwidth": [455, 456, 484], "exit_polici": [455, 492], "determinist": 455, "arbitrari": [455, 478], "meaning": [455, 478], "reli": [455, 487], "prune_conf": 455, "quantization_aware_training_conf": 455, "aforement": 455, "inset": 455, "p_conf": [455, 478], "ssd_mobilenet_v1": 455, "benchmarkconf": 455, "half": [456, 466], "sixteen": 456, "launch": [456, 476], "3rd": [456, 480, 482, 483], "gen": [456, 480, 482, 483], "codenam": 456, "boost": [456, 459, 475, 479, 480], "x86": 456, "avx512": [456, 482], "vcvtne2ps2bf16": 456, "vcvtneps2bf16": 456, "vdpbf16p": 456, "fbgemm": [456, 482], "tensorrtexecutionprovid": [456, 482], "cudaexecutionprovid": [456, 482], "cuda": [456, 458, 460, 482], "dnnlexecutionprovid": [456, 482], "avx512_bf16": 456, "plu": 456, "resnet18": [456, 460, 493], "persist": 457, "brought": [457, 459, 466, 482], "tf2": 457, "h5": 457, "hybridblock": 457, "0000": 457, "saved_result": [457, 484], "simplifi": [458, 469, 475, 479, 480], "acquir": 458, "analysi": [458, 475, 479, 486], "heurist": [458, 475], "great": 458, "facilit": 458, "autocast": 458, "my_model": 458, "no_grad": 458, "memory_format": 458, "112": [458, 493], "rand": [458, 487], "plugin": [458, 476], "aw": [458, 466, 480, 493], "sagemak": [458, 466], "inlin": [458, 463, 466], "neural_cod": [458, 460, 462, 463, 464, 466], "bench": 458, "superbench": 458, "enjoi": [459, 463, 466], "rebuild": [459, 468, 472], "reload": [459, 476], "modern": [460, 484], "democrat": [460, 480], "programm": [460, 466, 475], "nano_bf16_channels_last": 460, "nano_bf16_ipex_channels_last": 460, "nano_bf16_ipex": 460, "nano_bf16": 460, "nano_fp32_channels_last": 460, "nano_fp32_ipex_channels_last": 460, "nano_fp32_ipex": 460, "nano_gpu_to_cpu": 460, "nano_int8": 460, "nano_jit_bf16_channels_last": 460, "nano_jit_bf16_ipex_channels_last": 460, "nano_jit_bf16_ipex": 460, "nano_jit_bf16": 460, "nano_jit_fp32_channels_last": 460, "nano_jit_fp32_ipex_channels_last": 460, "nano_jit_fp32_ipex": 460, "nano_jit_fp32": 460, "nano_onnxruntime_fp32": 460, "nano_onnxruntime_int8_qlinear": 460, "openvino": 460, "nano_openvino_fp32": 460, "nano_openvino_int8": 460, "bc": [461, 469], "conda_prefix": 461, "echo": 461, "tradit": [461, 479], "libjemalloc": 461, "libiomp5": 461, "home": 461, "lib": 461, "ld_preload": 461, "malloc_conf": 461, "oversize_threshold": 461, "background_thread": 461, "metadata_thp": 461, "dirty_decay_m": 461, "9000000000": 461, "muzzy_decay_m": 461, "kmp_affin": 461, "kmp_blocktim": 461, "dnnl_primitive_cache_capac": 461, "cpufreq": 461, "scaling_governor": 461, "powersav": 461, "tee": 461, "pytorch_jit_script": [462, 465], "pytorch_channels_last": [462, 465], "run_bench": 462, "patch": [462, 475], "patch_path": 462, "your_patch_path": 462, "sweep": 462, "sweep_object": 462, "bench_config": 462, "bench_featur": 462, "sai": 463, "run_glu": [463, 464], "requisit": 463, "task_nam": [463, 464], "do_ev": [463, 464], "remain": 463, "itself": 463, "run_glue_optim": 463, "static_ipex": 463, "auto_qu": 464, "v4": [464, 493], "albert": [464, 493], "sst2": 464, "alexnet": [464, 493], "pytorch_amp": 465, "optimize_for_infer": 465, "pytorch_jit_trac": 465, "pytorch_jit_script_ofi": 465, "pytorch_jit_trace_ofi": 465, "torchdynamo": 465, "pytorch_torchdynamo_jit_script": 465, "pytorch_torchdynamo_jit_trac": 465, "pytorch_torchdynamo_jit_script_ofi": 465, "pytorch_torchdynamo_jit_trace_ofi": 465, "pytorch_inc_bf16": 465, "pytorch_inc_static_quant_fx": 465, "pytorch_inc_static_quant_ipex": 465, "pytorch_inc_dynamic_qu": 465, "pytorch_ipex_fp32": 465, "pytorch_ipex_bf16": 465, "pytorch_ipex_int8_static_qu": 465, "pytorch_ipex_int8_dynamic_qu": 465, "blade": 465, "disc": 465, "pytorch_aliblad": 465, "pytorch_lightning_bf16_cpu": 465, "tensorflow_amp": 465, "keras_amp": 465, "tensorflow_inc": 465, "keras_inc": 465, "onnx_inc_static_quant_qlinear": 465, "onnx_inc_static_quant_qdq": 465, "onnx_inc_dynamic_qu": 465, "optimum": [465, 466], "pytorch_inc_huggingface_optimum_stat": 465, "pytorch_inc_huggingface_optimum_dynam": 465, "intel_extension_for_transform": 465, "bigdl": [465, 466], "nano": [465, 466], "nano_": 465, "inc_auto": 465, "delight": 466, "announc": 466, "v": [466, 475, 479, 490, 492], "500": 466, "jupyt": [466, 468, 469, 472], "isa": 466, "adjust": [466, 482, 487], "xpu": 466, "delta": 466, "acc_delta": 466, "int8_acc": 466, "fp32_acc": 466, "ext": [468, 470, 472, 473, 474], "lab": [468, 469, 470, 472, 473], "nodej": [468, 472], "jlpm": [468, 472], "yarn": [468, 472], "npm": [468, 469, 472], "lieu": [468, 472], "labextens": [468, 469, 472], "typescript": [468, 472], "watch": [468, 472], "immedi": [468, 472, 479], "refresh": [468, 472], "browser": [468, 472], "wait": [468, 472, 475], "rebuilt": [468, 472], "easier": [468, 472, 475, 480], "symlink": [468, 472], "down": 469, "finish": 469, "enter": [469, 475], "blank": 469, "cell": 469, "gain": [469, 478, 480], "mkl": 469, "jemalloc": 469, "pip3": 469, "headless": 469, "pyproject": [470, 473], "toml": [470, 473], "twine": [470, 473], "whl": [470, 473], "dist": [470, 473], "sdist": [470, 473], "bdist_wheel": [470, 473], "deprec": [470, 473, 485, 489], "frontend": [470, 473], "login": [470, 473, 486], "repositori": [470, 473], "cut": [470, 473], "fork": [470, 473], "admin_github_token": [470, 473], "pypi_token": [470, 473], "npm_token": [470, 473], "secret": [470, 473], "panel": [470, 473, 475], "draft": [470, 473], "changelog": [470, 473, 474], "pkg": [470, 473], "bot": [470, 473], "pick": [470, 473, 476], "feedstock": [470, 473], "hatch": 473, "notabl": 474, "vscode": [474, 476], "daili": 475, "advantag": [475, 479, 481, 490], "remot": 475, "re": [475, 484], "market": 475, "uninstal": 475, "fill": [475, 486, 489, 490], "upper": 475, "sidebar": 475, "hover": 475, "track": [475, 486], "argpars": 475, "pop": 475, "diff": 475, "manifest": 476, "declar": 476, "palett": 476, "registercommand": 476, "amodio": 476, "tsl": 476, "matcher": 476, "dbaeumer": 476, "eslint": 476, "press": 476, "f5": 476, "ctrl": 476, "hello": 476, "world": 476, "breakpoint": 476, "consol": 476, "relaunch": 476, "toolbar": 476, "node_modul": 476, "viewlet": 476, "dropdown": 476, "runner": 476, "startup": 476, "bundl": 476, "multi_object": 477, "benefit": 478, "instanti": 478, "neuron": 479, "art": 479, "grown": 479, "unpreced": 479, "increasingli": 479, "crucial": 479, "stand": [479, 490], "delet": 479, "commonli": 479, "shrink": 479, "contextu": 479, "howev": [479, 484, 487], "scene": 479, "haven": 479, "color": 479, "lowest": [479, 490], "formula": [479, 487], "emsp": 479, "downstream": 479, "finetun": [479, 493], "prone": 479, "co": 479, "discourag": 479, "push": [479, 484, 487], "penal": 479, "parameter": 479, "exemplifi": 479, "complement": 479, "fortieth": 479, "miss": [479, 482], "pruner2": 479, "mention": [479, 484], "readi": 479, "hesit": 479, "sst": [479, 493], "25": [479, 487, 493], "63": [479, 487, 493], "24": [479, 487, 490, 493], "35": [479, 493], "flan": 479, "t5": 479, "english": 479, "romanian": 479, "404": [479, 493], "381": 479, "yolov5": 479, "75": [479, 487, 493], "2x1": [479, 493], "801": 479, "7895": 479, "signific": [479, 480, 487], "reduct": [479, 492], "namhoon": 479, "lee": 479, "thalaiyasingam": 479, "ajanthan": 479, "philip": 479, "torr": 479, "2019": 479, "zafrir": 479, "ofir": 479, "ariel": 479, "larei": 479, "boudoukh": 479, "mosh": 479, "wasserblat": 479, "2111": 479, "05754": 479, "2021": 479, "medium": 480, "chatbot": 480, "netflix": 480, "apr": 480, "mlperf": [480, 493], "5x": 480, "heterogen": 480, "mar": 480, "busi": 480, "jan": 480, "amx": 480, "4th": [480, 482], "mleffici": 480, "dec": 480, "wechat": 480, "deepen": 480, "foundat": 480, "intellig": 480, "vmware": 480, "applianc": 480, "bitnami": 480, "nov": 480, "sota": 480, "few": [480, 490], "plug": 480, "twitter": 480, "linkedin": 480, "zone": 480, "land": 480, "gcp": 480, "pat": 480, "keynot": 480, "intelon": 480, "sep": 480, "chines": 480, "aug": 480, "purif": 480, "sacrif": 480, "jun": 480, "partner": 480, "feb": 480, "joint": 480, "bilibili": 480, "gestalt": 480, "ml": 480, "doubl": 480, "reconstruct": 480, "abound": 480, "lpot": [480, 485], "nextplatform": 480, "cern": 480, "gan": 480, "3dgan": 480, "iml": 480, "workshop": 480, "asplo": 480, "18": [480, 493], "highli": 480, "intelcaff": 480, "aris": 481, "henc": 481, "onnxrt_qoper": 481, "quant_aware_train": 481, "weight_compress": [481, 492], "initial_spars": [481, 492], "prune_typ": [481, 492], "basic_magnitud": [481, 492], "update_frequ": 481, "prune_domain": 481, "tile_pattern_1x1": 481, "invent": 482, "int4": 482, "cost": [482, 484], "On": [482, 493], "theoret": [482, 484], "zeropoint": 482, "255": [482, 487], "overflow": 482, "solv": [482, 485], "unseen": 482, "enough": 482, "peopl": 482, "mimic": 482, "fact": 482, "ultim": 482, "pain": 482, "lossi": 482, "chart": [482, 486, 488], "understand": [482, 488, 491], "philosophi": 482, "request": 482, "neither": 482, "nor": 482, "val_load": 482, "avg": 482, "themselv": 482, "ON": 483, "forc": 483, "postposttrainingquantconfig": 483, "bf16wrapper": 483, "retrac": 483, "preval": 484, "grow": 484, "demand": 484, "w8a8": 484, "trade": 484, "bottleneck": 484, "roughli": 484, "speak": 484, "capac": [484, 486], "flop": 484, "famou": 484, "approx": 484, "bmm": 484, "100x": 484, "straightforward": [484, 487], "excel": 484, "gptq": 484, "stai": [484, 487], "89": [484, 487, 493], "weightonlylinear": 484, "date": 484, "restor": 484, "qweight": 484, "wip": 484, "gptq_arg": 484, "percdamp": 484, "awq_arg": 484, "compressed_model": 484, "export_compressed_model": 484, "compression_dtyp": 484, "compression_dim": 484, "scale_dtyp": 484, "xiao": [484, 487], "guangxuan": [484, 487], "2211": [484, 487], "10438": [484, 487], "wei": [484, 487], "xiui": [484, 487], "suppress": [484, 487], "2209": [484, 487], "13325": [484, 487], "lin": 484, "ji": 484, "2306": 484, "00978": 484, "frantar": 484, "elia": 484, "site": 485, "assist": 485, "sed": 485, "your_script": 485, "backbon": 486, "interact": 486, "sigopt_experiment_id": 486, "nc": [486, 490], "certain": 486, "suffici": 486, "ordinari": 486, "receiv": 486, "latenc": [486, 490], "8266": 486, "8372": 486, "2132": 486, "83": [486, 487, 493], "7495": 486, "8299": 486, "8294": 486, "85": [486, 487, 493], "0837": 486, "8291": 486, "4469": 486, "gigant": 487, "systemat": 487, "quantif": 487, "migrat": [487, 491], "difficulti": 487, "mathemat": 487, "allevi": 487, "coarsest": 487, "finer": [487, 490], "matric": 487, "similarli": 487, "finest": 487, "consumpt": 487, "why": [487, 488], "suppos": 487, "6839": 487, "4741": 487, "7451": 487, "9301": 487, "1742": 487, "6835": 487, "q_min": 487, "q_max": 487, "q_x": 487, "clamp_": 487, "round_": 487, "w_q": 487, "00296431384049356": 487, "59": [487, 493], "172": 487, "192": 487, "w_dq": 487, "1220": 487, "0500": 487, "1430": 487, "2570": 487, "1890": 487, "mseloss": 487, "1983354538679123": 487, "6848": 487, "4743": 487, "7440": 487, "9308": 487, "1749": 487, "385297635664756e": 487, "07": [487, 492, 493], "affect": 487, "quantize_per_channel": 487, "x_tmp": 487, "detach": 487, "keepdim": 487, "dequantize_per_channel": 487, "0029": [487, 493], "0036": 487, "162": [487, 493], "48": [487, 493], "72": [487, 493], "93": [487, 493], "207": 487, "139": 487, "6837": 487, "4734": 487, "1751": 487, "6821": 487, "637690492221736e": 487, "6376e": 487, "3852e": 487, "cdot": 487, "quantize_per_tensor_absmax": 487, "n_bit": 487, "div_": 487, "0806": 487, "7589": 487, "6038": 487, "3815": 487, "5040": 487, "7174": 487, "5444": 487, "5826": 487, "7772": 487, "5555": 487, "3740": 487, "3253": 487, "0698": 487, "1381": 487, "5972": 487, "0086": 487, "0737": 487, "8298": 487, "6883": 487, "2991": 487, "1601": 487, "6506": 487, "8246": 487, "3924": 487, "3845": 487, "8768": 487, "w_scale": 487, "x_q": 487, "x_scale": 487, "84": [487, 493], "120": 487, "0059755356051027775": 487, "119": 487, "57": [487, 493], "91": [487, 493], "006533813662827015": 487, "y_q": 487, "17509": 487, "7608": 487, "4055": 487, "16599": 487, "21020": 487, "10016": 487, "9860": 487, "22444": 487, "y_dq": 487, "6836": 487, "2970": 487, "1583": 487, "6481": 487, "8207": 487, "3911": 487, "3850": 487, "8763": 487, "though": 487, "simplic": 487, "middl": 487, "denot": 487, "fp1": 487, "fp2": 487, "subsect": [487, 492], "even": 487, "intuit": 487, "x1": [487, 490], "x2": [487, 490], "herebi": 487, "recalcul": 487, "sq": 487, "overhead": 487, "hardtanh": 487, "t5norm": 487, "llamanorm": 487, "groupnorm": 487, "lambada": 487, "sweet": 487, "spot": 487, "region": 487, "bigscienc": 487, "560m": 487, "65": [487, 493], "44": [487, 493], "66": [487, 493], "76": [487, 493], "1b7": 487, "71": [487, 493], "43": [487, 493], "67": [487, 493], "78": [487, 489, 493], "56": [487, 493], "58": [487, 493], "55": [487, 493], "3b": 487, "73": [487, 493], "69": [487, 493], "74": [487, 493], "7b1": 487, "77": [487, 493], "46": [487, 493], "17": [487, 493], "82": [487, 493], "52": [487, 493], "facebook": 487, "125m": 487, "41": [487, 493], "70": [487, 493], "94": [487, 489, 493], "79": [487, 488, 493], "60": [487, 493], "81": [487, 493], "26": [487, 493], "39": [487, 493], "68": [487, 489, 493], "eleutherai": [487, 493], "6b": [487, 493], "29": [487, 493], "96": [487, 493], "jason": 487, "emerg": 487, "transact": 487, "yvinec": 487, "edouard": 487, "proceed": 487, "cvf": 487, "winter": 487, "valuabl": 488, "instrument": 488, "writer": 488, "_pre_eval_hook": 488, "_post_eval_hook": 488, "submodul": 488, "whitelist": 488, "_recordingobserv": 488, "output_tensors_dict": 488, "current_it": 488, "get_tensor_valu": 488, "_observer_forward_hook": 488, "activation_post_process": 488, "_add_observer_": 488, "named_children": 488, "leaf": 488, "add_modul": 488, "register_forward_hook": 488, "dump_tim": 488, "summarywrit": 488, "_acc": 488, "tune_": 488, "add_graph": 488, "get_observer_dict": 488, "observer_dict": 488, "is_quant": 488, "add_histogram": 488, "shell": 488, "bind_al": 488, "logdir_spec": 488, "tune_0_acc0": 488, "tune_1": 488, "tune_1_acc0": 488, "four": 488, "baseline_acc_0": 488, "776": 488, "tune_1_acc_0": 488, "095": 488, "runs_v3": 488, "run_tuning_dump_tensor": 488, "sh": 488, "inceptionv3": 488, "skip": [488, 490], "bash": 488, "run_quant": 488, "topologi": 488, "inception_v3": 488, "inceptionv3_fp32_pretrained_model": 488, "nc_inceptionv3": 488, "inceptionv3_dump_tensor": 488, "poor": 488, "eightbit": 488, "disappear": 488, "centercrop": 489, "randomcrop": 489, "cropres": 489, "decodeimag": 489, "jpeg": 489, "encodejp": 489, "alignimagechannel": 489, "116": 489, "103": 489, "017": 489, "bilinearimagenet": [489, 492], "topilimag": 489, "padding_mod": 489, "border": 489, "pixel": 489, "edg": 489, "colorjitt": 489, "bright": 489, "satur": 489, "hue": 489, "jitter": 489, "tondarrai": 489, "quickli": [490, 491], "human": 490, "concret": 490, "aggress": 490, "classic": 490, "flowchart": 490, "htmllabel": 490, "td": 490, "classdef": 490, "itemstyl": 490, "cce5ff": 490, "stroke": 490, "99ccff": 490, "s1": 490, "s2": 490, "s3": 490, "s4": 490, "s5": 490, "s6": 490, "s7": 490, "nbsp": 490, "subgraphstyl": 490, "ffffff": 490, "attempt": 490, "post_training_auto_qu": 490, "trial": 490, "increment": 490, "ii": 490, "highest": 490, "spent": 490, "hawq_v2_loss": 490, "model_loss": 490, "black": 490, "come": 490, "compli": 490, "posterior": 490, "short": 490, "never": 490, "loglevel": 490, "endlessli": 490, "perspect": 490, "smbo": 490, "appl": 490, "surrog": 490, "densiti": 490, "parzen": 490, "greatest": 490, "hour": 490, "dai": 490, "next_tune_cfg": 490, "overridden": 490, "cluster": 490, "seamlessli": 490, "mpi": 490, "replic": 490, "replica": 490, "fed": 490, "synchron": 490, "mpirun": 490, "number_of_process": 490, "run_cmd": 490, "abctunestrategi": 490, "familiar": 491, "notebook": 491, "introduct": 491, "organ": 492, "logic": 492, "mobilenet_v1": 492, "40": [492, 493], "06": [492, 493], "beta_1": 492, "beta_2": 492, "epsilon": 492, "sparsecategoricalcrossentropi": 492, "sum_over_batch_s": 492, "from_logit": 492, "54": [492, 493], "19": [492, 493], "1x": 493, "platinum": 493, "8480": 493, "8ghz": 493, "ht": 493, "turbo": 493, "256gb": 493, "16x16gb": 493, "ddr5": 493, "4800": 493, "mt": 493, "bio": 493, "3a14": 493, "tel2p1": 493, "microcod": 493, "0x2b0001b0": 493, "gcc": 493, "20210514": 493, "red": 493, "hat": 493, "visit": 493, "1s4c14ins1bsthroughput": 493, "sec": 493, "2721": 493, "638": 493, "26x": 493, "23": 493, "31": 493, "2123": 493, "552": 493, "84x": 493, "resnet101": 493, "37": 493, "1477": 493, "432": 493, "42x": 493, "incept": 493, "3267": 493, "92": 493, "1266": 493, "03": 493, "58x": 493, "38": 493, "2399": 493, "1098": 493, "18x": 493, "v3": 493, "1593": 493, "508": 493, "13x": 493, "1032": 493, "249": 493, "14x": 493, "34": 493, "427": 493, "185": 493, "30x": 493, "5503": 493, "1791": 493, "62": 493, "07x": 493, "3639": 493, "1864": 493, "95x": 493, "47": 493, "1538": 493, "236": 493, "51x": 493, "vgg19": 493, "1368": 493, "196": 493, "resnetv2": 493, "1105": 493, "657": 493, "68x": 493, "716": 493, "49": 493, "369": 493, "94x": 493, "152": 493, "269": 493, "89x": 493, "densenet": 493, "121": 493, "617": 493, "498": 493, "24x": 493, "161": 493, "372": 493, "242": 493, "54x": 493, "169": 493, "496": 493, "411": 493, "21x": 493, "efficientnet": 493, "b0": 493, "748": 493, "709": 493, "05x": 493, "00": 493, "134": 493, "34x": 493, "1273": 493, "671": 493, "90x": 493, "136": 493, "53": 493, "1235": 493, "477": 493, "09": 493, "179": 493, "85x": 493, "cnn": 493, "79x": 493, "83x": 493, "156": 493, "67x": 493, "23x": 493, "173": 493, "00x": 493, "yolov3": 493, "211": 493, "41x": 493, "82x": 493, "61": 493, "49x": 493, "86": 493, "424": 493, "174": 493, "44x": 493, "29x": 493, "55612": 493, "43479": 493, "28x": 493, "1s56c1ins1bsthroughput": 493, "65x": 493, "gpt2": 493, "2716": 493, "569": 493, "77x": 493, "2683": 493, "476": 493, "64x": 493, "2349": 493, "1035": 493, "27x": 493, "930": 493, "763": 493, "262": 493, "91x": 493, "4003": 493, "1677": 493, "39x": 493, "2766": 493, "36": 493, "2643": 493, "1495": 493, "238": 493, "1372": 493, "199": 493, "88x": 493, "1457": 493, "630": 493, "31x": 493, "842": 493, "338": 493, "645": 493, "231": 493, "938": 493, "707": 493, "33x": 493, "1533": 493, "1258": 493, "22x": 493, "981": 493, "647": 493, "52x": 493, "850": 493, "444": 493, "37x": 493, "543": 493, "74x": 493, "93x": 493, "947": 493, "233": 493, "788": 493, "462": 493, "71x": 493, "15x": 493, "51958": 493, "39974": 493, "1631": 493, "662": 493, "46x": 493, "1162": 493, "330": 493, "968": 493, "334": 493, "resnest50": 493, "394": 493, "resnext101_32x8d": 493, "558": 493, "108": 493, "efficientnet_b0": 493, "703": 493, "656": 493, "efficientnet_b3": 493, "510": 493, "391": 493, "efficientnet_b7": 493, "150": 493, "55x": 493, "peleenet": 493, "857": 493, "585": 493, "yolo": 493, "160": 493, "66x": 493, "141": 493, "407": 493, "camembert": 493, "402": 493, "32x": 493, "343": 493, "804": 493, "352": 493, "17x": 493, "302": 493, "183": 493, "382": 493, "19x": 493, "35x": 493, "51": 493, "414": 493, "stsb": 493, "413": 493, "410": 493, "138": 493, "69x": 493, "385": 493, "76x": 493, "126": 493, "wikitext": 493, "reform": 493, "crime": 493, "punish": 493, "449": 493, "364": 493, "lvwerra": 493, "pegasu": 493, "samsum": 493, "openai": 493, "whisper": 493, "abeja": 493, "neox": 493, "japanes": 493, "1723": 493, "654": 493, "63x": 493, "1141": 493, "306": 493, "73x": 493, "106": 493, "1379": 493, "729": 493, "389": 493, "25x": 493, "1980": 493, "672": 493, "5032": 493, "1500": 493, "resnext101_32x16d_wsl": 493, "533": 493, "36x": 493, "556": 493, "149": 493, "1412": 493, "710": 493, "99x": 493, "1564": 493, "712": 493, "20x": 493, "1377": 493, "719": 493, "1446": 493, "06x": 493, "1579": 493, "747": 493, "11x": 493, "1508": 493, "749": 493, "01x": 493, "6950": 493, "4214": 493, "6881": 493, "4192": 493, "6563": 493, "3804": 493, "6631": 493, "3922": 493, "423": 493, "158": 493, "571": 493, "53x": 493, "598": 493, "163": 493, "594": 493, "164": 493, "62x": 493, "5473": 493, "2567": 493, "5455": 493, "2563": 493, "shufflenet": 493, "6818": 493, "3839": 493, "78x": 493, "5750": 493, "3861": 493, "googlenet": 493, "1783": 493, "1095": 493, "1755": 493, "1071": 493, "squeezenet": 493, "9918": 493, "5639": 493, "9423": 493, "5501": 493, "caffenet": 493, "3363": 493, "1015": 493, "3276": 493, "798": 493, "10x": 493, "2104": 493, "985": 493, "2054": 493, "745": 493, "zfnet": 493, "864": 493, "866": 493, "455": 493, "1802": 493, "1170": 493, "1813": 493, "1164": 493, "56x": 493, "2615": 493, "1349": 493, "2343": 493, "1322": 493, "499": 493, "1288": 493, "878": 493, "47x": 493, "1173": 493, "851": 493, "38x": 493, "1114": 493, "825": 493, "1056": 493, "792": 493, "669": 493, "140": 493, "110": 493, "yolov4": 493, "12x": 493, "duc": 493, "tini": 493, "1163": 493, "993": 493, "ultra": 493, "8501": 493, "1922": 493, "emot": 493, "ferplu": 493, "3552": 493, "3114": 493, "arcfac": 493, "246": 493, "399": 493, "226": 493, "392": 493, "223": 493, "integerop": 493, "474": 493, "222": 493, "557": 493, "963": 493, "529": 493, "603": 493, "398": 493, "187": 493, "96x": 493, "144": 493, "124": 493, "bidaf": 493, "2757": 493, "2279": 493, "lm": 493, "357": 493, "472": 493, "365": 493, "214": 493, "70x": 493, "489": 493, "212": 493, "213": 493, "61x": 493, "270": 493, "215": 493, "491": 493, "l12": 493, "h384": 493, "1051": 493, "583": 493, "80x": 493, "1076": 493, "589": 493, "896": 493, "396": 493, "753": 493, "274": 493, "210": 493, "271": 493, "l6": 493, "1124": 493, "2010": 493, "1127": 493, "401": 493, "494": 493, "electra": 493, "discrimin": 493, "1804": 493, "1154": 493, "1961": 493, "1158": 493, "mini": 493, "4986": 493, "3444": 493, "45x": 493, "5603": 493, "3320": 493, "bart": 493, "deberta": 493, "147": 493, "170": 493, "16x": 493, "spanbert": 493, "multilingu": 493, "159": 493, "distilgpt2": 493, "layoutlm": 493, "funsd": 493, "50x": 493, "layoutlmv3": 493, "fcn": 493, "taskdataset": 493, "accuracyspars": 493, "ratiospars": 493, "commentsbalancedor": 493, "unbalanc": 493, "answeringsquad": 493, "87f1": 493, "momentumunbalanc": 493, "momentumbalanc": 493, "90f1": 493, "59f1": 493, "23f1": 493, "classificationmrpc": 493, "52f1": 493, "26f1": 493, "classificationsst": 493, "61accuraci": 493, "recognitionimagenet": 493, "95top1": 493, "v5s6": 493, "detectioncoco": 493, "ap0": 493, "6ap0": 493, "393": 493, "584": 493, "34f1": 493, "lassounbalanc": 493, "classificationmnli": 493, "mm": 493, "allbalanc": 493, "32accuraci": 493, "sensitivitybalanc": 493, "classificationqqp": 493, "classificationqnli": 493, "54accuraci": 493, "em": 493, "mobilenetv2": 493, "7965": 493, "wideresnet40": 493, "9522": 493, "8178": 493, "0213": 493, "8235": 493, "027": 493, "5494": 493, "7153": 493, "5540": 493, "0046": 493, "5523": 493, "vgg": 493, "bn": 493, "7022": 493, "7415": 493, "7025": 493, "0003": 493, "6739": 493, "7399": 493, "6845": 493, "0106": 493, "blendcnn": 493, "7034": 493, "8382": 493, "bilstm": 493, "8314": 493, "9403": 493, "9048": 493, "0734": 493, "7323": 493, "8256": 493, "8084": 493, "8814": 493, "7442": 493, "8371": 493, "0119": 493, "0115": 493, "tinybert": 493, "8018": 493, "8044": 493, "8363": 493, "8411": 493, "8025": 493, "8074": 493, "0007": 493, "0030": 493, "8626": 493, "8213": 493, "9091": 493, "8782": 493, "8684": 493, "8259": 493, "0058": 493, "distilroberta": 493, "6057": 493, "6455": 493, "6187": 493, "0130": 493, "c6i": 493, "2xlarg": 493, "c6a": 493, "c6g": 493, "a100cuda": 493, "executionprovid": 493}, "objects": {"": [[0, 0, 0, "-", "block_mask"], [335, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[2, 0, 0, "-", "adaptor"], [162, 0, 0, "-", "algorithm"], [165, 0, 0, "-", "benchmark"], [173, 0, 0, "-", "compression"], [199, 0, 0, "-", "conf"], [201, 0, 0, "-", "config"], [202, 0, 0, "-", "contrib"], [227, 0, 0, "-", "data"], [282, 0, 0, "-", "experimental"], [342, 0, 0, "-", "metric"], [344, 0, 0, "-", "mix_precision"], [346, 0, 0, "-", "model"], [354, 0, 0, "-", "objective"], [355, 0, 0, "-", "profiling"], [377, 0, 0, "-", "quantization"], [385, 0, 0, "-", "strategy"], [397, 0, 0, "-", "template"], [398, 0, 0, "-", "training"], [402, 0, 0, "-", "utils"], [411, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[1, 0, 0, "-", "adaptor"], [3, 0, 0, "-", "keras"], [7, 0, 0, "-", "keras_utils"], [11, 0, 0, "-", "mxnet"], [12, 0, 0, "-", "mxnet_utils"], [14, 0, 0, "-", "onnxrt"], [17, 0, 0, "-", "ox_utils"], [44, 0, 0, "-", "pytorch"], [45, 0, 0, "-", "query"], [46, 0, 0, "-", "tensorflow"], [110, 0, 0, "-", "tf_utils"], [151, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[1, 1, 1, "", "Adaptor"], [1, 2, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.keras": [[3, 1, 1, "", "KerasAdaptor"], [3, 1, 1, "", "KerasQuery"]], "neural_compressor.adaptor.keras_utils": [[4, 0, 0, "-", "conv2d"], [5, 0, 0, "-", "dense"], [6, 0, 0, "-", "depthwise_conv2d"], [8, 0, 0, "-", "pool2d"], [9, 0, 0, "-", "quantizer"], [10, 0, 0, "-", "separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, 1, 1, "", "MXNetQuery"], [11, 1, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet_utils": [[13, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, 1, 1, "", "CalibCollector"], [13, 1, 1, "", "CalibData"], [13, 1, 1, "", "CollectorBase"], [13, 1, 1, "", "DataIterLoader"], [13, 1, 1, "", "DataLoaderWrap"], [13, 1, 1, "", "NameCollector"], [13, 1, 1, "", "OpType"], [13, 1, 1, "", "TensorCollector"], [13, 2, 1, "", "amp_convert"], [13, 2, 1, "", "calib_model"], [13, 2, 1, "", "check_mx_version"], [13, 2, 1, "", "combine_capabilities"], [13, 2, 1, "", "create_data_example"], [13, 2, 1, "", "distribute_calib_tensors"], [13, 2, 1, "", "ensure_list"], [13, 2, 1, "", "fuse"], [13, 2, 1, "", "get_framework_name"], [13, 2, 1, "", "is_model_quantized"], [13, 2, 1, "", "isiterable"], [13, 2, 1, "", "make_module"], [13, 2, 1, "", "make_nc_model"], [13, 2, 1, "", "make_symbol_block"], [13, 2, 1, "", "ndarray_to_device"], [13, 2, 1, "", "parse_tune_config"], [13, 2, 1, "", "prepare_dataloader"], [13, 2, 1, "", "prepare_model"], [13, 2, 1, "", "prepare_model_data"], [13, 2, 1, "", "quantize_sym_model"], [13, 2, 1, "", "query_quantizable_nodes"], [13, 2, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[14, 1, 1, "", "ONNXRTQuery"], [14, 1, 1, "", "ONNXRT_IntegerOpsAdaptor"], [14, 1, 1, "", "ONNXRT_QDQAdaptor"], [14, 1, 1, "", "ONNXRT_QLinearOpsAdaptor"], [14, 1, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.ox_utils": [[15, 0, 0, "-", "calibration"], [16, 0, 0, "-", "calibrator"], [29, 0, 0, "-", "operators"], [41, 0, 0, "-", "quantizer"], [42, 0, 0, "-", "smooth_quant"], [43, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, 1, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, 1, 1, "", "CalibratorBase"], [16, 1, 1, "", "HistogramCollector"], [16, 1, 1, "", "KLCalibrator"], [16, 1, 1, "", "MinMaxCalibrator"], [16, 1, 1, "", "PercentileCalibrator"], [16, 2, 1, "", "calib_registry"], [16, 2, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[18, 0, 0, "-", "activation"], [19, 0, 0, "-", "argmax"], [20, 0, 0, "-", "attention"], [21, 0, 0, "-", "binary_op"], [22, 0, 0, "-", "concat"], [23, 0, 0, "-", "conv"], [24, 0, 0, "-", "direct_q8"], [25, 0, 0, "-", "embed_layernorm"], [26, 0, 0, "-", "gather"], [27, 0, 0, "-", "gavgpool"], [28, 0, 0, "-", "gemm"], [30, 0, 0, "-", "lstm"], [31, 0, 0, "-", "matmul"], [32, 0, 0, "-", "maxpool"], [33, 0, 0, "-", "norm"], [34, 0, 0, "-", "ops"], [35, 0, 0, "-", "pad"], [36, 0, 0, "-", "pooling"], [37, 0, 0, "-", "reduce"], [38, 0, 0, "-", "resize"], [39, 0, 0, "-", "split"], [40, 0, 0, "-", "unary_op"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, 1, 1, "", "ActivationOperator"], [18, 1, 1, "", "Float16ActivationOperator"], [18, 1, 1, "", "QActivationOperator"], [18, 1, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, 1, 1, "", "ArgMaxOperator"], [19, 1, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, 1, 1, "", "AttentionOperator"], [20, 1, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, 1, 1, "", "BinaryOperator"], [21, 1, 1, "", "Float16BinaryOperator"], [21, 1, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, 1, 1, "", "ConcatOperator"], [22, 1, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, 1, 1, "", "ConvOperator"], [23, 1, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, 1, 1, "", "Direct8BitOperator"], [24, 1, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, 1, 1, "", "EmbedLayerNormalizationOperator"], [25, 1, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, 1, 1, "", "GatherOperator"], [26, 1, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, 1, 1, "", "GlobalAveragePoolOperator"], [27, 1, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, 1, 1, "", "GemmOperator"], [28, 1, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, 1, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, 1, 1, "", "FusedMatMulOperator"], [31, 1, 1, "", "MatMulOperator"], [31, 1, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, 1, 1, "", "MaxPoolOperator"], [32, 1, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, 1, 1, "", "BatchNormalizationOperator"], [33, 1, 1, "", "NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, 1, 1, "", "Operator"], [34, 1, 1, "", "QOperator"], [34, 2, 1, "", "op_registry"], [34, 2, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, 1, 1, "", "PadOperator"], [35, 1, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, 1, 1, "", "PoolOperator"], [36, 1, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, 1, 1, "", "ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, 1, 1, "", "QResizeOperator"], [38, 1, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, 1, 1, "", "QSplitOperator"], [39, 1, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, 1, 1, "", "UnaryOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, 1, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, 1, 1, "", "ORTSmoothQuant"], [42, 2, 1, "", "get_quant_dequant_output"], [42, 2, 1, "", "make_sub_graph"], [42, 2, 1, "", "quant_dequant_data"]], "neural_compressor.adaptor.ox_utils.util": [[43, 1, 1, "", "QuantFormat"], [43, 1, 1, "", "QuantType"], [43, 1, 1, "", "QuantizationMode"], [43, 1, 1, "", "QuantizedInitializer"], [43, 1, 1, "", "QuantizedValue"], [43, 1, 1, "", "QuantizedValueType"], [43, 1, 1, "", "ValueInfo"], [43, 2, 1, "", "attribute_to_kwarg"], [43, 2, 1, "", "calculate_scale_zp"], [43, 2, 1, "", "cast_tensor"], [43, 2, 1, "", "collate_preds"], [43, 2, 1, "", "dequantize_data"], [43, 2, 1, "", "dequantize_data_with_scale_zero"], [43, 2, 1, "", "dtype_to_name"], [43, 2, 1, "", "find_by_name"], [43, 2, 1, "", "float_to_bfloat16"], [43, 2, 1, "", "float_to_float16"], [43, 2, 1, "", "is_B_transposed"], [43, 2, 1, "", "make_dquant_node"], [43, 2, 1, "", "make_quant_node"], [43, 2, 1, "", "quantize_data"], [43, 2, 1, "", "quantize_data_per_channel"], [43, 2, 1, "", "quantize_data_with_scale_zero"], [43, 2, 1, "", "quantize_nparray"], [43, 2, 1, "", "remove_init_from_model_input"], [43, 2, 1, "", "split_shared_bias"], [43, 2, 1, "", "to_numpy"], [43, 2, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.pytorch": [[44, 1, 1, "", "PyTorchAdaptor"], [44, 1, 1, "", "PyTorchWeightOnlyAdaptor"], [44, 1, 1, "", "PyTorch_FXAdaptor"], [44, 1, 1, "", "PyTorch_IPEXAdaptor"], [44, 1, 1, "", "TemplateAdaptor"], [44, 2, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.query": [[45, 1, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.tensorflow": [[46, 1, 1, "", "TensorFlowAdaptor"], [46, 1, 1, "", "TensorflowQuery"], [46, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[47, 0, 0, "-", "graph_converter"], [48, 0, 0, "-", "graph_converter_without_calib"], [86, 0, 0, "-", "graph_rewriter"], [109, 0, 0, "-", "graph_util"], [111, 0, 0, "-", "quantize_graph"], [138, 0, 0, "-", "quantize_graph_common"], [139, 0, 0, "-", "smooth_quant_calibration"], [140, 0, 0, "-", "smooth_quant_scaler"], [141, 0, 0, "-", "tf2onnx_converter"], [144, 0, 0, "-", "transform_graph"], [147, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, 1, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[50, 0, 0, "-", "bf16"], [75, 0, 0, "-", "generic"], [85, 0, 0, "-", "graph_base"], [94, 0, 0, "-", "int8"], [100, 0, 0, "-", "onnx"], [105, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[49, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, 1, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[51, 0, 0, "-", "convert_add_to_biasadd"], [52, 0, 0, "-", "convert_layout"], [53, 0, 0, "-", "convert_leakyrelu"], [54, 0, 0, "-", "convert_nan_to_random"], [55, 0, 0, "-", "convert_placeholder_to_const"], [56, 0, 0, "-", "dequantize_cast_optimizer"], [57, 0, 0, "-", "dilated_contraction"], [58, 0, 0, "-", "dummy_biasadd"], [59, 0, 0, "-", "expanddims_optimizer"], [60, 0, 0, "-", "fetch_weight_from_reshape"], [61, 0, 0, "-", "fold_batch_norm"], [62, 0, 0, "-", "fold_constant"], [63, 0, 0, "-", "fuse_biasadd_add"], [64, 0, 0, "-", "fuse_column_wise_mul"], [65, 0, 0, "-", "fuse_conv_with_math"], [66, 0, 0, "-", "fuse_decomposed_bn"], [67, 0, 0, "-", "fuse_decomposed_in"], [68, 0, 0, "-", "fuse_gelu"], [69, 0, 0, "-", "fuse_layer_norm"], [70, 0, 0, "-", "fuse_pad_with_conv"], [71, 0, 0, "-", "fuse_pad_with_fp32_conv"], [72, 0, 0, "-", "fuse_reshape_transpose"], [73, 0, 0, "-", "graph_cse_optimizer"], [74, 0, 0, "-", "grappler_pass"], [76, 0, 0, "-", "insert_print_node"], [77, 0, 0, "-", "move_squeeze_after_relu"], [78, 0, 0, "-", "pre_optimize"], [79, 0, 0, "-", "remove_training_nodes"], [80, 0, 0, "-", "rename_batch_norm"], [81, 0, 0, "-", "split_shared_input"], [82, 0, 0, "-", "strip_equivalent_nodes"], [83, 0, 0, "-", "strip_unused_nodes"], [84, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, 1, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, 1, 1, "", "FuseDecomposedBNOptimizer"], [66, 2, 1, "", "bypass_reshape"], [66, 2, 1, "", "get_const_dim_count"], [66, 2, 1, "", "node_from_map"], [66, 2, 1, "", "node_name_from_input"], [66, 2, 1, "", "valid_reshape_inputs"], [66, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, 1, 1, "", "FuseDecomposedINOptimizer"], [67, 2, 1, "", "bypass_reshape"], [67, 2, 1, "", "get_const_dim_count"], [67, 2, 1, "", "node_from_map"], [67, 2, 1, "", "node_name_from_input"], [67, 2, 1, "", "valid_reshape_inputs"], [67, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, 1, 1, "", "FuseLayerNormOptimizer"], [69, 2, 1, "", "node_from_map"], [69, 2, 1, "", "node_name_from_input"], [69, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, 1, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[87, 0, 0, "-", "freeze_fake_quant"], [88, 0, 0, "-", "freeze_value"], [89, 0, 0, "-", "freeze_value_without_calib"], [90, 0, 0, "-", "fuse_conv_redundant_dequantize"], [91, 0, 0, "-", "fuse_conv_requantize"], [92, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [93, 0, 0, "-", "fuse_matmul_requantize"], [95, 0, 0, "-", "meta_op_optimizer"], [96, 0, 0, "-", "post_hostconst_converter"], [97, 0, 0, "-", "post_quantized_op_cse"], [98, 0, 0, "-", "rnn_convert"], [99, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [93, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [93, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [93, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, 0, 0, "-", "onnx_graph"], [102, 0, 0, "-", "onnx_node"], [103, 0, 0, "-", "onnx_schema"], [104, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, 1, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, 1, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, 1, 1, "", "OnnxOpSchema"], [103, 2, 1, "", "get_max_supported_opset_version"], [103, 2, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, 1, 1, "", "SeqType"], [104, 2, 1, "", "add_port_to_name"], [104, 2, 1, "", "are_shapes_equal"], [104, 2, 1, "", "assert_error"], [104, 2, 1, "", "compute_const_folding_using_tf"], [104, 2, 1, "", "convert_tensorflow_tensor_to_onnx"], [104, 2, 1, "", "find_opset"], [104, 2, 1, "", "get_index_from_strided_slice_of_shape"], [104, 2, 1, "", "get_subgraphs_from_onnx"], [104, 2, 1, "", "get_tensorflow_node_attr"], [104, 2, 1, "", "get_tensorflow_node_shape_attr"], [104, 2, 1, "", "get_tensorflow_tensor_data"], [104, 2, 1, "", "get_tensorflow_tensor_shape"], [104, 2, 1, "", "infer_onnx_shape_dtype"], [104, 2, 1, "", "initialize_name_counter"], [104, 2, 1, "", "is_list_or_tuple"], [104, 2, 1, "", "is_onnx_domain"], [104, 2, 1, "", "make_onnx_inputs_outputs"], [104, 2, 1, "", "make_onnx_shape"], [104, 2, 1, "", "map_numpy_to_onnx_dtype"], [104, 2, 1, "", "map_onnx_to_numpy_type"], [104, 2, 1, "", "map_tensorflow_dtype"], [104, 2, 1, "", "read_tensorflow_node_attrs"], [104, 2, 1, "", "save_protobuf"], [104, 2, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, 0, 0, "-", "insert_qdq_pattern"], [107, 0, 0, "-", "merge_duplicated_qdq"], [108, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, 1, 1, "", "GraphAnalyzer"], [109, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[113, 0, 0, "-", "qat"], [129, 0, 0, "-", "qdq"], [131, 0, 0, "-", "quantize_graph_base"], [132, 0, 0, "-", "quantize_graph_bn"], [133, 0, 0, "-", "quantize_graph_concatv2"], [134, 0, 0, "-", "quantize_graph_conv"], [135, 0, 0, "-", "quantize_graph_for_intel_cpu"], [136, 0, 0, "-", "quantize_graph_matmul"], [137, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[112, 0, 0, "-", "fake_quantize"], [114, 0, 0, "-", "quantize_config"], [115, 0, 0, "-", "quantize_helper"], [116, 0, 0, "-", "quantize_layers"], [121, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, 1, 1, "", "FakeQuantize"], [112, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, 1, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, 2, 1, "", "init_quantize_config"], [115, 2, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, 0, 0, "-", "optimize_layer"], [118, 0, 0, "-", "quantize_layer_add"], [119, 0, 0, "-", "quantize_layer_base"], [120, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, 1, 1, "", "QuantizeWrapper"], [121, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[122, 0, 0, "-", "fuse_qdq_bn"], [123, 0, 0, "-", "fuse_qdq_concatv2"], [124, 0, 0, "-", "fuse_qdq_conv"], [125, 0, 0, "-", "fuse_qdq_deconv"], [126, 0, 0, "-", "fuse_qdq_in"], [127, 0, 0, "-", "fuse_qdq_matmul"], [128, 0, 0, "-", "fuse_qdq_pooling"], [130, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, 1, 1, "", "QuantizeGraphBase"], [131, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[139, 1, 1, "", "SmoothQuantCalibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[140, 1, 1, "", "SmoothQuantScaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[141, 1, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[142, 0, 0, "-", "bias_correction"], [143, 0, 0, "-", "graph_transform_base"], [145, 0, 0, "-", "insert_logging"], [146, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[142, 1, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[143, 1, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[145, 1, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[146, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[147, 2, 1, "", "collate_tf_preds"], [147, 2, 1, "", "disable_random"], [147, 2, 1, "", "fix_ref_type_of_graph_def"], [147, 2, 1, "", "generate_feed_dict"], [147, 2, 1, "", "get_estimator_graph"], [147, 2, 1, "", "get_graph_def"], [147, 2, 1, "", "get_input_output_node_names"], [147, 2, 1, "", "get_model_input_shape"], [147, 2, 1, "", "get_tensor_by_name"], [147, 2, 1, "", "get_tensor_val_from_graph_node"], [147, 2, 1, "", "get_weight_from_input_tensor"], [147, 2, 1, "", "int8_node_name_reverse"], [147, 2, 1, "", "is_ckpt_format"], [147, 2, 1, "", "is_saved_model_format"], [147, 2, 1, "", "iterator_sess_run"], [147, 2, 1, "", "read_graph"], [147, 2, 1, "", "strip_equivalent_nodes"], [147, 2, 1, "", "strip_unused_nodes"], [147, 2, 1, "", "tf_diagnosis_helper"], [147, 2, 1, "", "version1_eq_version2"], [147, 2, 1, "", "version1_gt_version2"], [147, 2, 1, "", "version1_gte_version2"], [147, 2, 1, "", "version1_lt_version2"], [147, 2, 1, "", "version1_lte_version2"], [147, 2, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[148, 0, 0, "-", "bf16_convert"], [149, 0, 0, "-", "gptq"], [150, 0, 0, "-", "hawq_metric"], [152, 0, 0, "-", "mixed_precision"], [153, 0, 0, "-", "model_wrapper"], [154, 0, 0, "-", "pattern_detector"], [155, 0, 0, "-", "smooth_quant"], [156, 0, 0, "-", "symbolic_trace"], [157, 0, 0, "-", "teq"], [158, 0, 0, "-", "util"], [159, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[148, 1, 1, "", "BF16ModuleWrapper"], [148, 2, 1, "", "Convert"], [148, 2, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.gptq": [[149, 1, 1, "", "GPTQ"], [149, 1, 1, "", "GPTQuantizer"], [149, 2, 1, "", "find_layers"], [149, 2, 1, "", "find_layers_name"], [149, 2, 1, "", "is_leaf"], [149, 2, 1, "", "log_quantizable_layers_per_transformer"], [149, 2, 1, "", "quantize"], [149, 2, 1, "", "trace_gptq_target_blocks"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[150, 1, 1, "", "HessianTrace"], [150, 1, 1, "", "Node_collector"], [150, 2, 1, "", "compare_weights"], [150, 2, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[152, 2, 1, "", "ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[153, 1, 1, "", "FakeAffineTensorQuantFunction"], [153, 1, 1, "", "TEQLinearFakeQuant"], [153, 1, 1, "", "TEQMulLinear"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[154, 1, 1, "", "TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[155, 1, 1, "", "GraphTrace"], [155, 1, 1, "", "TorchSmoothQuant"], [155, 2, 1, "", "get_module"], [155, 2, 1, "", "set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[156, 2, 1, "", "symbolic_trace"], [156, 2, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.teq": [[157, 1, 1, "", "TEQuantizer"]], "neural_compressor.adaptor.torch_utils.util": [[158, 2, 1, "", "append_attr"], [158, 2, 1, "", "auto_copy"], [158, 2, 1, "", "calculate_quant_min_max"], [158, 2, 1, "", "check_cfg_and_qconfig"], [158, 2, 1, "", "collate_torch_preds"], [158, 2, 1, "", "collect_weight_info"], [158, 2, 1, "", "fetch_module"], [158, 2, 1, "", "generate_activation_observer"], [158, 2, 1, "", "get_depth"], [158, 2, 1, "", "get_dict_at_depth"], [158, 2, 1, "", "get_element_under_depth"], [158, 2, 1, "", "get_embedding_contiguous"], [158, 2, 1, "", "get_example_input"], [158, 2, 1, "", "get_fallback_order"], [158, 2, 1, "", "get_mse_order_per_fp32"], [158, 2, 1, "", "get_mse_order_per_int8"], [158, 2, 1, "", "get_op_type_by_name"], [158, 2, 1, "", "get_quantizable_ops_from_cfgs"], [158, 2, 1, "", "get_torch_version"], [158, 2, 1, "", "input2tuple"], [158, 2, 1, "", "is_fused_module"], [158, 2, 1, "", "match_datatype_pattern"], [158, 2, 1, "", "paser_cfgs"], [158, 2, 1, "", "set_module"], [158, 2, 1, "", "simple_inference"], [158, 2, 1, "", "update_sq_scale"]], "neural_compressor.adaptor.torch_utils.weight_only": [[159, 2, 1, "", "awq_quantize"], [159, 2, 1, "", "get_module_input_output"], [159, 2, 1, "", "gptq_quantize"], [159, 2, 1, "", "qdq_weight_actor"], [159, 2, 1, "", "qdq_weight_asym"], [159, 2, 1, "", "qdq_weight_sym"], [159, 2, 1, "", "quant_weight"], [159, 2, 1, "", "rtn_quantize"], [159, 2, 1, "", "teq_quantize"]], "neural_compressor.algorithm": [[160, 0, 0, "-", "algorithm"], [161, 0, 0, "-", "fast_bias_correction"], [163, 0, 0, "-", "smooth_quant"], [164, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[160, 1, 1, "", "ALGORITHMS"], [160, 1, 1, "", "Algorithm"], [160, 1, 1, "", "AlgorithmScheduler"], [160, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[161, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[163, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[164, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[165, 2, 1, "", "benchmark_with_raw_cmd"], [165, 2, 1, "", "call_one"], [165, 2, 1, "", "config_instance"], [165, 2, 1, "", "fit"], [165, 2, 1, "", "generate_prefix"], [165, 2, 1, "", "get_architecture"], [165, 2, 1, "", "get_bounded_threads"], [165, 2, 1, "", "get_core_ids"], [165, 2, 1, "", "get_physical_ids"], [165, 2, 1, "", "get_threads"], [165, 2, 1, "", "get_threads_per_core"], [165, 2, 1, "", "profile"], [165, 2, 1, "", "run_instance"], [165, 2, 1, "", "set_all_env_var"], [165, 2, 1, "", "set_env_var"], [165, 2, 1, "", "summary_benchmark"]], "neural_compressor.compression": [[166, 0, 0, "-", "callbacks"], [168, 0, 0, "-", "distillation"], [169, 0, 0, "-", "hpo"], [175, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[166, 1, 1, "", "BaseCallbacks"], [166, 1, 1, "", "DistillationCallbacks"], [166, 1, 1, "", "PruningCallbacks"], [166, 1, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[166, 3, 1, "", "_epoch_ran"], [166, 3, 1, "", "best_model"], [166, 3, 1, "", "best_score"], [166, 3, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[167, 0, 0, "-", "criterions"]], "neural_compressor.compression.distillation.criterions": [[167, 1, 1, "", "Criterions"], [167, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [167, 1, 1, "", "KnowledgeDistillationFramework"], [167, 1, 1, "", "KnowledgeDistillationLoss"], [167, 1, 1, "", "PyTorchCriterions"], [167, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [167, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [167, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [167, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [167, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [167, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [167, 1, 1, "", "SelfKnowledgeDistillationLoss"], [167, 1, 1, "", "TensorflowCriterions"], [167, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [167, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [167, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [167, 2, 1, "", "criterion_registry"]], "neural_compressor.compression.hpo": [[170, 0, 0, "-", "sa_optimizer"], [171, 0, 0, "-", "search_algorithms"], [172, 0, 0, "-", "search_space"]], "neural_compressor.compression.hpo.search_algorithms": [[171, 1, 1, "", "BayesianOptimizationSearcher"], [171, 1, 1, "", "GridSearcher"], [171, 1, 1, "", "RandomSearcher"], [171, 1, 1, "", "Searcher"], [171, 1, 1, "", "XgbSearcher"], [171, 2, 1, "", "register_searcher"]], "neural_compressor.compression.hpo.search_space": [[172, 1, 1, "", "BaseSearchSpace"], [172, 1, 1, "", "ContinuousSearchSpace"], [172, 1, 1, "", "DiscreteSearchSpace"], [172, 1, 1, "", "SearchSpace"], [172, 2, 1, "", "register_searchspace"]], "neural_compressor.compression.pruner": [[174, 0, 0, "-", "criteria"], [177, 0, 0, "-", "model_slim"], [181, 0, 0, "-", "patterns"], [188, 0, 0, "-", "pruners"], [193, 0, 0, "-", "regs"], [194, 0, 0, "-", "schedulers"], [195, 0, 0, "-", "tf_criteria"], [196, 0, 0, "-", "utils"]], "neural_compressor.compression.pruner.criteria": [[174, 1, 1, "", "GradientCriterion"], [174, 1, 1, "", "MagnitudeCriterion"], [174, 1, 1, "", "PruningCriterion"], [174, 1, 1, "", "RetrainFreeCriterion"], [174, 1, 1, "", "SnipCriterion"], [174, 1, 1, "", "SnipMomentumBlockCriterion"], [174, 1, 1, "", "SnipMomentumCriterion"], [174, 2, 1, "", "get_criterion"], [174, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[174, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[174, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[174, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[174, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[174, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion": [[174, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[174, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.model_slim": [[176, 0, 0, "-", "auto_slim"], [178, 0, 0, "-", "pattern_analyzer"], [179, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[176, 2, 1, "", "generate_ffn2_pruning_config"], [176, 2, 1, "", "generate_mha_pruning_config"], [176, 2, 1, "", "model_slim"], [176, 2, 1, "", "model_slim_ffn2"], [176, 2, 1, "", "model_slim_mha"], [176, 2, 1, "", "parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[178, 1, 1, "", "ClassifierHeadSearcher"], [178, 1, 1, "", "ClassifierHeadSearcherTF"], [178, 1, 1, "", "JitBasicSearcher"], [178, 1, 1, "", "Linear2LinearSearcher"], [178, 1, 1, "", "RecipeSearcher"], [178, 1, 1, "", "SelfMHASearcher"], [178, 2, 1, "", "get_attributes"], [178, 2, 1, "", "get_common_module"], [178, 2, 1, "", "print_iterables"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher": [[178, 3, 1, "", "device"], [178, 3, 1, "", "flatten_static_graph"], [178, 3, 1, "", "model"], [178, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF": [[178, 3, 1, "", "device"], [178, 3, 1, "", "flatten_static_graph"], [178, 3, 1, "", "model"], [178, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[178, 3, 1, "", "device"], [178, 3, 1, "", "flatten_static_graph"], [178, 3, 1, "", "model"], [178, 3, 1, "", "searching_results"], [178, 3, 1, "", "static_graph"], [178, 3, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[178, 3, 1, "", "current_pattern"], [178, 3, 1, "", "device"], [178, 3, 1, "", "flatten_static_graph"], [178, 3, 1, "", "model"], [178, 3, 1, "", "searching_results"], [178, 3, 1, "", "static_graph"], [178, 3, 1, "", "target_layers"], [178, 3, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[178, 3, 1, "", "model"], [178, 3, 1, "", "recipe"], [178, 3, 1, "", "searching_results"], [178, 3, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[178, 3, 1, "", "device"], [178, 3, 1, "", "flatten_static_graph"], [178, 3, 1, "", "model"], [178, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[179, 1, 1, "", "LinearCompression"], [179, 1, 1, "", "LinearCompressionIterator"], [179, 1, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[179, 3, 1, "", "device"], [179, 3, 1, "", "layer_1"], [179, 3, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[179, 3, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[180, 0, 0, "-", "base"], [181, 2, 1, "", "get_pattern"], [182, 0, 0, "-", "mha"], [183, 0, 0, "-", "ninm"], [184, 0, 0, "-", "nxm"]], "neural_compressor.compression.pruner.patterns.base": [[180, 1, 1, "", "BasePattern"], [180, 1, 1, "", "KerasBasePattern"], [180, 1, 1, "", "PytorchBasePattern"], [180, 2, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.base.BasePattern": [[180, 3, 1, "", "config"], [180, 3, 1, "", "invalid_layers"], [180, 3, 1, "", "is_global"], [180, 3, 1, "", "keep_mask_layers"], [180, 3, 1, "", "max_sparsity_ratio_per_op"], [180, 3, 1, "", "min_sparsity_ratio_per_op"], [180, 3, 1, "", "modules"], [180, 3, 1, "", "pattern"], [180, 3, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.KerasBasePattern": [[180, 3, 1, "", "config"], [180, 3, 1, "", "invalid_layers"], [180, 3, 1, "", "is_global"], [180, 3, 1, "", "keep_mask_layers"], [180, 3, 1, "", "max_sparsity_ratio_per_op"], [180, 3, 1, "", "min_sparsity_ratio_per_op"], [180, 3, 1, "", "modules"], [180, 3, 1, "", "pattern"], [180, 3, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern": [[180, 3, 1, "", "config"], [180, 3, 1, "", "invalid_layers"], [180, 3, 1, "", "is_global"], [180, 3, 1, "", "keep_mask_layers"], [180, 3, 1, "", "max_sparsity_ratio_per_op"], [180, 3, 1, "", "min_sparsity_ratio_per_op"], [180, 3, 1, "", "modules"], [180, 3, 1, "", "pattern"], [180, 3, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.mha": [[182, 1, 1, "", "PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha.PatternMHA": [[182, 3, 1, "", "M"], [182, 3, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.ninm": [[183, 1, 1, "", "PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM": [[183, 3, 1, "", "M"], [183, 3, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.nxm": [[184, 1, 1, "", "KerasPatternNxM"], [184, 1, 1, "", "PytorchPatternNxM"]], "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM": [[184, 3, 1, "", "block_size"]], "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM": [[184, 3, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[185, 0, 0, "-", "base"], [186, 0, 0, "-", "basic"], [187, 0, 0, "-", "block_mask"], [188, 2, 1, "", "get_pruner"], [189, 0, 0, "-", "mha"], [188, 2, 1, "", "parse_valid_pruner_types"], [190, 0, 0, "-", "pattern_lock"], [191, 0, 0, "-", "progressive"], [192, 0, 0, "-", "retrain_free"]], "neural_compressor.compression.pruner.pruners.base": [[185, 1, 1, "", "BasePruner"], [185, 1, 1, "", "KerasBasePruner"], [185, 1, 1, "", "PytorchBasePruner"], [185, 2, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.base.BasePruner": [[185, 3, 1, "", "config"], [185, 3, 1, "", "current_sparsity_ratio"], [185, 3, 1, "", "end_step"], [185, 3, 1, "", "global_step"], [185, 3, 1, "", "masks"], [185, 3, 1, "", "max_sparsity_ratio_per_op"], [185, 3, 1, "", "modules"], [185, 3, 1, "", "pattern"], [185, 3, 1, "", "pruning_frequency"], [185, 3, 1, "", "scheduler"], [185, 3, 1, "", "scores"], [185, 3, 1, "", "start_step"], [185, 3, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.KerasBasePruner": [[185, 3, 1, "", "config"], [185, 3, 1, "", "current_sparsity_ratio"], [185, 3, 1, "", "end_step"], [185, 3, 1, "", "global_step"], [185, 3, 1, "", "masks"], [185, 3, 1, "", "max_sparsity_ratio_per_op"], [185, 3, 1, "", "modules"], [185, 3, 1, "", "pattern"], [185, 3, 1, "", "pruning_frequency"], [185, 3, 1, "", "scheduler"], [185, 3, 1, "", "scores"], [185, 3, 1, "", "start_step"], [185, 3, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner": [[185, 3, 1, "", "config"], [185, 3, 1, "", "current_sparsity_ratio"], [185, 3, 1, "", "end_step"], [185, 3, 1, "", "global_step"], [185, 3, 1, "", "masks"], [185, 3, 1, "", "max_sparsity_ratio_per_op"], [185, 3, 1, "", "modules"], [185, 3, 1, "", "pattern"], [185, 3, 1, "", "pruning_frequency"], [185, 3, 1, "", "scheduler"], [185, 3, 1, "", "scores"], [185, 3, 1, "", "start_step"], [185, 3, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.basic": [[186, 1, 1, "", "KerasBasicPruner"], [186, 1, 1, "", "PytorchBasicPruner"]], "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner": [[186, 3, 1, "", "criterion"], [186, 3, 1, "", "pattern"], [186, 3, 1, "", "reg"], [186, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner": [[186, 3, 1, "", "criterion"], [186, 3, 1, "", "pattern"], [186, 3, 1, "", "reg"], [186, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.block_mask": [[187, 1, 1, "", "PytorchBlockMaskPruner"]], "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner": [[187, 3, 1, "", "criterion"], [187, 3, 1, "", "pattern"], [187, 3, 1, "", "reg"], [187, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.mha": [[189, 1, 1, "", "PythonMultiheadAttentionPruner"]], "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner": [[189, 3, 1, "", "head_masks"], [189, 3, 1, "", "linear_layers"], [189, 3, 1, "", "mha_compressions"], [189, 3, 1, "", "mha_scores"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[190, 1, 1, "", "PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[191, 1, 1, "", "PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[192, 1, 1, "", "PytorchRetrainFreePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner": [[192, 3, 1, "", "criterion"], [192, 3, 1, "", "pattern"], [192, 3, 1, "", "reg"], [192, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.regs": [[193, 1, 1, "", "BaseReg"], [193, 1, 1, "", "GroupLasso"], [193, 2, 1, "", "get_reg"], [193, 2, 1, "", "get_reg_type"], [193, 2, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[193, 3, 1, "", "alpha"], [193, 3, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[194, 1, 1, "", "IterativeScheduler"], [194, 1, 1, "", "OneshotScheduler"], [194, 1, 1, "", "PruningScheduler"], [194, 2, 1, "", "get_scheduler"], [194, 2, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[194, 3, 1, "", "config"]], "neural_compressor.compression.pruner.tf_criteria": [[195, 1, 1, "", "MagnitudeCriterion"], [195, 1, 1, "", "PruningCriterion"], [195, 2, 1, "", "get_tf_criterion"], [195, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion": [[195, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.tf_criteria.PruningCriterion": [[195, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.utils": [[196, 2, 1, "", "check_config"], [196, 2, 1, "", "check_key_validity"], [196, 2, 1, "", "generate_pruner_config"], [196, 2, 1, "", "get_sparsity_ratio"], [196, 2, 1, "", "get_sparsity_ratio_tf"], [196, 2, 1, "", "parse_last_linear"], [196, 2, 1, "", "parse_last_linear_tf"], [196, 2, 1, "", "parse_to_prune"], [196, 2, 1, "", "parse_to_prune_tf"], [196, 2, 1, "", "process_and_check_config"], [196, 2, 1, "", "process_config"], [196, 2, 1, "", "process_weight_config"], [196, 2, 1, "", "process_yaml_config"], [196, 2, 1, "", "reset_none_to_default"], [196, 2, 1, "", "update_params"]], "neural_compressor.conf": [[197, 0, 0, "-", "config"], [198, 0, 0, "-", "dotdict"], [200, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[197, 1, 1, "", "Benchmark_Conf"], [197, 1, 1, "", "Conf"], [197, 1, 1, "", "Distillation_Conf"], [197, 1, 1, "", "Graph_Optimization_Conf"], [197, 1, 1, "", "MixedPrecision_Conf"], [197, 1, 1, "", "NASConfig"], [197, 1, 1, "", "PrunerV2"], [197, 1, 1, "", "Pruning_Conf"], [197, 1, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[198, 1, 1, "", "DotDict"], [198, 2, 1, "", "deep_get"], [198, 2, 1, "", "deep_set"]], "neural_compressor.conf.pythonic_config": [[200, 1, 1, "", "AccuracyCriterion"], [200, 1, 1, "", "BenchmarkConfig"], [200, 1, 1, "", "DistillationConfig"], [200, 1, 1, "", "KnowledgeDistillationLossConfig"], [200, 1, 1, "", "Options"], [200, 1, 1, "", "QuantizationConfig"], [200, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.config": [[201, 1, 1, "", "AccuracyCriterion"], [201, 1, 1, "", "BenchmarkConfig"], [201, 1, 1, "", "DistillationConfig"], [201, 1, 1, "", "DotDict"], [201, 1, 1, "", "ExportConfig"], [201, 1, 1, "", "HPOConfig"], [201, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [201, 1, 1, "", "Keras"], [201, 1, 1, "", "KnowledgeDistillationLossConfig"], [201, 1, 1, "", "MXNet"], [201, 1, 1, "", "MixedPrecisionConfig"], [201, 1, 1, "", "NASConfig"], [201, 1, 1, "", "ONNX"], [201, 1, 1, "", "ONNXQlinear2QDQConfig"], [201, 1, 1, "", "Options"], [201, 1, 1, "", "PostTrainingQuantConfig"], [201, 1, 1, "", "PyTorch"], [201, 1, 1, "", "QuantizationAwareTrainingConfig"], [201, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [201, 1, 1, "", "TF2ONNXConfig"], [201, 1, 1, "", "TensorFlow"], [201, 1, 1, "", "Torch2ONNXConfig"], [201, 1, 1, "", "TuningCriterion"], [201, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[203, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[204, 0, 0, "-", "sigopt"], [205, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[204, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[205, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[210, 0, 0, "-", "dataloaders"], [222, 0, 0, "-", "datasets"], [226, 0, 0, "-", "filters"], [230, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[206, 0, 0, "-", "base_dataloader"], [207, 0, 0, "-", "dataloader"], [208, 0, 0, "-", "default_dataloader"], [209, 0, 0, "-", "fetcher"], [211, 0, 0, "-", "mxnet_dataloader"], [212, 0, 0, "-", "onnxrt_dataloader"], [213, 0, 0, "-", "pytorch_dataloader"], [214, 0, 0, "-", "sampler"], [215, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[206, 1, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[207, 1, 1, "", "DataLoader"], [207, 2, 1, "", "check_dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[208, 1, 1, "", "DefaultDataLoader"], [208, 2, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[209, 1, 1, "", "Fetcher"], [209, 1, 1, "", "IndexFetcher"], [209, 1, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[211, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[212, 1, 1, "", "ONNXRTBertDataLoader"], [212, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[213, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[214, 1, 1, "", "BatchSampler"], [214, 1, 1, "", "IterableSampler"], [214, 1, 1, "", "Sampler"], [214, 1, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[215, 1, 1, "", "TFDataDataLoader"], [215, 1, 1, "", "TensorflowBertDataLoader"], [215, 1, 1, "", "TensorflowDataLoader"], [215, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[216, 0, 0, "-", "bert_dataset"], [217, 0, 0, "-", "coco_dataset"], [218, 0, 0, "-", "dataset"], [219, 0, 0, "-", "dummy_dataset"], [220, 0, 0, "-", "dummy_dataset_v2"], [221, 0, 0, "-", "imagenet_dataset"], [223, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[216, 1, 1, "", "InputFeatures"], [216, 1, 1, "", "ONNXRTBertDataset"], [216, 1, 1, "", "ParseDecodeBert"], [216, 1, 1, "", "PytorchBertDataset"], [216, 1, 1, "", "TensorflowBertDataset"], [216, 1, 1, "", "TensorflowModelZooBertDataset"], [216, 2, 1, "", "convert_examples_to_features"], [216, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[217, 1, 1, "", "COCONpy"], [217, 1, 1, "", "COCORaw"], [217, 1, 1, "", "COCORecordDataset"], [217, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[218, 1, 1, "", "CIFAR10"], [218, 1, 1, "", "CIFAR100"], [218, 1, 1, "", "Dataset"], [218, 1, 1, "", "Datasets"], [218, 1, 1, "", "FashionMNIST"], [218, 1, 1, "", "ImageFolder"], [218, 1, 1, "", "IterableDataset"], [218, 1, 1, "", "MNIST"], [218, 1, 1, "", "MXNetCIFAR10"], [218, 1, 1, "", "MXNetCIFAR100"], [218, 1, 1, "", "MXNetDatasets"], [218, 1, 1, "", "MXNetFashionMNIST"], [218, 1, 1, "", "MXNetImageFolder"], [218, 1, 1, "", "MXNetMNIST"], [218, 1, 1, "", "ONNXRTITDatasets"], [218, 1, 1, "", "ONNXRTQLDatasets"], [218, 1, 1, "", "PyTorchDatasets"], [218, 1, 1, "", "PytorchCIFAR10"], [218, 1, 1, "", "PytorchCIFAR100"], [218, 1, 1, "", "PytorchFashionMNIST"], [218, 1, 1, "", "PytorchMNIST"], [218, 1, 1, "", "PytorchMxnetWrapDataset"], [218, 1, 1, "", "PytorchMxnetWrapFunction"], [218, 1, 1, "", "Tensorflow"], [218, 1, 1, "", "TensorflowCIFAR10"], [218, 1, 1, "", "TensorflowCIFAR100"], [218, 1, 1, "", "TensorflowDatasets"], [218, 1, 1, "", "TensorflowFashionMNIST"], [218, 1, 1, "", "TensorflowImageRecord"], [218, 1, 1, "", "TensorflowMNIST"], [218, 1, 1, "", "TensorflowTFRecordDataset"], [218, 1, 1, "", "TensorflowVOCRecord"], [218, 2, 1, "", "calculate_md5"], [218, 2, 1, "", "check_integrity"], [218, 2, 1, "", "dataset_registry"], [218, 2, 1, "", "download_url"], [218, 4, 1, "", "framework_datasets"], [218, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[219, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[220, 1, 1, "", "DummyDataset"], [220, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[221, 1, 1, "", "ImagenetRaw"], [221, 1, 1, "", "MXNetImagenetRaw"], [221, 1, 1, "", "ONNXRTImagenetDataset"], [221, 1, 1, "", "PytorchImagenetRaw"], [221, 1, 1, "", "TensorflowImagenetDataset"], [221, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[223, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[224, 0, 0, "-", "coco_filter"], [225, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[224, 1, 1, "", "LabelBalanceCOCORawFilter"], [224, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[225, 1, 1, "", "FILTERS"], [225, 1, 1, "", "Filter"], [225, 1, 1, "", "MXNetFilters"], [225, 1, 1, "", "ONNXRTITFilters"], [225, 1, 1, "", "ONNXRTQLFilters"], [225, 1, 1, "", "PyTorchFilters"], [225, 1, 1, "", "TensorflowFilters"], [225, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[228, 0, 0, "-", "coco_transform"], [229, 0, 0, "-", "imagenet_transform"], [231, 0, 0, "-", "postprocess"], [232, 0, 0, "-", "tokenization"], [233, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.coco_transform": [[228, 1, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[229, 1, 1, "", "BilinearImagenetTransform"], [229, 1, 1, "", "LabelShift"], [229, 1, 1, "", "ONNXResizeCropImagenetTransform"], [229, 1, 1, "", "OnnxBilinearImagenetTransform"], [229, 1, 1, "", "ParseDecodeImagenet"], [229, 1, 1, "", "ParseDecodeImagenetTransform"], [229, 1, 1, "", "QuantizedInput"], [229, 1, 1, "", "ResizeWithAspectRatio"], [229, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [229, 1, 1, "", "TensorflowShiftRescale"], [229, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[231, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[232, 1, 1, "", "BasicTokenizer"], [232, 1, 1, "", "FullTokenizer"], [232, 1, 1, "", "WordpieceTokenizer"], [232, 2, 1, "", "convert_by_vocab"], [232, 2, 1, "", "convert_to_unicode"], [232, 2, 1, "", "load_vocab"], [232, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[233, 1, 1, "", "AlignImageChannelTransform"], [233, 1, 1, "", "BaseTransform"], [233, 1, 1, "", "CastONNXTransform"], [233, 1, 1, "", "CastPyTorchTransform"], [233, 1, 1, "", "CastTFTransform"], [233, 1, 1, "", "CenterCropTFTransform"], [233, 1, 1, "", "CenterCropTransform"], [233, 1, 1, "", "CollectTransform"], [233, 1, 1, "", "ComposeTransform"], [233, 1, 1, "", "CropResizeTFTransform"], [233, 1, 1, "", "CropResizeTransform"], [233, 1, 1, "", "CropToBoundingBox"], [233, 1, 1, "", "InputFeatures"], [233, 1, 1, "", "MXNetCropResizeTransform"], [233, 1, 1, "", "MXNetCropToBoundingBox"], [233, 1, 1, "", "MXNetNormalizeTransform"], [233, 1, 1, "", "MXNetTransforms"], [233, 1, 1, "", "MXNetTranspose"], [233, 1, 1, "", "NormalizeTFTransform"], [233, 1, 1, "", "NormalizeTransform"], [233, 1, 1, "", "ONNXRTCropToBoundingBox"], [233, 1, 1, "", "ONNXRTITTransforms"], [233, 1, 1, "", "ONNXRTQLTransforms"], [233, 1, 1, "", "PaddedCenterCropTransform"], [233, 1, 1, "", "ParseDecodeVocTransform"], [233, 1, 1, "", "PyTorchAlignImageChannel"], [233, 1, 1, "", "PyTorchCropResizeTransform"], [233, 1, 1, "", "PyTorchNormalizeTransform"], [233, 1, 1, "", "PyTorchTransforms"], [233, 1, 1, "", "PyTorchTranspose"], [233, 1, 1, "", "PytorchMxnetTransform"], [233, 1, 1, "", "PytorchMxnetWrapFunction"], [233, 1, 1, "", "RandomCropTFTransform"], [233, 1, 1, "", "RandomCropTransform"], [233, 1, 1, "", "RandomHorizontalFlip"], [233, 1, 1, "", "RandomResizedCropMXNetTransform"], [233, 1, 1, "", "RandomResizedCropPytorchTransform"], [233, 1, 1, "", "RandomResizedCropTFTransform"], [233, 1, 1, "", "RandomResizedCropTransform"], [233, 1, 1, "", "RandomVerticalFlip"], [233, 1, 1, "", "RescaleKerasPretrainTransform"], [233, 1, 1, "", "RescaleTFTransform"], [233, 1, 1, "", "RescaleTransform"], [233, 1, 1, "", "ResizeMXNetTransform"], [233, 1, 1, "", "ResizePytorchTransform"], [233, 1, 1, "", "ResizeTFTransform"], [233, 1, 1, "", "ResizeTransform"], [233, 1, 1, "", "ResizeWithRatio"], [233, 1, 1, "", "SquadExample"], [233, 1, 1, "", "TFModelZooCollectTransform"], [233, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [233, 1, 1, "", "TFSquadV1PostTransform"], [233, 1, 1, "", "TRANSFORMS"], [233, 1, 1, "", "TensorflowCropToBoundingBox"], [233, 1, 1, "", "TensorflowRandomHorizontalFlip"], [233, 1, 1, "", "TensorflowRandomVerticalFlip"], [233, 1, 1, "", "TensorflowResizeWithRatio"], [233, 1, 1, "", "TensorflowTransform"], [233, 1, 1, "", "TensorflowTransforms"], [233, 1, 1, "", "TensorflowTranspose"], [233, 1, 1, "", "TensorflowWrapFunction"], [233, 1, 1, "", "ToArray"], [233, 1, 1, "", "ToNDArrayTransform"], [233, 1, 1, "", "Transforms"], [233, 1, 1, "", "Transpose"], [233, 2, 1, "", "convert_examples_to_features"], [233, 2, 1, "", "get_final_text"], [233, 2, 1, "", "get_torchvision_map"], [233, 2, 1, "", "read_squad_examples"], [233, 2, 1, "", "transform_registry"]], "neural_compressor.experimental": [[234, 0, 0, "-", "benchmark"], [237, 0, 0, "-", "common"], [243, 0, 0, "-", "component"], [244, 0, 0, "-", "compression"], [246, 0, 0, "-", "contrib"], [271, 0, 0, "-", "data"], [276, 0, 0, "-", "distillation"], [277, 0, 0, "-", "export"], [281, 0, 0, "-", "graph_optimization"], [289, 0, 0, "-", "metric"], [291, 0, 0, "-", "mixed_precision"], [292, 0, 0, "-", "model_conversion"], [295, 0, 0, "-", "nas"], [301, 0, 0, "-", "pruner_legacy"], [305, 0, 0, "-", "pruning"], [306, 0, 0, "-", "pruning_recipes"], [310, 0, 0, "-", "pruning_v2"], [311, 0, 0, "-", "pytorch_pruner"], [318, 0, 0, "-", "quantization"], [319, 0, 0, "-", "scheduler"], [324, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[234, 1, 1, "", "Benchmark"], [234, 2, 1, "", "get_architecture"], [234, 2, 1, "", "get_bounded_threads"], [234, 2, 1, "", "get_core_ids"], [234, 2, 1, "", "get_physical_ids"], [234, 2, 1, "", "get_threads"], [234, 2, 1, "", "get_threads_per_core"], [234, 2, 1, "", "set_all_env_var"], [234, 2, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[235, 0, 0, "-", "criterion"], [236, 0, 0, "-", "dataloader"], [238, 0, 0, "-", "metric"], [239, 0, 0, "-", "model"], [240, 0, 0, "-", "optimizer"], [241, 0, 0, "-", "postprocess"], [242, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[235, 1, 1, "", "Criterions"], [235, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [235, 1, 1, "", "KnowledgeDistillationFramework"], [235, 1, 1, "", "KnowledgeDistillationLoss"], [235, 1, 1, "", "PyTorchCriterions"], [235, 1, 1, "", "PyTorchCrossEntropyLoss"], [235, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [235, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [235, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [235, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [235, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [235, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [235, 1, 1, "", "SelfKnowledgeDistillationLoss"], [235, 1, 1, "", "TensorFlowCrossEntropyLoss"], [235, 1, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [235, 1, 1, "", "TensorflowCriterions"], [235, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [235, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [235, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [235, 2, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[236, 1, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[238, 1, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[239, 1, 1, "", "Model"], [239, 2, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[240, 1, 1, "", "Optimizers"], [240, 1, 1, "", "PyTorchOptimizers"], [240, 1, 1, "", "PyTorchSGD"], [240, 1, 1, "", "TensorFlowAdam"], [240, 1, 1, "", "TensorFlowAdamW"], [240, 1, 1, "", "TensorFlowSGD"], [240, 1, 1, "", "TensorflowOptimizers"], [240, 2, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[241, 1, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[242, 2, 1, "", "get_activation"], [242, 2, 1, "", "record_output"]], "neural_compressor.experimental.component": [[243, 1, 1, "", "Component"]], "neural_compressor.experimental.compression": [[245, 0, 0, "-", "pruning"]], "neural_compressor.experimental.compression.pruning": [[245, 2, 1, "", "prepare_pruning"], [245, 2, 1, "", "save"]], "neural_compressor.experimental.contrib": [[247, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[248, 0, 0, "-", "sigopt"], [249, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[248, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[249, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[254, 0, 0, "-", "dataloaders"], [266, 0, 0, "-", "datasets"], [270, 0, 0, "-", "filters"], [273, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[250, 0, 0, "-", "base_dataloader"], [251, 0, 0, "-", "dataloader"], [252, 0, 0, "-", "default_dataloader"], [253, 0, 0, "-", "fetcher"], [255, 0, 0, "-", "mxnet_dataloader"], [256, 0, 0, "-", "onnxrt_dataloader"], [257, 0, 0, "-", "pytorch_dataloader"], [258, 0, 0, "-", "sampler"], [259, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[250, 1, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[252, 1, 1, "", "DefaultDataLoader"], [252, 2, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[253, 1, 1, "", "Fetcher"], [253, 1, 1, "", "IndexFetcher"], [253, 1, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[255, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[256, 1, 1, "", "ONNXRTBertDataLoader"], [256, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[257, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[258, 1, 1, "", "BatchSampler"], [258, 1, 1, "", "IterableSampler"], [258, 1, 1, "", "Sampler"], [258, 1, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[259, 1, 1, "", "TFDataDataLoader"], [259, 1, 1, "", "TensorflowBertDataLoader"], [259, 1, 1, "", "TensorflowDataLoader"], [259, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[260, 0, 0, "-", "bert_dataset"], [261, 0, 0, "-", "coco_dataset"], [262, 0, 0, "-", "dataset"], [263, 0, 0, "-", "dummy_dataset"], [264, 0, 0, "-", "dummy_dataset_v2"], [265, 0, 0, "-", "imagenet_dataset"], [267, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[260, 1, 1, "", "InputFeatures"], [260, 1, 1, "", "ONNXRTBertDataset"], [260, 1, 1, "", "ParseDecodeBert"], [260, 1, 1, "", "PytorchBertDataset"], [260, 1, 1, "", "TensorflowBertDataset"], [260, 1, 1, "", "TensorflowModelZooBertDataset"], [260, 2, 1, "", "convert_examples_to_features"], [260, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[261, 1, 1, "", "COCONpy"], [261, 1, 1, "", "COCORaw"], [261, 1, 1, "", "COCORecordDataset"], [261, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[262, 1, 1, "", "CIFAR10"], [262, 1, 1, "", "CIFAR100"], [262, 1, 1, "", "Dataset"], [262, 1, 1, "", "Datasets"], [262, 1, 1, "", "FashionMNIST"], [262, 1, 1, "", "ImageFolder"], [262, 1, 1, "", "IterableDataset"], [262, 1, 1, "", "MNIST"], [262, 1, 1, "", "MXNetCIFAR10"], [262, 1, 1, "", "MXNetCIFAR100"], [262, 1, 1, "", "MXNetDatasets"], [262, 1, 1, "", "MXNetFashionMNIST"], [262, 1, 1, "", "MXNetImageFolder"], [262, 1, 1, "", "MXNetMNIST"], [262, 1, 1, "", "ONNXRTITDatasets"], [262, 1, 1, "", "ONNXRTQLDatasets"], [262, 1, 1, "", "PyTorchDatasets"], [262, 1, 1, "", "PytorchCIFAR10"], [262, 1, 1, "", "PytorchCIFAR100"], [262, 1, 1, "", "PytorchFashionMNIST"], [262, 1, 1, "", "PytorchMNIST"], [262, 1, 1, "", "PytorchMxnetWrapDataset"], [262, 1, 1, "", "PytorchMxnetWrapFunction"], [262, 1, 1, "", "TensorflowCIFAR10"], [262, 1, 1, "", "TensorflowCIFAR100"], [262, 1, 1, "", "TensorflowDatasets"], [262, 1, 1, "", "TensorflowFashionMNIST"], [262, 1, 1, "", "TensorflowImageFolder"], [262, 1, 1, "", "TensorflowImageRecord"], [262, 1, 1, "", "TensorflowMNIST"], [262, 1, 1, "", "TensorflowTFRecordDataset"], [262, 1, 1, "", "TensorflowVOCRecord"], [262, 2, 1, "", "calculate_md5"], [262, 2, 1, "", "check_integrity"], [262, 2, 1, "", "dataset_registry"], [262, 2, 1, "", "download_url"], [262, 4, 1, "", "framework_datasets"], [262, 2, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[263, 1, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[264, 1, 1, "", "DummyDataset"], [264, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[265, 1, 1, "", "ImagenetRaw"], [265, 1, 1, "", "MXNetImagenetRaw"], [265, 1, 1, "", "ONNXRTImagenetDataset"], [265, 1, 1, "", "PytorchImagenetRaw"], [265, 1, 1, "", "TensorflowImagenetDataset"], [265, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[267, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[268, 0, 0, "-", "coco_filter"], [269, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[268, 1, 1, "", "LabelBalanceCOCORawFilter"], [268, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[269, 1, 1, "", "FILTERS"], [269, 1, 1, "", "Filter"], [269, 1, 1, "", "MXNetFilters"], [269, 1, 1, "", "ONNXRTITFilters"], [269, 1, 1, "", "ONNXRTQLFilters"], [269, 1, 1, "", "PyTorchFilters"], [269, 1, 1, "", "TensorflowFilters"], [269, 2, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[272, 0, 0, "-", "imagenet_transform"], [274, 0, 0, "-", "tokenization"], [275, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[272, 1, 1, "", "BilinearImagenetTransform"], [272, 1, 1, "", "LabelShift"], [272, 1, 1, "", "ONNXResizeCropImagenetTransform"], [272, 1, 1, "", "OnnxBilinearImagenetTransform"], [272, 1, 1, "", "ParseDecodeImagenet"], [272, 1, 1, "", "ParseDecodeImagenetTransform"], [272, 1, 1, "", "QuantizedInput"], [272, 1, 1, "", "ResizeWithAspectRatio"], [272, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[274, 1, 1, "", "BasicTokenizer"], [274, 1, 1, "", "FullTokenizer"], [274, 1, 1, "", "WordpieceTokenizer"], [274, 2, 1, "", "convert_by_vocab"], [274, 2, 1, "", "convert_to_unicode"], [274, 2, 1, "", "load_vocab"], [274, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[275, 1, 1, "", "AlignImageChannelTransform"], [275, 1, 1, "", "BaseTransform"], [275, 1, 1, "", "CastONNXTransform"], [275, 1, 1, "", "CastPyTorchTransform"], [275, 1, 1, "", "CastTFTransform"], [275, 1, 1, "", "CenterCropTFTransform"], [275, 1, 1, "", "CenterCropTransform"], [275, 1, 1, "", "CollectTransform"], [275, 1, 1, "", "ComposeTransform"], [275, 1, 1, "", "CropResizeTFTransform"], [275, 1, 1, "", "CropResizeTransform"], [275, 1, 1, "", "CropToBoundingBox"], [275, 1, 1, "", "InputFeatures"], [275, 1, 1, "", "MXNetCropResizeTransform"], [275, 1, 1, "", "MXNetCropToBoundingBox"], [275, 1, 1, "", "MXNetNormalizeTransform"], [275, 1, 1, "", "MXNetTransforms"], [275, 1, 1, "", "MXNetTranspose"], [275, 1, 1, "", "NormalizeTFTransform"], [275, 1, 1, "", "NormalizeTransform"], [275, 1, 1, "", "ONNXRTCropToBoundingBox"], [275, 1, 1, "", "ONNXRTITTransforms"], [275, 1, 1, "", "ONNXRTQLTransforms"], [275, 1, 1, "", "PaddedCenterCropTransform"], [275, 1, 1, "", "ParseDecodeVocTransform"], [275, 1, 1, "", "PyTorchAlignImageChannel"], [275, 1, 1, "", "PyTorchCropResizeTransform"], [275, 1, 1, "", "PyTorchNormalizeTransform"], [275, 1, 1, "", "PyTorchTransforms"], [275, 1, 1, "", "PyTorchTranspose"], [275, 1, 1, "", "PytorchMxnetTransform"], [275, 1, 1, "", "PytorchMxnetWrapFunction"], [275, 1, 1, "", "RandomCropTFTransform"], [275, 1, 1, "", "RandomCropTransform"], [275, 1, 1, "", "RandomHorizontalFlip"], [275, 1, 1, "", "RandomResizedCropMXNetTransform"], [275, 1, 1, "", "RandomResizedCropPytorchTransform"], [275, 1, 1, "", "RandomResizedCropTFTransform"], [275, 1, 1, "", "RandomResizedCropTransform"], [275, 1, 1, "", "RandomVerticalFlip"], [275, 1, 1, "", "RescaleKerasPretrainTransform"], [275, 1, 1, "", "RescaleTFTransform"], [275, 1, 1, "", "RescaleTransform"], [275, 1, 1, "", "ResizeMXNetTransform"], [275, 1, 1, "", "ResizePytorchTransform"], [275, 1, 1, "", "ResizeTFTransform"], [275, 1, 1, "", "ResizeTransform"], [275, 1, 1, "", "ResizeWithRatio"], [275, 1, 1, "", "SquadExample"], [275, 1, 1, "", "TFModelZooCollectTransform"], [275, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [275, 1, 1, "", "TFSquadV1PostTransform"], [275, 1, 1, "", "TRANSFORMS"], [275, 1, 1, "", "TensorflowCropToBoundingBox"], [275, 1, 1, "", "TensorflowRandomHorizontalFlip"], [275, 1, 1, "", "TensorflowRandomVerticalFlip"], [275, 1, 1, "", "TensorflowResizeWithRatio"], [275, 1, 1, "", "TensorflowTransform"], [275, 1, 1, "", "TensorflowTransforms"], [275, 1, 1, "", "TensorflowTranspose"], [275, 1, 1, "", "TensorflowWrapFunction"], [275, 1, 1, "", "ToArray"], [275, 1, 1, "", "ToNDArrayTransform"], [275, 1, 1, "", "Transforms"], [275, 1, 1, "", "Transpose"], [275, 2, 1, "", "convert_examples_to_features"], [275, 2, 1, "", "get_final_text"], [275, 2, 1, "", "get_torchvision_map"], [275, 2, 1, "", "read_squad_examples"], [275, 2, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[276, 1, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[276, 3, 1, "", "_epoch_ran"], [276, 3, 1, "", "best_model"], [276, 3, 1, "", "best_score"], [276, 3, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[278, 0, 0, "-", "qlinear2qdq"], [279, 0, 0, "-", "tf2onnx"], [280, 0, 0, "-", "torch2onnx"]], "neural_compressor.experimental.export.qlinear2qdq": [[278, 2, 1, "", "check_model"], [278, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[279, 2, 1, "", "tf_to_fp32_onnx"], [279, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[280, 2, 1, "", "dynamic_quant_export"], [280, 2, 1, "", "get_node_mapping"], [280, 2, 1, "", "get_quantizable_onnx_ops"], [280, 2, 1, "", "static_quant_export"], [280, 2, 1, "", "torch_to_fp32_onnx"], [280, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.experimental.graph_optimization": [[281, 1, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[283, 0, 0, "-", "bleu"], [284, 0, 0, "-", "bleu_util"], [285, 0, 0, "-", "coco_label_map"], [286, 0, 0, "-", "coco_tools"], [287, 0, 0, "-", "evaluate_squad"], [288, 0, 0, "-", "f1"], [290, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[283, 1, 1, "", "BLEU"], [283, 1, 1, "", "UnicodeRegex"], [283, 2, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[283, 3, 1, "", "labels"], [283, 3, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[283, 3, 1, "", "nondigit_punct_re"], [283, 3, 1, "", "punct_nondigit_re"], [283, 3, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[284, 2, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[286, 1, 1, "", "COCOEvalWrapper"], [286, 1, 1, "", "COCOWrapper"], [286, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [286, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [286, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[286, 3, 1, "", "dataset"], [286, 3, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[287, 2, 1, "", "evaluate"], [287, 2, 1, "", "exact_match_score"], [287, 2, 1, "", "f1_score"], [287, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[288, 2, 1, "", "evaluate"], [288, 2, 1, "", "f1_score"], [288, 2, 1, "", "metric_max_over_ground_truths"], [288, 2, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[290, 1, 1, "", "Accuracy"], [290, 1, 1, "", "BaseMetric"], [290, 1, 1, "", "COCOmAPv2"], [290, 1, 1, "", "F1"], [290, 1, 1, "", "GeneralTopK"], [290, 1, 1, "", "Loss"], [290, 1, 1, "", "MAE"], [290, 1, 1, "", "METRICS"], [290, 1, 1, "", "MSE"], [290, 1, 1, "", "MXNetMetrics"], [290, 1, 1, "", "ONNXRTGLUE"], [290, 1, 1, "", "ONNXRTITMetrics"], [290, 1, 1, "", "ONNXRTQLMetrics"], [290, 1, 1, "", "PyTorchLoss"], [290, 1, 1, "", "PyTorchMetrics"], [290, 1, 1, "", "RMSE"], [290, 1, 1, "", "ROC"], [290, 1, 1, "", "SquadF1"], [290, 1, 1, "", "TensorflowCOCOMAP"], [290, 1, 1, "", "TensorflowMAP"], [290, 1, 1, "", "TensorflowMetrics"], [290, 1, 1, "", "TensorflowTopK"], [290, 1, 1, "", "TensorflowVOCMAP"], [290, 1, 1, "", "WrapMXNetMetric"], [290, 1, 1, "", "WrapONNXRTMetric"], [290, 1, 1, "", "WrapPyTorchMetric"], [290, 1, 1, "", "mIOU"], [290, 2, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[290, 3, 1, "", "label_list"], [290, 3, 1, "", "pred_list"], [290, 3, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[290, 3, 1, "", "k"], [290, 3, 1, "", "num_correct"], [290, 3, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[290, 3, 1, "", "sample"], [290, 3, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[290, 3, 1, "", "compare_label"], [290, 3, 1, "", "label_list"], [290, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[290, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[290, 3, 1, "", "compare_label"], [290, 3, 1, "", "label_list"], [290, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[290, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[290, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[290, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[290, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[290, 3, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[290, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[290, 3, 1, "", "k"], [290, 3, 1, "", "num_correct"], [290, 3, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[291, 1, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[292, 1, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[293, 0, 0, "-", "basic_nas"], [294, 0, 0, "-", "dynas"], [296, 0, 0, "-", "nas"], [297, 0, 0, "-", "nas_utils"], [298, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[293, 1, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[294, 1, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[296, 1, 1, "", "NAS"], [296, 1, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[297, 2, 1, "", "create_search_space_pool"], [297, 2, 1, "", "find_pareto_front"], [297, 2, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[298, 1, 1, "", "BayesianOptimizationSearcher"], [298, 1, 1, "", "GridSearcher"], [298, 1, 1, "", "RandomSearcher"], [298, 1, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[299, 0, 0, "-", "gradient_sensitivity"], [300, 0, 0, "-", "group_lasso"], [302, 0, 0, "-", "magnitude"], [303, 0, 0, "-", "pattern_lock"], [304, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[299, 1, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[300, 1, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[302, 1, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[303, 1, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[304, 1, 1, "", "Pruner"], [304, 2, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[305, 1, 1, "", "Pruning"], [305, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[305, 3, 1, "", "conf"], [305, 3, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[307, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[308, 0, 0, "-", "pattern"], [309, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[308, 1, 1, "", "PATTERNS"], [308, 1, 1, "", "PatternBase"], [308, 2, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[308, 3, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[309, 1, 1, "", "TilePatternBase"], [309, 1, 1, "", "TilePattern_1x1"], [309, 1, 1, "", "TilePattern_1x16"], [309, 1, 1, "", "TilePattern_1x2"], [309, 1, 1, "", "TilePattern_2x2"], [309, 1, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[310, 1, 1, "", "Pruning"], [310, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[310, 3, 1, "", "conf"], [310, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[312, 0, 0, "-", "logger"], [313, 0, 0, "-", "patterns"], [314, 0, 0, "-", "prune_utils"], [315, 0, 0, "-", "pruner"], [316, 0, 0, "-", "pruning"], [317, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[313, 1, 1, "", "Pattern"], [313, 1, 1, "", "PatternNInM"], [313, 1, 1, "", "PatternNxM"], [313, 2, 1, "", "get_pattern"], [313, 2, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[313, 3, 1, "", "is_global"], [313, 3, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[313, 3, 1, "", "M"], [313, 3, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[313, 3, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[314, 2, 1, "", "check_config"], [314, 2, 1, "", "parse_not_to_prune"], [314, 2, 1, "", "parse_to_prune"], [314, 2, 1, "", "process_and_check_config"], [314, 2, 1, "", "process_config"], [314, 2, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[315, 1, 1, "", "MagnitudePruner"], [315, 1, 1, "", "PatternLockPruner"], [315, 1, 1, "", "Pruner"], [315, 1, 1, "", "SnipMomentumPruner"], [315, 1, 1, "", "SnipPruner"], [315, 2, 1, "", "get_pruner"], [315, 2, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[315, 3, 1, "", "config"], [315, 3, 1, "", "current_sparsity_ratio"], [315, 3, 1, "", "end_step"], [315, 3, 1, "", "global_step"], [315, 3, 1, "", "masks"], [315, 3, 1, "", "max_sparsity_ratio_per_layer"], [315, 3, 1, "", "modules"], [315, 3, 1, "", "pattern"], [315, 3, 1, "", "scheduler"], [315, 3, 1, "", "scores"], [315, 3, 1, "", "start_step"], [315, 3, 1, "", "target_sparsity_ratio"], [315, 3, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[316, 1, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[316, 3, 1, "", "config_file_path"], [316, 3, 1, "", "model"], [316, 3, 1, "", "pruner_info"], [316, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[317, 1, 1, "", "IterativeScheduler"], [317, 1, 1, "", "OneshotScheduler"], [317, 1, 1, "", "Scheduler"], [317, 2, 1, "", "get_scheduler"], [317, 2, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[317, 3, 1, "", "config"]], "neural_compressor.experimental.quantization": [[318, 1, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[319, 1, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[320, 0, 0, "-", "auto_mixed_precision"], [321, 0, 0, "-", "basic"], [322, 0, 0, "-", "bayesian"], [323, 0, 0, "-", "exhaustive"], [325, 0, 0, "-", "mse"], [326, 0, 0, "-", "mse_v2"], [327, 0, 0, "-", "random"], [328, 0, 0, "-", "strategy"], [330, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[320, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[321, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[322, 1, 1, "", "BayesianOptimization"], [322, 1, 1, "", "BayesianTuneStrategy"], [322, 1, 1, "", "TargetSpace"], [322, 2, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[323, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[325, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[326, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[327, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[328, 1, 1, "", "TuneStrategy"], [328, 2, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[329, 0, 0, "-", "constant"], [331, 0, 0, "-", "tuning_sampler"], [332, 0, 0, "-", "tuning_space"], [333, 0, 0, "-", "tuning_structs"], [334, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[331, 1, 1, "", "FallbackTuningSampler"], [331, 1, 1, "", "ModelWiseTuningSampler"], [331, 1, 1, "", "OpTypeWiseTuningSampler"], [331, 1, 1, "", "OpWiseTuningSampler"], [331, 1, 1, "", "SmoothQuantSampler"], [331, 1, 1, "", "TuningOrder"], [331, 1, 1, "", "TuningSampler"], [331, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[332, 1, 1, "", "TuningItem"], [332, 1, 1, "", "TuningSpace"], [332, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [332, 2, 1, "", "pattern_to_internal"], [332, 2, 1, "", "pattern_to_path"], [332, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[333, 1, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[334, 1, 1, "", "OrderedDefaultDict"], [334, 2, 1, "", "extract_data_type"], [334, 2, 1, "", "get_adaptor_name"], [334, 2, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[336, 0, 0, "-", "bleu"], [337, 0, 0, "-", "bleu_util"], [338, 0, 0, "-", "coco_label_map"], [339, 0, 0, "-", "coco_tools"], [340, 0, 0, "-", "evaluate_squad"], [341, 0, 0, "-", "f1"], [343, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[336, 1, 1, "", "BLEU"], [336, 1, 1, "", "UnicodeRegex"], [336, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[336, 3, 1, "", "labels"], [336, 3, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[336, 3, 1, "", "nondigit_punct_re"], [336, 3, 1, "", "punct_nondigit_re"], [336, 3, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[337, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[339, 1, 1, "", "COCOEvalWrapper"], [339, 1, 1, "", "COCOWrapper"], [339, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [339, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [339, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[339, 3, 1, "", "dataset"], [339, 3, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[340, 2, 1, "", "evaluate"], [340, 2, 1, "", "exact_match_score"], [340, 2, 1, "", "f1_score"], [340, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[341, 2, 1, "", "evaluate"], [341, 2, 1, "", "f1_score"], [341, 2, 1, "", "metric_max_over_ground_truths"], [341, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[343, 1, 1, "", "Accuracy"], [343, 1, 1, "", "BaseMetric"], [343, 1, 1, "", "COCOmAPv2"], [343, 1, 1, "", "F1"], [343, 1, 1, "", "GeneralTopK"], [343, 1, 1, "", "Loss"], [343, 1, 1, "", "MAE"], [343, 1, 1, "", "METRICS"], [343, 1, 1, "", "MSE"], [343, 1, 1, "", "MXNetMetrics"], [343, 1, 1, "", "Metric"], [343, 1, 1, "", "ONNXRTGLUE"], [343, 1, 1, "", "ONNXRTITMetrics"], [343, 1, 1, "", "ONNXRTQLMetrics"], [343, 1, 1, "", "PyTorchLoss"], [343, 1, 1, "", "PyTorchMetrics"], [343, 1, 1, "", "RMSE"], [343, 1, 1, "", "ROC"], [343, 1, 1, "", "SquadF1"], [343, 1, 1, "", "TensorflowCOCOMAP"], [343, 1, 1, "", "TensorflowMAP"], [343, 1, 1, "", "TensorflowMetrics"], [343, 1, 1, "", "TensorflowTopK"], [343, 1, 1, "", "TensorflowVOCMAP"], [343, 1, 1, "", "WrapMXNetMetric"], [343, 1, 1, "", "WrapONNXRTMetric"], [343, 1, 1, "", "WrapPyTorchMetric"], [343, 1, 1, "", "mIOU"], [343, 2, 1, "", "metric_registry"], [343, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[343, 3, 1, "", "label_list"], [343, 3, 1, "", "pred_list"], [343, 3, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[343, 3, 1, "", "k"], [343, 3, 1, "", "num_correct"], [343, 3, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[343, 3, 1, "", "sample"], [343, 3, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[343, 3, 1, "", "compare_label"], [343, 3, 1, "", "label_list"], [343, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[343, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[343, 3, 1, "", "compare_label"], [343, 3, 1, "", "label_list"], [343, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[343, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[343, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[343, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[343, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[343, 3, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[343, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[343, 3, 1, "", "k"], [343, 3, 1, "", "num_correct"], [343, 3, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[344, 2, 1, "", "fit"]], "neural_compressor.model": [[345, 0, 0, "-", "base_model"], [347, 0, 0, "-", "keras_model"], [348, 0, 0, "-", "model"], [349, 0, 0, "-", "mxnet_model"], [350, 0, 0, "-", "nets_factory"], [351, 0, 0, "-", "onnx_model"], [352, 0, 0, "-", "tensorflow_model"], [353, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[345, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[347, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[348, 1, 1, "", "Model"], [348, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[349, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[350, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[351, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[352, 1, 1, "", "TensorflowBaseModel"], [352, 1, 1, "", "TensorflowCheckpointModel"], [352, 1, 1, "", "TensorflowModel"], [352, 1, 1, "", "TensorflowQATModel"], [352, 1, 1, "", "TensorflowSavedModelModel"], [352, 2, 1, "", "checkpoint_session"], [352, 2, 1, "", "estimator_session"], [352, 2, 1, "", "frozen_pb_session"], [352, 2, 1, "", "get_model_type"], [352, 2, 1, "", "graph_def_session"], [352, 2, 1, "", "graph_session"], [352, 2, 1, "", "keras_session"], [352, 2, 1, "", "load_saved_model"], [352, 2, 1, "", "saved_model_session"], [352, 2, 1, "", "slim_session"], [352, 2, 1, "", "validate_and_inference_input_output"], [352, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[353, 1, 1, "", "IPEXModel"], [353, 1, 1, "", "PyTorchBaseModel"], [353, 1, 1, "", "PyTorchFXModel"], [353, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[354, 1, 1, "", "Accuracy"], [354, 1, 1, "", "Footprint"], [354, 1, 1, "", "ModelSize"], [354, 1, 1, "", "MultiObjective"], [354, 1, 1, "", "Objective"], [354, 1, 1, "", "Performance"], [354, 2, 1, "", "objective_custom_registry"], [354, 2, 1, "", "objective_registry"]], "neural_compressor.profiling": [[357, 0, 0, "-", "parser"], [367, 0, 0, "-", "profiler"]], "neural_compressor.profiling.parser": [[356, 0, 0, "-", "factory"], [359, 0, 0, "-", "onnx_parser"], [361, 0, 0, "-", "parser"], [362, 0, 0, "-", "result"], [364, 0, 0, "-", "tensorflow_parser"]], "neural_compressor.profiling.parser.factory": [[356, 1, 1, "", "ParserFactory"]], "neural_compressor.profiling.parser.onnx_parser": [[358, 0, 0, "-", "factory"], [360, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[358, 1, 1, "", "OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[360, 1, 1, "", "OnnxProfilingParser"]], "neural_compressor.profiling.parser.parser": [[361, 1, 1, "", "ProfilingParser"]], "neural_compressor.profiling.parser.result": [[362, 1, 1, "", "ProfilingResult"]], "neural_compressor.profiling.parser.tensorflow_parser": [[363, 0, 0, "-", "factory"], [365, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[363, 1, 1, "", "TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[365, 1, 1, "", "TensorFlowProfilingParser"]], "neural_compressor.profiling.profiler": [[366, 0, 0, "-", "factory"], [369, 0, 0, "-", "onnxrt_profiler"], [372, 0, 0, "-", "profiler"], [374, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.profiling.profiler.factory": [[366, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[368, 0, 0, "-", "factory"], [370, 0, 0, "-", "profiler"], [371, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[368, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[370, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[371, 2, 1, "", "create_onnx_config"]], "neural_compressor.profiling.profiler.profiler": [[372, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[373, 0, 0, "-", "factory"], [375, 0, 0, "-", "profiler"], [376, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[373, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[375, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[376, 2, 1, "", "create_tf_config"], [376, 2, 1, "", "delete_assign"], [376, 2, 1, "", "set_eager_execution"]], "neural_compressor.quantization": [[377, 2, 1, "", "fit"]], "neural_compressor.strategy": [[378, 0, 0, "-", "auto"], [379, 0, 0, "-", "auto_mixed_precision"], [380, 0, 0, "-", "basic"], [381, 0, 0, "-", "bayesian"], [382, 0, 0, "-", "conservative"], [383, 0, 0, "-", "exhaustive"], [384, 0, 0, "-", "hawq_v2"], [386, 0, 0, "-", "mse"], [387, 0, 0, "-", "mse_v2"], [388, 0, 0, "-", "random"], [389, 0, 0, "-", "strategy"], [391, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[378, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[379, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[380, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[381, 1, 1, "", "BayesianOptimization"], [381, 1, 1, "", "BayesianTuneStrategy"], [381, 1, 1, "", "TargetSpace"], [381, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[382, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[383, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[384, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[386, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[387, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[388, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[389, 1, 1, "", "TuneStrategy"], [389, 1, 1, "", "TuneStrategyMeta"], [389, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[390, 0, 0, "-", "constant"], [392, 0, 0, "-", "tuning_sampler"], [393, 0, 0, "-", "tuning_space"], [394, 0, 0, "-", "tuning_structs"], [395, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[392, 1, 1, "", "BlockFallbackTuningSampler"], [392, 1, 1, "", "FallbackTuningSampler"], [392, 1, 1, "", "LowerBitsSampler"], [392, 1, 1, "", "ModelWiseTuningSampler"], [392, 1, 1, "", "OpTypeWiseTuningSampler"], [392, 1, 1, "", "OpWiseTuningSampler"], [392, 1, 1, "", "SmoothQuantSampler"], [392, 1, 1, "", "TuningOrder"], [392, 1, 1, "", "TuningSampler"]], "neural_compressor.strategy.utils.tuning_space": [[393, 1, 1, "", "TuningItem"], [393, 1, 1, "", "TuningSpace"], [393, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [393, 2, 1, "", "pattern_to_internal"], [393, 2, 1, "", "pattern_to_path"], [393, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[394, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[395, 1, 1, "", "ClassRegister"], [395, 1, 1, "", "OrderedDefaultDict"], [395, 1, 1, "", "QuantOptions"], [395, 1, 1, "", "QuantType"], [395, 2, 1, "", "build_slave_faker_model"], [395, 2, 1, "", "extract_data_type"], [395, 2, 1, "", "get_adaptor_name"], [395, 2, 1, "", "preprocess_user_cfg"], [395, 2, 1, "", "reverted_data_type"]], "neural_compressor.template": [[396, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[396, 1, 1, "", "ExampleClass"], [396, 3, 1, "", "attribute1"], [396, 2, 1, "", "function1"], [396, 2, 1, "", "function2"], [396, 2, 1, "", "function3"], [396, 2, 1, "", "generator1"], [396, 4, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[396, 3, 1, "", "attr1"], [396, 3, 1, "", "attr2"], [396, 3, 1, "", "attr5"]], "neural_compressor.training": [[398, 1, 1, "", "CallBacks"], [398, 1, 1, "", "CompressionManager"], [398, 2, 1, "", "fit"], [398, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[399, 0, 0, "-", "collect_layer_histogram"], [400, 0, 0, "-", "constant"], [401, 0, 0, "-", "create_obj_from_config"], [403, 0, 0, "-", "kl_divergence"], [404, 0, 0, "-", "load_huggingface"], [405, 0, 0, "-", "logger"], [406, 0, 0, "-", "neural_insights_utils"], [407, 0, 0, "-", "options"], [408, 0, 0, "-", "pytorch"], [409, 0, 0, "-", "utility"], [410, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[399, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[401, 2, 1, "", "create_dataloader"], [401, 2, 1, "", "create_dataset"], [401, 2, 1, "", "create_eval_func"], [401, 2, 1, "", "create_train_func"], [401, 2, 1, "", "get_algorithm"], [401, 2, 1, "", "get_func_from_config"], [401, 2, 1, "", "get_metrics"], [401, 2, 1, "", "get_postprocess"], [401, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[403, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[404, 1, 1, "", "OptimizedModel"], [404, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[405, 1, 1, "", "Logger"], [405, 2, 1, "", "debug"], [405, 2, 1, "", "error"], [405, 2, 1, "", "fatal"], [405, 2, 1, "", "info"], [405, 2, 1, "", "log"], [405, 2, 1, "", "warn"], [405, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[406, 2, 1, "", "register_neural_insights_workload"], [406, 2, 1, "", "update_neural_insights_workload"], [406, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[407, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[408, 2, 1, "", "is_int8_model"], [408, 2, 1, "", "load"]], "neural_compressor.utils.utility": [[409, 1, 1, "", "CaptureOutputToFile"], [409, 1, 1, "", "CpuInfo"], [409, 2, 1, "", "Dequantize"], [409, 1, 1, "", "DotDict"], [409, 1, 1, "", "GLOBAL_STATE"], [409, 1, 1, "", "LazyImport"], [409, 1, 1, "", "MODE"], [409, 1, 1, "", "OpEntry"], [409, 1, 1, "", "Statistics"], [409, 2, 1, "", "alias_param"], [409, 2, 1, "", "calculate_mse"], [409, 2, 1, "", "combine_histogram"], [409, 2, 1, "", "compare_objects"], [409, 2, 1, "", "compute_sparsity"], [409, 2, 1, "", "dequantize_weight"], [409, 2, 1, "", "dump_class_attrs"], [409, 2, 1, "", "dump_data_to_local"], [409, 2, 1, "", "dump_elapsed_time"], [409, 2, 1, "", "dump_table"], [409, 2, 1, "", "dump_table_to_csv"], [409, 2, 1, "", "equal_dicts"], [409, 2, 1, "", "fault_tolerant_file"], [409, 2, 1, "", "get_all_fp32_data"], [409, 2, 1, "", "get_number_of_sockets"], [409, 2, 1, "", "get_op_list"], [409, 2, 1, "", "get_size"], [409, 2, 1, "", "get_tensor_histogram"], [409, 2, 1, "", "get_tensors_info"], [409, 2, 1, "", "get_tuning_history"], [409, 2, 1, "", "get_weights_details"], [409, 2, 1, "", "load_data_from_pkl"], [409, 2, 1, "", "mse_metric_gap"], [409, 2, 1, "", "print_op_list"], [409, 2, 1, "", "print_table"], [409, 2, 1, "", "recover"], [409, 2, 1, "", "set_random_seed"], [409, 2, 1, "", "set_resume_from"], [409, 2, 1, "", "set_tensorboard"], [409, 2, 1, "", "set_workspace"], [409, 2, 1, "", "show_memory_info"], [409, 2, 1, "", "singleton"], [409, 2, 1, "", "str2array"], [409, 2, 1, "", "time_limit"], [409, 2, 1, "", "version1_eq_version2"], [409, 2, 1, "", "version1_gt_version2"], [409, 2, 1, "", "version1_gte_version2"], [409, 2, 1, "", "version1_lt_version2"], [409, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[410, 1, 1, "", "WeightsDetails"], [410, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:attribute", "4": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "data", "Python data"]}, "titleterms": {"block_mask": [0, 187], "neural_compressor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411], "adaptor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 419, 420, 422], "modul": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 171, 172, 174, 176, 178, 179, 180, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 272, 274, 275, 276, 278, 279, 280, 281, 283, 284, 286, 287, 288, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 302, 303, 304, 305, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 331, 332, 333, 334, 336, 337, 339, 340, 341, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 356, 358, 360, 361, 362, 363, 365, 366, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 392, 393, 394, 395, 396, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410], "content": [1, 2, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 171, 172, 174, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 331, 332, 333, 334, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 358, 360, 361, 362, 363, 365, 366, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 396, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 418], "class": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 150, 153, 154, 155, 157, 160, 161, 162, 163, 164, 166, 167, 171, 172, 174, 178, 179, 180, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 281, 282, 283, 286, 289, 290, 291, 292, 293, 294, 296, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 331, 332, 333, 334, 336, 339, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 358, 360, 361, 362, 363, 365, 366, 368, 370, 372, 373, 375, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 392, 393, 394, 395, 396, 398, 399, 402, 403, 404, 405, 407, 409, 410, 419], "function": [1, 13, 16, 34, 42, 43, 44, 66, 67, 69, 103, 104, 115, 117, 147, 148, 149, 150, 152, 155, 156, 158, 159, 160, 162, 165, 167, 171, 172, 174, 176, 178, 180, 181, 185, 188, 193, 194, 195, 196, 198, 207, 208, 216, 218, 222, 225, 226, 227, 230, 232, 233, 234, 235, 237, 239, 240, 242, 245, 252, 260, 262, 266, 269, 270, 271, 273, 274, 275, 278, 279, 280, 283, 284, 286, 287, 288, 289, 290, 297, 304, 308, 313, 314, 315, 317, 322, 328, 332, 334, 336, 337, 339, 340, 341, 342, 343, 344, 348, 352, 354, 371, 376, 377, 381, 389, 393, 395, 396, 398, 401, 402, 404, 405, 406, 408, 409, 444], "subpackag": [2, 17, 86, 110, 111, 113, 173, 175, 202, 227, 246, 271, 282, 306, 324, 335, 385], "submodul": [2, 12, 17, 29, 50, 75, 86, 94, 100, 105, 110, 111, 113, 116, 129, 144, 151, 162, 168, 169, 173, 175, 177, 181, 188, 199, 203, 210, 222, 226, 230, 237, 244, 247, 254, 266, 270, 273, 277, 282, 289, 295, 301, 307, 311, 324, 330, 335, 342, 346, 357, 359, 364, 367, 369, 374, 385, 391, 397, 402], "packag": [2, 29, 162, 181, 188, 210, 222, 226, 227, 230, 237, 254, 266, 270, 271, 273, 282, 289, 301, 306, 307, 324, 342, 346, 385, 402, 468, 470, 472, 473], "kera": 3, "keras_util": [4, 5, 6, 7, 8, 9, 10], "conv2d": 4, "dens": 5, "depthwise_conv2d": 6, "pool2d": 8, "quantiz": [9, 41, 318, 377, 415, 418, 420, 421, 433, 437, 441, 443, 446, 449, 452, 455, 456, 464, 475, 481, 482, 483, 484, 487, 493], "separable_conv2d": 10, "mxnet": [11, 439, 454, 482, 489], "mxnet_util": [12, 13], "util": [13, 43, 147, 158, 196, 329, 330, 331, 332, 333, 334, 371, 376, 390, 391, 392, 393, 394, 395, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 424], "onnxrt": [14, 439, 454, 489], "ox_util": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], "calibr": [15, 16, 420, 437], "oper": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 420, 421], "activ": 18, "argmax": 19, "attent": 20, "binary_op": 21, "concat": 22, "conv": 23, "direct_q8": 24, "embed_layernorm": 25, "gather": 26, "gavgpool": 27, "gemm": 28, "lstm": 30, "matmul": [31, 487], "maxpool": 32, "norm": 33, "op": [34, 446], "pad": 35, "pool": 36, "reduc": 37, "resiz": 38, "split": 39, "unary_op": 40, "smooth_quant": [42, 155, 163], "pytorch": [44, 408, 439, 444, 446, 454, 482, 483, 488, 489, 493], "queri": [45, 419], "tensorflow": [46, 439, 444, 446, 454, 482, 483, 488, 489, 493], "tf_util": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], "graph_convert": 47, "graph_converter_without_calib": 48, "graph_rewrit": [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "bf16": [49, 50, 456], "bf16_convert": [49, 148], "gener": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 420], "convert_add_to_biasadd": 51, "convert_layout": 52, "convert_leakyrelu": 53, "convert_nan_to_random": 54, "convert_placeholder_to_const": 55, "dequantize_cast_optim": 56, "dilated_contract": 57, "dummy_biasadd": 58, "expanddims_optim": 59, "fetch_weight_from_reshap": 60, "fold_batch_norm": 61, "fold_const": 62, "fuse_biasadd_add": 63, "fuse_column_wise_mul": 64, "fuse_conv_with_math": 65, "fuse_decomposed_bn": 66, "fuse_decomposed_in": 67, "fuse_gelu": 68, "fuse_layer_norm": 69, "fuse_pad_with_conv": 70, "fuse_pad_with_fp32_conv": 71, "fuse_reshape_transpos": 72, "graph_cse_optim": 73, "grappler_pass": 74, "insert_print_nod": 76, "move_squeeze_after_relu": 77, "pre_optim": 78, "remove_training_nod": 79, "rename_batch_norm": 80, "split_shared_input": 81, "strip_equivalent_nod": 82, "strip_unused_nod": 83, "switch_optim": 84, "graph_bas": 85, "int8": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 446, 493], "freeze_fake_qu": 87, "freeze_valu": 88, "freeze_value_without_calib": 89, "fuse_conv_redundant_dequant": 90, "fuse_conv_requant": 91, "fuse_matmul_redundant_dequant": 92, "fuse_matmul_requant": 93, "meta_op_optim": 95, "post_hostconst_convert": 96, "post_quantized_op_cs": 97, "rnn_convert": 98, "scale_propag": 99, "onnx": [100, 101, 102, 103, 104, 423, 452, 482, 493], "onnx_graph": 101, "onnx_nod": 102, "onnx_schema": 103, "tf2onnx_util": 104, "qdq": [105, 106, 107, 108, 122, 123, 124, 125, 126, 127, 128, 129, 130, 493], "insert_qdq_pattern": 106, "merge_duplicated_qdq": 107, "share_qdq_y_pattern": 108, "graph_util": 109, "quantize_graph": [111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137], "qat": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 493], "fake_quant": 112, "quantize_config": 114, "quantize_help": 115, "quantize_lay": [116, 117, 118, 119, 120], "optimize_lay": 117, "quantize_layer_add": 118, "quantize_layer_bas": 119, "quantize_layer_bn": 120, "quantize_wrapp": 121, "fuse_qdq_bn": 122, "fuse_qdq_concatv2": 123, "fuse_qdq_conv": 124, "fuse_qdq_deconv": 125, "fuse_qdq_in": 126, "fuse_qdq_matmul": 127, "fuse_qdq_pool": 128, "optimize_qdq": 130, "quantize_graph_bas": 131, "quantize_graph_bn": 132, "quantize_graph_concatv2": 133, "quantize_graph_conv": 134, "quantize_graph_for_intel_cpu": 135, "quantize_graph_matmul": 136, "quantize_graph_pool": 137, "quantize_graph_common": 138, "smooth_quant_calibr": 139, "smooth_quant_scal": 140, "tf2onnx_convert": 141, "transform_graph": [142, 143, 144, 145, 146], "bias_correct": 142, "graph_transform_bas": 143, "insert_log": 145, "rerange_quantized_concat": 146, "torch_util": [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 242], "gptq": 149, "hawq_metr": 150, "mixed_precis": [152, 291], "model_wrapp": 153, "pattern_detector": 154, "symbolic_trac": 156, "teq": 157, "weight_onli": 159, "algorithm": [160, 161, 162, 163, 164, 437, 487, 490], "fast_bias_correct": 161, "weight_correct": 164, "benchmark": [165, 234, 427, 436, 441, 455, 481], "compress": [166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 244, 245, 428, 484], "callback": 166, "distil": [167, 168, 276, 442, 443, 455, 481, 493], "criterion": [167, 235], "hpo": [169, 170, 171, 172], "sa_optim": 170, "search_algorithm": [171, 298], "search_spac": 172, "pruner": [174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 304, 315], "criteria": [174, 479, 490], "model_slim": [176, 177, 178, 179], "auto_slim": 176, "pattern_analyz": 178, "weight_slim": 179, "pattern": [180, 181, 182, 183, 184, 307, 308, 309, 313, 479], "base": [180, 185, 452, 491], "mha": [182, 189], "ninm": 183, "nxm": 184, "basic": [186, 321, 380, 416, 490], "pattern_lock": [190, 303], "progress": 191, "retrain_fre": 192, "reg": 193, "schedul": [194, 317, 319, 479], "tf_criteria": 195, "conf": [197, 198, 199, 200], "config": [197, 201, 429, 439, 477], "dotdict": 198, "pythonic_config": 200, "contrib": [202, 203, 204, 205, 246, 247, 248, 249], "strategi": [203, 204, 205, 247, 248, 249, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 434, 486, 490], "sigopt": [204, 248, 486, 490], "tpe": [205, 249, 490], "data": [206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 420, 421, 441, 445], "dataload": [206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 236, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 438, 439], "base_dataload": [206, 250], "default_dataload": [208, 252], "fetcher": [209, 253], "attribut": [210, 218, 227, 262, 271, 282, 306, 346, 396, 402, 413], "mxnet_dataload": [211, 255], "onnxrt_dataload": [212, 256], "pytorch_dataload": [213, 257], "sampler": [214, 258], "tensorflow_dataload": [215, 259], "dataset": [216, 217, 218, 219, 220, 221, 222, 223, 260, 261, 262, 263, 264, 265, 266, 267, 439, 441, 450], "bert_dataset": [216, 260], "coco_dataset": [217, 261], "dummy_dataset": [219, 263], "dummy_dataset_v2": [220, 264], "imagenet_dataset": [221, 265], "style_transfer_dataset": [223, 267], "filter": [224, 225, 226, 268, 269, 270], "coco_filt": [224, 268], "transform": [228, 229, 230, 231, 232, 233, 272, 273, 274, 275, 450, 489], "coco_transform": 228, "imagenet_transform": [229, 272], "postprocess": [231, 241], "token": [232, 274], "experiment": [234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334], "common": [235, 236, 237, 238, 239, 240, 241, 242, 415, 447], "metric": [238, 283, 284, 285, 286, 287, 288, 289, 290, 336, 337, 338, 339, 340, 341, 342, 343, 450, 454], "model": [239, 345, 346, 347, 348, 349, 350, 351, 352, 353, 420, 431, 446, 449, 452, 455, 457, 464, 479, 484, 487, 493], "optim": [240, 465, 475, 478, 479, 491], "compon": 243, "prune": [245, 305, 316, 455, 479, 481, 493], "export": [277, 278, 279, 280, 446, 484], "qlinear2qdq": 278, "tf2onnx": 279, "torch2onnx": 280, "graph_optim": 281, "bleu": [283, 336], "bleu_util": [284, 337], "coco_label_map": [285, 338], "coco_tool": [286, 339], "evaluate_squad": [287, 340], "f1": [288, 341], "model_convers": 292, "na": [293, 294, 295, 296, 297, 298, 416, 481], "basic_na": 293, "dyna": 294, "nas_util": 297, "pruner_legaci": [299, 300, 301, 302, 303, 304], "gradient_sensit": 299, "group_lasso": 300, "magnitud": 302, "pruning_recip": [306, 307, 308, 309], "tile_pattern": 309, "pruning_v2": 310, "pytorch_prun": [311, 312, 313, 314, 315, 316, 317], "logger": [312, 405], "prune_util": 314, "auto_mixed_precis": [320, 379], "bayesian": [322, 381, 490], "exhaust": [323, 383, 490], "mse": [325, 386, 490], "mse_v2": [326, 387, 490], "random": [327, 388, 490], "constant": [329, 390, 400], "tuning_sampl": [331, 392], "tuning_spac": [332, 393], "tuning_struct": [333, 394], "mix_precis": 344, "base_model": 345, "keras_model": 347, "mxnet_model": 349, "nets_factori": 350, "onnx_model": 351, "tensorflow_model": 352, "torch_model": 353, "object": [354, 432, 477], "profil": [355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 441], "parser": [356, 357, 358, 359, 360, 361, 362, 363, 364, 365], "factori": [356, 358, 363, 366, 368, 373], "onnx_pars": [358, 359, 360], "result": 362, "tensorflow_pars": [363, 364, 365], "onnxrt_profil": [368, 369, 370, 371], "tensorflow_profil": [373, 374, 375, 376], "auto": [378, 469, 475, 483, 487, 490], "conserv": [382, 490], "hawq_v2": [384, 490], "templat": [396, 397, 414], "api_doc_exampl": 396, "train": [398, 415, 435, 444, 455, 482], "collect_layer_histogram": 399, "create_obj_from_config": 401, "kl_diverg": 403, "load_huggingfac": 404, "neural_insights_util": 406, "option": [407, 444, 463], "weights_detail": 410, "version": 411, "intel": [412, 418, 438, 441, 451, 452, 454, 455, 461, 469, 475, 493, 494], "neural": [412, 415, 416, 418, 438, 441, 451, 452, 454, 455, 458, 462, 464, 469, 475, 479, 486, 491, 494], "compressor": [412, 415, 418, 438, 441, 451, 452, 454, 455, 469, 475, 486, 494], "document": [412, 418, 425, 494], "section": [412, 494], "contributor": [413, 414], "coven": [413, 414], "code": [413, 414, 416, 455, 476, 484, 491], "conduct": [413, 414], "our": [413, 487], "pledg": 413, "standard": 413, "respons": 413, "scope": [413, 479], "enforc": 413, "contribut": [414, 468, 472], "guidelin": 414, "pull": 414, "request": [414, 456], "checklist": 414, "support": [414, 415, 416, 419, 421, 436, 437, 438, 439, 441, 442, 443, 444, 446, 448, 451, 452, 454, 456, 457, 459, 460, 464, 465, 477, 478, 479, 481, 482, 484, 487, 488, 489, 492], "fx": 415, "introduct": [415, 416, 419, 420, 421, 436, 437, 438, 439, 441, 442, 443, 444, 446, 448, 451, 454, 456, 457, 475, 477, 478, 479, 481, 482, 484, 486, 487, 488, 489, 490, 492], "mode": [415, 493], "matrix": [415, 416, 419, 436, 437, 438, 439, 441, 442, 443, 444, 446, 448, 451, 454, 456, 457, 460, 477, 478, 479, 481, 482, 484, 487, 488, 492], "get": [415, 416, 418, 419, 436, 438, 439, 441, 442, 443, 444, 448, 449, 454, 456, 458, 469, 476, 477, 478, 479, 481, 482, 488, 492], "start": [415, 416, 418, 419, 436, 438, 439, 441, 442, 443, 444, 448, 449, 454, 456, 458, 459, 463, 469, 477, 478, 479, 481, 482, 488, 492], "post": [415, 455, 482], "static": [415, 482], "dynam": [415, 416, 482], "awar": [415, 455, 482], "exampl": [415, 416, 419, 425, 436, 438, 439, 441, 442, 443, 444, 445, 446, 454, 455, 456, 457, 460, 464, 477, 478, 479, 482, 484, 487, 488, 493], "note": [415, 485], "detail": 415, "problem": 415, "architectur": [416, 440, 451, 452], "search": [416, 475], "api": [416, 418, 419, 420, 425, 426, 436, 438, 439, 442, 443, 444, 449, 450, 454, 456, 458, 462, 476, 477, 478, 479, 481, 491], "usag": [416, 464, 475, 488, 490], "1": [416, 444, 447, 450, 455, 475, 493], "python": [416, 418, 438, 449, 454, 458, 462, 463, 470, 473, 481, 491], "yaml": [416, 420, 439, 444, 448, 492], "2": [416, 444, 447, 450, 455, 475, 493], "onli": [416, 484], "advanc": [416, 491], "custom": [416, 438, 454, 490], "secur": [417, 444], "polici": [417, 490], "report": 417, "vulner": 417, "instal": [418, 441, 452, 459, 461, 468, 469, 472], "from": [418, 420, 452, 455], "pypi": [418, 464], "select": [418, 469], "public": [418, 480], "event": [418, 480], "addit": 418, "research": 418, "collabor": 418, "work": [419, 482], "flow": [419, 482], "background": [419, 475], "ad": 419, "new": [419, 421, 470, 473, 490], "backend": [419, 482], "capabl": [419, 484], "implement": [419, 420], "onnxrtadaptor": 419, "how": [420, 421, 441], "add": 420, "an": 420, "list": [420, 445, 489], "need": 420, "design": [420, 440, 490], "framework": [420, 438, 439, 446, 448, 457, 481, 484, 487], "query_fw_cap": 420, "accord": [420, 421], "tune_cfg": 420, "prepar": [420, 441, 486], "fp32": [420, 446], "graph": 420, "run": [420, 441, 476], "sampl": [420, 449], "iter": 420, "calcul": 420, "rang": 420, "type": [421, 479], "like": 421, "int4": 421, "few": 421, "line": 421, "chang": [421, 450, 474, 476, 485], "defin": [421, 444], "abil": 421, "specif": [421, 439], "invok": 421, "kernel": 421, "tune": [421, 482, 487, 490], "configur": [421, 444, 448, 481, 486, 492], "us": [421, 438, 454], "summari": 421, "runtim": [423, 452, 482, 493], "torch": [424, 493], "mix": [430, 455, 456, 483], "precis": [430, 455, 456, 483], "refer": [437, 479, 482, 484, 487], "build": [438, 447, 454], "file": [439, 448, 492], "user": [439, 444, 450, 481, 484, 491, 492], "workflow": 440, "diagnosi": 441, "featur": [441, 444, 448, 451, 464, 465, 469, 481, 482, 488, 492], "modifi": 441, "script": 441, "see": 441, "do": [441, 458], "paramet": 441, "descript": 441, "suggest": 441, "fallback": 441, "set": [441, 461, 475], "knowledg": [442, 493], "intermedi": 442, "layer": [442, 487], "self": 442, "distribut": [444, 464, 490], "infer": 444, "evalu": 444, "pure": 444, "horovodrun": 444, "execut": 444, "releas": [445, 470, 473, 485], "appendix": 446, "frequent": 447, "ask": 447, "question": 447, "issu": [447, 485], "3": [447, 459, 475], "4": [447, 466, 475, 480], "quick": [449, 463], "valid": [449, 452, 487, 493], "incompat": [450, 485], "between": 450, "v1": 450, "face": 450, "built": [450, 452, 454], "infrastructur": 451, "linux": 452, "prerequisit": 452, "binari": 452, "sourc": 452, "ai": 452, "kit": 452, "window": 452, "system": 452, "requir": [452, 468, 472], "hardwar": [452, 456, 493], "environ": [452, 461], "cpu": [452, 461, 493], "64": 452, "compat": 452, "processor": 452, "gpu": 452, "": [452, 476], "xe": 452, "multipl": [452, 477, 493], "vendor": 452, "through": [452, 493], "softwar": [452, 456], "legal": 453, "inform": 453, "licens": 453, "citat": 453, "trademark": 453, "migrat": 455, "x": 455, "orchestr": [455, 478], "fp16": 456, "dure": [456, 483], "accuraci": [456, 482, 490], "driven": 456, "coder": [458, 462, 464, 475, 491], "what": [458, 476], "we": 458, "offer": 458, "jupyt": [458, 459, 470, 473], "lab": [458, 459], "extens": [458, 468, 469, 472, 475, 476, 493], "launcher": [458, 463], "contact": 458, "aw": 459, "amazon": 459, "sagemak": 459, "For": 459, "studio": 459, "notebook": 459, "instanc": 459, "guid": [459, 491], "bigdl": 460, "nano": 460, "platform": [461, 486], "best": [461, 469], "perform": [461, 486], "mkl": 461, "openmp": 461, "jemalloc": 461, "numa": 461, "control": 461, "variabl": 461, "frequenc": 461, "govern": 461, "enabl": [462, 469, 475], "bench": 462, "superbench": 462, "argument": 463, "v0": 466, "highlight": 466, "other": 466, "changelog": [467, 471], "neural_compressor_ext_lab": [468, 470], "uninstal": [468, 472], "develop": [468, 472], "jupyterlab": 469, "Or": 469, "let": 469, "u": 469, "help": 469, "you": 469, "pre": 469, "requisit": 469, "make": [470, 473, 476], "manual": [470, 473], "npm": [470, 473], "autom": [470, 473], "publish": [470, 473], "conda": [470, 473], "forg": [470, 473], "neural_compressor_ext_lab_alibaba": [472, 473], "log": 474, "unreleas": 474, "vscode": 475, "open": 475, "icon": 475, "5": 475, "welcom": 476, "your": 476, "v": 476, "folder": 476, "setup": 476, "up": 476, "straight": 476, "awai": 476, "explor": 476, "test": 476, "go": 476, "further": 476, "singl": 477, "One": 478, "shot": 478, "network": 479, "sparsiti": 479, "decai": 479, "regular": 479, "spars": 479, "deploy": 479, "hyperparamet": 479, "full": 480, "70": 480, "2023": 480, "17": 480, "2022": 480, "34": 480, "2021": 480, "15": [480, 493], "2018": 480, "2020": 480, "style": 481, "access": 481, "fundament": [482, 487], "scheme": 482, "ipex": 482, "approach": 482, "With": 482, "without": 482, "specifi": 482, "rule": 482, "recip": 482, "devic": 482, "turn": 483, "off": 483, "weight": 484, "known": 485, "benefit": 486, "comparison": 486, "differ": 486, "smooth": 487, "quant": 487, "per": 487, "tensor": 487, "channel": 487, "limit": 487, "smoothquant": 487, "enhanc": 487, "wise": 487, "alpha": 487, "engin": 487, "tensorboard": 488, "space": 490, "exit": 490, "process": 490, "overview": 491, "zero": 491, "topic": 491, "innov": 491, "product": 491, "12": 493, "0": 493, "ptq": 493}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"block_mask": [[0, "module-block_mask"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "Module Contents": [[1, "module-contents"], [3, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [112, "module-contents"], [114, "module-contents"], [115, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [130, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [171, "module-contents"], [172, "module-contents"], [174, "module-contents"], [176, "module-contents"], [178, "module-contents"], [179, "module-contents"], [180, "module-contents"], [182, "module-contents"], [183, "module-contents"], [184, "module-contents"], [185, "module-contents"], [186, "module-contents"], [187, "module-contents"], [189, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [194, "module-contents"], [195, "module-contents"], [196, "module-contents"], [197, "module-contents"], [198, "module-contents"], [200, "module-contents"], [201, "module-contents"], [204, "module-contents"], [205, "module-contents"], [206, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [211, "module-contents"], [212, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"], [221, "module-contents"], [223, "module-contents"], [224, "module-contents"], [225, "module-contents"], [228, "module-contents"], [229, "module-contents"], [231, "module-contents"], [232, "module-contents"], [233, "module-contents"], [234, "module-contents"], [235, "module-contents"], [236, "module-contents"], [238, "module-contents"], [239, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [245, "module-contents"], [248, "module-contents"], [249, "module-contents"], [250, "module-contents"], [252, "module-contents"], [253, "module-contents"], [255, "module-contents"], [256, "module-contents"], [257, "module-contents"], [258, "module-contents"], [259, "module-contents"], [260, "module-contents"], [261, "module-contents"], [262, "module-contents"], [263, "module-contents"], [264, "module-contents"], [265, "module-contents"], [267, "module-contents"], [268, "module-contents"], [269, "module-contents"], [272, "module-contents"], [274, "module-contents"], [275, "module-contents"], [276, "module-contents"], [278, "module-contents"], [279, "module-contents"], [280, "module-contents"], [281, "module-contents"], [283, "module-contents"], [284, "module-contents"], [286, "module-contents"], [287, "module-contents"], [288, "module-contents"], [290, "module-contents"], [291, "module-contents"], [292, "module-contents"], [293, "module-contents"], [294, "module-contents"], [296, "module-contents"], [297, "module-contents"], [298, "module-contents"], [299, "module-contents"], [300, "module-contents"], [302, "module-contents"], [303, "module-contents"], [304, "module-contents"], [305, "module-contents"], [308, "module-contents"], [309, "module-contents"], [310, "module-contents"], [313, "module-contents"], [314, "module-contents"], [315, "module-contents"], [316, "module-contents"], [317, "module-contents"], [318, "module-contents"], [319, "module-contents"], [320, "module-contents"], [321, "module-contents"], [322, "module-contents"], [323, "module-contents"], [325, "module-contents"], [326, "module-contents"], [327, "module-contents"], [328, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [336, "module-contents"], [337, "module-contents"], [339, "module-contents"], [340, "module-contents"], [341, "module-contents"], [343, "module-contents"], [344, "module-contents"], [345, "module-contents"], [347, "module-contents"], [348, "module-contents"], [349, "module-contents"], [350, "module-contents"], [351, "module-contents"], [352, "module-contents"], [353, "module-contents"], [354, "module-contents"], [356, "module-contents"], [358, "module-contents"], [360, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [365, "module-contents"], [366, "module-contents"], [368, "module-contents"], [370, "module-contents"], [371, "module-contents"], [372, "module-contents"], [373, "module-contents"], [375, "module-contents"], [376, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [381, "module-contents"], [382, "module-contents"], [383, "module-contents"], [384, "module-contents"], [386, "module-contents"], [387, "module-contents"], [388, "module-contents"], [389, "module-contents"], [392, "module-contents"], [393, "module-contents"], [394, "module-contents"], [395, "module-contents"], [396, "module-contents"], [398, "module-contents"], [399, "module-contents"], [401, "module-contents"], [403, "module-contents"], [404, "module-contents"], [405, "module-contents"], [406, "module-contents"], [407, "module-contents"], [408, "module-contents"], [409, "module-contents"], [410, "module-contents"]], "Classes": [[1, "classes"], [3, "classes"], [11, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [101, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [112, "classes"], [114, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [130, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [145, "classes"], [146, "classes"], [148, "classes"], [149, "classes"], [150, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [157, "classes"], [160, "classes"], [161, "classes"], [162, "classes"], [163, "classes"], [164, "classes"], [166, "classes"], [167, "classes"], [171, "classes"], [172, "classes"], [174, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [182, "classes"], [183, "classes"], [184, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [197, "classes"], [198, "classes"], [200, "classes"], [201, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [222, "classes"], [223, "classes"], [224, "classes"], [225, "classes"], [226, "classes"], [227, "classes"], [228, "classes"], [229, "classes"], [230, "classes"], [231, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [243, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [252, "classes"], [253, "classes"], [255, "classes"], [256, "classes"], [257, "classes"], [258, "classes"], [259, "classes"], [260, "classes"], [261, "classes"], [262, "classes"], [263, "classes"], [264, "classes"], [265, "classes"], [266, "classes"], [267, "classes"], [268, "classes"], [269, "classes"], [270, "classes"], [271, "classes"], [272, "classes"], [273, "classes"], [274, "classes"], [275, "classes"], [276, "classes"], [281, "classes"], [282, "classes"], [283, "classes"], [286, "classes"], [289, "classes"], [290, "classes"], [291, "classes"], [292, "classes"], [293, "classes"], [294, "classes"], [296, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [302, "classes"], [303, "classes"], [304, "classes"], [305, "classes"], [306, "classes"], [307, "classes"], [308, "classes"], [309, "classes"], [310, "classes"], [313, "classes"], [315, "classes"], [316, "classes"], [317, "classes"], [318, "classes"], [319, "classes"], [320, "classes"], [321, "classes"], [322, "classes"], [323, "classes"], [325, "classes"], [326, "classes"], [327, "classes"], [328, "classes"], [331, "classes"], [332, "classes"], [333, "classes"], [334, "classes"], [336, "classes"], [339, "classes"], [342, "classes"], [343, "classes"], [345, "classes"], [346, "classes"], [347, "classes"], [348, "classes"], [349, "classes"], [350, "classes"], [351, "classes"], [352, "classes"], [353, "classes"], [354, "classes"], [356, "classes"], [358, "classes"], [360, "classes"], [361, "classes"], [362, "classes"], [363, "classes"], [365, "classes"], [366, "classes"], [368, "classes"], [370, "classes"], [372, "classes"], [373, "classes"], [375, "classes"], [378, "classes"], [379, "classes"], [380, "classes"], [381, "classes"], [382, "classes"], [383, "classes"], [384, "classes"], [386, "classes"], [387, "classes"], [388, "classes"], [389, "classes"], [392, "classes"], [393, "classes"], [394, "classes"], [395, "classes"], [396, "classes"], [398, "classes"], [399, "classes"], [402, "classes"], [403, "classes"], [404, "classes"], [405, "classes"], [407, "classes"], [409, "classes"], [410, "classes"]], "Functions": [[1, "functions"], [13, "functions"], [16, "functions"], [34, "functions"], [42, "functions"], [43, "functions"], [44, "functions"], [66, "functions"], [67, "functions"], [69, "functions"], [103, "functions"], [104, "functions"], [115, "functions"], [117, "functions"], [147, "functions"], [148, "functions"], [149, "functions"], [150, "functions"], [152, "functions"], [155, "functions"], [156, "functions"], [158, "functions"], [159, "functions"], [160, "functions"], [162, "functions"], [165, "functions"], [167, "functions"], [171, "functions"], [172, "functions"], [174, "functions"], [176, "functions"], [178, "functions"], [180, "functions"], [181, "functions"], [185, "functions"], [188, "functions"], [193, "functions"], [194, "functions"], [195, "functions"], [196, "functions"], [198, "functions"], [207, "functions"], [208, "functions"], [216, "functions"], [218, "functions"], [222, "functions"], [225, "functions"], [226, "functions"], [227, "functions"], [230, "functions"], [232, "functions"], [233, "functions"], [234, "functions"], [235, "functions"], [237, "functions"], [239, "functions"], [240, "functions"], [242, "functions"], [245, "functions"], [252, "functions"], [260, "functions"], [262, "functions"], [266, "functions"], [269, "functions"], [270, "functions"], [271, "functions"], [273, "functions"], [274, "functions"], [275, "functions"], [278, "functions"], [279, "functions"], [280, "functions"], [283, "functions"], [284, "functions"], [286, "functions"], [287, "functions"], [288, "functions"], [289, "functions"], [290, "functions"], [297, "functions"], [304, "functions"], [308, "functions"], [313, "functions"], [314, "functions"], [315, "functions"], [317, "functions"], [322, "functions"], [328, "functions"], [332, "functions"], [334, "functions"], [336, "functions"], [337, "functions"], [339, "functions"], [340, "functions"], [341, "functions"], [342, "functions"], [343, "functions"], [344, "functions"], [348, "functions"], [352, "functions"], [354, "functions"], [371, "functions"], [376, "functions"], [377, "functions"], [381, "functions"], [389, "functions"], [393, "functions"], [395, "functions"], [396, "functions"], [398, "functions"], [401, "functions"], [402, "functions"], [404, "functions"], [405, "functions"], [406, "functions"], [408, "functions"], [409, "functions"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "Subpackages": [[2, "subpackages"], [17, "subpackages"], [86, "subpackages"], [110, "subpackages"], [111, "subpackages"], [113, "subpackages"], [173, "subpackages"], [175, "subpackages"], [202, "subpackages"], [227, "subpackages"], [246, "subpackages"], [271, "subpackages"], [282, "subpackages"], [306, "subpackages"], [324, "subpackages"], [335, "subpackages"], [385, "subpackages"]], "Submodules": [[2, "submodules"], [12, "submodules"], [17, "submodules"], [29, "submodules"], [50, "submodules"], [75, "submodules"], [86, "submodules"], [94, "submodules"], [100, "submodules"], [105, "submodules"], [110, "submodules"], [111, "submodules"], [113, "submodules"], [116, "submodules"], [129, "submodules"], [144, "submodules"], [151, "submodules"], [162, "submodules"], [168, "submodules"], [169, "submodules"], [173, "submodules"], [175, "submodules"], [177, "submodules"], [181, "submodules"], [188, "submodules"], [199, "submodules"], [203, "submodules"], [210, "submodules"], [222, "submodules"], [226, "submodules"], [230, "submodules"], [237, "submodules"], [244, "submodules"], [247, "submodules"], [254, "submodules"], [266, "submodules"], [270, "submodules"], [273, "submodules"], [277, "submodules"], [282, "submodules"], [289, "submodules"], [295, "submodules"], [301, "submodules"], [307, "submodules"], [311, "submodules"], [324, "submodules"], [330, "submodules"], [335, "submodules"], [342, "submodules"], [346, "submodules"], [357, "submodules"], [359, "submodules"], [364, "submodules"], [367, "submodules"], [369, "submodules"], [374, "submodules"], [385, "submodules"], [391, "submodules"], [397, "submodules"], [402, "submodules"]], "Package Contents": [[2, "package-contents"], [29, "package-contents"], [162, "package-contents"], [181, "package-contents"], [188, "package-contents"], [210, "package-contents"], [222, "package-contents"], [226, "package-contents"], [227, "package-contents"], [230, "package-contents"], [237, "package-contents"], [254, "package-contents"], [266, "package-contents"], [270, "package-contents"], [271, "package-contents"], [273, "package-contents"], [282, "package-contents"], [289, "package-contents"], [301, "package-contents"], [306, "package-contents"], [307, "package-contents"], [324, "package-contents"], [342, "package-contents"], [346, "package-contents"], [385, "package-contents"], [402, "package-contents"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[44, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[45, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[46, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[110, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[139, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[141, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[142, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[147, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[148, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.gptq": [[149, "module-neural_compressor.adaptor.torch_utils.gptq"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[150, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[151, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[152, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[153, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[154, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[155, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[156, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.teq": [[157, "module-neural_compressor.adaptor.torch_utils.teq"]], "neural_compressor.adaptor.torch_utils.util": [[158, "module-neural_compressor.adaptor.torch_utils.util"]], "}": [[158, "id3"]], "neural_compressor.adaptor.torch_utils.weight_only": [[159, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "neural_compressor.algorithm.algorithm": [[160, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[161, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[162, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[163, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[164, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[165, "module-neural_compressor.benchmark"]], "neural_compressor.compression.callbacks": [[166, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[167, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[168, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression.hpo": [[169, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[170, "module-neural_compressor.compression.hpo.sa_optimizer"]], "neural_compressor.compression.hpo.search_algorithms": [[171, "module-neural_compressor.compression.hpo.search_algorithms"]], "neural_compressor.compression.hpo.search_space": [[172, "module-neural_compressor.compression.hpo.search_space"]], "neural_compressor.compression": [[173, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[174, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner": [[175, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[176, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "neural_compressor.compression.pruner.model_slim": [[177, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[178, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[179, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns.base": [[180, "module-neural_compressor.compression.pruner.patterns.base"]], "neural_compressor.compression.pruner.patterns": [[181, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.patterns.mha": [[182, "module-neural_compressor.compression.pruner.patterns.mha"]], "neural_compressor.compression.pruner.patterns.ninm": [[183, "module-neural_compressor.compression.pruner.patterns.ninm"]], "neural_compressor.compression.pruner.patterns.nxm": [[184, "module-neural_compressor.compression.pruner.patterns.nxm"]], "neural_compressor.compression.pruner.pruners.base": [[185, "module-neural_compressor.compression.pruner.pruners.base"]], "neural_compressor.compression.pruner.pruners.basic": [[186, "module-neural_compressor.compression.pruner.pruners.basic"]], "neural_compressor.compression.pruner.pruners.block_mask": [[187, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "neural_compressor.compression.pruner.pruners": [[188, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.pruners.mha": [[189, "module-neural_compressor.compression.pruner.pruners.mha"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[190, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "neural_compressor.compression.pruner.pruners.progressive": [[191, "module-neural_compressor.compression.pruner.pruners.progressive"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[192, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "neural_compressor.compression.pruner.regs": [[193, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[194, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.tf_criteria": [[195, "module-neural_compressor.compression.pruner.tf_criteria"]], "neural_compressor.compression.pruner.utils": [[196, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.conf.config": [[197, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[198, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[199, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[200, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[201, "module-neural_compressor.config"]], "neural_compressor.contrib": [[202, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[203, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[204, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[205, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[206, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[207, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[208, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[209, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[210, "module-neural_compressor.data.dataloaders"]], "Attributes": [[210, "attributes"], [218, "attributes"], [227, "attributes"], [262, "attributes"], [271, "attributes"], [282, "attributes"], [306, "attributes"], [346, "attributes"], [396, "attributes"], [402, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[211, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[212, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[213, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[214, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[215, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[216, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[217, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[218, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[219, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[220, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[221, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[222, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[223, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[224, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[225, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[226, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[227, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[228, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[229, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[230, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[231, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[232, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[233, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[234, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[235, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[236, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[237, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[238, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[239, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[240, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[241, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[242, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[243, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[244, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[245, "module-neural_compressor.experimental.compression.pruning"]], "neural_compressor.experimental.contrib": [[246, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[247, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[248, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[249, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[250, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[251, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[252, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[253, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[254, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[255, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[256, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[257, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[258, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[259, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[260, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[261, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[262, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[263, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[264, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[265, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[266, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[267, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[268, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[269, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[270, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[271, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[272, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[273, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[274, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[275, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[276, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[277, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[278, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[279, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[280, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.graph_optimization": [[281, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[282, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[283, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[284, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[285, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[286, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[287, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[288, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[289, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[290, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[291, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[292, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[293, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[294, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[295, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[296, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[297, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[298, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[299, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[300, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[301, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[302, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[303, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[304, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[305, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[306, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[307, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[308, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[309, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[310, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[311, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[312, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[313, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[314, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[315, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[316, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[317, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[318, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[319, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[320, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[321, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[322, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[323, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[324, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.mse": [[325, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[326, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[327, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[328, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils.constant": [[329, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[330, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[331, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[332, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[333, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[334, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor": [[335, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[336, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[337, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[338, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[339, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[340, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[341, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[342, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[343, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[344, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[345, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[346, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[347, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[348, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[349, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[350, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[351, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[352, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[353, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[354, "module-neural_compressor.objective"]], "neural_compressor.profiling": [[355, "module-neural_compressor.profiling"]], "neural_compressor.profiling.parser.factory": [[356, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[357, "module-neural_compressor.profiling.parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[358, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[359, "module-neural_compressor.profiling.parser.onnx_parser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[360, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "neural_compressor.profiling.parser.parser": [[361, "module-neural_compressor.profiling.parser.parser"]], "neural_compressor.profiling.parser.result": [[362, "module-neural_compressor.profiling.parser.result"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[363, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[364, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[365, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "neural_compressor.profiling.profiler.factory": [[366, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[367, "module-neural_compressor.profiling.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[368, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[369, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[370, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[371, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "neural_compressor.profiling.profiler.profiler": [[372, "module-neural_compressor.profiling.profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[373, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[374, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[375, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[376, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "neural_compressor.quantization": [[377, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[378, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[379, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[380, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[381, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[382, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[383, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[384, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[385, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[386, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[387, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[388, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[389, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[390, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[391, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[392, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[393, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[394, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[395, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[396, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[397, "module-neural_compressor.template"]], "neural_compressor.training": [[398, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[399, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[400, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[401, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[402, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[403, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[404, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[405, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[406, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[407, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[408, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[409, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[410, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[411, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[412, "intel-neural-compressor-documentation"], [494, "intel-neural-compressor-documentation"]], "Sections": [[412, "sections"], [494, "sections"]], "Contributor Covenant Code of Conduct": [[413, "contributor-covenant-code-of-conduct"], [414, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[413, "our-pledge"]], "Our Standards": [[413, "our-standards"]], "Our Responsibilities": [[413, "our-responsibilities"]], "Scope": [[413, "scope"]], "Enforcement": [[413, "enforcement"]], "Attribution": [[413, "attribution"]], "Contribution Guidelines": [[414, "contribution-guidelines"]], "Pull Request Checklist": [[414, "pull-request-checklist"]], "Pull Request Template": [[414, "pull-request-template"]], "Support": [[414, "support"]], "FX": [[415, "fx"]], "Introduction": [[415, "introduction"], [416, "introduction"], [419, "introduction"], [420, "introduction"], [421, "introduction"], [436, "introduction"], [437, "introduction"], [438, "introduction"], [439, "introduction"], [442, "introduction"], [443, "introduction"], [444, "introduction"], [446, "introduction"], [448, "introduction"], [451, "introduction"], [454, "introduction"], [456, "introduction"], [457, "introduction"], [477, "introduction"], [478, "introduction"], [479, "introduction"], [481, "introduction"], [484, "introduction"], [486, "introduction"], [487, "introduction"], [488, "introduction"], [489, "introduction"], [490, "introduction"], [492, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[415, "fx-mode-support-matrix-in-neural-compressor"]], "Get Started": [[415, "get-started"], [482, "get-started"]], "Post Training Static Quantization": [[415, "post-training-static-quantization"], [482, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[415, "post-training-dynamic-quantization"], [482, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[415, "quantization-aware-training"]], "Examples": [[415, "examples"], [416, "examples"], [436, "examples"], [438, "examples"], [439, "examples"], [442, "examples"], [443, "examples"], [444, "examples"], [445, "examples"], [446, "examples"], [455, "examples"], [456, "examples"], [457, "examples"], [478, "examples"], [479, "examples"], [482, "examples"], [484, "examples"], [488, "examples"]], "Note": [[415, "note"]], "Details": [[415, "details"]], "Common Problem": [[415, "common-problem"]], "Dynamic Quantization": [[415, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[415, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[416, "neural-architecture-search"]], "Basic NAS": [[416, "basic-nas"]], "Dynamic NAS": [[416, "dynamic-nas"]], "NAS Support Matrix": [[416, "nas-support-matrix"]], "Get Started with NAS API": [[416, "get-started-with-nas-api"]], "Basic Usage": [[416, "basic-usage"]], "1. Python code + YAML": [[416, "python-code-yaml"]], "2. Python code only": [[416, "python-code-only"]], "Advanced Usage (Custom NAS)": [[416, "advanced-usage-custom-nas"]], "Security Policy": [[417, "security-policy"]], "Report a Vulnerability": [[417, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[418, "intel-neural-compressor"], [475, "intel-neural-compressor"]], "Installation": [[418, "installation"], [452, "installation"], [469, "installation"]], "Install from pypi": [[418, "install-from-pypi"]], "Getting Started": [[418, "getting-started"], [449, "getting-started"]], "Quantization with Python API": [[418, "quantization-with-python-api"], [449, "quantization-with-python-api"]], "Documentation": [[418, "documentation"]], "Selected Publications/Events": [[418, "selected-publications-events"]], "Additional Content": [[418, "additional-content"]], "Research Collaborations": [[418, "research-collaborations"]], "Adaptor": [[419, "adaptor"], [422, "adaptor"]], "Adaptor Support Matrix": [[419, "adaptor-support-matrix"]], "Working Flow": [[419, "working-flow"], [482, "working-flow"]], "Get Started with Adaptor API": [[419, "get-started-with-adaptor-api"]], "Query API": [[419, "query-api"]], "Background": [[419, "background"]], "Query API Introduction": [[419, "query-api-introduction"]], "Example of Adding a New Backend Support": [[419, "example-of-adding-a-new-backend-support"]], "Capability": [[419, "capability"]], "Implement ONNXRTAdaptor Class": [[419, "implement-onnxrtadaptor-class"]], "How to Add An Adaptor": [[420, "how-to-add-an-adaptor"]], "API List that Need to Implement": [[420, "api-list-that-need-to-implement"]], "Design the framework YAML": [[420, "design-the-framework-yaml"]], "Add query_fw_capability to Adaptor": [[420, "add-query-fw-capability-to-adaptor"]], "Add quantize API according to tune_cfg": [[420, "add-quantize-api-according-to-tune-cfg"]], "Prepare calibration model from fp32 graph": [[420, "prepare-calibration-model-from-fp32-graph"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[420, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Calculate the data range and generate quantized model": [[420, "calculate-the-data-range-and-generate-quantized-model"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[421, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "Define the Quantization Ability of the Specific Operator": [[421, "define-the-quantization-ability-of-the-specific-operator"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[421, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Use the New Data Type": [[421, "use-the-new-data-type"]], "Summary": [[421, "summary"]], "ONNX Runtime": [[423, "onnx-runtime"]], "Torch Utils": [[424, "torch-utils"]], "API Document Example": [[425, "api-document-example"]], "APIs": [[426, "apis"]], "Benchmark": [[427, "benchmark"], [455, "benchmark"], [481, "benchmark"]], "Compression": [[428, "compression"]], "Config": [[429, "config"]], "Mix Precision": [[430, "mix-precision"], [455, "mix-precision"]], "Model": [[431, "model"], [457, "model"]], "Objective": [[432, "objective"], [477, "objective"]], "Quantization": [[433, "quantization"], [481, "quantization"], [482, "quantization"]], "Strategy": [[434, "strategy"]], "Training": [[435, "training"]], "Benchmarking": [[436, "benchmarking"]], "Benchmark Support Matrix": [[436, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[436, "get-started-with-benchmark-api"]], "Calibration Algorithms in Quantization": [[437, "calibration-algorithms-in-quantization"]], "Calibration Algorithms": [[437, "calibration-algorithms"]], "Support Matrix": [[437, "support-matrix"], [460, "support-matrix"]], "Reference": [[437, "reference"], [479, "reference"], [482, "reference"], [484, "reference"], [487, "reference"]], "DataLoader": [[438, "dataloader"]], "Supported Framework Dataloader Matrix": [[438, "supported-framework-dataloader-matrix"]], "Get Started with DataLoader": [[438, "get-started-with-dataloader"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[438, "use-intel-neural-compressor-dataloader-api"]], "Build Custom Dataloader with Python API": [[438, "build-custom-dataloader-with-python-api"]], "Dataset": [[439, "dataset"]], "Supported Framework Dataset Matrix": [[439, "supported-framework-dataset-matrix"]], "TensorFlow": [[439, "tensorflow"], [454, "tensorflow"], [489, "tensorflow"]], "PyTorch": [[439, "pytorch"], [454, "pytorch"], [483, "pytorch"]], "MXNet": [[439, "mxnet"], [454, "mxnet"], [489, "mxnet"]], "ONNXRT": [[439, "onnxrt"], [454, "onnxrt"], [489, "onnxrt"]], "Get start with Dataset API": [[439, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[439, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[439, "user-specific-dataset"]], "Design": [[440, "design"], [490, "design"], [490, "id1"], [490, "id3"], [490, "id5"], [490, "id7"], [490, "id9"], [490, "id11"], [490, "id13"], [490, "id15"], [490, "id17"], [490, "id19"], [490, "id21"]], "Architecture": [[440, "architecture"], [451, "architecture"]], "Workflow": [[440, "workflow"]], "Diagnosis": [[441, "diagnosis"]], "Diagnosis introduction": [[441, "diagnosis-introduction"]], "Supported feature matrix": [[441, "supported-feature-matrix"]], "Get started": [[441, "get-started"]], "Install Intel\u00ae Neural Compressor": [[441, "install-intel-neural-compressor"]], "Modify script": [[441, "modify-script"]], "Quantization diagnosis": [[441, "quantization-diagnosis"]], "Benchmark diagnosis": [[441, "benchmark-diagnosis"]], "Example": [[441, "example"], [454, "example"], [460, "example"], [464, "example"], [477, "example"], [487, "example"]], "Prepare dataset": [[441, "prepare-dataset"]], "Run quantization script": [[441, "run-quantization-script"]], "Run benchmark script": [[441, "run-benchmark-script"]], "See quantization data": [[441, "see-quantization-data"]], "How to do diagnosis": [[441, "how-to-do-diagnosis"]], "Parameter description": [[441, "parameter-description"]], "Diagnosis suggestions": [[441, "diagnosis-suggestions"]], "Fallback setting example": [[441, "fallback-setting-example"]], "See profiling data": [[441, "see-profiling-data"]], "Distillation": [[442, "distillation"], [455, "distillation"], [481, "distillation"]], "Knowledge Distillation": [[442, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[442, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[442, "self-distillation"]], "Distillation Support Matrix": [[442, "distillation-support-matrix"]], "Get Started with Distillation API": [[442, "get-started-with-distillation-api"]], "Distillation for Quantization": [[443, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[443, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[443, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[444, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[444, "supported-feature-matrix"], [448, "supported-feature-matrix"], [451, "supported-feature-matrix"], [481, "supported-feature-matrix"], [482, "supported-feature-matrix"], [488, "supported-feature-matrix"], [492, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[444, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[444, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[444, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[444, "horovodrun-execution"]], "Security": [[444, "security"]], "PyTorch Examples:": [[444, "pytorch-examples"]], "TensorFlow Examples:": [[444, "tensorflow-examples"]], "Example List": [[445, "example-list"]], "Release Data": [[445, "release-data"]], "Export": [[446, "export"]], "Supported Framework Model Matrix": [[446, "supported-framework-model-matrix"], [457, "supported-framework-model-matrix"], [484, "supported-framework-model-matrix"]], "PyTorch Model": [[446, "pytorch-model"]], "FP32 Model Export": [[446, "fp32-model-export"], [446, "id1"]], "INT8 Model Export": [[446, "int8-model-export"], [446, "id2"]], "Tensorflow Model": [[446, "tensorflow-model"]], "Appendix": [[446, "appendix"]], "Supported quantized ops": [[446, "supported-quantized-ops"]], "Frequently Asked Questions": [[447, "frequently-asked-questions"]], "Common Build Issues": [[447, "common-build-issues"]], "Issue 1:": [[447, "issue-1"]], "Issue 2:": [[447, "issue-2"]], "Issue 3:": [[447, "issue-3"]], "Issue 4:": [[447, "issue-4"]], "Framework YAML Configuration Files": [[448, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[448, "get-started-with-framework-yaml-files"]], "Quick Samples": [[449, "quick-samples"]], "Validated Models": [[449, "validated-models"], [487, "validated-models"], [493, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[450, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[450, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[450, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[451, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[452, "linux-installation"]], "Prerequisites": [[452, "prerequisites"], [452, "id1"]], "Install from Binary": [[452, "install-from-binary"], [452, "id2"]], "Install from Source": [[452, "install-from-source"], [452, "id3"]], "Install from AI Kit": [[452, "install-from-ai-kit"]], "Windows Installation": [[452, "windows-installation"]], "System Requirements": [[452, "system-requirements"]], "Validated Hardware Environment": [[452, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[452, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[452, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[452, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[452, "validated-software-environment"]], "Legal Information": [[453, "legal-information"]], "License": [[453, "license"]], "Citation": [[453, "citation"]], "Trademarks": [[453, "trademarks"]], "Metrics": [[454, "metrics"]], "Supported Built-in Metric Matrix": [[454, "supported-built-in-metric-matrix"]], "Get Started with Metric": [[454, "get-started-with-metric"]], "Use Intel\u00ae Neural Compressor Metric API": [[454, "use-intel-neural-compressor-metric-api"]], "Build Custom Metric with Python API": [[454, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[455, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[455, "model-quantization"]], "Post-training Quantization": [[455, "post-training-quantization"]], "Quantization Aware Training": [[455, "quantization-aware-training"], [482, "quantization-aware-training"], [482, "id1"]], "Pruning": [[455, "pruning"], [479, "pruning"], [481, "pruning"]], "Orchestration": [[455, "orchestration"]], "Mixed Precision": [[456, "mixed-precision"]], "Mixed Precision Support Matrix": [[456, "mixed-precision-support-matrix"]], "Hardware and Software requests for BF16": [[456, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[456, "hardware-and-software-requests-for-fp16"]], "During quantization mixed precision": [[456, "during-quantization-mixed-precision"]], "Accuracy-driven mixed precision": [[456, "accuracy-driven-mixed-precision"]], "Get Started with Mixed Precision API": [[456, "get-started-with-mixed-precision-api"]], "Neural Coder": [[458, "neural-coder"], [475, "neural-coder"], [475, "id1"]], "What do we offer?": [[458, "what-do-we-offer"]], "Getting Started!": [[458, "getting-started"], [469, "getting-started"]], "Jupyter Lab Extension": [[458, "jupyter-lab-extension"]], "Python Launcher": [[458, "python-launcher"], [463, "python-launcher"]], "Python API": [[458, "python-api"]], "Contact": [[458, "contact"]], "AWS Amazon SageMaker Support": [[459, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[459, "start-jupyter-lab-3"]], "For SageMaker Studio": [[459, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[459, "for-sagemaker-notebook-instance"]], "Installation Guide": [[459, "installation-guide"]], "BigDL Nano Support": [[460, "bigdl-nano-support"]], "Intel CPU Platforms: Best Performance Setting": [[461, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[461, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[461, "install-numa-controller"]], "Environment Variables": [[461, "environment-variables"]], "Frequency Governers": [[461, "frequency-governers"]], "Neural Coder as Python API": [[462, "neural-coder-as-python-api"]], "Enable": [[462, "enable"]], "Bench": [[462, "bench"]], "SuperBench": [[462, "superbench"]], "Quick-Start": [[463, "quick-start"]], "Launcher Arguments (Optional)": [[463, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[464, "neural-coder-for-quantization"]], "Features Supported": [[464, "features-supported"]], "Models Supported": [[464, "models-supported"]], "Usage": [[464, "usage"], [488, "usage"], [488, "id1"], [490, "usage"], [490, "id2"], [490, "id4"], [490, "id6"], [490, "id8"], [490, "id10"], [490, "id12"], [490, "id14"], [490, "id16"], [490, "id18"], [490, "id20"], [490, "id22"]], "PyPI distribution:": [[464, "pypi-distribution"]], "Supported Optimization Features": [[465, "supported-optimization-features"]], "v0.4": [[466, "v0-4"]], "Highlights": [[466, "highlights"]], "Others": [[466, "others"]], "Changelog": [[467, "changelog"], [471, "changelog"]], "neural_compressor_ext_lab": [[468, "neural-compressor-ext-lab"]], "Requirements": [[468, "requirements"], [472, "requirements"]], "Install": [[468, "install"], [472, "install"]], "Uninstall": [[468, "uninstall"], [472, "uninstall"]], "Contributing": [[468, "contributing"], [472, "contributing"]], "Development install": [[468, "development-install"], [472, "development-install"]], "Development uninstall": [[468, "development-uninstall"], [472, "development-uninstall"]], "Packaging the extension": [[468, "packaging-the-extension"], [472, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[469, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[469, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[469, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[469, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[470, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[470, "manual-release"], [473, "manual-release"]], "Python package": [[470, "python-package"], [473, "python-package"]], "NPM package": [[470, "npm-package"], [473, "npm-package"]], "Automated releases with the Jupyter Releaser": [[470, "automated-releases-with-the-jupyter-releaser"], [473, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[470, "publishing-to-conda-forge"], [473, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[472, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[473, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[474, "change-log"]], "[Unreleased]": [[474, "unreleased"]], "Background Introduction": [[475, "background-introduction"]], "Neural Coder Extension in VSCode": [[475, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[475, "neural-coder-extension-usage"]], "1. Open": [[475, "open"]], "2. Search": [[475, "search"]], "3. Setting": [[475, "setting"]], "4. Icon": [[475, "icon"]], "5. optimization (quantization)": [[475, "optimization-quantization"]], "5.1 Enable": [[475, "enable"]], "5.2 Auto": [[475, "auto"]], "Welcome to your VS Code Extension": [[476, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[476, "what-s-in-the-folder"]], "Setup": [[476, "setup"]], "Get up and running straight away": [[476, "get-up-and-running-straight-away"]], "Make changes": [[476, "make-changes"]], "Explore the API": [[476, "explore-the-api"]], "Run tests": [[476, "run-tests"]], "Go further": [[476, "go-further"]], "Single Objective": [[477, "single-objective"]], "Multiple Objectives": [[477, "multiple-objectives"]], "Objective Support Matrix": [[477, "objective-support-matrix"]], "Get Started with Objective API": [[477, "get-started-with-objective-api"]], "Config Single Objective": [[477, "config-single-objective"]], "Config Multiple Objectives": [[477, "config-multiple-objectives"]], "Optimization Orchestration": [[478, "optimization-orchestration"]], "One-shot": [[478, "one-shot"]], "Orchestration Support Matrix": [[478, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[478, "get-started-with-orchestration-api"]], "Neural Network Pruning": [[479, "neural-network-pruning"]], "Pruning Patterns": [[479, "pruning-patterns"]], "Pruning Criteria": [[479, "pruning-criteria"]], "Pruning Types": [[479, "pruning-types"]], "Pruning Schedules": [[479, "pruning-schedules"]], "Pruning Scope": [[479, "pruning-scope"]], "Sparsity Decay Types": [[479, "sparsity-decay-types"]], "Regularization": [[479, "regularization"]], "Pruning Support Matrix": [[479, "pruning-support-matrix"]], "Get Started with Pruning API": [[479, "get-started-with-pruning-api"]], "Sparse Model Deployment": [[479, "sparse-model-deployment"]], "Pruning with Hyperparameter Optimization": [[479, "pruning-with-hyperparameter-optimization"]], "Full Publications/Events (70)": [[480, "full-publications-events-70"]], "2023 (17)": [[480, "id1"]], "2022 (34)": [[480, "id2"]], "2021 (15)": [[480, "id3"]], "2018 - 2020 (4)": [[480, "id4"]], "Pythonic Style Access for Configurations": [[481, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[481, "pythonic-api-for-user-configurations"], [481, "id1"]], "Pythonic API for Framework Configurations": [[481, "pythonic-api-for-framework-configurations"], [481, "id2"]], "Get Started with Pythonic API for Configurations": [[481, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[481, "nas"]], "Quantization Introduction": [[482, "quantization-introduction"]], "Quantization Fundamentals": [[482, "quantization-fundamentals"], [487, "quantization-fundamentals"]], "Quantization Support Matrix": [[482, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[482, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[482, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[482, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[482, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[482, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[482, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[482, "with-or-without-accuracy-aware-tuning"]], "Post Training Quantization": [[482, "post-training-quantization"]], "Specify Quantization Rules": [[482, "specify-quantization-rules"]], "Specify Quantization Recipes": [[482, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[482, "specify-quantization-backend-and-device"]], "Turn OFF Auto Mixed Precision during Quantization": [[483, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[483, "tensorflow"]], "Weight Only Quantization": [[484, "weight-only-quantization"]], "Quantization Capability:": [[484, "quantization-capability"]], "Export Compressed Model": [[484, "export-compressed-model"]], "User code:": [[484, "user-code"]], "Release": [[485, "release"]], "Release Notes": [[485, "release-notes"]], "Known Issues": [[485, "known-issues"]], "Incompatible Changes": [[485, "incompatible-changes"]], "SigOpt Strategy": [[486, "sigopt-strategy"]], "Preparation": [[486, "preparation"]], "SigOpt Platform": [[486, "sigopt-platform"]], "Neural Compressor Configuration": [[486, "neural-compressor-configuration"]], "Performance": [[486, "performance"]], "Benefit of SigOpt Strategy": [[486, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[486, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[487, "smooth-quant"]], "Per-tensor & Per-channel": [[487, "per-tensor-per-channel"]], "Per-tensor example": [[487, "per-tensor-example"]], "Per-channel example": [[487, "per-channel-example"]], "Matmul quantization example": [[487, "matmul-quantization-example"]], "Per-channel limitation": [[487, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[487, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[487, "smoothquant"]], "Our enhancement:": [[487, "our-enhancement"]], "Algorithm: Layer-wise Auto-tuning of $\\alpha$.": [[487, "algorithm-layer-wise-auto-tuning-of-alpha"]], "Engineering": [[487, "engineering"]], "Supported Framework Matrix": [[487, "supported-framework-matrix"]], "TensorBoard": [[488, "tensorboard"]], "Get Started with TensorBoard": [[488, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[488, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[488, "tensorflow-tensorboard"]], "PyTorch Examples": [[488, "pytorch-examples"]], "TensorFlow Examples": [[488, "tensorflow-examples"]], "Transform": [[489, "transform"]], "Transform Support List": [[489, "transform-support-list"]], "Pytorch": [[489, "pytorch"]], "Tuning Strategies": [[490, "tuning-strategies"]], "Strategy Design": [[490, "strategy-design"]], "Tuning Space": [[490, "tuning-space"]], "Exit Policy": [[490, "exit-policy"]], "Accuracy Criteria": [[490, "accuracy-criteria"]], "Tuning Process": [[490, "tuning-process"]], "Tuning Algorithms": [[490, "tuning-algorithms"]], "Auto": [[490, "auto"]], "Conservative Tuning": [[490, "conservative-tuning"]], "Basic": [[490, "basic"]], "MSE": [[490, "mse"]], "MSE_V2": [[490, "mse-v2"]], "HAWQ_V2": [[490, "hawq-v2"]], "Bayesian": [[490, "bayesian"]], "Exhaustive": [[490, "exhaustive"]], "Random": [[490, "random"]], "SigOpt": [[490, "sigopt"]], "TPE": [[490, "tpe"]], "Distributed Tuning": [[490, "distributed-tuning"]], "Customize a New Tuning Strategy": [[490, "customize-a-new-tuning-strategy"]], "User Guide": [[491, "user-guide"]], "Overview": [[491, "overview"]], "Python-based APIs": [[491, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[491, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[491, "advanced-topics"]], "Innovations for Productivity": [[491, "innovations-for-productivity"]], "User YAML Configuration Files": [[492, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[492, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[493, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.12.0": [[493, "tensorflow-models-with-intel-tensorflow-2-12-0"]], "TensorFlow Models with Intel\u00ae Extension for TensorFlow* 1.2.0": [[493, "tensorflow-models-with-intel-extension-for-tensorflow-1-2-0"]], "PyTorch Models with Torch 2.0.1+cpu in PTQ Mode": [[493, "pytorch-models-with-torch-2-0-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.0.1+cpu in QAT Mode": [[493, "pytorch-models-with-torch-2-0-1-cpu-in-qat-mode"]], "PyTorch Models with Intel\u00ae Extension for PyTorch* 2.0.1+cpu": [[493, "pytorch-models-with-intel-extension-for-pytorch-2-0-1-cpu"]], "ONNX Models with ONNX Runtime 1.15.0": [[493, "onnx-models-with-onnx-runtime-1-15-0"]], "Validated Pruning Examples": [[493, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[493, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[493, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"block_mask": [[0, "module-block_mask"]], "module": [[0, "module-block_mask"], [1, "module-neural_compressor.adaptor.adaptor"], [2, "module-neural_compressor.adaptor"], [3, "module-neural_compressor.adaptor.keras"], [4, "module-neural_compressor.adaptor.keras_utils.conv2d"], [5, "module-neural_compressor.adaptor.keras_utils.dense"], [6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"], [7, "module-neural_compressor.adaptor.keras_utils"], [8, "module-neural_compressor.adaptor.keras_utils.pool2d"], [9, "module-neural_compressor.adaptor.keras_utils.quantizer"], [10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"], [11, "module-neural_compressor.adaptor.mxnet"], [12, "module-neural_compressor.adaptor.mxnet_utils"], [13, "module-neural_compressor.adaptor.mxnet_utils.util"], [14, "module-neural_compressor.adaptor.onnxrt"], [15, "module-neural_compressor.adaptor.ox_utils.calibration"], [16, "module-neural_compressor.adaptor.ox_utils.calibrator"], [17, "module-neural_compressor.adaptor.ox_utils"], [18, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [20, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [22, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [23, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [26, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [29, "module-neural_compressor.adaptor.ox_utils.operators"], [30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [33, "module-neural_compressor.adaptor.ox_utils.operators.norm"], [34, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [35, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"], [38, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [39, "module-neural_compressor.adaptor.ox_utils.operators.split"], [40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"], [41, "module-neural_compressor.adaptor.ox_utils.quantizer"], [42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"], [43, "module-neural_compressor.adaptor.ox_utils.util"], [44, "module-neural_compressor.adaptor.pytorch"], [45, "module-neural_compressor.adaptor.query"], [46, "module-neural_compressor.adaptor.tensorflow"], [47, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [109, "module-neural_compressor.adaptor.tf_utils.graph_util"], [110, "module-neural_compressor.adaptor.tf_utils"], [111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [139, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"], [140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"], [141, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [142, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [143, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [144, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [145, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [146, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [147, "module-neural_compressor.adaptor.tf_utils.util"], [148, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [149, "module-neural_compressor.adaptor.torch_utils.gptq"], [150, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [151, "module-neural_compressor.adaptor.torch_utils"], [152, "module-neural_compressor.adaptor.torch_utils.mixed_precision"], [153, "module-neural_compressor.adaptor.torch_utils.model_wrapper"], [154, "module-neural_compressor.adaptor.torch_utils.pattern_detector"], [155, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [156, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [157, "module-neural_compressor.adaptor.torch_utils.teq"], [158, "module-neural_compressor.adaptor.torch_utils.util"], [159, "module-neural_compressor.adaptor.torch_utils.weight_only"], [160, "module-neural_compressor.algorithm.algorithm"], [161, "module-neural_compressor.algorithm.fast_bias_correction"], [162, "module-neural_compressor.algorithm"], [163, "module-neural_compressor.algorithm.smooth_quant"], [164, "module-neural_compressor.algorithm.weight_correction"], [165, "module-neural_compressor.benchmark"], [166, "module-neural_compressor.compression.callbacks"], [167, "module-neural_compressor.compression.distillation.criterions"], [168, "module-neural_compressor.compression.distillation"], [169, "module-neural_compressor.compression.hpo"], [170, "module-neural_compressor.compression.hpo.sa_optimizer"], [171, "module-neural_compressor.compression.hpo.search_algorithms"], [172, "module-neural_compressor.compression.hpo.search_space"], [173, "module-neural_compressor.compression"], [174, "module-neural_compressor.compression.pruner.criteria"], [175, "module-neural_compressor.compression.pruner"], [176, "module-neural_compressor.compression.pruner.model_slim.auto_slim"], [177, "module-neural_compressor.compression.pruner.model_slim"], [178, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"], [179, "module-neural_compressor.compression.pruner.model_slim.weight_slim"], [180, "module-neural_compressor.compression.pruner.patterns.base"], [181, "module-neural_compressor.compression.pruner.patterns"], [182, "module-neural_compressor.compression.pruner.patterns.mha"], [183, "module-neural_compressor.compression.pruner.patterns.ninm"], [184, "module-neural_compressor.compression.pruner.patterns.nxm"], [185, "module-neural_compressor.compression.pruner.pruners.base"], [186, "module-neural_compressor.compression.pruner.pruners.basic"], [187, "module-neural_compressor.compression.pruner.pruners.block_mask"], [188, "module-neural_compressor.compression.pruner.pruners"], [189, "module-neural_compressor.compression.pruner.pruners.mha"], [190, "module-neural_compressor.compression.pruner.pruners.pattern_lock"], [191, "module-neural_compressor.compression.pruner.pruners.progressive"], [192, "module-neural_compressor.compression.pruner.pruners.retrain_free"], [193, "module-neural_compressor.compression.pruner.regs"], [194, "module-neural_compressor.compression.pruner.schedulers"], [195, "module-neural_compressor.compression.pruner.tf_criteria"], [196, "module-neural_compressor.compression.pruner.utils"], [197, "module-neural_compressor.conf.config"], [198, "module-neural_compressor.conf.dotdict"], [199, "module-neural_compressor.conf"], [200, "module-neural_compressor.conf.pythonic_config"], [201, "module-neural_compressor.config"], [202, "module-neural_compressor.contrib"], [203, "module-neural_compressor.contrib.strategy"], [204, "module-neural_compressor.contrib.strategy.sigopt"], [205, "module-neural_compressor.contrib.strategy.tpe"], [206, "module-neural_compressor.data.dataloaders.base_dataloader"], [207, "module-neural_compressor.data.dataloaders.dataloader"], [208, "module-neural_compressor.data.dataloaders.default_dataloader"], [209, "module-neural_compressor.data.dataloaders.fetcher"], [210, "module-neural_compressor.data.dataloaders"], [211, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [212, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [213, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [214, "module-neural_compressor.data.dataloaders.sampler"], [215, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [216, "module-neural_compressor.data.datasets.bert_dataset"], [217, "module-neural_compressor.data.datasets.coco_dataset"], [218, "module-neural_compressor.data.datasets.dataset"], [219, "module-neural_compressor.data.datasets.dummy_dataset"], [220, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [221, "module-neural_compressor.data.datasets.imagenet_dataset"], [222, "module-neural_compressor.data.datasets"], [223, "module-neural_compressor.data.datasets.style_transfer_dataset"], [224, "module-neural_compressor.data.filters.coco_filter"], [225, "module-neural_compressor.data.filters.filter"], [226, "module-neural_compressor.data.filters"], [227, "module-neural_compressor.data"], [228, "module-neural_compressor.data.transforms.coco_transform"], [229, "module-neural_compressor.data.transforms.imagenet_transform"], [230, "module-neural_compressor.data.transforms"], [231, "module-neural_compressor.data.transforms.postprocess"], [232, "module-neural_compressor.data.transforms.tokenization"], [233, "module-neural_compressor.data.transforms.transform"], [234, "module-neural_compressor.experimental.benchmark"], [235, "module-neural_compressor.experimental.common.criterion"], [236, "module-neural_compressor.experimental.common.dataloader"], [237, "module-neural_compressor.experimental.common"], [238, "module-neural_compressor.experimental.common.metric"], [239, "module-neural_compressor.experimental.common.model"], [240, "module-neural_compressor.experimental.common.optimizer"], [241, "module-neural_compressor.experimental.common.postprocess"], [242, "module-neural_compressor.experimental.common.torch_utils"], [243, "module-neural_compressor.experimental.component"], [244, "module-neural_compressor.experimental.compression"], [245, "module-neural_compressor.experimental.compression.pruning"], [246, "module-neural_compressor.experimental.contrib"], [247, "module-neural_compressor.experimental.contrib.strategy"], [248, "module-neural_compressor.experimental.contrib.strategy.sigopt"], [249, "module-neural_compressor.experimental.contrib.strategy.tpe"], [250, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [251, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [252, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [253, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [254, "module-neural_compressor.experimental.data.dataloaders"], [255, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [256, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [257, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [258, "module-neural_compressor.experimental.data.dataloaders.sampler"], [259, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [260, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [261, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [262, "module-neural_compressor.experimental.data.datasets.dataset"], [263, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [264, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [265, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [266, "module-neural_compressor.experimental.data.datasets"], [267, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [268, "module-neural_compressor.experimental.data.filters.coco_filter"], [269, "module-neural_compressor.experimental.data.filters.filter"], [270, "module-neural_compressor.experimental.data.filters"], [271, "module-neural_compressor.experimental.data"], [272, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [273, "module-neural_compressor.experimental.data.transforms"], [274, "module-neural_compressor.experimental.data.transforms.tokenization"], [275, "module-neural_compressor.experimental.data.transforms.transform"], [276, "module-neural_compressor.experimental.distillation"], [277, "module-neural_compressor.experimental.export"], [278, "module-neural_compressor.experimental.export.qlinear2qdq"], [279, "module-neural_compressor.experimental.export.tf2onnx"], [280, "module-neural_compressor.experimental.export.torch2onnx"], [281, "module-neural_compressor.experimental.graph_optimization"], [282, "module-neural_compressor.experimental"], [283, "module-neural_compressor.experimental.metric.bleu"], [284, "module-neural_compressor.experimental.metric.bleu_util"], [285, "module-neural_compressor.experimental.metric.coco_label_map"], [286, "module-neural_compressor.experimental.metric.coco_tools"], [287, "module-neural_compressor.experimental.metric.evaluate_squad"], [288, "module-neural_compressor.experimental.metric.f1"], [289, "module-neural_compressor.experimental.metric"], [290, "module-neural_compressor.experimental.metric.metric"], [291, "module-neural_compressor.experimental.mixed_precision"], [292, "module-neural_compressor.experimental.model_conversion"], [293, "module-neural_compressor.experimental.nas.basic_nas"], [294, "module-neural_compressor.experimental.nas.dynas"], [295, "module-neural_compressor.experimental.nas"], [296, "module-neural_compressor.experimental.nas.nas"], [297, "module-neural_compressor.experimental.nas.nas_utils"], [298, "module-neural_compressor.experimental.nas.search_algorithms"], [299, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [300, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [301, "module-neural_compressor.experimental.pruner_legacy"], [302, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [303, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [304, "module-neural_compressor.experimental.pruner_legacy.pruner"], [305, "module-neural_compressor.experimental.pruning"], [306, "module-neural_compressor.experimental.pruning_recipes"], [307, "module-neural_compressor.experimental.pruning_recipes.patterns"], [308, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [309, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [310, "module-neural_compressor.experimental.pruning_v2"], [311, "module-neural_compressor.experimental.pytorch_pruner"], [312, "module-neural_compressor.experimental.pytorch_pruner.logger"], [313, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [314, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [315, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [316, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [317, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [318, "module-neural_compressor.experimental.quantization"], [319, "module-neural_compressor.experimental.scheduler"], [320, "module-neural_compressor.experimental.strategy.auto_mixed_precision"], [321, "module-neural_compressor.experimental.strategy.basic"], [322, "module-neural_compressor.experimental.strategy.bayesian"], [323, "module-neural_compressor.experimental.strategy.exhaustive"], [324, "module-neural_compressor.experimental.strategy"], [325, "module-neural_compressor.experimental.strategy.mse"], [326, "module-neural_compressor.experimental.strategy.mse_v2"], [327, "module-neural_compressor.experimental.strategy.random"], [328, "module-neural_compressor.experimental.strategy.strategy"], [329, "module-neural_compressor.experimental.strategy.utils.constant"], [330, "module-neural_compressor.experimental.strategy.utils"], [331, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"], [332, "module-neural_compressor.experimental.strategy.utils.tuning_space"], [333, "module-neural_compressor.experimental.strategy.utils.tuning_structs"], [334, "module-neural_compressor.experimental.strategy.utils.utility"], [335, "module-neural_compressor"], [336, "module-neural_compressor.metric.bleu"], [337, "module-neural_compressor.metric.bleu_util"], [338, "module-neural_compressor.metric.coco_label_map"], [339, "module-neural_compressor.metric.coco_tools"], [340, "module-neural_compressor.metric.evaluate_squad"], [341, "module-neural_compressor.metric.f1"], [342, "module-neural_compressor.metric"], [343, "module-neural_compressor.metric.metric"], [344, "module-neural_compressor.mix_precision"], [345, "module-neural_compressor.model.base_model"], [346, "module-neural_compressor.model"], [347, "module-neural_compressor.model.keras_model"], [348, "module-neural_compressor.model.model"], [349, "module-neural_compressor.model.mxnet_model"], [350, "module-neural_compressor.model.nets_factory"], [351, "module-neural_compressor.model.onnx_model"], [352, "module-neural_compressor.model.tensorflow_model"], [353, "module-neural_compressor.model.torch_model"], [354, "module-neural_compressor.objective"], [355, "module-neural_compressor.profiling"], [356, "module-neural_compressor.profiling.parser.factory"], [357, "module-neural_compressor.profiling.parser"], [358, "module-neural_compressor.profiling.parser.onnx_parser.factory"], [359, "module-neural_compressor.profiling.parser.onnx_parser"], [360, "module-neural_compressor.profiling.parser.onnx_parser.parser"], [361, "module-neural_compressor.profiling.parser.parser"], [362, "module-neural_compressor.profiling.parser.result"], [363, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"], [364, "module-neural_compressor.profiling.parser.tensorflow_parser"], [365, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"], [366, "module-neural_compressor.profiling.profiler.factory"], [367, "module-neural_compressor.profiling.profiler"], [368, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"], [369, "module-neural_compressor.profiling.profiler.onnxrt_profiler"], [370, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"], [371, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"], [372, "module-neural_compressor.profiling.profiler.profiler"], [373, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"], [374, "module-neural_compressor.profiling.profiler.tensorflow_profiler"], [375, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"], [376, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"], [377, "module-neural_compressor.quantization"], [378, "module-neural_compressor.strategy.auto"], [379, "module-neural_compressor.strategy.auto_mixed_precision"], [380, "module-neural_compressor.strategy.basic"], [381, "module-neural_compressor.strategy.bayesian"], [382, "module-neural_compressor.strategy.conservative"], [383, "module-neural_compressor.strategy.exhaustive"], [384, "module-neural_compressor.strategy.hawq_v2"], [385, "module-neural_compressor.strategy"], [386, "module-neural_compressor.strategy.mse"], [387, "module-neural_compressor.strategy.mse_v2"], [388, "module-neural_compressor.strategy.random"], [389, "module-neural_compressor.strategy.strategy"], [390, "module-neural_compressor.strategy.utils.constant"], [391, "module-neural_compressor.strategy.utils"], [392, "module-neural_compressor.strategy.utils.tuning_sampler"], [393, "module-neural_compressor.strategy.utils.tuning_space"], [394, "module-neural_compressor.strategy.utils.tuning_structs"], [395, "module-neural_compressor.strategy.utils.utility"], [396, "module-neural_compressor.template.api_doc_example"], [397, "module-neural_compressor.template"], [398, "module-neural_compressor.training"], [399, "module-neural_compressor.utils.collect_layer_histogram"], [400, "module-neural_compressor.utils.constant"], [401, "module-neural_compressor.utils.create_obj_from_config"], [402, "module-neural_compressor.utils"], [403, "module-neural_compressor.utils.kl_divergence"], [404, "module-neural_compressor.utils.load_huggingface"], [405, "module-neural_compressor.utils.logger"], [406, "module-neural_compressor.utils.neural_insights_utils"], [407, "module-neural_compressor.utils.options"], [408, "module-neural_compressor.utils.pytorch"], [409, "module-neural_compressor.utils.utility"], [410, "module-neural_compressor.utils.weights_details"], [411, "module-neural_compressor.version"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasQuery"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "mxnetquery (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MXNetQuery"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrtquery (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRTQuery"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase"]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector"]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator"]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator"]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator"]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "float16activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.Float16ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "float16binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.Float16BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[30, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "fusedmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.FusedMatMulOperator"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "batchnormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.BatchNormalizationOperator"]], "normalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "reduceoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "unaryoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[41, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "ortsmoothquant (class in neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.ORTSmoothQuant"]], "get_quant_dequant_output() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.get_quant_dequant_output"]], "make_sub_graph() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.make_sub_graph"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "quant_dequant_data() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.quant_dequant_data"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "to_numpy() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.to_numpy"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchweightonlyadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorchWeightOnlyAdaptor"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "neural_compressor.adaptor.pytorch": [[44, "module-neural_compressor.adaptor.pytorch"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[45, "neural_compressor.adaptor.query.QueryBackendCapability"]], "neural_compressor.adaptor.query": [[45, "module-neural_compressor.adaptor.query"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow": [[46, "module-neural_compressor.adaptor.tensorflow"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[47, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[48, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[49, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[109, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[109, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[110, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "smoothquantcalibration (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[139, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[139, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "smoothquantscaler (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[140, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScaler"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[141, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[141, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[142, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[142, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[143, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[145, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[146, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "get_weight_from_input_tensor() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_weight_from_input_tensor"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[147, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[148, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[148, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[148, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[148, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "gptq (class in neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.GPTQ"]], "gptquantizer (class in neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.GPTQuantizer"]], "find_layers() (in module neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.find_layers"]], "find_layers_name() (in module neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.find_layers_name"]], "is_leaf() (in module neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.is_leaf"]], "log_quantizable_layers_per_transformer() (in module neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.log_quantizable_layers_per_transformer"]], "neural_compressor.adaptor.torch_utils.gptq": [[149, "module-neural_compressor.adaptor.torch_utils.gptq"]], "quantize() (in module neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.quantize"]], "trace_gptq_target_blocks() (in module neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.trace_gptq_target_blocks"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[150, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[150, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[150, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[150, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[150, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[151, "module-neural_compressor.adaptor.torch_utils"]], "ipex_mixed_precision() (in module neural_compressor.adaptor.torch_utils.mixed_precision)": [[152, "neural_compressor.adaptor.torch_utils.mixed_precision.ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[152, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "fakeaffinetensorquantfunction (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[153, "neural_compressor.adaptor.torch_utils.model_wrapper.FakeAffineTensorQuantFunction"]], "teqlinearfakequant (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[153, "neural_compressor.adaptor.torch_utils.model_wrapper.TEQLinearFakeQuant"]], "teqmullinear (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[153, "neural_compressor.adaptor.torch_utils.model_wrapper.TEQMulLinear"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[153, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.adaptor.torch_utils.pattern_detector)": [[154, "neural_compressor.adaptor.torch_utils.pattern_detector.TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[154, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "graphtrace (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[155, "neural_compressor.adaptor.torch_utils.smooth_quant.GraphTrace"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[155, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "get_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[155, "neural_compressor.adaptor.torch_utils.smooth_quant.get_module"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[155, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "set_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[155, "neural_compressor.adaptor.torch_utils.smooth_quant.set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[156, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[156, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[156, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "tequantizer (class in neural_compressor.adaptor.torch_utils.teq)": [[157, "neural_compressor.adaptor.torch_utils.teq.TEQuantizer"]], "neural_compressor.adaptor.torch_utils.teq": [[157, "module-neural_compressor.adaptor.torch_utils.teq"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "collect_weight_info() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.collect_weight_info"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_depth"]], "get_dict_at_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_dict_at_depth"]], "get_element_under_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_element_under_depth"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_op_type_by_name() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_op_type_by_name"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern"]], "neural_compressor.adaptor.torch_utils.util": [[158, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.update_sq_scale"]], "awq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[159, "neural_compressor.adaptor.torch_utils.weight_only.awq_quantize"]], "get_module_input_output() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[159, "neural_compressor.adaptor.torch_utils.weight_only.get_module_input_output"]], "gptq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[159, "neural_compressor.adaptor.torch_utils.weight_only.gptq_quantize"]], "neural_compressor.adaptor.torch_utils.weight_only": [[159, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "qdq_weight_actor() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[159, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_actor"]], "qdq_weight_asym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[159, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_asym"]], "qdq_weight_sym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[159, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_sym"]], "quant_weight() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[159, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight"]], "rtn_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[159, "neural_compressor.adaptor.torch_utils.weight_only.rtn_quantize"]], "teq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[159, "neural_compressor.adaptor.torch_utils.weight_only.teq_quantize"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[160, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[160, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[160, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[160, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[160, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[161, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[161, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[162, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[163, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[163, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[164, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[164, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[165, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.summary_benchmark"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[166, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[166, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[166, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[166, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[166, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[166, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[166, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[166, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "neural_compressor.compression.callbacks": [[166, "module-neural_compressor.compression.callbacks"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "neural_compressor.compression.distillation.criterions": [[167, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[168, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression.hpo": [[169, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[170, "module-neural_compressor.compression.hpo.sa_optimizer"]], "bayesianoptimizationsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[171, "neural_compressor.compression.hpo.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[171, "neural_compressor.compression.hpo.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[171, "neural_compressor.compression.hpo.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.compression.hpo.search_algorithms)": [[171, "neural_compressor.compression.hpo.search_algorithms.Searcher"]], "xgbsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[171, "neural_compressor.compression.hpo.search_algorithms.XgbSearcher"]], "neural_compressor.compression.hpo.search_algorithms": [[171, "module-neural_compressor.compression.hpo.search_algorithms"]], "register_searcher() (in module neural_compressor.compression.hpo.search_algorithms)": [[171, "neural_compressor.compression.hpo.search_algorithms.register_searcher"]], "basesearchspace (class in neural_compressor.compression.hpo.search_space)": [[172, "neural_compressor.compression.hpo.search_space.BaseSearchSpace"]], "continuoussearchspace (class in neural_compressor.compression.hpo.search_space)": [[172, "neural_compressor.compression.hpo.search_space.ContinuousSearchSpace"]], "discretesearchspace (class in neural_compressor.compression.hpo.search_space)": [[172, "neural_compressor.compression.hpo.search_space.DiscreteSearchSpace"]], "searchspace (class in neural_compressor.compression.hpo.search_space)": [[172, "neural_compressor.compression.hpo.search_space.SearchSpace"]], "neural_compressor.compression.hpo.search_space": [[172, "module-neural_compressor.compression.hpo.search_space"]], "register_searchspace() (in module neural_compressor.compression.hpo.search_space)": [[172, "neural_compressor.compression.hpo.search_space.register_searchspace"]], "neural_compressor.compression": [[173, "module-neural_compressor.compression"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[174, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[174, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[174, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[174, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[174, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumblockcriterion (class in neural_compressor.compression.pruner.criteria)": [[174, "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[174, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[174, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[174, "module-neural_compressor.compression.pruner.criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[174, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[174, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[174, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[174, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[174, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[174, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumblockcriterion attribute)": [[174, "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[174, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.compression.pruner": [[175, "module-neural_compressor.compression.pruner"]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[176, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_ffn2_pruning_config"]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[176, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_mha_pruning_config"]], "model_slim() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[176, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim"]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[176, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_ffn2"]], "model_slim_mha() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[176, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_mha"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[176, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[176, "neural_compressor.compression.pruner.model_slim.auto_slim.parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim": [[177, "module-neural_compressor.compression.pruner.model_slim"]], "classifierheadsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher"]], "classifierheadsearchertf (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF"]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher"]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher"]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher"]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph"]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes"]], "get_common_module() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_common_module"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[178, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "print_iterables() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.print_iterables"]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut"]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[178, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets"]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[179, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression"]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[179, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator"]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[179, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils"]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[179, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device"]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[179, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1"]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[179, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2"]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[179, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[179, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "basepattern (class in neural_compressor.compression.pruner.patterns.base)": [[180, "neural_compressor.compression.pruner.patterns.base.BasePattern"]], "kerasbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[180, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern"]], "pytorchbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[180, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern"]], "config (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.BasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.config"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.BasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.BasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.BasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.BasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.BasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.BasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.modules"]], "neural_compressor.compression.pruner.patterns.base": [[180, "module-neural_compressor.compression.pruner.patterns.base"]], "pattern (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.BasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.pattern"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns.base)": [[180, "neural_compressor.compression.pruner.patterns.base.register_pattern"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.BasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[180, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.target_sparsity"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[181, "neural_compressor.compression.pruner.patterns.get_pattern"]], "neural_compressor.compression.pruner.patterns": [[181, "module-neural_compressor.compression.pruner.patterns"]], "m (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[182, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.M"]], "n (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[182, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.N"]], "patternmha (class in neural_compressor.compression.pruner.patterns.mha)": [[182, "neural_compressor.compression.pruner.patterns.mha.PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha": [[182, "module-neural_compressor.compression.pruner.patterns.mha"]], "m (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[183, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[183, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.N"]], "pytorchpatternninm (class in neural_compressor.compression.pruner.patterns.ninm)": [[183, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm": [[183, "module-neural_compressor.compression.pruner.patterns.ninm"]], "keraspatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[184, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM"]], "pytorchpatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[184, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.keraspatternnxm attribute)": [[184, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM.block_size"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.pytorchpatternnxm attribute)": [[184, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM.block_size"]], "neural_compressor.compression.pruner.patterns.nxm": [[184, "module-neural_compressor.compression.pruner.patterns.nxm"]], "basepruner (class in neural_compressor.compression.pruner.pruners.base)": [[185, "neural_compressor.compression.pruner.pruners.base.BasePruner"]], "kerasbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[185, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner"]], "pytorchbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[185, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner"]], "config (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.BasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.config"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.BasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.BasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.end_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.BasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.global_step"]], "masks (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.BasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.BasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.BasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.modules"]], "neural_compressor.compression.pruner.pruners.base": [[185, "module-neural_compressor.compression.pruner.pruners.base"]], "pattern (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pattern"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.BasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pruning_frequency"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners.base)": [[185, "neural_compressor.compression.pruner.pruners.base.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.BasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scores"]], "start_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.BasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.BasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.target_sparsity_ratio"]], "kerasbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[186, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner"]], "pytorchbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[186, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner"]], "criterion (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[186, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[186, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.criterion"]], "neural_compressor.compression.pruner.pruners.basic": [[186, "module-neural_compressor.compression.pruner.pruners.basic"]], "pattern (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[186, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[186, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[186, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[186, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[186, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[186, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.scheduler"]], "pytorchblockmaskpruner (class in neural_compressor.compression.pruner.pruners.block_mask)": [[187, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner"]], "criterion (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[187, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.criterion"]], "neural_compressor.compression.pruner.pruners.block_mask": [[187, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "pattern (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[187, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[187, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[187, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.scheduler"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[188, "neural_compressor.compression.pruner.pruners.get_pruner"]], "neural_compressor.compression.pruner.pruners": [[188, "module-neural_compressor.compression.pruner.pruners"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[188, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pythonmultiheadattentionpruner (class in neural_compressor.compression.pruner.pruners.mha)": [[189, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner"]], "head_masks (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[189, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.head_masks"]], "linear_layers (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[189, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.linear_layers"]], "mha_compressions (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[189, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_compressions"]], "mha_scores (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[189, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_scores"]], "neural_compressor.compression.pruner.pruners.mha": [[189, "module-neural_compressor.compression.pruner.pruners.mha"]], "pytorchpatternlockpruner (class in neural_compressor.compression.pruner.pruners.pattern_lock)": [[190, "neural_compressor.compression.pruner.pruners.pattern_lock.PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[190, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "pytorchprogressivepruner (class in neural_compressor.compression.pruner.pruners.progressive)": [[191, "neural_compressor.compression.pruner.pruners.progressive.PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[191, "module-neural_compressor.compression.pruner.pruners.progressive"]], "pytorchretrainfreepruner (class in neural_compressor.compression.pruner.pruners.retrain_free)": [[192, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner"]], "criterion (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.criterion"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[192, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "pattern (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.scheduler"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[193, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[193, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[193, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[193, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[193, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[193, "module-neural_compressor.compression.pruner.regs"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[193, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[193, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[194, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[194, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[194, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[194, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[194, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[194, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[194, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "magnitudecriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[195, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[195, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion"]], "get_tf_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[195, "neural_compressor.compression.pruner.tf_criteria.get_tf_criterion"]], "neural_compressor.compression.pruner.tf_criteria": [[195, "module-neural_compressor.compression.pruner.tf_criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[195, "neural_compressor.compression.pruner.tf_criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.tf_criteria.magnitudecriterion attribute)": [[195, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.tf_criteria.pruningcriterion attribute)": [[195, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion.scores"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[196, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[196, "neural_compressor.compression.pruner.utils.check_key_validity"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[196, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[196, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "get_sparsity_ratio_tf() (in module neural_compressor.compression.pruner.utils)": [[196, "neural_compressor.compression.pruner.utils.get_sparsity_ratio_tf"]], "neural_compressor.compression.pruner.utils": [[196, "module-neural_compressor.compression.pruner.utils"]], "parse_last_linear() (in module neural_compressor.compression.pruner.utils)": [[196, "neural_compressor.compression.pruner.utils.parse_last_linear"]], "parse_last_linear_tf() (in module neural_compressor.compression.pruner.utils)": [[196, "neural_compressor.compression.pruner.utils.parse_last_linear_tf"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[196, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "parse_to_prune_tf() (in module neural_compressor.compression.pruner.utils)": [[196, "neural_compressor.compression.pruner.utils.parse_to_prune_tf"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[196, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[196, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[196, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[196, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[196, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[196, "neural_compressor.compression.pruner.utils.update_params"]], "benchmark_conf (class in neural_compressor.conf.config)": [[197, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[197, "neural_compressor.conf.config.Conf"]], "distillation_conf (class in neural_compressor.conf.config)": [[197, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[197, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[197, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[197, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[197, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[197, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[197, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[197, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[198, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[198, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[198, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[198, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[199, "module-neural_compressor.conf"]], "accuracycriterion (class in neural_compressor.conf.pythonic_config)": [[200, "neural_compressor.conf.pythonic_config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.conf.pythonic_config)": [[200, "neural_compressor.conf.pythonic_config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.conf.pythonic_config)": [[200, "neural_compressor.conf.pythonic_config.DistillationConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.conf.pythonic_config)": [[200, "neural_compressor.conf.pythonic_config.KnowledgeDistillationLossConfig"]], "options (class in neural_compressor.conf.pythonic_config)": [[200, "neural_compressor.conf.pythonic_config.Options"]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[200, "neural_compressor.conf.pythonic_config.QuantizationConfig"]], "weightpruningconfig (class in neural_compressor.conf.pythonic_config)": [[200, "neural_compressor.conf.pythonic_config.WeightPruningConfig"]], "neural_compressor.conf.pythonic_config": [[200, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[201, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[201, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[201, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[201, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[201, "neural_compressor.config.ExportConfig"]], "hpoconfig (class in neural_compressor.config)": [[201, "neural_compressor.config.HPOConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[201, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[201, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[201, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[201, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[201, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[201, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[201, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[201, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[201, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[201, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[201, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[201, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[201, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[201, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[201, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[201, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[201, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[201, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[201, "module-neural_compressor.config"]], "neural_compressor.contrib": [[202, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[203, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[204, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[204, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[205, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[205, "module-neural_compressor.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[206, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader": [[206, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[207, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "check_dataloader() (in module neural_compressor.data.dataloaders.dataloader)": [[207, "neural_compressor.data.dataloaders.dataloader.check_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[207, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[208, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[208, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[208, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[209, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[209, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[209, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[209, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[210, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[211, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[211, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[212, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[212, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[212, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[213, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[213, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[214, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[214, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[214, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[214, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[214, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[215, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[215, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[215, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[215, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[215, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[216, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[216, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[216, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[216, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[216, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[216, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[216, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[216, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[216, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[217, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[217, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[217, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[217, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[217, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[218, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[219, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[219, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[220, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[220, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[220, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[221, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[221, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[221, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[221, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[221, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[221, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[221, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[222, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[223, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[223, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[224, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[224, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[224, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[225, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[225, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[225, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[225, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[225, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[225, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[225, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[225, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[225, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[226, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[227, "module-neural_compressor.data"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[228, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[228, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[229, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[229, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[229, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[229, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[229, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[229, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[229, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[229, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[229, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[229, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale"]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[229, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.imagenet_transform": [[229, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[230, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[231, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[231, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[232, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[232, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[232, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[232, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[232, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[232, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[232, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[232, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.TRANSFORMS"], [233, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[233, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[234, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[234, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[234, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[234, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[234, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[234, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[234, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[234, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[234, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[234, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[235, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[236, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[236, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[237, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[238, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[238, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[239, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[239, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[239, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[240, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[240, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[240, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[240, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[240, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[240, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[240, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[240, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[240, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[241, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[241, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[242, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[242, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[242, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[243, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[243, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[244, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[245, "module-neural_compressor.experimental.compression.pruning"]], "prepare_pruning() (in module neural_compressor.experimental.compression.pruning)": [[245, "neural_compressor.experimental.compression.pruning.prepare_pruning"]], "save() (in module neural_compressor.experimental.compression.pruning)": [[245, "neural_compressor.experimental.compression.pruning.save"]], "neural_compressor.experimental.contrib": [[246, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[247, "module-neural_compressor.experimental.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[248, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[248, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[249, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[249, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[250, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[250, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[251, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[252, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[252, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[252, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[253, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[253, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[253, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[253, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[254, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[255, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[255, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[256, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[256, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[256, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[257, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[257, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[258, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[258, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[258, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[258, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[258, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[259, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[259, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[259, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[259, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[259, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[260, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[260, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[260, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[260, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[260, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[260, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[260, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[260, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[260, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[261, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[261, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[261, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[261, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[261, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[262, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[262, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[262, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[262, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[262, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[262, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[262, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[262, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[262, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[262, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[262, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[262, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[262, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[262, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[262, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[262, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[262, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[262, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[262, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[262, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[262, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[262, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[262, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[262, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[262, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[262, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[262, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[262, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[262, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[262, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[262, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[262, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[262, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[262, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[262, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[262, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[262, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[262, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[262, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[263, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[263, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[264, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[264, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[264, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[265, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[265, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[265, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[265, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[265, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[265, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[265, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[266, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[267, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[267, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[268, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[268, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[268, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[269, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[269, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[269, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[269, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[269, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[269, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[269, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[269, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[269, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[270, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[271, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[272, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[272, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[272, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[272, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[272, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[272, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[272, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[272, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[272, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[272, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[273, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[274, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[274, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[274, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[274, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[274, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[274, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[274, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[274, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [275, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[275, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[275, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[276, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[276, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[276, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[276, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[276, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[276, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[277, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[278, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[278, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[278, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[279, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[279, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[279, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "dynamic_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[280, "neural_compressor.experimental.export.torch2onnx.dynamic_quant_export"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[280, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[280, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[280, "module-neural_compressor.experimental.export.torch2onnx"]], "static_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[280, "neural_compressor.experimental.export.torch2onnx.static_quant_export"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[280, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[280, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[281, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[281, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[282, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[283, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[283, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[283, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[283, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[283, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[283, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[283, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[283, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[283, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[284, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[284, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[285, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[286, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[286, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[286, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[286, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[286, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[286, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[286, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[286, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[287, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[287, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[287, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[287, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[287, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[288, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[288, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[288, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[288, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[288, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[289, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[290, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[290, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[290, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[290, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[290, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[290, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[290, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[290, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[290, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[290, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[290, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[290, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[290, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[290, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[290, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[290, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[290, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[290, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[290, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[290, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[290, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[290, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[290, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[290, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[290, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[290, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[290, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[290, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[290, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[290, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[290, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[290, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[290, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[290, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[290, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[290, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[290, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[290, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[290, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[290, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[290, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[290, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[290, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[290, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[290, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[290, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[290, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[290, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[290, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[290, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[290, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[290, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[290, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[291, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[291, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[292, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[292, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[293, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[293, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[294, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[294, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[295, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[296, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[296, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[296, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[297, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[297, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[297, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[297, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[298, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[298, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[298, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[298, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[298, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[299, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[299, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[300, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[300, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[301, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[302, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[302, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[303, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[303, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[304, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[304, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[304, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[305, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[305, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[305, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[305, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[305, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[306, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[307, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[308, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[308, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[308, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[308, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[308, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[309, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[309, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[309, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[309, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[309, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[309, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[309, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[310, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[310, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[310, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[310, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[310, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[311, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[312, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[313, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[313, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[313, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[313, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[313, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[313, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[313, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[313, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[313, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[313, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[313, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[314, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[314, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[314, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[314, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[314, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[314, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[314, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[315, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[315, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[315, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[315, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[315, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[315, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[315, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[315, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[315, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[315, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[315, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[315, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[315, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[315, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[315, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[315, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[315, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[315, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[315, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[315, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[315, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[316, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[316, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[316, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[316, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[316, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[316, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[317, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[317, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[317, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[317, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[317, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[317, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[317, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[318, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[318, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[319, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[319, "module-neural_compressor.experimental.scheduler"]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[320, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[320, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[321, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[321, "module-neural_compressor.experimental.strategy.basic"]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[322, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[322, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[322, "neural_compressor.experimental.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[322, "neural_compressor.experimental.strategy.bayesian.acq_max"]], "neural_compressor.experimental.strategy.bayesian": [[322, "module-neural_compressor.experimental.strategy.bayesian"]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[323, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.exhaustive": [[323, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[324, "module-neural_compressor.experimental.strategy"]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[325, "neural_compressor.experimental.strategy.mse.MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[325, "module-neural_compressor.experimental.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[326, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[326, "module-neural_compressor.experimental.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[327, "neural_compressor.experimental.strategy.random.RandomTuneStrategy"]], "neural_compressor.experimental.strategy.random": [[327, "module-neural_compressor.experimental.strategy.random"]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[328, "neural_compressor.experimental.strategy.strategy.TuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[328, "module-neural_compressor.experimental.strategy.strategy"]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[328, "neural_compressor.experimental.strategy.strategy.strategy_registry"]], "neural_compressor.experimental.strategy.utils.constant": [[329, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[330, "module-neural_compressor.experimental.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[331, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[331, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[331, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[331, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[331, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[331, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[331, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[331, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[331, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[332, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[332, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[332, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[332, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[332, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[332, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[332, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[333, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[333, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[334, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[334, "neural_compressor.experimental.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[334, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.experimental.strategy.utils.utility": [[334, "module-neural_compressor.experimental.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[334, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type"]], "neural_compressor": [[335, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[336, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[336, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[336, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[336, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[336, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[336, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[336, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[336, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[336, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[337, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[337, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[338, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[339, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[339, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[339, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[339, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[339, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[339, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[339, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[339, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[340, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[340, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[340, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[340, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[340, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[341, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[341, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[341, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[341, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[341, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[342, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[343, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[343, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[343, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[343, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[343, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[343, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[343, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[343, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[343, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[343, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[343, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[343, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[343, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[343, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[343, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[343, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[343, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[343, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[343, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[343, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[343, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[343, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[343, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[343, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[343, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[343, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[343, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[343, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[343, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[343, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[343, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[343, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[343, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[343, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[343, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[343, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[343, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[343, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[343, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[343, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[343, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[343, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[343, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[343, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[343, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[343, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[343, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[343, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[343, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[343, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[343, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[343, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[343, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[343, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[343, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[344, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[344, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[345, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[345, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[346, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[347, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[347, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[348, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[348, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[348, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[349, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[349, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[350, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[350, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[351, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[351, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[352, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[352, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[352, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[352, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[352, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[352, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[352, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[352, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[352, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[352, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[352, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[352, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[352, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[352, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[352, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[352, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[352, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[352, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[353, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[353, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[353, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[353, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[353, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[354, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[354, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[354, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[354, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[354, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[354, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[354, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[354, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[354, "neural_compressor.objective.objective_registry"]], "neural_compressor.profiling": [[355, "module-neural_compressor.profiling"]], "parserfactory (class in neural_compressor.profiling.parser.factory)": [[356, "neural_compressor.profiling.parser.factory.ParserFactory"]], "neural_compressor.profiling.parser.factory": [[356, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[357, "module-neural_compressor.profiling.parser"]], "onnxrtparserfactory (class in neural_compressor.profiling.parser.onnx_parser.factory)": [[358, "neural_compressor.profiling.parser.onnx_parser.factory.OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[358, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[359, "module-neural_compressor.profiling.parser.onnx_parser"]], "onnxprofilingparser (class in neural_compressor.profiling.parser.onnx_parser.parser)": [[360, "neural_compressor.profiling.parser.onnx_parser.parser.OnnxProfilingParser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[360, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "profilingparser (class in neural_compressor.profiling.parser.parser)": [[361, "neural_compressor.profiling.parser.parser.ProfilingParser"]], "neural_compressor.profiling.parser.parser": [[361, "module-neural_compressor.profiling.parser.parser"]], "profilingresult (class in neural_compressor.profiling.parser.result)": [[362, "neural_compressor.profiling.parser.result.ProfilingResult"]], "neural_compressor.profiling.parser.result": [[362, "module-neural_compressor.profiling.parser.result"]], "tensorflowparserfactory (class in neural_compressor.profiling.parser.tensorflow_parser.factory)": [[363, "neural_compressor.profiling.parser.tensorflow_parser.factory.TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[363, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[364, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "tensorflowprofilingparser (class in neural_compressor.profiling.parser.tensorflow_parser.parser)": [[365, "neural_compressor.profiling.parser.tensorflow_parser.parser.TensorFlowProfilingParser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[365, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "profilerfactory (class in neural_compressor.profiling.profiler.factory)": [[366, "neural_compressor.profiling.profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.factory": [[366, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[367, "module-neural_compressor.profiling.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.onnxrt_profiler.factory)": [[368, "neural_compressor.profiling.profiler.onnxrt_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[368, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[369, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "profiler (class in neural_compressor.profiling.profiler.onnxrt_profiler.profiler)": [[370, "neural_compressor.profiling.profiler.onnxrt_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[370, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "create_onnx_config() (in module neural_compressor.profiling.profiler.onnxrt_profiler.utils)": [[371, "neural_compressor.profiling.profiler.onnxrt_profiler.utils.create_onnx_config"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[371, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "profiler (class in neural_compressor.profiling.profiler.profiler)": [[372, "neural_compressor.profiling.profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.profiler": [[372, "module-neural_compressor.profiling.profiler.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.tensorflow_profiler.factory)": [[373, "neural_compressor.profiling.profiler.tensorflow_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[373, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[374, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "profiler (class in neural_compressor.profiling.profiler.tensorflow_profiler.profiler)": [[375, "neural_compressor.profiling.profiler.tensorflow_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[375, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "create_tf_config() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[376, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.create_tf_config"]], "delete_assign() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[376, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[376, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "set_eager_execution() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[376, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.set_eager_execution"]], "fit() (in module neural_compressor.quantization)": [[377, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[377, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[378, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[378, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[379, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[379, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[380, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[380, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[381, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[381, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[381, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[381, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[381, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[382, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[382, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[383, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[383, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[384, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[384, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[385, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[386, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[386, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[387, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[387, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[388, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[388, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[389, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[389, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[389, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[389, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[390, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[391, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[392, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[392, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[392, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[392, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[392, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[392, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[392, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[392, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[392, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "neural_compressor.strategy.utils.tuning_sampler": [[392, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[393, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[393, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[393, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[393, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[393, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[393, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[393, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[394, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[394, "module-neural_compressor.strategy.utils.tuning_structs"]], "classregister (class in neural_compressor.strategy.utils.utility)": [[395, "neural_compressor.strategy.utils.utility.ClassRegister"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[395, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[395, "neural_compressor.strategy.utils.utility.QuantOptions"]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[395, "neural_compressor.strategy.utils.utility.QuantType"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[395, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[395, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[395, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[395, "module-neural_compressor.strategy.utils.utility"]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[395, "neural_compressor.strategy.utils.utility.preprocess_user_cfg"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[395, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[396, "neural_compressor.template.api_doc_example.ExampleClass"]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[396, "neural_compressor.template.api_doc_example.ExampleClass.attr1"]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[396, "neural_compressor.template.api_doc_example.ExampleClass.attr2"]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[396, "neural_compressor.template.api_doc_example.ExampleClass.attr5"]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[396, "neural_compressor.template.api_doc_example.attribute1"]], "function1() (in module neural_compressor.template.api_doc_example)": [[396, "neural_compressor.template.api_doc_example.function1"]], "function2() (in module neural_compressor.template.api_doc_example)": [[396, "neural_compressor.template.api_doc_example.function2"]], "function3() (in module neural_compressor.template.api_doc_example)": [[396, "neural_compressor.template.api_doc_example.function3"]], "generator1() (in module neural_compressor.template.api_doc_example)": [[396, "neural_compressor.template.api_doc_example.generator1"]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[396, "neural_compressor.template.api_doc_example.module_debug_level1"]], "neural_compressor.template.api_doc_example": [[396, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[397, "module-neural_compressor.template"]], "callbacks (class in neural_compressor.training)": [[398, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[398, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[398, "neural_compressor.training.fit"]], "neural_compressor.training": [[398, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[398, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[399, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[399, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[400, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[401, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[401, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[401, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[401, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[401, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[401, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[401, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[401, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[401, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[401, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[402, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[403, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[403, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[404, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "neural_compressor.utils.load_huggingface": [[404, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[404, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[405, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[405, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[405, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[405, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[405, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[405, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[405, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[405, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[405, "neural_compressor.utils.logger.warning"]], "neural_compressor.utils.neural_insights_utils": [[406, "module-neural_compressor.utils.neural_insights_utils"]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[406, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload"]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[406, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload"]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[406, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[407, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[407, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[408, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[408, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[408, "module-neural_compressor.utils.pytorch"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.Dequantize"]], "dotdict (class in neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.calculate_mse"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.compute_sparsity"]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.dequantize_weight"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[409, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[409, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[410, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[410, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[410, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[411, "module-neural_compressor.version"]]}})