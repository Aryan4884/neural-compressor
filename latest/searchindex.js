Search.setIndex({"docnames": ["autoapi/644ec953a7dc_pruning_support/index", "autoapi/6ece06672ed3_v1_14/index", "autoapi/6f0d0f71d92e_v1_13/index", "autoapi/9e89549a08c8_v1_11/index", "autoapi/block_mask/index", "autoapi/env/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/compression/pruning/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/export/utils/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/template/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/index", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index", "autoapi/neural_compressor/ux/components/configuration_wizard/index", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index", "autoapi/neural_compressor/ux/components/db_manager/utils/index", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/factory/index", "autoapi/neural_compressor/ux/components/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index", "autoapi/neural_compressor/ux/components/file_browser/index", "autoapi/neural_compressor/ux/components/graph/attribute/index", "autoapi/neural_compressor/ux/components/graph/collapser/index", "autoapi/neural_compressor/ux/components/graph/edge/index", "autoapi/neural_compressor/ux/components/graph/graph/index", "autoapi/neural_compressor/ux/components/graph/graph_reader/index", "autoapi/neural_compressor/ux/components/graph/index", "autoapi/neural_compressor/ux/components/graph/node/index", "autoapi/neural_compressor/ux/components/graph/reader/index", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index", "autoapi/neural_compressor/ux/components/index", "autoapi/neural_compressor/ux/components/jobs_management/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index", "autoapi/neural_compressor/ux/components/jobs_management/request/index", "autoapi/neural_compressor/ux/components/manage_workspace/index", "autoapi/neural_compressor/ux/components/model/domain/index", "autoapi/neural_compressor/ux/components/model/index", "autoapi/neural_compressor/ux/components/model/model/index", "autoapi/neural_compressor/ux/components/model/model_type_getter/index", "autoapi/neural_compressor/ux/components/model/onnxrt/index", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index", "autoapi/neural_compressor/ux/components/model/pytorch/index", "autoapi/neural_compressor/ux/components/model/pytorch/model/index", "autoapi/neural_compressor/ux/components/model/repository/index", "autoapi/neural_compressor/ux/components/model/shape/index", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index", "autoapi/neural_compressor/ux/components/model/tensorflow/index", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index", "autoapi/neural_compressor/ux/components/model_zoo/index", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index", "autoapi/neural_compressor/ux/components/names_mapper/index", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index", "autoapi/neural_compressor/ux/components/optimization/factory/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/optimization/index", "autoapi/neural_compressor/ux/components/optimization/pruning/index", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index", "autoapi/neural_compressor/ux/components/optimization/tune/index", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index", "autoapi/neural_compressor/ux/components/profiling/factory/index", "autoapi/neural_compressor/ux/components/profiling/index", "autoapi/neural_compressor/ux/components/profiling/profile_model/index", "autoapi/neural_compressor/ux/components/profiling/profiler/index", "autoapi/neural_compressor/ux/components/profiling/profiling/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index", "autoapi/neural_compressor/ux/inc_bench/index", "autoapi/neural_compressor/ux/index", "autoapi/neural_compressor/ux/utils/consts/index", "autoapi/neural_compressor/ux/utils/environment/index", "autoapi/neural_compressor/ux/utils/exceptions/index", "autoapi/neural_compressor/ux/utils/executor/index", "autoapi/neural_compressor/ux/utils/expiring_dict/index", "autoapi/neural_compressor/ux/utils/github_info/index", "autoapi/neural_compressor/ux/utils/hw_info/index", "autoapi/neural_compressor/ux/utils/index", "autoapi/neural_compressor/ux/utils/json_serializer/index", "autoapi/neural_compressor/ux/utils/logger/index", "autoapi/neural_compressor/ux/utils/parser/index", "autoapi/neural_compressor/ux/utils/proc/index", "autoapi/neural_compressor/ux/utils/processes/index", "autoapi/neural_compressor/ux/utils/singleton/index", "autoapi/neural_compressor/ux/utils/status_updates/index", "autoapi/neural_compressor/ux/utils/templates/index", "autoapi/neural_compressor/ux/utils/templates/metric/index", "autoapi/neural_compressor/ux/utils/templates/workdir/index", "autoapi/neural_compressor/ux/utils/utils/index", "autoapi/neural_compressor/ux/utils/workload/config/index", "autoapi/neural_compressor/ux/utils/workload/dataloader/index", "autoapi/neural_compressor/ux/utils/workload/evaluation/index", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index", "autoapi/neural_compressor/ux/utils/workload/index", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index", "autoapi/neural_compressor/ux/utils/workload/model/index", "autoapi/neural_compressor/ux/utils/workload/pruning/index", "autoapi/neural_compressor/ux/utils/workload/quantization/index", "autoapi/neural_compressor/ux/utils/workload/tuning/index", "autoapi/neural_compressor/ux/utils/yaml_utils/index", "autoapi/neural_compressor/ux/web/communication/index", "autoapi/neural_compressor/ux/web/configuration/index", "autoapi/neural_compressor/ux/web/exceptions/index", "autoapi/neural_compressor/ux/web/index", "autoapi/neural_compressor/ux/web/router/index", "autoapi/neural_compressor/ux/web/server/index", "autoapi/neural_compressor/ux/web/service/benchmark/index", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index", "autoapi/neural_compressor/ux/web/service/index", "autoapi/neural_compressor/ux/web/service/model/index", "autoapi/neural_compressor/ux/web/service/optimization/index", "autoapi/neural_compressor/ux/web/service/profiling/index", "autoapi/neural_compressor/ux/web/service/request_data_processor/index", "autoapi/neural_compressor/ux/web/service/response_generator/index", "autoapi/neural_compressor/ux/web/service/workload/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/bench", "docs/source/benchmark", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/objective", "docs/source/orchestration", "docs/source/platform_configuration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_mixed_precision", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/644ec953a7dc_pruning_support/index.rst", "autoapi/6ece06672ed3_v1_14/index.rst", "autoapi/6f0d0f71d92e_v1_13/index.rst", "autoapi/9e89549a08c8_v1_11/index.rst", "autoapi/block_mask/index.rst", "autoapi/env/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/compression/pruning/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/export/utils/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/template/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index.rst", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/index.rst", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index.rst", "autoapi/neural_compressor/ux/components/db_manager/utils/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/factory/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index.rst", "autoapi/neural_compressor/ux/components/file_browser/index.rst", "autoapi/neural_compressor/ux/components/graph/attribute/index.rst", "autoapi/neural_compressor/ux/components/graph/collapser/index.rst", "autoapi/neural_compressor/ux/components/graph/edge/index.rst", "autoapi/neural_compressor/ux/components/graph/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/graph_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/node/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index.rst", "autoapi/neural_compressor/ux/components/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/request/index.rst", "autoapi/neural_compressor/ux/components/manage_workspace/index.rst", "autoapi/neural_compressor/ux/components/model/domain/index.rst", "autoapi/neural_compressor/ux/components/model/index.rst", "autoapi/neural_compressor/ux/components/model/model/index.rst", "autoapi/neural_compressor/ux/components/model/model_type_getter/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/model/index.rst", "autoapi/neural_compressor/ux/components/model/repository/index.rst", "autoapi/neural_compressor/ux/components/model/shape/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/factory/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/profile_model/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/ux/inc_bench/index.rst", "autoapi/neural_compressor/ux/index.rst", "autoapi/neural_compressor/ux/utils/consts/index.rst", "autoapi/neural_compressor/ux/utils/environment/index.rst", "autoapi/neural_compressor/ux/utils/exceptions/index.rst", "autoapi/neural_compressor/ux/utils/executor/index.rst", "autoapi/neural_compressor/ux/utils/expiring_dict/index.rst", "autoapi/neural_compressor/ux/utils/github_info/index.rst", "autoapi/neural_compressor/ux/utils/hw_info/index.rst", "autoapi/neural_compressor/ux/utils/index.rst", "autoapi/neural_compressor/ux/utils/json_serializer/index.rst", "autoapi/neural_compressor/ux/utils/logger/index.rst", "autoapi/neural_compressor/ux/utils/parser/index.rst", "autoapi/neural_compressor/ux/utils/proc/index.rst", "autoapi/neural_compressor/ux/utils/processes/index.rst", "autoapi/neural_compressor/ux/utils/singleton/index.rst", "autoapi/neural_compressor/ux/utils/status_updates/index.rst", "autoapi/neural_compressor/ux/utils/templates/index.rst", "autoapi/neural_compressor/ux/utils/templates/metric/index.rst", "autoapi/neural_compressor/ux/utils/templates/workdir/index.rst", "autoapi/neural_compressor/ux/utils/utils/index.rst", "autoapi/neural_compressor/ux/utils/workload/config/index.rst", "autoapi/neural_compressor/ux/utils/workload/dataloader/index.rst", "autoapi/neural_compressor/ux/utils/workload/evaluation/index.rst", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index.rst", "autoapi/neural_compressor/ux/utils/workload/index.rst", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index.rst", "autoapi/neural_compressor/ux/utils/workload/model/index.rst", "autoapi/neural_compressor/ux/utils/workload/pruning/index.rst", "autoapi/neural_compressor/ux/utils/workload/quantization/index.rst", "autoapi/neural_compressor/ux/utils/workload/tuning/index.rst", "autoapi/neural_compressor/ux/utils/yaml_utils/index.rst", "autoapi/neural_compressor/ux/web/communication/index.rst", "autoapi/neural_compressor/ux/web/configuration/index.rst", "autoapi/neural_compressor/ux/web/exceptions/index.rst", "autoapi/neural_compressor/ux/web/index.rst", "autoapi/neural_compressor/ux/web/router/index.rst", "autoapi/neural_compressor/ux/web/server/index.rst", "autoapi/neural_compressor/ux/web/service/benchmark/index.rst", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index.rst", "autoapi/neural_compressor/ux/web/service/index.rst", "autoapi/neural_compressor/ux/web/service/model/index.rst", "autoapi/neural_compressor/ux/web/service/optimization/index.rst", "autoapi/neural_compressor/ux/web/service/profiling/index.rst", "autoapi/neural_compressor/ux/web/service/request_data_processor/index.rst", "autoapi/neural_compressor/ux/web/service/response_generator/index.rst", "autoapi/neural_compressor/ux/web/service/workload/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/bench.md", "docs/source/benchmark.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/platform_configuration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_mixed_precision.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">644ec953a7dc_pruning_support</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6ece06672ed3_v1_14</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6f0d0f71d92e_v1_13</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">9e89549a08c8_v1_11</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">env</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.pattern_analyzer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.weight_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template.api_doc_example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.execute_benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.benchmark_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.graph_optimization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.mixed_precision_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.profiling_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.pruning_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.quantization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.configuration_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_boundary_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.params_feeder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.pruning_config_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain_flavour</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.framework</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.project</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.pruning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.examples_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.model_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.project_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.params_interfaces</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.attribute</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.collapser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.edge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.onnxrt_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.tensorflow_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_control_queue</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.request</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.manage_workspace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model_type_getter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.repository</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.shape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.frozen_pb</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.meta_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.saved_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.list_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.execute_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tune_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.execute_profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profile_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.inc_bench</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.consts</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.environment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.executor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.expiring_dict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.github_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.hw_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.json_serializer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.proc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.processes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.singleton</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.status_updates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.workdir</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.evaluation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.yaml_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.communication</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.router</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.server</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.history_snapshot_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.request_data_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.response_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Intel\u00ae Neural Compressor Bench", "Benchmarking", "DataLoader", "Dataset", "Design", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Objective", "Optimization Orchestration", "SYSTEM CONFIGURATION", "Pruning", "Full Publications/Events (59)", "Pythonic Style Access for Configurations", "Quantization", "Turn OFF Auto Mixed Precision during Quantization", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"pruning_support": 0, "revis": [0, 1, 2, 3], "id": [0, 1, 2, 3, 157, 207, 209, 245, 255, 257, 258, 259, 260, 293, 295, 296, 297, 298, 415, 565, 597, 601], "644ec953a7dc": 0, "6ece06672ed3": [0, 1], "creat": [0, 1, 2, 3, 5, 17, 20, 104, 176, 181, 191, 193, 211, 221, 231, 233, 258, 268, 269, 296, 328, 331, 336, 510, 527, 530, 533, 551, 568, 579, 581, 583, 584, 587, 594, 597, 599, 601], "date": [0, 1, 2, 3], "2022": [0, 1, 2, 3, 176, 532, 564, 598], "12": [0, 548, 560, 563, 604], "09": [0, 604], "17": [0, 598, 604], "22": [0, 3, 563, 604], "310141": 0, "v1": [1, 2, 3, 145, 203, 204, 243, 259, 260, 262, 297, 298, 300, 309, 555, 560, 565, 568, 591, 596, 597, 604], "14": [1, 2, 176, 250, 251, 557, 563, 598, 604], "6f0d0f71d92e": [1, 2], "08": [1, 208, 246, 600, 604], "31": [1, 604], "07": [1, 2, 598, 603, 604], "16": [1, 550, 551, 591, 598, 604], "24": [1, 598, 601, 604], "229939": 1, "update_dataload": 1, "db_session": [1, 397], "sqlalchemi": [1, 384, 397, 558, 563], "orm": [1, 384, 397], "session": [1, 145, 190, 230, 309, 397, 566, 599], "sourc": [1, 5, 6, 8, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 274, 275, 276, 277, 280, 281, 282, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 327, 328, 329, 330, 331, 333, 334, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 396, 397, 398, 399, 402, 403, 404, 406, 407, 409, 410, 411, 412, 413, 415, 417, 418, 424, 425, 427, 428, 430, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 446, 448, 449, 450, 451, 453, 454, 456, 457, 459, 460, 462, 463, 465, 466, 467, 468, 469, 471, 472, 473, 474, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 529, 532, 564, 566, 579, 581, 583, 584, 586, 592], "updat": [1, 73, 162, 167, 171, 251, 287, 312, 346, 397, 467, 494, 548, 557, 558, 565, 566, 572, 577, 580, 590, 591, 601, 602], "dataload": [1, 17, 19, 147, 149, 151, 157, 179, 180, 191, 202, 212, 231, 242, 247, 254, 277, 282, 291, 292, 312, 333, 336, 344, 371, 395, 397, 419, 460, 473, 479, 487, 498, 503, 529, 532, 533, 548, 553, 554, 555, 560, 561, 565, 566, 567, 589, 594, 595, 598, 599, 600, 603], "exist": [1, 52, 157, 173, 209, 309, 430, 498, 557, 565, 573, 591, 601], "databas": [1, 193, 233, 362, 365, 367, 370, 371, 372, 375, 376, 381, 385, 386, 390, 395], "update_transform": 1, "transform": [1, 43, 49, 140, 142, 143, 144, 168, 191, 192, 193, 194, 195, 196, 198, 200, 202, 231, 232, 233, 234, 235, 236, 238, 240, 242, 254, 292, 371, 395, 397, 419, 498, 500, 529, 530, 550, 551, 553, 554, 555, 556, 560, 566, 569, 574, 575, 576, 577, 591, 592, 595, 598, 599, 603, 604], "13": [2, 3, 312, 548, 563, 598], "9e89549a08c8": [2, 3], "29": [2, 598, 604], "41": [2, 598, 604], "291905": 2, "11": [3, 548, 563, 565, 567, 598, 601], "03": [3, 604], "34": [3, 604], "52": [3, 598, 604], "916541": 3, "block": [4, 162, 167, 168, 171, 285, 311, 331, 515, 562, 588, 591, 598], "mask": [4, 166, 167, 168, 191, 231, 258, 287, 296, 591, 604], "run_migrations_offlin": 5, "run": [5, 17, 145, 157, 168, 171, 176, 179, 180, 190, 207, 209, 230, 245, 286, 287, 301, 312, 316, 333, 445, 491, 513, 515, 528, 533, 548, 549, 555, 558, 559, 566, 567, 569, 571, 573, 574, 575, 577, 579, 580, 581, 583, 584, 586, 591, 592, 594, 596, 597, 599, 601, 603], "migrat": [5, 598, 602], "offlin": [5, 343, 527, 566, 594, 598], "mode": [5, 42, 43, 44, 109, 149, 200, 240, 258, 296, 309, 328, 343, 533, 548, 562, 563, 579, 583, 594, 595, 601], "thi": [5, 44, 85, 109, 131, 138, 140, 144, 147, 151, 156, 158, 165, 167, 168, 169, 170, 176, 179, 180, 190, 191, 192, 193, 194, 195, 196, 198, 208, 211, 217, 218, 230, 231, 232, 233, 234, 235, 236, 238, 246, 255, 258, 259, 260, 262, 271, 272, 274, 275, 276, 277, 282, 285, 287, 289, 290, 291, 293, 296, 297, 298, 300, 301, 311, 312, 316, 321, 331, 333, 342, 343, 527, 528, 529, 530, 533, 548, 550, 551, 553, 554, 555, 559, 562, 564, 565, 566, 567, 568, 569, 571, 572, 574, 575, 577, 579, 581, 583, 584, 585, 586, 587, 591, 594, 595, 596, 597, 598, 599, 600, 601, 602], "configur": [5, 15, 17, 18, 44, 117, 146, 151, 157, 171, 172, 176, 179, 180, 182, 193, 196, 209, 214, 233, 236, 247, 251, 253, 264, 265, 266, 268, 277, 282, 286, 290, 291, 292, 301, 311, 312, 321, 333, 335, 336, 341, 342, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 449, 479, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 513, 515, 529, 530, 533, 548, 551, 565, 566, 573, 587, 588, 591, 594, 596, 600, 601, 604], "context": [5, 17, 343, 593], "just": [5, 96, 181, 206, 208, 211, 213, 214, 216, 221, 246, 311, 530, 566, 576, 580, 586, 589, 594, 598, 600, 601], "url": [5, 193, 233, 564], "an": [5, 17, 66, 67, 69, 104, 140, 147, 151, 156, 168, 176, 184, 189, 193, 208, 212, 217, 224, 229, 233, 246, 254, 255, 259, 260, 268, 269, 291, 292, 293, 297, 298, 301, 312, 331, 333, 407, 525, 527, 529, 530, 532, 533, 550, 551, 552, 557, 565, 566, 567, 569, 573, 574, 577, 586, 588, 591, 592, 594, 597, 598, 599, 600, 601], "engin": 5, "though": [5, 598], "i": [5, 17, 43, 44, 47, 48, 52, 53, 56, 59, 63, 69, 81, 84, 104, 131, 140, 145, 147, 150, 151, 156, 157, 158, 162, 165, 166, 168, 169, 171, 175, 176, 179, 180, 181, 189, 190, 191, 192, 193, 194, 195, 198, 200, 204, 208, 209, 211, 215, 217, 218, 221, 229, 230, 231, 232, 233, 234, 235, 238, 240, 243, 246, 255, 258, 260, 262, 264, 269, 277, 282, 286, 287, 291, 293, 296, 298, 300, 301, 311, 312, 317, 322, 331, 333, 342, 343, 407, 446, 486, 490, 496, 498, 506, 513, 527, 528, 529, 530, 532, 533, 534, 536, 540, 543, 546, 548, 549, 550, 551, 553, 554, 555, 557, 559, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 577, 579, 580, 581, 583, 584, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604], "accept": [5, 176, 331, 527, 548, 549], "here": [5, 258, 296, 331, 548, 551, 555, 556, 557, 559, 560, 565, 574, 581, 584, 586, 591, 594, 596, 597, 604], "well": [5, 179, 180, 301, 312, 333, 530, 532, 551, 591, 594, 596, 598, 603], "By": [5, 165, 176, 255, 293, 532, 565, 568, 579, 580, 583, 592, 601], "skip": [5, 599, 601], "creation": [5, 359], "we": [5, 43, 66, 67, 69, 73, 85, 140, 149, 155, 156, 157, 165, 176, 190, 209, 211, 230, 255, 258, 293, 296, 319, 527, 529, 533, 550, 555, 557, 559, 565, 566, 573, 574, 577, 581, 584, 586, 587, 588, 589, 591, 593, 594, 597, 598, 599, 601, 602], "don": [5, 140, 156, 167, 175, 176, 529, 548, 591, 601], "t": [5, 66, 67, 69, 140, 156, 167, 175, 176, 208, 211, 246, 260, 298, 529, 533, 548, 553, 555, 566, 587, 591, 594, 601, 603], "even": [5, 548, 591, 598], "need": [5, 17, 43, 104, 108, 149, 157, 165, 176, 179, 180, 181, 189, 190, 193, 200, 208, 211, 213, 214, 221, 229, 230, 233, 240, 246, 291, 300, 301, 311, 312, 321, 333, 342, 343, 529, 533, 548, 550, 551, 553, 555, 562, 566, 567, 569, 571, 572, 575, 579, 580, 581, 583, 584, 586, 587, 591, 593, 594, 595, 596, 598, 600, 601, 603], "dbapi": 5, "avail": [5, 176, 305, 446, 534, 536, 540, 543, 546, 548, 556, 560, 562, 579, 583, 590, 591, 601, 604], "call": [5, 17, 149, 152, 165, 168, 258, 287, 296, 529, 530, 533, 548, 550, 561, 575, 577, 587, 591, 594, 598, 599, 600], "execut": [5, 43, 52, 168, 175, 176, 287, 291, 312, 313, 315, 333, 336, 342, 343, 345, 346, 449, 453, 457, 461, 462, 465, 468, 480, 483, 491, 492, 514, 548, 553, 554, 566, 567, 571, 572, 579, 580, 583, 586, 587, 589, 591, 594, 597, 601, 604], "emit": 5, "given": [5, 17, 20, 66, 67, 69, 103, 104, 115, 145, 151, 208, 246, 258, 296, 312, 407, 484, 498, 530, 591, 598, 600], "string": [5, 43, 44, 115, 145, 159, 165, 167, 168, 169, 170, 171, 172, 176, 193, 210, 215, 233, 247, 251, 253, 255, 258, 264, 265, 266, 268, 269, 277, 282, 285, 286, 287, 288, 289, 290, 293, 296, 305, 309, 336, 343, 356, 498, 565, 598, 600], "script": [5, 165, 255, 256, 259, 260, 293, 294, 297, 298, 345, 346, 432, 449, 453, 457, 459, 462, 465, 471, 555, 562, 569, 573, 576, 577, 580, 592], "output": [5, 43, 52, 56, 58, 73, 97, 104, 109, 145, 151, 165, 166, 167, 173, 175, 176, 179, 180, 213, 217, 250, 251, 255, 285, 293, 300, 301, 309, 312, 333, 339, 340, 343, 453, 457, 529, 533, 548, 553, 554, 555, 557, 559, 561, 565, 566, 568, 577, 586, 587, 589, 591, 593, 594, 598, 599, 600, 601, 603], "run_migrations_onlin": 5, "onlin": [5, 527, 597], "In": [5, 158, 167, 168, 169, 176, 190, 218, 230, 258, 285, 287, 296, 311, 527, 529, 530, 532, 533, 548, 550, 551, 553, 554, 555, 565, 566, 576, 579, 580, 583, 588, 589, 591, 594, 595, 597, 598, 599, 600, 601], "scenario": [5, 360, 533, 548, 549, 553, 566, 591], "associ": [5, 258, 296, 385, 386], "connect": [5, 162, 287, 384, 385, 387, 388, 389, 391, 392, 393, 394, 548, 586, 590, 591, 597], "adaptor_registri": [6, 533], "cl": [6, 152, 159, 167, 168, 169, 170, 193, 200, 208, 210, 215, 233, 240, 246, 269, 276, 280, 285, 287, 289, 311, 324, 343], "The": [6, 8, 15, 18, 20, 37, 43, 52, 73, 112, 118, 120, 145, 151, 152, 157, 158, 159, 162, 165, 167, 168, 169, 170, 171, 172, 173, 176, 179, 180, 181, 191, 192, 193, 194, 195, 199, 200, 208, 210, 213, 215, 218, 220, 221, 231, 232, 233, 234, 235, 239, 240, 246, 247, 253, 255, 256, 257, 259, 260, 262, 264, 265, 266, 268, 269, 271, 272, 274, 275, 276, 277, 280, 282, 285, 286, 287, 288, 289, 290, 293, 294, 295, 297, 298, 300, 301, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 328, 330, 331, 333, 334, 336, 338, 339, 342, 343, 363, 364, 366, 369, 373, 374, 377, 378, 380, 382, 383, 390, 395, 398, 400, 401, 402, 403, 404, 405, 406, 419, 426, 427, 479, 527, 529, 530, 533, 534, 536, 540, 543, 546, 548, 549, 550, 551, 553, 555, 557, 559, 561, 562, 563, 565, 566, 567, 568, 571, 572, 574, 577, 579, 580, 581, 583, 584, 586, 587, 588, 589, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604], "decor": [6, 20, 37, 66, 67, 69, 145, 152, 167, 168, 170, 208, 215, 246, 262, 269, 276, 280, 285, 287, 289, 300, 311, 324, 327, 343, 493, 529, 530, 533, 601], "us": [6, 17, 20, 37, 43, 47, 48, 69, 102, 104, 115, 147, 151, 157, 159, 162, 165, 166, 167, 168, 170, 173, 175, 176, 179, 180, 189, 190, 191, 192, 193, 194, 195, 198, 207, 208, 209, 210, 215, 229, 230, 231, 232, 233, 234, 235, 238, 245, 246, 250, 251, 253, 255, 256, 258, 262, 263, 264, 269, 276, 277, 280, 282, 285, 287, 288, 289, 290, 291, 293, 294, 296, 300, 311, 316, 319, 321, 324, 327, 328, 331, 334, 335, 336, 337, 343, 390, 395, 400, 401, 405, 407, 419, 426, 428, 453, 457, 498, 510, 527, 528, 529, 530, 533, 548, 549, 550, 551, 553, 554, 555, 557, 559, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 577, 579, 581, 583, 584, 586, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604], "regist": [6, 20, 37, 152, 159, 162, 167, 168, 169, 170, 193, 200, 208, 210, 215, 233, 240, 246, 262, 269, 276, 280, 285, 287, 289, 300, 311, 324, 327, 530, 533, 551, 555, 565, 566, 587, 588, 598, 601], "all": [6, 17, 20, 37, 44, 62, 96, 152, 154, 157, 158, 167, 168, 171, 176, 181, 182, 189, 193, 200, 208, 209, 215, 218, 220, 221, 229, 233, 240, 246, 251, 255, 258, 260, 262, 269, 276, 280, 281, 285, 291, 293, 296, 298, 300, 302, 311, 324, 327, 336, 343, 347, 359, 371, 395, 400, 401, 414, 416, 419, 420, 426, 445, 452, 454, 458, 459, 461, 464, 470, 475, 479, 492, 515, 527, 532, 533, 548, 550, 551, 555, 559, 563, 566, 569, 577, 580, 581, 584, 585, 586, 587, 589, 590, 591, 592, 594, 595, 598, 600, 601], "subclass": [6, 20, 37, 152, 167, 168, 170, 186, 190, 193, 200, 208, 215, 226, 230, 233, 240, 246, 262, 269, 276, 280, 285, 287, 289, 300, 311, 324, 327, 533], "paramet": [6, 15, 17, 18, 20, 43, 44, 66, 67, 69, 85, 104, 115, 131, 145, 146, 147, 150, 151, 152, 157, 158, 159, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 179, 180, 190, 191, 193, 200, 204, 208, 210, 215, 220, 230, 231, 233, 240, 243, 246, 247, 249, 250, 251, 252, 253, 255, 256, 258, 259, 260, 262, 264, 265, 266, 268, 269, 270, 271, 272, 274, 275, 276, 277, 280, 282, 285, 286, 287, 288, 289, 290, 293, 294, 296, 297, 298, 300, 301, 305, 309, 311, 312, 316, 324, 328, 330, 331, 333, 336, 340, 342, 343, 360, 385, 386, 396, 407, 478, 498, 500, 510, 529, 548, 550, 551, 553, 555, 562, 565, 566, 580, 586, 587, 591, 594, 597, 598, 600, 601, 603], "framework_specific_info": [6, 8, 15, 18, 44, 46, 533], "base": [6, 15, 17, 20, 37, 44, 45, 46, 85, 104, 115, 119, 121, 131, 141, 147, 151, 152, 158, 162, 176, 181, 184, 189, 191, 193, 200, 208, 218, 221, 224, 229, 231, 233, 240, 246, 262, 268, 270, 276, 277, 280, 282, 287, 300, 302, 309, 310, 311, 321, 324, 328, 358, 498, 530, 532, 533, 551, 554, 555, 559, 566, 574, 575, 577, 586, 590, 591, 594, 597, 599, 601, 604], "framework": [6, 8, 15, 17, 18, 44, 157, 159, 168, 177, 178, 182, 183, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 205, 208, 210, 211, 215, 222, 223, 225, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 242, 244, 246, 253, 262, 263, 290, 300, 301, 302, 303, 305, 322, 328, 336, 345, 371, 395, 397, 419, 446, 453, 457, 462, 465, 480, 486, 498, 532, 533, 548, 555, 556, 560, 561, 562, 563, 565, 566, 567, 591, 592, 594, 599, 600, 601, 602, 603], "layer": [6, 8, 15, 18, 43, 44, 45, 46, 115, 116, 117, 118, 120, 121, 149, 155, 159, 165, 166, 167, 171, 176, 210, 217, 285, 286, 334, 336, 343, 510, 533, 554, 562, 591, 596], "mxnet_util": 7, "util": [7, 16, 21, 104, 109, 110, 138, 139, 146, 147, 148, 150, 161, 163, 176, 217, 248, 254, 256, 286, 292, 294, 320, 358, 395, 419, 426, 436, 470, 475, 479, 534, 555, 566, 569, 594, 601, 602], "ox_util": 7, "oper": [7, 21, 43, 103, 109, 145, 165, 166, 167, 176, 204, 243, 285, 510, 529, 548, 549, 550, 557, 586, 594, 598, 600, 601], "activ": [7, 21, 33, 151, 175, 176, 217, 251, 328, 403, 533, 548, 554, 559, 566, 587, 590, 593, 594, 598, 599, 603], "argmax": [7, 21, 33], "attent": [7, 21, 33, 165, 171, 176, 191, 231, 527, 553], "binary_op": [7, 21, 33], "concat": [7, 21, 33, 144], "conv": [7, 21, 33, 57, 61, 65, 70, 71, 72, 91, 108, 155, 175, 176, 529, 566, 591, 593, 594, 601], "direct_q8": [7, 21, 33], "embed_layernorm": [7, 21, 33], "gather": [7, 17, 21, 33, 176, 285, 486], "gavgpool": [7, 21, 33], "gemm": [7, 21, 33, 175, 176, 591], "lstm": [7, 21, 33], "matmul": [7, 21, 33, 51, 58, 64, 72, 93, 108, 127, 136, 167, 175, 176, 251, 285, 557, 559, 601], "maxpool": [7, 21, 33, 128, 137, 559], "op": [7, 17, 21, 33, 43, 44, 51, 56, 64, 65, 66, 67, 68, 69, 70, 71, 73, 77, 80, 84, 87, 90, 91, 92, 93, 95, 104, 106, 108, 122, 123, 124, 130, 132, 133, 134, 135, 140, 143, 145, 146, 147, 150, 151, 155, 165, 175, 176, 251, 317, 319, 321, 328, 329, 338, 403, 404, 514, 533, 548, 559, 566, 567, 591, 594, 595, 596, 598, 599, 601, 603], "pad": [7, 21, 33, 70, 71, 191, 208, 231, 246, 551, 600], "pool": [7, 21, 33], "resiz": [7, 21, 33, 191, 192, 204, 208, 231, 232, 243, 246, 550, 551, 600], "split": [7, 21, 33, 43, 81, 207, 208, 245, 246, 529, 598, 600], "calibr": [7, 15, 17, 18, 21, 43, 48, 88, 89, 151, 157, 175, 176, 179, 180, 253, 290, 301, 312, 338, 507, 533, 550, 551, 561, 562, 594, 601, 603], "quantiz": [7, 15, 17, 18, 20, 21, 43, 47, 48, 87, 91, 93, 95, 98, 106, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 149, 151, 155, 157, 158, 175, 176, 179, 180, 204, 211, 218, 243, 251, 252, 253, 254, 264, 291, 292, 301, 317, 319, 321, 333, 334, 338, 342, 343, 479, 487, 503, 533, 538, 548, 550, 551, 555, 556, 557, 559, 561, 562, 565, 567, 568, 569, 574, 576, 577, 580, 589, 592, 596, 599, 600, 601, 602, 603], "tf_util": 7, "graph_rewrit": [7, 110], "bf16": [7, 56, 86, 110, 146, 175, 176, 328, 533, 559, 566, 567, 571, 576, 580, 586, 595, 601], "gener": [7, 17, 47, 48, 86, 110, 121, 145, 151, 165, 171, 179, 180, 181, 190, 193, 194, 195, 196, 208, 221, 230, 233, 234, 235, 236, 246, 251, 255, 263, 293, 301, 312, 316, 331, 333, 345, 348, 349, 350, 351, 352, 353, 354, 355, 396, 465, 471, 472, 482, 523, 529, 533, 548, 550, 553, 565, 566, 567, 569, 574, 579, 581, 583, 584, 586, 588, 590, 591, 592, 594, 595, 598, 599, 600, 601], "int8": [7, 22, 23, 43, 86, 110, 122, 123, 124, 130, 132, 133, 134, 135, 140, 145, 156, 157, 175, 176, 204, 243, 249, 250, 251, 328, 330, 342, 529, 533, 548, 549, 551, 554, 559, 566, 571, 574, 576, 577, 580, 586, 593, 594, 595, 596, 597, 598, 599, 600, 603], "onnx": [7, 18, 19, 20, 33, 42, 43, 86, 110, 139, 155, 175, 176, 187, 227, 249, 250, 251, 252, 301, 308, 341, 346, 449, 532, 533, 534, 550, 556, 557, 559, 560, 562, 568, 571, 576, 577, 592, 593, 601], "qdq": [7, 86, 110, 111, 112, 139, 151, 175, 176, 249, 250, 251, 533, 557, 562, 576, 577, 594], "graph_bas": [7, 86, 110], "quantize_graph": [7, 110], "qat": [7, 110, 111, 150, 176, 251, 264, 309, 554, 555, 557, 562, 566, 594], "quantize_graph_bas": [7, 110, 111], "quantize_graph_bn": [7, 110, 111], "quantize_graph_concatv2": [7, 110, 111], "quantize_graph_conv": [7, 110, 111], "quantize_graph_for_intel_cpu": [7, 110, 111], "quantize_graph_matmul": [7, 110, 111], "quantize_graph_pool": [7, 110, 111], "transform_graph": [7, 110], "bias_correct": [7, 110, 142], "graph_transform_bas": [7, 110, 142], "insert_log": [7, 110, 142], "rerange_quantized_concat": [7, 110, 142], "graph_convert": [7, 110], "graph_converter_without_calib": [7, 110], "graph_util": [7, 110], "quantize_graph_common": [7, 110], "tf2onnx_convert": [7, 110], "torch_util": [7, 212, 254, 292, 598], "bf16_convert": [7, 50, 86, 110, 148], "hawq_metr": [7, 148], "symbolic_trac": [7, 148], "tensorflow": [7, 50, 52, 74, 75, 76, 86, 94, 100, 101, 102, 103, 104, 105, 109, 110, 111, 113, 116, 129, 139, 142, 145, 175, 176, 190, 191, 192, 193, 196, 198, 200, 208, 210, 215, 230, 231, 232, 233, 236, 238, 240, 246, 250, 251, 252, 253, 256, 258, 262, 263, 264, 290, 294, 296, 300, 301, 309, 312, 322, 343, 405, 406, 418, 419, 426, 475, 476, 477, 479, 530, 532, 533, 548, 550, 553, 554, 556, 557, 559, 560, 562, 563, 566, 568, 576, 577, 592, 593, 597, 601, 603], "kerasadaptor": 8, "mxnetadaptor": 15, "do": [15, 18, 158, 175, 176, 190, 191, 230, 231, 247, 251, 255, 258, 288, 293, 296, 342, 527, 548, 551, 555, 559, 562, 563, 565, 566, 581, 584, 591, 595, 596, 601], "inspect": [15, 18, 548, 596, 599], "tensor": [15, 17, 18, 19, 20, 43, 69, 104, 145, 147, 151, 162, 167, 168, 169, 208, 246, 249, 251, 285, 287, 309, 321, 343, 529, 551, 591, 594, 596, 599, 600, 601], "dict": [15, 17, 18, 43, 44, 115, 145, 146, 147, 151, 152, 157, 162, 165, 166, 167, 168, 169, 170, 171, 173, 176, 179, 180, 190, 209, 215, 230, 249, 251, 257, 258, 259, 260, 262, 265, 268, 269, 270, 277, 280, 282, 285, 286, 287, 288, 289, 295, 296, 297, 298, 300, 301, 309, 312, 316, 317, 321, 327, 330, 331, 333, 334, 336, 342, 343, 344, 346, 349, 357, 358, 360, 365, 367, 368, 370, 372, 375, 376, 381, 385, 386, 397, 403, 407, 415, 424, 442, 443, 444, 446, 449, 451, 456, 460, 463, 466, 467, 468, 471, 473, 476, 483, 484, 486, 488, 494, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 510, 514, 515, 529, 565, 591, 593, 594, 598, 599, 601], "specif": [15, 18, 44, 45, 103, 115, 171, 175, 176, 191, 192, 193, 194, 198, 200, 215, 231, 232, 233, 234, 238, 240, 264, 271, 272, 274, 275, 276, 385, 386, 527, 530, 533, 548, 553, 559, 561, 565, 566, 567, 568, 569, 573, 574, 576, 580, 586, 588, 591, 593, 601, 603], "mxnetqueri": 15, "local_config_fil": [15, 44, 46], "defin": [15, 44, 45, 85, 147, 165, 167, 168, 169, 170, 176, 179, 180, 265, 266, 268, 269, 270, 277, 282, 285, 286, 287, 289, 301, 312, 333, 342, 421, 422, 423, 510, 527, 530, 533, 548, 550, 551, 553, 554, 559, 562, 565, 566, 587, 589, 591, 594, 597, 598, 599, 601, 603], "queri": [15, 17, 44, 46, 145, 165, 176, 328, 384, 385, 387, 388, 389, 391, 392, 393, 394, 594], "interfac": [15, 44, 45, 85, 112, 172, 253, 277, 282, 290, 291, 336, 344, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 460, 466, 473, 485, 562, 566, 577, 590, 594, 596], "each": [15, 43, 44, 45, 147, 176, 189, 193, 196, 204, 208, 229, 233, 236, 243, 246, 256, 258, 259, 260, 294, 296, 297, 298, 321, 528, 533, 548, 551, 553, 554, 559, 566, 567, 571, 577, 580, 586, 588, 591, 597, 598, 599, 600, 601, 602], "adapt": [15, 44, 45, 527, 532, 551, 577, 592], "should": [15, 44, 45, 53, 114, 115, 165, 168, 176, 179, 180, 189, 191, 193, 208, 213, 229, 231, 233, 246, 251, 256, 294, 300, 301, 312, 331, 333, 343, 407, 529, 530, 533, 548, 551, 553, 555, 565, 566, 567, 572, 581, 584, 586, 588, 594, 600, 601, 603], "implement": [15, 44, 45, 109, 140, 144, 179, 180, 186, 189, 190, 191, 193, 226, 229, 230, 231, 233, 255, 293, 301, 311, 312, 319, 333, 550, 551, 566, 577, 587, 591, 594, 596, 599, 601, 603], "inherit": [15, 44, 45, 158, 159, 168, 170, 175, 188, 208, 210, 218, 228, 246, 287, 289, 530, 533, 551], "backend": [15, 19, 44, 45, 155, 175, 176, 177, 178, 182, 183, 187, 191, 192, 194, 195, 196, 197, 198, 202, 205, 208, 214, 215, 222, 223, 225, 227, 231, 232, 234, 235, 236, 237, 238, 242, 244, 246, 263, 301, 302, 303, 305, 322, 529, 555, 561, 562, 566, 567, 575, 593, 600, 603], "own": [15, 44, 45, 73, 189, 208, 229, 246, 311, 530, 548, 550, 551, 562, 565, 588, 597, 602], "mxnet": [16, 17, 20, 186, 190, 193, 196, 200, 208, 226, 230, 233, 236, 240, 246, 253, 262, 290, 300, 301, 306, 312, 532, 533, 550, 556, 559, 562, 563, 566, 567, 568, 593, 601, 603], "init": [16, 21, 154, 160, 163, 164, 551, 565], "optyp": [17, 175, 176, 249], "enum": 17, "type": [17, 20, 43, 44, 73, 95, 104, 115, 121, 131, 145, 146, 147, 151, 152, 159, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 189, 191, 193, 200, 208, 210, 215, 229, 231, 233, 240, 246, 251, 252, 255, 256, 258, 262, 269, 276, 280, 285, 287, 289, 293, 294, 296, 300, 309, 311, 316, 317, 324, 328, 330, 331, 342, 356, 361, 385, 386, 428, 486, 494, 528, 533, 548, 551, 555, 559, 562, 566, 567, 587, 594, 597, 600, 601, 603], "isiter": 17, "obj": [17, 104, 171, 190, 220, 230, 247, 253, 264, 265, 266, 268, 277, 282, 286, 290, 301, 311, 312, 333, 336, 343], "bool": [17, 145, 150, 151, 167, 176, 191, 193, 204, 208, 231, 233, 243, 246, 251, 256, 262, 285, 294, 300, 327, 331, 342, 343, 407, 415, 434, 446, 449, 483, 486, 498, 517, 551, 565, 593, 600], "check": [17, 66, 67, 104, 145, 151, 171, 193, 233, 249, 286, 342, 343, 446, 449, 486, 498, 528, 532, 548, 555, 563, 570, 572, 574, 581, 584, 585, 596], "whether": [17, 104, 115, 145, 167, 175, 176, 189, 191, 204, 208, 229, 231, 243, 246, 256, 258, 262, 285, 294, 296, 300, 336, 342, 343, 449, 533, 551, 565, 594, 600], "object": [17, 43, 44, 73, 85, 104, 115, 131, 146, 147, 150, 151, 157, 158, 162, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 179, 180, 181, 191, 192, 193, 208, 209, 211, 220, 221, 231, 232, 233, 246, 247, 251, 253, 258, 266, 268, 271, 272, 274, 275, 276, 277, 282, 285, 286, 287, 288, 289, 290, 292, 296, 301, 309, 310, 312, 316, 333, 336, 342, 343, 423, 498, 510, 511, 515, 529, 530, 538, 548, 549, 550, 551, 558, 565, 566, 568, 589, 591, 593, 594, 600, 601, 602, 604], "iter": [17, 19, 104, 145, 157, 166, 168, 170, 176, 179, 180, 184, 189, 193, 194, 211, 224, 229, 233, 234, 287, 289, 301, 312, 333, 336, 529, 530, 533, 549, 551, 566, 591, 593, 594, 599, 601, 603], "return": [17, 20, 43, 44, 52, 66, 67, 69, 73, 104, 115, 145, 146, 147, 150, 151, 152, 157, 159, 165, 167, 168, 169, 170, 171, 173, 179, 180, 193, 200, 204, 208, 209, 210, 215, 220, 233, 240, 243, 246, 251, 252, 255, 256, 258, 259, 260, 262, 268, 269, 276, 280, 285, 286, 287, 289, 293, 294, 296, 297, 298, 300, 301, 305, 309, 311, 312, 316, 324, 328, 330, 331, 333, 336, 342, 343, 407, 486, 498, 529, 530, 551, 555, 565, 568, 588, 591, 594, 598, 599, 601], "true": [17, 84, 112, 143, 145, 157, 175, 176, 189, 191, 193, 194, 207, 208, 209, 229, 231, 233, 234, 245, 246, 251, 256, 262, 280, 294, 300, 311, 327, 331, 336, 342, 483, 486, 498, 551, 555, 559, 565, 566, 569, 572, 573, 593, 594, 598, 599, 600, 601, 603], "els": [17, 145, 176, 189, 229, 311, 498, 574, 599], "fals": [17, 19, 42, 46, 47, 48, 70, 71, 88, 91, 98, 101, 102, 104, 112, 130, 135, 140, 143, 144, 145, 150, 151, 157, 159, 175, 176, 181, 183, 191, 193, 204, 208, 209, 210, 211, 217, 221, 223, 231, 233, 243, 246, 258, 262, 296, 300, 311, 331, 336, 415, 434, 486, 498, 517, 533, 551, 559, 565, 566, 579, 583, 593, 594, 598, 599, 600, 603], "boolean": [17, 498], "ensure_list": 17, "x": [17, 53, 73, 166, 190, 208, 230, 246, 316, 331, 555, 557, 567, 568, 591, 594, 598, 599, 600, 602], "ensur": [17, 208, 246, 316, 548, 555, 557, 594, 600], "list": [17, 43, 52, 104, 145, 146, 147, 151, 157, 165, 166, 167, 175, 176, 179, 180, 184, 191, 204, 208, 209, 224, 231, 243, 246, 250, 251, 255, 256, 258, 259, 260, 262, 269, 277, 282, 285, 288, 293, 294, 296, 297, 298, 300, 301, 309, 312, 327, 331, 333, 334, 356, 358, 360, 365, 367, 368, 370, 372, 375, 376, 381, 385, 386, 397, 407, 410, 415, 441, 446, 449, 453, 457, 483, 490, 491, 492, 498, 510, 517, 529, 532, 533, 551, 559, 563, 566, 569, 574, 576, 579, 580, 583, 588, 591, 593, 594, 595, 598, 599, 601], "input": [17, 19, 43, 44, 52, 59, 63, 66, 67, 69, 70, 71, 73, 81, 82, 84, 85, 104, 108, 109, 115, 121, 145, 146, 149, 150, 151, 155, 165, 166, 175, 176, 179, 180, 191, 192, 193, 195, 204, 207, 208, 213, 231, 232, 233, 235, 243, 245, 246, 249, 250, 251, 300, 301, 305, 309, 312, 333, 342, 343, 345, 441, 453, 457, 462, 465, 471, 530, 533, 548, 549, 550, 551, 553, 554, 555, 557, 559, 561, 565, 566, 568, 569, 574, 591, 593, 594, 598, 599, 600, 603], "check_mx_vers": 17, "version": [17, 52, 103, 151, 165, 176, 250, 251, 292, 446, 486, 498, 527, 529, 533, 548, 559, 563, 564, 566, 579, 581, 583, 584, 590, 592, 601, 602], "str": [17, 146, 147, 150, 151, 152, 159, 165, 176, 191, 192, 193, 200, 204, 208, 210, 214, 215, 231, 232, 233, 240, 243, 246, 250, 251, 252, 255, 256, 258, 260, 262, 269, 280, 293, 294, 296, 298, 300, 327, 330, 331, 336, 343, 345, 346, 349, 356, 357, 358, 360, 362, 385, 386, 397, 403, 404, 407, 409, 410, 415, 424, 425, 427, 428, 430, 432, 434, 435, 438, 439, 440, 442, 443, 444, 446, 449, 453, 457, 462, 465, 467, 468, 471, 472, 483, 486, 491, 494, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 510, 514, 515, 551, 565, 593, 599, 600], "mx": 17, "__version__": 17, "combine_cap": 17, "current": [17, 43, 69, 103, 149, 162, 165, 167, 168, 176, 264, 271, 272, 274, 275, 276, 285, 287, 316, 322, 529, 530, 533, 548, 555, 559, 563, 565, 566, 569, 573, 586, 588, 591, 594, 598, 601], "new": [17, 20, 145, 157, 181, 193, 208, 209, 221, 233, 246, 286, 311, 510, 528, 555, 566, 567, 580, 586, 587, 591, 592, 594, 596, 597, 600, 602, 603], "combin": [17, 151, 175, 176, 179, 180, 204, 218, 243, 301, 312, 333, 343, 529, 533, 562, 566, 589, 592, 594, 595, 600, 601], "capabl": [17, 46, 328, 549, 559, 566, 567, 577, 593, 594, 601, 603], "contain": [17, 66, 67, 69, 73, 138, 145, 147, 157, 158, 165, 167, 168, 170, 171, 176, 179, 180, 191, 192, 193, 231, 232, 233, 247, 251, 253, 258, 259, 260, 264, 277, 280, 282, 285, 286, 287, 288, 289, 290, 296, 297, 298, 301, 312, 333, 336, 342, 347, 351, 359, 365, 367, 368, 370, 371, 372, 375, 376, 379, 381, 390, 395, 400, 401, 405, 408, 414, 419, 420, 426, 445, 452, 454, 455, 458, 459, 461, 464, 470, 475, 479, 551, 553, 562, 565, 587, 591, 599, 601, 602], "make_nc_model": 17, "target": [17, 43, 101, 165, 170, 171, 176, 286, 289, 316, 411, 551, 555, 566, 591, 599, 600, 601, 603], "sym_model": 17, "ctx": 17, "input_desc": 17, "convert": [17, 43, 47, 48, 49, 51, 52, 53, 54, 55, 65, 73, 85, 98, 99, 101, 102, 103, 104, 130, 135, 139, 146, 151, 165, 175, 176, 191, 204, 207, 208, 231, 243, 245, 246, 250, 258, 264, 286, 296, 328, 331, 529, 566, 567, 571, 594, 595, 598, 600, 601], "symbol": [17, 146, 150, 151, 255, 293, 301, 312, 529, 568], "model": [17, 19, 20, 33, 42, 43, 44, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 115, 117, 139, 145, 146, 147, 149, 150, 151, 155, 157, 158, 165, 168, 170, 171, 175, 176, 179, 180, 187, 190, 191, 193, 208, 209, 212, 213, 220, 227, 230, 231, 233, 246, 247, 249, 250, 251, 252, 253, 254, 262, 263, 264, 265, 268, 271, 272, 274, 275, 276, 277, 282, 286, 287, 288, 289, 290, 291, 292, 300, 301, 311, 312, 313, 316, 317, 321, 324, 331, 333, 339, 342, 343, 345, 346, 347, 371, 387, 389, 391, 395, 396, 407, 412, 413, 414, 417, 418, 419, 443, 444, 446, 449, 452, 453, 454, 455, 457, 458, 459, 464, 465, 470, 475, 479, 480, 487, 498, 503, 513, 514, 518, 525, 529, 530, 532, 533, 538, 549, 550, 551, 553, 554, 555, 556, 561, 562, 564, 565, 567, 569, 574, 576, 577, 580, 586, 588, 589, 590, 592, 594, 596, 597, 599, 600, 601, 602, 603], "neural": [17, 147, 157, 158, 167, 175, 176, 203, 204, 205, 208, 209, 212, 215, 218, 243, 244, 246, 248, 254, 261, 262, 264, 277, 282, 285, 288, 290, 291, 292, 299, 300, 301, 305, 312, 319, 320, 326, 333, 478, 485, 498, 525, 528, 533, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 567, 568, 570, 571, 574, 576, 577, 579, 581, 583, 584, 585, 588, 589, 592, 594, 596, 599, 600, 601, 603, 604], "compressor": [17, 157, 158, 167, 175, 176, 203, 204, 205, 208, 209, 212, 215, 218, 243, 244, 246, 248, 254, 261, 262, 264, 285, 288, 290, 291, 292, 299, 300, 301, 305, 312, 320, 326, 333, 478, 485, 498, 525, 528, 530, 533, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 567, 568, 569, 570, 574, 576, 577, 579, 581, 583, 584, 585, 588, 589, 591, 592, 594, 596, 599, 600, 601, 602, 603, 604], "tupl": [17, 104, 151, 176, 179, 180, 204, 208, 243, 246, 251, 301, 312, 327, 333, 498, 551, 565, 566, 594, 600], "symnet": 17, "arg": [17, 52, 104, 191, 192, 193, 231, 232, 233, 285, 316, 331, 339, 340, 348, 350, 352, 353, 354, 355, 365, 367, 368, 370, 372, 375, 376, 381, 550, 551, 555, 566, 575, 594, 599, 600], "aux": 17, "data": [17, 43, 54, 104, 145, 147, 149, 151, 155, 165, 175, 176, 179, 180, 209, 211, 251, 252, 254, 292, 301, 312, 316, 328, 330, 333, 336, 343, 346, 349, 357, 358, 360, 384, 396, 407, 423, 424, 434, 442, 443, 444, 446, 449, 466, 468, 483, 496, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 510, 514, 522, 532, 533, 548, 550, 551, 555, 559, 560, 563, 565, 566, 567, 594, 595, 596, 597, 598, 599, 600, 601], "descript": [17, 131, 251, 252, 331, 528, 529], "ncmodel": 17, "fuse": [17, 57, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 90, 91, 92, 93, 95, 130, 135, 150, 151, 155, 529, 598, 599], "suppli": 17, "get_framework_nam": 17, "get": [17, 43, 44, 66, 67, 69, 103, 104, 145, 151, 157, 162, 165, 167, 168, 169, 170, 171, 173, 176, 184, 208, 209, 215, 217, 224, 246, 251, 252, 285, 287, 289, 309, 321, 328, 330, 336, 343, 357, 358, 360, 397, 407, 424, 428, 441, 446, 449, 467, 478, 486, 494, 498, 514, 515, 548, 558, 562, 563, 566, 572, 598, 601, 602, 605], "name": [17, 43, 44, 52, 66, 67, 69, 103, 104, 109, 115, 145, 146, 147, 150, 151, 152, 157, 162, 165, 167, 168, 169, 170, 173, 175, 176, 191, 192, 193, 196, 200, 206, 208, 209, 213, 216, 217, 231, 232, 233, 236, 240, 246, 249, 250, 251, 257, 262, 280, 285, 287, 289, 295, 300, 305, 309, 311, 328, 330, 334, 336, 343, 407, 409, 446, 447, 448, 449, 486, 498, 500, 529, 548, 551, 555, 559, 564, 565, 566, 568, 572, 579, 583, 587, 590, 591, 594, 596, 597, 599, 601, 603, 604], "prepare_model_data": 17, "nc_model": [17, 277, 282, 333], "data_x": 17, "prepar": [17, 151, 478, 529, 532, 551, 555, 560, 594], "loader": [17, 179, 180, 301, 312, 333, 339, 594], "dataloaderwrap": 17, "prepare_model": 17, "create_data_exampl": 17, "exampl": [17, 147, 151, 157, 165, 166, 175, 176, 191, 192, 193, 204, 208, 231, 232, 233, 243, 246, 258, 259, 260, 262, 288, 296, 297, 298, 300, 301, 311, 312, 331, 333, 371, 389, 395, 419, 443, 444, 445, 446, 498, 527, 528, 532, 538, 548, 561, 562, 569, 572, 573, 574, 577, 595, 596, 600, 601, 602, 605], "prepare_dataload": 17, "io": 17, "ndarray_to_devic": 17, "ndarrai": [17, 66, 67, 69, 208, 246, 334, 558, 600], "devic": [17, 78, 88, 89, 90, 91, 92, 93, 96, 106, 130, 135, 144, 165, 166, 175, 176, 553, 566, 567, 569, 572, 577, 586, 591, 593], "is_model_quant": 17, "query_quantizable_nod": 17, "node": [17, 43, 49, 52, 53, 54, 55, 59, 61, 63, 66, 67, 69, 73, 76, 79, 81, 82, 83, 97, 101, 102, 104, 109, 131, 145, 249, 251, 309, 409, 411, 414, 419, 477, 479, 533, 548, 555, 599, 601], "map": [17, 43, 104, 176, 208, 246, 249, 251, 253, 257, 259, 260, 262, 277, 282, 287, 290, 295, 297, 298, 300, 448, 551, 555, 565, 566, 579, 583, 591, 594], "quantize_sym_model": 17, "qconfig": [17, 599], "accord": [17, 121, 151, 157, 176, 191, 192, 193, 208, 231, 232, 233, 246, 319, 321, 328, 336, 530, 533, 551, 555, 591, 595, 598, 600, 601], "run_forward": 17, "b_filter": 17, "collector": [17, 147, 334], "none": [17, 42, 43, 44, 46, 47, 48, 62, 88, 101, 103, 104, 109, 115, 139, 145, 147, 149, 151, 157, 158, 159, 171, 172, 173, 175, 176, 179, 180, 181, 183, 189, 191, 192, 193, 194, 195, 196, 198, 204, 208, 209, 210, 211, 218, 220, 221, 223, 229, 231, 232, 233, 234, 235, 236, 238, 243, 246, 247, 250, 251, 253, 258, 262, 263, 264, 265, 268, 277, 282, 286, 290, 296, 300, 301, 311, 312, 313, 316, 317, 321, 324, 328, 331, 333, 334, 336, 342, 343, 345, 346, 357, 358, 362, 365, 367, 368, 370, 372, 375, 376, 381, 384, 385, 386, 397, 434, 446, 453, 457, 462, 465, 466, 468, 478, 483, 484, 486, 489, 491, 498, 504, 506, 507, 508, 515, 533, 551, 565, 594, 599, 600, 601], "pre_batch": 17, "post_batch": 17, "forward": [17, 532, 566, 591, 593, 594, 598, 599], "propag": [17, 99], "filter": [17, 191, 192, 193, 194, 195, 196, 198, 202, 231, 232, 233, 234, 235, 236, 238, 242, 254, 292, 343, 407, 500, 550, 551, 562, 591, 599], "which": [17, 54, 82, 109, 147, 149, 162, 165, 166, 167, 168, 170, 175, 176, 191, 192, 193, 204, 209, 231, 232, 233, 243, 255, 260, 269, 271, 272, 274, 275, 276, 280, 285, 286, 287, 289, 293, 298, 305, 311, 312, 316, 343, 496, 527, 529, 530, 533, 548, 550, 551, 553, 555, 558, 559, 562, 565, 566, 567, 568, 570, 574, 577, 580, 586, 587, 589, 591, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603], "batch": [17, 151, 181, 183, 184, 189, 190, 211, 221, 223, 224, 229, 230, 333, 548, 550, 553, 554, 566, 589, 591, 600, 601, 604], "infer": [17, 104, 165, 253, 290, 309, 311, 312, 333, 532, 533, 553, 554, 566, 567, 586, 588, 591, 592, 594, 598, 599, 601], "collect": [17, 20, 43, 206, 208, 211, 213, 214, 216, 246, 260, 262, 298, 300, 334, 343, 449, 486, 498, 557, 594, 599, 601], "inform": [17, 43, 147, 162, 165, 167, 168, 169, 170, 171, 176, 179, 180, 211, 213, 214, 285, 287, 288, 289, 291, 300, 360, 485, 486, 492, 527, 528, 531, 532, 533, 534, 536, 540, 543, 546, 553, 557, 559, 566, 568, 581, 584, 587, 591, 595, 596, 599, 603, 604, 605], "dure": [17, 167, 170, 176, 285, 289, 311, 566, 567, 568, 588, 589, 591, 594, 599, 603], "prior": [17, 87, 601], "after": [17, 43, 77, 151, 167, 168, 176, 191, 204, 208, 211, 231, 243, 246, 251, 287, 317, 331, 484, 530, 548, 550, 551, 553, 554, 557, 562, 565, 566, 579, 580, 583, 587, 588, 589, 591, 594, 595, 597, 598, 599, 600, 601], "count": [17, 530, 551], "int": [17, 20, 43, 104, 145, 151, 168, 176, 190, 191, 192, 204, 208, 230, 231, 232, 243, 246, 250, 251, 256, 258, 262, 269, 294, 296, 300, 331, 343, 362, 397, 441, 484, 486, 489, 498, 506, 551, 565, 566, 593, 600], "make_symbol_block": 17, "gluon": [17, 301, 312, 568], "symbolblock": 17, "make_modul": 17, "parse_tune_config": 17, "tune_cfg": [17, 145, 146, 151, 533, 601], "quantizable_nod": 17, "strategi": [17, 151, 168, 175, 176, 177, 193, 233, 292, 480, 498, 508, 532, 533, 538, 555, 562, 566, 574, 586, 592, 593, 594, 595, 596, 602, 603], "config": [17, 114, 115, 117, 121, 151, 157, 162, 167, 168, 169, 170, 171, 175, 179, 180, 191, 220, 231, 271, 272, 274, 275, 276, 277, 282, 285, 286, 287, 288, 289, 292, 301, 328, 329, 331, 333, 336, 342, 343, 345, 358, 397, 442, 453, 457, 462, 465, 479, 487, 498, 501, 503, 509, 530, 532, 538, 548, 549, 553, 554, 555, 557, 560, 562, 566, 567, 568, 589, 591, 593, 594, 595, 597, 599, 601], "tune": [17, 44, 157, 175, 176, 179, 180, 191, 193, 231, 233, 253, 290, 301, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 327, 328, 329, 330, 333, 343, 382, 383, 396, 419, 449, 454, 467, 479, 487, 503, 533, 548, 550, 551, 555, 562, 564, 566, 567, 586, 588, 591, 592, 595, 596, 597, 599, 603], "from": [17, 43, 44, 60, 66, 67, 69, 104, 145, 151, 157, 158, 159, 162, 167, 168, 169, 170, 171, 176, 179, 180, 181, 184, 188, 191, 192, 193, 194, 195, 196, 198, 203, 204, 210, 211, 214, 221, 224, 228, 231, 232, 233, 234, 235, 236, 238, 243, 247, 249, 250, 251, 252, 255, 258, 259, 260, 264, 269, 285, 286, 287, 289, 293, 296, 297, 298, 301, 309, 311, 312, 328, 330, 331, 336, 342, 343, 396, 407, 430, 442, 443, 444, 446, 471, 491, 496, 498, 515, 527, 529, 530, 533, 549, 550, 551, 553, 554, 555, 556, 557, 558, 560, 562, 565, 567, 568, 569, 573, 574, 575, 577, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602], "distribute_calib_tensor": 17, "calib_tensor": 17, "calib_cfg": 17, "tensor_to_nod": 17, "distribut": [17, 20, 140, 156, 175, 176, 181, 183, 184, 189, 211, 221, 223, 224, 229, 338, 486, 532, 553, 563, 581, 584, 592, 594, 596, 598, 602, 604], "depend": [17, 179, 180, 209, 301, 312, 333, 528, 548, 558, 559, 593, 594, 601], "algorithm": [17, 151, 172, 255, 262, 270, 292, 293, 300, 336, 338, 530, 533, 553, 554, 559, 562, 575, 580, 591, 594, 599, 603], "set": [17, 43, 56, 95, 104, 114, 145, 151, 157, 165, 171, 173, 175, 176, 179, 180, 181, 191, 193, 196, 208, 209, 214, 215, 221, 231, 233, 236, 246, 251, 258, 264, 277, 282, 286, 291, 296, 301, 309, 312, 331, 333, 343, 345, 385, 386, 407, 453, 457, 465, 510, 515, 527, 530, 548, 549, 551, 553, 555, 559, 561, 562, 563, 565, 566, 567, 569, 571, 573, 587, 591, 593, 594, 597, 598, 601, 603], "kl": [17, 20, 176, 334, 338, 559, 566, 601, 603], "minmax": [17, 20, 559, 594, 603], "calib_model": 17, "qsym_model": 17, "calib_data": 17, "calibdata": 17, "threshold": [17, 153, 334, 338, 565], "amp_convert": 17, "amp_cfg": 17, "support": [17, 43, 96, 103, 149, 155, 159, 167, 168, 175, 176, 179, 180, 190, 191, 193, 200, 204, 208, 210, 211, 212, 215, 220, 230, 231, 233, 240, 243, 246, 254, 262, 264, 269, 285, 287, 291, 292, 300, 301, 305, 311, 312, 322, 328, 331, 333, 336, 338, 446, 480, 498, 525, 532, 548, 566, 569, 574, 577, 580, 586, 592, 595, 597, 598, 601, 602], "amp": [17, 569, 576, 590], "wrap": [17, 104, 115, 159, 210, 258, 296, 356, 529, 555, 581, 584], "dataiterload": 17, "data_it": 17, "collectorbas": 17, "calibcollector": 17, "include_tensors_kl": 17, "include_tensors_minmax": 17, "num_bin": [17, 20, 334], "8001": [17, 334], "tensorcollector": 17, "include_nod": 17, "qtensor_to_tensor": 17, "build": [17, 114, 152, 153, 155, 156, 166, 251, 252, 265, 268, 304, 306, 308, 309, 310, 407, 467, 498, 515, 533, 548, 563, 568, 579, 581, 583, 584, 587, 592, 597, 601], "up": [17, 99, 208, 246, 286, 384, 548, 555, 556, 559, 562, 577, 581, 584, 586, 592, 593, 594, 597, 600, 601, 603], "namecollector": 17, "cache_kl": 17, "cache_minmax": 17, "tensors_kl": 17, "tensors_minmax": 17, "onnxruntimeadaptor": 18, "rt": 18, "onnxrt_qlinearopsadaptor": [18, 533], "onnxrt_integeropsadaptor": 18, "onnxrt_qdqadaptor": 18, "onnxrtaug": 19, "model_wrapp": 19, "dump_op_typ": 19, "black_nod": 19, "white_nod": 19, "cpuexecutionprovid": [19, 594], "reduce_rang": [19, 42, 175, 176, 593], "augment": 19, "dump": [19, 251, 343, 594, 599], "calib_registri": 20, "calib_method": 20, "calibratorbas": 20, "minmaxcalibr": 20, "percentilecalibr": 20, "2048": [20, 343], "percentil": 20, "99": [20, 598, 604], "999": [20, 603, 604], "option": [20, 104, 167, 176, 179, 180, 191, 208, 231, 246, 250, 251, 258, 264, 285, 291, 292, 296, 301, 312, 328, 331, 333, 337, 343, 551, 559, 563, 566, 580, 594, 597, 600, 601, 603], "number": [20, 66, 67, 104, 151, 166, 167, 168, 175, 176, 189, 192, 204, 208, 229, 232, 243, 246, 259, 260, 262, 285, 297, 298, 300, 316, 331, 336, 343, 430, 486, 548, 549, 551, 555, 565, 591, 594, 597, 600, 601], "bin": [20, 343, 558], "histogram": [20, 334, 343, 548, 599], "valu": [20, 43, 54, 66, 67, 69, 88, 89, 104, 140, 145, 151, 156, 157, 162, 165, 166, 171, 173, 175, 176, 179, 180, 191, 194, 195, 204, 208, 209, 231, 234, 235, 243, 246, 258, 262, 286, 296, 300, 301, 312, 316, 321, 328, 331, 333, 334, 336, 343, 356, 358, 360, 365, 367, 368, 370, 372, 375, 376, 381, 385, 386, 407, 409, 480, 484, 498, 506, 509, 529, 548, 551, 559, 565, 566, 572, 588, 591, 593, 594, 598, 600, 601, 603], "default": [20, 96, 145, 171, 173, 175, 176, 179, 180, 183, 191, 192, 193, 204, 208, 223, 231, 232, 233, 243, 246, 250, 251, 255, 264, 286, 293, 309, 330, 336, 343, 365, 367, 368, 370, 372, 375, 376, 381, 407, 424, 498, 529, 533, 548, 551, 557, 559, 562, 563, 565, 566, 567, 574, 577, 579, 583, 588, 591, 593, 594, 595, 597, 600, 601, 603], "float": [20, 43, 147, 167, 168, 169, 171, 176, 191, 204, 231, 243, 256, 258, 259, 260, 287, 294, 296, 297, 298, 331, 346, 404, 459, 484, 498, 506, 509, 551, 565, 593, 594, 598, 600], "A": [20, 43, 53, 73, 74, 102, 115, 145, 151, 158, 162, 165, 167, 168, 169, 170, 171, 176, 193, 208, 211, 213, 214, 220, 233, 246, 247, 255, 258, 259, 260, 262, 265, 268, 269, 270, 277, 280, 282, 285, 286, 287, 288, 289, 293, 296, 297, 298, 300, 301, 305, 309, 316, 333, 551, 556, 559, 565, 566, 568, 579, 580, 583, 586, 591, 592, 594, 598, 600, 601, 603], "between": [20, 140, 156, 168, 176, 208, 246, 259, 262, 297, 300, 510, 514, 529, 533, 553, 557, 562, 565, 566, 577, 594, 596, 597, 598, 600, 601], "0": [20, 43, 52, 89, 104, 145, 153, 155, 159, 168, 171, 175, 176, 181, 183, 191, 194, 195, 198, 204, 208, 210, 211, 221, 223, 231, 234, 235, 238, 243, 246, 251, 253, 262, 269, 277, 282, 290, 300, 311, 317, 331, 529, 548, 551, 553, 555, 557, 558, 559, 560, 563, 564, 565, 566, 567, 572, 574, 579, 583, 590, 591, 593, 594, 596, 597, 598, 599, 600, 601, 603], "100": [20, 157, 175, 176, 193, 233, 331, 549, 551, 555, 561, 566, 593, 594, 598, 600, 601, 603, 604], "klcalibr": 20, "128": [20, 191, 194, 195, 208, 231, 234, 235, 246, 551, 566, 594, 600], "num_quantized_bin": 20, "histogramcollector": 20, "collctor": 20, "smooth_distribut": 20, "p": [20, 548, 587], "ep": [20, 156, 567], "0001": [20, 176, 553, 566, 593], "smooth": [20, 43, 149, 155, 175, 176, 591], "discret": [20, 601], "mai": [20, 145, 271, 272, 274, 275, 276, 331, 527, 528, 548, 550, 558, 564, 567, 579, 583, 590, 592, 594, 601], "have": [20, 43, 73, 82, 145, 166, 167, 168, 189, 211, 229, 255, 258, 285, 287, 293, 296, 331, 527, 528, 548, 550, 551, 555, 559, 564, 565, 566, 567, 569, 586, 588, 591, 594, 598, 601], "been": [20, 167, 168, 255, 285, 287, 293, 528, 530, 548, 553, 566, 567, 586, 598], "normal": [20, 208, 246, 260, 298, 498, 566, 588, 598, 600], "1": [20, 43, 53, 73, 88, 104, 108, 112, 143, 145, 149, 151, 153, 155, 156, 157, 159, 168, 175, 176, 181, 183, 190, 191, 192, 194, 195, 198, 199, 204, 208, 209, 210, 211, 221, 223, 230, 231, 232, 234, 235, 238, 239, 243, 246, 253, 258, 259, 260, 262, 277, 282, 287, 290, 291, 296, 297, 298, 300, 311, 312, 331, 336, 346, 468, 527, 529, 532, 533, 550, 551, 553, 557, 559, 560, 563, 565, 567, 570, 572, 588, 589, 590, 591, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603], "replac": [20, 260, 298, 498, 555, 566, 577, 596], "zero": [20, 43, 168, 171, 208, 246, 287, 343, 532, 591, 594, 598, 600, 601], "multipli": 20, "scale": [20, 43, 99, 140, 149, 155, 156, 204, 208, 243, 246, 251, 557, 594, 597, 598, 600, 601], "factor": [20, 590, 598, 604], "take": [20, 167, 176, 179, 180, 184, 208, 213, 224, 246, 285, 300, 301, 312, 316, 333, 527, 529, 530, 548, 550, 553, 559, 566, 586, 591, 594, 595, 600, 601, 603], "correspond": [20, 43, 147, 165, 176, 191, 231, 255, 258, 262, 293, 296, 300, 336, 533, 559, 566, 591, 593, 594, 597, 598, 601], "amount": 20, "off": [20, 66, 67, 69, 528], "non": [20, 286, 343, 529, 590, 591, 601], "ref": [20, 145], "http": [20, 147, 162, 167, 168, 191, 193, 231, 233, 255, 256, 258, 259, 260, 285, 287, 288, 293, 294, 296, 297, 298, 529, 532, 548, 551, 560, 563, 564, 566, 575, 581, 584, 596], "hanj": 20, "c": [20, 73, 193, 233, 548, 551, 558, 563, 601], "illinoi": 20, "edu": [20, 193, 233, 551], "cs412": 20, "bk3": 20, "diverg": [20, 334, 338, 553, 601], "pdf": 20, "github": [20, 147, 167, 191, 231, 255, 256, 259, 260, 285, 288, 293, 294, 297, 298, 442, 485, 528, 548, 551, 556, 560, 563, 564, 566, 575, 581, 584, 596], "com": [20, 147, 167, 191, 231, 255, 256, 259, 260, 285, 288, 293, 294, 297, 298, 527, 532, 548, 551, 560, 563, 564, 566, 569, 575, 596, 597, 604], "apach": [20, 564], "incub": 20, "blob": [20, 147, 167, 255, 256, 259, 260, 285, 293, 294, 297, 298, 566, 575], "master": [20, 167, 255, 256, 259, 260, 285, 288, 293, 294, 297, 298, 566, 601], "python": [20, 74, 145, 193, 212, 233, 254, 292, 331, 343, 446, 525, 528, 529, 548, 551, 555, 558, 563, 566, 571, 577, 580, 586, 592, 600], "contrib": [20, 292], "py": [20, 145, 147, 168, 176, 256, 258, 259, 260, 287, 294, 296, 297, 298, 331, 514, 529, 533, 548, 555, 563, 566, 571, 573, 574, 575, 581, 584, 594, 596, 599], "microsoft": [20, 533], "onnxruntim": [20, 175, 176, 187, 193, 200, 227, 233, 240, 263, 402, 406, 533, 560, 562, 563, 567, 593], "main": [20, 215, 288, 478, 515, 529, 555, 560, 566, 573, 575, 587, 591, 594], "tool": [20, 145, 250, 343, 532, 533, 566, 579, 583, 591, 592, 594], "arrai": [20, 43, 145, 208, 246, 258, 269, 296, 343, 600], "small": [20, 66, 67, 68, 319, 530, 548, 591, 601], "probabl": [20, 176, 338], "activationoper": 22, "onnx_quant": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41], "onnx_nod": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 86, 100, 110], "removableactivationoper": 22, "remov": [22, 43, 55, 56, 59, 73, 79, 82, 83, 84, 95, 97, 168, 251, 260, 298, 384, 430, 527, 528, 566, 579, 583, 591, 599], "qactivationoper": 22, "children": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41], "initi": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 43, 104, 115, 145, 159, 168, 179, 180, 188, 191, 210, 228, 231, 286, 287, 312, 328, 333, 385, 386, 478, 530, 548, 550, 551, 565, 585, 591, 594, 598, 601], "qoper": [22, 37, 175, 176], "format": [22, 43, 52, 145, 176, 191, 192, 193, 231, 232, 233, 251, 258, 264, 296, 328, 331, 449, 551, 555, 557, 565, 566, 567, 568, 569, 594], "argmaxoper": 23, "qargmaxoper": 23, "attentionoper": 24, "qattentionoper": 24, "qattent": 24, "binari": [25, 145, 262, 300, 558, 565, 581, 584], "binaryoper": 25, "qbinaryoper": 25, "qbinari": 25, "concatoper": 26, "qconcatoper": 26, "qconcat": 26, "convoper": 27, "qconvoper": 27, "qlinearconv": 27, "direct8bit": 28, "direct8bitoper": 28, "qdirectoper": 28, "qdirect": 28, "embedlayernorm": 29, "embedlayernormalizationoper": 29, "qembedlayernormalizationoper": 29, "qembedlayernorm": 29, "gatheroper": 30, "qgatheroper": 30, "qgather": 30, "globalaveragepool": 31, "globalaveragepooloper": 31, "qglobalaveragepooloper": 31, "qlinearglobalaveragepool": 31, "gemmoper": 32, "qgemmoper": 32, "qgemm": 32, "lstmoper": 34, "matmuloper": 35, "qmatmuloper": 35, "qlinearmatmul": 35, "maxpooloper": 36, "qmaxpooloper": 36, "qmaxpool": 36, "op_registri": 37, "op_typ": [37, 329], "qop_registri": 37, "padoper": 38, "qpadoper": 38, "qpad": 38, "averagepool": 39, "pooloper": 39, "qpooloper": 39, "qlinearaveragepool": 39, "resizeoper": 40, "qresizeoper": 40, "qresiz": 40, "splitoper": 41, "qsplitoper": 41, "qsplit": 41, "q_config": [42, 251, 533], "static": [42, 46, 149, 155, 165, 176, 252, 312, 328, 515, 533, 562, 566, 569, 574, 575, 576, 577, 580, 586, 598, 601, 604], "quantization_param": 42, "op_types_to_quant": 42, "fallback_list": 42, "fp32": [42, 78, 130, 135, 140, 151, 156, 175, 176, 179, 180, 250, 251, 262, 300, 317, 321, 328, 336, 342, 343, 532, 533, 548, 559, 560, 565, 566, 567, 576, 593, 594, 595, 596, 597, 598, 599, 601, 603, 604], "add_qdq_pair_to_weight": [42, 175, 176, 594], "optypes_to_exclude_output_qu": [42, 175, 176, 594], "dedicated_qdq_pair": [42, 175, 176, 594], "helper": [43, 44, 109, 115, 145, 151, 191, 192, 193, 207, 231, 232, 233, 245, 249, 250, 251, 309, 341, 492], "onnxrt": [43, 191, 193, 200, 208, 231, 233, 240, 246, 262, 300, 341, 401, 402, 417, 419, 426, 479, 533, 567], "dtype_to_nam": 43, "dtype_map": 43, "dtype": [43, 101, 104, 175, 176, 194, 195, 204, 208, 234, 235, 243, 246, 251, 252, 551, 557, 559, 569, 593, 594, 598, 599, 600, 603], "its": [43, 59, 95, 147, 165, 168, 176, 187, 193, 208, 227, 233, 246, 249, 256, 257, 287, 294, 295, 316, 527, 548, 551, 553, 564, 565, 567, 577, 579, 583, 586, 587, 590, 591, 597, 600, 601], "represent": [43, 363, 364, 366, 369, 373, 374, 377, 378, 380, 382, 383, 509, 527, 529, 554, 591, 594], "quanttyp": 43, "repres": [43, 167, 168, 169, 171, 193, 198, 233, 238, 258, 260, 262, 296, 298, 300, 365, 367, 368, 370, 372, 375, 376, 379, 381, 496, 527, 551, 557, 594, 601], "make_quant_nod": 43, "make": [43, 104, 140, 156, 167, 168, 170, 189, 229, 285, 287, 289, 343, 527, 528, 533, 548, 549, 550, 559, 565, 566, 574, 579, 583, 586, 594, 595, 597, 598, 601], "quantizelinear": [43, 557], "make_dquant_nod": 43, "axi": [43, 176], "dequantizelinear": [43, 557], "is_b_transpos": 43, "wheter": 43, "inuput": 43, "b": [43, 73, 191, 231, 251, 551, 565, 591, 598, 601], "transpos": [43, 72, 167, 208, 246, 250, 285, 600], "split_shared_bia": 43, "share": [43, 81, 97, 108, 558, 559, 598, 601], "float_to_float16": 43, "float16": [43, 551], "float_to_bfloat16": 43, "bfloat16": [43, 567, 569, 577, 595], "cast_tensor": 43, "tensorproto": [43, 104], "remove_init_from_model_input": 43, "collate_pr": 43, "result": [43, 145, 147, 151, 204, 208, 243, 246, 255, 258, 259, 260, 262, 293, 296, 297, 298, 300, 312, 319, 342, 346, 364, 378, 396, 527, 530, 532, 548, 550, 553, 555, 562, 564, 565, 566, 574, 575, 586, 587, 588, 591, 592, 594, 597, 598, 599, 600, 601, 602, 604], "quantize_data_with_scale_zero": 43, "qtype": [43, 533], "scheme": [43, 151, 515, 533, 550, 559, 577, 601, 603], "zero_point": [43, 251], "point": [43, 204, 243, 259, 260, 269, 297, 298, 316, 565, 586, 594, 598, 600, 601], "To": [43, 258, 296, 311, 528, 548, 551, 555, 557, 567, 570, 573, 579, 581, 583, 584, 593, 595, 596, 598, 601, 603], "pack": [43, 60], "weight": [43, 59, 60, 121, 140, 147, 149, 156, 162, 166, 167, 168, 169, 175, 176, 251, 285, 287, 319, 328, 343, 403, 533, 548, 554, 557, 559, 561, 565, 566, 588, 591, 593, 594, 598, 599, 601, 603], "comput": [43, 104, 147, 151, 255, 256, 259, 260, 262, 293, 294, 297, 298, 300, 343, 532, 554, 557, 565, 566, 567, 569, 580, 591, 592, 594, 598, 601], "linear": [43, 155, 165, 166, 167, 171, 176, 251, 285, 529, 553, 557, 566, 591, 598, 601], "when": [43, 52, 63, 69, 145, 166, 168, 171, 175, 176, 191, 192, 200, 208, 231, 232, 240, 246, 256, 286, 287, 294, 312, 333, 498, 515, 527, 530, 548, 550, 551, 566, 577, 579, 580, 583, 587, 591, 594, 598, 600, 601], "uint8": [43, 204, 243, 258, 296, 330, 533, 551, 559, 593, 594, 600, 603], "rmin": [43, 594], "rmax": [43, 594], "2": [43, 52, 73, 104, 108, 149, 153, 155, 157, 167, 168, 176, 192, 209, 232, 258, 260, 262, 287, 296, 298, 300, 311, 316, 331, 529, 533, 551, 553, 559, 560, 562, 563, 564, 565, 567, 588, 590, 591, 594, 596, 597, 598, 600, 601, 602], "m": [43, 147, 167, 176, 285, 553, 563, 569, 571, 574, 577, 581, 584, 604], "where": [43, 176, 258, 262, 296, 300, 553, 579, 583, 587, 591, 598, 599], "max": [43, 103, 140, 156, 175, 176, 208, 246, 259, 260, 297, 298, 316, 343, 532, 548, 563, 566, 591, 594, 598, 600, 601], "ab": [43, 162, 168, 287, 594, 598], "np": [43, 208, 246, 316, 555, 600], "sym": [43, 559, 594, 603], "asym": [43, 559, 603], "calculate_scale_zp": 43, "quantize_rang": 43, "calcul": [43, 59, 151, 162, 171, 176, 194, 195, 234, 235, 259, 260, 285, 287, 297, 298, 321, 334, 551, 565, 566, 577, 588, 591, 594, 597, 598, 601, 603], "quantize_data": 43, "add": [43, 51, 63, 108, 118, 145, 171, 175, 176, 191, 193, 215, 231, 233, 286, 328, 356, 396, 498, 528, 529, 548, 550, 551, 555, 557, 559, 565, 566, 567, 581, 584, 597, 599, 601], "necessari": [43, 527, 530, 568, 587, 597, 601], "intermedi": [43, 147, 159, 176, 210, 529, 562, 591, 594], "trasnform": 43, "full": [43, 191, 192, 193, 231, 232, 233, 343, 532, 548, 551, 558, 560, 563, 564, 587, 591], "equat": [43, 260, 262, 298, 300, 594, 598], "r": [43, 140, 156, 548, 563, 587, 590, 594, 604], "": [43, 104, 140, 145, 156, 165, 166, 167, 168, 172, 173, 176, 190, 193, 207, 208, 209, 211, 213, 220, 230, 233, 245, 246, 260, 285, 287, 298, 300, 301, 305, 312, 343, 484, 527, 530, 553, 555, 559, 562, 566, 567, 574, 577, 579, 583, 586, 589, 590, 591, 592, 593, 594, 596, 597, 598, 601, 603], "q": [43, 106, 108, 130, 598], "z": [43, 553, 598], "real": [43, 194, 211, 234, 555, 592, 594], "origin": [43, 151, 165, 168, 171, 176, 191, 208, 209, 231, 246, 271, 272, 274, 275, 276, 286, 287, 317, 330, 343, 346, 528, 551, 574, 591, 594, 600, 601, 603], "quantize_data_per_channel": 43, "per": [43, 149, 155, 157, 176, 209, 338, 533, 548, 590, 595, 604], "channel": [43, 140, 149, 155, 156, 166, 167, 168, 176, 204, 208, 243, 246, 285, 533, 562, 563, 569, 571, 576, 591, 600, 604], "dequantize_data_with_scale_zero": 43, "tensor_valu": 43, "scale_valu": 43, "zo_valu": 43, "dequant": [43, 56, 87, 90, 91, 92, 93, 95, 147, 151, 343, 529, 598, 599], "sacal": 43, "dequantize_data": 43, "valueinfo": 43, "tensor_nam": [43, 145], "new_dtyp": 43, "cast": [43, 56, 557, 595, 600], "info": [43, 151, 167, 171, 206, 211, 216, 251, 285, 305, 340, 343, 486, 498, 514, 529, 548, 557, 568], "quantizedvalu": 43, "new_quantized_nam": 43, "scale_nam": 43, "zero_point_nam": 43, "quantized_value_typ": 43, "quint8": 43, "linearli": 43, "intial": 43, "quantizediniti": 43, "quantized_data": 43, "quantizationmod": 43, "quantizedvaluetyp": 43, "quantformat": [43, 251], "quantize_nparrai": 43, "arr": [43, 343], "low": [43, 179, 180, 194, 195, 234, 235, 253, 263, 290, 301, 533, 549, 551, 555, 566, 567, 592, 594, 598, 601], "high": [43, 194, 195, 234, 235, 551, 563, 592, 601], "numpi": [43, 66, 67, 69, 104, 145, 208, 246, 252, 258, 269, 296, 558, 600], "attribute_to_kwarg": 43, "attribut": [43, 82, 103, 104, 151, 165, 173, 414, 415, 419, 479, 533, 550, 559, 561, 566, 593, 603], "kwarg": [43, 104, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 134, 136, 171, 176, 193, 206, 208, 213, 216, 233, 246, 300, 301, 302, 304, 306, 308, 309, 310, 312, 327, 329, 331, 333, 339, 340, 342, 343, 348, 350, 352, 353, 354, 355, 365, 367, 368, 370, 372, 375, 376, 381, 550], "make_nod": 43, "find_by_nam": 43, "item_list": 43, "find": [43, 66, 67, 69, 104, 145, 262, 269, 300, 316, 343, 514, 533, 548, 572, 579, 583, 586, 587, 591, 597, 599, 601], "item": [43, 171, 173, 176, 207, 245, 286, 328, 396, 484, 555, 598, 601], "get_smooth_scales_per_op": 43, "max_vals_per_channel": 43, "input_tensors_2_weight": 43, "input_tensors_2_weights_nod": 43, "alpha": [43, 155, 162, 169, 594], "same": [43, 82, 145, 166, 168, 176, 191, 208, 231, 246, 258, 296, 343, 533, 549, 550, 551, 553, 555, 559, 566, 570, 574, 579, 583, 590, 591, 593, 594, 598, 599, 600, 601], "one": [43, 108, 109, 114, 151, 166, 167, 168, 170, 208, 218, 246, 255, 258, 262, 264, 285, 288, 289, 293, 296, 300, 530, 533, 548, 553, 554, 555, 559, 560, 562, 563, 565, 566, 567, 569, 570, 574, 575, 577, 579, 580, 583, 586, 587, 588, 589, 591, 593, 594, 596, 598, 600, 601], "mul": [43, 53, 64, 65, 68, 155, 557, 598], "todo": [43, 191, 194, 231, 234, 258, 296, 328], "individu": [43, 167, 285, 527, 598], "save": [43, 104, 171, 176, 193, 220, 233, 250, 251, 291, 309, 312, 333, 334, 339, 343, 529, 533, 550, 561, 566, 567, 568, 570, 574, 579, 583, 589, 591, 594, 598], "paper": [43, 553, 591, 598], "onli": [43, 52, 62, 69, 85, 108, 114, 140, 149, 155, 156, 157, 166, 167, 168, 175, 176, 191, 209, 211, 215, 231, 264, 285, 287, 312, 322, 331, 498, 510, 532, 533, 549, 550, 553, 555, 557, 559, 566, 567, 574, 587, 591, 592, 593, 594, 598, 599, 601, 603], "get_smooth_scales_per_input": 43, "insert_smooth_mul_op_per_input": 43, "shape_info": 43, "insert": [43, 76, 104, 106, 108, 112, 143, 155, 251, 529, 562, 566, 569, 591, 594, 595, 598, 599], "inupt": 43, "shape": [43, 104, 145, 167, 194, 195, 204, 208, 234, 235, 243, 246, 258, 296, 419, 426, 430, 441, 479, 532, 548, 551, 559, 560, 566, 598, 600], "ad": [43, 168, 191, 231, 255, 293, 316, 548, 567, 569, 574, 577, 581, 584, 591, 599], "new_init_tensor": 43, "new_added_mul_nod": 43, "adjust_weights_per_op": 43, "adjust": [43, 577, 594, 598], "ha": [43, 66, 67, 69, 73, 167, 168, 209, 255, 285, 287, 293, 331, 528, 530, 533, 548, 550, 557, 562, 566, 567, 572, 586, 593, 594, 595, 597, 598, 601], "whose": [43, 149, 155, 167, 286, 561, 591, 598, 601], "adjustd": 43, "adjust_weights_per_input": 43, "insert_smooth_mul_op_per_op": 43, "befor": [43, 106, 108, 155, 167, 168, 170, 176, 191, 231, 251, 285, 287, 289, 384, 528, 548, 551, 553, 554, 555, 558, 559, 563, 566, 581, 584, 591, 594, 597, 599, 601], "name_2_nod": 43, "kei": [43, 145, 147, 165, 171, 173, 176, 269, 286, 309, 331, 334, 336, 343, 506, 532, 548, 557, 592, 599, 601], "trt_env_setup": 43, "environ": [43, 157, 209, 292, 446, 478, 479, 487, 527, 548, 549, 579, 583, 586, 601], "variabl": [43, 157, 169, 176, 193, 209, 233, 316, 548, 563, 591, 601], "tensorrt": [43, 594], "provid": [43, 101, 104, 109, 165, 179, 180, 208, 246, 253, 258, 277, 282, 290, 291, 296, 301, 312, 333, 337, 339, 407, 483, 492, 530, 532, 533, 548, 549, 550, 554, 555, 556, 557, 562, 563, 566, 567, 568, 569, 573, 577, 580, 586, 587, 591, 593, 594, 599, 601, 602, 603, 604], "get_ops_recurs": 44, "prefix": [44, 145, 146, 150, 569, 574, 599], "graph_info": 44, "templateadaptor": 44, "tampl": 44, "dictionari": [44, 66, 67, 69, 146, 147, 151, 173, 176, 207, 245, 258, 265, 268, 270, 296, 365, 367, 368, 370, 372, 375, 376, 381, 385, 386, 388], "yaml": [44, 171, 173, 179, 180, 191, 193, 209, 231, 233, 247, 253, 264, 265, 266, 268, 277, 282, 290, 291, 301, 342, 343, 351, 357, 358, 442, 498, 509, 533, 561, 565, 566, 588, 591, 593, 599, 600], "file": [44, 104, 145, 154, 171, 172, 176, 179, 180, 191, 192, 193, 196, 207, 208, 214, 217, 231, 232, 233, 236, 245, 246, 247, 251, 253, 258, 264, 265, 266, 268, 277, 282, 286, 288, 290, 291, 296, 301, 311, 312, 342, 343, 351, 407, 453, 457, 467, 490, 498, 515, 530, 533, 548, 555, 558, 561, 564, 565, 566, 568, 572, 581, 584, 585, 586, 587, 588, 591, 593, 594, 599, 600], "pytorchadaptor": 44, "api": [44, 69, 74, 109, 219, 253, 258, 290, 296, 312, 327, 328, 331, 343, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 514, 515, 528, 529, 534, 536, 540, 543, 546, 557, 562, 566, 571, 575, 576, 577, 596, 597, 601, 605], "pytorch_ipexadaptor": 44, "intel": [44, 167, 212, 215, 248, 254, 261, 262, 285, 288, 292, 299, 300, 320, 326, 478, 525, 527, 528, 530, 531, 533, 550, 551, 552, 553, 554, 556, 557, 559, 560, 564, 567, 568, 569, 574, 576, 577, 588, 589, 590, 591, 592, 594, 595, 596, 599, 601, 602, 603], "extens": [44, 498, 530, 532, 533, 559, 562, 563, 566, 567, 568, 570, 575, 576, 577, 581, 584, 585, 591, 592, 601, 602, 603], "ipex": [44, 151, 175, 176, 562, 566, 571, 575, 576, 604], "pytorch_fxadaptor": 44, "fx": [44, 151, 175, 312, 322, 562, 575, 576, 592, 594, 595, 604], "graph": [44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 116, 129, 131, 135, 138, 139, 140, 142, 143, 144, 145, 165, 190, 230, 251, 253, 292, 302, 309, 419, 441, 452, 453, 458, 459, 477, 479, 502, 514, 529, 533, 551, 553, 555, 561, 565, 568, 569, 594, 595, 599], "pytorchqueri": 44, "querybackendcap": [45, 533], "tensorflowadaptor": 46, "stock": [46, 575], "spr": 46, "tensorflow_itexadaptor": 46, "itex": [46, 108, 175, 176, 250, 594], "tensorflowqueri": [46, 533], "performance_onli": [46, 47, 48, 106, 130, 135, 144, 175, 566], "itex_mod": [46, 47, 88, 106, 130, 135], "quant_mod": [46, 328], "graphconvert": 47, "qt_config": 47, "recip": [47, 165, 175, 176, 251, 253, 290, 557, 566, 601], "int8_sequ": 47, "fp32_op": [47, 49, 106], "bf16_op": [47, 49, 106, 595], "data_load": [47, 48, 533], "fake_qu": [47, 87, 106, 130, 135], "qdq_enabl": 47, "new_api": [47, 48, 70, 71, 76, 78, 91, 98, 130, 135, 140], "use_bf16": [47, 48, 175, 593], "without": [48, 89, 145, 168, 208, 246, 287, 330, 498, 527, 548, 550, 553, 555, 565, 566, 577, 591, 592, 593, 601, 602], "graphconverterwithoutcalib": 48, "recover_config": 48, "rewrit": [49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 105, 106, 107, 108, 220], "bf16convert": [49, 595], "biasadd": [51, 58, 63, 65, 108, 559], "convertaddtobiasaddoptim": 51, "conv2d": [51, 58, 59, 60, 64, 65, 70, 124, 134, 140, 559, 598, 599, 601], "addv2": [51, 68, 559], "layout": 52, "convertlayoutoptim": 52, "optim": [52, 73, 74, 78, 79, 115, 117, 165, 168, 172, 176, 212, 218, 220, 253, 254, 270, 290, 292, 316, 333, 334, 346, 371, 385, 386, 392, 395, 396, 398, 399, 400, 401, 402, 405, 406, 419, 479, 480, 490, 496, 502, 506, 513, 518, 530, 532, 549, 553, 554, 555, 559, 560, 562, 563, 566, 568, 569, 571, 573, 574, 577, 580, 590, 591, 592, 593, 594, 595, 597, 598, 599, 601, 603], "nchw": 52, "nhwc": 52, "It": [52, 167, 179, 180, 217, 260, 262, 269, 285, 290, 298, 300, 301, 312, 317, 321, 333, 533, 548, 553, 566, 572, 575, 580, 586, 587, 591, 594, 597, 601, 603], "4": [52, 157, 167, 176, 200, 203, 204, 208, 240, 243, 246, 255, 256, 258, 293, 294, 296, 331, 527, 533, 548, 549, 555, 556, 559, 562, 563, 565, 566, 574, 590, 591, 598, 600, 601, 604], "abov": [52, 533, 553, 591, 594, 598], "graph_def": [52, 145, 250, 301, 309, 312, 441, 477], "leakyrelu": [53, 598], "convertleakyreluoptim": 53, "below": [53, 65, 73, 175, 176, 291, 528, 529, 532, 533, 548, 550, 553, 555, 561, 565, 569, 571, 579, 580, 583, 586, 588, 589, 591, 593, 594, 597, 598, 599, 601, 602], "subgraph": [53, 65, 104, 150, 557], "maximum": [53, 167, 168, 176, 191, 208, 231, 246, 256, 287, 294, 316, 551, 566, 591, 594, 600], "note": [53, 167, 258, 296, 322, 530, 548, 555, 557, 559, 563, 566, 571, 574, 579, 583, 586, 591, 594, 598, 599, 601, 602, 603], "coeffici": [53, 591], "less": [53, 145, 176, 343, 549, 553, 566, 591], "than": [53, 145, 191, 208, 231, 246, 343, 530, 532, 549, 551, 561, 565, 588, 589, 591, 594, 597, 600], "convers": [53, 176, 264, 533, 566, 567, 594, 595, 598], "valid": [53, 66, 67, 104, 168, 171, 175, 176, 193, 233, 258, 286, 287, 296, 309, 446, 498, 515, 528, 530, 532, 533, 551, 553, 556, 559, 562, 564, 566, 577, 591, 594, 596], "nan": 54, "random": [54, 145, 176, 204, 208, 243, 246, 270, 292, 316, 320, 343, 528, 530, 566, 593, 600, 603], "convertnantorandom": 54, "const": [54, 55, 62, 63, 66, 67, 69, 81, 97, 292, 397, 479, 487], "consist": [54, 62, 528, 529, 548, 557, 598, 601], "placehold": [55, 189, 229], "convertplaceholdertoconst": 55, "train": [55, 79, 149, 155, 158, 166, 168, 176, 179, 180, 191, 193, 208, 218, 231, 233, 246, 247, 264, 287, 292, 312, 336, 506, 530, 532, 533, 538, 551, 553, 554, 557, 562, 567, 569, 575, 586, 589, 591, 592, 597, 598, 601, 603], "rerewrit": 56, "dequantizecastoptim": 56, "b16": 56, "dilat": 57, "contract": 57, "dilatedcontract": 57, "spacetobatchnd": 57, "batchtospacend": 57, "pattern": [57, 58, 60, 77, 95, 106, 107, 108, 130, 135, 151, 161, 163, 165, 166, 168, 169, 172, 176, 193, 233, 254, 275, 276, 278, 283, 287, 292, 328, 403, 514, 533, 551, 559, 562, 566, 587, 589, 593, 598, 604], "inject": [58, 566], "dummi": [58, 165, 194, 195, 234, 235, 252, 262, 300, 532, 548, 551, 560, 565, 566], "injectdummybiasaddoptim": 58, "fusion": [58, 60, 69, 77, 108, 125, 126, 127, 130, 131, 132, 136, 529, 533, 559], "expanddim": 59, "expanddimsoptim": 59, "next": [59, 184, 224, 331, 530, 548, 593, 601], "featch": 60, "reshap": [60, 66, 67, 72, 598], "fetchweightfromreshapeoptim": 60, "handl": [60, 145, 149, 155, 340, 515, 529, 531, 550, 598], "fold": [61, 62, 251, 559], "batchnorm": [61, 66, 120, 529, 598], "foldbatchnormnodesoptim": 61, "graphfoldconstantoptim": 62, "sequenc": [62, 104, 165, 166, 167, 176, 191, 207, 208, 231, 245, 246, 256, 260, 285, 294, 298, 533, 551, 559, 591, 600], "self": [62, 165, 176, 311, 533, 548, 550, 551, 562, 565, 597, 599, 601], "supported_op_typ": 62, "fusebiasaddandaddoptim": 63, "second": [63, 166, 175, 176, 191, 231, 317, 343, 407, 548, 566, 579, 583, 587, 598, 601, 603], "columnwis": 64, "fusecolumnwisemuloptim": 64, "depthwiseconv2dn": [64, 70, 124, 134, 559], "math": [65, 594], "fuseconvwithmathoptim": 65, "elimin": 65, "sub": [65, 165, 209, 251, 530, 598, 601], "realdiv": [65, 68], "decompos": [66, 67], "fusedecomposedbnoptim": 66, "input_graph_def": [66, 67, 69], "node_name_from_input": [66, 67, 69], "node_nam": [66, 67, 69, 145, 251, 309], "strip": [66, 67, 69, 82, 83, 145, 599], "port": [66, 67, 69, 515, 548], "other": [66, 67, 69, 149, 155, 190, 230, 260, 298, 309, 515, 527, 528, 529, 548, 559, 562, 563, 564, 566, 568, 588, 590, 591, 594, 598, 600, 601, 604], "underli": [66, 67, 69], "node_from_map": [66, 67, 69], "node_map": [66, 67, 69], "pull": [66, 67, 69], "def": [66, 67, 69, 179, 180, 312, 331, 333, 529, 533, 550, 551, 553, 554, 555, 565, 566, 594, 598, 599, 601], "entri": [66, 67, 69, 147, 215, 253, 291, 404, 407, 498, 564], "index": [66, 67, 69, 104, 176, 184, 189, 193, 224, 229, 233, 269, 343, 515, 551, 565, 587, 598], "everi": [66, 67, 69, 167, 168, 176, 285, 287, 533, 574, 579, 583, 591, 601], "identifi": [66, 67, 69, 258, 296, 309], "want": [66, 67, 69, 165, 175, 176, 189, 191, 229, 231, 287, 317, 333, 529, 533, 548, 551, 555, 563, 565, 566, 567, 574, 586, 587, 588, 597, 599, 601], "nodedef": [66, 67, 69], "rais": [66, 67, 69, 104, 167, 168, 171, 258, 285, 286, 287, 296, 301, 331, 498, 532, 591, 592], "valueerror": [66, 67, 69, 258, 296, 331, 558], "If": [66, 67, 69, 73, 157, 175, 176, 179, 180, 193, 208, 233, 246, 286, 301, 312, 331, 333, 528, 529, 548, 549, 551, 555, 557, 563, 564, 565, 566, 567, 572, 580, 581, 584, 586, 588, 594, 597, 598, 599, 600, 601], "isn": [66, 67, 69], "present": [66, 67, 69, 165, 548, 592, 598], "values_from_const": [66, 67, 69], "node_def": [66, 67, 69], "extract": [66, 67, 69, 165, 193, 233, 330, 498, 551], "access": [66, 67, 69, 173, 339, 343, 482, 498, 515, 548, 581, 584], "valid_reshape_input": [66, 67], "reshape_in0_ndef": [66, 67], "reshape_in1_ndef": [66, 67], "ar": [66, 67, 104, 167, 168, 176, 191, 208, 231, 246, 258, 262, 269, 285, 286, 287, 291, 296, 300, 313, 315, 316, 331, 336, 342, 343, 498, 527, 528, 529, 530, 532, 533, 548, 550, 551, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 572, 574, 577, 580, 586, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 603], "bypass_reshap": [66, 67], "input_node_map": [66, 67], "input_nam": [66, 67, 101, 139, 176, 250, 251, 557], "get_const_dim_count": [66, 67], "dimens": [66, 67, 104, 183, 208, 223, 246, 551, 553, 591, 600], "instancenorm": [67, 598], "fusedecomposedinoptim": 67, "gelu": [68, 165], "fusegeluoptim": 68, "sqrt": 68, "erf": 68, "samll": 69, "layernorm": [69, 598], "fuselayernormoptim": 69, "remap": 69, "smaller": [69, 208, 246, 553, 566, 591, 600], "case": [69, 73, 157, 176, 190, 207, 208, 209, 230, 245, 246, 253, 277, 282, 290, 311, 498, 548, 550, 553, 554, 555, 559, 561, 565, 570, 574, 586, 587, 588, 591, 592, 594, 596, 600, 602, 603, 604], "fusedbatcnormv3": 69, "And": [69, 529, 549, 566, 572, 598], "further": [69, 176, 527, 567, 568, 569, 571, 580, 586], "restrict": [69, 176, 591, 597], "2d": [69, 598], "3d": [69, 592, 598], "kera": [69, 115, 193, 200, 215, 233, 240, 304, 309, 419, 426, 436, 555, 568, 576, 577, 604], "fusepadwithconv2doptim": 70, "excluded_op_nam": [70, 71, 172, 176, 566, 591], "cfg": [70, 71, 151, 172, 328, 336], "itex_qdq_mod": [70, 71], "conv3d": [70, 124], "fusepadwithfp32conv2doptim": 71, "fusetransposereshapeoptim": 72, "cse": [73, 97], "graphcseoptim": 73, "introduc": [73, 528, 533, 557, 559, 566, 591, 594, 596, 598, 602], "ident": [73, 79, 166, 527, 553], "three": [73, 171, 191, 231, 313, 315, 529, 533, 548, 550, 557, 563, 567, 580, 589, 594, 595, 597, 598, 599], "d": [73, 553, 561, 587, 604], "those": [73, 321, 343, 553, 554, 561, 566, 589, 591, 594, 601], "child": [73, 599], "b1": 73, "c1c2": 73, "d1": [73, 343], "c1": 73, "c2": 73, "memori": [73, 253, 277, 282, 290, 311, 343, 550, 554, 566, 567, 569, 588, 591, 594, 598, 601], "bound": [73, 208, 246, 258, 296, 316, 565, 600], "like": [73, 95, 97, 145, 165, 176, 179, 180, 181, 193, 221, 233, 253, 262, 287, 290, 291, 300, 309, 312, 333, 528, 529, 530, 533, 548, 553, 554, 562, 574, 589, 591, 594, 596, 598, 601], "relu": [73, 77, 108, 529, 559, 598, 599], "relu6": [73, 559], "graphdef": [73, 145, 309, 568], "grappler": [74, 559], "grappleroptim": 74, "input_output_nam": 74, "opt_cfg": 74, "wrapper": [74, 101, 102, 103, 104, 121, 146, 159, 190, 208, 210, 211, 213, 214, 220, 230, 246, 258, 262, 296, 300, 305, 309, 515, 595], "leverag": [74, 530, 532, 553, 557, 569, 586, 589, 594, 601], "built": [74, 177, 178, 182, 187, 191, 192, 197, 199, 201, 202, 204, 205, 208, 213, 215, 222, 225, 227, 231, 232, 237, 239, 241, 242, 243, 244, 246, 291, 300, 303, 311, 312, 333, 530, 533, 551, 555, 566, 579, 583, 588, 594, 600, 601, 603], "convert_add_to_biasadd": [75, 86, 110], "convert_layout": [75, 86, 110], "convert_leakyrelu": [75, 86, 110], "convert_nan_to_random": [75, 86, 110], "convert_placeholder_to_const": [75, 86, 110], "dequantize_cast_optim": [75, 86, 110], "dilated_contract": [75, 86, 110], "dummy_biasadd": [75, 86, 110], "expanddims_optim": [75, 86, 110], "fetch_weight_from_reshap": [75, 86, 110], "fold_batch_norm": [75, 86, 110], "fold_const": [75, 86, 110], "fuse_biasadd_add": [75, 86, 110], "fuse_column_wise_mul": [75, 86, 110], "fuse_conv_with_math": [75, 86, 110], "fuse_decomposed_bn": [75, 86, 110], "fuse_decomposed_in": [75, 86, 110], "fuse_gelu": [75, 86, 110], "fuse_layer_norm": [75, 86, 110], "fuse_pad_with_conv": [75, 86, 110], "fuse_pad_with_fp32_conv": [75, 86, 110], "fuse_reshape_transpos": [75, 86, 110], "graph_cse_optim": [75, 86, 110], "grappler_pass": [75, 86, 110], "insert_print_nod": [75, 86, 110], "move_squeeze_after_relu": [75, 86, 110], "pre_optim": [75, 86, 110], "remove_training_nod": [75, 86, 110], "rename_batch_norm": [75, 86, 110], "split_shared_input": [75, 86, 110], "strip_equivalent_nod": [75, 86, 110, 145], "strip_unused_nod": [75, 86, 110, 145], "switch_optim": [75, 86, 110], "print": [76, 147, 262, 300, 331, 548, 555, 565, 566, 591, 598, 601], "insertprintminmaxnod": 76, "pre_node_nam": 76, "post_node_nam": 76, "pass": [76, 145, 157, 343, 441, 510, 529, 533, 549, 551, 553, 554, 555, 557, 561, 565, 566, 587, 591, 593, 594, 595, 598, 603], "sampl": [76, 175, 176, 184, 189, 191, 192, 193, 204, 208, 224, 229, 231, 232, 233, 243, 246, 262, 269, 300, 316, 430, 530, 532, 551, 556, 562, 587, 594, 600, 601, 603, 604], "move": [77, 529, 593, 596], "squeez": [77, 529], "movesqueezeafterreluoptim": 77, "match": [77, 101, 165, 258, 259, 296, 297, 553, 587], "pre": [78, 115, 165, 179, 180, 191, 231, 301, 312, 333, 551, 553, 554, 566, 567, 574, 591, 592, 594, 599, 601], "entranc": [78, 182], "preoptim": 78, "removetrainingnodesoptim": 79, "protected_nod": 79, "types_to_splic": 79, "checknumer": 79, "stopgradi": 79, "renam": [80, 596], "fusedbatchnorm": 80, "fusedbatchnormv2": 80, "renamebatchnormoptim": 80, "splitsharedinputoptim": 81, "equival": [82, 598], "stripequivalentnodesoptim": 82, "output_node_nam": [82, 83, 130, 131, 135, 145], "unus": [83, 145], "stripunusednodesoptim": 83, "input_node_nam": [83, 130, 135, 145], "switch": [84, 569, 599], "switchoptim": 84, "condit": [84, 191, 192, 193, 208, 231, 232, 233, 246, 313, 315, 551, 564, 600, 601], "graphrewriterbas": 85, "abstract": [85, 158, 208, 246, 247, 253, 290, 427, 439, 490, 514, 533, 561], "freeze_fake_qu": [86, 94, 110], "freeze_valu": [86, 94, 110], "freeze_value_without_calib": [86, 94, 110], "fuse_conv_redundant_dequant": [86, 94, 110], "fuse_conv_requant": [86, 94, 110], "fuse_matmul_redundant_dequant": [86, 94, 110], "fuse_matmul_requant": [86, 94, 110], "meta_op_optim": [86, 94, 110], "post_hostconst_convert": [86, 94, 110], "post_quantized_op_cs": [86, 94, 110], "rnn_convert": [86, 94, 110], "scale_propag": [86, 94, 110], "onnx_graph": [86, 100, 110], "onnx_schema": [86, 100, 110], "tf2onnx_util": [86, 100, 110], "insert_qdq_pattern": [86, 105, 110], "merge_duplicated_qdq": [86, 105, 110], "share_qdq_y_pattern": [86, 105, 110], "freez": [87, 88, 89, 569, 591], "fakequ": 87, "freezefakequantopoptim": 87, "follow": [87, 109, 166, 193, 233, 255, 258, 293, 296, 527, 528, 529, 530, 533, 548, 550, 551, 553, 554, 555, 557, 559, 563, 564, 565, 566, 567, 568, 569, 570, 571, 579, 583, 589, 591, 593, 594, 598, 599, 601], "freezevaluetransform": 88, "max_min_data": [88, 89], "postfix": [88, 89], "tensor_data": [88, 343], "th": [88, 89], "gpu": [88, 89, 96, 175, 176, 532, 549, 562, 566, 567, 571, 577, 586, 593, 594], "freezevaluewithoutcalibtransform": 89, "95": [89, 262, 300, 565, 598, 604], "quantizedconv": [90, 91], "quantizeddeconv": 90, "redund": [90, 92], "fuseconvredundantdequantizetransform": 90, "cpu": [90, 91, 92, 93, 175, 176, 343, 532, 549, 562, 566, 567, 569, 571, 577, 586, 590, 592, 593, 595, 599], "_quantizedconv": 90, "_quantizeddeconv": 90, "successor": [90, 91, 92, 93], "requant": [91, 93, 599], "fuseconvrequantizetransform": 91, "quantizedmatmul": [92, 93], "fusematmulredundantdequantizetransform": 92, "_quantizedmatmul": [92, 93], "fusematmulrequantizedequantizetransform": 93, "quantizedmatmulwithbiasanddequant": 93, "fusematmulrequantizetransform": 93, "fusematmulrequantizedequantizenewapitransform": 93, "fusematmulrequantizenewapitransform": 93, "newapi": 93, "meta": [95, 592], "metainfochangingmemopoptim": 95, "metaop": 95, "With": [95, 311, 529, 532, 533, 550, 566, 574, 579, 583, 587, 588, 591, 592, 597, 598, 601, 604], "chang": [95, 140, 149, 156, 168, 170, 176, 287, 289, 319, 343, 358, 467, 489, 528, 550, 555, 558, 564, 565, 566, 569, 579, 580, 583, 586, 591, 599, 600, 601], "better": [95, 176, 179, 180, 269, 301, 312, 333, 554, 565, 567, 591, 592, 594, 597, 601], "perform": [95, 157, 169, 175, 176, 191, 203, 204, 209, 231, 243, 253, 277, 282, 290, 311, 317, 321, 490, 501, 529, 530, 533, 548, 549, 550, 551, 552, 554, 556, 557, 562, 563, 565, 566, 567, 568, 569, 571, 575, 577, 580, 586, 588, 589, 590, 591, 592, 593, 594, 595, 598, 599, 601, 603, 604], "post": [96, 97, 149, 155, 168, 176, 179, 180, 251, 312, 527, 532, 533, 554, 555, 562, 563, 569, 575, 586, 591, 592, 598, 599, 601], "hostconst": 96, "posthostconstconvert": 96, "postcseoptim": 97, "duplic": [97, 107, 316], "quantizev2": 97, "decreas": [97, 591], "size": [97, 167, 183, 184, 190, 193, 199, 204, 208, 223, 224, 230, 233, 239, 243, 246, 285, 311, 343, 498, 527, 548, 550, 551, 555, 558, 566, 586, 587, 588, 591, 598, 600, 603, 604], "rnn": 98, "quantizedrnnconvert": 98, "calibration_data": [98, 106], "rnn_detail": 98, "scalepropagationtransform": 99, "direct": [99, 167, 285, 448, 591], "export": [100, 176, 254, 258, 292, 296, 498, 532, 560, 572, 587, 599, 602], "onnxgraph": 101, "output_shap": 101, "opset": [101, 103, 104, 176, 250, 251], "extra_opset": 101, "output_nam": [101, 139, 176, 250, 251, 557], "is_subgraph": 101, "graph_nam": 101, "manipul": [101, 102], "onnxnod": 102, "skip_convers": 102, "schema": 103, "onnxopschema": 103, "domain": [103, 104, 175, 176, 371, 395, 419, 426, 479, 480, 482, 498, 510, 515, 548, 591, 601], "since_vers": 103, "get_schema": 103, "max_inclusive_opset_vers": 103, "within": [103, 168, 253, 258, 290, 296, 309, 527, 529, 567, 579, 583, 586, 592, 598], "get_max_supported_opset_vers": 103, "packag": [103, 351, 359, 365, 367, 368, 370, 371, 372, 375, 376, 379, 381, 390, 395, 400, 401, 405, 408, 414, 416, 419, 420, 426, 445, 447, 452, 455, 458, 459, 461, 464, 470, 475, 479, 513, 533, 548, 558, 563, 586, 587, 592, 596, 601], "set_nam": 104, "find_opset": 104, "assert_error": 104, "bool_val": 104, "error_msg": 104, "error": [104, 147, 262, 300, 321, 340, 482, 565, 570, 598, 601], "messag": [104, 143, 498, 510, 515, 601], "map_numpy_to_onnx_dtyp": 104, "np_dtype": 104, "map_onnx_to_numpy_typ": 104, "onnx_typ": 104, "add_port_to_nam": 104, "nr": 104, "get_tensorflow_node_attr": 104, "pars": [104, 151, 191, 192, 204, 208, 231, 232, 243, 246, 345, 356, 449, 453, 457, 462, 465, 471, 490, 498, 506, 600], "get_tensorflow_tensor_shap": 104, "get_tensorflow_node_shape_attr": 104, "attr": [104, 145, 165], "map_tensorflow_dtyp": 104, "get_tensorflow_tensor_data": 104, "convert_tensorflow_tensor_to_onnx": 104, "read_tensorflow_node_attr": 104, "read": [104, 145, 196, 208, 236, 246, 286, 551, 595, 597], "infer_onnx_shape_dtyp": 104, "opset_vers": [104, 139, 176, 250, 251, 557], "input_shap": [104, 195, 235, 550, 551], "input_dtyp": 104, "sometim": [104, 529, 591, 594], "so": [104, 208, 246, 529, 533, 558, 562, 565, 572, 574, 594, 595, 598, 599, 600, 602], "make_onnx_shap": 104, "seqtyp": 104, "tensor_dtyp": 104, "around": 104, "signifi": 104, "make_onnx_inputs_output": 104, "elem_typ": 104, "text": [104, 207, 208, 245, 246, 255, 260, 288, 293, 298, 557, 564, 575, 591, 592, 598, 600, 604], "datatyp": [104, 151, 595, 601], "save_protobuf": 104, "path": [104, 145, 165, 171, 172, 191, 192, 193, 208, 231, 232, 233, 246, 247, 250, 251, 253, 264, 265, 266, 268, 277, 282, 286, 288, 290, 291, 301, 309, 312, 328, 333, 343, 407, 424, 427, 430, 432, 435, 438, 439, 440, 467, 498, 529, 530, 533, 548, 550, 551, 555, 561, 565, 566, 567, 568, 572, 575, 586, 589, 600, 603], "as_text": 104, "protobuf": 104, "is_onnx_domain": 104, "is_list_or_tupl": 104, "are_shapes_equ": 104, "src": [104, 587], "dest": 104, "equal": [104, 140, 145, 156, 331, 343, 565, 591], "get_subgraphs_from_onnx": 104, "model_proto": 104, "over": [104, 193, 233, 262, 300, 556, 560, 562, 565, 577, 586, 593, 598, 601], "df": 104, "initialize_name_count": 104, "avoid": [104, 191, 231, 529, 599], "conflict": [104, 558], "counter": 104, "make_nam": 104, "get_index_from_strided_slice_of_shap": 104, "outputs_to_valu": 104, "stride": [104, 208, 246, 600], "slice": 104, "compute_const_folding_using_tf": 104, "g": [104, 167, 176, 553, 556, 560, 569, 574, 591, 596, 598, 601], "const_node_valu": 104, "graph_output": 104, "constant": [104, 251, 292, 316, 320, 326, 337, 480, 550, 559, 600], "tf": [104, 115, 145, 190, 191, 192, 193, 208, 230, 231, 232, 233, 246, 307, 309, 346, 548, 555, 568, 592, 595, 600], "generategraphwithqdqpattern": 106, "op_wise_config": [106, 130, 135], "quantized_nod": 106, "dq": [106, 108, 130, 598], "pair": [106, 175, 176, 550, 566, 567], "merg": [107, 183, 223, 328, 581, 584, 599, 601], "mergeduplicatedqdqoptim": 107, "y": [108, 176, 208, 246, 316, 558, 572, 598, 600], "shareqdqforitexypatternoptim": 108, "enabl": [108, 147, 168, 175, 176, 287, 486, 548, 555, 563, 567, 569, 571, 574, 575, 577, 590, 591, 592, 601], "break": [108, 555, 566], "graphanalyz": 109, "extend_engin": 109, "analyz": [109, 165, 309, 591, 597, 598, 599], "under": [109, 176, 193, 233, 342, 530, 548, 551, 564, 565, 566, 569, 574, 575, 586, 589, 591, 598, 599, 601], "singleton": [109, 292, 343, 479, 487], "specifi": [109, 157, 175, 176, 179, 180, 208, 209, 246, 253, 258, 262, 265, 268, 277, 282, 290, 291, 296, 300, 301, 312, 331, 333, 342, 343, 360, 397, 449, 494, 498, 515, 548, 555, 559, 565, 566, 574, 588, 593, 600, 601, 603], "graphrewriterhelp": 109, "encapsul": [109, 179, 180, 301, 312, 333, 568], "quantize_lay": [110, 111, 113], "fake_quant": [110, 111, 113], "quantize_config": [110, 111, 113], "quantize_help": [110, 111, 113], "quantize_wrapp": [110, 111, 113], "fuse_qdq_bn": [110, 111, 129], "fuse_qdq_concatv2": [110, 111, 129], "fuse_qdq_conv": [110, 111, 129], "fuse_qdq_deconv": [110, 111, 129], "fuse_qdq_in": [110, 111, 129], "fuse_qdq_matmul": [110, 111, 129], "fuse_qdq_pool": [110, 111, 129], "optimize_qdq": [110, 111, 129], "optimize_lay": [111, 113, 116], "quantize_layer_add": [111, 113, 116], "quantize_layer_bas": [111, 113, 116], "quantize_layer_bn": [111, 113, 116], "fake": [112, 149, 155, 566, 594, 598], "fakequantizebas": 112, "abc": [112, 260, 298, 533, 599, 601], "appli": [112, 125, 126, 127, 130, 132, 136, 158, 168, 218, 256, 294, 527, 548, 566, 569, 571, 577, 586, 589, 591, 594, 595, 597, 598, 601, 602, 603], "fakequant": 112, "per_channel": [112, 559, 594, 603], "num_bit": [112, 151, 598], "8": [112, 176, 207, 245, 529, 559, 563, 591, 592, 598, 601, 604], "channel_axi": [112, 153, 156], "symmetr": [112, 594, 600, 601], "narrow_rang": 112, "quantizeconfig": [114, 115], "custom": [114, 157, 291, 311, 342, 549, 553, 554, 569, 591, 597], "There": [114, 291, 313, 315, 548, 553, 559, 562, 565, 566, 567, 569, 598, 601, 603], "instanc": [114, 115, 157, 176, 179, 180, 209, 259, 260, 262, 265, 268, 271, 272, 274, 275, 276, 297, 298, 300, 301, 312, 316, 330, 333, 527, 529, 533, 548, 549, 566, 571, 577, 603, 604], "global": [114, 167, 176, 271, 272, 274, 275, 276, 285, 343, 529, 566, 591, 593, 601], "class": [115, 151, 269, 301, 312, 421, 422, 529, 530, 550, 551, 553, 565, 566, 577, 588, 589, 594, 596, 599, 601, 603], "init_quantize_config": 115, "quantize_recip": 115, "begin": [115, 168, 287, 553, 554, 566, 591, 601], "process": [115, 147, 167, 168, 170, 171, 176, 179, 180, 191, 192, 193, 204, 208, 209, 231, 232, 233, 243, 246, 251, 285, 287, 289, 292, 301, 312, 313, 315, 316, 333, 342, 343, 359, 442, 443, 446, 479, 487, 491, 530, 533, 548, 550, 551, 553, 554, 555, 557, 566, 570, 589, 591, 594, 598, 599, 600, 603], "model_nam": [115, 498], "special": [115, 165, 311, 529, 550, 565, 566, 588, 591, 602], "decid": [115, 175, 176, 256, 287, 294, 407, 533, 566, 594, 596, 601], "qat_clone_funct": 115, "leav": [115, 580], "quantizewrapp": [115, 121], "wrapped_lay": 115, "config_quantizable_lay": 117, "quantizelayeradd": 118, "quantizelay": 119, "quantizelayerbas": 119, "quantizelayerbatchnorm": 120, "quantizewrapperbas": 121, "fusedbatchnormv3": [122, 132], "fusenodestartwithfusedbatchnormv3": [122, 132], "_quantizedfusedbatchnorm": 122, "concatv2": [123, 133, 144, 559], "fusenodestartwithconcatv2": [123, 133], "quantizedconcatv2": [123, 133], "fusenodestartwithconv2d": [124, 134], "conv2dbackpropinput": 125, "conv3dbackpropinputv2": 125, "fusenodestartwithdeconv2d": 125, "fusedinstancenorm": 126, "fusenodestartwithfusedinstancenorm": 126, "batchmatmul": 127, "batchmatmulv2": 127, "fusenodestartwithmatmul": [127, 136], "avgpool": [128, 137, 559], "fusenodestartwithpool": [128, 137], "optimizeqdqgraph": 130, "input_graph": [130, 135, 140, 345, 453, 457, 462, 465, 472, 533], "op_wise_sequ": [130, 135], "quantizegraph": 131, "quantizegraphbas": 131, "quantizenodebas": 131, "quantizegraphforintel": 135, "common": [138, 176, 206, 254, 264, 268, 269, 270, 292, 336, 491, 492, 498, 527, 551, 554, 555, 557, 561, 563, 566, 594, 598], "herlper": 138, "quantizegraphhelp": 138, "sever": [138, 170, 208, 246, 289, 530, 548, 553, 554, 562, 566, 567, 579, 583, 591, 593, 598, 600, 601, 603], "staticmethod": 138, "function": [138, 149, 176, 179, 180, 192, 232, 265, 268, 277, 282, 529, 530, 533, 548, 549, 550, 553, 554, 561, 562, 563, 565, 566, 567, 577, 587, 591, 594, 597, 598, 599, 601, 602], "tensorflowqdqtoonnxqdqconvert": 139, "shape_overrid": 139, "inputs_as_nchw": [139, 250], "default_opset_vers": 139, "bia": [140, 175, 176, 251, 599], "correct": [140, 156, 171, 175, 176, 258, 259, 260, 262, 286, 296, 297, 298, 300, 527, 548, 569], "biascorrect": 140, "fp32_graph": 140, "method": [140, 151, 169, 176, 184, 189, 190, 191, 193, 200, 208, 211, 224, 229, 230, 231, 233, 240, 246, 268, 269, 270, 328, 336, 337, 339, 340, 492, 510, 529, 530, 532, 551, 553, 554, 565, 566, 589, 591, 594, 595, 598, 600, 601], "weight_empir": 140, "Will": [140, 553, 562], "our": [140, 176, 530, 532, 557, 566, 587, 591, 597, 602], "task": [140, 191, 198, 231, 238, 262, 300, 551, 553, 554, 557, 562, 565, 566, 591, 598], "close": [140, 156], "w_int8": [140, 156], "u": [140, 156, 532, 569], "w_fp32": [140, 156], "varianc": [140, 156], "ratio": [140, 156, 167, 168, 171, 176, 204, 208, 243, 246, 287, 551, 566, 591, 600, 604], "differ": [140, 152, 156, 159, 165, 166, 175, 176, 184, 193, 208, 210, 224, 233, 246, 253, 262, 268, 270, 279, 290, 300, 311, 338, 527, 529, 530, 548, 550, 551, 553, 555, 556, 557, 561, 562, 565, 566, 568, 579, 583, 588, 591, 594, 598, 599, 600, 601], "wise": [140, 156, 175, 176, 316, 317, 321, 498, 548, 562, 591, 599, 601, 603], "minim": [140, 156, 316, 553, 556, 565, 566, 579, 583, 591, 594, 601], "round": [140, 156, 594, 598], "scale_c": [140, 156], "shift": [140, 156, 204, 243, 587, 600], "notic": [140, 156, 209, 564, 596], "can": [140, 147, 149, 156, 165, 166, 167, 168, 170, 175, 176, 179, 180, 190, 193, 208, 209, 211, 230, 233, 246, 258, 260, 262, 285, 287, 289, 296, 298, 300, 301, 311, 312, 333, 449, 498, 529, 530, 532, 533, 548, 549, 550, 551, 553, 554, 555, 557, 559, 562, 563, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 577, 579, 580, 581, 583, 584, 586, 587, 588, 589, 590, 591, 593, 594, 595, 597, 598, 599, 600, 601, 603, 604], "first": [140, 156, 166, 173, 175, 176, 191, 231, 258, 296, 317, 328, 407, 529, 530, 533, 548, 551, 557, 563, 567, 571, 580, 581, 584, 587, 593, 594, 595, 597, 598, 599, 601, 603], "empir": [140, 156], "solut": [140, 156, 532, 533, 558, 571, 575, 580, 592, 598, 601], "min": [140, 156, 343, 548, 591, 594, 598, 600, 601], "graphtransform": 141, "graphtransformbas": 141, "input_pb": [141, 143, 144], "log": [143, 340, 346, 449, 489, 490, 529, 548, 577, 597, 599, 601], "insertlog": 143, "node_name_list": 143, "show_nam": 143, "show_op": 143, "first_n": 143, "summar": [143, 553], "1024": [143, 193, 233, 572], "dump_fp32": 143, "rerang": 144, "rerangequantizedconcat": 144, "rerange_quant": 144, "version1_lt_version2": [145, 343], "version1": [145, 343], "version2": [145, 343], "version1_gt_version2": [145, 343], "greater": [145, 343], "version1_eq_version2": [145, 343], "version1_gte_version2": [145, 343], "version1_lte_version2": [145, 343], "disable_random": 145, "seed": [145, 176, 270, 343, 566, 603], "disabl": [145, 175, 176, 486, 515, 527, 586, 595], "read_graph": 145, "in_graph": 145, "in_graph_is_binari": 145, "write_graph": 145, "out_graph_def": 145, "out_graph_fil": 145, "write": [145, 200, 240, 343, 555, 561, 566, 569, 599], "is_ckpt_format": 145, "model_path": [145, 428, 498], "ckpt": [145, 301, 309, 312, 604], "folder": [145, 193, 198, 233, 238, 301, 312, 342, 551, 574, 579, 583, 599], "is_saved_model_format": 145, "saved_model": [145, 264, 419, 426, 436], "get_estimator_graph": 145, "estim": [145, 262, 300, 309, 601], "input_fn": [145, 309], "get_tensor_by_nam": 145, "try_cnt": 145, "3": [145, 168, 176, 193, 208, 233, 246, 258, 296, 331, 529, 530, 532, 548, 550, 551, 553, 555, 557, 559, 560, 563, 565, 566, 567, 569, 573, 577, 579, 583, 588, 591, 593, 597, 598, 600, 601, 604], "consid": [145, 262, 300, 527, 553, 587, 601], "import": [145, 157, 176, 264, 301, 311, 312, 331, 333, 343, 529, 530, 532, 549, 550, 551, 553, 554, 555, 557, 560, 565, 566, 567, 568, 569, 573, 575, 588, 589, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601], "scope": [145, 566], "more": [145, 149, 155, 167, 208, 246, 285, 530, 531, 532, 548, 551, 553, 555, 560, 562, 563, 565, 566, 567, 569, 577, 581, 584, 588, 589, 591, 595, 598, 601, 602, 604], "onc": [145, 170, 215, 289, 313, 315, 548, 550, 586, 591, 592, 601, 604], "both": [145, 176, 527, 530, 533, 554, 563, 566, 570, 591, 593, 594, 598, 601], "compat": [145, 309, 555, 568, 581, 584, 586, 596], "suffix": 145, "time": [145, 175, 176, 208, 246, 262, 300, 311, 316, 343, 484, 555, 558, 566, 574, 576, 579, 583, 586, 587, 588, 591, 592, 594, 597, 599, 600, 601], "got": [145, 558, 599], "iterator_sess_run": 145, "sess": [145, 309], "iter_op": 145, "feed_dict": [145, 190, 230], "output_tensor": [145, 309], "measur": [145, 209, 301, 338, 530, 533, 549, 553, 565, 566, 599, 601], "integr": [145, 159, 210, 533, 548, 566, 587], "makeiter": 145, "feed": [145, 190, 230, 553, 591], "end": [145, 168, 176, 191, 207, 208, 231, 245, 246, 287, 313, 315, 533, 553, 554, 559, 563, 566, 580, 588, 591, 599, 600, 601], "predict": [145, 208, 213, 246, 255, 259, 260, 262, 293, 297, 298, 300, 530, 553, 565, 577, 598, 599, 600], "pred": [145, 262, 300, 565], "collate_tf_pr": 145, "collat": [145, 151], "tbe": 145, "get_input_output_node_nam": 145, "fix_ref_type_of_graph_def": 145, "fix": [145, 168, 191, 231, 287, 528, 551, 573, 591, 598, 601], "strip_unused_lib": 145, "offici": [145, 255, 259, 260, 293, 297, 298, 527, 548, 565, 598], "r1": 145, "15": [145, 559, 604], "branch": [145, 548], "get_graph_def": 145, "auto_input_output": 145, "get_model_input_shap": 145, "inout": 145, "get_tensor_val_from_graph_nod": 145, "graph_node_name_map": 145, "val": [145, 171, 193, 196, 233, 236, 286, 566], "tensor_v": 145, "int8_node_name_revers": 145, "revers": [145, 548], "tf_diagnosis_help": 145, "fp32_model": [145, 147, 151, 251, 343, 533], "quan_model": 145, "save_path": [145, 250, 251, 533, 568], "diagnosi": [145, 292, 387, 396, 419, 479, 508, 514, 566], "generate_feed_dict": 145, "input_tensor": [145, 309], "torch": [146, 147, 148, 150, 151, 155, 165, 166, 167, 172, 175, 176, 220, 251, 301, 312, 342, 529, 532, 534, 553, 555, 557, 566, 567, 568, 569, 574, 577, 594, 598, 599], "bf16modulewrapp": 146, "bf16modul": 146, "mix": [146, 175, 176, 301, 314, 328, 455, 456, 457, 504, 532, 533, 538, 562, 569, 575, 576, 577, 602], "precis": [146, 175, 176, 179, 180, 253, 260, 262, 263, 290, 298, 300, 301, 311, 314, 317, 328, 371, 385, 386, 395, 419, 453, 455, 456, 457, 480, 504, 532, 533, 538, 548, 549, 554, 555, 559, 562, 569, 575, 576, 577, 592, 593, 594, 598, 601, 602], "mixed_precision_model": 146, "bf16_symbolic_trac": 146, "fx_sub_module_list": 146, "trace": [146, 147, 150, 151, 165, 175, 176, 251, 312, 319, 529, 576, 601], "_description_": 146, "hessian": [147, 319, 601], "awar": [147, 158, 176, 218, 264, 285, 319, 333, 533, 554, 555, 557, 562, 567, 586, 589, 601], "node_collector": 147, "hook": [147, 158, 217, 218, 277, 282, 336, 553, 554, 566, 591, 598, 599], "record": [147, 151, 159, 191, 192, 193, 199, 210, 217, 231, 232, 233, 239, 551, 597, 599, 601], "hessiantrac": 147, "q_model": [147, 176, 264, 312, 529, 532, 550, 551, 555, 557, 560, 561, 565, 566, 568, 594, 595], "criterion": [147, 158, 160, 161, 162, 167, 168, 176, 212, 215, 254, 292, 466, 506, 553, 554, 557, 566, 591, 594, 601, 603], "pleas": [147, 149, 155, 162, 167, 168, 175, 176, 191, 192, 193, 196, 231, 232, 233, 236, 285, 287, 288, 331, 529, 530, 531, 532, 533, 548, 549, 551, 554, 555, 563, 565, 567, 569, 570, 574, 577, 591, 594, 595, 596, 597, 598, 602], "refer": [147, 149, 155, 162, 167, 168, 171, 175, 176, 191, 231, 255, 256, 262, 285, 287, 288, 293, 294, 300, 331, 529, 533, 549, 550, 551, 554, 555, 561, 563, 564, 565, 566, 567, 569, 574, 577, 588, 593, 596, 600, 601], "yao": 147, "zhewei": 147, "et": [147, 598], "al": [147, 598], "pyhessian": 147, "network": [147, 162, 167, 287, 319, 530, 548, 553, 554, 557, 566, 590, 592, 594, 598, 601], "through": [147, 179, 180, 301, 312, 532, 549, 559, 561, 562, 565, 572, 588, 589, 591, 593, 594, 598], "len": [147, 176, 208, 246, 551, 555, 600], "2020": 147, "ieee": [147, 567, 598], "intern": [147, 328, 482, 550, 551, 591], "confer": [147, 591, 598], "big": 147, "dong": 147, "zhen": 147, "hawq": [147, 319, 601], "v2": [147, 319, 555, 563, 575, 596, 601, 604], "advanc": [147, 175, 176, 507, 527, 532, 538, 594, 603], "system": [147, 157, 209, 343, 486, 513, 514, 549, 572, 591], "33": [147, 604], "18518": 147, "18529": 147, "openvinotoolkit": 147, "nncf": 147, "develop": [147, 311, 498, 528, 529, 563, 566, 567, 569, 575, 586, 592, 595, 597], "hessian_trac": 147, "compare_weight": 147, "float_dict": 147, "ani": [147, 258, 260, 296, 298, 327, 331, 345, 346, 348, 350, 352, 353, 354, 355, 356, 357, 358, 360, 385, 386, 407, 409, 415, 424, 441, 444, 446, 449, 453, 457, 459, 462, 465, 468, 471, 477, 484, 486, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 514, 515, 527, 528, 532, 548, 550, 555, 569, 574, 587, 597], "quantized_dict": 147, "compar": [147, 262, 300, 548, 554, 565, 594, 597, 599, 601], "being": [147, 258, 296, 415], "two": [147, 157, 166, 167, 168, 170, 193, 198, 209, 233, 238, 258, 285, 289, 291, 296, 322, 343, 529, 530, 548, 551, 553, 555, 557, 559, 565, 566, 567, 591, 594, 595, 597, 601, 603], "wt_compare_dict": 147, "float_model": 147, "state_dict": [147, 555, 599], "qmodel": 147, "compute_error": 147, "state": [147, 166, 572, 591], "weight_dict": 147, "hawq_top": 147, "enable_act": 147, "modul": [148, 267, 273, 283, 284, 487, 495, 503, 529, 548, 550, 553, 557, 562, 565, 566, 568, 591, 593, 595, 599, 602], "torchsmoothqu": [149, 598], "traced_model": [149, 150], "detail": [149, 155, 165, 208, 246, 380, 382, 403, 466, 471, 485, 498, 527, 528, 532, 553, 559, 560, 561, 565, 566, 567, 569, 577, 586, 591, 596, 597, 599, 601, 602, 604], "smoothquant": [149, 155, 532, 592, 602], "accur": [149, 155, 598], "effici": [149, 155, 530, 550, 553, 569, 589, 592, 598, 601], "larg": [149, 155, 532, 550, 553, 566, 591, 592, 598, 604], "languag": [149, 155, 255, 293, 527, 532, 557, 591, 592, 598], "spiq": [149, 155, 598], "free": [149, 155, 166, 168, 179, 180, 312, 527, 532, 565, 575, 580, 588, 597, 598], "could": [149, 155, 167, 179, 180, 193, 233, 291, 301, 312, 333, 527, 529, 554, 566, 589, 591, 594, 598, 602], "absorb": [149, 155], "later": [149, 155, 599], "inplac": 149, "mean": [149, 167, 175, 176, 204, 208, 243, 246, 260, 262, 285, 298, 300, 321, 529, 550, 555, 559, 565, 566, 572, 591, 594, 598, 600, 601, 603], "you": [149, 175, 176, 189, 191, 229, 231, 287, 528, 529, 548, 551, 555, 557, 563, 564, 565, 569, 571, 572, 574, 579, 583, 586, 587, 591, 594, 596, 597, 598, 599, 602], "recov": [149, 343, 533, 554, 598], "graphtrac": 149, "trace_and_fuse_sub_graph": 150, "is_qat": 150, "get_embedding_contigu": 151, "nn": [151, 165, 166, 176, 220, 251, 301, 312, 342, 529, 553, 557, 566, 568, 598, 599], "embed": 151, "contigu": [151, 591], "is_fused_modul": 151, "_propagate_qconfig_help": 151, "detect": [151, 165, 175, 176, 258, 262, 296, 300, 305, 498, 529, 548, 569, 576, 577, 591], "collate_torch_pr": 151, "fetch": [151, 154, 184, 224, 551], "collate_result": 151, "input2tupl": 151, "append_attr": 151, "fx_model": 151, "fx_white_list": 151, "append": [151, 291, 316, 529, 554, 566, 589], "graphmodul": [151, 529, 595], "addit": [151, 176, 333, 548, 553, 580, 596], "dir": [151, 191, 231, 342, 551, 558, 561], "generate_activation_observ": 151, "observ": [151, 597, 599, 601], "what": [151, 168, 189, 229, 333, 527, 548], "check_cfg_and_qconfig": 151, "op_infos_from_cfg": 151, "output_tensor_ids_op_nam": 151, "paser_cfg": 151, "ops_nam": 151, "get_quantizable_ops_from_cfg": 151, "input_tensor_ids_op_nam": 151, "auto_copi": 151, "fetch_modul": 151, "op_nam": [151, 172, 176, 329, 403, 404, 566, 591, 599], "set_modul": 151, "new_modul": 151, "simple_infer": 151, "get_example_input": 151, "dataset": [151, 179, 180, 181, 183, 184, 188, 189, 190, 202, 211, 221, 223, 224, 228, 229, 230, 242, 254, 258, 259, 260, 262, 291, 292, 296, 297, 298, 300, 301, 312, 333, 336, 371, 385, 395, 396, 407, 419, 498, 500, 530, 532, 533, 550, 555, 560, 565, 566, 574, 591, 594, 596, 598, 601, 603, 604], "example_inp": 151, "get_fallback_ord": 151, "confidence_batch": [151, 601], "fallback": [151, 319, 321, 322, 567, 595, 601], "requantize_cfg": 151, "fall": 151, "back": [151, 208, 214, 246, 586], "order": [151, 255, 256, 291, 293, 294, 316, 321, 328, 330, 529, 565, 591, 593, 598, 599, 601], "confid": 151, "ordered_op": 151, "get_mse_order_per_fp32": 151, "mse": [151, 176, 262, 292, 300, 320, 404, 548, 565, 593, 596], "influenc": [151, 591], "last": [151, 162, 175, 176, 548, 567, 569, 571, 576, 580, 594, 598], "quant": [151, 175, 176, 328, 529, 566, 594], "fallback_ord": 151, "get_mse_order_per_int8": 151, "example_input": [151, 175, 176, 251, 557], "get_torch_vers": 151, "match_datatype_pattern": 151, "calculate_quant_min_max": 151, "unsign": [151, 330], "qmin": 151, "qmax": 151, "algorithm_registri": 152, "algorithm_typ": 152, "locat": [152, 208, 246, 555, 572, 579, 583, 586, 594, 596, 600, 603], "registr": [152, 193, 200, 208, 233, 240, 246, 280], "algorithmschedul": 152, "conf": [152, 157, 158, 176, 179, 180, 209, 264, 271, 272, 274, 275, 276, 277, 282, 301, 311, 312, 313, 316, 317, 321, 324, 328, 331, 333, 509, 529, 530, 532, 549, 553, 560, 561, 566, 567, 568, 589, 594, 595, 597, 601], "control": [152, 176, 390, 395, 529, 548, 566, 591, 601], "phase": [152, 530, 566, 591, 594, 595, 601], "fastbiascorrect": [153, 156], "fast_bias_correct": [154, 175, 176, 292, 594], "smooth_quant": [154, 175, 176, 292, 594, 598], "weight_correct": [154, 175, 176, 292, 594], "5": [155, 159, 176, 195, 204, 210, 235, 243, 262, 300, 533, 548, 551, 559, 565, 566, 590, 591, 593, 594, 598, 600, 601, 603, 604], "For": [155, 165, 166, 167, 176, 193, 208, 233, 246, 259, 260, 262, 285, 288, 297, 298, 300, 301, 312, 527, 529, 531, 533, 548, 553, 554, 555, 557, 559, 562, 569, 571, 572, 574, 577, 591, 595, 598, 599, 601, 603, 604], "kernel": [155, 176, 486, 533, 590, 591, 601], "futur": [155, 179, 180, 211, 562, 566, 577, 602], "weightcorrect": 156, "1e": [156, 598, 603], "05": [156, 176, 262, 300, 565, 598, 604], "evalu": [157, 158, 167, 175, 179, 180, 191, 209, 231, 247, 255, 258, 259, 260, 262, 264, 293, 296, 297, 298, 300, 301, 311, 312, 333, 336, 479, 487, 503, 530, 533, 550, 551, 553, 554, 561, 562, 565, 566, 567, 569, 575, 577, 580, 586, 588, 591, 594, 597, 599, 601, 603], "set_env_var": [157, 209], "env_var": [157, 209], "overwrite_exist": [157, 209], "env": [157, 209, 558], "alreadi": [157, 193, 207, 209, 233, 245, 484, 533, 548, 551, 562, 581, 584, 601], "param": [157, 181, 209, 215, 221, 262, 300, 316, 397, 498, 533, 568, 601], "set_all_env_var": [157, 209], "physic": [157, 209, 527, 549], "core": [157, 176, 209, 548, 549, 564, 579, 583, 590, 604], "get_architectur": [157, 209], "architectur": [157, 209, 265, 268, 532, 548, 549, 553, 566, 591, 592, 602], "get_threads_per_cor": [157, 209], "thread": [157, 176, 209, 514, 548, 550, 590], "get_thread": [157, 209], "get_physical_id": [157, 209], "socket": [157, 209, 486, 515, 590, 604], "get_core_id": [157, 209], "get_bounded_thread": [157, 209], "core_id": [157, 209], "bind": [157, 209], "fit": [157, 167, 176, 301, 312, 316, 331, 333, 529, 532, 549, 550, 551, 555, 560, 561, 565, 566, 567, 568, 591, 594, 595], "b_dataload": [157, 176, 549, 566], "b_func": [157, 549], "benchmarkconfig": [157, 176, 549, 566], "accuraci": [157, 175, 176, 179, 180, 247, 253, 262, 277, 282, 290, 300, 301, 311, 312, 317, 331, 333, 466, 490, 501, 529, 532, 548, 550, 551, 554, 555, 556, 557, 565, 566, 567, 577, 586, 588, 589, 591, 592, 593, 596, 597, 598, 599, 603, 604], "goal": [157, 247, 253, 277, 282, 290, 301, 312, 550, 589, 594, 601], "prefer": [157, 253, 290, 301, 312, 591], "space": [157, 168, 175, 176, 179, 180, 253, 260, 265, 268, 269, 270, 290, 298, 301, 312, 316, 321, 328, 498, 527, 528, 530, 533, 591, 594, 603], "etc": [157, 158, 207, 245, 247, 253, 260, 277, 282, 290, 298, 301, 312, 342, 553, 562, 591, 597, 601], "user": [157, 165, 168, 171, 175, 176, 179, 180, 193, 196, 200, 208, 209, 215, 220, 233, 236, 240, 246, 253, 277, 282, 288, 290, 291, 301, 311, 312, 317, 333, 343, 482, 529, 530, 533, 538, 549, 553, 554, 557, 559, 562, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 577, 580, 586, 588, 589, 591, 592, 594, 595, 596, 598, 599, 600, 601, 605], "cores_per_inst": [157, 176, 549, 566, 593], "num_of_inst": [157, 176, 549, 566, 593], "7": [157, 175, 176, 311, 549, 558, 559, 563, 566, 591, 594, 596, 598, 601, 604], "pb": [157, 176, 301, 309, 312, 435, 438, 449, 532, 549, 555, 560, 566, 568, 599, 604], "eval_dataload": [157, 176, 179, 180, 291, 301, 312, 313, 316, 317, 321, 324, 333, 532, 549, 560, 561, 566, 594, 601], "compon": [158, 247, 254, 291, 292, 479, 514, 529, 555, 563, 564, 569, 586, 589, 590], "quantizationawaretrainingcallback": [158, 333], "pruningcallback": [158, 333], "distillationcallback": 158, "basecallback": 158, "design": [158, 190, 213, 218, 230, 300, 317, 530, 532, 566, 574, 577, 591, 594, 602], "mainli": [158, 170, 218, 289, 566, 591, 594], "prune": [158, 162, 163, 166, 167, 168, 169, 170, 171, 176, 218, 219, 254, 271, 272, 274, 275, 276, 280, 282, 283, 285, 286, 287, 289, 291, 292, 343, 354, 361, 380, 419, 454, 479, 487, 498, 503, 532, 555, 556, 559, 560, 562, 589, 592, 602, 603], "distil": [158, 161, 176, 210, 217, 218, 254, 292, 532, 556, 560, 562, 589, 602, 603], "deriv": [158, 162, 167, 168, 169, 170, 247, 285, 287, 289], "pipelin": [158, 247, 265, 266, 291, 554, 566, 589], "knowledg": [158, 159, 176, 210, 247, 554, 556, 560, 562, 566, 568, 603], "transfer": [158, 198, 238, 247, 551, 553, 554, 566, 598], "teacher": [158, 176, 247, 553, 554, 566, 604], "student": [158, 176, 191, 217, 231, 247, 551, 553, 554, 604], "distillation_conf": [158, 172, 247], "_epoch_ran": [158, 247], "integ": [158, 167, 168, 176, 247, 258, 262, 269, 285, 287, 296, 300, 331, 533, 594, 598, 601], "indic": [158, 165, 176, 184, 189, 191, 224, 229, 231, 247, 258, 269, 296, 529, 548, 558, 599], "how": [158, 162, 167, 168, 176, 208, 246, 247, 285, 528, 529, 531, 533, 548, 550, 551, 553, 554, 555, 561, 566, 580, 581, 584, 585, 586, 591, 594, 598, 600, 601, 602, 603], "much": [158, 162, 176, 208, 246, 247, 553, 580, 591, 598, 600], "epoch": [158, 168, 247, 287, 333, 553, 554, 555, 566, 589, 591, 603], "ran": [158, 247], "eval_frequ": [158, 247], "frequenc": [158, 168, 176, 247, 287, 566, 590, 591, 603], "term": [158, 168, 169, 247, 528, 553, 564, 565, 588, 589, 601], "best_scor": [158, 247], "best": [158, 208, 246, 247, 253, 290, 321, 527, 530, 563, 569, 575, 586, 588, 594, 600, 601], "metric": [158, 176, 179, 180, 212, 247, 253, 254, 269, 277, 282, 290, 291, 292, 301, 312, 333, 336, 371, 395, 419, 479, 487, 495, 498, 501, 530, 533, 548, 550, 551, 555, 566, 567, 594, 597, 599, 601, 602, 603, 604], "best_model": [158, 247], "found": [158, 247, 482, 498, 515, 532, 548, 553, 567, 574, 598, 601, 604], "critet": [159, 210], "includ": [159, 162, 165, 167, 169, 176, 191, 193, 200, 208, 210, 231, 233, 240, 246, 253, 263, 285, 290, 331, 527, 528, 533, 548, 551, 563, 564, 565, 566, 567, 569, 572, 575, 580, 591, 594, 595, 599, 601], "tensorflowknowledgedistillationloss": [159, 210], "pytorchknowledgedistillationloss": [159, 210, 566], "pytorchintermediatelayersknowledgedistillationloss": [159, 210], "tensorflowcriterion": [159, 210], "pytorchcriterion": [159, 210], "criterion_registri": [159, 210], "criterion_typ": [159, 210], "registry_criterion": [159, 210], "knowledgedistillationframework": [159, 210], "student_model": [159, 176, 210, 566], "teacher_model": [159, 176, 210, 553, 554, 566], "knowledgedistillationloss": [159, 210, 566, 603], "temperatur": [159, 176, 210, 566, 603], "loss_typ": [159, 176, 210, 566, 603], "ce": [159, 176, 210, 566, 603], "loss_weight": [159, 176, 210, 566, 603], "pytorchknowledgedistillationlosswrapp": [159, 210], "param_dict": [159, 210, 215], "tensorflowknowledgedistillationlosswrapp": [159, 210], "tensorflowknowledgedistillationlossextern": [159, 210], "intermediatelayersknowledgedistillationloss": [159, 210, 506], "layer_map": [159, 176, 210, 553], "add_origin_loss": [159, 176, 210], "pytorch": [159, 165, 167, 175, 190, 191, 193, 196, 200, 208, 210, 215, 217, 230, 231, 233, 236, 240, 246, 251, 252, 253, 262, 263, 283, 285, 288, 290, 292, 300, 301, 310, 312, 322, 337, 343, 346, 419, 426, 449, 459, 479, 529, 530, 532, 533, 550, 553, 554, 556, 557, 559, 562, 563, 566, 568, 569, 571, 574, 575, 576, 577, 586, 591, 592, 593, 596, 601, 603], "loss": [159, 176, 210, 253, 262, 277, 282, 290, 300, 333, 553, 554, 555, 556, 565, 566, 567, 577, 589, 591, 594, 598, 601, 603], "pytorchintermediatelayersknowledgedistillationlosswrapp": [159, 210], "selfknowledgedistillationloss": [159, 210, 506], "selfknowledg": [159, 210], "pytorchselfknowledgedistillationloss": [159, 210], "pytorchselfknowledgedistillationlosswrapp": [159, 210], "pruner": [161, 254, 271, 272, 273, 274, 275, 277, 282, 283, 285, 288, 292, 509, 566, 591, 603], "model_slim": [161, 163, 168], "pattern_analyz": [161, 163, 164], "weight_slim": [161, 163, 164], "criteria": [161, 163, 176, 253, 277, 282, 285, 287, 290, 529, 586, 598], "reg": [161, 163, 168], "schedul": [161, 163, 168, 169, 176, 254, 283, 287, 292, 566, 589], "callback": [161, 277, 282, 333, 336, 514, 529, 566, 589, 591, 594], "register_criterion": 162, "registri": [162, 167, 168, 169, 170, 285, 287, 289, 530], "get_criterion": 162, "pruningcriterion": 162, "about": [162, 485, 486, 492, 527, 548, 550, 566, 595, 601, 602, 604], "module_nam": [162, 168, 169, 287, 343, 498], "store": [162, 165, 168, 169, 176, 193, 233, 280, 287, 561], "score": [162, 167, 168, 176, 255, 256, 258, 259, 260, 262, 287, 293, 294, 296, 297, 298, 300, 319, 336, 529, 565, 588, 591, 597, 601], "magnitudecriterion": 162, "magnitud": [162, 176, 254, 262, 273, 292, 300, 562, 591], "criterion_class": 162, "determin": [162, 167, 168, 176, 338, 527, 529, 591, 594, 598], "gradientcriterion": 162, "gradient": [162, 271, 562, 566, 591, 604], "absolut": [162, 176, 262, 300, 565, 566, 590, 591, 594, 601], "snipcriterion": 162, "snip": [162, 176, 287, 562, 591, 604], "product": [162, 562, 567, 569, 570, 586, 590, 592, 594, 597, 601], "singl": [162, 170, 176, 184, 191, 208, 224, 231, 246, 258, 287, 289, 296, 379, 396, 415, 529, 551, 563, 591], "shot": [162, 168, 170, 218, 287, 289, 530, 562, 566, 591, 592], "sensit": [162, 271, 287, 562, 591], "arxiv": [162, 168, 287, 591, 598], "org": [162, 168, 258, 287, 296, 528, 529, 548, 563, 581, 584], "1810": [162, 287], "02340": [162, 287], "snipmomentumcriterion": 162, "snip_momentum": [162, 176, 566, 591], "momentum": [162, 287, 562, 566, 591, 603], "mechan": [162, 597, 602], "preserv": 162, "step": [162, 167, 168, 170, 176, 285, 287, 289, 333, 548, 553, 554, 555, 566, 581, 584, 586, 589, 591, 593, 595, 597, 598, 599, 601], "beta": 162, "snipmomentumblockcriterion": 162, "snip_momentum_block": 162, "retrainfreecriterion": 162, "retrain_fre": [162, 168], "slim": [164, 168, 171, 258, 296, 307, 309, 568, 591], "get_attribut": 165, "multi": [165, 171, 258, 296, 356, 530, 550, 551, 562, 566, 588, 594, 601], "level": [165, 317, 331, 340, 489, 527, 598, 601], "descent": 165, "recipesearch": 165, "searcher": [165, 270], "search": [165, 168, 172, 179, 180, 253, 255, 265, 268, 269, 270, 290, 293, 316, 385, 386, 532, 548, 560, 562, 565, 569, 570, 580, 592, 599, 601, 602], "root": [165, 191, 192, 193, 196, 231, 232, 233, 236, 262, 300, 515, 550, 551, 555, 565, 566, 603], "levelwis": 165, "wai": [165, 192, 193, 196, 232, 233, 236, 498, 530, 548, 550, 551, 565, 566, 569, 572, 587, 589, 591, 594, 598, 601, 603], "huggingfac": [165, 166, 191, 231, 339, 551, 556, 560, 574, 575, 576, 577, 598], "bert": [165, 176, 187, 190, 191, 208, 227, 230, 231, 246, 532, 551, 553, 565, 574, 600, 604], "obtain": [165, 168, 169, 171, 286, 529, 557, 591, 597, 598, 601], "recipe_sampl": 165, "bertattent": 165, "dens": [165, 170, 176, 289, 591, 604], "infom": [165, 211, 251], "basic": [165, 167, 175, 176, 207, 245, 265, 285, 292, 320, 324, 327, 333, 562, 563, 566, 593, 597], "searching_result": 165, "jitbasicsearch": 165, "jit": [165, 175, 569, 571, 576, 598, 599], "some": [165, 168, 176, 191, 231, 286, 498, 548, 551, 563, 565, 566, 567, 588, 591, 594, 595, 598, 599, 601], "them": [165, 191, 231, 529, 550, 557, 559, 561, 589, 591, 601], "automat": [165, 166, 168, 175, 176, 193, 196, 203, 204, 233, 236, 243, 253, 263, 290, 529, 532, 548, 549, 551, 562, 566, 567, 569, 571, 574, 575, 577, 579, 580, 581, 583, 584, 586, 589, 591, 594, 598, 600, 601], "static_graph": 165, "flatten_static_graph": 165, "target_lay": 165, "pathsearch": 165, "target_pattern": 165, "structur": [165, 166, 168, 176, 287, 329, 423, 562, 585, 587, 591, 594, 599, 602, 604], "link": [165, 176, 191, 231, 548, 551, 579, 583, 586, 604], "target_path": 165, "target_op": 165, "target_op_lut": 165, "lookup": 165, "tabl": [165, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 385, 386, 604], "code": [165, 179, 180, 209, 264, 288, 291, 312, 333, 408, 426, 529, 532, 533, 548, 550, 551, 553, 554, 555, 561, 562, 564, 565, 569, 571, 573, 574, 575, 577, 580, 586, 588, 589, 591, 592, 593, 594, 597, 598, 599, 600], "current_pattern": 165, "statu": [165, 494, 510, 527, 550, 588], "linear2linearsearch": 165, "consecut": [165, 166, 171], "selfmhasearch": 165, "head": [165, 166, 171, 591], "squeezer": 166, "postcompressionutil": 166, "librari": [166, 212, 254, 292, 525, 528, 532, 563, 566, 571, 580, 586, 592, 594], "relat": [166, 169, 247, 258, 277, 282, 285, 296, 336, 426, 429, 431, 436, 516, 519, 520, 521, 524, 569, 591, 603], "linearcompress": 166, "layer_1": 166, "layer_2": 166, "also": [166, 190, 193, 208, 230, 233, 246, 255, 293, 311, 312, 528, 530, 532, 533, 548, 550, 556, 560, 562, 565, 566, 569, 574, 579, 580, 583, 586, 587, 588, 591, 592, 594, 595, 598, 601], "while": [166, 168, 287, 316, 533, 548, 551, 556, 562, 567, 569, 574, 586, 593, 594, 598], "hidden": [166, 167, 285, 498, 533, 591], "act_fn": 166, "linearcompressioniter": 166, "linear_pattern": 166, "mhacompress": 166, "mha": 166, "head_num": 166, "head_siz": 166, "test": [166, 176, 208, 246, 528, 532, 548, 563, 604], "progress": [166, 193, 233, 580, 586, 591, 594], "register_pattern": [167, 285], "sure": [167, 168, 170, 285, 287, 289, 548, 549], "get_pattern": [167, 285], "assertionerror": [167, 168, 171, 285, 286, 287, 301], "basepattern": [167, 169], "unit": [167, 285, 498, 528], "e": [167, 176, 515, 527, 553, 556, 560, 569, 574, 575, 579, 583, 591, 598, 601], "4x1": [167, 176, 281, 566, 591, 604], "is_glob": [167, 285], "local": [167, 176, 285, 343, 358, 390, 395, 408, 428, 548, 579, 583, 591, 597], "contrast": [167, 285, 600], "keep_mask_lay": 167, "invalid_lay": 167, "max_sparsity_ratio_per_op": [167, 168, 172, 176, 566, 591], "sparsiti": [167, 168, 170, 171, 176, 287, 289, 343, 532, 551, 562, 566, 602, 604], "reach": [167, 170, 176, 289, 528, 532, 550, 591, 601], "min_sparsity_ratio_per_op": [167, 172, 176, 566, 591], "minimum": [167, 176, 566, 577, 591, 601], "target_spars": [167, 172, 176, 566, 591, 593, 603], "patternnxm": [167, 285], "nxm": [167, 168, 176, 281, 285, 591], "kept": [167, 285], "block_siz": [167, 285], "height": [167, 204, 208, 243, 246, 285, 555, 591, 600, 603], "width": [167, 204, 208, 243, 246, 285, 555, 591, 594, 600, 603], "vertic": [167, 208, 246, 285, 600], "becaus": [167, 208, 246, 285, 529, 591, 594, 598, 600, 601], "patternninm": [167, 285], "n": [167, 176, 192, 208, 232, 246, 256, 285, 294, 331, 486, 551, 553, 591, 594, 598, 600], "out": [167, 176, 191, 192, 193, 231, 232, 233, 253, 285, 290, 528, 529, 532, 551, 569, 574, 579, 580, 581, 583, 584, 586, 591, 593, 594], "continu": [167, 258, 285, 296, 530, 566, 587, 591], "doc": [167, 175, 176, 285, 327, 328, 331, 343, 565, 566, 581, 584], "md": [167, 175, 176, 285, 555, 594], "element": [167, 171, 189, 229, 258, 285, 296, 343, 551, 562, 565, 591, 598], "register_prun": [168, 287], "parse_valid_pruner_typ": 168, "get_prun": [168, 287], "cuurent": [168, 287], "round_multipli": 168, "spars": [168, 287, 551, 592], "model_slim_ffn2": 168, "part": [168, 285, 287, 529, 563, 567, 581, 584, 591, 598, 602], "perman": [168, 527, 591], "acceler": [168, 553, 566, 569, 577, 586, 591, 592, 595, 598, 601], "directli": [168, 176, 190, 230, 258, 262, 286, 296, 300, 557, 565, 566, 573, 591, 593, 594, 599], "sprase": 168, "multipl": [168, 176, 177, 178, 182, 183, 191, 192, 194, 195, 196, 197, 198, 202, 205, 208, 215, 222, 223, 225, 231, 232, 234, 235, 236, 237, 238, 242, 244, 246, 263, 301, 302, 303, 305, 311, 549, 551, 557, 566, 589, 591, 597, 598, 601], "model_slim_mha": 168, "baseprun": 168, "current_sparsity_ratio": [168, 287], "global_step": [168, 287], "total": [168, 208, 246, 262, 287, 300, 551, 591, 600], "start_step": [168, 172, 176, 287, 566, 591, 593], "trigger": [168, 287, 528], "end_step": [168, 172, 176, 287, 566, 591, 593], "pruning_frequ": [168, 172, 176, 566, 591], "target_sparsity_ratio": [168, 287], "show": [168, 343, 527, 548, 553, 555, 566, 572, 587, 591, 598, 601, 602], "final": [168, 287, 566, 572, 588, 591, 594, 596, 601], "basicprun": 168, "arrang": [168, 192, 193, 196, 232, 233, 236, 551, 591], "proce": 168, "regul": 168, "patternlockprun": [168, 275, 287], "parent": [168, 170, 281, 287, 289, 599], "blockmaskprun": 168, "grad": 168, "retrainfreeprun": 168, "pruner_class": 168, "rearrang": 168, "fast": [168, 175, 176, 532, 592], "retrain": [168, 554, 591], "effect": [168, 532, 533, 591, 592], "2204": 168, "09656": 168, "progressiveprun": 168, "interpol": [168, 208, 246, 565, 591, 600], "fine": [168, 191, 231, 551, 572, 591, 592, 594], "grain": [168, 592, 601], "improv": [168, 528, 532, 566, 569, 586, 587, 591, 592, 594, 595, 601, 604], "interv": [168, 591], "regular": [169, 255, 286, 293], "register_reg": 169, "regulariz": 169, "get_reg_typ": 169, "get_reg": 169, "basereg": 169, "grouplasso": 169, "coeff": 169, "group": [169, 272, 415, 562, 591, 599, 600, 601, 604], "lasso": [169, 272, 562, 591], "select": [169, 176, 191, 231, 529, 530, 548, 562, 563, 586, 591, 594, 599, 601], "reg_term": 169, "coeffient": 169, "register_schedul": [170, 289], "get_schedul": [170, 289], "pruningschedul": 170, "gradual": [170, 289, 591], "oneshotschedul": [170, 289], "iterativeschedul": [170, 289], "get_sparsity_ratio": 171, "elementwise_over_matmul_gemm_conv": 171, "elementwise_over_al": 171, "blockwise_over_matmul_gemm_conv": 171, "check_config": [171, 286], "prune_config": [171, 286], "everyth": [171, 286, 574], "reset_none_to_default": 171, "undefin": [171, 286], "update_param": 171, "process_weight_config": 171, "global_config": [171, 271, 272, 274, 275, 276], "local_config": [171, 176, 271, 272, 274, 275, 276], "default_config": 171, "pruners_info": 171, "process_yaml_config": 171, "check_key_valid": 171, "template_config": 171, "user_config": 171, "process_and_check_config": [171, 286], "process_config": [171, 286], "parse_to_prun": [171, 286], "keep": [171, 286, 317, 529, 533, 585, 586, 596], "generate_pruner_config": 171, "dotdict": [171, 172, 311], "parse_auto_slim_config": 171, "ffn2_sparsiti": 171, "mha_spars": 171, "generate_ffn2_pruning_config": 171, "generate_mha_pruning_config": 171, "prunerv2": 172, "pruning_typ": [172, 176, 566, 591], "pruning_scop": [172, 176, 566, 591], "sparsity_decay_typ": [172, 176, 566, 591], "pruning_op_typ": [172, 176, 566, 591], "reg_typ": 172, "criterion_reduce_typ": 172, "resume_from_pruned_checkpoint": 172, "similiar": 172, "cfg_fname": 172, "parser": [172, 292, 356, 361, 479, 487, 517], "quantization_conf": 172, "pruning_conf": 172, "graph_optimization_conf": [172, 253], "mixedprecision_conf": 172, "benchmark_conf": 172, "nasconfig": [172, 266, 268, 530], "approach": [172, 175, 176, 265, 266, 268, 506, 529, 530, 532, 550, 551, 553, 562, 566, 574, 586, 592, 593, 601, 603], "search_spac": [172, 265, 268, 269, 270], "search_algorithm": [172, 254, 267, 292, 530], "na": [172, 254, 292, 305, 562], "procedur": [172, 530], "deep_get": [173, 311], "dot": [173, 498, 567, 594], "nest": 173, "eg": [173, 193, 233, 551, 593], "person": [173, 527, 592], "john": 173, "deep": [173, 532, 533, 550, 562, 563, 566, 567, 569, 571, 574, 575, 577, 580, 586, 592, 594, 601, 602, 604], "deep_set": [173, 311], "sex": [173, 527], "male": 173, "instead": [173, 190, 230, 343, 572, 574, 577, 591], "notat": 173, "quantizationconfig": 175, "post_training_static_qu": [175, 550, 551, 566, 593, 601], "calibration_sampling_s": [175, 176, 566], "op_type_dict": [175, 176, 593, 594, 601], "op_name_dict": [175, 176, 566, 594, 601], "strategy_kwarg": [175, 176, 597, 601], "timeout": [175, 176, 566, 593, 601, 603], "max_trial": [175, 176, 566, 601], "quant_level": [175, 176, 601], "auto": [175, 176, 292, 314, 320, 343, 529, 569, 572, 574, 576, 577, 591, 594], "accuracy_criterion": [175, 176, 311, 566, 588, 593, 601, 603], "use_distributed_tun": [175, 176, 601], "posttrainingquantconfig": [175, 176, 312, 529, 532, 550, 560, 566, 568, 594, 595, 597, 601], "quantizationawaretrainingconfig": [175, 176, 333, 529, 554, 566, 594, 595, 601], "requir": [175, 176, 291, 309, 345, 347, 359, 414, 420, 445, 452, 453, 454, 455, 457, 458, 459, 461, 464, 465, 470, 475, 479, 529, 533, 548, 549, 550, 554, 555, 559, 566, 567, 568, 570, 580, 586, 590, 591, 594, 596, 597, 599, 601, 603], "onnxrt_trt_ep": [175, 176, 594], "onnxrt_cuda_ep": [175, 176, 567, 594], "cv": [175, 176, 591], "object_detect": [175, 176, 258, 296], "nlp": [175, 176, 288, 574, 591, 594], "recommendation_system": [175, 176], "adaptor": [175, 176, 330, 336, 532, 562, 595, 596, 598, 599, 602], "explicitli": [175, 176, 561], "overrid": [175, 176, 343], "quantiztaion": [175, 176], "smooth_quant_arg": [175, 176, 594], "gemm_to_matmul": [175, 176, 594], "graph_optimization_level": [175, 176, 593, 594], "disable_al": [175, 176, 593], "enable_bas": [175, 176], "enable_extend": [175, 176], "enable_al": [175, 176], "first_conv_or_matmul_quant": [175, 176, 594], "last_conv_or_matmul_quant": [175, 176, 594], "pre_post_process_quant": [175, 176, 594], "preprocess": [175, 176, 191, 208, 231, 246, 336, 555, 600], "postprocess": [175, 176, 202, 205, 208, 212, 246, 254, 292, 336, 501, 533, 566, 599, 600], "vaild": [175, 176], "dedic": [175, 176], "quant_format": [175, 176, 251, 557], "constraint": [175, 176, 253, 290, 566, 597, 601, 603], "reduc": [175, 176, 533, 554, 566, 567, 586, 587, 592, 594, 595, 598, 601, 603], "layer1": [175, 176, 566, 591, 594], "conv1": [175, 176, 594, 603], "tuning_strategi": [175, 176], "guarante": [175, 176, 566], "models": [175, 176, 311, 566, 588, 593], "footprint": [175, 176, 253, 277, 282, 290, 311, 554, 566, 588, 591, 593], "earli": [175, 176, 566, 594, 601, 603], "stop": [175, 176, 566, 601, 602, 603], "field": [175, 176, 193, 233, 258, 296, 529, 533, 548, 555, 566, 597, 601, 603], "exit": [175, 176, 313, 315, 548, 566, 567, 603], "bit": [175, 176, 554, 567, 592, 594, 598], "excluded_precis": [175, 176, 595], "exclud": [175, 176, 533, 567, 595], "empti": [175, 176, 572], "conserv": [175, 176, 292, 320], "random_se": [176, 316, 333, 566, 603], "1978": 176, "workspac": [176, 333, 342, 343, 424, 497, 508, 568], "default_workspac": 176, "resume_from": [176, 343], "tensorboard": [176, 333, 336, 343, 533, 566], "set_random_se": [176, 343], "set_workspac": [176, 343], "set_resume_from": [176, 343], "set_tensorboard": [176, 343], "directori": [176, 192, 193, 232, 233, 309, 339, 342, 343, 407, 498, 551, 555, 558, 579, 581, 583, 584, 599], "histori": [176, 342, 343, 383, 396, 449, 467, 517, 586, 601], "nc_workspac": 176, "datetim": 176, "now": [176, 208, 246, 529, 530, 551, 555, 577, 593, 600, 601], "strftime": 176, "d_": 176, "h": [176, 208, 246, 555, 600], "resum": [176, 179, 180, 313, 324, 333], "wa": [176, 533, 548, 566, 592, 601], "flag": [176, 256, 294, 333], "visual": [176, 532, 577, 586, 597, 599, 601, 602], "displai": [176, 327, 328, 343, 414, 586], "workspace_path": [176, 483, 498], "warmup": [176, 549, 566, 593], "inter_num_of_thread": [176, 566, 593], "intra_num_of_thread": [176, 566, 593], "benchmark": [176, 211, 254, 291, 292, 311, 343, 364, 371, 384, 395, 396, 419, 479, 480, 490, 496, 513, 518, 532, 538, 568, 569, 573, 577, 580, 586, 601, 602, 603, 604], "inter": [176, 189, 193, 229, 233], "intra": 176, "accuracycriterion": [176, 466, 566, 601], "higher_is_bett": [176, 565, 601, 603], "rel": [176, 311, 566, 593, 601, 603, 604], "tolerable_loss": [176, 566, 601], "01": [176, 566, 590, 593, 601, 603, 604], "higher": [176, 179, 180, 269, 301, 312, 333, 529, 553, 557, 565, 591, 594, 597], "tuningcriterion": [176, 566, 588, 597, 601], "optin": 176, "tuning_criterion": [176, 566, 588, 597, 601], "dynam": [176, 181, 221, 251, 328, 351, 533, 550, 553, 562, 566, 569, 574, 575, 576, 577, 580, 586, 592, 601, 604], "ptq": [176, 312, 529, 555, 562, 566, 594, 598, 599, 601], "tri": [176, 601], "meet": [176, 291, 313, 315, 529, 557, 588, 592, 593, 594, 599, 601], "bayesian": [176, 270, 292, 320, 530, 593], "mse_v2": [176, 292, 320], "hawq_v2": [176, 292, 320], "exhaust": [176, 270, 292, 320, 593], "docstr": [176, 331], "copi": [176, 286, 343], "deepcopi": 176, "model_origin": [176, 312, 595], "qat_op_name_dict": 176, "compression_manag": [176, 333, 529, 553, 554, 566, 589, 591, 594], "prepare_compress": [176, 333, 529, 553, 554, 566, 589, 591, 594], "weightpruningconfig": [176, 220, 566, 589, 591], "pruning_config": [176, 566, 591], "9": [176, 529, 563, 566, 591, 593, 598, 601, 603], "98": [176, 566, 591, 593, 604], "exp": [176, 566, 591], "90": [176, 603, 604], "magnitude_progress": 176, "snip_progress": 176, "snip_momentum_progress": [176, 591], "pattern_lock": [176, 254, 273, 292], "most": [176, 262, 300, 548, 566, 567, 591, 594, 598, 601], "feasibl": 176, "situat": [176, 555], "unstructur": [176, 281, 562, 591, 604], "8x1": 176, "channelx1": [176, 591], "1xchannel": [176, 591], "itrex": 176, "start": [176, 208, 246, 258, 296, 317, 563, 600, 601, 602, 605], "togeth": [176, 208, 246, 553, 563, 573, 592, 599, 600], "sort": [176, 321, 407, 601], "sinc": [176, 253, 255, 277, 282, 290, 293, 553, 557, 563, 565, 580, 586, 589], "lead": [176, 498, 553, 566, 567, 591, 598], "increas": [176, 552, 562, 569, 586, 601], "cube": [176, 591], "6": [176, 532, 548, 559, 591, 594, 598, 601, 604], "update_config": 176, "10": [176, 193, 233, 316, 532, 548, 549, 551, 563, 566, 591, 593, 600, 601, 604], "knowledgedistillationlossconfig": [176, 553, 554, 566, 589], "hyperparamet": [176, 597, 598, 601], "entropi": [176, 601], "length": [176, 191, 208, 231, 246, 258, 296, 532, 551, 565, 592, 594, 600], "groundtruth": [176, 258, 296], "label": [176, 179, 180, 191, 193, 194, 195, 196, 199, 204, 208, 213, 231, 233, 234, 235, 236, 239, 243, 246, 255, 257, 262, 293, 295, 300, 301, 312, 333, 415, 529, 550, 551, 565, 566, 594, 600], "tpye": 176, "sum": [176, 262, 300, 553], "distillationconfig": [176, 333, 553, 554, 566, 589], "criterion_conf": 176, "d_conf": [176, 554, 566, 589], "intermediatelayersknowledgedistillationlossconfig": [176, 553], "relationship": 176, "student_layer_nam": 176, "student_layer_output_process": 176, "teacher_layer_nam": 176, "teacher_layer_output_process": 176, "desir": [176, 204, 208, 243, 246, 600], "either": [176, 258, 296, 570, 574, 589, 593, 594], "serv": [176, 309, 515], "numer": [176, 262, 300, 567, 592, 594], "abbrevi": 176, "layer_nam": 176, "l1": 176, "selfknowledgedistillationlossconfig": [176, 553, 566], "student1_layer_name1": 176, "teacher_layer_name1": 176, "student2_layer_name1": 176, "student1_layer_name2": 176, "teacher_layer_name2": 176, "student2_layer_name2": 176, "soft": 176, "l2": [176, 591], "hard": [176, 550], "resblock": 176, "featur": [176, 191, 192, 204, 208, 231, 232, 243, 246, 528, 532, 549, 550, 552, 553, 566, 567, 568, 569, 573, 574, 577, 586, 591, 592, 596, 600], "deepst": 176, "fc": 176, "02": [176, 598, 604], "crossentropyloss": [176, 210, 553, 566], "sgd": [176, 215, 553, 566, 593, 603], "lr": [176, 553, 555, 566], "learning_r": [176, 566, 593, 603], "callabl": [176, 260, 298, 333, 494, 498, 514, 515], "altern": [176, 312], "distil_loss": [176, 566], "mixedprecisionconfig": [176, 301, 331, 566, 567], "mixedprecis": [176, 263, 456, 504, 566], "fp16": [176, 328, 567, 594], "won": [176, 594], "work": [176, 253, 290, 531, 550, 553, 581, 584, 591, 595, 596, 598, 599], "mix_precis": [176, 292, 331, 566, 567], "converted_model": [176, 301, 566, 567], "exportconfig": 176, "dynamic_ax": [176, 251, 557], "qlinear": [176, 193, 200, 233, 240, 262, 300, 533, 557, 576, 604], "ax": [176, 251], "onnxqlinear2qdqconfig": 176, "onnxqlinear2qdq": 176, "new_model": 176, "torch2onnxconfig": [176, 557], "qdq_op_fp32_bia": [176, 251, 557], "torch2onnx": [176, 248, 254, 292], "qdq_op_int32_bia": [176, 251, 557], "qdq_op_fp32_bias_qdq": [176, 251, 557], "resnet50": [176, 532, 555, 560, 569, 573, 591, 594, 597, 604], "int8_onnx_config": [176, 557], "randn": [176, 557], "224": [176, 204, 243, 532, 550, 551, 555, 557, 560, 566, 569, 600, 603, 604], "batch_siz": [176, 181, 183, 189, 190, 191, 192, 211, 221, 223, 229, 230, 231, 232, 251, 530, 550, 551, 555, 557, 561, 566, 569, 594], "tf2onnxconfig": 176, "tf2onnx": [176, 248, 254, 292], "keyword": 176, "argument": [176, 331, 345, 453, 457, 462, 465, 471, 530], "output_graph": [176, 453, 457, 462, 465], "sigopt": [177, 178, 292, 592], "tpe": [177, 178, 292], "sigopttunestrategi": 179, "q_dataload": [179, 180, 313, 316, 317, 321, 324, 561, 601], "q_func": [179, 180, 313, 316, 317, 321, 324, 533, 566, 601], "eval_func": [179, 180, 291, 301, 312, 313, 316, 317, 321, 324, 331, 333, 529, 550, 551, 553, 554, 555, 566, 594, 595, 601, 603], "q_hook": [179, 180, 313, 316, 317, 321, 324], "hpo": 179, "mandatori": [179, 180, 312, 566, 603], "yield": [179, 180, 189, 211, 229, 301, 312, 316, 331, 333, 550, 594, 601], "_": [179, 180, 312, 529, 530, 533, 548, 553, 555, 559, 565, 566, 567, 568, 569, 575, 579, 581, 583, 584, 588, 591, 594, 596, 597, 598, 599, 601, 603], "taken": [179, 180, 301, 312, 333, 594], "reserv": [179, 180], "abl": [179, 180, 301, 312, 333, 577, 586, 591, 594], "tuner": [179, 180, 253, 290, 301, 312, 333, 594], "scalar": [179, 180, 301, 312, 333, 565, 594], "pseudo": [179, 180, 312, 333, 599], "someth": [179, 180, 193, 233, 312, 333], "fefin": 180, "tpetunestrategi": 180, "basedatalod": [181, 221], "basedataload": [181, 186, 188, 221, 226, 228], "last_batch": [181, 183, 190, 211, 221, 223, 230], "rollov": [181, 183, 190, 211, 221, 223, 230], "collate_fn": [181, 183, 184, 211, 221, 223, 224, 551], "sampler": [181, 183, 185, 211, 221, 223, 225, 242, 254, 327, 555], "batch_sampl": [181, 183, 211, 221, 223], "num_work": [181, 183, 211, 221, 223, 566, 594], "pin_memori": [181, 183, 211, 221, 223], "shuffl": [181, 183, 211, 221, 223, 566, 594], "_generate_dataload": [181, 221], "default_col": [183, 223], "outer": [183, 223], "defaultdataload": [183, 190, 223, 230], "definit": [184, 189, 224, 229, 412, 425, 434, 483, 514], "style": [184, 198, 224, 238, 331, 528, 551, 561], "drop_last": [184, 189, 224, 229], "iterablefetch": [184, 224], "indexfetch": [184, 224], "base_dataload": [185, 225, 242, 254], "default_dataload": [185, 225, 242, 254], "fetcher": [185, 225, 242, 254], "mxnet_dataload": [185, 225, 242, 254], "onnxrt_dataload": [185, 225, 242, 254], "pytorch_dataload": [185, 225, 242, 254], "tensorflow_dataload": [185, 225, 242, 254], "mxnetdataload": [186, 226], "onnxrtbertdataload": [187, 227], "varient": [187, 227], "onnxrtdataload": [187, 227], "pytorchdataload": [188, 228], "data_sourc": [189, 229, 336], "__iter__": [189, 193, 229, 233, 550, 551, 566], "matter": [189, 229, 595], "iterablesampl": [189, 229], "squential": [189, 229], "your": [189, 191, 229, 231, 528, 548, 551, 555, 557, 563, 564, 566, 569, 572, 573, 574, 579, 580, 581, 583, 584, 586, 591, 597, 599, 601], "clear": [189, 229, 533, 559, 565, 566], "iterabledataset": [189, 193, 229, 233], "try": [189, 229, 529, 557, 591, 594, 598, 601], "indexdataset": [189, 229], "__getitem__": [189, 193, 208, 229, 233, 246, 551, 566], "__len__": [189, 193, 229, 233, 551], "retriev": [189, 229, 492], "act": [189, 229, 527], "sequentialsampl": [189, 229], "sequenti": [189, 229, 291, 313, 315, 601], "batchsampl": [189, 229], "tfdatadataload": [190, 230], "tensorflow1": [190, 230], "coupl": [190, 230], "satisfi": [190, 230, 563], "usag": [190, 230, 258, 264, 291, 296, 331, 498, 548, 551, 555, 556, 565, 569, 577, 588, 593, 600], "tf1": [190, 230, 568], "although": [190, 230, 597], "tensorflowbertdataload": [190, 230], "tensorflowmodelzoobertdataload": [190, 230], "zoo": [190, 208, 230, 246, 532, 556, 560, 604], "tensorflowdataload": [190, 230], "pytorchbertdataset": [191, 231], "model_typ": [191, 231, 428, 551], "construct": [191, 194, 195, 198, 206, 211, 213, 214, 216, 231, 234, 235, 238, 300, 305, 309, 336, 527, 551, 555, 591, 601], "tensordataset": [191, 231, 551], "repo": [191, 231, 526, 551, 556, 579, 581, 583, 584, 605], "easi": [191, 231, 290, 548, 550, 557, 566, 592, 594, 597], "load": [191, 207, 208, 231, 245, 246, 301, 309, 312, 342, 343, 471, 498, 550, 579, 583, 587, 593, 594, 598], "classifi": [191, 231, 262, 300, 551, 553, 591], "squad": [191, 208, 231, 246, 259, 260, 262, 297, 298, 300, 551, 565, 591, 600, 604], "distilbert": [191, 231, 532, 551, 592, 604], "xlnet": [191, 231, 551], "xlm": [191, 231, 551, 604], "101": [191, 231, 262, 300, 565, 598, 604], "2043": [191, 231], "2001": [191, 231], "onnxrtbertdataset": [191, 231], "data_dir": [191, 231, 551], "model_name_or_path": [191, 231, 551, 566, 574, 575], "max_seq_length": [191, 208, 231, 246, 551, 600], "do_lower_cas": [191, 207, 208, 231, 245, 246, 551, 600], "mrpc": [191, 231, 262, 300, 551, 565, 574, 591, 601, 604], "dynamic_length": [191, 231, 551], "shortcut": [191, 231, 551], "token": [191, 202, 205, 208, 231, 242, 244, 246, 254, 255, 256, 292, 293, 294, 339, 515, 548, 551, 565, 566, 597, 598, 600, 601], "longer": [191, 208, 231, 246, 551, 600], "truncat": [191, 208, 231, 246, 551, 600], "shorter": [191, 208, 231, 246, 551, 600], "lowercas": [191, 231, 551], "choic": [191, 231, 533, 548, 551, 565, 598], "qqp": [191, 231, 551, 565, 604], "qnli": [191, 231, 551, 565, 604], "rte": [191, 231, 551, 565, 604], "st": [191, 231, 551, 565], "cola": [191, 231, 551, 565, 604], "mnli": [191, 231, 551, 565, 604], "wnli": [191, 231, 551, 565, 604], "mobilebert": [191, 231, 551, 553, 604], "roberta": [191, 231, 551, 604], "uncas": [191, 208, 231, 246, 551, 600, 604], "load_and_cache_exampl": [191, 231], "cach": [191, 231, 428, 515, 558, 594], "convert_examples_to_featur": [191, 208, 231, 246], "max_length": [191, 231], "label_list": [191, 231, 262, 300], "output_mod": [191, 231], "classif": [191, 208, 231, 246, 262, 288, 300, 553, 557, 560, 565, 575, 591, 592], "pad_token": [191, 231], "pad_token_segment_id": [191, 231], "mask_padding_with_zero": [191, 231], "inputfeatur": [191, 208, 231, 246], "properti": [191, 231, 415, 564, 590], "input_id": [191, 208, 231, 246, 566], "vocabulari": [191, 207, 208, 231, 245, 246, 600], "attention_mask": [191, 231, 566], "usual": [191, 231, 553, 589, 594, 598], "NOT": [191, 231, 559, 563], "token_type_id": [191, 231, 566], "segment": [191, 231, 256, 258, 294, 296], "portion": [191, 231], "problem": [191, 231, 262, 300, 565, 567, 587], "regress": [191, 231], "seq_length": [191, 231], "tensorflowbertdataset": [191, 231], "label_fil": [191, 208, 231, 246, 551, 600], "tfrecord": [191, 192, 193, 231, 232, 233, 551], "guid": [191, 231, 529, 532, 551, 553, 563, 569, 577, 586, 605], "parsedecodebert": [191, 231], "tensorflowmodelzoobertdataset": [191, 192, 231, 232], "num_cor": [191, 192, 196, 231, 232, 236, 551], "28": [191, 192, 196, 231, 232, 236, 551, 604], "coco": [192, 199, 203, 232, 239, 258, 262, 296, 300, 565, 591], "parsedecodecoco": [192, 232], "cocorecorddataset": [192, 232], "interleav": [192, 232, 551], "parallel": [192, 232, 551, 566, 601], "cocoraw": [192, 232, 550, 551], "img_dir": [192, 232, 551], "val2017": [192, 232, 551], "anno_dir": [192, 232, 551], "annot": [192, 232, 258, 296, 331, 551, 565, 591], "instances_val2017": [192, 232, 551], "json": [192, 208, 232, 246, 471, 498, 551, 568, 587, 600], "raw": [192, 196, 199, 232, 236, 239, 321, 560, 565, 601], "jpg": [192, 196, 198, 232, 236, 238, 551], "imag": [192, 193, 196, 198, 204, 208, 232, 233, 236, 238, 243, 246, 258, 296, 548, 551, 555, 557, 591, 593, 598, 599, 600, 604], "coconpi": [192, 232, 551], "npy_dir": [192, 232, 551], "npy": [192, 232, 551], "tensorflowdataset": [193, 233], "pytorchdataset": [193, 233], "mxnetdataset": [193, 233], "onnxrtqldataset": [193, 233], "onnxrtitdataset": [193, 233], "IT": [193, 200, 233, 240, 592], "pytorchmxnetwrapdataset": [193, 233], "datafunc": [193, 233], "pytorchmxnetwrapfunct": [193, 208, 233, 246], "framework_dataset": [193, 233], "convent": [193, 233, 258, 296, 553, 598], "imageclassifi": [193, 233], "choos": [193, 233, 548, 562, 563, 574, 596, 598, 601, 603], "tensorflow_itex": [193, 196, 198, 200, 233, 236, 238, 240, 593], "onnxrt_qdq": [193, 200, 233, 240, 593], "onnxrt_qlinearop": [193, 200, 208, 233, 240, 246, 593], "onnxrt_integerop": [193, 200, 208, 233, 240, 246, 593], "pytorch_ipex": [193, 200, 233, 240, 566, 593, 603], "pytorch_fx": [193, 200, 233, 240, 566, 593], "dataset_registri": [193, 233], "dataset_typ": [193, 233], "dataset_format": [193, 233], "data_format": [193, 204, 233, 243], "raw_imag": [193, 233], "overwrit": [193, 233, 579, 583], "download_url": [193, 233], "filenam": [193, 233, 343, 467, 491, 498, 551], "md5": [193, 233], "download": [193, 233, 419, 442, 443, 445, 446, 479, 548, 551, 563, 596], "address": [193, 233, 515, 527, 548, 567, 592], "gen_bar_updat": [193, 233], "bar": [193, 233, 532, 548, 586, 592], "check_integr": [193, 233], "fpath": [193, 233], "checksum": [193, 233], "calculate_md5": [193, 233], "chunk_siz": [193, 233], "cifar10": [193, 233, 551], "cifar100": [193, 233, 551], "otherwis": [193, 208, 233, 246, 527, 551, 581, 584, 593, 600], "www": [193, 233, 551, 604], "toronto": [193, 233, 551], "kriz": [193, 233, 551], "cifar": [193, 233, 551, 604], "tar": [193, 233, 551, 581, 584], "gz": [193, 233, 551, 581, 584], "manual": [193, 233, 551, 569, 575, 577, 580], "subset": [193, 196, 233, 236, 551], "internet": [193, 233, 548, 551], "put": [193, 233, 551, 553, 591], "again": [193, 233, 551, 595], "pytorchcifar10": [193, 233], "mxnetcifar10": [193, 233], "tensorflowcifar10": [193, 233], "pytorchcifar100": [193, 233], "mxnetcifar100": [193, 233], "tensorflowcifar100": [193, 233], "mnist": [193, 233, 551, 555], "modifi": [193, 220, 233, 477, 529, 548, 555, 559, 603], "nation": [193, 233, 527], "institut": [193, 233], "standard": [193, 208, 233, 246, 557, 565, 600, 601], "technologi": [193, 233, 566, 590], "fashionmnist": [193, 233, 551], "npz": [193, 233, 551], "idx1": [193, 233, 551], "ubyt": [193, 233, 551], "idx3": [193, 233, 551], "t10k": [193, 233, 551], "pytorchmnist": [193, 233], "mxnetmnist": [193, 233], "tensorflowmnist": [193, 233], "pytorchfashionmnist": [193, 233], "mxnetfashionmnist": [193, 233], "tensorflowfashionmnist": [193, 233], "imagefold": [193, 233, 551, 555, 566], "expect": [193, 233, 346, 468, 527, 528, 558, 586, 594, 601], "subfold": [193, 233], "belong": [193, 233, 251, 305, 594], "class_1": [193, 233, 551], "xxx": [193, 233, 528, 551, 566], "png": [193, 233, 551], "xxy": [193, 233, 551], "xxz": [193, 233, 551], "class_n": [193, 233, 551], "123": [193, 233, 551, 600], "nsdf3": [193, 233, 551], "asd932_": [193, 233, 551], "categori": [193, 233, 257, 295, 549, 551, 576], "mxnetimagefold": [193, 233], "tensorflowtfrecorddataset": [193, 233], "tensorflowimagerecord": [193, 233], "imagenet": [193, 196, 204, 233, 236, 243, 530, 548, 566, 575, 591, 599, 600, 603, 604], "000": [193, 233, 532, 551], "001": [193, 233, 551, 555, 598, 603], "099": [193, 233, 551], "tensorflowvocrecord": [193, 233], "pascal": [193, 233], "voc": [193, 233, 262, 300], "2012": [193, 233], "00000": [193, 233], "00004": [193, 233], "00001": [193, 233], "00003": [193, 233], "dummydataset": [194, 195, 234, 235], "127": [194, 195, 234, 235, 551, 594, 598], "float32": [194, 195, 208, 234, 235, 246, 258, 296, 533, 549, 551, 566, 594, 598, 600], "rang": [194, 195, 208, 234, 235, 246, 331, 333, 532, 533, 551, 553, 554, 555, 566, 589, 591, 594, 598, 600], "stand_norm": [194, 195, 234, 235, 551], "dummy_v2": [195, 235, 550, 551], "sparse_dummy_v2": [195, 235, 551], "label_shap": [195, 235, 551], "sparsedummydataset": [195, 235], "dense_shap": [195, 235, 551], "sparse_ratio": [195, 235, 551], "imagenetraw": [196, 236, 551], "data_path": [196, 236, 551], "image_list": [196, 236, 551], "img1": [196, 236, 551], "img2": [196, 236, 551], "imgx": [196, 236, 551], "val_map": [196, 236, 551], "txt": [196, 236, 548, 551, 563], "pytorchimagenetraw": [196, 236], "mxnetimagenetraw": [196, 236], "tensorflowimagenetraw": [196, 236], "inteltensorflow": [196, 198, 236, 238, 563], "tensorflowimagenetdataset": [196, 236], "onnxrtimagenetdataset": [196, 236], "bert_dataset": [197, 202, 237, 242, 254, 292], "coco_dataset": [197, 202, 237, 242, 254, 292], "dummy_dataset": [197, 202, 237, 242, 254, 292], "dummy_dataset_v2": [197, 202, 237, 242, 254, 292], "imagenet_dataset": [197, 202, 237, 242, 254, 292], "style_transfer_dataset": [197, 202, 237, 242, 254, 292], "styletransferdataset": [198, 238], "content_fold": [198, 238, 551], "style_fold": [198, 238, 551], "crop_ratio": [198, 238, 551], "resize_shap": [198, 238, 551], "256": [198, 204, 238, 243, 551, 555, 566, 600], "image_format": [198, 238, 551], "holder": [198, 238, 551], "labelbalancecocorecordfilt": [199, 239], "balanc": [199, 239, 590, 598], "labelbalancecocorawfilt": [199, 239], "tensorflowfilt": [200, 240], "onnxrtqlfilt": [200, 240], "onnxrtitfilt": [200, 240], "pytorchfilt": [200, 240], "mxnetfilt": [200, 240], "filter_registri": [200, 240], "filter_typ": [200, 240], "__call__": [200, 240], "coco_filt": [201, 202, 241, 242, 254, 292], "imagenet_transform": [202, 205, 242, 244, 254, 292], "parsedecodecocotransform": 203, "decod": [203, 204, 243, 255, 293, 565, 600], "quantizedinput": [204, 243, 600], "labelshift": [204, 243, 600], "label_shift": [204, 243, 600], "parsedecodeimagenet": [204, 243, 600], "proto": [204, 208, 243, 246, 600], "parsedecodeimagenettransform": [204, 243], "tensorflowresizecropimagenettransform": [204, 243], "random_crop": [204, 243, 600], "resize_sid": [204, 243, 600], "resize_method": [204, 243], "bilinear": [204, 208, 243, 246, 600], "random_flip_left_right": [204, 243, 600], "mean_valu": [204, 243, 600], "channels_last": [204, 243, 569], "subpixel": [204, 243], "rgb": [204, 243], "seri": [204, 243, 532, 563, 566, 600], "applic": [204, 243, 482, 513, 515, 548, 557, 569, 586, 592, 598, 599, 600], "crop": [204, 208, 243, 246, 551, 600], "flip": [204, 208, 243, 246, 600], "left": [204, 208, 243, 246, 548, 580, 586, 598, 600], "right": [204, 243, 258, 296, 527, 529, 548, 586, 598, 600], "std": [204, 208, 243, 246, 566, 600], "bilinearimagenettransform": [204, 243], "central_fract": [204, 243, 600], "875": [204, 243, 600], "fraction": [204, 243, 600], "onnxbilinearimagenettransform": [204, 243], "onnxresizecropimagenettransform": [204, 243], "std_valu": [204, 243], "229": [204, 243, 566, 604], "225": [204, 243, 566, 604], "resizewithaspectratio": [204, 243], "87": [204, 243, 604], "inter_pol": [204, 243], "cv2": [204, 243], "inter_area": [204, 243], "aspect": [204, 208, 243, 246, 600], "postprocess_cl": [206, 216, 566], "user_postprocess": [206, 216], "convert_to_unicod": [207, 245], "unicod": [207, 245], "assum": [207, 245, 258, 269, 296, 533, 559, 586], "utf": [207, 245], "load_vocab": [207, 245], "vocab_fil": [207, 208, 245, 246, 600], "convert_by_vocab": [207, 245], "vocab": [207, 245], "whitespace_token": [207, 245], "whitespac": [207, 245, 260, 298], "clean": [207, 245, 384, 528, 566], "piec": [207, 245, 255, 293, 557, 565], "fulltoken": [207, 245], "tokenzi": [207, 245], "basictoken": [207, 245], "punctuat": [207, 245, 255, 260, 293, 298], "lower": [207, 208, 245, 246, 260, 298, 317, 498, 554, 591, 592, 594, 598, 600, 601], "wordpiecetoken": [207, 245], "unk_token": [207, 245], "unk": [207, 245], "max_input_chars_per_word": [207, 245], "200": [207, 245, 529, 601], "wordpiec": [207, 208, 245, 246, 600], "concat_gener": [208, 246], "inc": [208, 246, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 527, 532, 569, 576, 586, 592, 593, 596], "tensorflowtransform": [208, 246], "mxnettransform": [208, 246], "pytorchtransform": [208, 246], "onnxrtqltransform": [208, 246], "onnxrtittransform": [208, 246], "transform_registri": [208, 246], "transform_typ": [208, 246], "basetransform": [208, 246], "tensorflowwrapfunct": [208, 246], "transform_func": [208, 246], "pytorchmxnettransform": [208, 246], "get_torchvision_map": [208, 246], "torchvis": [208, 246, 548, 556, 560, 569, 575], "composetransform": [208, 246], "transform_list": [208, 246, 600], "compos": [208, 246, 336, 600], "croptoboundingbox": [208, 246, 600], "offset_height": [208, 246, 600], "offset_width": [208, 246, 600], "target_height": [208, 246, 600], "target_width": [208, 246, 600], "box": [208, 246, 258, 262, 296, 300, 529, 548, 565, 569, 580, 586, 599, 600, 601], "coordin": [208, 246, 316, 600, 601], "top": [208, 246, 253, 262, 277, 282, 290, 300, 565, 586, 600], "corner": [208, 246, 533, 600], "horizont": [208, 246, 600], "mxnetcroptoboundingbox": [208, 246], "onnxrtcroptoboundingbox": [208, 246], "tensorflowcroptoboundingbox": [208, 246], "resizewithratio": [208, 246, 600], "min_dim": [208, 246, 600], "800": [208, 246, 600], "max_dim": [208, 246, 600], "1365": [208, 246, 600, 604], "constant_valu": [208, 246], "longest": [208, 246, 600], "side": [208, 246, 548, 551, 580, 598, 600], "doesn": [208, 246, 533, 555, 566, 587, 603], "exce": [208, 246, 600], "tensorflowresizewithratio": [208, 246], "perm": [208, 246, 600], "permut": [208, 246, 600], "tensorflowtranspos": [208, 246], "mxnettranspos": [208, 246], "pytorchtranspos": [208, 246], "randomverticalflip": [208, 246, 600], "randomli": [208, 246, 270, 316, 530, 598, 600, 601], "tensorflowrandomverticalflip": [208, 246], "randomhorizontalflip": [208, 246, 566, 600], "tensorflowrandomhorizontalflip": [208, 246], "toarrai": [208, 246, 600], "pil": [208, 246, 600], "casttftransform": [208, 246], "castonnxtransform": [208, 246], "castpytorchtransform": [208, 246], "centercroptftransform": [208, 246], "center": [208, 246, 531, 532, 563, 600, 601], "paddedcentercroptransform": [208, 246], "crop_pad": [208, 246], "resizetftransform": [208, 246], "nearest": [208, 246, 600], "bicub": [208, 246, 600], "resizepytorchtransform": [208, 246], "randomcroptftransform": [208, 246], "randomresizedcroppytorchtransform": [208, 246], "randomresizedcropmxnettransform": [208, 246], "randomresizedcroptftransform": [208, 246], "normalizetftransform": [208, 246], "rescal": [208, 246, 600], "deviat": [208, 246, 600], "broadcast": [208, 246, 555, 600], "rescalekeraspretraintransform": [208, 246], "rescaletftransform": [208, 246], "rescaletransform": [208, 246], "alignimagechanneltransform": [208, 246], "dim": [208, 246, 598, 600], "align": [208, 246, 527, 600], "w": [208, 246, 591, 598, 600], "must": [208, 246, 258, 296, 528, 529, 548, 549, 550, 563, 594, 600], "pytorchalignimagechannel": [208, 246], "tondarraytransform": [208, 246], "resizemxnettransform": [208, 246], "resizetransform": [208, 246], "cropresizetftransform": [208, 246], "boundari": [208, 246, 600], "area": [208, 246, 258, 296, 565, 600], "pytorchcropresizetransform": [208, 246], "mxnetcropresizetransform": [208, 246], "cropresizetransform": [208, 246], "centercroptransform": [208, 246], "mxnetnormalizetransform": [208, 246], "pytorchnormalizetransform": [208, 246], "normalizetransform": [208, 246], "randomcroptransform": [208, 246], "randomresizedcroptransform": [208, 246], "get_final_text": [208, 246], "pred_text": [208, 246], "orig_text": [208, 246], "project": [208, 246, 371, 394, 395, 419, 526, 527, 528, 592, 597, 601, 605], "squadexampl": [208, 246], "qas_id": [208, 246], "question_text": [208, 246], "doc_token": [208, 246], "orig_answer_text": [208, 246], "start_posit": [208, 246], "end_posit": [208, 246], "is_imposs": [208, 246], "simpl": [208, 246, 548, 563, 566, 597, 598, 601], "answer": [208, 246, 259, 260, 297, 298, 527, 591, 600, 604], "posit": [208, 246, 527, 548, 565, 569], "unique_id": [208, 246], "example_index": [208, 246], "doc_span_index": [208, 246], "token_to_orig_map": [208, 246], "token_is_max_context": [208, 246], "input_mask": [208, 246, 566], "segment_id": [208, 246, 566], "read_squad_exampl": [208, 246], "input_fil": [208, 246], "doc_strid": [208, 246, 600], "max_query_length": [208, 246, 600], "output_fn": [208, 246], "inputbatch": [208, 246], "collecttransform": [208, 246], "10833": [208, 246], "tfsquadv1posttransform": [208, 246], "n_best_siz": [208, 246, 600], "20": [208, 246, 590, 598, 600, 603, 604], "384": [208, 246, 600], "64": [208, 246, 530, 598, 600, 604], "max_answer_length": [208, 246, 600], "30": [208, 246, 556, 560, 562, 598, 600, 604], "nbest_predict": [208, 246, 600], "question": [208, 246, 259, 260, 297, 298, 527, 528, 533, 563, 569, 591, 598, 600, 604], "anoth": [208, 246, 255, 264, 293, 343, 553, 567, 579, 583, 600, 601], "long": [208, 246, 558, 600], "document": [208, 246, 331, 528, 538, 555, 567, 571, 581, 584, 585, 596, 600, 602], "chunk": [208, 246, 600], "tfmodelzoocollecttransform": [208, 246], "tfsquadv1modelzooposttransform": [208, 246], "squadv1": [208, 246, 600], "see": [208, 246, 255, 293, 527, 529, 531, 548, 564, 566, 579, 580, 583, 586, 587, 598, 599, 601, 604], "parsedecodevoctransform": [208, 246], "conf_fname_or_obj": [209, 218, 247, 253, 263, 264, 265, 266, 268, 277, 282, 290], "thei": [209, 331, 527, 553, 559, 565, 566, 567, 574, 588, 591], "command": [209, 333, 483, 491, 548, 555, 569, 571, 574, 579, 583, 587], "possibl": [209, 360, 548, 589, 591, 595, 601], "unnecessari": [209, 566], "tensorflowcrossentropyloss": 210, "pytorchcrossentropyloss": 210, "tensorflowsparsecategoricalcrossentropi": 210, "sparsecategoricalcrossentropyloss": 210, "setter": 211, "calib_dataload": [211, 291, 312, 529, 532, 550, 551, 560, 561, 565, 566, 594, 595], "reason": [211, 527, 550, 599, 601], "know": [211, 484, 555, 596], "known": [211, 316, 557, 566, 591, 599, 601], "open": [212, 254, 292, 336, 525, 527, 532, 548, 557, 558, 566, 581, 584, 587, 592], "metric_cl": [213, 300, 566], "user_metr": [213, 300], "alwai": [213, 258, 296, 300, 565, 566], "recommend": [213, 300, 533, 551, 557, 559, 577, 580, 585, 587, 591, 593, 601], "set_backend": 214, "tensorflowoptim": 215, "pytorchoptim": 215, "optimizer_registri": 215, "optimizer_typ": 215, "cross": [215, 262, 300, 561, 601], "tensorflowsgd": 215, "tensorflowadamw": 215, "tensorflow_addon": 215, "adamw": 215, "tensorflowadam": 215, "adam": [215, 603], "pytorchsgd": 215, "record_output": 217, "output_process": 217, "help": [217, 264, 360, 498, 568, 569, 575, 586, 601, 602], "get_activ": 217, "f": [220, 553, 555, 594, 598], "pickle_modul": 220, "pickle_protocol": 220, "_use_new_zipfile_seri": 220, "prepare_prun": 220, "opt": [220, 532, 574, 598], "tensorflowimagefold": 233, "qlinear2qdq": [248, 254, 292], "qlinearop": [249, 562, 577, 594], "check_model": 249, "modelproto": [249, 251, 301, 568], "onnx_qlinear_to_qdq": 249, "input_name_to_nod": 249, "destin": [249, 264], "tf_to_fp32_onnx": 250, "tf_to_int8_onnx": 250, "int8_model": [250, 251, 533], "update_weight_bia": 251, "fp32_onnx_path": [251, 252], "wegiht": 251, "set_data_typ": 251, "weight_typ": 251, "activation_typ": 251, "get_node_map": 251, "module_node_map": 251, "get_quantizable_onnx_op": 251, "quantize_nod": 251, "build_scale_map": 251, "int8_scale_info": 251, "scale_zp_dict": 251, "set_scale_info": 251, "int8_onnx_model": 251, "int8_onnx_path": 251, "recalculate_bia": 251, "recalcul": [251, 598], "remove_nodes_by_nam": 251, "sub_graph_with_int32_bia": 251, "a_info": 251, "b_info": 251, "bias_nam": 251, "int32": [251, 551], "nodeproto": 251, "_type_": 251, "qdq_fp32_bia": 251, "excut": 251, "qdq_int32_bia": 251, "qdq_fp32_bias_qdq": 251, "torch_to_fp32_onnx": 251, "do_constant_fold": 251, "verbos": [251, 316], "torch_to_int8_onnx": 251, "u8s8": 251, "optionl": 251, "onnx2numpy_dtyp": 252, "onnx_node_typ": 252, "dummydataread": 252, "dataread": 252, "achiev": [253, 290, 557, 565, 566, 589, 591, 592, 594, 599, 601], "across": [253, 263, 290, 301, 552, 566, 591, 598, 601], "variou": [253, 263, 290, 301, 562, 569, 593], "dl": [253, 263, 277, 282, 290, 301, 561, 573, 586, 592], "bring": [253, 290, 580, 594, 598], "unifi": [253, 290, 533, 550, 561, 562, 566, 568], "vari": [253, 277, 282, 290, 590, 598, 604], "roc": [253, 262, 277, 282, 290, 300], "flexibl": [253, 277, 282, 290, 553, 591], "via": [253, 277, 282, 290, 515, 527, 555, 562, 566, 569, 586, 591], "popular": [254, 292, 525, 532, 533, 553, 556, 557, 560, 566, 591, 594, 601, 602], "compress": [254, 277, 282, 292, 311, 333, 525, 532, 538, 553, 562, 566, 586, 588, 589, 591, 592, 594, 598, 602, 604], "techniqu": [254, 292, 525, 532, 562, 566, 569, 589, 591, 593, 594, 602, 603, 604], "bleu": [254, 256, 261, 292, 294, 299, 565], "bleu_util": [254, 261, 292, 299], "coco_label_map": [254, 261, 292, 299], "coco_tool": [254, 261, 292, 299], "evaluate_squad": [254, 261, 292, 299], "f1": [254, 259, 261, 262, 292, 297, 299, 300, 555, 565, 566, 597, 604], "basic_na": [254, 267, 292], "dyna": [254, 267, 292, 530, 562, 593], "nas_util": [254, 267, 292], "pruner_legaci": [254, 292], "gradient_sensit": [254, 273, 292], "group_lasso": [254, 273, 292], "pruning_recip": [254, 292], "tile_pattern": [254, 278, 279], "pytorch_prun": [254, 292], "logger": [254, 283, 292, 334, 337, 343, 479, 487], "prune_util": [254, 283, 292], "graph_optim": [254, 292, 419, 454, 458, 459, 479, 487, 503], "mixed_precis": [254, 292, 419, 454, 479, 487, 503, 566], "model_convers": [254, 292], "pruning_v2": [254, 292], "unicoderegex": [255, 293], "hoc": [255, 293], "hack": [255, 293], "recogn": [255, 293, 601], "nondigit_punct_r": [255, 293], "compil": [255, 293, 566, 590], "express": [255, 293, 527], "preced": [255, 293, 598], "digit": [255, 293, 592], "punct_nondigit_r": [255, 293], "symbol_r": [255, 293], "bleu_token": [255, 293], "mose": [255, 293], "smt": [255, 293], "mosesdecod": [255, 293], "mteval": [255, 293], "v14": [255, 293], "pl": [255, 293], "l954": [255, 293], "l983": [255, 293], "bilingu": [255, 293], "understudi": [255, 293], "qualiti": [255, 293], "machin": [255, 293, 358, 548, 557, 563, 572, 586, 592, 598, 599], "translat": [255, 256, 293, 294, 591, 601], "natur": [255, 293, 557], "approxim": [255, 256, 293, 294, 565], "glue": [255, 262, 293, 300, 551, 565, 566, 575], "word": [255, 293, 565, 591], "ngram": [255, 293, 565], "breviti": [255, 256, 293, 294, 565], "penalti": [255, 256, 293, 294, 565], "doe": [255, 293, 551, 565, 566, 596, 600], "beam": [255, 293, 565], "tensor2tensor": [256, 294], "bleu_hook": [256, 294], "compute_bleu": [256, 294], "reference_corpu": [256, 294], "translation_corpu": [256, 294], "max_ord": [256, 294], "use_bp": [256, 294], "against": [256, 294], "gram": [256, 294], "bleu_scor": [256, 294], "third": [258, 296, 548, 564], "parti": [258, 296, 564, 594], "pycocotool": [258, 296, 558, 563], "noth": [258, 296, 601], "thu": [258, 296, 566, 591, 594], "cannot": [258, 296, 486, 529, 557, 558, 567, 599], "jonathanhuang": [258, 296], "image_id": [258, 296, 565], "encod": [258, 296, 600], "invok": [258, 296], "groundtruth_dict": [258, 296], "exportgroundtruthtococo": [258, 296], "groundtruth_boxes_list": [258, 296], "groundtruth_classes_list": [258, 296], "max_num_class": [258, 296], "output_path": [258, 296], "detections_list": [258, 296], "exportdetectionstococo": [258, 296], "detection_boxes_list": [258, 296], "detection_scores_list": [258, 296], "detection_classes_list": [258, 296], "cocowrapp": [258, 296], "loadannot": [258, 296], "cocoevalwrapp": [258, 296], "agnostic_mod": [258, 296], "computemetr": [258, 296], "detection_typ": [258, 296], "bbox": [258, 296, 529, 565], "hold": [258, 296, 316, 551], "iou_typ": [258, 296], "iou_thr": [258, 262, 296, 300, 565], "map_point": [258, 262, 296, 300, 565], "cocoev": [258, 296], "mscoco": [258, 296], "Then": [258, 296, 548, 579, 581, 583, 584, 598, 601], "exportsingleimagegroundtruthtococo": [258, 296], "next_annotation_id": [258, 296], "category_id_set": [258, 296], "groundtruth_box": [258, 296], "groundtruth_class": [258, 296], "groundtruth_mask": [258, 296], "groundtruth_is_crowd": [258, 296], "ingest": [258, 296], "ones": [258, 296, 591], "exportsingleimagedetectionstococo": [258, 296], "uniqu": [258, 291, 296, 385, 386, 594], "assign": [258, 296, 343, 548, 555, 593], "drop": [258, 286, 296, 566, 567, 580, 591, 604], "num_gt_box": [258, 296], "num_detect": [258, 262, 296, 300, 565, 566, 603], "image_height": [258, 296], "image_width": [258, 296], "detection_mask": [258, 296], "crowd": [258, 296], "insid": [258, 296, 553, 554, 587, 591, 601], "exportsingleimagedetectionboxestococo": [258, 296], "detection_box": [258, 296, 566, 603], "detection_scor": [258, 296, 566, 603], "detection_class": [258, 296, 566, 603], "exporsingleimagedetectionboxestococo": [258, 296], "exportsingleimagedetectionmaskstococo": [258, 296], "allenai": [259, 260, 297, 298], "bi": [259, 260, 297, 298], "att": [259, 260, 297, 298], "flow": [259, 260, 297, 298, 529, 530, 566], "f1_score": [259, 260, 297, 298], "ground_truth": [259, 260, 297, 298], "ground": [259, 260, 297, 298], "truth": [259, 260, 297, 298], "metric_max_over_ground_truth": [259, 260, 297, 298], "metric_fn": [259, 260, 297, 298], "exact_match_scor": [259, 297], "exact": [259, 297], "averag": [259, 260, 262, 297, 298, 300, 565, 566, 601], "articl": [259, 260, 297, 298], "paragraph": [259, 260, 297, 298], "qa": [259, 260, 297, 298], "cantain": [259, 260, 297, 298], "normalize_answ": [260, 298], "extra": [260, 298, 566], "newlin": [260, 298], "tab": [260, 298, 396, 514, 586, 599], "harmon": [260, 262, 298, 300], "recal": [260, 262, 298, 300], "answer_start": [260, 298], "177": [260, 298], "denver": [260, 298], "bronco": [260, 298], "nfl": [260, 298], "team": [260, 298, 527, 595], "afc": [260, 298], "super": [260, 298, 530], "bowl": [260, 298], "50": [260, 298, 530, 598, 604], "56be4db0acb8001400a502ec": [260, 298], "form": [260, 298, 548, 553, 586], "percentag": [260, 298, 603], "tensorflowmetr": [262, 300], "maintain": [262, 300, 527, 528, 532, 568, 569, 581, 584, 591, 596], "pytorchmetr": [262, 300], "mxnetmetr": [262, 300], "onnxrtqlmetr": [262, 300], "onnxrtitmetr": [262, 300], "metric_registri": [262, 300], "metric_typ": [262, 300], "decorator_metr": [262, 300], "basemetr": [262, 300], "single_output": [262, 300], "hvd": [262, 300, 555], "wrappytorchmetr": [262, 300], "wrapmxnetmetr": [262, 300], "wraponnxrtmetr": [262, 300], "proport": [262, 300], "were": [262, 300, 572, 591], "pred_list": [262, 300], "pytorchloss": [262, 300], "mae": [262, 300, 565], "compare_label": [262, 300, 565], "actual": [262, 300, 555, 598], "rmse": [262, 300, 565, 601], "squar": [262, 300, 321, 565, 598, 601], "tensorflowtopk": [262, 300], "k": [262, 300, 565, 591], "among": [262, 300, 580, 598], "outcom": [262, 300], "num_correct": [262, 300], "num_sampl": [262, 300], "generaltopk": [262, 300], "cocomapv2": [262, 300, 565], "anno_path": [262, 300, 565], "map_kei": [262, 300], "detectionboxes_precis": [262, 300], "output_index_map": [262, 300, 565], "tensorflowmap": [262, 300], "tensorflowcocomap": [262, 300], "tensorflowvocmap": [262, 300], "squadf1": [262, 300, 565], "miou": [262, 300], "num_class": [262, 300], "21": [262, 300, 574, 575, 592, 598, 604], "iou": [262, 300], "intersect": [262, 300, 533, 565], "union": [262, 300, 333, 565], "onnxrtglu": [262, 300], "dlrm": [262, 300], "modelconvers": 264, "typic": [264, 291, 530, 532, 554, 556, 560, 591, 604], "basicna": 265, "model_build": [265, 268], "conf_fnam": 265, "nasbas": [268, 530], "nas_registri": 269, "nas_method": 269, "create_search_space_pool": 269, "idx": [269, 551], "enumer": [269, 333, 347, 448, 454, 480, 533, 553, 554, 555, 566, 589, 591, 599], "find_pareto_front": 269, "pareto": [269, 530], "front": [269, 530], "n_point": 269, "n_metric": 269, "n_pareto_point": 269, "gridsearch": 270, "grid": [270, 530], "whole": [270, 513, 548, 594], "randomsearch": 270, "42": [270, 590, 604], "bayesianoptimizationsearch": 270, "gradientsensitivityprun": 271, "pytorchmodel": [271, 272, 274, 275, 276, 310], "overwritten": [271, 272, 274, 275, 276, 574], "grouplassoprun": 272, "legaci": 273, "basicmagnitudeprun": 274, "lock": [275, 276, 562, 589, 591], "pruner_registri": 276, "clase": 276, "pruningconf": [277, 282], "tfpruningcallback": [277, 282], "input_model": [277, 282, 568, 599], "pure": [277, 282, 567, 591], "pattern_registri": 280, "pattern_typ": 280, "patternbas": 280, "mask_shap": [280, 281], "is_contigu": 280, "tile": 281, "tilepatternbas": 281, "tilepattern_1x1": 281, "1x1": [281, 553, 566, 591], "tilepattern_2x2": 281, "2x2": [281, 598], "tilepattern_1x16": 281, "1x16": 281, "tilepattern_4x1": 281, "tilepattern_1x2": 281, "1x2": [281, 598], "reset_non_value_to_default": 286, "obejct": 286, "parse_not_to_prun": 286, "update_frequency_on_step": [287, 593], "max_sparsity_ratio_per_lay": [287, 593], "magnitudeprun": 287, "snipprun": 287, "snipmomentumprun": 287, "moreoev": 287, "least": [288, 566, 591, 601], "templat": [288, 292, 479, 487, 548, 566, 591], "tree": [288, 328], "huggingface_model": 288, "eager": [288, 345, 453, 457, 465, 555, 562, 594, 595, 599, 604], "config_file_path": 288, "pruner_info": 288, "quantconf": [290, 301], "server": [291, 292, 419, 426, 478, 479, 486, 487, 495, 498, 509, 511, 513, 548, 586], "seper": 291, "opt_model": [291, 566], "fulli": [291, 566, 594, 598], "train_func": [291, 333, 555, 566, 594], "experiment": [292, 530, 551, 554, 555, 557, 566, 591, 593, 596, 600], "base_model": [292, 303], "keras_model": [292, 303], "mxnet_model": [292, 303], "nets_factori": [292, 303], "onnx_model": [292, 303], "tensorflow_model": [292, 303], "torch_model": [292, 303], "tuning_sampl": [292, 320, 326], "tuning_spac": [292, 320, 326, 327, 329], "tuning_struct": [292, 320, 326, 327, 328], "auto_mixed_precis": [292, 320], "collect_layer_histogram": [292, 337], "create_obj_from_config": [292, 337], "kl_diverg": [292, 337], "load_huggingfac": [292, 337, 566], "ux": 292, "config_gener": [292, 419, 479], "configuration_wizard": [292, 419, 479], "db_manag": [292, 419, 479], "file_brows": [292, 419, 479], "jobs_manag": [292, 419, 479], "model_zoo": [292, 419, 479], "names_mapp": [292, 419, 479], "profil": [292, 371, 378, 393, 395, 396, 419, 479, 480, 490, 513, 518], "manage_workspac": [292, 419, 479], "workload": [292, 358, 479, 487, 498, 513, 518, 519, 592], "except": [292, 331, 343, 479, 487, 498, 513], "executor": [292, 346, 479, 487], "expiring_dict": [292, 479, 487], "github_info": [292, 479, 487], "hw_info": [292, 479, 487], "json_seri": [292, 479, 487], "proc": [292, 479, 487], "status_upd": [292, 479, 487], "yaml_util": [292, 479, 487], "web": [292, 478, 479, 532, 548, 599], "servic": [292, 479, 512, 513, 532, 586, 590], "commun": [292, 479, 513, 515, 527, 548], "router": [292, 479, 513], "inc_bench": [292, 479, 548, 560], "eval_metr": [301, 312, 333, 594], "frozen": [301, 309, 312, 435, 438, 548, 568], "savedmodel": [301, 309, 312, 604], "chould": 301, "onnx_ml_pb2": [301, 568], "hybirdblock": [301, 312], "paramt": [301, 333], "_mixedprecis": 301, "basemodel": 302, "plai": [302, 591, 592, 598], "role": [302, 591, 598], "kerasmodel": [304, 437], "get_model_fwk_nam": 305, "fwk": 305, "mxnetmodel": 306, "net": 307, "factori": [307, 400, 419, 454, 470, 475, 479, 490, 494], "tfslimnetsfactori": 307, "onnxmodel": 308, "get_model_typ": [309, 428], "validate_graph_nod": 309, "validate_and_inference_input_output": 309, "input_tensor_nam": 309, "output_tensor_nam": 309, "graph_sess": 309, "graph_def_sess": 309, "frozen_pb_sess": 309, "load_saved_model": 309, "saved_model_tag": 309, "signatur": 309, "saved_model_dir": 309, "tag": [309, 498, 598, 599], "metagraphdef": 309, "keras_sess": 309, "slim_sess": 309, "checkpoint_sess": 309, "estimator_sess": 309, "saved_model_sess": 309, "tensorflowbasemodel": 309, "tensorflowsavedmodelmodel": 309, "tensorflowqatmodel": 309, "tensorflowcheckpointmodel": 309, "checkpoint": [309, 342, 568], "tensorflowmodel": [309, 439], "pytorchbasemodel": 310, "pytorchfxmodel": 310, "ipexmodel": 310, "driven": [311, 532, 566, 567, 586, 588, 599], "objective_registri": 311, "objective_custom_registri": 311, "obj_cl": 311, "eural_compressor": 311, "objective_cl": 311, "user_object": 311, "__class__": 311, "__name__": 311, "objective_cfg": 311, "usr_cfg": 311, "user_obj_cfg": 311, "easili": [311, 533, 570, 574, 586, 588, 591, 598], "peak": [311, 588], "multiobject": [311, 508], "metric_criterion": 311, "metric_weight": 311, "obj_criterion": 311, "obj_weight": 311, "is_measur": 311, "calib_func": [312, 595], "entir": [312, 333, 529, 591, 598], "autotunestrategi": 313, "stage": [313, 315, 322, 553, 599, 601], "polici": [313, 315, 321, 527, 532, 590, 603, 605], "automixedprecisiontunestrategi": 314, "basictunestrategi": 315, "bayesiantunestrategi": 316, "acq_max": 316, "ac": 316, "gp": 316, "y_max": 316, "n_warmup": 316, "10000": 316, "n_iter": 316, "acquisit": 316, "gaussian": [316, 601], "relev": 316, "limit": [316, 343, 532, 553, 591, 599], "acq": 316, "randomst": 316, "scipi": 316, "x_max": 316, "targetspac": 316, "pbound": 316, "9527": [316, 566, 603], "allow": [316, 515, 548, 553, 555, 565, 566, 567, 593, 601, 603], "bayesianoptim": 316, "conservativetunestrategi": 317, "o0": [317, 601], "who": [317, 527], "exhaustivetunestrategi": 318, "hawq_v2tunestrategi": 319, "made": [319, 533, 594, 596, 601], "impact": [319, 596, 601], "msetunestrategi": 321, "mse_v2tunestrategi": 322, "revert": [322, 330, 601], "randomtunestrategi": 323, "strategy_registri": [324, 601], "tunestrategi": [324, 601], "tuningsamplerregistri": 327, "tuningsampl": 327, "tuningord": 327, "Not": [327, 328, 343, 482, 530], "tuningspac": [327, 328], "tuning_order_lst": 327, "initial_op_tuning_cfg": 327, "modelwisetuningsampl": 327, "tuning_items_prior": 327, "op_dtype_dict": 327, "optuningconfig": [327, 328, 329], "optypewisetuningsampl": 327, "opwisetuningsampl": 327, "fallbacktuningsampl": 327, "op_dtyp": 327, "accumul": [327, 601], "skip_first": 327, "tuningitem": 328, "item_typ": 328, "get_op_mode_by_query_ord": 328, "query_ord": 328, "pattern_to_intern": 328, "default_dtyp": 328, "pattern_to_path": 328, "quant_mode_from_pattern": 328, "internal_pattern": 328, "initial_tuning_cfg_with_quant_mod": 328, "op_name_typ": 328, "step1": 328, "step2": 328, "complet": [328, 533, 548, 594, 601, 603, 604], "step3": 328, "step4": 328, "step5": 328, "op_quant_mod": 329, "ordereddefaultdict": 330, "extract_data_typ": 330, "data_typ": 330, "sign": [330, 528, 548, 594, 597], "reverted_data_typ": 330, "signed_flag": 330, "get_adaptor_nam": 330, "fun": 331, "attribute1": 331, "module_debug_level1": 331, "debug": [331, 340, 400, 401, 405, 548, 579, 583, 587, 601], "function1": 331, "param1": 331, "param2": 331, "parameter1": 331, "parameter2": 331, "o": [331, 407, 563, 571, 590, 598], "function2": 331, "pep": 331, "484": 331, "output_model": [331, 550, 566, 599], "function3": 331, "section": [331, 548, 553, 554, 586, 591, 593, 603], "restructuredtext": 331, "liter": 331, "attributeerror": 331, "generator1": 331, "example_gener": 331, "exampleclass": 331, "param3": 331, "public": [331, 527, 581, 584], "attr1": 331, "attr2": 331, "attr5": 331, "api_doc_exampl": 332, "loop": [333, 529, 530, 559, 597, 601], "compressionmanag": 333, "callbacks_list": 333, "uesd": 333, "deal": 333, "Such": 333, "distillationcallbback": 333, "on_train_begin": [333, 529, 553, 554, 566, 589, 591, 594], "train_loop": [333, 566, 589], "on_epoch_begin": [333, 336, 553, 554, 566, 589, 591], "on_step_begin": [333, 336, 553, 554, 566, 589, 591], "on_after_compute_loss": [333, 553, 554, 566, 589], "backward": [333, 553, 554, 555, 566, 589, 591, 594, 596], "on_before_optimizer_step": [333, 553, 554, 566, 589, 591], "on_step_end": [333, 336, 553, 554, 566, 589, 591], "on_epoch_end": [333, 336, 553, 554, 566, 589, 591], "on_train_end": [333, 553, 554, 566, 589, 591, 594], "path_to_sav": 333, "manag": [333, 336, 362, 397, 420, 481, 497, 560, 566, 569, 570, 580], "summari": [333, 548, 581, 584, 590, 599], "pruningconfig": 333, "orchestr": [333, 532, 562, 602], "layerhistogramcollector": 334, "layer_tensor": 334, "include_lay": 334, "get_func_from_config": 336, "func_dict": 336, "get_preprocess": 336, "get_metr": 336, "get_postprocess": 336, "get_algorithm": 336, "algo": 336, "create_dataset": 336, "cfg_preprocess": 336, "cfg_filter": 336, "create_dataload": 336, "dataloader_cfg": 336, "create_eval_func": 336, "postprocess_cfg": 336, "fp32_baselin": [336, 533], "baselin": [336, 597, 599], "create_train_func": 336, "train_cfg": 336, "Their": 336, "auxiliari": 337, "pretrain": [339, 569, 575], "optimizedmodel": 339, "from_pretrain": [339, 566], "save_for_huggingface_upstream": [339, 566], "output_dir": [339, 491, 566, 574, 575], "msg": 340, "fatal": 340, "warn": [340, 548], "warin": 340, "alia": [340, 571, 576], "is_int8_model": 342, "checkpoint_dir": 342, "history_cfg": 342, "best_configur": 342, "best_model_weight": 342, "pt": [342, 568, 592, 595], "snapshot": [342, 517], "cfg_from_fil": 343, "yaml_fil": [343, 551, 555, 565], "lazyimport": 343, "lazi": 343, "till": [343, 601], "decorat": 343, "time_limit": 343, "get_siz": [343, 498], "seen": [343, 533], "recurs": 343, "compute_spars": 343, "fault_tolerant_fil": 343, "temporari": [343, 527], "equal_dict": 343, "d2": 343, "compare_kei": 343, "ignore_kei": 343, "ignor": [343, 551, 598], "cpuinfo": 343, "dump_elapsed_tim": [343, 533], "customized_msg": 343, "elaps": 343, "combine_histogram": 343, "old_hist": 343, "old": [343, 566, 596], "get_tensor_histogram": 343, "get_all_fp32_data": 343, "get_tuning_histori": 343, "tuning_history_path": [343, 467], "num": [343, 565], "str2arrai": 343, "dequantizeweight": 343, "weight_tensor": 343, "min_filter_tensor": 343, "max_filter_tensor": 343, "scale_info": 343, "captureoutputtofil": 343, "tmp_file_path": 343, "stream": 343, "sy": [343, 572], "stderr": 343, "captur": 343, "statist": 343, "header": [343, 558], "field_nam": 343, "output_handl": 343, "printer": 343, "global_st": 343, "load_data_from_pkl": 343, "pkl": 343, "dump_data_to_loc": 343, "show_memory_info": 343, "hint": 343, "project_data": [344, 451, 456, 460, 463, 466, 473], "benchmark_data": 344, "dataloaderinterfac": [344, 460, 473], "dataloader_data": [344, 460, 473], "parse_arg": [345, 453, 457, 462, 465, 471], "benchmark_mod": 345, "set_eager_execut": [345, 453, 457, 465], "request_id": [346, 449, 467, 468, 491], "asd": [346, 468], "benchmark_id": 346, "benchmark_result_upd": 346, "benchmark_result_update_pytorch_script": 346, "neural_coder_perform": 346, "neural_coder_tim": 346, "pytorch_script_bench_optim": 346, "command_line_of_script": 346, "pytorch_script_bench_original_model": 346, "execute_real_benchmark": 346, "project_detail": [346, 449, 468], "benchmark_detail": 346, "benchmark_model": [347, 419, 479], "execute_benchmark": [347, 419, 479], "benchmarkconfiggener": 348, "configgener": 349, "workload_directori": 349, "configuration_path": 349, "graphoptimizationconfiggener": 350, "benchmark_config_gener": [351, 419, 479], "graph_optimization_config_gener": [351, 419, 479], "mixed_precision_config_gener": [351, 419, 479], "profiling_config_gener": [351, 419, 479], "pruning_config_gener": [351, 419, 479], "quantization_config_gener": [351, 419, 479], "mixedprecisionconfiggener": 352, "profilingconfiggener": 353, "pruningconfiggener": 354, "quantizationconfiggener": 355, "configurationpars": 356, "parse_list_valu": 356, "required_typ": 356, "parse_multidim_list": 356, "dimension": 356, "normalize_string_list": 356, "string_list": 356, "bracket": 356, "miss": [356, 591, 594], "get_predefined_configur": 358, "update_config_to_machine_specif": 358, "configuration_pars": [359, 419, 479], "get_boundary_nod": [359, 419, 479], "get_configur": [359, 419, 479], "params_feed": [359, 419, 479], "pruning_config_pars": [359, 419, 479], "feeder": 360, "get_possible_valu": 360, "pruningconfigpars": 361, "bench": [362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 449, 478, 569], "dbmanag": 362, "database_loc": 362, "log_level": [362, 489], "benchmarkresult": 364, "fill_dictionari": [365, 367, 368, 370, 372, 375, 376, 381], "fill": [365, 367, 368, 370, 372, 375, 376, 381, 548, 586, 597, 600], "domainflavour": [368, 480], "db": [368, 396, 397], "benchmark_result": [371, 395, 419], "domain_flavour": [371, 395, 419, 425, 498], "optimization_typ": [371, 395, 419], "profiling_result": [371, 395, 419], "pruning_detail": [371, 395, 419], "tuning_detail": [371, 395, 419], "tuning_histori": [371, 395, 419, 454, 479], "optimizationtyp": [375, 480], "profilingresult": 378, "pruningdetail": 380, "tuningdetail": [382, 466], "tuninghistori": [383, 467], "benchmarkapiinterfac": 384, "before_delete_benchmark_entri": 384, "mapper": [384, 447, 448], "sqlite3": 384, "db_model": [384, 395, 419, 479], "datasetapiinterfac": 385, "set_database_vers": [385, 386], "version_num": [385, 386], "alembic_vers": [385, 386], "initialize_associ": [385, 386], "initialize_precision_optimization_types_associ": [385, 386], "search_in_list_of_dict_for_unique_valu": [385, 386], "list_of_dict": [385, 386], "search_in_list_of_dict": [385, 386], "diagnosisapiinterfac": 387, "dictionariesapiinterfac": 388, "dictonari": 388, "examplesapiinterfac": 389, "predefin": [389, 498], "benchmark_api_interfac": [390, 395, 419], "dataset_api_interfac": [390, 395, 419], "diagnosis_api_interfac": [390, 395, 419], "dictionaries_api_interfac": [390, 395, 419], "examples_api_interfac": [390, 395, 419], "model_api_interfac": [390, 395, 419], "optimization_api_interfac": [390, 395, 419], "profiling_api_interfac": [390, 395, 419], "project_api_interfac": [390, 395, 419], "modelapiinterfac": 391, "optimizationapiinterfac": 392, "profilingapiinterfac": 393, "projectapiinterfac": 394, "db_oper": [395, 419, 479], "params_interfac": [395, 419, 479], "modeladdparamsinterfac": 396, "datasetaddparamsinterfac": 396, "optimizationaddparamsinterfac": 396, "optimizationeditparamsinterfac": 396, "edit": [396, 527], "benchmarkaddparamsinterfac": 396, "benchmarkeditparamsinterfac": 396, "profilingaddparamsinterfac": 396, "profilingeditparamsinterfac": 396, "profilingresultaddparamsinterfac": 396, "tuninghistoryiteminterfac": 396, "tuninghistoryinterfac": 396, "diagnosisoptimizationparamsinterfac": 396, "update_dataloaders_param": 397, "framework_id": 397, "dataloaders_to_upd": 397, "framework_dataloaders_config": 397, "get_framework_dataloaders_config": 397, "get_framework_transforms_config": 397, "diagnosisfactori": 399, "onnx_diagnosi": [400, 419, 479], "onnxrt_diagnosi": [400, 401, 419], "tensorflow_diagnosi": [400, 419, 479], "op_detail": [400, 419, 479], "op_entri": [400, 419, 479], "onnxrtdiagnosi": 402, "opdetail": 403, "oppattern": 403, "pattern_data": 403, "opweight": 403, "weights_data": 403, "opactiv": 403, "op_activ": 403, "opentri": 404, "activation_min": 404, "activation_max": 404, "tensorflowdiagnosi": 406, "browser": [407, 548, 579, 583], "get_directory_entri": 407, "get_requested_path": 407, "request": [407, 419, 420, 421, 442, 443, 446, 467, 479, 510, 512, 515, 522, 548, 594], "get_non_hidden_directory_entri": 407, "create_dir_entri": 407, "direntri": 407, "create_file_entri": 407, "create_entri": 407, "is_directori": 407, "sort_entri": 407, "should_show_fil": 407, "should_show_only_model_fil": 407, "get_setting_valu": 407, "get_filter_valu": 407, "filter_requested_entri": 407, "filter_nam": 407, "is_directory_entri": 407, "is_model_or_directory_entri": 407, "shown": [407, 530, 548, 550, 553, 565, 566, 580, 588, 589, 598, 601], "is_dataset_or_directory_entri": 407, "brows": 408, "filesystem": [408, 498], "attribute_typ": 409, "expanded_group": 410, "reader": [413, 414, 419, 479], "graphread": 413, "onnxrt_read": [414, 416, 419], "tensorflow_read": [414, 416, 419], "collaps": [414, 419, 479, 548], "edg": [414, 419, 479, 600], "graph_read": [414, 419, 479], "highlight": [415, 529, 548], "groupnod": 415, "group_nam": 415, "onnxrtread": 417, "tensorflowread": 418, "jobs_control_queu": [419, 420, 479], "frozen_pb": [419, 426, 436], "meta_graph": [419, 426, 436], "model_type_gett": [419, 426, 479], "repositori": [419, 424, 426, 479, 485, 581, 584], "download_config": [419, 445, 479], "download_model": [419, 445, 479], "list_model": [419, 445, 479], "optimize_model": [419, 452, 454, 455, 458, 461], "neural_coder_optim": [419, 454, 479], "tune_model": [419, 454, 464], "execute_optim": [419, 454, 479], "tensorflow_profil": [419, 470, 479], "execute_profil": [419, 470, 479], "profile_model": [419, 470, 479], "job": [420, 494], "_jobscontrolqueu": 421, "queu": 421, "jobsmanag": 421, "_jobsmmanag": 422, "_job": 422, "get_default_path": 424, "getter": 428, "onnxrtmodel": 430, "remove_number_of_samples_from_shap": 430, "pytorchscriptmodel": 432, "modelrepositori": 433, "trust": [434, 548], "frozenpbmodel": 435, "metagraphmodel": 438, "metagraph": 438, "savedmodelmodel": 440, "get_input_shap": 441, "fix_dynamic_shap": 441, "get_available_model": 446, "check_vers": 446, "framework_vers": 446, "supported_vers": 446, "validate_model_list": 446, "model_list": 446, "get_framework_module_nam": 446, "framework_nam": [446, 486], "get_installed_framework": 446, "instal": [446, 555, 558, 560, 569, 571, 574, 577, 581, 584, 586, 587, 590, 605], "mappingdirect": 448, "namesmapp": 448, "execute_optimization_pytorch_script": 449, "optimization_id": 449, "execute_optimization_regular": 449, "parse_model_data_to_bench_nam": 449, "parse_log": 449, "optimization_detail": 449, "check_if_collect_tuning_histori": 449, "optimizationfactori": 450, "graphoptim": [451, 502], "optimization_data": [451, 456, 460, 463, 466], "dataset_data": [451, 456, 460, 463, 466], "optimize_graph": [453, 457], "optimize_graph_config": [453, 457], "optimize_pt_script": 459, "optimizationinterfac": 460, "optimization_workdir": 467, "watcher": 467, "send": [467, 510, 515, 528], "profiling_id": 468, "execute_real_profil": 468, "profiling_detail": 468, "profilerfactori": [469, 474], "load_profiling_detail": 471, "json_path": 471, "profiling_data": [473, 476], "delete_assign": 477, "wsgi": 478, "prepare_environ": 478, "app": [479, 513], "workdir": [479, 487, 495], "history_snapshot_pars": [479, 513, 518], "request_data_processor": [479, 513, 518], "response_gener": [479, 513, 518], "flavour": 480, "executionstatu": 480, "status": 480, "notfoundexcept": 482, "accessdeniedexcept": 482, "deni": 482, "clienterrorexcept": 482, "internalexcept": 482, "subject": [483, 510, 564], "send_respons": 483, "log_nam": 483, "additional_log_nam": [483, 491], "shell": [483, 491, 599], "expir": 484, "expiringdictitem": 484, "expires_at": 484, "expiringdict": 484, "initial_valu": 484, "ttl": 484, "120": [484, 598], "githubinfo": 485, "hw": 486, "hwinfo": 486, "respons": [486, 490, 497, 510, 515, 523, 594], "platform": [486, 532, 562, 569, 577, 592, 594, 604], "hardwar": [486, 528, 532, 533, 553, 562, 566, 567, 586, 590, 591, 592, 593], "get_number_of_socket": 486, "get_distribut": 486, "distibut": 486, "get_bios_vers": 486, "bio": [486, 590], "is_turbo_boost_en": 486, "turbo": [486, 590], "boost": [486, 567, 570, 586, 592], "get_kernel_vers": 486, "get_framework_info": 486, "get_framework_dependency_info": 486, "subdepend": 486, "jsonseri": 488, "serializ": 488, "change_log_level": 489, "optimizationpars": 490, "performancepars": 490, "accuracypars": 490, "benchmarkparserfactori": 490, "profilingpars": 490, "pid": 491, "ncprocess": 492, "aggreg": 492, "get_status_update_funct": 494, "job_typ": 494, "sent": 496, "deprec": [498, 581, 584, 600], "func": [498, 515, 594, 603], "signal": 498, "is_hidden": 498, "get_dataset_path": 498, "get_framework_from_path": 498, "get_file_extens": 498, "is_dataset_fil": 498, "get_predefined_config_path": 498, "normalize_domain": 498, "underscor": 498, "normalize_framework": 498, "normalize_str": 498, "string_to_norm": 498, "get_model_zoo_config_path": 498, "model_dict": 498, "get_model_zoo_model_path": 498, "check_modul": 498, "get_module_vers": 498, "mb": 498, "add_unit": 498, "load_model_config": 498, "load_dataloader_config": 498, "load_transforms_config": 498, "load_transforms_filter_config": 498, "meaning": [498, 566, 589], "load_precisions_config": 498, "load_pruning_details_config": 498, "get_default_pruning_config_path": 498, "load_model_wise_param": 498, "load_metrics_config": 498, "get_metrics_dict": 498, "load_help_nc_param": 498, "replace_with_valu": 498, "file_path": 498, "verify_file_path": 498, "determine_ip": 498, "ip": 498, "is_development_env": 498, "nc_mode": 498, "filter_transform": 498, "parse_bool_valu": 498, "release_tag": 498, "releas": [498, 532, 563, 575, 577, 579, 583, 585, 605], "get_shape_from_transform": 498, "shape_elements_ord": 498, "get_height_width_from_s": 498, "parse_to_string_list": 498, "parse_to_float_list": 498, "export_to_csv": 498, "csv": [498, 530, 548], "parse_vers": 498, "string_vers": 498, "are_archive_filenames_valid": 498, "archiv": 498, "malici": 498, "safe_extract_arch": 498, "zipfil": 498, "tarfil": 498, "destination_dir": 498, "member": [498, 527, 533], "safe": [498, 528], "labelbal": [500, 550, 551], "postprocessschema": 501, "sgdoptim": 506, "adamwoptim": 506, "adamoptim": 506, "crossentropylosscriterion": 506, "sparsecategoricalcrossentropycriterion": 506, "knowledgedistillationlosscriterion": 506, "weightcompressionapproach": 506, "parse_dict_value_to_float": 506, "parse_dict_value_to_int": 506, "wiseconfigdetail": 507, "wiseconfig": 507, "acccriterion": 508, "exitpolici": 508, "float_represent": 509, "dumper": 509, "pruner_represent": 509, "logic": [510, 603], "outsid": 510, "create_simple_respons": 510, "gui": [510, 515, 532, 548, 562, 563, 591, 602], "messagequeu": 510, "queue": [510, 515], "servicenotfoundexcept": 512, "unknown": 512, "connector": 514, "routingdefinit": 514, "rout": 514, "realtimeroutingdefinit": 514, "realtim": 514, "deferredroutingdefinit": 514, "separ": [514, 527, 548, 561, 564, 589, 593], "deferredsubprocessroutingdefinit": 514, "spawn": 514, "subprocess": 514, "get_model_graph": 514, "find_pattern_in_graph": 514, "get_system_info": 514, "endpoint": 515, "run_serv": 515, "webserv": 515, "get_tls_arg": 515, "tl": [515, 548], "block_ifram": 515, "werkzeug": 515, "ifram": 515, "csp": 515, "block_snif": 515, "mime": 515, "snif": 515, "require_api_token": 515, "author": [515, 564], "j": [515, 528, 532, 598, 604], "handle_api_cal": 515, "subpath": 515, "allow_api_cal": 515, "page_not_found": 515, "disable_cach": 515, "build_paramet": 515, "flask": [515, 548], "web_socket_publish": 515, "web_socket": 515, "flask_socketio": 515, "socketio": [515, 548], "benchmarkservic": 516, "historysnapshotpars": 517, "history_snapshot": 517, "provide_perform": 517, "modelservic": 519, "optimizationservic": 520, "profilingservic": 521, "processor": [522, 532, 567, 590, 592, 594, 595, 604], "requestdataprocessor": 522, "responsegener": 523, "workloadservic": 524, "welcom": [526, 527, 528, 532, 605], "interest": [527, 532, 599], "foster": 527, "particip": 527, "harass": 527, "experi": [527, 569, 597, 598, 601], "everyon": 527, "regardless": 527, "ag": 527, "bodi": 527, "ethnic": 527, "characterist": 527, "gender": 527, "educ": 527, "socio": 527, "econom": 527, "appear": [527, 548, 580, 586], "race": 527, "religion": 527, "sexual": 527, "orient": 527, "behavior": [527, 528, 533, 559, 568, 599, 601, 603], "contribut": [527, 532], "inclus": 527, "Being": 527, "respect": [527, 559, 591, 598, 603], "viewpoint": 527, "gracefulli": 527, "critic": 527, "focus": [527, 533], "empathi": 527, "toward": [527, 553], "unaccept": 527, "imageri": 527, "unwelcom": 527, "troll": 527, "insult": 527, "derogatori": 527, "comment": [527, 551, 565, 566, 600], "polit": 527, "attack": 527, "privat": 527, "publish": [527, 564, 567, 587, 598], "electron": 527, "explicit": 527, "permiss": 527, "inappropri": 527, "profession": 527, "clarifi": 527, "appropri": [527, 598], "fair": 527, "action": [527, 581, 584], "reject": 527, "commit": [527, 528], "wiki": 527, "issu": [527, 528, 531, 548, 563, 594, 599], "ban": 527, "temporarili": 527, "deem": 527, "threaten": 527, "offens": 527, "harm": 527, "mail": 527, "social": [527, 532, 592], "media": [527, 532, 592], "account": [527, 597, 601], "appoint": 527, "event": [527, 599], "abus": 527, "report": [527, 528, 548, 597], "contact": [527, 596, 597], "complaint": 527, "review": [527, 528], "investig": 527, "circumst": [527, 593], "oblig": 527, "confidenti": [527, 548], "regard": [527, 595], "incid": 527, "good": [527, 594, 601], "faith": 527, "face": [527, 532, 538, 569, 573, 592, 596], "repercuss": 527, "leadership": 527, "faq": [527, 532], "page": [527, 528, 532], "view": [528, 532, 548, 556, 577, 586, 596], "pylint": 528, "flake8": 528, "autopep8": 528, "cover": [528, 557, 561, 592], "would": [528, 566, 567, 591, 594, 598], "adopt": [528, 532, 569, 591, 592, 598], "certif": [528, 548], "agre": 528, "bug": 528, "jira": 528, "ticket": 528, "potenti": [528, 530], "risk": 528, "pr": [528, 565, 581, 584, 596], "reproduc": 528, "submit": [528, 592], "intend": 528, "collabor": [528, 571, 577], "adher": 528, "toolkit": [529, 532, 563, 569, 577, 592, 602], "tracer": 529, "resolv": [529, 531], "floatfunct": 529, "cat": [529, 572], "done": [529, 553, 554, 570, 586, 591, 594], "10004": [529, 530, 533, 550, 553, 554, 557, 559, 562, 567, 589, 593, 603], "neural_compressor": [529, 530, 532, 549, 550, 551, 553, 554, 555, 557, 560, 561, 565, 566, 567, 568, 588, 589, 591, 593, 594, 595, 596, 597, 598, 600, 601, 603], "eval": [529, 550, 569, 594, 599], "fail": 529, "conduct": [529, 566, 574, 586, 602], "imper": 529, "therefor": [529, 566, 591, 594, 596, 598], "lot": [529, 598], "As": [529, 548, 550, 553, 566, 580, 591, 601], "might": [529, 548, 601], "failur": 529, "successfulli": [529, 555, 592], "suggest": [529, 597], "traceabl": 529, "proxi": 529, "tutori": [529, 577, 592, 602], "prototyp": 529, "html": [529, 532, 581, 584], "untrac": 529, "ssd": [529, 604], "resnet34": [529, 604], "r34": 529, "bboxes_labels_scor": 529, "prob": 529, "45": [529, 598, 604], "max_output": 529, "zip": 529, "dbox": 529, "dlabel": 529, "dscore": 529, "decode_singl": 529, "autom": [530, 569, 586, 587, 598], "artifici": 530, "ann": 530, "par": 530, "outperform": 530, "hand": [530, 548], "propos": [530, 533, 553, 567, 591, 598], "lie": 530, "predictor": 530, "4x": [530, 594], "figur": [530, 579, 580, 583, 591], "popul": 530, "inner": 530, "evolutionari": 530, "cycl": 530, "until": [530, 601], "conclud": 530, "met": [530, 559, 567, 594, 599], "yet": [530, 548, 581, 584, 587], "simplest": [530, 572], "launcher": [530, 532, 553, 554, 577, 591, 602], "agent": 530, "nsga2": 530, "supernet": 530, "ofa_mbv3_d234_e346_k357_w1": 530, "acc": [530, 599, 604], "mac": [530, 587], "num_ev": 530, "250": 530, "results_csv_path": 530, "search_result": 530, "dataset_path": 530, "ilsvrc2012": 530, "aim": [530, 532, 569, 591, 598, 601, 602], "mobilenetv3": 530, "lt": [530, 551, 590, 604], "wmt": 530, "en": 530, "de": 530, "guidelin": [531, 532], "mainstream": [532, 602], "learn": [532, 533, 550, 551, 557, 561, 562, 563, 566, 567, 569, 571, 574, 575, 577, 580, 581, 584, 586, 591, 592, 594, 598, 599, 601, 602], "runtim": [532, 533, 534, 550, 556, 559, 562, 571, 576, 577, 593], "workflow": [532, 553, 563, 567, 581, 584, 599, 602], "particular": [532, 591], "wide": [532, 556, 567, 594, 604], "xeon": [532, 563, 564, 567, 590, 592, 594, 595, 604], "scalabl": [532, 563, 567, 590, 592, 594, 595, 604], "flex": [532, 563], "amd": [532, 562, 563, 604], "arm": [532, 562, 563, 604], "nvidia": [532, 562, 563, 591, 594, 604], "bloom": [532, 598], "176b": [532, 598], "7b": [532, 598], "stabl": [532, 548, 563, 592], "diffus": [532, 592, 604], "gpt": [532, 598, 604], "hub": [532, 556, 560, 577], "hug": [532, 592], "vision": [532, 557, 560, 573, 598], "coder": [532, 562, 570, 571, 574, 577, 580, 592], "cloud": [532, 592], "marketplac": [532, 587, 592], "googl": [532, 567, 592], "amazon": [532, 569, 577], "azur": [532, 592], "softwar": [532, 564, 567, 590, 591, 592, 596], "alibaba": [532, 576, 583, 584, 592], "tencent": [532, 592], "taco": [532, 592], "ai": [532, 569, 592, 595, 602], "ecosystem": [532, 592], "lightn": [532, 576], "pip": [532, 548, 555, 558, 560, 563, 571, 574, 579, 581, 583, 584, 596], "wget": [532, 558, 560], "storag": [532, 560, 565, 598], "googleapi": [532, 560], "v1_6": [532, 560], "mobilenet_v1_1": [532, 560], "0_224_frozen": [532, 560], "quick": [532, 559, 602, 603], "overview": 532, "notebook": [532, 602], "oneapi": [532, 563, 592, 602], "analyt": [532, 563, 592, 602], "jupyterlab": [532, 569, 575, 577, 579, 583, 602], "studio": [532, 577, 586, 602], "matrix": [532, 577, 598, 602], "topic": 532, "blog": [532, 592], "medium": [532, 592], "enhanc": [532, 569, 592, 595], "apr": [532, 592], "2023": [532, 598, 604], "still": [532, 566, 592, 594, 595], "mlperf": [532, 592, 604], "5x": [532, 592], "heterogen": [532, 592], "power": [532, 553, 566, 580, 590, 592], "mar": [532, 592], "busi": [532, 592], "jan": [532, 592], "neurip": [532, 592], "oct": [532, 592], "quala": [532, 592], "minilm": [532, 592, 604], "legal": [532, 605], "secur": [532, 590, 592, 605], "idea": [532, 591, 598, 601], "feel": 532, "look": [532, 533, 559, 565, 603], "bridg": [533, 562], "vanilla": [533, 562], "abcadaptor": 533, "__init__": [533, 550, 551, 565, 601], "query_fw_cap": 533, "query_fused_pattern": 533, "he": 533, "besid": [533, 553], "describ": [533, 548, 559, 599], "past": 533, "mainten": 533, "difficult": [533, 598], "abil": [533, 551, 559, 598], "modif": [533, 550, 559, 574], "fragment": 533, "granular": [533, 559, 562, 572, 591, 594, 598, 603], "semant": [533, 559], "mla": [533, 594], "becom": [533, 557], "explor": 533, "inspect_tensor": 533, "op_list": [533, 599], "iteration_list": 533, "inspect_typ": 533, "save_to_disk": 533, "quantization_cfg": 533, "set_tensor": 533, "tensor_dict": 533, "diagnosis_help": 533, "easier": [548, 579, 583, 586, 592], "nightli": [548, 563], "pypi": [548, 563, 581, 584], "conda": [548, 558, 563, 572, 580, 596], "forg": [548, 558, 563], "git": [548, 558, 563], "clone": [548, 563, 579, 583], "cd": [548, 555, 563], "setup": [548, 559, 563, 581, 584, 591], "instruct": [548, 553, 563, 567, 581, 584, 592, 593, 594], "ui": 548, "5000": 548, "338174d13706855fc6924cec7b3a8ae8": 548, "listen": 548, "firewal": 548, "8080": 548, "tf_enable_onednn_opt": [548, 563], "cert": 548, "path_to_cert": 548, "crt": 548, "path_to_private_kei": 548, "encrypt": 548, "insecur": 548, "expos": 548, "forfeit": 548, "client": 548, "extern": 548, "threat": 548, "button": [548, 562, 580, 586], "click": [548, 560, 562, 569, 570, 577, 580, 586, 592, 599], "pop": [548, 586], "recognit": [548, 555, 557, 591, 599], "few": [548, 592, 601], "finish": [548, 580], "chosen": 548, "synthet": 548, "plu": 548, "icon": 548, "unfold": 548, "On": [548, 594], "panel": [548, 581, 584, 586], "navig": 548, "previou": [548, 566, 591, 596, 598, 599, 601, 602], "trash": 548, "visibl": 548, "cursor": 548, "prompt": [548, 555], "confirm": 548, "bottom": 548, "pencil": 548, "light": [548, 554], "blue": 548, "color": 548, "That": 548, "row": [548, 591, 598], "arrow": 548, "line": [548, 555, 562, 569, 574, 575, 591, 599], "checkbox": 548, "column": [548, 591, 598], "chart": [548, 594, 597, 599], "offer": [548, 551], "conveni": [548, 566], "variat": 548, "pictur": 548, "yellow": 548, "remind": 548, "ofa": 548, "fvcore": 548, "autograd": 548, "pymoo": 548, "numba": 548, "ilsvrc": 548, "hour": [548, 601], "One": [548, 551, 555, 562, 591, 592, 601], "dialog": 548, "organ": [548, 603], "cryptographi": 548, "linux": [549, 558, 580, 586], "window": [549, 586, 587], "x86_64": 549, "aarch64": 549, "often": [550, 553, 589, 591], "encount": 550, "consum": 550, "previous": 550, "lack": [550, 558], "faster": [550, 552, 592, 601, 604], "treat": 550, "manner": [550, 553, 568], "300": [550, 551], "input_data": 550, "customis": [550, 551], "ensp": [551, 565, 600], "imagerecord": [551, 555, 603], "image_nam": 551, "cocorecord": 551, "gt": [551, 557, 600], "int64": 551, "style_transf": 551, "content": 551, "tfrecorddataset": 551, "helloworld": [551, 600], "aid": 552, "deploy": [552, 569, 586, 598], "infrastructur": 552, "expens": [553, 566, 601], "deploi": [553, 566, 601], "mobil": [553, 566, 604], "produc": 553, "logit": 553, "softmax": 553, "l": [553, 599, 601], "kd": 553, "distanc": 553, "euclidean": 553, "kullback": 553, "leibler": 553, "patient": 553, "compact": [553, 566, 572, 591], "agnost": 553, "resourc": [553, 591, 601], "convolut": [553, 591, 592], "ia": 553, "attach": [553, 566, 598], "shallow": 553, "depth": [553, 595], "deepest": 553, "deeper": 553, "10006": [553, 554], "student_output": [553, 554], "student_loss": [553, 554], "training_func_for_nc": [553, 554], "distil_loss_conf": 553, "accordingli": [553, 577], "promis": [554, 566, 591], "huge": 554, "heavi": 554, "booster": 554, "degrad": [554, 601], "incorpor": [554, 601], "novel": [554, 569, 580, 586], "place": [554, 563, 591, 599], "illustr": 554, "comb": 554, "distillation_criterion": [554, 566, 589], "q_conf": 554, "horovod": 555, "builtin": 555, "program": [555, 564, 567, 569, 586], "addition": [555, 601], "enable_eager_execut": 555, "yaml_file_path": 555, "pre_process": 555, "simpli": [555, 568, 569, 571, 574, 586], "evaluation_result": 555, "evaluation_time_cost": 555, "partit": 555, "distributedsampl": 555, "train_sampl": 555, "train_dataset": [555, 594], "num_replica": 555, "rank": 555, "train_load": 555, "train_kwarg": 555, "adadelta": 555, "distributedoptim": 555, "named_paramet": 555, "broadcast_paramet": 555, "root_rank": 555, "broadcast_optimizer_st": 555, "set_epoch": 555, "batch_idx": 555, "zero_grad": [555, 566, 591], "nll_loss": 555, "log_interv": 555, "0f": 555, "tloss": 555, "6f": 555, "dry_run": 555, "test_func": 555, "host": 555, "num_of_process": 555, "002": 555, "ssh": [555, 586], "readm": 555, "exactli": [555, 570], "resnet50_v1": [555, 566], "topk": [555, 565, 566, 594], "32": [555, 561, 590, 591, 598, 604], "resizecropimagenet": [555, 600], "realiz": [555, 565, 588, 595, 597], "tow": 555, "node1": 555, "node2": 555, "TO": [555, 571], "your_node1_nam": 555, "your_node2_nam": 555, "resnet50_fp32_pretrained_model": 555, "nc_resnet50_v1": 555, "resnet": [555, 560, 604], "varieti": [556, 593, 601], "demonstr": [556, 569, 591, 599], "10k": [556, 560], "speedup": [556, 562, 594], "2x": [556, 562, 590], "vnni": [556, 562, 593, 594], "exchang": 557, "howev": [557, 591, 598], "hope": 557, "briefli": [557, 566, 591, 598], "matur": 557, "major": [557, 561, 594, 598], "reus": 557, "inc_model": [557, 568], "fp32_onnx_config": 557, "verifi": 557, "gap": [557, 568], "matmulintegertofloat": 557, "matmulinteg": 557, "toolchain": 558, "bare": 558, "metal": 558, "sudo": [558, 572], "apt": [558, 563, 572, 580], "python3": 558, "dev": [558, 579, 583], "distutil": 558, "essenti": 558, "libgl1": 558, "mesa": 558, "glx": 558, "libglib2": 558, "numactl": [558, 572, 580], "ln": 558, "sf": 558, "usr": 558, "incompat": 558, "88": [558, 597, 604], "80": [558, 598, 599, 604], "pyobject": 558, "reinstal": 558, "importerror": 558, "libgl": 558, "No": [558, 566, 590, 592], "yum": [558, 563], "opencv": [558, 580], "pend": 558, "27": [558, 563, 604], "alemb": [558, 563], "friendli": [559, 566, 598, 603], "dive": [559, 602], "unless": 559, "purpos": [559, 567, 586, 593, 594], "let": [559, 574, 593, 603], "syntax": 559, "go": [559, 581, 584, 593, 600], "up1": 559, "up2": 559, "valid_mixed_precis": 559, "per_tensor": [559, 594, 603], "addn": 559, "grappler_optim": 559, "constfold": 559, "arithmet": 559, "debug_stripp": 559, "jupyt": [560, 577, 579, 580, 583], "lab": [560, 579, 580, 581, 583, 584], "concept": [561, 597, 602], "rather": 561, "custom_metr": 561, "refin": [561, 591], "These": 562, "broad": [562, 575, 602], "420": 562, "geomean": 562, "snippet": 562, "upload": [562, 581, 584], "dispatch": 562, "qintegerop": [562, 594], "plan": 562, "success": 563, "re": [563, 586], "uninstal": [563, 586], "frequent": 563, "ask": 563, "consolid": 563, "latest": [563, 592, 596], "eas": [563, 571, 592], "along": 563, "streamlin": 563, "scienc": 563, "mani": [563, 601, 603], "websit": 563, "anaconda": 563, "suit": [563, 587, 599], "esri": 563, "formerli": 563, "skylak": 563, "cascad": 563, "lake": [563, 567, 592], "cooper": [563, 567, 592], "ic": [563, 591, 592], "sapphir": 563, "rapid": 563, "hbm": 563, "arctic": 563, "sound": 563, "pont": 563, "vecchio": 563, "cento": 563, "ubuntu": [563, 590], "04": [563, 590, 604], "fortensorflow": 563, "forpytorch": 563, "onednn": [563, 594], "newer": 563, "copyright": 564, "accompani": 564, "research": [564, 598], "wish": 564, "bibtex": 564, "misc": 564, "feng": 564, "tian": 564, "hanwen": 564, "haihao": [564, 591], "shen": [564, 591], "suyu": 564, "chen": 564, "titl": [564, 587], "howpublish": 564, "year": 564, "logo": [564, 590], "atom": 564, "phi": 564, "pentium": 564, "vtune": 564, "corpor": [564, 590], "subsidiari": [564, 590], "brand": [564, 590], "claim": [564, 590], "popularli": 565, "industri": [565, 592], "label_map": 565, "decis": 565, "ap": 565, "curv": 565, "turn": [565, 580], "target_boxes_num": 565, "str_label": 565, "int_label": 565, "inturn": 565, "cocomap": 565, "vocmap": 565, "categor": 565, "multiclass": 565, "multilabel": 565, "multi_metr": 565, "newmetr": 565, "reset": 565, "reflect": [565, 590, 600], "deliv": [566, 592], "upgrad": 566, "veri": [566, 587, 594, 601], "speed": [566, 577, 591, 592, 594, 601], "fundament": 566, "comprehens": [566, 602], "kind": 566, "resort": 566, "automodelforsequenceclassif": 566, "autotoken": 566, "val_dataset": [566, 594], "val_dataload": [566, 594], "worker": [566, 594], "ping_memori": [566, 594], "formul": 566, "effort": 566, "written": 566, "onnxrt_integ": [566, 603], "onnxrt_qlinear": [566, 603], "unsupport": 566, "image_tensor": [566, 603], "post_training_dynamic_qu": [566, 593, 601], "1000": [566, 603], "2000": 566, "sampling_s": [566, 603], "model_wis": [566, 603], "op_dict": 566, "op_wis": [566, 599, 603], "sigopt_api_token": [566, 597, 601], "sigopt_project_id": [566, 597, 601], "sigopt_experiment_nam": [566, 597, 601], "demo": 566, "600": [566, 604], "training_arg": 566, "emul": [566, 594], "trainer": [566, 577], "similar": [566, 593, 598, 601, 603], "maxim": [566, 591, 601], "pruning_func": 566, "num_train_epoch": [566, 591], "train_dataload": [566, 591, 594], "n_gpu": 566, "gradient_accumulation_step": 566, "clip_grad_norm_": 566, "max_grad_norm": 566, "rate": [566, 591, 594], "start_epoch": [566, 593, 603], "end_epoch": [566, 593, 603], "97": [566, 598, 604], "newli": [566, 591], "on_after_optimizer_step": [566, 591], "layer3": [566, 591], "layer2": [566, 591, 594], "lr_schedul": [566, 591], "weight_decai": [566, 603], "0004": 566, "nesterov": [566, 603], "randomresizedcrop": [566, 600], "totensor": [566, 600], "485": 566, "456": 566, "406": 566, "nepoch": 566, "cnt": 566, "loss_sum": 566, "iter_bar": 566, "tqdm": 566, "desc": 566, "teacher_logit": 566, "train_fun": 566, "training_func": 566, "recent": [566, 567], "growth": [566, 567, 591], "complex": [566, 567, 591], "significantli": [566, 567, 591, 601], "bandwidth": [566, 567], "exit_polici": [566, 603], "determinist": 566, "arbitrari": [566, 589], "reli": [566, 598], "prune_conf": 566, "quantization_aware_training_conf": 566, "aforement": 566, "inset": 566, "p_conf": [566, 589], "ssd_mobilenet_v1": 566, "benchmarkconf": 566, "half": [567, 577], "sixteen": 567, "launch": [567, 587], "3rd": [567, 592, 594, 595], "gen": [567, 592, 595], "codenam": 567, "x86": 567, "avx512": [567, 594], "vcvtne2ps2bf16": 567, "vcvtneps2bf16": 567, "vdpbf16p": 567, "consequ": 567, "avx512_bf16": 567, "cuda": [567, 569, 571, 594], "persist": 568, "brought": [568, 570, 577, 594], "tf2": 568, "h5": 568, "hybridblock": 568, "0000": 568, "saved_result": 568, "simplifi": [569, 580, 586], "subsequ": [569, 586], "acquir": 569, "analysi": [569, 586, 597], "heurist": [569, 586], "rule": [569, 591], "great": 569, "facilit": 569, "autocast": 569, "simultan": [569, 589, 593], "my_model": 569, "no_grad": 569, "memory_format": 569, "112": [569, 604], "rand": [569, 598], "plugin": [569, 587], "aw": [569, 577, 592, 604], "sagemak": [569, 577], "inlin": [569, 574, 577], "neural_cod": [569, 571, 573, 574, 575, 577], "superbench": 569, "enjoi": [570, 574, 577], "caus": [570, 591], "rebuild": [570, 579, 583], "reload": [570, 587], "modern": 571, "democrat": [571, 592], "programm": [571, 577, 586], "nano_bf16_channels_last": 571, "resnet18": [571, 604], "nano_bf16_ipex_channels_last": 571, "nano_bf16_ipex": 571, "nano_bf16": 571, "nano_fp32_channels_last": 571, "nano_fp32_ipex_channels_last": 571, "nano_fp32_ipex": 571, "nano_gpu_to_cpu": 571, "nano_int8": 571, "nano_jit_bf16_channels_last": 571, "nano_jit_bf16_ipex_channels_last": 571, "nano_jit_bf16_ipex": 571, "nano_jit_bf16": 571, "nano_jit_fp32_channels_last": 571, "nano_jit_fp32_ipex_channels_last": 571, "nano_jit_fp32_ipex": 571, "nano_jit_fp32": 571, "nano_onnxruntime_fp32": 571, "nano_onnxruntime_int8_qlinear": 571, "openvino": 571, "nano_openvino_fp32": 571, "nano_openvino_int8": 571, "bc": [572, 580], "conda_prefix": 572, "echo": 572, "tradit": [572, 591], "libjemalloc": 572, "libiomp5": 572, "home": 572, "lib": 572, "ld_preload": 572, "malloc_conf": 572, "oversize_threshold": 572, "background_thread": 572, "metadata_thp": 572, "dirty_decay_m": 572, "9000000000": 572, "muzzy_decay_m": 572, "kmp_affin": 572, "kmp_blocktim": 572, "dnnl_primitive_cache_capac": 572, "cpufreq": 572, "scaling_governor": 572, "powersav": 572, "tee": 572, "pytorch_jit_script": [573, 576], "pytorch_channels_last": [573, 576], "run_bench": 573, "patch": [573, 586], "patch_path": 573, "your_patch_path": 573, "sweep": 573, "sweep_object": 573, "bench_config": 573, "bench_featur": 573, "sai": 574, "run_glu": [574, 575], "requisit": 574, "task_nam": [574, 575], "do_ev": [574, 575], "remain": 574, "itself": 574, "run_glue_optim": 574, "static_ipex": 574, "auto_qu": 575, "v4": [575, 604], "albert": [575, 604], "sst2": 575, "alexnet": [575, 604], "pytorch_amp": 576, "optimize_for_infer": 576, "pytorch_jit_trac": 576, "pytorch_jit_script_ofi": 576, "pytorch_jit_trace_ofi": 576, "torchdynamo": 576, "pytorch_torchdynamo_jit_script": 576, "pytorch_torchdynamo_jit_trac": 576, "pytorch_torchdynamo_jit_script_ofi": 576, "pytorch_torchdynamo_jit_trace_ofi": 576, "pytorch_inc_bf16": 576, "pytorch_inc_static_quant_fx": 576, "pytorch_inc_static_quant_ipex": 576, "pytorch_inc_dynamic_qu": 576, "pytorch_ipex_fp32": 576, "pytorch_ipex_bf16": 576, "pytorch_ipex_int8_static_qu": 576, "pytorch_ipex_int8_dynamic_qu": 576, "blade": 576, "disc": 576, "pytorch_aliblad": 576, "pytorch_lightning_bf16_cpu": 576, "tensorflow_amp": 576, "keras_amp": 576, "tensorflow_inc": 576, "keras_inc": 576, "onnx_inc_static_quant_qlinear": 576, "onnx_inc_static_quant_qdq": 576, "onnx_inc_dynamic_qu": 576, "optimum": [576, 577], "pytorch_inc_huggingface_optimum_stat": 576, "pytorch_inc_huggingface_optimum_dynam": 576, "intel_extension_for_transform": 576, "bigdl": [576, 577], "nano": [576, 577], "nano_": 576, "inc_auto": 576, "delight": 577, "announc": 577, "v": [577, 586, 601, 603], "500": 577, "innov": [577, 592, 602], "isa": 577, "xpu": 577, "delta": 577, "acc_delta": 577, "int8_acc": 577, "fp32_acc": 577, "ext": [579, 581, 583, 584, 585], "nodej": [579, 583], "jlpm": [579, 583], "pin": [579, 583], "yarn": [579, 583], "npm": [579, 580, 583], "lieu": [579, 583], "labextens": [579, 580, 583], "typescript": [579, 583], "watch": [579, 583], "termin": [579, 580, 583], "immedi": [579, 583, 591], "refresh": [579, 583], "wait": [579, 583, 586], "rebuilt": [579, 583], "symlink": [579, 583], "down": 580, "enter": [580, 586], "blank": 580, "cell": 580, "gain": [580, 589, 592], "mkl": 580, "jemalloc": 580, "pip3": 580, "headless": 580, "pyproject": [581, 584], "toml": [581, 584], "twine": [581, 584], "whl": [581, 584], "dist": [581, 584], "sdist": [581, 584], "bdist_wheel": [581, 584], "frontend": [581, 584], "login": [581, 584, 597], "cut": [581, 584], "fork": [581, 584], "admin_github_token": [581, 584], "pypi_token": [581, 584], "npm_token": [581, 584], "secret": [581, 584], "draft": [581, 584], "changelog": [581, 584, 585], "pkg": [581, 584], "bot": [581, 584], "pick": [581, 584, 587], "feedstock": [581, 584], "hatch": 584, "notabl": 585, "vscode": [585, 587], "daili": 586, "give": [586, 601], "advantag": [586, 591, 593, 601], "remot": 586, "market": 586, "upper": 586, "sidebar": 586, "hover": 586, "track": [586, 597], "argpars": 586, "diff": 586, "manifest": 587, "declar": 587, "palett": 587, "registercommand": 587, "amodio": 587, "tsl": 587, "matcher": 587, "dbaeumer": 587, "eslint": 587, "press": 587, "f5": 587, "ctrl": [587, 604], "cmd": 587, "hello": 587, "world": 587, "breakpoint": 587, "consol": 587, "relaunch": 587, "toolbar": 587, "node_modul": 587, "viewlet": 587, "dropdown": 587, "runner": 587, "startup": 587, "bundl": 587, "multi_object": 588, "benefit": [589, 591], "instanti": 589, "platinum": [590, 604], "8358": 590, "manufactur": 590, "m50cyp2sbstd": 590, "se5c620": 590, "86b": 590, "0005": 590, "2202160810": 590, "microcod": 590, "0xd000332": 590, "irq": 590, "60ghz": 590, "6chz": 590, "perf": 590, "512gb": 590, "16x32gb": 590, "ddr4": 590, "3200": 590, "mt": 590, "nic": 590, "1x": 590, "ethernet": 590, "100mb": 590, "i350": 590, "gigabit": 590, "drive": 590, "intel_ssdsckkb48": 590, "447": 590, "1g": 590, "publicli": 590, "degre": 590, "mark": 590, "trademark": 590, "art": 591, "increasingli": 591, "crucial": 591, "salient": 591, "nonzero": 591, "irregular": 591, "anywher": 591, "2in4": 591, "amper": 591, "delet": 591, "due": [591, 594, 598, 599], "oc": 591, "kh": 591, "kw": 591, "shrink": 591, "examin": 591, "lowest": [591, 601], "fastform": 591, "formula": [591, 598], "emsp": 591, "partial": [591, 594], "downstream": 591, "co": 591, "discourag": 591, "push": [591, 598], "penal": 591, "parameter": 591, "exemplifi": 591, "complement": 591, "pruner1": 591, "pruner2": 591, "mention": 591, "readi": 591, "hesit": 591, "sst": [591, 604], "flan": 591, "t5": 591, "english": 591, "romanian": 591, "yolov5": 591, "signific": [591, 592, 594, 598], "reduct": [591, 603], "namhoon": 591, "lee": 591, "thalaiyasingam": 591, "ajanthan": 591, "philip": 591, "torr": 591, "2019": 591, "zafrir": 591, "ofir": 591, "ariel": 591, "larei": 591, "boudoukh": 591, "mosh": 591, "wasserblat": 591, "preprint": [591, 598], "2111": 591, "05754": 591, "2021": 591, "amx": 592, "4th": 592, "mleffici": 592, "dec": 592, "wechat": 592, "deepen": 592, "foundat": 592, "intellig": 592, "vmware": 592, "virtual": 592, "applianc": 592, "bitnami": 592, "nov": 592, "sota": 592, "plug": 592, "twitter": 592, "linkedin": 592, "zone": 592, "land": 592, "gcp": 592, "pat": 592, "keynot": 592, "intelon": 592, "sep": 592, "chines": 592, "aug": 592, "purif": 592, "sacrif": 592, "jun": 592, "partner": 592, "feb": 592, "joint": 592, "msft": 592, "bilibili": 592, "gestalt": 592, "ml": 592, "doubl": 592, "reconstruct": 592, "abound": 592, "lpot": [592, 596], "nextplatform": 592, "cern": 592, "gan": 592, "3dgan": 592, "iml": 592, "workshop": 592, "asplo": 592, "18": [592, 604], "highli": 592, "intelcaff": 592, "aris": 593, "tell": 593, "henc": 593, "onnxrt_qoper": 593, "quant_aware_train": 593, "weight_compress": [593, 603], "initial_spars": [593, 603], "prune_typ": [593, 603], "basic_magnitud": [593, 603], "update_frequ": 593, "prune_domain": 593, "tile_pattern_1x1": 593, "invent": 594, "int4": 594, "cost": 594, "theoret": 594, "affin": 594, "zeropoint": 594, "asymmetr": [594, 601], "255": [594, 598], "overflow": 594, "solv": [594, 596], "fbgemm": 594, "unseen": 594, "enough": 594, "peopl": 594, "mimic": 594, "fact": 594, "ultim": 594, "pain": 594, "lossi": 594, "understand": [594, 599, 602], "philosophi": 594, "neither": 594, "nor": 594, "val_load": 594, "top1": [594, 604], "avg": 594, "themselv": 594, "tensorrtexecutionprovid": 594, "cudaexecutionprovid": 594, "ON": 595, "forc": 595, "postposttrainingquantconfig": 595, "bf16wrapper": 595, "retrac": 595, "site": 596, "assist": 596, "comparison": [596, 599], "sed": 596, "your_script": 596, "backbon": 597, "interact": 597, "sigopt_experiment_id": 597, "nc": [597, 601], "certain": 597, "suffici": 597, "ordinari": 597, "capac": 597, "receiv": 597, "latenc": [597, 601], "draw": [597, 601], "mobilenet": [597, 604], "durat": 597, "8266": 597, "8372": 597, "2132": 597, "83": [597, 598, 604], "7495": 597, "8299": 597, "8294": 597, "85": [597, 598, 604], "0837": 597, "8291": 597, "4469": 597, "llm": 598, "gigant": 598, "systemat": 598, "outlier": 598, "quantif": 598, "difficulti": 598, "mathemat": 598, "allevi": 598, "coarsest": 598, "finer": [598, 601], "matric": 598, "similarli": 598, "finest": 598, "consumpt": 598, "why": [598, 599], "suppos": 598, "6839": 598, "4741": 598, "7451": 598, "9301": 598, "1742": 598, "6835": 598, "frac": 598, "q_min": 598, "q_max": 598, "clip": 598, "zp": 598, "q_x": 598, "clamp_": 598, "round_": 598, "w_q": 598, "00296431384049356": 598, "59": [598, 604], "172": 598, "192": 598, "w_dq": 598, "1220": 598, "0500": 598, "1430": 598, "2570": 598, "1890": 598, "mseloss": 598, "1983354538679123": 598, "6848": 598, "4743": 598, "7440": 598, "9308": 598, "1749": 598, "385297635664756e": 598, "affect": 598, "quantize_per_channel": 598, "x_tmp": 598, "detach": 598, "keepdim": 598, "divid": [598, 601], "dequantize_per_channel": 598, "0029": [598, 604], "0036": 598, "162": [598, 604], "48": [598, 604], "72": [598, 604], "93": [598, 604], "207": [598, 604], "139": [598, 604], "6837": 598, "4734": 598, "1751": 598, "6821": 598, "637690492221736e": 598, "6376e": 598, "3852e": 598, "cdot": 598, "quantize_per_tensor_absmax": 598, "n_bit": 598, "div_": 598, "0806": 598, "7589": 598, "6038": 598, "3815": 598, "5040": 598, "7174": 598, "5444": 598, "5826": 598, "7772": 598, "5555": 598, "3740": 598, "3253": 598, "0698": 598, "1381": 598, "5972": 598, "0086": 598, "0737": 598, "8298": 598, "6883": 598, "2991": 598, "1601": 598, "6506": 598, "8246": 598, "3924": 598, "3845": 598, "8768": 598, "w_scale": 598, "x_q": 598, "x_scale": 598, "84": [598, 604], "0059755356051027775": 598, "89": [598, 604], "119": [598, 604], "57": [598, 604], "91": [598, 604], "006533813662827015": 598, "y_q": 598, "17509": 598, "7608": 598, "4055": 598, "16599": 598, "21020": 598, "10016": 598, "9860": 598, "22444": 598, "y_dq": 598, "6836": 598, "2970": 598, "1583": 598, "6481": 598, "8207": 598, "3911": 598, "3850": 598, "8763": 598, "prove": 598, "simplic": 598, "middl": 598, "denot": 598, "fp1": 598, "fp2": 598, "subsect": [598, 603], "explain": 598, "suppress": 598, "straightforward": 598, "intuit": 598, "x1": [598, 601], "x2": [598, 601], "larger": 598, "herebi": 598, "sq": 598, "torchscript": 598, "overhead": 598, "stai": 598, "hardtanh": 598, "t5norm": 598, "llamanorm": 598, "groupnorm": 598, "lambada": 598, "sweet": 598, "spot": 598, "region": 598, "bigscienc": 598, "560m": 598, "65": [598, 604], "63": [598, 604], "44": [598, 604], "66": [598, 604], "76": [598, 604], "1b7": 598, "71": [598, 604], "43": [598, 604], "67": [598, 604], "78": [598, 600, 604], "56": [598, 604], "58": [598, 604], "55": [598, 604], "3b": 598, "73": [598, 604], "69": [598, 604], "74": [598, 604], "7b1": 598, "77": [598, 604], "75": [598, 604], "46": [598, 604], "82": [598, 604], "facebook": 598, "125m": 598, "70": [598, 604], "94": [598, 600, 604], "79": [598, 599, 604], "60": [598, 604], "25": [598, 604], "81": [598, 604], "26": [598, 604], "39": [598, 604], "68": [598, 600, 604], "eleutherai": 598, "6b": 598, "96": [598, 604], "jason": 598, "wei": 598, "emerg": 598, "transact": 598, "yvinec": 598, "edouard": 598, "proceed": 598, "cvf": 598, "winter": 598, "xiui": 598, "2209": 598, "13325": 598, "xiao": 598, "guangxuan": 598, "2211": 598, "10438": 598, "discov": 599, "valuabl": 599, "instrument": 599, "writer": 599, "_pre_eval_hook": 599, "_post_eval_hook": 599, "submodul": 599, "whitelist": 599, "_recordingobserv": 599, "output_tensors_dict": 599, "current_it": 599, "get_tensor_valu": 599, "_observer_forward_hook": 599, "activation_post_process": 599, "_add_observer_": 599, "named_children": 599, "leaf": 599, "add_modul": 599, "register_forward_hook": 599, "dump_tim": 599, "summarywrit": 599, "_acc": 599, "tune_": 599, "add_graph": 599, "get_observer_dict": 599, "observer_dict": 599, "is_quant": 599, "add_histogram": 599, "bind_al": 599, "logdir_spec": 599, "tune_0_acc0": 599, "tune_1": 599, "tune_1_acc0": 599, "four": 599, "baseline_acc_0": 599, "776": 599, "tune_1_acc_0": 599, "095": 599, "runs_v3": 599, "image_recognit": 599, "run_tuning_dump_tensor": 599, "sh": 599, "inceptionv3": 599, "v0": 599, "cg": 599, "conv0": 599, "bash": 599, "run_tun": 599, "topologi": 599, "inception_v3": 599, "dataset_loc": 599, "inceptionv3_fp32_pretrained_model": 599, "nc_inceptionv3": 599, "inceptionv3_dump_tensor": 599, "poor": 599, "eightbit": 599, "disappear": 599, "centercrop": 600, "randomcrop": 600, "cropres": 600, "decodeimag": 600, "jpeg": 600, "encodejp": 600, "alignimagechannel": 600, "116": 600, "103": 600, "017": 600, "bilinearimagenet": [600, 603], "topilimag": 600, "padding_mod": 600, "border": 600, "pixel": 600, "colorjitt": 600, "bright": 600, "satur": 600, "hue": 600, "jitter": 600, "tondarrai": 600, "quickli": [601, 602], "travers": 601, "human": 601, "concret": 601, "insight": 601, "aggress": 601, "classic": 601, "six": 601, "At": 601, "ii": 601, "iii": 601, "post_training_auto_qu": 601, "iv": 601, "vi": 601, "increment": 601, "primari": 601, "highest": 601, "spent": 601, "hawq_v2_loss": 601, "model_loss": 601, "black": 601, "come": 601, "compli": 601, "posterior": 601, "focu": 601, "short": 601, "never": 601, "loglevel": 601, "endlessli": 601, "perspect": 601, "smbo": 601, "trial": 601, "appl": 601, "surrog": 601, "repeat": 601, "quantil": 601, "densiti": 601, "parzen": 601, "greatest": 601, "dai": 601, "next_tune_cfg": 601, "overridden": 601, "cluster": 601, "seamlessli": 601, "mpi": 601, "replic": 601, "replica": 601, "fed": 601, "handler": 601, "synchron": 601, "slave": 601, "abctunestrategi": 601, "familiar": 602, "mobilenet_v1": 603, "hyper": 603, "40": [603, 604], "06": [603, 604], "beta_1": 603, "beta_2": 603, "epsilon": 603, "sparsecategoricalcrossentropi": 603, "sum_over_batch_s": 603, "from_logit": 603, "54": [603, 604], "19": [603, 604], "overal": 603, "8380": 604, "visit": 604, "performancethroughput": 604, "sec": 604, "86": 604, "00": 604, "170": 604, "82x": 604, "92": 604, "85x": 604, "61": 604, "83x": 604, "densenet": 604, "121": 604, "274": 604, "148": 604, "161": 604, "132": 604, "35": 604, "39x": 604, "169": 604, "38": 604, "36": 604, "191": 604, "118": 604, "61x": 604, "cnn": 604, "incept": 604, "37": 604, "84x": 604, "resnet101": 604, "21x": 604, "70x": 604, "51": 604, "14x": 604, "955": 604, "328": 604, "91x": 604, "709": 604, "282": 604, "51x": 604, "v3": 604, "337": 604, "160": 604, "11x": 604, "438": 604, "204": 604, "223": 604, "105": 604, "12x": 604, "10x": 604, "47": 604, "1347": 604, "439": 604, "07x": 604, "1192": 604, "492": 604, "42x": 604, "412": 604, "376": 604, "662": 604, "397": 604, "66x": 604, "299": 604, "23": 604, "154": 604, "93x": 604, "476": 604, "227": 604, "fashion": 604, "2734": 604, "1299": 604, "498": 604, "178": 604, "79x": 604, "427": 604, "173": 604, "47x": 604, "resnetv2": 604, "194": 604, "146": 604, "33x": 604, "237": 604, "187": 604, "27x": 604, "152": 604, "155": 604, "38x": 604, "302": 604, "215": 604, "40x": 604, "346": 604, "312": 604, "277": 604, "60x": 604, "273": 604, "31x": 604, "18x": 604, "53x": 604, "24x": 604, "vgg16": 604, "219": 604, "vgg19": 604, "193": 604, "11506": 604, "9665": 604, "19x": 604, "xception": 604, "262": 604, "137": 604, "barthez": 604, "143": 604, "02x": 604, "20x": 604, "209": 604, "08x": 604, "221": 604, "stsb": 604, "218": 604, "16x": 604, "62": 604, "57x": 604, "55x": 604, "56x": 604, "53": 604, "89x": 604, "blendcnn": 604, "4885": 604, "3715": 604, "camembert": 604, "206": 604, "09x": 604, "deberta": 604, "125": 604, "366": 604, "197": 604, "399": 604, "flaubert": 604, "592": 604, "385": 604, "54x": 604, "wikitext": 604, "hubert": 604, "446": 604, "181": 604, "46x": 604, "layoutlm": 604, "longform": 604, "49": 604, "mbart": 604, "625": 604, "451": 604, "lvwerra": 604, "pegasu": 604, "samsum": 604, "peleenet": 604, "402": 604, "29x": 604, "pokemon": 604, "275": 604, "334": 604, "48x": 604, "reform": 604, "crime": 604, "punish": 604, "153": 604, "06x": 604, "657": 604, "327": 604, "01x": 604, "812": 604, "344": 604, "36x": 604, "360": 604, "23x": 604, "resnext101": 604, "32x8d": 604, "182": 604, "squeezebert": 604, "195": 604, "150": 604, "30x": 604, "75x": 604, "transfo": 604, "xl": 604, "41x": 604, "wave2vec2": 604, "22x": 604, "102": 604, "00x": 604, "115": 604, "17x": 604, "yolo": 604, "232": 604, "28x": 604, "664": 604, "329": 604, "832": 604, "338": 604, "433": 604, "164": 604, "63x": 604, "836": 604, "1396": 604, "463": 604, "90x": 604, "159": 604, "32x": 604, "968": 604, "473": 604, "05x": 604, "958": 604, "477": 604, "arcfac": 604, "126": 604, "78x": 604, "298": 604, "124": 604, "624": 604, "254": 604, "45x": 604, "caffenet": 604, "1432": 604, "540": 604, "65x": 604, "1460": 604, "357": 604, "265": 604, "35x": 604, "86x": 604, "524": 604, "duc": 604, "efficientnet": 604, "1211": 604, "758": 604, "856": 604, "762": 604, "emot": 604, "ferplu": 604, "925": 604, "694": 604, "fcn": 604, "25x": 604, "googlenet": 604, "771": 604, "571": 604, "763": 604, "579": 604, "hf": 604, "156": 604, "multilingu": 604, "99x": 604, "199": 604, "104": 604, "73x": 604, "449": 604, "74x": 604, "l12": 604, "h384": 604, "466": 604, "247": 604, "88x": 604, "l6": 604, "523": 604, "354": 604, "183": 604, "107": 604, "spanbert": 604, "208": 604, "795": 604, "780": 604, "591": 604, "515": 604, "15x": 604, "2370": 604, "1526": 604, "2216": 604, "1506": 604, "2078": 604, "1028": 604, "1762": 604, "76x": 604, "mobilenetv2": 604, "2615": 604, "1645": 604, "59x": 604, "2461": 604, "1674": 604, "766": 604, "431": 604, "77x": 604, "575": 604, "430": 604, "34x": 604, "747": 604, "564": 604, "594": 604, "590": 604, "643": 604, "253": 604, "shufflenet": 604, "2354": 604, "1461": 604, "1850": 604, "1368": 604, "squeezenet": 604, "2484": 604, "1912": 604, "2526": 604, "1911": 604, "710": 604, "549": 604, "622": 604, "497": 604, "652": 604, "507": 604, "573": 604, "470": 604, "527": 604, "396": 604, "68x": 604, "tini": 604, "647": 604, "514": 604, "26x": 604, "ultrafac": 604, "314": 604, "50x": 604, "304": 604, "316": 604, "315": 604, "zfnet": 604, "462": 604, "268": 604, "72x": 604, "465": 604, "62x": 604, "436": 604, "270": 604, "429": 604, "92x": 604, "94x": 604, "331": 604, "242": 604, "37x": 604, "98x": 604, "taskdataset": 604, "accuracyspars": 604, "ratiospars": 604, "commentsbalancedor": 604, "unbalanc": 604, "mini": 604, "answeringsquad": 604, "87f1": 604, "momentumunbalanc": 604, "momentumbalanc": 604, "90f1": 604, "59f1": 604, "23f1": 604, "classificationmrpc": 604, "52f1": 604, "26f1": 604, "classificationsst": 604, "61accuraci": 604, "recognitionimagenet": 604, "95top1": 604, "2x1": 604, "v5s6": 604, "detectioncoco": 604, "ap0": 604, "404": 604, "6ap0": 604, "393": 604, "584": 604, "34f1": 604, "lassounbalanc": 604, "classificationmnli": 604, "mm": 604, "allbalanc": 604, "32accuraci": 604, "sensitivitybalanc": 604, "classificationqqp": 604, "classificationqnli": 604, "54accuraci": 604, "em": 604, "7965": 604, "wideresnet40": 604, "9522": 604, "8178": 604, "0213": 604, "8235": 604, "027": 604, "5494": 604, "7153": 604, "5540": 604, "0046": 604, "5523": 604, "vgg": 604, "bn": 604, "7022": 604, "7415": 604, "7025": 604, "0003": 604, "wip": 604, "6739": 604, "7399": 604, "6845": 604, "0106": 604, "7034": 604, "8382": 604, "bilstm": 604, "8314": 604, "9403": 604, "9048": 604, "0734": 604, "7323": 604, "8256": 604, "8084": 604, "8814": 604, "7442": 604, "8371": 604, "0119": 604, "0115": 604, "tinybert": 604, "8018": 604, "8044": 604, "8363": 604, "8411": 604, "8025": 604, "8074": 604, "0007": 604, "0030": 604, "8626": 604, "8213": 604, "9091": 604, "8782": 604, "8684": 604, "8259": 604, "0058": 604, "distilroberta": 604, "6057": 604, "6455": 604, "6187": 604, "0130": 604, "c6i": 604, "2xlarg": 604, "c6a": 604, "c6g": 604, "a100cuda": 604, "executionprovid": 604}, "objects": {"": [[0, 0, 0, "-", "644ec953a7dc_pruning_support"], [1, 0, 0, "-", "6ece06672ed3_v1_14"], [2, 0, 0, "-", "6f0d0f71d92e_v1_13"], [3, 0, 0, "-", "9e89549a08c8_v1_11"], [4, 0, 0, "-", "block_mask"], [5, 0, 0, "-", "env"], [292, 0, 0, "-", "neural_compressor"]], "6ece06672ed3_v1_14": [[1, 1, 1, "ece06672ed3_v1_14.update_dataloaders", "update_dataloaders"], [1, 1, 1, "ece06672ed3_v1_14.update_transformations", "update_transformations"]], "env": [[5, 1, 1, "", "run_migrations_offline"], [5, 1, 1, "", "run_migrations_online"]], "neural_compressor": [[7, 0, 0, "-", "adaptor"], [154, 0, 0, "-", "algorithm"], [157, 0, 0, "-", "benchmark"], [161, 0, 0, "-", "compression"], [174, 0, 0, "-", "conf"], [176, 0, 0, "-", "config"], [177, 0, 0, "-", "contrib"], [202, 0, 0, "-", "data"], [254, 0, 0, "-", "experimental"], [299, 0, 0, "-", "metric"], [301, 0, 0, "-", "mix_precision"], [303, 0, 0, "-", "model"], [311, 0, 0, "-", "objective"], [312, 0, 0, "-", "quantization"], [320, 0, 0, "-", "strategy"], [332, 0, 0, "-", "template"], [333, 0, 0, "-", "training"], [337, 0, 0, "-", "utils"], [479, 0, 0, "-", "ux"], [525, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[6, 0, 0, "-", "adaptor"], [8, 0, 0, "-", "keras"], [12, 0, 0, "-", "keras_utils"], [15, 0, 0, "-", "mxnet"], [16, 0, 0, "-", "mxnet_utils"], [18, 0, 0, "-", "onnxrt"], [21, 0, 0, "-", "ox_utils"], [44, 0, 0, "-", "pytorch"], [45, 0, 0, "-", "query"], [46, 0, 0, "-", "tensorflow"], [110, 0, 0, "-", "tf_utils"], [148, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[6, 2, 1, "", "Adaptor"], [6, 1, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.keras": [[8, 2, 1, "", "KerasAdaptor"]], "neural_compressor.adaptor.keras_utils": [[9, 0, 0, "-", "conv2d"], [10, 0, 0, "-", "dense"], [11, 0, 0, "-", "depthwise_conv2d"], [13, 0, 0, "-", "quantizer"], [14, 0, 0, "-", "separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[15, 2, 1, "", "MXNetQuery"], [15, 2, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet_utils": [[17, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[17, 2, 1, "", "CalibCollector"], [17, 2, 1, "", "CalibData"], [17, 2, 1, "", "CollectorBase"], [17, 2, 1, "", "DataIterLoader"], [17, 2, 1, "", "DataLoaderWrap"], [17, 2, 1, "", "NameCollector"], [17, 2, 1, "", "OpType"], [17, 2, 1, "", "TensorCollector"], [17, 1, 1, "", "amp_convert"], [17, 1, 1, "", "calib_model"], [17, 1, 1, "", "check_mx_version"], [17, 1, 1, "", "combine_capabilities"], [17, 1, 1, "", "create_data_example"], [17, 1, 1, "", "distribute_calib_tensors"], [17, 1, 1, "", "ensure_list"], [17, 1, 1, "", "fuse"], [17, 1, 1, "", "get_framework_name"], [17, 1, 1, "", "is_model_quantized"], [17, 1, 1, "", "isiterable"], [17, 1, 1, "", "make_module"], [17, 1, 1, "", "make_nc_model"], [17, 1, 1, "", "make_symbol_block"], [17, 1, 1, "", "ndarray_to_device"], [17, 1, 1, "", "parse_tune_config"], [17, 1, 1, "", "prepare_dataloader"], [17, 1, 1, "", "prepare_model"], [17, 1, 1, "", "prepare_model_data"], [17, 1, 1, "", "quantize_sym_model"], [17, 1, 1, "", "query_quantizable_nodes"], [17, 1, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[18, 2, 1, "", "ONNXRT_IntegerOpsAdaptor"], [18, 2, 1, "", "ONNXRT_QDQAdaptor"], [18, 2, 1, "", "ONNXRT_QLinearOpsAdaptor"], [18, 2, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.ox_utils": [[19, 0, 0, "-", "calibration"], [20, 0, 0, "-", "calibrator"], [33, 0, 0, "-", "operators"], [42, 0, 0, "-", "quantizer"], [43, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[19, 2, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[20, 2, 1, "", "CalibratorBase"], [20, 2, 1, "", "HistogramCollector"], [20, 2, 1, "", "KLCalibrator"], [20, 2, 1, "", "MinMaxCalibrator"], [20, 2, 1, "", "PercentileCalibrator"], [20, 1, 1, "", "calib_registry"], [20, 1, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[22, 0, 0, "-", "activation"], [23, 0, 0, "-", "argmax"], [24, 0, 0, "-", "attention"], [25, 0, 0, "-", "binary_op"], [26, 0, 0, "-", "concat"], [27, 0, 0, "-", "conv"], [28, 0, 0, "-", "direct_q8"], [29, 0, 0, "-", "embed_layernorm"], [30, 0, 0, "-", "gather"], [31, 0, 0, "-", "gavgpool"], [32, 0, 0, "-", "gemm"], [34, 0, 0, "-", "lstm"], [35, 0, 0, "-", "matmul"], [36, 0, 0, "-", "maxpool"], [37, 0, 0, "-", "ops"], [38, 0, 0, "-", "pad"], [39, 0, 0, "-", "pooling"], [40, 0, 0, "-", "resize"], [41, 0, 0, "-", "split"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[22, 2, 1, "", "ActivationOperator"], [22, 2, 1, "", "QActivationOperator"], [22, 2, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[23, 2, 1, "", "ArgMaxOperator"], [23, 2, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[24, 2, 1, "", "AttentionOperator"], [24, 2, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[25, 2, 1, "", "BinaryOperator"], [25, 2, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[26, 2, 1, "", "ConcatOperator"], [26, 2, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[27, 2, 1, "", "ConvOperator"], [27, 2, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[28, 2, 1, "", "Direct8BitOperator"], [28, 2, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[29, 2, 1, "", "EmbedLayerNormalizationOperator"], [29, 2, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[30, 2, 1, "", "GatherOperator"], [30, 2, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[31, 2, 1, "", "GlobalAveragePoolOperator"], [31, 2, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[32, 2, 1, "", "GemmOperator"], [32, 2, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[34, 2, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[35, 2, 1, "", "MatMulOperator"], [35, 2, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[36, 2, 1, "", "MaxPoolOperator"], [36, 2, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[37, 2, 1, "", "Operator"], [37, 2, 1, "", "QOperator"], [37, 1, 1, "", "op_registry"], [37, 1, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[38, 2, 1, "", "PadOperator"], [38, 2, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[39, 2, 1, "", "PoolOperator"], [39, 2, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[40, 2, 1, "", "QResizeOperator"], [40, 2, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[41, 2, 1, "", "QSplitOperator"], [41, 2, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[42, 2, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[43, 2, 1, "", "QuantFormat"], [43, 2, 1, "", "QuantType"], [43, 2, 1, "", "QuantizationMode"], [43, 2, 1, "", "QuantizedInitializer"], [43, 2, 1, "", "QuantizedValue"], [43, 2, 1, "", "QuantizedValueType"], [43, 2, 1, "", "ValueInfo"], [43, 1, 1, "", "adjust_weights_per_input"], [43, 1, 1, "", "adjust_weights_per_op"], [43, 1, 1, "", "attribute_to_kwarg"], [43, 1, 1, "", "calculate_scale_zp"], [43, 1, 1, "", "cast_tensor"], [43, 1, 1, "", "collate_preds"], [43, 1, 1, "", "dequantize_data"], [43, 1, 1, "", "dequantize_data_with_scale_zero"], [43, 1, 1, "", "dtype_to_name"], [43, 1, 1, "", "find_by_name"], [43, 1, 1, "", "float_to_bfloat16"], [43, 1, 1, "", "float_to_float16"], [43, 1, 1, "", "get_smooth_scales_per_input"], [43, 1, 1, "", "get_smooth_scales_per_op"], [43, 1, 1, "", "insert_smooth_mul_op_per_input"], [43, 1, 1, "", "insert_smooth_mul_op_per_op"], [43, 1, 1, "", "is_B_transposed"], [43, 1, 1, "", "make_dquant_node"], [43, 1, 1, "", "make_quant_node"], [43, 1, 1, "", "quantize_data"], [43, 1, 1, "", "quantize_data_per_channel"], [43, 1, 1, "", "quantize_data_with_scale_zero"], [43, 1, 1, "", "quantize_nparray"], [43, 1, 1, "", "remove_init_from_model_input"], [43, 1, 1, "", "split_shared_bias"], [43, 1, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.pytorch": [[44, 2, 1, "", "PyTorchAdaptor"], [44, 2, 1, "", "PyTorchQuery"], [44, 2, 1, "", "PyTorch_FXAdaptor"], [44, 2, 1, "", "PyTorch_IPEXAdaptor"], [44, 2, 1, "", "TemplateAdaptor"], [44, 1, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.query": [[45, 2, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.tensorflow": [[46, 2, 1, "", "TensorFlowAdaptor"], [46, 2, 1, "", "TensorflowQuery"], [46, 2, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[47, 0, 0, "-", "graph_converter"], [48, 0, 0, "-", "graph_converter_without_calib"], [86, 0, 0, "-", "graph_rewriter"], [109, 0, 0, "-", "graph_util"], [111, 0, 0, "-", "quantize_graph"], [138, 0, 0, "-", "quantize_graph_common"], [139, 0, 0, "-", "tf2onnx_converter"], [142, 0, 0, "-", "transform_graph"], [145, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, 2, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, 2, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[50, 0, 0, "-", "bf16"], [75, 0, 0, "-", "generic"], [85, 0, 0, "-", "graph_base"], [94, 0, 0, "-", "int8"], [100, 0, 0, "-", "onnx"], [105, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[49, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, 2, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[51, 0, 0, "-", "convert_add_to_biasadd"], [52, 0, 0, "-", "convert_layout"], [53, 0, 0, "-", "convert_leakyrelu"], [54, 0, 0, "-", "convert_nan_to_random"], [55, 0, 0, "-", "convert_placeholder_to_const"], [56, 0, 0, "-", "dequantize_cast_optimizer"], [57, 0, 0, "-", "dilated_contraction"], [58, 0, 0, "-", "dummy_biasadd"], [59, 0, 0, "-", "expanddims_optimizer"], [60, 0, 0, "-", "fetch_weight_from_reshape"], [61, 0, 0, "-", "fold_batch_norm"], [62, 0, 0, "-", "fold_constant"], [63, 0, 0, "-", "fuse_biasadd_add"], [64, 0, 0, "-", "fuse_column_wise_mul"], [65, 0, 0, "-", "fuse_conv_with_math"], [66, 0, 0, "-", "fuse_decomposed_bn"], [67, 0, 0, "-", "fuse_decomposed_in"], [68, 0, 0, "-", "fuse_gelu"], [69, 0, 0, "-", "fuse_layer_norm"], [70, 0, 0, "-", "fuse_pad_with_conv"], [71, 0, 0, "-", "fuse_pad_with_fp32_conv"], [72, 0, 0, "-", "fuse_reshape_transpose"], [73, 0, 0, "-", "graph_cse_optimizer"], [74, 0, 0, "-", "grappler_pass"], [76, 0, 0, "-", "insert_print_node"], [77, 0, 0, "-", "move_squeeze_after_relu"], [78, 0, 0, "-", "pre_optimize"], [79, 0, 0, "-", "remove_training_nodes"], [80, 0, 0, "-", "rename_batch_norm"], [81, 0, 0, "-", "split_shared_input"], [82, 0, 0, "-", "strip_equivalent_nodes"], [83, 0, 0, "-", "strip_unused_nodes"], [84, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, 2, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, 2, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, 2, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, 2, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, 2, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, 2, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, 2, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, 2, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, 2, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, 2, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, 2, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, 2, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, 2, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, 2, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, 2, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, 2, 1, "", "FuseDecomposedBNOptimizer"], [66, 1, 1, "", "bypass_reshape"], [66, 1, 1, "", "get_const_dim_count"], [66, 1, 1, "", "node_from_map"], [66, 1, 1, "", "node_name_from_input"], [66, 1, 1, "", "valid_reshape_inputs"], [66, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, 2, 1, "", "FuseDecomposedINOptimizer"], [67, 1, 1, "", "bypass_reshape"], [67, 1, 1, "", "get_const_dim_count"], [67, 1, 1, "", "node_from_map"], [67, 1, 1, "", "node_name_from_input"], [67, 1, 1, "", "valid_reshape_inputs"], [67, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, 2, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, 2, 1, "", "FuseLayerNormOptimizer"], [69, 1, 1, "", "node_from_map"], [69, 1, 1, "", "node_name_from_input"], [69, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, 2, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, 2, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, 2, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, 2, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, 2, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, 2, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, 2, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, 2, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, 2, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, 2, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, 2, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, 2, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, 2, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, 2, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, 2, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[87, 0, 0, "-", "freeze_fake_quant"], [88, 0, 0, "-", "freeze_value"], [89, 0, 0, "-", "freeze_value_without_calib"], [90, 0, 0, "-", "fuse_conv_redundant_dequantize"], [91, 0, 0, "-", "fuse_conv_requantize"], [92, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [93, 0, 0, "-", "fuse_matmul_requantize"], [95, 0, 0, "-", "meta_op_optimizer"], [96, 0, 0, "-", "post_hostconst_converter"], [97, 0, 0, "-", "post_quantized_op_cse"], [98, 0, 0, "-", "rnn_convert"], [99, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, 2, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, 2, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, 2, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, 2, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, 2, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, 2, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, 2, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [93, 2, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [93, 2, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [93, 2, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, 2, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, 2, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, 2, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, 2, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, 2, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, 0, 0, "-", "onnx_graph"], [102, 0, 0, "-", "onnx_node"], [103, 0, 0, "-", "onnx_schema"], [104, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, 2, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, 2, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, 2, 1, "", "OnnxOpSchema"], [103, 1, 1, "", "get_max_supported_opset_version"], [103, 1, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, 2, 1, "", "SeqType"], [104, 1, 1, "", "add_port_to_name"], [104, 1, 1, "", "are_shapes_equal"], [104, 1, 1, "", "assert_error"], [104, 1, 1, "", "compute_const_folding_using_tf"], [104, 1, 1, "", "convert_tensorflow_tensor_to_onnx"], [104, 1, 1, "", "find_opset"], [104, 1, 1, "", "get_index_from_strided_slice_of_shape"], [104, 1, 1, "", "get_subgraphs_from_onnx"], [104, 1, 1, "", "get_tensorflow_node_attr"], [104, 1, 1, "", "get_tensorflow_node_shape_attr"], [104, 1, 1, "", "get_tensorflow_tensor_data"], [104, 1, 1, "", "get_tensorflow_tensor_shape"], [104, 1, 1, "", "infer_onnx_shape_dtype"], [104, 1, 1, "", "initialize_name_counter"], [104, 1, 1, "", "is_list_or_tuple"], [104, 1, 1, "", "is_onnx_domain"], [104, 1, 1, "", "make_onnx_inputs_outputs"], [104, 1, 1, "", "make_onnx_shape"], [104, 1, 1, "", "map_numpy_to_onnx_dtype"], [104, 1, 1, "", "map_onnx_to_numpy_type"], [104, 1, 1, "", "map_tensorflow_dtype"], [104, 1, 1, "", "read_tensorflow_node_attrs"], [104, 1, 1, "", "save_protobuf"], [104, 1, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, 0, 0, "-", "insert_qdq_pattern"], [107, 0, 0, "-", "merge_duplicated_qdq"], [108, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, 2, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, 2, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, 2, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, 2, 1, "", "GraphAnalyzer"], [109, 2, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[113, 0, 0, "-", "qat"], [129, 0, 0, "-", "qdq"], [131, 0, 0, "-", "quantize_graph_base"], [132, 0, 0, "-", "quantize_graph_bn"], [133, 0, 0, "-", "quantize_graph_concatv2"], [134, 0, 0, "-", "quantize_graph_conv"], [135, 0, 0, "-", "quantize_graph_for_intel_cpu"], [136, 0, 0, "-", "quantize_graph_matmul"], [137, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[112, 0, 0, "-", "fake_quantize"], [114, 0, 0, "-", "quantize_config"], [115, 0, 0, "-", "quantize_helper"], [116, 0, 0, "-", "quantize_layers"], [121, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, 2, 1, "", "FakeQuantize"], [112, 2, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, 2, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, 1, 1, "", "init_quantize_config"], [115, 1, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, 0, 0, "-", "optimize_layer"], [118, 0, 0, "-", "quantize_layer_add"], [119, 0, 0, "-", "quantize_layer_base"], [120, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, 1, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, 2, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, 2, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, 2, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, 2, 1, "", "QuantizeWrapper"], [121, 2, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[122, 0, 0, "-", "fuse_qdq_bn"], [123, 0, 0, "-", "fuse_qdq_concatv2"], [124, 0, 0, "-", "fuse_qdq_conv"], [125, 0, 0, "-", "fuse_qdq_deconv"], [126, 0, 0, "-", "fuse_qdq_in"], [127, 0, 0, "-", "fuse_qdq_matmul"], [128, 0, 0, "-", "fuse_qdq_pooling"], [130, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, 2, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, 2, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, 2, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, 2, 1, "", "QuantizeGraphBase"], [131, 2, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, 2, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, 2, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[139, 2, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[140, 0, 0, "-", "bias_correction"], [141, 0, 0, "-", "graph_transform_base"], [143, 0, 0, "-", "insert_logging"], [144, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[140, 2, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[141, 2, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[143, 2, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[144, 2, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[145, 1, 1, "", "collate_tf_preds"], [145, 1, 1, "", "disable_random"], [145, 1, 1, "", "fix_ref_type_of_graph_def"], [145, 1, 1, "", "generate_feed_dict"], [145, 1, 1, "", "get_estimator_graph"], [145, 1, 1, "", "get_graph_def"], [145, 1, 1, "", "get_input_output_node_names"], [145, 1, 1, "", "get_model_input_shape"], [145, 1, 1, "", "get_tensor_by_name"], [145, 1, 1, "", "get_tensor_val_from_graph_node"], [145, 1, 1, "", "int8_node_name_reverse"], [145, 1, 1, "", "is_ckpt_format"], [145, 1, 1, "", "is_saved_model_format"], [145, 1, 1, "", "iterator_sess_run"], [145, 1, 1, "", "read_graph"], [145, 1, 1, "", "strip_equivalent_nodes"], [145, 1, 1, "", "strip_unused_nodes"], [145, 1, 1, "", "tf_diagnosis_helper"], [145, 1, 1, "", "version1_eq_version2"], [145, 1, 1, "", "version1_gt_version2"], [145, 1, 1, "", "version1_gte_version2"], [145, 1, 1, "", "version1_lt_version2"], [145, 1, 1, "", "version1_lte_version2"], [145, 1, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[146, 0, 0, "-", "bf16_convert"], [147, 0, 0, "-", "hawq_metric"], [149, 0, 0, "-", "smooth_quant"], [150, 0, 0, "-", "symbolic_trace"], [151, 0, 0, "-", "util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[146, 2, 1, "", "BF16ModuleWrapper"], [146, 1, 1, "", "Convert"], [146, 1, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[147, 2, 1, "", "HessianTrace"], [147, 2, 1, "", "Node_collector"], [147, 1, 1, "", "compare_weights"], [147, 1, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[149, 2, 1, "", "GraphTrace"], [149, 2, 1, "", "TorchSmoothQuant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[150, 1, 1, "", "symbolic_trace"], [150, 1, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.util": [[151, 1, 1, "", "append_attr"], [151, 1, 1, "", "auto_copy"], [151, 1, 1, "", "calculate_quant_min_max"], [151, 1, 1, "", "check_cfg_and_qconfig"], [151, 1, 1, "", "collate_torch_preds"], [151, 1, 1, "", "fetch_module"], [151, 1, 1, "", "generate_activation_observer"], [151, 1, 1, "", "get_embedding_contiguous"], [151, 1, 1, "", "get_example_input"], [151, 1, 1, "", "get_fallback_order"], [151, 1, 1, "", "get_mse_order_per_fp32"], [151, 1, 1, "", "get_mse_order_per_int8"], [151, 1, 1, "", "get_quantizable_ops_from_cfgs"], [151, 1, 1, "", "get_torch_version"], [151, 1, 1, "", "input2tuple"], [151, 1, 1, "", "is_fused_module"], [151, 1, 1, "", "match_datatype_pattern"], [151, 1, 1, "", "paser_cfgs"], [151, 1, 1, "", "set_module"], [151, 1, 1, "", "simple_inference"]], "neural_compressor.algorithm": [[152, 0, 0, "-", "algorithm"], [153, 0, 0, "-", "fast_bias_correction"], [155, 0, 0, "-", "smooth_quant"], [156, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[152, 2, 1, "", "ALGORITHMS"], [152, 2, 1, "", "Algorithm"], [152, 2, 1, "", "AlgorithmScheduler"], [152, 1, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[153, 2, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[155, 2, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[156, 2, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[157, 1, 1, "", "fit"], [157, 1, 1, "", "get_architecture"], [157, 1, 1, "", "get_bounded_threads"], [157, 1, 1, "", "get_core_ids"], [157, 1, 1, "", "get_physical_ids"], [157, 1, 1, "", "get_threads"], [157, 1, 1, "", "get_threads_per_core"], [157, 1, 1, "", "set_all_env_var"], [157, 1, 1, "", "set_env_var"]], "neural_compressor.compression": [[158, 0, 0, "-", "callbacks"], [160, 0, 0, "-", "distillation"], [163, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[158, 2, 1, "", "BaseCallbacks"], [158, 2, 1, "", "DistillationCallbacks"], [158, 2, 1, "", "PruningCallbacks"], [158, 2, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[158, 3, 1, "", "_epoch_ran"], [158, 3, 1, "", "best_model"], [158, 3, 1, "", "best_score"], [158, 3, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[159, 0, 0, "-", "criterions"]], "neural_compressor.compression.distillation.criterions": [[159, 2, 1, "", "Criterions"], [159, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [159, 2, 1, "", "KnowledgeDistillationFramework"], [159, 2, 1, "", "KnowledgeDistillationLoss"], [159, 2, 1, "", "PyTorchCriterions"], [159, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [159, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [159, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [159, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [159, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [159, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [159, 2, 1, "", "SelfKnowledgeDistillationLoss"], [159, 2, 1, "", "TensorflowCriterions"], [159, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [159, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [159, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [159, 1, 1, "", "criterion_registry"]], "neural_compressor.compression.pruner": [[162, 0, 0, "-", "criteria"], [164, 0, 0, "-", "model_slim"], [167, 0, 0, "-", "patterns"], [168, 0, 0, "-", "pruners"], [169, 0, 0, "-", "regs"], [170, 0, 0, "-", "schedulers"], [171, 0, 0, "-", "utils"]], "neural_compressor.compression.pruner.criteria": [[162, 2, 1, "", "GradientCriterion"], [162, 2, 1, "", "MagnitudeCriterion"], [162, 2, 1, "", "PruningCriterion"], [162, 2, 1, "", "RetrainFreeCriterion"], [162, 2, 1, "", "SnipCriterion"], [162, 2, 1, "", "SnipMomentumBlockCriterion"], [162, 2, 1, "", "SnipMomentumCriterion"], [162, 1, 1, "", "get_criterion"], [162, 1, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[162, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[162, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[162, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[162, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[162, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion": [[162, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[162, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.model_slim": [[165, 0, 0, "-", "pattern_analyzer"], [166, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[165, 2, 1, "", "JitBasicSearcher"], [165, 2, 1, "", "Linear2LinearSearcher"], [165, 2, 1, "", "PathSearcher"], [165, 2, 1, "", "RecipeSearcher"], [165, 2, 1, "", "SelfMHASearcher"], [165, 1, 1, "", "get_attributes"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[165, 3, 1, "", "device"], [165, 3, 1, "", "flatten_static_graph"], [165, 3, 1, "", "model"], [165, 3, 1, "", "searching_results"], [165, 3, 1, "", "static_graph"], [165, 3, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[165, 3, 1, "", "current_pattern"], [165, 3, 1, "", "device"], [165, 3, 1, "", "flatten_static_graph"], [165, 3, 1, "", "model"], [165, 3, 1, "", "searching_results"], [165, 3, 1, "", "static_graph"], [165, 3, 1, "", "target_layers"], [165, 3, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.PathSearcher": [[165, 3, 1, "", "current_pattern"], [165, 3, 1, "", "device"], [165, 3, 1, "", "flatten_static_graph"], [165, 3, 1, "", "model"], [165, 3, 1, "", "searching_results"], [165, 3, 1, "", "static_graph"], [165, 3, 1, "", "target_layers"], [165, 3, 1, "", "target_op"], [165, 3, 1, "", "target_op_lut"], [165, 3, 1, "", "target_path"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[165, 3, 1, "", "model"], [165, 3, 1, "", "recipe"], [165, 3, 1, "", "searching_results"], [165, 3, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[165, 3, 1, "", "device"], [165, 3, 1, "", "flatten_static_graph"], [165, 3, 1, "", "model"], [165, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[166, 2, 1, "", "LinearCompression"], [166, 2, 1, "", "LinearCompressionIterator"], [166, 2, 1, "", "MHACompression"], [166, 2, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[166, 3, 1, "", "device"], [166, 3, 1, "", "layer_1"], [166, 3, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[166, 3, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[167, 2, 1, "", "BasePattern"], [167, 2, 1, "", "PatternNInM"], [167, 2, 1, "", "PatternNxM"], [167, 1, 1, "", "get_pattern"], [167, 1, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.BasePattern": [[167, 3, 1, "", "config"], [167, 3, 1, "", "invalid_layers"], [167, 3, 1, "", "is_global"], [167, 3, 1, "", "keep_mask_layers"], [167, 3, 1, "", "max_sparsity_ratio_per_op"], [167, 3, 1, "", "min_sparsity_ratio_per_op"], [167, 3, 1, "", "modules"], [167, 3, 1, "", "pattern"], [167, 3, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.PatternNInM": [[167, 3, 1, "", "M"], [167, 3, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.PatternNxM": [[167, 3, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[168, 2, 1, "", "BasePruner"], [168, 2, 1, "", "BasicPruner"], [168, 2, 1, "", "BlockMaskPruner"], [168, 2, 1, "", "PatternLockPruner"], [168, 2, 1, "", "ProgressivePruner"], [168, 2, 1, "", "RetrainFreePruner"], [168, 1, 1, "", "get_pruner"], [168, 1, 1, "", "model_slim"], [168, 1, 1, "", "model_slim_ffn2"], [168, 1, 1, "", "model_slim_mha"], [168, 1, 1, "", "parse_valid_pruner_types"], [168, 1, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.BasePruner": [[168, 3, 1, "", "config"], [168, 3, 1, "", "current_sparsity_ratio"], [168, 3, 1, "", "end_step"], [168, 3, 1, "", "global_step"], [168, 3, 1, "", "masks"], [168, 3, 1, "", "max_sparsity_ratio_per_op"], [168, 3, 1, "", "modules"], [168, 3, 1, "", "pattern"], [168, 3, 1, "", "pruning_frequency"], [168, 3, 1, "", "scheduler"], [168, 3, 1, "", "scores"], [168, 3, 1, "", "start_step"], [168, 3, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.BasicPruner": [[168, 3, 1, "", "criterion"], [168, 3, 1, "", "pattern"], [168, 3, 1, "", "reg"], [168, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.BlockMaskPruner": [[168, 3, 1, "", "criterion"], [168, 3, 1, "", "pattern"], [168, 3, 1, "", "reg"], [168, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.RetrainFreePruner": [[168, 3, 1, "", "criterion"], [168, 3, 1, "", "pattern"], [168, 3, 1, "", "reg"], [168, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.regs": [[169, 2, 1, "", "BaseReg"], [169, 2, 1, "", "GroupLasso"], [169, 1, 1, "", "get_reg"], [169, 1, 1, "", "get_reg_type"], [169, 1, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[169, 3, 1, "", "alpha"], [169, 3, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[170, 2, 1, "", "IterativeScheduler"], [170, 2, 1, "", "OneshotScheduler"], [170, 2, 1, "", "PruningScheduler"], [170, 1, 1, "", "get_scheduler"], [170, 1, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[170, 3, 1, "", "config"]], "neural_compressor.compression.pruner.utils": [[171, 1, 1, "", "check_config"], [171, 1, 1, "", "check_key_validity"], [171, 1, 1, "", "generate_ffn2_pruning_config"], [171, 1, 1, "", "generate_mha_pruning_config"], [171, 1, 1, "", "generate_pruner_config"], [171, 1, 1, "", "get_sparsity_ratio"], [171, 1, 1, "", "parse_auto_slim_config"], [171, 1, 1, "", "parse_to_prune"], [171, 1, 1, "", "process_and_check_config"], [171, 1, 1, "", "process_config"], [171, 1, 1, "", "process_weight_config"], [171, 1, 1, "", "process_yaml_config"], [171, 1, 1, "", "reset_none_to_default"], [171, 1, 1, "", "update_params"]], "neural_compressor.conf": [[172, 0, 0, "-", "config"], [173, 0, 0, "-", "dotdict"], [175, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[172, 2, 1, "", "Benchmark_Conf"], [172, 2, 1, "", "Conf"], [172, 2, 1, "", "Distillation_Conf"], [172, 2, 1, "", "Graph_Optimization_Conf"], [172, 2, 1, "", "MixedPrecision_Conf"], [172, 2, 1, "", "NASConfig"], [172, 2, 1, "", "PrunerV2"], [172, 2, 1, "", "Pruning_Conf"], [172, 2, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[173, 2, 1, "", "DotDict"], [173, 1, 1, "", "deep_get"], [173, 1, 1, "", "deep_set"]], "neural_compressor.conf.pythonic_config": [[175, 2, 1, "", "QuantizationConfig"]], "neural_compressor.config": [[176, 2, 1, "", "AccuracyCriterion"], [176, 2, 1, "", "BenchmarkConfig"], [176, 2, 1, "", "DistillationConfig"], [176, 2, 1, "", "ExportConfig"], [176, 2, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [176, 2, 1, "", "KnowledgeDistillationLossConfig"], [176, 2, 1, "", "MixedPrecisionConfig"], [176, 2, 1, "", "ONNXQlinear2QDQConfig"], [176, 2, 1, "", "Options"], [176, 2, 1, "", "PostTrainingQuantConfig"], [176, 2, 1, "", "QuantizationAwareTrainingConfig"], [176, 2, 1, "", "SelfKnowledgeDistillationLossConfig"], [176, 2, 1, "", "TF2ONNXConfig"], [176, 2, 1, "", "Torch2ONNXConfig"], [176, 2, 1, "", "TuningCriterion"], [176, 2, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[178, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[179, 0, 0, "-", "sigopt"], [180, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[179, 2, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[180, 2, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[185, 0, 0, "-", "dataloaders"], [197, 0, 0, "-", "datasets"], [201, 0, 0, "-", "filters"], [205, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[181, 0, 0, "-", "base_dataloader"], [182, 0, 0, "-", "dataloader"], [183, 0, 0, "-", "default_dataloader"], [184, 0, 0, "-", "fetcher"], [186, 0, 0, "-", "mxnet_dataloader"], [187, 0, 0, "-", "onnxrt_dataloader"], [188, 0, 0, "-", "pytorch_dataloader"], [189, 0, 0, "-", "sampler"], [190, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[181, 2, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[182, 2, 1, "", "DataLoader"]], "neural_compressor.data.dataloaders.default_dataloader": [[183, 2, 1, "", "DefaultDataLoader"], [183, 1, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[184, 2, 1, "", "Fetcher"], [184, 2, 1, "", "IndexFetcher"], [184, 2, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[186, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[187, 2, 1, "", "ONNXRTBertDataLoader"], [187, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[188, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[189, 2, 1, "", "BatchSampler"], [189, 2, 1, "", "IterableSampler"], [189, 2, 1, "", "Sampler"], [189, 2, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[190, 2, 1, "", "TFDataDataLoader"], [190, 2, 1, "", "TensorflowBertDataLoader"], [190, 2, 1, "", "TensorflowDataLoader"], [190, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[191, 0, 0, "-", "bert_dataset"], [192, 0, 0, "-", "coco_dataset"], [193, 0, 0, "-", "dataset"], [194, 0, 0, "-", "dummy_dataset"], [195, 0, 0, "-", "dummy_dataset_v2"], [196, 0, 0, "-", "imagenet_dataset"], [198, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[191, 2, 1, "", "InputFeatures"], [191, 2, 1, "", "ONNXRTBertDataset"], [191, 2, 1, "", "ParseDecodeBert"], [191, 2, 1, "", "PytorchBertDataset"], [191, 2, 1, "", "TensorflowBertDataset"], [191, 2, 1, "", "TensorflowModelZooBertDataset"], [191, 1, 1, "", "convert_examples_to_features"], [191, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[192, 2, 1, "", "COCONpy"], [192, 2, 1, "", "COCORaw"], [192, 2, 1, "", "COCORecordDataset"], [192, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[193, 2, 1, "", "CIFAR10"], [193, 2, 1, "", "CIFAR100"], [193, 2, 1, "", "Dataset"], [193, 2, 1, "", "Datasets"], [193, 2, 1, "", "FashionMNIST"], [193, 2, 1, "", "ImageFolder"], [193, 2, 1, "", "IterableDataset"], [193, 2, 1, "", "MNIST"], [193, 2, 1, "", "MXNetCIFAR10"], [193, 2, 1, "", "MXNetCIFAR100"], [193, 2, 1, "", "MXNetDatasets"], [193, 2, 1, "", "MXNetFashionMNIST"], [193, 2, 1, "", "MXNetImageFolder"], [193, 2, 1, "", "MXNetMNIST"], [193, 2, 1, "", "ONNXRTITDatasets"], [193, 2, 1, "", "ONNXRTQLDatasets"], [193, 2, 1, "", "PyTorchDatasets"], [193, 2, 1, "", "PytorchCIFAR10"], [193, 2, 1, "", "PytorchCIFAR100"], [193, 2, 1, "", "PytorchFashionMNIST"], [193, 2, 1, "", "PytorchMNIST"], [193, 2, 1, "", "PytorchMxnetWrapDataset"], [193, 2, 1, "", "PytorchMxnetWrapFunction"], [193, 2, 1, "", "Tensorflow"], [193, 2, 1, "", "TensorflowCIFAR10"], [193, 2, 1, "", "TensorflowCIFAR100"], [193, 2, 1, "", "TensorflowDatasets"], [193, 2, 1, "", "TensorflowFashionMNIST"], [193, 2, 1, "", "TensorflowImageRecord"], [193, 2, 1, "", "TensorflowMNIST"], [193, 2, 1, "", "TensorflowTFRecordDataset"], [193, 2, 1, "", "TensorflowVOCRecord"], [193, 1, 1, "", "calculate_md5"], [193, 1, 1, "", "check_integrity"], [193, 1, 1, "", "dataset_registry"], [193, 1, 1, "", "download_url"], [193, 4, 1, "", "framework_datasets"], [193, 1, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[194, 2, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[195, 2, 1, "", "DummyDataset"], [195, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[196, 2, 1, "", "ImagenetRaw"], [196, 2, 1, "", "MXNetImagenetRaw"], [196, 2, 1, "", "ONNXRTImagenetDataset"], [196, 2, 1, "", "PytorchImagenetRaw"], [196, 2, 1, "", "TensorflowImagenetDataset"], [196, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[198, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[199, 0, 0, "-", "coco_filter"], [200, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[199, 2, 1, "", "LabelBalanceCOCORawFilter"], [199, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[200, 2, 1, "", "FILTERS"], [200, 2, 1, "", "Filter"], [200, 2, 1, "", "MXNetFilters"], [200, 2, 1, "", "ONNXRTITFilters"], [200, 2, 1, "", "ONNXRTQLFilters"], [200, 2, 1, "", "PyTorchFilters"], [200, 2, 1, "", "TensorflowFilters"], [200, 1, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[203, 0, 0, "-", "coco_transform"], [204, 0, 0, "-", "imagenet_transform"], [206, 0, 0, "-", "postprocess"], [207, 0, 0, "-", "tokenization"], [208, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.coco_transform": [[203, 2, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[204, 2, 1, "", "BilinearImagenetTransform"], [204, 2, 1, "", "LabelShift"], [204, 2, 1, "", "ONNXResizeCropImagenetTransform"], [204, 2, 1, "", "OnnxBilinearImagenetTransform"], [204, 2, 1, "", "ParseDecodeImagenet"], [204, 2, 1, "", "ParseDecodeImagenetTransform"], [204, 2, 1, "", "QuantizedInput"], [204, 2, 1, "", "ResizeWithAspectRatio"], [204, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.postprocess": [[206, 2, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[207, 2, 1, "", "BasicTokenizer"], [207, 2, 1, "", "FullTokenizer"], [207, 2, 1, "", "WordpieceTokenizer"], [207, 1, 1, "", "convert_by_vocab"], [207, 1, 1, "", "convert_to_unicode"], [207, 1, 1, "", "load_vocab"], [207, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[208, 2, 1, "", "AlignImageChannelTransform"], [208, 2, 1, "", "BaseTransform"], [208, 2, 1, "", "CastONNXTransform"], [208, 2, 1, "", "CastPyTorchTransform"], [208, 2, 1, "", "CastTFTransform"], [208, 2, 1, "", "CenterCropTFTransform"], [208, 2, 1, "", "CenterCropTransform"], [208, 2, 1, "", "CollectTransform"], [208, 2, 1, "", "ComposeTransform"], [208, 2, 1, "", "CropResizeTFTransform"], [208, 2, 1, "", "CropResizeTransform"], [208, 2, 1, "", "CropToBoundingBox"], [208, 2, 1, "", "InputFeatures"], [208, 2, 1, "", "MXNetCropResizeTransform"], [208, 2, 1, "", "MXNetCropToBoundingBox"], [208, 2, 1, "", "MXNetNormalizeTransform"], [208, 2, 1, "", "MXNetTransforms"], [208, 2, 1, "", "MXNetTranspose"], [208, 2, 1, "", "NormalizeTFTransform"], [208, 2, 1, "", "NormalizeTransform"], [208, 2, 1, "", "ONNXRTCropToBoundingBox"], [208, 2, 1, "", "ONNXRTITTransforms"], [208, 2, 1, "", "ONNXRTQLTransforms"], [208, 2, 1, "", "PaddedCenterCropTransform"], [208, 2, 1, "", "ParseDecodeVocTransform"], [208, 2, 1, "", "PyTorchAlignImageChannel"], [208, 2, 1, "", "PyTorchCropResizeTransform"], [208, 2, 1, "", "PyTorchNormalizeTransform"], [208, 2, 1, "", "PyTorchTransforms"], [208, 2, 1, "", "PyTorchTranspose"], [208, 2, 1, "", "PytorchMxnetTransform"], [208, 2, 1, "", "PytorchMxnetWrapFunction"], [208, 2, 1, "", "RandomCropTFTransform"], [208, 2, 1, "", "RandomCropTransform"], [208, 2, 1, "", "RandomHorizontalFlip"], [208, 2, 1, "", "RandomResizedCropMXNetTransform"], [208, 2, 1, "", "RandomResizedCropPytorchTransform"], [208, 2, 1, "", "RandomResizedCropTFTransform"], [208, 2, 1, "", "RandomResizedCropTransform"], [208, 2, 1, "", "RandomVerticalFlip"], [208, 2, 1, "", "RescaleKerasPretrainTransform"], [208, 2, 1, "", "RescaleTFTransform"], [208, 2, 1, "", "RescaleTransform"], [208, 2, 1, "", "ResizeMXNetTransform"], [208, 2, 1, "", "ResizePytorchTransform"], [208, 2, 1, "", "ResizeTFTransform"], [208, 2, 1, "", "ResizeTransform"], [208, 2, 1, "", "ResizeWithRatio"], [208, 2, 1, "", "SquadExample"], [208, 2, 1, "", "TFModelZooCollectTransform"], [208, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [208, 2, 1, "", "TFSquadV1PostTransform"], [208, 2, 1, "", "TRANSFORMS"], [208, 2, 1, "", "TensorflowCropToBoundingBox"], [208, 2, 1, "", "TensorflowRandomHorizontalFlip"], [208, 2, 1, "", "TensorflowRandomVerticalFlip"], [208, 2, 1, "", "TensorflowResizeWithRatio"], [208, 2, 1, "", "TensorflowTransform"], [208, 2, 1, "", "TensorflowTransforms"], [208, 2, 1, "", "TensorflowTranspose"], [208, 2, 1, "", "TensorflowWrapFunction"], [208, 2, 1, "", "ToArray"], [208, 2, 1, "", "ToNDArrayTransform"], [208, 2, 1, "", "Transforms"], [208, 2, 1, "", "Transpose"], [208, 1, 1, "", "convert_examples_to_features"], [208, 1, 1, "", "get_final_text"], [208, 1, 1, "", "get_torchvision_map"], [208, 1, 1, "", "read_squad_examples"], [208, 1, 1, "", "transform_registry"]], "neural_compressor.experimental": [[209, 0, 0, "-", "benchmark"], [212, 0, 0, "-", "common"], [218, 0, 0, "-", "component"], [219, 0, 0, "-", "compression"], [242, 0, 0, "-", "data"], [247, 0, 0, "-", "distillation"], [248, 0, 0, "-", "export"], [253, 0, 0, "-", "graph_optimization"], [261, 0, 0, "-", "metric"], [263, 0, 0, "-", "mixed_precision"], [264, 0, 0, "-", "model_conversion"], [267, 0, 0, "-", "nas"], [273, 0, 0, "-", "pruner_legacy"], [277, 0, 0, "-", "pruning"], [278, 0, 0, "-", "pruning_recipes"], [282, 0, 0, "-", "pruning_v2"], [283, 0, 0, "-", "pytorch_pruner"], [290, 0, 0, "-", "quantization"], [291, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.benchmark": [[209, 2, 1, "", "Benchmark"], [209, 1, 1, "", "get_architecture"], [209, 1, 1, "", "get_bounded_threads"], [209, 1, 1, "", "get_core_ids"], [209, 1, 1, "", "get_physical_ids"], [209, 1, 1, "", "get_threads"], [209, 1, 1, "", "get_threads_per_core"], [209, 1, 1, "", "set_all_env_var"], [209, 1, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[210, 0, 0, "-", "criterion"], [211, 0, 0, "-", "dataloader"], [213, 0, 0, "-", "metric"], [214, 0, 0, "-", "model"], [215, 0, 0, "-", "optimizer"], [216, 0, 0, "-", "postprocess"], [217, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[210, 2, 1, "", "Criterions"], [210, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [210, 2, 1, "", "KnowledgeDistillationFramework"], [210, 2, 1, "", "KnowledgeDistillationLoss"], [210, 2, 1, "", "PyTorchCriterions"], [210, 2, 1, "", "PyTorchCrossEntropyLoss"], [210, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [210, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [210, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [210, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [210, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [210, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [210, 2, 1, "", "SelfKnowledgeDistillationLoss"], [210, 2, 1, "", "TensorFlowCrossEntropyLoss"], [210, 2, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [210, 2, 1, "", "TensorflowCriterions"], [210, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [210, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [210, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [210, 1, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[211, 2, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[213, 2, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[214, 2, 1, "", "Model"], [214, 1, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[215, 2, 1, "", "Optimizers"], [215, 2, 1, "", "PyTorchOptimizers"], [215, 2, 1, "", "PyTorchSGD"], [215, 2, 1, "", "TensorFlowAdam"], [215, 2, 1, "", "TensorFlowAdamW"], [215, 2, 1, "", "TensorFlowSGD"], [215, 2, 1, "", "TensorflowOptimizers"], [215, 1, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[216, 2, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[217, 1, 1, "", "get_activation"], [217, 1, 1, "", "record_output"]], "neural_compressor.experimental.component": [[218, 2, 1, "", "Component"]], "neural_compressor.experimental.compression": [[220, 0, 0, "-", "pruning"]], "neural_compressor.experimental.compression.pruning": [[220, 1, 1, "", "prepare_pruning"], [220, 1, 1, "", "save"]], "neural_compressor.experimental.data": [[225, 0, 0, "-", "dataloaders"], [237, 0, 0, "-", "datasets"], [241, 0, 0, "-", "filters"], [244, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[221, 0, 0, "-", "base_dataloader"], [222, 0, 0, "-", "dataloader"], [223, 0, 0, "-", "default_dataloader"], [224, 0, 0, "-", "fetcher"], [226, 0, 0, "-", "mxnet_dataloader"], [227, 0, 0, "-", "onnxrt_dataloader"], [228, 0, 0, "-", "pytorch_dataloader"], [229, 0, 0, "-", "sampler"], [230, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[221, 2, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[223, 2, 1, "", "DefaultDataLoader"], [223, 1, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[224, 2, 1, "", "Fetcher"], [224, 2, 1, "", "IndexFetcher"], [224, 2, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[226, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[227, 2, 1, "", "ONNXRTBertDataLoader"], [227, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[228, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[229, 2, 1, "", "BatchSampler"], [229, 2, 1, "", "IterableSampler"], [229, 2, 1, "", "Sampler"], [229, 2, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[230, 2, 1, "", "TFDataDataLoader"], [230, 2, 1, "", "TensorflowBertDataLoader"], [230, 2, 1, "", "TensorflowDataLoader"], [230, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[231, 0, 0, "-", "bert_dataset"], [232, 0, 0, "-", "coco_dataset"], [233, 0, 0, "-", "dataset"], [234, 0, 0, "-", "dummy_dataset"], [235, 0, 0, "-", "dummy_dataset_v2"], [236, 0, 0, "-", "imagenet_dataset"], [238, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[231, 2, 1, "", "InputFeatures"], [231, 2, 1, "", "ONNXRTBertDataset"], [231, 2, 1, "", "ParseDecodeBert"], [231, 2, 1, "", "PytorchBertDataset"], [231, 2, 1, "", "TensorflowBertDataset"], [231, 2, 1, "", "TensorflowModelZooBertDataset"], [231, 1, 1, "", "convert_examples_to_features"], [231, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[232, 2, 1, "", "COCONpy"], [232, 2, 1, "", "COCORaw"], [232, 2, 1, "", "COCORecordDataset"], [232, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[233, 2, 1, "", "CIFAR10"], [233, 2, 1, "", "CIFAR100"], [233, 2, 1, "", "Dataset"], [233, 2, 1, "", "Datasets"], [233, 2, 1, "", "FashionMNIST"], [233, 2, 1, "", "ImageFolder"], [233, 2, 1, "", "IterableDataset"], [233, 2, 1, "", "MNIST"], [233, 2, 1, "", "MXNetCIFAR10"], [233, 2, 1, "", "MXNetCIFAR100"], [233, 2, 1, "", "MXNetDatasets"], [233, 2, 1, "", "MXNetFashionMNIST"], [233, 2, 1, "", "MXNetImageFolder"], [233, 2, 1, "", "MXNetMNIST"], [233, 2, 1, "", "ONNXRTITDatasets"], [233, 2, 1, "", "ONNXRTQLDatasets"], [233, 2, 1, "", "PyTorchDatasets"], [233, 2, 1, "", "PytorchCIFAR10"], [233, 2, 1, "", "PytorchCIFAR100"], [233, 2, 1, "", "PytorchFashionMNIST"], [233, 2, 1, "", "PytorchMNIST"], [233, 2, 1, "", "PytorchMxnetWrapDataset"], [233, 2, 1, "", "PytorchMxnetWrapFunction"], [233, 2, 1, "", "TensorflowCIFAR10"], [233, 2, 1, "", "TensorflowCIFAR100"], [233, 2, 1, "", "TensorflowDatasets"], [233, 2, 1, "", "TensorflowFashionMNIST"], [233, 2, 1, "", "TensorflowImageFolder"], [233, 2, 1, "", "TensorflowImageRecord"], [233, 2, 1, "", "TensorflowMNIST"], [233, 2, 1, "", "TensorflowTFRecordDataset"], [233, 2, 1, "", "TensorflowVOCRecord"], [233, 1, 1, "", "calculate_md5"], [233, 1, 1, "", "check_integrity"], [233, 1, 1, "", "dataset_registry"], [233, 1, 1, "", "download_url"], [233, 4, 1, "", "framework_datasets"], [233, 1, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[234, 2, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[235, 2, 1, "", "DummyDataset"], [235, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[236, 2, 1, "", "ImagenetRaw"], [236, 2, 1, "", "MXNetImagenetRaw"], [236, 2, 1, "", "ONNXRTImagenetDataset"], [236, 2, 1, "", "PytorchImagenetRaw"], [236, 2, 1, "", "TensorflowImagenetDataset"], [236, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[238, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[239, 0, 0, "-", "coco_filter"], [240, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[239, 2, 1, "", "LabelBalanceCOCORawFilter"], [239, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[240, 2, 1, "", "FILTERS"], [240, 2, 1, "", "Filter"], [240, 2, 1, "", "MXNetFilters"], [240, 2, 1, "", "ONNXRTITFilters"], [240, 2, 1, "", "ONNXRTQLFilters"], [240, 2, 1, "", "PyTorchFilters"], [240, 2, 1, "", "TensorflowFilters"], [240, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[243, 0, 0, "-", "imagenet_transform"], [245, 0, 0, "-", "tokenization"], [246, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[243, 2, 1, "", "BilinearImagenetTransform"], [243, 2, 1, "", "LabelShift"], [243, 2, 1, "", "ONNXResizeCropImagenetTransform"], [243, 2, 1, "", "OnnxBilinearImagenetTransform"], [243, 2, 1, "", "ParseDecodeImagenet"], [243, 2, 1, "", "ParseDecodeImagenetTransform"], [243, 2, 1, "", "QuantizedInput"], [243, 2, 1, "", "ResizeWithAspectRatio"], [243, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[245, 2, 1, "", "BasicTokenizer"], [245, 2, 1, "", "FullTokenizer"], [245, 2, 1, "", "WordpieceTokenizer"], [245, 1, 1, "", "convert_by_vocab"], [245, 1, 1, "", "convert_to_unicode"], [245, 1, 1, "", "load_vocab"], [245, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[246, 2, 1, "", "AlignImageChannelTransform"], [246, 2, 1, "", "BaseTransform"], [246, 2, 1, "", "CastONNXTransform"], [246, 2, 1, "", "CastPyTorchTransform"], [246, 2, 1, "", "CastTFTransform"], [246, 2, 1, "", "CenterCropTFTransform"], [246, 2, 1, "", "CenterCropTransform"], [246, 2, 1, "", "CollectTransform"], [246, 2, 1, "", "ComposeTransform"], [246, 2, 1, "", "CropResizeTFTransform"], [246, 2, 1, "", "CropResizeTransform"], [246, 2, 1, "", "CropToBoundingBox"], [246, 2, 1, "", "InputFeatures"], [246, 2, 1, "", "MXNetCropResizeTransform"], [246, 2, 1, "", "MXNetCropToBoundingBox"], [246, 2, 1, "", "MXNetNormalizeTransform"], [246, 2, 1, "", "MXNetTransforms"], [246, 2, 1, "", "MXNetTranspose"], [246, 2, 1, "", "NormalizeTFTransform"], [246, 2, 1, "", "NormalizeTransform"], [246, 2, 1, "", "ONNXRTCropToBoundingBox"], [246, 2, 1, "", "ONNXRTITTransforms"], [246, 2, 1, "", "ONNXRTQLTransforms"], [246, 2, 1, "", "PaddedCenterCropTransform"], [246, 2, 1, "", "ParseDecodeVocTransform"], [246, 2, 1, "", "PyTorchAlignImageChannel"], [246, 2, 1, "", "PyTorchCropResizeTransform"], [246, 2, 1, "", "PyTorchNormalizeTransform"], [246, 2, 1, "", "PyTorchTransforms"], [246, 2, 1, "", "PyTorchTranspose"], [246, 2, 1, "", "PytorchMxnetTransform"], [246, 2, 1, "", "PytorchMxnetWrapFunction"], [246, 2, 1, "", "RandomCropTFTransform"], [246, 2, 1, "", "RandomCropTransform"], [246, 2, 1, "", "RandomHorizontalFlip"], [246, 2, 1, "", "RandomResizedCropMXNetTransform"], [246, 2, 1, "", "RandomResizedCropPytorchTransform"], [246, 2, 1, "", "RandomResizedCropTFTransform"], [246, 2, 1, "", "RandomResizedCropTransform"], [246, 2, 1, "", "RandomVerticalFlip"], [246, 2, 1, "", "RescaleKerasPretrainTransform"], [246, 2, 1, "", "RescaleTFTransform"], [246, 2, 1, "", "RescaleTransform"], [246, 2, 1, "", "ResizeMXNetTransform"], [246, 2, 1, "", "ResizePytorchTransform"], [246, 2, 1, "", "ResizeTFTransform"], [246, 2, 1, "", "ResizeTransform"], [246, 2, 1, "", "ResizeWithRatio"], [246, 2, 1, "", "SquadExample"], [246, 2, 1, "", "TFModelZooCollectTransform"], [246, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [246, 2, 1, "", "TFSquadV1PostTransform"], [246, 2, 1, "", "TRANSFORMS"], [246, 2, 1, "", "TensorflowCropToBoundingBox"], [246, 2, 1, "", "TensorflowRandomHorizontalFlip"], [246, 2, 1, "", "TensorflowRandomVerticalFlip"], [246, 2, 1, "", "TensorflowResizeWithRatio"], [246, 2, 1, "", "TensorflowTransform"], [246, 2, 1, "", "TensorflowTransforms"], [246, 2, 1, "", "TensorflowTranspose"], [246, 2, 1, "", "TensorflowWrapFunction"], [246, 2, 1, "", "ToArray"], [246, 2, 1, "", "ToNDArrayTransform"], [246, 2, 1, "", "Transforms"], [246, 2, 1, "", "Transpose"], [246, 1, 1, "", "convert_examples_to_features"], [246, 1, 1, "", "get_final_text"], [246, 1, 1, "", "get_torchvision_map"], [246, 1, 1, "", "read_squad_examples"], [246, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[247, 2, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[247, 3, 1, "", "_epoch_ran"], [247, 3, 1, "", "best_model"], [247, 3, 1, "", "best_score"], [247, 3, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[249, 0, 0, "-", "qlinear2qdq"], [250, 0, 0, "-", "tf2onnx"], [251, 0, 0, "-", "torch2onnx"], [252, 0, 0, "-", "utils"]], "neural_compressor.experimental.export.qlinear2qdq": [[249, 1, 1, "", "check_model"], [249, 1, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[250, 1, 1, "", "tf_to_fp32_onnx"], [250, 1, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[251, 1, 1, "", "build_scale_mapping"], [251, 1, 1, "", "get_node_mapping"], [251, 1, 1, "", "get_quantizable_onnx_ops"], [251, 1, 1, "", "qdq_fp32_bias"], [251, 1, 1, "", "qdq_fp32_bias_qdq"], [251, 1, 1, "", "qdq_int32_bias"], [251, 1, 1, "", "recalculate_bias"], [251, 1, 1, "", "remove_nodes_by_name"], [251, 1, 1, "", "set_data_type"], [251, 1, 1, "", "set_scale_info"], [251, 1, 1, "", "sub_graph_with_int32_bias"], [251, 1, 1, "", "torch_to_fp32_onnx"], [251, 1, 1, "", "torch_to_int8_onnx"], [251, 1, 1, "", "update_weight_bias"]], "neural_compressor.experimental.export.utils": [[252, 2, 1, "", "DummyDataReader"], [252, 1, 1, "", "ONNX2Numpy_dtype"]], "neural_compressor.experimental.graph_optimization": [[253, 2, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[255, 0, 0, "-", "bleu"], [256, 0, 0, "-", "bleu_util"], [257, 0, 0, "-", "coco_label_map"], [258, 0, 0, "-", "coco_tools"], [259, 0, 0, "-", "evaluate_squad"], [260, 0, 0, "-", "f1"], [262, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[255, 2, 1, "", "BLEU"], [255, 2, 1, "", "UnicodeRegex"], [255, 1, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[255, 3, 1, "", "labels"], [255, 3, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[255, 3, 1, "", "nondigit_punct_re"], [255, 3, 1, "", "punct_nondigit_re"], [255, 3, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[256, 1, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[258, 2, 1, "", "COCOEvalWrapper"], [258, 2, 1, "", "COCOWrapper"], [258, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [258, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [258, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[258, 3, 1, "", "dataset"], [258, 3, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[259, 1, 1, "", "evaluate"], [259, 1, 1, "", "exact_match_score"], [259, 1, 1, "", "f1_score"], [259, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[260, 1, 1, "", "evaluate"], [260, 1, 1, "", "f1_score"], [260, 1, 1, "", "metric_max_over_ground_truths"], [260, 1, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[262, 2, 1, "", "Accuracy"], [262, 2, 1, "", "BaseMetric"], [262, 2, 1, "", "COCOmAPv2"], [262, 2, 1, "", "F1"], [262, 2, 1, "", "GeneralTopK"], [262, 2, 1, "", "Loss"], [262, 2, 1, "", "MAE"], [262, 2, 1, "", "METRICS"], [262, 2, 1, "", "MSE"], [262, 2, 1, "", "MXNetMetrics"], [262, 2, 1, "", "ONNXRTGLUE"], [262, 2, 1, "", "ONNXRTITMetrics"], [262, 2, 1, "", "ONNXRTQLMetrics"], [262, 2, 1, "", "PyTorchLoss"], [262, 2, 1, "", "PyTorchMetrics"], [262, 2, 1, "", "RMSE"], [262, 2, 1, "", "ROC"], [262, 2, 1, "", "SquadF1"], [262, 2, 1, "", "TensorflowCOCOMAP"], [262, 2, 1, "", "TensorflowMAP"], [262, 2, 1, "", "TensorflowMetrics"], [262, 2, 1, "", "TensorflowTopK"], [262, 2, 1, "", "TensorflowVOCMAP"], [262, 2, 1, "", "WrapMXNetMetric"], [262, 2, 1, "", "WrapONNXRTMetric"], [262, 2, 1, "", "WrapPyTorchMetric"], [262, 2, 1, "", "mIOU"], [262, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[262, 3, 1, "", "label_list"], [262, 3, 1, "", "pred_list"], [262, 3, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[262, 3, 1, "", "k"], [262, 3, 1, "", "num_correct"], [262, 3, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[262, 3, 1, "", "sample"], [262, 3, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[262, 3, 1, "", "compare_label"], [262, 3, 1, "", "label_list"], [262, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[262, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[262, 3, 1, "", "compare_label"], [262, 3, 1, "", "label_list"], [262, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[262, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[262, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[262, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[262, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[262, 3, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[262, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[262, 3, 1, "", "k"], [262, 3, 1, "", "num_correct"], [262, 3, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[263, 2, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[264, 2, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[265, 0, 0, "-", "basic_nas"], [266, 0, 0, "-", "dynas"], [268, 0, 0, "-", "nas"], [269, 0, 0, "-", "nas_utils"], [270, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[265, 2, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[266, 2, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[268, 2, 1, "", "NAS"], [268, 2, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[269, 1, 1, "", "create_search_space_pool"], [269, 1, 1, "", "find_pareto_front"], [269, 1, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[270, 2, 1, "", "BayesianOptimizationSearcher"], [270, 2, 1, "", "GridSearcher"], [270, 2, 1, "", "RandomSearcher"], [270, 2, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[271, 0, 0, "-", "gradient_sensitivity"], [272, 0, 0, "-", "group_lasso"], [274, 0, 0, "-", "magnitude"], [275, 0, 0, "-", "pattern_lock"], [276, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[271, 2, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[272, 2, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[274, 2, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[275, 2, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[276, 2, 1, "", "Pruner"], [276, 1, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[277, 2, 1, "", "Pruning"], [277, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[277, 3, 1, "", "conf"], [277, 3, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[279, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[280, 0, 0, "-", "pattern"], [281, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[280, 2, 1, "", "PATTERNS"], [280, 2, 1, "", "PatternBase"], [280, 1, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[280, 3, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[281, 2, 1, "", "TilePatternBase"], [281, 2, 1, "", "TilePattern_1x1"], [281, 2, 1, "", "TilePattern_1x16"], [281, 2, 1, "", "TilePattern_1x2"], [281, 2, 1, "", "TilePattern_2x2"], [281, 2, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[282, 2, 1, "", "Pruning"], [282, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[282, 3, 1, "", "conf"], [282, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[284, 0, 0, "-", "logger"], [285, 0, 0, "-", "patterns"], [286, 0, 0, "-", "prune_utils"], [287, 0, 0, "-", "pruner"], [288, 0, 0, "-", "pruning"], [289, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[285, 2, 1, "", "Pattern"], [285, 2, 1, "", "PatternNInM"], [285, 2, 1, "", "PatternNxM"], [285, 1, 1, "", "get_pattern"], [285, 1, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[285, 3, 1, "", "is_global"], [285, 3, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[285, 3, 1, "", "M"], [285, 3, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[285, 3, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[286, 1, 1, "", "check_config"], [286, 1, 1, "", "parse_not_to_prune"], [286, 1, 1, "", "parse_to_prune"], [286, 1, 1, "", "process_and_check_config"], [286, 1, 1, "", "process_config"], [286, 1, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[287, 2, 1, "", "MagnitudePruner"], [287, 2, 1, "", "PatternLockPruner"], [287, 2, 1, "", "Pruner"], [287, 2, 1, "", "SnipMomentumPruner"], [287, 2, 1, "", "SnipPruner"], [287, 1, 1, "", "get_pruner"], [287, 1, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[287, 3, 1, "", "config"], [287, 3, 1, "", "current_sparsity_ratio"], [287, 3, 1, "", "end_step"], [287, 3, 1, "", "global_step"], [287, 3, 1, "", "masks"], [287, 3, 1, "", "max_sparsity_ratio_per_layer"], [287, 3, 1, "", "modules"], [287, 3, 1, "", "pattern"], [287, 3, 1, "", "scheduler"], [287, 3, 1, "", "scores"], [287, 3, 1, "", "start_step"], [287, 3, 1, "", "target_sparsity_ratio"], [287, 3, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[288, 2, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[288, 3, 1, "", "config_file_path"], [288, 3, 1, "", "model"], [288, 3, 1, "", "pruner_info"], [288, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[289, 2, 1, "", "IterativeScheduler"], [289, 2, 1, "", "OneshotScheduler"], [289, 2, 1, "", "Scheduler"], [289, 1, 1, "", "get_scheduler"], [289, 1, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[289, 3, 1, "", "config"]], "neural_compressor.experimental.quantization": [[290, 2, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[291, 2, 1, "", "Scheduler"]], "neural_compressor.metric": [[293, 0, 0, "-", "bleu"], [294, 0, 0, "-", "bleu_util"], [295, 0, 0, "-", "coco_label_map"], [296, 0, 0, "-", "coco_tools"], [297, 0, 0, "-", "evaluate_squad"], [298, 0, 0, "-", "f1"], [300, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[293, 2, 1, "", "BLEU"], [293, 2, 1, "", "UnicodeRegex"], [293, 1, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[293, 3, 1, "", "labels"], [293, 3, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[293, 3, 1, "", "nondigit_punct_re"], [293, 3, 1, "", "punct_nondigit_re"], [293, 3, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[294, 1, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[296, 2, 1, "", "COCOEvalWrapper"], [296, 2, 1, "", "COCOWrapper"], [296, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [296, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [296, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[296, 3, 1, "", "dataset"], [296, 3, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[297, 1, 1, "", "evaluate"], [297, 1, 1, "", "exact_match_score"], [297, 1, 1, "", "f1_score"], [297, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[298, 1, 1, "", "evaluate"], [298, 1, 1, "", "f1_score"], [298, 1, 1, "", "metric_max_over_ground_truths"], [298, 1, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[300, 2, 1, "", "Accuracy"], [300, 2, 1, "", "BaseMetric"], [300, 2, 1, "", "COCOmAPv2"], [300, 2, 1, "", "F1"], [300, 2, 1, "", "GeneralTopK"], [300, 2, 1, "", "Loss"], [300, 2, 1, "", "MAE"], [300, 2, 1, "", "METRICS"], [300, 2, 1, "", "MSE"], [300, 2, 1, "", "MXNetMetrics"], [300, 2, 1, "", "Metric"], [300, 2, 1, "", "ONNXRTGLUE"], [300, 2, 1, "", "ONNXRTITMetrics"], [300, 2, 1, "", "ONNXRTQLMetrics"], [300, 2, 1, "", "PyTorchLoss"], [300, 2, 1, "", "PyTorchMetrics"], [300, 2, 1, "", "RMSE"], [300, 2, 1, "", "ROC"], [300, 2, 1, "", "SquadF1"], [300, 2, 1, "", "TensorflowCOCOMAP"], [300, 2, 1, "", "TensorflowMAP"], [300, 2, 1, "", "TensorflowMetrics"], [300, 2, 1, "", "TensorflowTopK"], [300, 2, 1, "", "TensorflowVOCMAP"], [300, 2, 1, "", "WrapMXNetMetric"], [300, 2, 1, "", "WrapONNXRTMetric"], [300, 2, 1, "", "WrapPyTorchMetric"], [300, 2, 1, "", "mIOU"], [300, 1, 1, "", "metric_registry"]], "neural_compressor.metric.metric.Accuracy": [[300, 3, 1, "", "label_list"], [300, 3, 1, "", "pred_list"], [300, 3, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[300, 3, 1, "", "k"], [300, 3, 1, "", "num_correct"], [300, 3, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[300, 3, 1, "", "sample"], [300, 3, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[300, 3, 1, "", "compare_label"], [300, 3, 1, "", "label_list"], [300, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[300, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[300, 3, 1, "", "compare_label"], [300, 3, 1, "", "label_list"], [300, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[300, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[300, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[300, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[300, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[300, 3, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[300, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[300, 3, 1, "", "k"], [300, 3, 1, "", "num_correct"], [300, 3, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[301, 1, 1, "", "fit"]], "neural_compressor.model": [[302, 0, 0, "-", "base_model"], [304, 0, 0, "-", "keras_model"], [305, 0, 0, "-", "model"], [306, 0, 0, "-", "mxnet_model"], [307, 0, 0, "-", "nets_factory"], [308, 0, 0, "-", "onnx_model"], [309, 0, 0, "-", "tensorflow_model"], [310, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[302, 2, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[304, 2, 1, "", "KerasModel"]], "neural_compressor.model.model": [[305, 2, 1, "", "Model"], [305, 1, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[306, 2, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[307, 2, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[308, 2, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[309, 2, 1, "", "TensorflowBaseModel"], [309, 2, 1, "", "TensorflowCheckpointModel"], [309, 2, 1, "", "TensorflowModel"], [309, 2, 1, "", "TensorflowQATModel"], [309, 2, 1, "", "TensorflowSavedModelModel"], [309, 1, 1, "", "checkpoint_session"], [309, 1, 1, "", "estimator_session"], [309, 1, 1, "", "frozen_pb_session"], [309, 1, 1, "", "get_model_type"], [309, 1, 1, "", "graph_def_session"], [309, 1, 1, "", "graph_session"], [309, 1, 1, "", "keras_session"], [309, 1, 1, "", "load_saved_model"], [309, 1, 1, "", "saved_model_session"], [309, 1, 1, "", "slim_session"], [309, 1, 1, "", "validate_and_inference_input_output"], [309, 1, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[310, 2, 1, "", "IPEXModel"], [310, 2, 1, "", "PyTorchBaseModel"], [310, 2, 1, "", "PyTorchFXModel"], [310, 2, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[311, 2, 1, "", "Accuracy"], [311, 2, 1, "", "Footprint"], [311, 2, 1, "", "ModelSize"], [311, 2, 1, "", "MultiObjective"], [311, 2, 1, "", "Objective"], [311, 2, 1, "", "Performance"], [311, 1, 1, "", "objective_custom_registry"], [311, 1, 1, "", "objective_registry"]], "neural_compressor.quantization": [[312, 1, 1, "", "fit"]], "neural_compressor.strategy": [[313, 0, 0, "-", "auto"], [314, 0, 0, "-", "auto_mixed_precision"], [315, 0, 0, "-", "basic"], [316, 0, 0, "-", "bayesian"], [317, 0, 0, "-", "conservative"], [318, 0, 0, "-", "exhaustive"], [319, 0, 0, "-", "hawq_v2"], [321, 0, 0, "-", "mse"], [322, 0, 0, "-", "mse_v2"], [323, 0, 0, "-", "random"], [324, 0, 0, "-", "strategy"], [326, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[313, 2, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[314, 2, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[315, 2, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[316, 2, 1, "", "BayesianOptimization"], [316, 2, 1, "", "BayesianTuneStrategy"], [316, 2, 1, "", "TargetSpace"], [316, 1, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[317, 2, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[318, 2, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[319, 2, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[321, 2, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[322, 2, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[323, 2, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[324, 2, 1, "", "TuneStrategy"], [324, 1, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[325, 0, 0, "-", "constant"], [327, 0, 0, "-", "tuning_sampler"], [328, 0, 0, "-", "tuning_space"], [329, 0, 0, "-", "tuning_structs"], [330, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[327, 2, 1, "", "FallbackTuningSampler"], [327, 2, 1, "", "ModelWiseTuningSampler"], [327, 2, 1, "", "OpTypeWiseTuningSampler"], [327, 2, 1, "", "OpWiseTuningSampler"], [327, 2, 1, "", "TuningOrder"], [327, 2, 1, "", "TuningSampler"], [327, 2, 1, "", "TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_space": [[328, 2, 1, "", "TuningItem"], [328, 2, 1, "", "TuningSpace"], [328, 1, 1, "", "get_op_mode_by_query_order"], [328, 1, 1, "", "initial_tuning_cfg_with_quant_mode"], [328, 1, 1, "", "pattern_to_internal"], [328, 1, 1, "", "pattern_to_path"], [328, 1, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[329, 2, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[330, 2, 1, "", "OrderedDefaultDict"], [330, 1, 1, "", "extract_data_type"], [330, 1, 1, "", "get_adaptor_name"], [330, 1, 1, "", "reverted_data_type"]], "neural_compressor.template": [[331, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[331, 2, 1, "", "ExampleClass"], [331, 3, 1, "", "attribute1"], [331, 1, 1, "", "function1"], [331, 1, 1, "", "function2"], [331, 1, 1, "", "function3"], [331, 1, 1, "", "generator1"], [331, 4, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[331, 3, 1, "", "attr1"], [331, 3, 1, "", "attr2"], [331, 3, 1, "", "attr5"]], "neural_compressor.training": [[333, 2, 1, "", "CallBacks"], [333, 2, 1, "", "CompressionManager"], [333, 1, 1, "", "fit"], [333, 1, 1, "", "prepare_compression"]], "neural_compressor.utils": [[334, 0, 0, "-", "collect_layer_histogram"], [335, 0, 0, "-", "constant"], [336, 0, 0, "-", "create_obj_from_config"], [338, 0, 0, "-", "kl_divergence"], [339, 0, 0, "-", "load_huggingface"], [340, 0, 0, "-", "logger"], [341, 0, 0, "-", "options"], [342, 0, 0, "-", "pytorch"], [343, 0, 0, "-", "utility"]], "neural_compressor.utils.collect_layer_histogram": [[334, 2, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[336, 1, 1, "", "create_dataloader"], [336, 1, 1, "", "create_dataset"], [336, 1, 1, "", "create_eval_func"], [336, 1, 1, "", "create_train_func"], [336, 1, 1, "", "get_algorithm"], [336, 1, 1, "", "get_func_from_config"], [336, 1, 1, "", "get_metrics"], [336, 1, 1, "", "get_postprocess"], [336, 1, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[338, 2, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[339, 2, 1, "", "OptimizedModel"], [339, 1, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[340, 2, 1, "", "Logger"], [340, 1, 1, "", "debug"], [340, 1, 1, "", "error"], [340, 1, 1, "", "fatal"], [340, 1, 1, "", "info"], [340, 1, 1, "", "log"], [340, 1, 1, "", "warn"], [340, 1, 1, "", "warning"]], "neural_compressor.utils.options": [[341, 2, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[342, 1, 1, "", "is_int8_model"], [342, 1, 1, "", "load"]], "neural_compressor.utils.utility": [[343, 2, 1, "", "CaptureOutputToFile"], [343, 2, 1, "", "CpuInfo"], [343, 1, 1, "", "Dequantize"], [343, 1, 1, "", "DequantizeWeight"], [343, 2, 1, "", "GLOBAL_STATE"], [343, 2, 1, "", "LazyImport"], [343, 2, 1, "", "MODE"], [343, 2, 1, "", "Statistics"], [343, 1, 1, "", "combine_histogram"], [343, 1, 1, "", "compute_sparsity"], [343, 1, 1, "", "dump_data_to_local"], [343, 1, 1, "", "dump_elapsed_time"], [343, 1, 1, "", "equal_dicts"], [343, 1, 1, "", "fault_tolerant_file"], [343, 1, 1, "", "get_all_fp32_data"], [343, 1, 1, "", "get_size"], [343, 1, 1, "", "get_tensor_histogram"], [343, 1, 1, "", "get_tuning_history"], [343, 1, 1, "", "load_data_from_pkl"], [343, 1, 1, "", "recover"], [343, 1, 1, "", "set_random_seed"], [343, 1, 1, "", "set_resume_from"], [343, 1, 1, "", "set_tensorboard"], [343, 1, 1, "", "set_workspace"], [343, 1, 1, "", "show_memory_info"], [343, 1, 1, "", "singleton"], [343, 1, 1, "", "str2array"], [343, 1, 1, "", "time_limit"], [343, 1, 1, "", "version1_eq_version2"], [343, 1, 1, "", "version1_gt_version2"], [343, 1, 1, "", "version1_gte_version2"], [343, 1, 1, "", "version1_lt_version2"], [343, 1, 1, "", "version1_lte_version2"]], "neural_compressor.ux": [[419, 0, 0, "-", "components"], [478, 0, 0, "-", "inc_bench"], [487, 0, 0, "-", "utils"], [513, 0, 0, "-", "web"]], "neural_compressor.ux.components": [[347, 0, 0, "-", "benchmark"], [351, 0, 0, "-", "config_generator"], [359, 0, 0, "-", "configuration_wizard"], [395, 0, 0, "-", "db_manager"], [400, 0, 0, "-", "diagnosis"], [408, 0, 0, "-", "file_browser"], [414, 0, 0, "-", "graph"], [420, 0, 0, "-", "jobs_management"], [424, 0, 0, "-", "manage_workspace"], [426, 0, 0, "-", "model"], [445, 0, 0, "-", "model_zoo"], [447, 0, 0, "-", "names_mapper"], [454, 0, 0, "-", "optimization"], [470, 0, 0, "-", "profiling"]], "neural_compressor.ux.components.benchmark": [[347, 2, 1, "", "Benchmarks"], [344, 0, 0, "-", "benchmark"], [345, 0, 0, "-", "benchmark_model"], [346, 0, 0, "-", "execute_benchmark"]], "neural_compressor.ux.components.benchmark.benchmark": [[344, 2, 1, "", "Benchmark"], [344, 2, 1, "", "DataloaderInterface"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[345, 1, 1, "", "benchmark_model"], [345, 1, 1, "", "parse_args"], [345, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[346, 1, 1, "", "benchmark_result_update"], [346, 1, 1, "", "benchmark_result_update_pytorch_script"], [346, 1, 1, "", "execute_benchmark"], [346, 1, 1, "", "execute_real_benchmark"], [346, 1, 1, "", "pytorch_script_bench_optimizations"], [346, 1, 1, "", "pytorch_script_bench_original_model"]], "neural_compressor.ux.components.config_generator": [[348, 0, 0, "-", "benchmark_config_generator"], [349, 0, 0, "-", "config_generator"], [350, 0, 0, "-", "graph_optimization_config_generator"], [352, 0, 0, "-", "mixed_precision_config_generator"], [353, 0, 0, "-", "profiling_config_generator"], [354, 0, 0, "-", "pruning_config_generator"], [355, 0, 0, "-", "quantization_config_generator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[348, 2, 1, "", "BenchmarkConfigGenerator"]], "neural_compressor.ux.components.config_generator.config_generator": [[349, 2, 1, "", "ConfigGenerator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[350, 2, 1, "", "GraphOptimizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[352, 2, 1, "", "MixedPrecisionConfigGenerator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[353, 2, 1, "", "ProfilingConfigGenerator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[354, 2, 1, "", "PruningConfigGenerator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[355, 2, 1, "", "QuantizationConfigGenerator"]], "neural_compressor.ux.components.configuration_wizard": [[356, 0, 0, "-", "configuration_parser"], [357, 0, 0, "-", "get_boundary_nodes"], [358, 0, 0, "-", "get_configuration"], [360, 0, 0, "-", "params_feeder"], [361, 0, 0, "-", "pruning_config_parser"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[356, 2, 1, "", "ConfigurationParser"], [356, 1, 1, "", "normalize_string_list"], [356, 1, 1, "", "parse_list_value"], [356, 1, 1, "", "parse_multidim_list"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[357, 1, 1, "", "get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[358, 1, 1, "", "get_predefined_configuration"], [358, 1, 1, "", "update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[360, 2, 1, "", "Feeder"], [360, 1, 1, "", "get_possible_values"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[361, 2, 1, "", "PruningConfigParser"]], "neural_compressor.ux.components.db_manager": [[362, 0, 0, "-", "db_manager"], [371, 0, 0, "-", "db_models"], [390, 0, 0, "-", "db_operations"], [396, 0, 0, "-", "params_interfaces"], [397, 0, 0, "-", "utils"]], "neural_compressor.ux.components.db_manager.db_manager": [[362, 2, 1, "", "DBManager"]], "neural_compressor.ux.components.db_manager.db_models": [[363, 0, 0, "-", "benchmark"], [364, 0, 0, "-", "benchmark_result"], [365, 0, 0, "-", "dataloader"], [366, 0, 0, "-", "dataset"], [367, 0, 0, "-", "domain"], [368, 0, 0, "-", "domain_flavour"], [369, 0, 0, "-", "example"], [370, 0, 0, "-", "framework"], [372, 0, 0, "-", "metric"], [373, 0, 0, "-", "model"], [374, 0, 0, "-", "optimization"], [375, 0, 0, "-", "optimization_type"], [376, 0, 0, "-", "precision"], [377, 0, 0, "-", "profiling"], [378, 0, 0, "-", "profiling_result"], [379, 0, 0, "-", "project"], [380, 0, 0, "-", "pruning_details"], [381, 0, 0, "-", "transform"], [382, 0, 0, "-", "tuning_details"], [383, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[363, 2, 1, "", "Benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[364, 2, 1, "", "BenchmarkResult"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[365, 2, 1, "", "Dataloader"], [365, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[366, 2, 1, "", "Dataset"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[367, 2, 1, "", "Domain"], [367, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[368, 2, 1, "", "DomainFlavour"], [368, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.example": [[369, 2, 1, "", "Example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[370, 2, 1, "", "Framework"], [370, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[372, 2, 1, "", "Metric"], [372, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.model": [[373, 2, 1, "", "Model"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[374, 2, 1, "", "Optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[375, 2, 1, "", "OptimizationType"], [375, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[376, 2, 1, "", "Precision"], [376, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[377, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[378, 2, 1, "", "ProfilingResult"]], "neural_compressor.ux.components.db_manager.db_models.project": [[379, 2, 1, "", "Project"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[380, 2, 1, "", "PruningDetails"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[381, 2, 1, "", "Transform"], [381, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[382, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[383, 2, 1, "", "TuningHistory"]], "neural_compressor.ux.components.db_manager.db_operations": [[384, 0, 0, "-", "benchmark_api_interface"], [385, 0, 0, "-", "dataset_api_interface"], [386, 0, 0, "-", "db_operations"], [387, 0, 0, "-", "diagnosis_api_interface"], [388, 0, 0, "-", "dictionaries_api_interface"], [389, 0, 0, "-", "examples_api_interface"], [391, 0, 0, "-", "model_api_interface"], [392, 0, 0, "-", "optimization_api_interface"], [393, 0, 0, "-", "profiling_api_interface"], [394, 0, 0, "-", "project_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[384, 2, 1, "", "BenchmarkAPIInterface"], [384, 1, 1, "", "before_delete_benchmark_entry"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[385, 2, 1, "", "DatasetAPIInterface"], [385, 1, 1, "", "initialize_associations"], [385, 1, 1, "", "initialize_precision_optimization_types_association"], [385, 1, 1, "", "search_in_list_of_dict"], [385, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [385, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[386, 1, 1, "", "initialize_associations"], [386, 1, 1, "", "initialize_precision_optimization_types_association"], [386, 1, 1, "", "search_in_list_of_dict"], [386, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [386, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[387, 2, 1, "", "DiagnosisAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[388, 2, 1, "", "DictionariesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[389, 2, 1, "", "ExamplesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[391, 2, 1, "", "ModelAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[392, 2, 1, "", "OptimizationAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[393, 2, 1, "", "ProfilingAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[394, 2, 1, "", "ProjectAPIInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[396, 2, 1, "", "BenchmarkAddParamsInterface"], [396, 2, 1, "", "BenchmarkEditParamsInterface"], [396, 2, 1, "", "DatasetAddParamsInterface"], [396, 2, 1, "", "DiagnosisOptimizationParamsInterface"], [396, 2, 1, "", "ModelAddParamsInterface"], [396, 2, 1, "", "OptimizationAddParamsInterface"], [396, 2, 1, "", "OptimizationEditParamsInterface"], [396, 2, 1, "", "ProfilingAddParamsInterface"], [396, 2, 1, "", "ProfilingEditParamsInterface"], [396, 2, 1, "", "ProfilingResultAddParamsInterface"], [396, 2, 1, "", "TuningHistoryInterface"], [396, 2, 1, "", "TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.utils": [[397, 1, 1, "", "get_framework_dataloaders_config"], [397, 1, 1, "", "get_framework_transforms_config"], [397, 1, 1, "", "update_dataloaders_params"]], "neural_compressor.ux.components.diagnosis": [[398, 0, 0, "-", "diagnosis"], [399, 0, 0, "-", "factory"], [401, 0, 0, "-", "onnx_diagnosis"], [403, 0, 0, "-", "op_details"], [404, 0, 0, "-", "op_entry"], [405, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[398, 2, 1, "", "Diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[399, 2, 1, "", "DiagnosisFactory"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[402, 0, 0, "-", "onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[402, 2, 1, "", "OnnxRtDiagnosis"]], "neural_compressor.ux.components.diagnosis.op_details": [[403, 2, 1, "", "OpActivation"], [403, 2, 1, "", "OpDetails"], [403, 2, 1, "", "OpPattern"], [403, 2, 1, "", "OpWeights"]], "neural_compressor.ux.components.diagnosis.op_entry": [[404, 2, 1, "", "OpEntry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[406, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[406, 2, 1, "", "TensorflowDiagnosis"]], "neural_compressor.ux.components.file_browser": [[407, 0, 0, "-", "file_browser"]], "neural_compressor.ux.components.file_browser.file_browser": [[407, 1, 1, "", "create_dir_entry"], [407, 1, 1, "", "create_entry"], [407, 1, 1, "", "create_file_entry"], [407, 1, 1, "", "filter_requested_entries"], [407, 1, 1, "", "get_directory_entries"], [407, 1, 1, "", "get_filter_value"], [407, 1, 1, "", "get_non_hidden_directory_entries"], [407, 1, 1, "", "get_requested_path"], [407, 1, 1, "", "get_setting_value"], [407, 1, 1, "", "is_dataset_or_directory_entry"], [407, 1, 1, "", "is_directory_entry"], [407, 1, 1, "", "is_model_or_directory_entry"], [407, 1, 1, "", "should_show_files"], [407, 1, 1, "", "should_show_only_model_files"], [407, 1, 1, "", "sort_entries"]], "neural_compressor.ux.components.graph": [[409, 0, 0, "-", "attribute"], [410, 0, 0, "-", "collapser"], [411, 0, 0, "-", "edge"], [412, 0, 0, "-", "graph"], [413, 0, 0, "-", "graph_reader"], [415, 0, 0, "-", "node"], [416, 0, 0, "-", "reader"]], "neural_compressor.ux.components.graph.attribute": [[409, 2, 1, "", "Attribute"]], "neural_compressor.ux.components.graph.collapser": [[410, 2, 1, "", "Collapser"]], "neural_compressor.ux.components.graph.edge": [[411, 2, 1, "", "Edge"]], "neural_compressor.ux.components.graph.graph": [[412, 2, 1, "", "Graph"]], "neural_compressor.ux.components.graph.graph_reader": [[413, 2, 1, "", "GraphReader"]], "neural_compressor.ux.components.graph.node": [[415, 2, 1, "", "GroupNode"], [415, 2, 1, "", "Node"]], "neural_compressor.ux.components.graph.reader": [[417, 0, 0, "-", "onnxrt_reader"], [418, 0, 0, "-", "tensorflow_reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[417, 2, 1, "", "OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[418, 2, 1, "", "TensorflowReader"]], "neural_compressor.ux.components.jobs_management": [[421, 0, 0, "-", "jobs_control_queue"], [422, 0, 0, "-", "jobs_manager"], [423, 0, 0, "-", "request"]], "neural_compressor.ux.components.manage_workspace": [[424, 1, 1, "", "get_default_path"]], "neural_compressor.ux.components.model": [[425, 0, 0, "-", "domain"], [427, 0, 0, "-", "model"], [428, 0, 0, "-", "model_type_getter"], [429, 0, 0, "-", "onnxrt"], [431, 0, 0, "-", "pytorch"], [433, 0, 0, "-", "repository"], [434, 0, 0, "-", "shape"], [436, 0, 0, "-", "tensorflow"]], "neural_compressor.ux.components.model.domain": [[425, 2, 1, "", "Domain"]], "neural_compressor.ux.components.model.model": [[427, 2, 1, "", "Model"]], "neural_compressor.ux.components.model.model_type_getter": [[428, 1, 1, "", "get_model_type"]], "neural_compressor.ux.components.model.onnxrt": [[430, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.onnxrt.model": [[430, 2, 1, "", "OnnxrtModel"], [430, 1, 1, "", "remove_number_of_samples_from_shape"]], "neural_compressor.ux.components.model.pytorch": [[432, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.pytorch.model": [[432, 2, 1, "", "PyTorchScriptModel"]], "neural_compressor.ux.components.model.repository": [[433, 2, 1, "", "ModelRepository"]], "neural_compressor.ux.components.model.shape": [[434, 2, 1, "", "Shape"]], "neural_compressor.ux.components.model.tensorflow": [[435, 0, 0, "-", "frozen_pb"], [437, 0, 0, "-", "keras"], [438, 0, 0, "-", "meta_graph"], [439, 0, 0, "-", "model"], [440, 0, 0, "-", "saved_model"], [441, 0, 0, "-", "utils"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[435, 2, 1, "", "FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.keras": [[437, 2, 1, "", "KerasModel"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[438, 2, 1, "", "MetaGraphModel"]], "neural_compressor.ux.components.model.tensorflow.model": [[439, 2, 1, "", "TensorflowModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[440, 2, 1, "", "SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.utils": [[441, 1, 1, "", "get_input_shape"]], "neural_compressor.ux.components.model_zoo": [[442, 0, 0, "-", "download_config"], [443, 0, 0, "-", "download_model"], [444, 0, 0, "-", "downloader"], [446, 0, 0, "-", "list_models"]], "neural_compressor.ux.components.model_zoo.download_config": [[442, 1, 1, "", "download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[443, 1, 1, "", "download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[444, 2, 1, "", "Downloader"]], "neural_compressor.ux.components.model_zoo.list_models": [[446, 1, 1, "", "check_version"], [446, 1, 1, "", "get_available_models"], [446, 1, 1, "", "get_framework_module_name"], [446, 1, 1, "", "get_installed_frameworks"], [446, 1, 1, "", "list_models"], [446, 1, 1, "", "validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[448, 0, 0, "-", "names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[448, 2, 1, "", "MappingDirection"], [448, 2, 1, "", "NamesMapper"]], "neural_compressor.ux.components.optimization": [[454, 2, 1, "", "Optimizations"], [449, 0, 0, "-", "execute_optimization"], [450, 0, 0, "-", "factory"], [452, 0, 0, "-", "graph_optimizer"], [455, 0, 0, "-", "mixed_precision"], [458, 0, 0, "-", "neural_coder_optimization"], [460, 0, 0, "-", "optimization"], [461, 0, 0, "-", "pruning"], [464, 0, 0, "-", "tune"], [467, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.optimization.execute_optimization": [[449, 1, 1, "", "check_if_collect_tuning_history"], [449, 1, 1, "", "execute_optimization"], [449, 1, 1, "", "execute_optimization_pytorch_script"], [449, 1, 1, "", "execute_optimization_regular"], [449, 1, 1, "", "parse_logs"], [449, 1, 1, "", "parse_model_data_to_bench_names"]], "neural_compressor.ux.components.optimization.factory": [[450, 2, 1, "", "OptimizationFactory"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[451, 0, 0, "-", "graph_optimization"], [453, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[451, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[453, 1, 1, "", "optimize_graph"], [453, 1, 1, "", "optimize_graph_config"], [453, 1, 1, "", "parse_args"], [453, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.mixed_precision": [[456, 0, 0, "-", "mixed_precision"], [457, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[456, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[457, 1, 1, "", "optimize_graph"], [457, 1, 1, "", "optimize_graph_config"], [457, 1, 1, "", "parse_args"], [457, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[459, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[459, 1, 1, "", "optimize_pt_script"]], "neural_compressor.ux.components.optimization.optimization": [[460, 2, 1, "", "DataloaderInterface"], [460, 2, 1, "", "Optimization"], [460, 2, 1, "", "OptimizationInterface"]], "neural_compressor.ux.components.optimization.pruning": [[462, 0, 0, "-", "optimize_model"], [463, 0, 0, "-", "pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[462, 1, 1, "", "optimize_model"], [462, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[463, 2, 1, "", "Pruning"]], "neural_compressor.ux.components.optimization.tune": [[465, 0, 0, "-", "tune_model"], [466, 0, 0, "-", "tuning"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[465, 1, 1, "", "parse_args"], [465, 1, 1, "", "set_eager_execution"], [465, 1, 1, "", "tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[466, 2, 1, "", "AccuracyCriterion"], [466, 2, 1, "", "Tuning"], [466, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.optimization.tuning_history": [[467, 2, 1, "", "TuningHistory"], [467, 2, 1, "", "Watcher"], [467, 1, 1, "", "tuning_history"], [467, 1, 1, "", "tuning_history_path"]], "neural_compressor.ux.components.profiling": [[468, 0, 0, "-", "execute_profiling"], [469, 0, 0, "-", "factory"], [471, 0, 0, "-", "profile_model"], [472, 0, 0, "-", "profiler"], [473, 0, 0, "-", "profiling"], [475, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.ux.components.profiling.execute_profiling": [[468, 1, 1, "", "execute_profiling"], [468, 1, 1, "", "execute_real_profiling"]], "neural_compressor.ux.components.profiling.factory": [[469, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.profile_model": [[471, 1, 1, "", "load_profiling_details"], [471, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.profiling.profiler": [[472, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.profiling": [[473, 2, 1, "", "DataloaderInterface"], [473, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[474, 0, 0, "-", "factory"], [476, 0, 0, "-", "profiler"], [477, 0, 0, "-", "utils"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[474, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[476, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[477, 1, 1, "", "delete_assign"]], "neural_compressor.ux.inc_bench": [[478, 1, 1, "", "main"], [478, 1, 1, "", "prepare_environment"]], "neural_compressor.ux.utils": [[480, 0, 0, "-", "consts"], [481, 0, 0, "-", "environment"], [482, 0, 0, "-", "exceptions"], [483, 0, 0, "-", "executor"], [484, 0, 0, "-", "expiring_dict"], [485, 0, 0, "-", "github_info"], [486, 0, 0, "-", "hw_info"], [488, 0, 0, "-", "json_serializer"], [489, 0, 0, "-", "logger"], [490, 0, 0, "-", "parser"], [491, 0, 0, "-", "proc"], [492, 0, 0, "-", "processes"], [493, 0, 0, "-", "singleton"], [494, 0, 0, "-", "status_updates"], [495, 0, 0, "-", "templates"], [498, 0, 0, "-", "utils"], [503, 0, 0, "-", "workload"], [509, 0, 0, "-", "yaml_utils"]], "neural_compressor.ux.utils.consts": [[480, 2, 1, "", "DomainFlavours"], [480, 2, 1, "", "Domains"], [480, 2, 1, "", "ExecutionStatus"], [480, 2, 1, "", "Frameworks"], [480, 2, 1, "", "OptimizationTypes"], [480, 2, 1, "", "Precisions"], [480, 2, 1, "", "Strategies"]], "neural_compressor.ux.utils.environment": [[481, 2, 1, "", "Environment"]], "neural_compressor.ux.utils.exceptions": [[482, 5, 1, "", "AccessDeniedException"], [482, 5, 1, "", "ClientErrorException"], [482, 5, 1, "", "InternalException"], [482, 5, 1, "", "NotFoundException"]], "neural_compressor.ux.utils.executor": [[483, 2, 1, "", "Executor"]], "neural_compressor.ux.utils.expiring_dict": [[484, 2, 1, "", "ExpiringDict"], [484, 2, 1, "", "ExpiringDictItem"]], "neural_compressor.ux.utils.github_info": [[485, 2, 1, "", "GithubInfo"]], "neural_compressor.ux.utils.hw_info": [[486, 2, 1, "", "HWInfo"], [486, 1, 1, "", "get_bios_version"], [486, 1, 1, "", "get_distribution"], [486, 1, 1, "", "get_framework_dependency_info"], [486, 1, 1, "", "get_framework_info"], [486, 1, 1, "", "get_kernel_version"], [486, 1, 1, "", "get_number_of_sockets"], [486, 1, 1, "", "is_turbo_boost_enabled"]], "neural_compressor.ux.utils.json_serializer": [[488, 2, 1, "", "JsonSerializer"]], "neural_compressor.ux.utils.logger": [[489, 1, 1, "", "change_log_level"]], "neural_compressor.ux.utils.parser": [[490, 2, 1, "", "AccuracyParser"], [490, 2, 1, "", "BenchmarkParserFactory"], [490, 2, 1, "", "OptimizationParser"], [490, 2, 1, "", "Parser"], [490, 2, 1, "", "PerformanceParser"], [490, 2, 1, "", "ProfilingParser"]], "neural_compressor.ux.utils.proc": [[491, 2, 1, "", "Proc"]], "neural_compressor.ux.utils.processes": [[492, 2, 1, "", "NCProcesses"]], "neural_compressor.ux.utils.singleton": [[493, 2, 1, "", "Singleton"]], "neural_compressor.ux.utils.status_updates": [[494, 1, 1, "", "get_status_update_function"]], "neural_compressor.ux.utils.templates": [[496, 0, 0, "-", "metric"], [497, 0, 0, "-", "workdir"]], "neural_compressor.ux.utils.templates.metric": [[496, 2, 1, "", "Metric"]], "neural_compressor.ux.utils.templates.workdir": [[497, 2, 1, "", "Workdir"]], "neural_compressor.ux.utils.utils": [[498, 1, 1, "", "are_archive_filenames_valid"], [498, 1, 1, "", "check_module"], [498, 1, 1, "", "deprecated"], [498, 1, 1, "", "determine_ip"], [498, 1, 1, "", "export_to_csv"], [498, 1, 1, "", "filter_transforms"], [498, 1, 1, "", "get_dataset_path"], [498, 1, 1, "", "get_default_pruning_config_path"], [498, 1, 1, "", "get_file_extension"], [498, 1, 1, "", "get_framework_from_path"], [498, 1, 1, "", "get_height_width_from_size"], [498, 1, 1, "", "get_metrics_dict"], [498, 1, 1, "", "get_model_zoo_config_path"], [498, 1, 1, "", "get_model_zoo_model_path"], [498, 1, 1, "", "get_module_version"], [498, 1, 1, "", "get_predefined_config_path"], [498, 1, 1, "", "get_shape_from_transforms"], [498, 1, 1, "", "get_size"], [498, 1, 1, "", "is_dataset_file"], [498, 1, 1, "", "is_development_env"], [498, 1, 1, "", "is_hidden"], [498, 1, 1, "", "load_dataloader_config"], [498, 1, 1, "", "load_help_nc_params"], [498, 1, 1, "", "load_metrics_config"], [498, 1, 1, "", "load_model_config"], [498, 1, 1, "", "load_model_wise_params"], [498, 1, 1, "", "load_precisions_config"], [498, 1, 1, "", "load_pruning_details_config"], [498, 1, 1, "", "load_transforms_config"], [498, 1, 1, "", "load_transforms_filter_config"], [498, 1, 1, "", "normalize_domain"], [498, 1, 1, "", "normalize_framework"], [498, 1, 1, "", "normalize_string"], [498, 1, 1, "", "parse_bool_value"], [498, 1, 1, "", "parse_to_float_list"], [498, 1, 1, "", "parse_to_string_list"], [498, 1, 1, "", "parse_version"], [498, 1, 1, "", "release_tag"], [498, 1, 1, "", "replace_with_values"], [498, 1, 1, "", "safe_extract_archive"], [498, 1, 1, "", "verify_file_path"]], "neural_compressor.ux.utils.workload": [[499, 0, 0, "-", "config"], [500, 0, 0, "-", "dataloader"], [501, 0, 0, "-", "evaluation"], [502, 0, 0, "-", "graph_optimization"], [504, 0, 0, "-", "mixed_precision"], [505, 0, 0, "-", "model"], [506, 0, 0, "-", "pruning"], [507, 0, 0, "-", "quantization"], [508, 0, 0, "-", "tuning"]], "neural_compressor.ux.utils.workload.config": [[499, 2, 1, "", "Config"]], "neural_compressor.ux.utils.workload.dataloader": [[500, 2, 1, "", "Dataloader"], [500, 2, 1, "", "Dataset"], [500, 2, 1, "", "Filter"], [500, 2, 1, "", "LabelBalance"], [500, 2, 1, "", "Transform"]], "neural_compressor.ux.utils.workload.evaluation": [[501, 2, 1, "", "Accuracy"], [501, 2, 1, "", "Configs"], [501, 2, 1, "", "Evaluation"], [501, 2, 1, "", "Metric"], [501, 2, 1, "", "Performance"], [501, 2, 1, "", "Postprocess"], [501, 2, 1, "", "PostprocessSchema"]], "neural_compressor.ux.utils.workload.graph_optimization": [[502, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.utils.workload.mixed_precision": [[504, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.utils.workload.model": [[505, 2, 1, "", "Model"]], "neural_compressor.ux.utils.workload.pruning": [[506, 2, 1, "", "AdamOptimizer"], [506, 2, 1, "", "AdamWOptimizer"], [506, 2, 1, "", "Approach"], [506, 2, 1, "", "Criterion"], [506, 2, 1, "", "CrossEntropyLossCriterion"], [506, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [506, 2, 1, "", "KnowledgeDistillationLossCriterion"], [506, 2, 1, "", "Optimizer"], [506, 2, 1, "", "Pruning"], [506, 2, 1, "", "SGDOptimizer"], [506, 2, 1, "", "SelfKnowledgeDistillationLoss"], [506, 2, 1, "", "SparseCategoricalCrossentropyCriterion"], [506, 2, 1, "", "Train"], [506, 2, 1, "", "WeightCompressionApproach"], [506, 1, 1, "", "parse_dict_value_to_float"], [506, 1, 1, "", "parse_dict_value_to_int"]], "neural_compressor.ux.utils.workload.quantization": [[507, 2, 1, "", "Advance"], [507, 2, 1, "", "Calibration"], [507, 2, 1, "", "Quantization"], [507, 2, 1, "", "WiseConfig"], [507, 2, 1, "", "WiseConfigDetails"]], "neural_compressor.ux.utils.workload.tuning": [[508, 2, 1, "", "AccCriterion"], [508, 2, 1, "", "Diagnosis"], [508, 2, 1, "", "ExitPolicy"], [508, 2, 1, "", "MultiObjectives"], [508, 2, 1, "", "Strategy"], [508, 2, 1, "", "Tuning"], [508, 2, 1, "", "Workspace"]], "neural_compressor.ux.utils.yaml_utils": [[509, 1, 1, "", "float_representer"], [509, 1, 1, "", "pruner_representer"]], "neural_compressor.ux.web": [[510, 0, 0, "-", "communication"], [511, 0, 0, "-", "configuration"], [512, 0, 0, "-", "exceptions"], [514, 0, 0, "-", "router"], [515, 0, 0, "-", "server"], [518, 0, 0, "-", "service"]], "neural_compressor.ux.web.communication": [[510, 2, 1, "", "Message"], [510, 2, 1, "", "MessageQueue"], [510, 2, 1, "", "Request"], [510, 2, 1, "", "Response"], [510, 1, 1, "", "create_simple_response"]], "neural_compressor.ux.web.configuration": [[511, 2, 1, "", "Configuration"]], "neural_compressor.ux.web.exceptions": [[512, 5, 1, "", "ServiceNotFoundException"]], "neural_compressor.ux.web.router": [[514, 2, 1, "", "DeferredRoutingDefinition"], [514, 2, 1, "", "DeferredSubprocessRoutingDefinition"], [514, 2, 1, "", "RealtimeRoutingDefinition"], [514, 2, 1, "", "Router"], [514, 2, 1, "", "RoutingDefinition"], [514, 1, 1, "", "find_pattern_in_graph"], [514, 1, 1, "", "get_model_graph"], [514, 1, 1, "", "get_system_info"]], "neural_compressor.ux.web.server": [[515, 1, 1, "", "allow_api_call"], [515, 1, 1, "", "block_iframe"], [515, 1, 1, "", "block_sniffing"], [515, 1, 1, "", "build_parameters"], [515, 1, 1, "", "disable_cache"], [515, 1, 1, "", "get_tls_args"], [515, 1, 1, "", "handle_api_call"], [515, 1, 1, "", "page_not_found"], [515, 1, 1, "", "require_api_token"], [515, 1, 1, "", "root"], [515, 1, 1, "", "run_server"], [515, 1, 1, "", "web_socket_publisher"]], "neural_compressor.ux.web.service": [[516, 0, 0, "-", "benchmark"], [517, 0, 0, "-", "history_snapshot_parser"], [519, 0, 0, "-", "model"], [520, 0, 0, "-", "optimization"], [521, 0, 0, "-", "profiling"], [522, 0, 0, "-", "request_data_processor"], [523, 0, 0, "-", "response_generator"], [524, 0, 0, "-", "workload"]], "neural_compressor.ux.web.service.benchmark": [[516, 2, 1, "", "BenchmarkService"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[517, 2, 1, "", "HistorySnapshotParser"]], "neural_compressor.ux.web.service.model": [[519, 2, 1, "", "ModelService"]], "neural_compressor.ux.web.service.optimization": [[520, 2, 1, "", "OptimizationService"]], "neural_compressor.ux.web.service.profiling": [[521, 2, 1, "", "ProfilingService"]], "neural_compressor.ux.web.service.request_data_processor": [[522, 2, 1, "", "RequestDataProcessor"]], "neural_compressor.ux.web.service.response_generator": [[523, 2, 1, "", "ResponseGenerator"]], "neural_compressor.ux.web.service.workload": [[524, 2, 1, "", "WorkloadService"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:attribute", "4": "py:data", "5": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "data", "Python data"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"644ec953a7dc_pruning_support": 0, "6ece06672ed3_v1_14": 1, "modul": [1, 5, 6, 8, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 203, 204, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 243, 245, 246, 247, 249, 250, 251, 252, 253, 255, 256, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 274, 275, 276, 277, 280, 281, 282, 285, 286, 287, 288, 289, 290, 291, 293, 294, 296, 297, 298, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 327, 328, 329, 330, 331, 333, 334, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 396, 397, 398, 399, 402, 403, 404, 406, 407, 409, 410, 411, 412, 413, 415, 417, 418, 424, 425, 427, 428, 430, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 446, 448, 449, 450, 451, 453, 456, 457, 459, 460, 462, 463, 465, 466, 467, 468, 469, 471, 472, 473, 474, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524], "content": [1, 5, 6, 7, 8, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 285, 286, 287, 288, 289, 290, 291, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 396, 397, 398, 399, 402, 403, 404, 406, 407, 409, 410, 411, 412, 413, 415, 417, 418, 424, 425, 427, 428, 430, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 446, 448, 449, 450, 451, 453, 454, 456, 457, 459, 460, 462, 463, 465, 466, 467, 468, 469, 471, 472, 473, 474, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 532, 548], "function": [1, 5, 6, 17, 20, 37, 43, 44, 66, 67, 69, 103, 104, 115, 117, 145, 146, 147, 150, 151, 152, 154, 157, 159, 162, 165, 167, 168, 169, 170, 171, 173, 183, 191, 193, 197, 200, 201, 202, 205, 207, 208, 209, 210, 212, 214, 215, 217, 220, 223, 231, 233, 237, 240, 241, 242, 244, 245, 246, 249, 250, 251, 252, 255, 256, 258, 259, 260, 261, 262, 269, 276, 280, 285, 286, 287, 289, 293, 294, 296, 297, 298, 299, 300, 301, 305, 309, 311, 312, 316, 324, 328, 330, 331, 333, 336, 337, 339, 340, 342, 343, 345, 346, 356, 357, 358, 360, 365, 367, 368, 370, 372, 375, 376, 381, 384, 385, 386, 397, 407, 424, 428, 430, 441, 442, 443, 446, 449, 453, 457, 459, 462, 465, 467, 468, 471, 477, 478, 486, 489, 494, 498, 506, 509, 510, 514, 515, 555], "6f0d0f71d92e_v1_13": 2, "9e89549a08c8_v1_11": 3, "block_mask": 4, "env": 5, "neural_compressor": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525], "adaptor": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 533, 534], "class": [6, 8, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 149, 152, 153, 154, 155, 156, 158, 159, 162, 165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 252, 253, 254, 255, 258, 261, 262, 263, 264, 265, 266, 268, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 285, 287, 288, 289, 290, 291, 293, 296, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 327, 328, 329, 330, 331, 333, 334, 337, 338, 339, 340, 341, 343, 344, 347, 348, 349, 350, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 391, 392, 393, 394, 396, 398, 399, 402, 403, 404, 406, 409, 410, 411, 412, 413, 415, 417, 418, 425, 427, 430, 432, 433, 434, 435, 437, 438, 439, 440, 444, 448, 450, 451, 454, 456, 460, 463, 466, 467, 469, 472, 473, 474, 476, 480, 481, 483, 484, 485, 486, 488, 490, 491, 492, 493, 496, 497, 499, 500, 501, 502, 504, 505, 506, 507, 508, 510, 511, 514, 516, 517, 519, 520, 521, 522, 523, 524, 533], "subpackag": [7, 21, 86, 110, 111, 113, 161, 163, 177, 202, 242, 254, 278, 292, 320, 395, 400, 414, 419, 426, 454, 470, 479, 487, 513], "submodul": [7, 16, 21, 33, 50, 75, 86, 94, 100, 105, 110, 111, 113, 116, 129, 142, 148, 154, 160, 161, 163, 164, 178, 185, 197, 201, 205, 212, 219, 225, 237, 241, 244, 248, 254, 261, 267, 273, 279, 283, 292, 299, 303, 320, 326, 332, 337, 347, 351, 359, 371, 390, 395, 400, 401, 405, 408, 414, 416, 419, 420, 426, 429, 431, 436, 445, 447, 452, 454, 455, 458, 461, 464, 470, 475, 479, 487, 495, 503, 513, 518], "packag": [7, 33, 154, 185, 197, 201, 202, 205, 212, 225, 237, 241, 242, 244, 254, 261, 273, 278, 279, 299, 303, 320, 337, 347, 454, 579, 581, 583, 584], "kera": [8, 437], "keras_util": [9, 10, 11, 12, 13, 14], "conv2d": 9, "dens": 10, "depthwise_conv2d": 11, "quantiz": [13, 42, 290, 312, 507, 529, 532, 545, 554, 560, 563, 566, 575, 586, 593, 594, 595, 598, 604], "separable_conv2d": 14, "mxnet": [15, 551, 565, 594, 600, 604], "mxnet_util": [16, 17], "util": [17, 43, 145, 151, 171, 252, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 397, 441, 477, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 536], "onnxrt": [18, 429, 430, 551, 565, 600], "ox_util": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], "calibr": [19, 20], "oper": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], "activ": 22, "argmax": 23, "attent": 24, "binary_op": 25, "concat": 26, "conv": 27, "direct_q8": 28, "embed_layernorm": 29, "gather": 30, "gavgpool": 31, "gemm": 32, "lstm": 34, "matmul": [35, 598], "maxpool": 36, "op": 37, "pad": 38, "pool": 39, "resiz": 40, "split": 41, "pytorch": [44, 342, 431, 432, 551, 555, 565, 567, 594, 595, 599, 600, 604], "queri": [45, 533], "tensorflow": [46, 435, 436, 437, 438, 439, 440, 441, 551, 555, 565, 567, 594, 595, 599, 600, 604], "tf_util": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145], "graph_convert": 47, "graph_converter_without_calib": 48, "graph_rewrit": [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "bf16": [49, 50], "bf16_convert": [49, 146], "gener": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "convert_add_to_biasadd": 51, "convert_layout": 52, "convert_leakyrelu": 53, "convert_nan_to_random": 54, "convert_placeholder_to_const": 55, "dequantize_cast_optim": 56, "dilated_contract": 57, "dummy_biasadd": 58, "expanddims_optim": 59, "fetch_weight_from_reshap": 60, "fold_batch_norm": 61, "fold_const": 62, "fuse_biasadd_add": 63, "fuse_column_wise_mul": 64, "fuse_conv_with_math": 65, "fuse_decomposed_bn": 66, "fuse_decomposed_in": 67, "fuse_gelu": 68, "fuse_layer_norm": 69, "fuse_pad_with_conv": 70, "fuse_pad_with_fp32_conv": 71, "fuse_reshape_transpos": 72, "graph_cse_optim": 73, "grappler_pass": 74, "insert_print_nod": 76, "move_squeeze_after_relu": 77, "pre_optim": 78, "remove_training_nod": 79, "rename_batch_norm": 80, "split_shared_input": 81, "strip_equivalent_nod": 82, "strip_unused_nod": 83, "switch_optim": 84, "graph_bas": 85, "int8": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 557, 604], "freeze_fake_qu": 87, "freeze_valu": 88, "freeze_value_without_calib": 89, "fuse_conv_redundant_dequant": 90, "fuse_conv_requant": 91, "fuse_matmul_redundant_dequant": 92, "fuse_matmul_requant": 93, "meta_op_optim": 95, "post_hostconst_convert": 96, "post_quantized_op_cs": 97, "rnn_convert": 98, "scale_propag": 99, "onnx": [100, 101, 102, 103, 104, 535, 563, 567, 594, 604], "onnx_graph": 101, "onnx_nod": 102, "onnx_schema": 103, "tf2onnx_util": 104, "qdq": [105, 106, 107, 108, 122, 123, 124, 125, 126, 127, 128, 129, 130, 604], "insert_qdq_pattern": 106, "merge_duplicated_qdq": 107, "share_qdq_y_pattern": 108, "graph_util": 109, "quantize_graph": [111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137], "qat": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 604], "fake_quant": 112, "quantize_config": 114, "quantize_help": 115, "quantize_lay": [116, 117, 118, 119, 120], "optimize_lay": 117, "quantize_layer_add": 118, "quantize_layer_bas": 119, "quantize_layer_bn": 120, "quantize_wrapp": 121, "fuse_qdq_bn": 122, "fuse_qdq_concatv2": 123, "fuse_qdq_conv": 124, "fuse_qdq_deconv": 125, "fuse_qdq_in": 126, "fuse_qdq_matmul": 127, "fuse_qdq_pool": 128, "optimize_qdq": 130, "quantize_graph_bas": 131, "quantize_graph_bn": 132, "quantize_graph_concatv2": 133, "quantize_graph_conv": 134, "quantize_graph_for_intel_cpu": 135, "quantize_graph_matmul": 136, "quantize_graph_pool": 137, "quantize_graph_common": 138, "tf2onnx_convert": 139, "transform_graph": [140, 141, 142, 143, 144], "bias_correct": 140, "graph_transform_bas": 141, "insert_log": 143, "rerange_quantized_concat": 144, "torch_util": [146, 147, 148, 149, 150, 151, 217], "hawq_metr": 147, "smooth_quant": [149, 155], "symbolic_trac": 150, "algorithm": [152, 153, 154, 155, 156, 598, 601], "fast_bias_correct": 153, "weight_correct": 156, "benchmark": [157, 209, 344, 345, 346, 347, 363, 516, 539, 548, 549, 566, 593], "compress": [158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 219, 220, 540], "callback": 158, "distil": [159, 160, 247, 553, 554, 566, 593, 604], "criterion": [159, 210], "pruner": [162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 276, 287], "criteria": [162, 591, 601], "model_slim": [164, 165, 166], "pattern_analyz": 165, "weight_slim": 166, "pattern": [167, 279, 280, 281, 285, 591], "reg": 169, "schedul": [170, 289, 291, 591], "conf": [172, 173, 174, 175], "config": [172, 176, 499, 541, 550, 551, 588], "dotdict": 173, "pythonic_config": 175, "contrib": [177, 178, 179, 180], "strategi": [178, 179, 180, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 546, 597, 601], "sigopt": [179, 597, 601], "tpe": [180, 601], "data": [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 556], "dataload": [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 211, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 365, 500, 550, 551], "base_dataload": [181, 221], "default_dataload": [183, 223], "fetcher": [184, 224], "attribut": [185, 193, 202, 233, 242, 254, 278, 303, 331, 337, 409, 527], "mxnet_dataload": [186, 226], "onnxrt_dataload": [187, 227], "pytorch_dataload": [188, 228], "sampler": [189, 229], "tensorflow_dataload": [190, 230], "dataset": [191, 192, 193, 194, 195, 196, 197, 198, 231, 232, 233, 234, 235, 236, 237, 238, 366, 548, 551, 561], "bert_dataset": [191, 231], "coco_dataset": [192, 232], "dummy_dataset": [194, 234], "dummy_dataset_v2": [195, 235], "imagenet_dataset": [196, 236], "style_transfer_dataset": [198, 238], "filter": [199, 200, 201, 239, 240, 241], "coco_filt": [199, 239], "transform": [203, 204, 205, 206, 207, 208, 243, 244, 245, 246, 381, 561, 600], "coco_transform": 203, "imagenet_transform": [204, 243], "postprocess": [206, 216], "token": [207, 245], "experiment": [209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291], "common": [210, 211, 212, 213, 214, 215, 216, 217, 529, 558], "metric": [213, 255, 256, 257, 258, 259, 260, 261, 262, 293, 294, 295, 296, 297, 298, 299, 300, 372, 496, 561, 565], "model": [214, 302, 303, 304, 305, 306, 307, 308, 309, 310, 373, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 505, 519, 543, 548, 557, 560, 563, 566, 568, 575, 591, 598, 604], "optim": [215, 374, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 520, 548, 576, 586, 589, 602], "compon": [218, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477], "prune": [220, 277, 288, 461, 462, 463, 506, 548, 566, 591, 593, 604], "export": [248, 249, 250, 251, 252, 557], "qlinear2qdq": 249, "tf2onnx": 250, "torch2onnx": 251, "graph_optim": [253, 451, 452, 453, 502], "bleu": [255, 293], "bleu_util": [256, 294], "coco_label_map": [257, 295], "coco_tool": [258, 296], "evaluate_squad": [259, 297], "f1": [260, 298], "mixed_precis": [263, 455, 456, 457, 504], "model_convers": 264, "na": [265, 266, 267, 268, 269, 270, 530, 548, 593], "basic_na": 265, "dyna": 266, "nas_util": 269, "search_algorithm": 270, "pruner_legaci": [271, 272, 273, 274, 275, 276], "gradient_sensit": 271, "group_lasso": 272, "magnitud": 274, "pattern_lock": 275, "pruning_recip": [278, 279, 280, 281], "tile_pattern": 281, "pruning_v2": 282, "pytorch_prun": [283, 284, 285, 286, 287, 288, 289], "logger": [284, 340, 489], "prune_util": 286, "mix_precis": 301, "base_model": 302, "keras_model": 304, "mxnet_model": 306, "nets_factori": 307, "onnx_model": 308, "tensorflow_model": 309, "torch_model": 310, "object": [311, 544, 588], "auto": [313, 580, 586, 595, 598, 601], "auto_mixed_precis": 314, "basic": [315, 530, 601], "bayesian": [316, 601], "conserv": [317, 601], "exhaust": [318, 601], "hawq_v2": [319, 601], "mse": [321, 601], "mse_v2": [322, 601], "random": [323, 601], "constant": [325, 335], "tuning_sampl": 327, "tuning_spac": 328, "tuning_struct": 329, "templat": [331, 332, 495, 496, 497, 528], "api_doc_exampl": 331, "train": [333, 529, 547, 555, 566, 594], "collect_layer_histogram": 334, "create_obj_from_config": 336, "kl_diverg": 338, "load_huggingfac": 339, "option": [341, 548, 555, 574], "ux": [344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524], "benchmark_model": 345, "execute_benchmark": 346, "config_gener": [348, 349, 350, 351, 352, 353, 354, 355], "benchmark_config_gener": 348, "graph_optimization_config_gener": 350, "mixed_precision_config_gener": 352, "profiling_config_gener": 353, "pruning_config_gener": 354, "quantization_config_gener": 355, "configuration_wizard": [356, 357, 358, 359, 360, 361], "configuration_pars": 356, "get_boundary_nod": 357, "get_configur": 358, "params_feed": 360, "pruning_config_pars": 361, "db_manag": [362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397], "db_model": [363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383], "benchmark_result": 364, "domain": [367, 425], "domain_flavour": 368, "exampl": [369, 529, 530, 533, 537, 549, 550, 551, 553, 554, 555, 556, 557, 566, 567, 568, 571, 575, 588, 589, 591, 594, 598, 599, 604], "framework": [370, 550, 551, 557, 559, 568, 593], "optimization_typ": 375, "precis": [376, 542, 566, 567, 595], "profil": [377, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 521, 548], "profiling_result": 378, "project": [379, 548], "pruning_detail": 380, "tuning_detail": 382, "tuning_histori": [383, 467], "db_oper": [384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394], "benchmark_api_interfac": 384, "dataset_api_interfac": 385, "diagnosis_api_interfac": 387, "dictionaries_api_interfac": 388, "examples_api_interfac": 389, "model_api_interfac": 391, "optimization_api_interfac": 392, "profiling_api_interfac": 393, "project_api_interfac": 394, "params_interfac": 396, "diagnosi": [398, 399, 400, 401, 402, 403, 404, 405, 406, 548], "factori": [399, 450, 469, 474], "onnx_diagnosi": [401, 402], "onnxrt_diagnosi": 402, "op_detail": 403, "op_entri": 404, "tensorflow_diagnosi": [405, 406], "file_brows": [407, 408], "graph": [409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 548], "collaps": 410, "edg": 411, "graph_read": 413, "node": 415, "reader": [416, 417, 418], "onnxrt_read": 417, "tensorflow_read": 418, "jobs_manag": [420, 421, 422, 423], "jobs_control_queu": 421, "request": [423, 528], "manage_workspac": 424, "model_type_gett": 428, "repositori": 433, "shape": 434, "frozen_pb": 435, "meta_graph": 438, "saved_model": 440, "model_zoo": [442, 443, 444, 445, 446], "download_config": 442, "download_model": 443, "download": 444, "list_model": 446, "names_mapp": [447, 448], "execute_optim": 449, "optimize_model": [453, 457, 459, 462], "neural_coder_optim": [458, 459], "tune": [464, 465, 466, 508, 594, 598, 601], "tune_model": 465, "execute_profil": 468, "profile_model": 471, "tensorflow_profil": [474, 475, 476, 477], "inc_bench": 478, "const": 480, "environ": [481, 563, 572], "except": [482, 512], "executor": 483, "expiring_dict": 484, "github_info": 485, "hw_info": 486, "json_seri": 488, "parser": 490, "proc": 491, "process": [492, 601], "singleton": 493, "status_upd": 494, "workdir": 497, "workload": [499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 524], "evalu": [501, 555], "yaml_util": 509, "web": [510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524], "commun": 510, "configur": [511, 555, 559, 590, 593, 597, 603], "router": 514, "server": 515, "servic": [516, 517, 518, 519, 520, 521, 522, 523, 524], "history_snapshot_pars": 517, "request_data_processor": 522, "response_gener": 523, "version": 525, "intel": [526, 532, 548, 562, 563, 566, 572, 580, 586, 604, 605], "neural": [526, 529, 530, 532, 548, 562, 563, 566, 569, 573, 575, 580, 586, 591, 597, 602, 605], "compressor": [526, 529, 532, 548, 562, 563, 566, 580, 586, 597, 605], "document": [526, 532, 537, 605], "section": [526, 605], "contributor": [527, 528], "coven": [527, 528], "code": [527, 528, 530, 566, 587, 602], "conduct": [527, 528], "our": [527, 598], "pledg": 527, "standard": 527, "respons": 527, "scope": [527, 591], "enforc": 527, "contribut": [528, 579, 583], "guidelin": 528, "pull": 528, "checklist": 528, "support": [528, 529, 530, 533, 549, 550, 551, 553, 554, 555, 557, 559, 562, 563, 565, 567, 568, 570, 571, 575, 576, 588, 589, 591, 593, 594, 599, 600, 603], "fx": 529, "introduct": [529, 530, 533, 548, 549, 550, 551, 553, 554, 555, 557, 559, 562, 565, 567, 568, 586, 588, 589, 591, 593, 594, 597, 598, 599, 600, 601, 603], "mode": [529, 604], "matrix": [529, 530, 533, 549, 550, 551, 553, 554, 555, 557, 559, 562, 565, 567, 568, 571, 588, 589, 591, 593, 594, 599, 603], "get": [529, 530, 532, 533, 549, 550, 551, 553, 554, 555, 559, 560, 565, 567, 569, 580, 587, 588, 589, 591, 593, 594, 599, 603], "start": [529, 530, 532, 533, 548, 549, 550, 551, 553, 554, 555, 559, 560, 565, 567, 569, 570, 574, 580, 588, 589, 591, 593, 594, 599, 603], "post": [529, 566, 594], "static": [529, 594], "dynam": [529, 530, 594], "awar": [529, 566, 594], "note": [529, 596], "detail": [529, 548], "problem": 529, "architectur": [530, 552, 562, 563], "search": [530, 586], "api": [530, 532, 533, 537, 538, 549, 550, 551, 553, 554, 555, 560, 561, 565, 567, 569, 573, 587, 588, 589, 591, 593, 602], "usag": [530, 575, 586, 599, 601], "1": [530, 548, 555, 558, 561, 566, 586, 604], "python": [530, 532, 560, 565, 569, 573, 574, 581, 584, 593, 602], "yaml": [530, 550, 551, 555, 559, 603], "2": [530, 548, 555, 558, 561, 566, 586, 604], "onli": 530, "advanc": [530, 602], "custom": [530, 548, 565, 601], "secur": [531, 548, 555], "polici": [531, 601], "report": 531, "vulner": 531, "instal": [532, 548, 563, 570, 572, 579, 580, 583], "from": [532, 548, 563, 566], "pypi": [532, 575], "select": [532, 580], "public": [532, 592], "event": [532, 592], "addit": 532, "research": 532, "collabor": 532, "work": [533, 594], "flow": [533, 594], "background": [533, 586], "ad": 533, "new": [533, 548, 581, 584, 601], "backend": [533, 594], "capabl": 533, "implement": 533, "onnxrtadaptor": 533, "runtim": [535, 563, 567, 594, 604], "torch": [536, 604], "mix": [542, 566, 567, 595], "bench": [548, 573], "tabl": 548, "binari": [548, 563], "sourc": [548, 563], "home": 548, "screen": 548, "creat": [548, 550], "predefin": 548, "displai": 548, "list": [548, 556, 600], "remov": 548, "develop": [548, 579, 583], "tab": 548, "wizard": 548, "edit": 548, "entri": 548, "inform": [548, 564], "demo": 548, "system": [548, 563, 590], "file": [550, 551, 559, 603], "user": [550, 551, 555, 561, 593, 602, 603], "specif": [550, 551], "design": [552, 601], "workflow": 552, "knowledg": [553, 604], "intermedi": 553, "layer": [553, 598], "self": 553, "distribut": [555, 575, 601], "infer": 555, "featur": [555, 559, 562, 575, 576, 580, 593, 594, 599, 603], "pure": 555, "defin": 555, "horovodrun": 555, "execut": 555, "releas": [556, 581, 584, 596], "fp32": 557, "appendix": 557, "frequent": 558, "ask": 558, "question": 558, "build": [558, 565], "issu": [558, 596], "3": [558, 570, 586], "4": [558, 577, 586, 592], "quick": [560, 574], "sampl": 560, "jupyterlab": [560, 580], "extens": [560, 569, 579, 580, 583, 586, 587, 604], "gui": 560, "valid": [560, 563, 598, 604], "incompat": [561, 596], "chang": [561, 585, 587, 596], "between": 561, "v1": 561, "face": 561, "built": [561, 563, 565], "infrastructur": 562, "linux": 563, "prerequisit": 563, "ai": 563, "kit": 563, "window": 563, "requir": [563, 579, 583], "hardwar": [563, 604], "cpu": [563, 572, 604], "base": [563, 602], "64": 563, "compat": 563, "processor": 563, "gpu": 563, "": [563, 587], "xe": 563, "multipl": [563, 588, 604], "vendor": 563, "through": [563, 604], "softwar": 563, "legal": 564, "licens": 564, "citat": 564, "trademark": 564, "singl": [565, 588], "multi": 565, "migrat": 566, "x": 566, "orchestr": [566, 589], "coder": [569, 573, 575, 586, 602], "what": [569, 587], "do": 569, "we": 569, "offer": 569, "jupyt": [569, 570, 581, 584], "lab": [569, 570], "launcher": [569, 574], "contact": 569, "aw": 570, "amazon": 570, "sagemak": 570, "For": 570, "studio": 570, "notebook": 570, "instanc": 570, "guid": [570, 602], "bigdl": 571, "nano": 571, "platform": [572, 597], "best": [572, 580], "perform": [572, 597], "set": [572, 586], "mkl": 572, "openmp": 572, "jemalloc": 572, "numa": 572, "control": 572, "variabl": 572, "frequenc": 572, "govern": 572, "enabl": [573, 580, 586], "superbench": 573, "argument": 574, "v0": 577, "highlight": 577, "other": 577, "changelog": [578, 582], "neural_compressor_ext_lab": [579, 581], "uninstal": [579, 583], "Or": 580, "let": 580, "u": 580, "help": 580, "you": 580, "pre": 580, "requisit": 580, "make": [581, 584, 587], "manual": [581, 584], "npm": [581, 584], "autom": [581, 584], "publish": [581, 584], "conda": [581, 584], "forg": [581, 584], "neural_compressor_ext_lab_alibaba": [583, 584], "log": 585, "unreleas": 585, "vscode": 586, "open": 586, "icon": 586, "5": 586, "welcom": 587, "your": 587, "v": 587, "folder": 587, "setup": 587, "up": 587, "run": 587, "straight": 587, "awai": 587, "explor": 587, "test": 587, "go": 587, "further": 587, "One": 589, "shot": 589, "network": 591, "type": 591, "sparsiti": 591, "decai": 591, "regular": 591, "spars": 591, "deploy": 591, "refer": [591, 594, 598], "full": 592, "59": 592, "2023": 592, "6": 592, "2022": 592, "34": 592, "2021": 592, "15": 592, "2018": 592, "2020": 592, "style": 593, "access": 593, "fundament": [594, 598], "scheme": 594, "ipex": 594, "approach": 594, "With": 594, "without": 594, "accuraci": [594, 601], "specifi": 594, "rule": 594, "recip": 594, "turn": 595, "off": 595, "dure": 595, "known": 596, "prepar": 597, "benefit": 597, "comparison": 597, "differ": 597, "smooth": 598, "quant": 598, "per": 598, "tensor": 598, "channel": 598, "limit": 598, "smoothquant": 598, "enhanc": 598, "wise": 598, "alpha": 598, "engin": 598, "tensorboard": 599, "space": 601, "exit": 601, "overview": 602, "zero": 602, "topic": 602, "11": 604, "0": 604, "13": 604, "ptq": 604, "9": 604}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"644ec953a7dc_pruning_support": [[0, "module-644ec953a7dc_pruning_support"]], "6ece06672ed3_v1_14": [[1, "module-6ece06672ed3_v1_14"]], "Module Contents": [[1, "module-contents"], [5, "module-contents"], [6, "module-contents"], [8, "module-contents"], [15, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [112, "module-contents"], [114, "module-contents"], [115, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [130, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [149, "module-contents"], [150, "module-contents"], [151, "module-contents"], [152, "module-contents"], [153, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [162, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [175, "module-contents"], [176, "module-contents"], [179, "module-contents"], [180, "module-contents"], [181, "module-contents"], [182, "module-contents"], [183, "module-contents"], [184, "module-contents"], [186, "module-contents"], [187, "module-contents"], [188, "module-contents"], [189, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [194, "module-contents"], [195, "module-contents"], [196, "module-contents"], [198, "module-contents"], [199, "module-contents"], [200, "module-contents"], [203, "module-contents"], [204, "module-contents"], [206, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [210, "module-contents"], [211, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"], [218, "module-contents"], [220, "module-contents"], [221, "module-contents"], [223, "module-contents"], [224, "module-contents"], [226, "module-contents"], [227, "module-contents"], [228, "module-contents"], [229, "module-contents"], [230, "module-contents"], [231, "module-contents"], [232, "module-contents"], [233, "module-contents"], [234, "module-contents"], [235, "module-contents"], [236, "module-contents"], [238, "module-contents"], [239, "module-contents"], [240, "module-contents"], [243, "module-contents"], [245, "module-contents"], [246, "module-contents"], [247, "module-contents"], [249, "module-contents"], [250, "module-contents"], [251, "module-contents"], [252, "module-contents"], [253, "module-contents"], [255, "module-contents"], [256, "module-contents"], [258, "module-contents"], [259, "module-contents"], [260, "module-contents"], [262, "module-contents"], [263, "module-contents"], [264, "module-contents"], [265, "module-contents"], [266, "module-contents"], [268, "module-contents"], [269, "module-contents"], [270, "module-contents"], [271, "module-contents"], [272, "module-contents"], [274, "module-contents"], [275, "module-contents"], [276, "module-contents"], [277, "module-contents"], [280, "module-contents"], [281, "module-contents"], [282, "module-contents"], [285, "module-contents"], [286, "module-contents"], [287, "module-contents"], [288, "module-contents"], [289, "module-contents"], [290, "module-contents"], [291, "module-contents"], [293, "module-contents"], [294, "module-contents"], [296, "module-contents"], [297, "module-contents"], [298, "module-contents"], [300, "module-contents"], [301, "module-contents"], [302, "module-contents"], [304, "module-contents"], [305, "module-contents"], [306, "module-contents"], [307, "module-contents"], [308, "module-contents"], [309, "module-contents"], [310, "module-contents"], [311, "module-contents"], [312, "module-contents"], [313, "module-contents"], [314, "module-contents"], [315, "module-contents"], [316, "module-contents"], [317, "module-contents"], [318, "module-contents"], [319, "module-contents"], [321, "module-contents"], [322, "module-contents"], [323, "module-contents"], [324, "module-contents"], [327, "module-contents"], [328, "module-contents"], [329, "module-contents"], [330, "module-contents"], [331, "module-contents"], [333, "module-contents"], [334, "module-contents"], [336, "module-contents"], [338, "module-contents"], [339, "module-contents"], [340, "module-contents"], [341, "module-contents"], [342, "module-contents"], [343, "module-contents"], [344, "module-contents"], [345, "module-contents"], [346, "module-contents"], [348, "module-contents"], [349, "module-contents"], [350, "module-contents"], [352, "module-contents"], [353, "module-contents"], [354, "module-contents"], [355, "module-contents"], [356, "module-contents"], [357, "module-contents"], [358, "module-contents"], [360, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [365, "module-contents"], [366, "module-contents"], [367, "module-contents"], [368, "module-contents"], [369, "module-contents"], [370, "module-contents"], [372, "module-contents"], [373, "module-contents"], [374, "module-contents"], [375, "module-contents"], [376, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [381, "module-contents"], [382, "module-contents"], [383, "module-contents"], [384, "module-contents"], [385, "module-contents"], [386, "module-contents"], [387, "module-contents"], [388, "module-contents"], [389, "module-contents"], [391, "module-contents"], [392, "module-contents"], [393, "module-contents"], [394, "module-contents"], [396, "module-contents"], [397, "module-contents"], [398, "module-contents"], [399, "module-contents"], [402, "module-contents"], [403, "module-contents"], [404, "module-contents"], [406, "module-contents"], [407, "module-contents"], [409, "module-contents"], [410, "module-contents"], [411, "module-contents"], [412, "module-contents"], [413, "module-contents"], [415, "module-contents"], [417, "module-contents"], [418, "module-contents"], [424, "module-contents"], [425, "module-contents"], [427, "module-contents"], [428, "module-contents"], [430, "module-contents"], [432, "module-contents"], [433, "module-contents"], [434, "module-contents"], [435, "module-contents"], [437, "module-contents"], [438, "module-contents"], [439, "module-contents"], [440, "module-contents"], [441, "module-contents"], [442, "module-contents"], [443, "module-contents"], [444, "module-contents"], [446, "module-contents"], [448, "module-contents"], [449, "module-contents"], [450, "module-contents"], [451, "module-contents"], [453, "module-contents"], [456, "module-contents"], [457, "module-contents"], [459, "module-contents"], [460, "module-contents"], [462, "module-contents"], [463, "module-contents"], [465, "module-contents"], [466, "module-contents"], [467, "module-contents"], [468, "module-contents"], [469, "module-contents"], [471, "module-contents"], [472, "module-contents"], [473, "module-contents"], [474, "module-contents"], [476, "module-contents"], [477, "module-contents"], [478, "module-contents"], [480, "module-contents"], [481, "module-contents"], [482, "module-contents"], [483, "module-contents"], [484, "module-contents"], [485, "module-contents"], [486, "module-contents"], [488, "module-contents"], [489, "module-contents"], [490, "module-contents"], [491, "module-contents"], [492, "module-contents"], [493, "module-contents"], [494, "module-contents"], [496, "module-contents"], [497, "module-contents"], [498, "module-contents"], [499, "module-contents"], [500, "module-contents"], [501, "module-contents"], [502, "module-contents"], [504, "module-contents"], [505, "module-contents"], [506, "module-contents"], [507, "module-contents"], [508, "module-contents"], [509, "module-contents"], [510, "module-contents"], [511, "module-contents"], [512, "module-contents"], [514, "module-contents"], [515, "module-contents"], [516, "module-contents"], [517, "module-contents"], [519, "module-contents"], [520, "module-contents"], [521, "module-contents"], [522, "module-contents"], [523, "module-contents"], [524, "module-contents"]], "Functions": [[1, "functions"], [5, "functions"], [6, "functions"], [17, "functions"], [20, "functions"], [37, "functions"], [43, "functions"], [44, "functions"], [66, "functions"], [67, "functions"], [69, "functions"], [103, "functions"], [104, "functions"], [115, "functions"], [117, "functions"], [145, "functions"], [146, "functions"], [147, "functions"], [150, "functions"], [151, "functions"], [152, "functions"], [154, "functions"], [157, "functions"], [159, "functions"], [162, "functions"], [165, "functions"], [167, "functions"], [168, "functions"], [169, "functions"], [170, "functions"], [171, "functions"], [173, "functions"], [183, "functions"], [191, "functions"], [193, "functions"], [197, "functions"], [200, "functions"], [201, "functions"], [202, "functions"], [205, "functions"], [207, "functions"], [208, "functions"], [209, "functions"], [210, "functions"], [212, "functions"], [214, "functions"], [215, "functions"], [217, "functions"], [220, "functions"], [223, "functions"], [231, "functions"], [233, "functions"], [237, "functions"], [240, "functions"], [241, "functions"], [242, "functions"], [244, "functions"], [245, "functions"], [246, "functions"], [249, "functions"], [250, "functions"], [251, "functions"], [252, "functions"], [255, "functions"], [256, "functions"], [258, "functions"], [259, "functions"], [260, "functions"], [261, "functions"], [262, "functions"], [269, "functions"], [276, "functions"], [280, "functions"], [285, "functions"], [286, "functions"], [287, "functions"], [289, "functions"], [293, "functions"], [294, "functions"], [296, "functions"], [297, "functions"], [298, "functions"], [299, "functions"], [300, "functions"], [301, "functions"], [305, "functions"], [309, "functions"], [311, "functions"], [312, "functions"], [316, "functions"], [324, "functions"], [328, "functions"], [330, "functions"], [331, "functions"], [333, "functions"], [336, "functions"], [337, "functions"], [339, "functions"], [340, "functions"], [342, "functions"], [343, "functions"], [345, "functions"], [346, "functions"], [356, "functions"], [357, "functions"], [358, "functions"], [360, "functions"], [365, "functions"], [367, "functions"], [368, "functions"], [370, "functions"], [372, "functions"], [375, "functions"], [376, "functions"], [381, "functions"], [384, "functions"], [385, "functions"], [386, "functions"], [397, "functions"], [407, "functions"], [424, "functions"], [428, "functions"], [430, "functions"], [441, "functions"], [442, "functions"], [443, "functions"], [446, "functions"], [449, "functions"], [453, "functions"], [457, "functions"], [459, "functions"], [462, "functions"], [465, "functions"], [467, "functions"], [468, "functions"], [471, "functions"], [477, "functions"], [478, "functions"], [486, "functions"], [489, "functions"], [494, "functions"], [498, "functions"], [506, "functions"], [509, "functions"], [510, "functions"], [514, "functions"], [515, "functions"]], "6f0d0f71d92e_v1_13": [[2, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[3, "module-9e89549a08c8_v1_11"]], "block_mask": [[4, "module-block_mask"]], "env": [[5, "module-env"]], "neural_compressor.adaptor.adaptor": [[6, "module-neural_compressor.adaptor.adaptor"]], "Classes": [[6, "classes"], [8, "classes"], [15, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [101, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [112, "classes"], [114, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [130, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [143, "classes"], [144, "classes"], [146, "classes"], [147, "classes"], [149, "classes"], [152, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [158, "classes"], [159, "classes"], [162, "classes"], [165, "classes"], [166, "classes"], [167, "classes"], [168, "classes"], [169, "classes"], [170, "classes"], [172, "classes"], [173, "classes"], [175, "classes"], [176, "classes"], [179, "classes"], [180, "classes"], [181, "classes"], [182, "classes"], [183, "classes"], [184, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [218, "classes"], [221, "classes"], [223, "classes"], [224, "classes"], [226, "classes"], [227, "classes"], [228, "classes"], [229, "classes"], [230, "classes"], [231, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [252, "classes"], [253, "classes"], [254, "classes"], [255, "classes"], [258, "classes"], [261, "classes"], [262, "classes"], [263, "classes"], [264, "classes"], [265, "classes"], [266, "classes"], [268, "classes"], [270, "classes"], [271, "classes"], [272, "classes"], [274, "classes"], [275, "classes"], [276, "classes"], [277, "classes"], [278, "classes"], [279, "classes"], [280, "classes"], [281, "classes"], [282, "classes"], [285, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [290, "classes"], [291, "classes"], [293, "classes"], [296, "classes"], [299, "classes"], [300, "classes"], [302, "classes"], [303, "classes"], [304, "classes"], [305, "classes"], [306, "classes"], [307, "classes"], [308, "classes"], [309, "classes"], [310, "classes"], [311, "classes"], [313, "classes"], [314, "classes"], [315, "classes"], [316, "classes"], [317, "classes"], [318, "classes"], [319, "classes"], [321, "classes"], [322, "classes"], [323, "classes"], [324, "classes"], [327, "classes"], [328, "classes"], [329, "classes"], [330, "classes"], [331, "classes"], [333, "classes"], [334, "classes"], [337, "classes"], [338, "classes"], [339, "classes"], [340, "classes"], [341, "classes"], [343, "classes"], [344, "classes"], [347, "classes"], [348, "classes"], [349, "classes"], [350, "classes"], [352, "classes"], [353, "classes"], [354, "classes"], [355, "classes"], [356, "classes"], [360, "classes"], [361, "classes"], [362, "classes"], [363, "classes"], [364, "classes"], [365, "classes"], [366, "classes"], [367, "classes"], [368, "classes"], [369, "classes"], [370, "classes"], [372, "classes"], [373, "classes"], [374, "classes"], [375, "classes"], [376, "classes"], [377, "classes"], [378, "classes"], [379, "classes"], [380, "classes"], [381, "classes"], [382, "classes"], [383, "classes"], [384, "classes"], [385, "classes"], [387, "classes"], [388, "classes"], [389, "classes"], [391, "classes"], [392, "classes"], [393, "classes"], [394, "classes"], [396, "classes"], [398, "classes"], [399, "classes"], [402, "classes"], [403, "classes"], [404, "classes"], [406, "classes"], [409, "classes"], [410, "classes"], [411, "classes"], [412, "classes"], [413, "classes"], [415, "classes"], [417, "classes"], [418, "classes"], [425, "classes"], [427, "classes"], [430, "classes"], [432, "classes"], [433, "classes"], [434, "classes"], [435, "classes"], [437, "classes"], [438, "classes"], [439, "classes"], [440, "classes"], [444, "classes"], [448, "classes"], [450, "classes"], [451, "classes"], [454, "classes"], [456, "classes"], [460, "classes"], [463, "classes"], [466, "classes"], [467, "classes"], [469, "classes"], [472, "classes"], [473, "classes"], [474, "classes"], [476, "classes"], [480, "classes"], [481, "classes"], [483, "classes"], [484, "classes"], [485, "classes"], [486, "classes"], [488, "classes"], [490, "classes"], [491, "classes"], [492, "classes"], [493, "classes"], [496, "classes"], [497, "classes"], [499, "classes"], [500, "classes"], [501, "classes"], [502, "classes"], [504, "classes"], [505, "classes"], [506, "classes"], [507, "classes"], [508, "classes"], [510, "classes"], [511, "classes"], [514, "classes"], [516, "classes"], [517, "classes"], [519, "classes"], [520, "classes"], [521, "classes"], [522, "classes"], [523, "classes"], [524, "classes"]], "neural_compressor.adaptor": [[7, "module-neural_compressor.adaptor"]], "Subpackages": [[7, "subpackages"], [21, "subpackages"], [86, "subpackages"], [110, "subpackages"], [111, "subpackages"], [113, "subpackages"], [161, "subpackages"], [163, "subpackages"], [177, "subpackages"], [202, "subpackages"], [242, "subpackages"], [254, "subpackages"], [278, "subpackages"], [292, "subpackages"], [320, "subpackages"], [395, "subpackages"], [400, "subpackages"], [414, "subpackages"], [419, "subpackages"], [426, "subpackages"], [454, "subpackages"], [470, "subpackages"], [479, "subpackages"], [487, "subpackages"], [513, "subpackages"]], "Submodules": [[7, "submodules"], [16, "submodules"], [21, "submodules"], [33, "submodules"], [50, "submodules"], [75, "submodules"], [86, "submodules"], [94, "submodules"], [100, "submodules"], [105, "submodules"], [110, "submodules"], [111, "submodules"], [113, "submodules"], [116, "submodules"], [129, "submodules"], [142, "submodules"], [148, "submodules"], [154, "submodules"], [160, "submodules"], [161, "submodules"], [163, "submodules"], [164, "submodules"], [178, "submodules"], [185, "submodules"], [197, "submodules"], [201, "submodules"], [205, "submodules"], [212, "submodules"], [219, "submodules"], [225, "submodules"], [237, "submodules"], [241, "submodules"], [244, "submodules"], [248, "submodules"], [254, "submodules"], [261, "submodules"], [267, "submodules"], [273, "submodules"], [279, "submodules"], [283, "submodules"], [292, "submodules"], [299, "submodules"], [303, "submodules"], [320, "submodules"], [326, "submodules"], [332, "submodules"], [337, "submodules"], [347, "submodules"], [351, "submodules"], [359, "submodules"], [371, "submodules"], [390, "submodules"], [395, "submodules"], [400, "submodules"], [401, "submodules"], [405, "submodules"], [408, "submodules"], [414, "submodules"], [416, "submodules"], [419, "submodules"], [420, "submodules"], [426, "submodules"], [429, "submodules"], [431, "submodules"], [436, "submodules"], [445, "submodules"], [447, "submodules"], [452, "submodules"], [454, "submodules"], [455, "submodules"], [458, "submodules"], [461, "submodules"], [464, "submodules"], [470, "submodules"], [475, "submodules"], [479, "submodules"], [487, "submodules"], [495, "submodules"], [503, "submodules"], [513, "submodules"], [518, "submodules"]], "Package Contents": [[7, "package-contents"], [33, "package-contents"], [154, "package-contents"], [185, "package-contents"], [197, "package-contents"], [201, "package-contents"], [202, "package-contents"], [205, "package-contents"], [212, "package-contents"], [225, "package-contents"], [237, "package-contents"], [241, "package-contents"], [242, "package-contents"], [244, "package-contents"], [254, "package-contents"], [261, "package-contents"], [273, "package-contents"], [278, "package-contents"], [279, "package-contents"], [299, "package-contents"], [303, "package-contents"], [320, "package-contents"], [337, "package-contents"], [347, "package-contents"], [454, "package-contents"]], "neural_compressor.adaptor.keras": [[8, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[9, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[10, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[11, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[12, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[13, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[14, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[15, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[16, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[17, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[18, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[19, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[20, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils": [[21, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[22, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[23, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[24, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[25, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[26, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[27, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[28, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[29, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[30, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[31, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[32, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[33, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[34, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[35, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[36, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[37, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[38, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[39, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[40, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[41, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[42, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[44, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[45, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[46, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[110, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[139, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[140, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[141, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[142, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[145, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[146, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[147, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[148, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[149, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[150, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[151, "module-neural_compressor.adaptor.torch_utils.util"]], "neural_compressor.algorithm.algorithm": [[152, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[153, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[154, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[155, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[156, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[157, "module-neural_compressor.benchmark"]], "neural_compressor.compression.callbacks": [[158, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[159, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[160, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[161, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[162, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner": [[163, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.model_slim": [[164, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[165, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[166, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns": [[167, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.pruners": [[168, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.regs": [[169, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[170, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.utils": [[171, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.conf.config": [[172, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[173, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[174, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[175, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[176, "module-neural_compressor.config"]], "neural_compressor.contrib": [[177, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[178, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[179, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[180, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[181, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[182, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[183, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[184, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[185, "module-neural_compressor.data.dataloaders"]], "Attributes": [[185, "attributes"], [193, "attributes"], [202, "attributes"], [233, "attributes"], [242, "attributes"], [254, "attributes"], [278, "attributes"], [303, "attributes"], [331, "attributes"], [337, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[186, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[187, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[188, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[189, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[190, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[191, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[192, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[193, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[194, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[195, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[196, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[197, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[198, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[199, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[200, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[201, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[202, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[203, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[204, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[205, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[206, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[207, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[208, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[209, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[210, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[211, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[212, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[213, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[214, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[215, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[216, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[217, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[218, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[219, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[220, "module-neural_compressor.experimental.compression.pruning"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[221, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[222, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[223, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[224, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[225, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[226, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[227, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[228, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[229, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[230, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[231, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[232, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[233, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[234, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[235, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[236, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[237, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[238, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[239, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[240, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[241, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[242, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[243, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[244, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[245, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[246, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[247, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[248, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[249, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[250, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[251, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.export.utils": [[252, "module-neural_compressor.experimental.export.utils"]], "neural_compressor.experimental.graph_optimization": [[253, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[254, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[255, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[256, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[257, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[258, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[259, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[260, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[261, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[262, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[263, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[264, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[265, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[266, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[267, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[268, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[269, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[270, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[271, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[272, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[273, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[274, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[275, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[276, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[277, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[278, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[279, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[280, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[281, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[282, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[283, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[284, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[285, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[286, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[287, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[288, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[289, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[290, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[291, "module-neural_compressor.experimental.scheduler"]], "neural_compressor": [[292, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[293, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[294, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[295, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[296, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[297, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[298, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[299, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[300, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[301, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[302, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[303, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[304, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[305, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[306, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[307, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[308, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[309, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[310, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[311, "module-neural_compressor.objective"]], "neural_compressor.quantization": [[312, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[313, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[314, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[315, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[316, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[317, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[318, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[319, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[320, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[321, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[322, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[323, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[324, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[325, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[326, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[327, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[328, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[329, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[330, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[331, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[332, "module-neural_compressor.template"]], "neural_compressor.training": [[333, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[334, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[335, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[336, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[337, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[338, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[339, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[340, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[341, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[342, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[343, "module-neural_compressor.utils.utility"]], "neural_compressor.ux.components.benchmark.benchmark": [[344, "module-neural_compressor.ux.components.benchmark.benchmark"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[345, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[346, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "neural_compressor.ux.components.benchmark": [[347, "module-neural_compressor.ux.components.benchmark"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[348, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "neural_compressor.ux.components.config_generator.config_generator": [[349, "module-neural_compressor.ux.components.config_generator.config_generator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[350, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[351, "module-neural_compressor.ux.components.config_generator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[352, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[353, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[354, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[355, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[356, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[357, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[358, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "neural_compressor.ux.components.configuration_wizard": [[359, "module-neural_compressor.ux.components.configuration_wizard"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[360, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[361, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "neural_compressor.ux.components.db_manager.db_manager": [[362, "module-neural_compressor.ux.components.db_manager.db_manager"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[363, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[364, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[365, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[366, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[367, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[368, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "neural_compressor.ux.components.db_manager.db_models.example": [[369, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[370, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[371, "module-neural_compressor.ux.components.db_manager.db_models"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[372, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "neural_compressor.ux.components.db_manager.db_models.model": [[373, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[374, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[375, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[376, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[377, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[378, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "neural_compressor.ux.components.db_manager.db_models.project": [[379, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[380, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[381, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[382, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[383, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[384, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[385, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[386, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[387, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[388, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[389, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations": [[390, "module-neural_compressor.ux.components.db_manager.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[391, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[392, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[393, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[394, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "neural_compressor.ux.components.db_manager": [[395, "module-neural_compressor.ux.components.db_manager"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[396, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "neural_compressor.ux.components.db_manager.utils": [[397, "module-neural_compressor.ux.components.db_manager.utils"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[398, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[399, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[400, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[401, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[402, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.op_details": [[403, "module-neural_compressor.ux.components.diagnosis.op_details"]], "neural_compressor.ux.components.diagnosis.op_entry": [[404, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[405, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[406, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.file_browser.file_browser": [[407, "module-neural_compressor.ux.components.file_browser.file_browser"]], "neural_compressor.ux.components.file_browser": [[408, "module-neural_compressor.ux.components.file_browser"]], "neural_compressor.ux.components.graph.attribute": [[409, "module-neural_compressor.ux.components.graph.attribute"]], "neural_compressor.ux.components.graph.collapser": [[410, "module-neural_compressor.ux.components.graph.collapser"]], "neural_compressor.ux.components.graph.edge": [[411, "module-neural_compressor.ux.components.graph.edge"]], "neural_compressor.ux.components.graph.graph": [[412, "module-neural_compressor.ux.components.graph.graph"]], "neural_compressor.ux.components.graph.graph_reader": [[413, "module-neural_compressor.ux.components.graph.graph_reader"]], "neural_compressor.ux.components.graph": [[414, "module-neural_compressor.ux.components.graph"]], "neural_compressor.ux.components.graph.node": [[415, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[416, "module-neural_compressor.ux.components.graph.reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[417, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[418, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "neural_compressor.ux.components": [[419, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[420, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[421, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[422, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[423, "module-neural_compressor.ux.components.jobs_management.request"]], "neural_compressor.ux.components.manage_workspace": [[424, "module-neural_compressor.ux.components.manage_workspace"]], "neural_compressor.ux.components.model.domain": [[425, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[426, "module-neural_compressor.ux.components.model"]], "neural_compressor.ux.components.model.model": [[427, "module-neural_compressor.ux.components.model.model"]], "neural_compressor.ux.components.model.model_type_getter": [[428, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[429, "module-neural_compressor.ux.components.model.onnxrt"]], "neural_compressor.ux.components.model.onnxrt.model": [[430, "module-neural_compressor.ux.components.model.onnxrt.model"]], "neural_compressor.ux.components.model.pytorch": [[431, "module-neural_compressor.ux.components.model.pytorch"]], "neural_compressor.ux.components.model.pytorch.model": [[432, "module-neural_compressor.ux.components.model.pytorch.model"]], "neural_compressor.ux.components.model.repository": [[433, "module-neural_compressor.ux.components.model.repository"]], "neural_compressor.ux.components.model.shape": [[434, "module-neural_compressor.ux.components.model.shape"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[435, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "neural_compressor.ux.components.model.tensorflow": [[436, "module-neural_compressor.ux.components.model.tensorflow"]], "neural_compressor.ux.components.model.tensorflow.keras": [[437, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[438, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "neural_compressor.ux.components.model.tensorflow.model": [[439, "module-neural_compressor.ux.components.model.tensorflow.model"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[440, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "neural_compressor.ux.components.model.tensorflow.utils": [[441, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "neural_compressor.ux.components.model_zoo.download_config": [[442, "module-neural_compressor.ux.components.model_zoo.download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[443, "module-neural_compressor.ux.components.model_zoo.download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[444, "module-neural_compressor.ux.components.model_zoo.downloader"]], "neural_compressor.ux.components.model_zoo": [[445, "module-neural_compressor.ux.components.model_zoo"]], "neural_compressor.ux.components.model_zoo.list_models": [[446, "module-neural_compressor.ux.components.model_zoo.list_models"]], "neural_compressor.ux.components.names_mapper": [[447, "module-neural_compressor.ux.components.names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[448, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "neural_compressor.ux.components.optimization.execute_optimization": [[449, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "neural_compressor.ux.components.optimization.factory": [[450, "module-neural_compressor.ux.components.optimization.factory"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[451, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[452, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[453, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "neural_compressor.ux.components.optimization": [[454, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[455, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[456, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[457, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[458, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[459, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "neural_compressor.ux.components.optimization.optimization": [[460, "module-neural_compressor.ux.components.optimization.optimization"]], "neural_compressor.ux.components.optimization.pruning": [[461, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[462, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[463, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "neural_compressor.ux.components.optimization.tune": [[464, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[465, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[466, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "neural_compressor.ux.components.optimization.tuning_history": [[467, "module-neural_compressor.ux.components.optimization.tuning_history"]], "neural_compressor.ux.components.profiling.execute_profiling": [[468, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "neural_compressor.ux.components.profiling.factory": [[469, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[470, "module-neural_compressor.ux.components.profiling"]], "neural_compressor.ux.components.profiling.profile_model": [[471, "module-neural_compressor.ux.components.profiling.profile_model"]], "neural_compressor.ux.components.profiling.profiler": [[472, "module-neural_compressor.ux.components.profiling.profiler"]], "neural_compressor.ux.components.profiling.profiling": [[473, "module-neural_compressor.ux.components.profiling.profiling"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[474, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[475, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[476, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[477, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "neural_compressor.ux.inc_bench": [[478, "module-neural_compressor.ux.inc_bench"]], "neural_compressor.ux": [[479, "module-neural_compressor.ux"]], "neural_compressor.ux.utils.consts": [[480, "module-neural_compressor.ux.utils.consts"]], "neural_compressor.ux.utils.environment": [[481, "module-neural_compressor.ux.utils.environment"]], "neural_compressor.ux.utils.exceptions": [[482, "module-neural_compressor.ux.utils.exceptions"]], "neural_compressor.ux.utils.executor": [[483, "module-neural_compressor.ux.utils.executor"]], "neural_compressor.ux.utils.expiring_dict": [[484, "module-neural_compressor.ux.utils.expiring_dict"]], "neural_compressor.ux.utils.github_info": [[485, "module-neural_compressor.ux.utils.github_info"]], "neural_compressor.ux.utils.hw_info": [[486, "module-neural_compressor.ux.utils.hw_info"]], "neural_compressor.ux.utils": [[487, "module-neural_compressor.ux.utils"]], "neural_compressor.ux.utils.json_serializer": [[488, "module-neural_compressor.ux.utils.json_serializer"]], "neural_compressor.ux.utils.logger": [[489, "module-neural_compressor.ux.utils.logger"]], "neural_compressor.ux.utils.parser": [[490, "module-neural_compressor.ux.utils.parser"]], "neural_compressor.ux.utils.proc": [[491, "module-neural_compressor.ux.utils.proc"]], "neural_compressor.ux.utils.processes": [[492, "module-neural_compressor.ux.utils.processes"]], "neural_compressor.ux.utils.singleton": [[493, "module-neural_compressor.ux.utils.singleton"]], "neural_compressor.ux.utils.status_updates": [[494, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[495, "module-neural_compressor.ux.utils.templates"]], "neural_compressor.ux.utils.templates.metric": [[496, "module-neural_compressor.ux.utils.templates.metric"]], "neural_compressor.ux.utils.templates.workdir": [[497, "module-neural_compressor.ux.utils.templates.workdir"]], "neural_compressor.ux.utils.utils": [[498, "module-neural_compressor.ux.utils.utils"]], "neural_compressor.ux.utils.workload.config": [[499, "module-neural_compressor.ux.utils.workload.config"]], "neural_compressor.ux.utils.workload.dataloader": [[500, "module-neural_compressor.ux.utils.workload.dataloader"]], "neural_compressor.ux.utils.workload.evaluation": [[501, "module-neural_compressor.ux.utils.workload.evaluation"]], "neural_compressor.ux.utils.workload.graph_optimization": [[502, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "neural_compressor.ux.utils.workload": [[503, "module-neural_compressor.ux.utils.workload"]], "neural_compressor.ux.utils.workload.mixed_precision": [[504, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "neural_compressor.ux.utils.workload.model": [[505, "module-neural_compressor.ux.utils.workload.model"]], "neural_compressor.ux.utils.workload.pruning": [[506, "module-neural_compressor.ux.utils.workload.pruning"]], "neural_compressor.ux.utils.workload.quantization": [[507, "module-neural_compressor.ux.utils.workload.quantization"]], "neural_compressor.ux.utils.workload.tuning": [[508, "module-neural_compressor.ux.utils.workload.tuning"]], "neural_compressor.ux.utils.yaml_utils": [[509, "module-neural_compressor.ux.utils.yaml_utils"]], "neural_compressor.ux.web.communication": [[510, "module-neural_compressor.ux.web.communication"]], "neural_compressor.ux.web.configuration": [[511, "module-neural_compressor.ux.web.configuration"]], "neural_compressor.ux.web.exceptions": [[512, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[513, "module-neural_compressor.ux.web"]], "neural_compressor.ux.web.router": [[514, "module-neural_compressor.ux.web.router"]], "neural_compressor.ux.web.server": [[515, "module-neural_compressor.ux.web.server"]], "neural_compressor.ux.web.service.benchmark": [[516, "module-neural_compressor.ux.web.service.benchmark"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[517, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "neural_compressor.ux.web.service": [[518, "module-neural_compressor.ux.web.service"]], "neural_compressor.ux.web.service.model": [[519, "module-neural_compressor.ux.web.service.model"]], "neural_compressor.ux.web.service.optimization": [[520, "module-neural_compressor.ux.web.service.optimization"]], "neural_compressor.ux.web.service.profiling": [[521, "module-neural_compressor.ux.web.service.profiling"]], "neural_compressor.ux.web.service.request_data_processor": [[522, "module-neural_compressor.ux.web.service.request_data_processor"]], "neural_compressor.ux.web.service.response_generator": [[523, "module-neural_compressor.ux.web.service.response_generator"]], "neural_compressor.ux.web.service.workload": [[524, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[525, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[526, "intel-neural-compressor-documentation"], [605, "intel-neural-compressor-documentation"]], "Sections": [[526, "sections"], [605, "sections"]], "Contributor Covenant Code of Conduct": [[527, "contributor-covenant-code-of-conduct"], [528, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[527, "our-pledge"]], "Our Standards": [[527, "our-standards"]], "Our Responsibilities": [[527, "our-responsibilities"]], "Scope": [[527, "scope"]], "Enforcement": [[527, "enforcement"]], "Attribution": [[527, "attribution"]], "Contribution Guidelines": [[528, "contribution-guidelines"]], "Pull Request Checklist": [[528, "pull-request-checklist"]], "Pull Request Template": [[528, "pull-request-template"]], "Support": [[528, "support"]], "FX": [[529, "fx"]], "Introduction": [[529, "introduction"], [530, "introduction"], [533, "introduction"], [548, "introduction"], [549, "introduction"], [550, "introduction"], [551, "introduction"], [553, "introduction"], [554, "introduction"], [555, "introduction"], [557, "introduction"], [559, "introduction"], [562, "introduction"], [565, "introduction"], [567, "introduction"], [568, "introduction"], [588, "introduction"], [589, "introduction"], [591, "introduction"], [593, "introduction"], [597, "introduction"], [598, "introduction"], [599, "introduction"], [600, "introduction"], [601, "introduction"], [603, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[529, "fx-mode-support-matrix-in-neural-compressor"]], "Get Start": [[529, "get-start"]], "Post Training Static Quantization": [[529, "post-training-static-quantization"], [594, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[529, "post-training-dynamic-quantization"], [594, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[529, "quantization-aware-training"]], "Examples": [[529, "examples"], [530, "examples"], [549, "examples"], [550, "examples"], [551, "examples"], [553, "examples"], [554, "examples"], [555, "examples"], [556, "examples"], [557, "examples"], [566, "examples"], [567, "examples"], [568, "examples"], [589, "examples"], [591, "examples"], [594, "examples"], [599, "examples"]], "Note": [[529, "note"]], "Details": [[529, "details"]], "Common Problem": [[529, "common-problem"]], "Dynamic Quantization": [[529, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[529, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[530, "neural-architecture-search"]], "Basic NAS": [[530, "basic-nas"]], "Dynamic NAS": [[530, "dynamic-nas"]], "NAS Support Matrix": [[530, "nas-support-matrix"]], "Get Started with NAS API": [[530, "get-started-with-nas-api"]], "Basic Usage": [[530, "basic-usage"]], "1. Python code + YAML": [[530, "python-code-yaml"]], "2. Python code only": [[530, "python-code-only"]], "Advanced Usage (Custom NAS)": [[530, "advanced-usage-custom-nas"]], "Security Policy": [[531, "security-policy"]], "Report a Vulnerability": [[531, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[532, "intel-neural-compressor"], [586, "intel-neural-compressor"]], "Installation": [[532, "installation"], [563, "installation"], [580, "installation"]], "Install from pypi": [[532, "install-from-pypi"]], "Getting Started": [[532, "getting-started"], [560, "getting-started"]], "Quantization with Python API": [[532, "quantization-with-python-api"], [560, "quantization-with-python-api"]], "Documentation": [[532, "documentation"]], "Selected Publications/Events": [[532, "selected-publications-events"]], "Additional Content": [[532, "additional-content"]], "Research Collaborations": [[532, "research-collaborations"]], "Adaptor": [[533, "adaptor"], [534, "adaptor"]], "Adaptor Support Matrix": [[533, "adaptor-support-matrix"]], "Working Flow": [[533, "working-flow"], [594, "working-flow"]], "Get Start with Adaptor API": [[533, "get-start-with-adaptor-api"]], "Query API": [[533, "query-api"]], "Background": [[533, "background"]], "Query API Introduction": [[533, "query-api-introduction"]], "Example of Adding a New Backend Support": [[533, "example-of-adding-a-new-backend-support"]], "Capability": [[533, "capability"]], "Implement ONNXRTAdaptor Class": [[533, "implement-onnxrtadaptor-class"]], "ONNX Runtime": [[535, "onnx-runtime"], [567, "onnx-runtime"], [567, "id1"]], "Torch Utils": [[536, "torch-utils"]], "API Document Example": [[537, "api-document-example"]], "APIs": [[538, "apis"]], "Benchmark": [[539, "benchmark"], [566, "benchmark"], [593, "benchmark"]], "Compression": [[540, "compression"]], "Config": [[541, "config"]], "Mix Precision": [[542, "mix-precision"], [566, "mix-precision"]], "Model": [[543, "model"], [568, "model"]], "Objective": [[544, "objective"], [588, "objective"]], "Quantization": [[545, "quantization"], [593, "quantization"], [594, "quantization"]], "Strategy": [[546, "strategy"]], "Training": [[547, "training"]], "Intel\u00ae Neural Compressor Bench": [[548, "intel-neural-compressor-bench"]], "Table of Contents": [[548, "table-of-contents"]], "Install Intel\u00ae Neural Compressor with Bench": [[548, "install-intel-neural-compressor-with-bench"]], "Option 1: Install from Binary": [[548, "option-1-install-from-binary"]], "Option 2: Install from Source": [[548, "option-2-install-from-source"]], "Start the Intel\u00ae Neural Compressor Bench": [[548, "start-the-intel-neural-compressor-bench"]], "Home Screen": [[548, "home-screen"]], "Create New Project": [[548, "create-new-project"]], "Predefined Model": [[548, "predefined-model"]], "Custom Model": [[548, "custom-model"]], "Display Model Graph": [[548, "display-model-graph"]], "Project List": [[548, "project-list"]], "Remove Project": [[548, "remove-project"]], "Develop Project": [[548, "develop-project"]], "Optimization Tab": [[548, "optimization-tab"]], "Optimization Table": [[548, "optimization-table"]], "Optimization Wizard": [[548, "optimization-wizard"]], "Editing Optimization Entries": [[548, "editing-optimization-entries"]], "Optimization Details": [[548, "optimization-details"]], "Pruning": [[548, "pruning"], [566, "pruning"], [591, "pruning"], [593, "pruning"]], "Benchmark Tab": [[548, "benchmark-tab"]], "Benchmark Table": [[548, "benchmark-table"]], "Benchmark Wizard": [[548, "benchmark-wizard"]], "Editing Benchmark Entries": [[548, "editing-benchmark-entries"]], "Benchmark Details": [[548, "benchmark-details"]], "Profiling Tab": [[548, "profiling-tab"]], "Profiling Table": [[548, "profiling-table"]], "Profiling Wizard": [[548, "profiling-wizard"]], "Editing Profiling Entries": [[548, "editing-profiling-entries"]], "Profiling Details": [[548, "profiling-details"]], "Diagnosis Tab": [[548, "diagnosis-tab"]], "Dataset Tab": [[548, "dataset-tab"]], "Dataset List": [[548, "dataset-list"]], "Dataset Wizard": [[548, "dataset-wizard"]], "Dataset Details": [[548, "dataset-details"]], "Custom Dataset": [[548, "custom-dataset"]], "Project Information": [[548, "project-information"]], "NAS demo": [[548, "nas-demo"]], "System Information": [[548, "system-information"]], "Security": [[548, "security"], [555, "security"]], "Benchmarking": [[549, "benchmarking"]], "Benchmark Support Matrix": [[549, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[549, "get-started-with-benchmark-api"]], "DataLoader": [[550, "dataloader"]], "Supported Framework Dataloader Matrix": [[550, "supported-framework-dataloader-matrix"]], "Get Start with Dataloader API": [[550, "get-start-with-dataloader-api"]], "Config Dataloader in a Yaml File": [[550, "config-dataloader-in-a-yaml-file"]], "Create a User-specific Dataloader": [[550, "create-a-user-specific-dataloader"]], "Dataset": [[551, "dataset"]], "Supported Framework Dataset Matrix": [[551, "supported-framework-dataset-matrix"]], "TensorFlow": [[551, "tensorflow"], [565, "tensorflow"], [567, "tensorflow"], [600, "tensorflow"]], "PyTorch": [[551, "pytorch"], [565, "pytorch"], [567, "pytorch"], [595, "pytorch"]], "MXNet": [[551, "mxnet"], [565, "mxnet"], [600, "mxnet"]], "ONNXRT": [[551, "onnxrt"], [565, "onnxrt"], [600, "onnxrt"]], "Get start with Dataset API": [[551, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[551, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[551, "user-specific-dataset"]], "Design": [[552, "design"], [601, "design"], [601, "id1"], [601, "id3"], [601, "id5"], [601, "id7"], [601, "id9"], [601, "id11"], [601, "id13"], [601, "id15"], [601, "id17"], [601, "id19"], [601, "id21"]], "Architecture": [[552, "architecture"], [562, "architecture"]], "Workflow": [[552, "workflow"]], "Distillation": [[553, "distillation"], [566, "distillation"], [593, "distillation"]], "Knowledge Distillation": [[553, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[553, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[553, "self-distillation"]], "Distillation Support Matrix": [[553, "distillation-support-matrix"]], "Get Started with Distillation API": [[553, "get-started-with-distillation-api"]], "Distillation for Quantization": [[554, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[554, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[554, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[555, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[555, "supported-feature-matrix"], [559, "supported-feature-matrix"], [562, "supported-feature-matrix"], [593, "supported-feature-matrix"], [594, "supported-feature-matrix"], [599, "supported-feature-matrix"], [603, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[555, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[555, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[555, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[555, "horovodrun-execution"]], "PyTorch Examples:": [[555, "pytorch-examples"]], "TensorFlow Examples:": [[555, "tensorflow-examples"]], "Example List": [[556, "example-list"]], "Release Data": [[556, "release-data"]], "Export": [[557, "export"]], "Supported Framework Model Matrix": [[557, "supported-framework-model-matrix"], [568, "supported-framework-model-matrix"]], "FP32 Model Export": [[557, "fp32-model-export"]], "INT8 Model Export": [[557, "int8-model-export"]], "Appendix": [[557, "appendix"]], "Frequently Asked Questions": [[558, "frequently-asked-questions"]], "Common Build Issues": [[558, "common-build-issues"]], "Issue 1:": [[558, "issue-1"]], "Issue 2:": [[558, "issue-2"]], "Issue 3:": [[558, "issue-3"]], "Issue 4:": [[558, "issue-4"]], "Framework YAML Configuration Files": [[559, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[559, "get-started-with-framework-yaml-files"]], "Quick Samples": [[560, "quick-samples"]], "Quantization with JupyterLab Extension": [[560, "quantization-with-jupyterlab-extension"]], "Quantization with GUI": [[560, "quantization-with-gui"]], "Validated Models": [[560, "validated-models"], [598, "validated-models"], [604, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[561, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[561, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[561, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[562, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[563, "linux-installation"]], "Prerequisites": [[563, "prerequisites"], [563, "id1"]], "Install from Binary": [[563, "install-from-binary"], [563, "id2"]], "Install from Source": [[563, "install-from-source"], [563, "id3"]], "Install from AI Kit": [[563, "install-from-ai-kit"]], "Windows Installation": [[563, "windows-installation"]], "System Requirements": [[563, "system-requirements"]], "Validated Hardware Environment": [[563, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[563, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[563, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[563, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[563, "validated-software-environment"]], "Legal Information": [[564, "legal-information"]], "License": [[564, "license"]], "Citation": [[564, "citation"]], "Trademarks": [[564, "trademarks"]], "Metrics": [[565, "metrics"]], "Supported Built-in Metric Matrix": [[565, "supported-built-in-metric-matrix"]], "Get Start with Metrics": [[565, "get-start-with-metrics"]], "Support Single-metric and Multi-metrics": [[565, "support-single-metric-and-multi-metrics"]], "Build Custom Metric with Python API": [[565, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[566, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[566, "model-quantization"]], "Post-training Quantization": [[566, "post-training-quantization"]], "Quantization Aware Training": [[566, "quantization-aware-training"], [594, "quantization-aware-training"], [594, "id1"]], "Orchestration": [[566, "orchestration"]], "Mixed Precision": [[567, "mixed-precision"]], "Mixed Precision Support Matrix": [[567, "mixed-precision-support-matrix"]], "Get Started with Mixed Precision API": [[567, "get-started-with-mixed-precision-api"]], "Neural Coder": [[569, "neural-coder"], [586, "neural-coder"], [586, "id1"]], "What do we offer?": [[569, "what-do-we-offer"]], "Getting Started!": [[569, "getting-started"], [580, "getting-started"]], "Jupyter Lab Extension": [[569, "jupyter-lab-extension"]], "Python Launcher": [[569, "python-launcher"], [574, "python-launcher"]], "Python API": [[569, "python-api"]], "Contact": [[569, "contact"]], "AWS Amazon SageMaker Support": [[570, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[570, "start-jupyter-lab-3"]], "For SageMaker Studio": [[570, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[570, "for-sagemaker-notebook-instance"]], "Installation Guide": [[570, "installation-guide"]], "BigDL Nano Support": [[571, "bigdl-nano-support"]], "Example": [[571, "example"], [575, "example"], [588, "example"], [598, "example"]], "Support Matrix": [[571, "support-matrix"]], "Intel CPU Platforms: Best Performance Setting": [[572, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[572, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[572, "install-numa-controller"]], "Environment Variables": [[572, "environment-variables"]], "Frequency Governers": [[572, "frequency-governers"]], "Neural Coder as Python API": [[573, "neural-coder-as-python-api"]], "Enable": [[573, "enable"]], "Bench": [[573, "bench"]], "SuperBench": [[573, "superbench"]], "Quick-Start": [[574, "quick-start"]], "Launcher Arguments (Optional)": [[574, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[575, "neural-coder-for-quantization"]], "Features Supported": [[575, "features-supported"]], "Models Supported": [[575, "models-supported"]], "Usage": [[575, "usage"], [599, "usage"], [599, "id1"], [601, "usage"], [601, "id2"], [601, "id4"], [601, "id6"], [601, "id8"], [601, "id10"], [601, "id12"], [601, "id14"], [601, "id16"], [601, "id18"], [601, "id20"], [601, "id22"]], "PyPI distribution:": [[575, "pypi-distribution"]], "Supported Optimization Features": [[576, "supported-optimization-features"]], "v0.4": [[577, "v0-4"]], "Highlights": [[577, "highlights"]], "Others": [[577, "others"]], "Changelog": [[578, "changelog"], [582, "changelog"]], "neural_compressor_ext_lab": [[579, "neural-compressor-ext-lab"]], "Requirements": [[579, "requirements"], [583, "requirements"]], "Install": [[579, "install"], [583, "install"]], "Uninstall": [[579, "uninstall"], [583, "uninstall"]], "Contributing": [[579, "contributing"], [583, "contributing"]], "Development install": [[579, "development-install"], [583, "development-install"]], "Development uninstall": [[579, "development-uninstall"], [583, "development-uninstall"]], "Packaging the extension": [[579, "packaging-the-extension"], [583, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[580, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[580, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[580, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[580, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[581, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[581, "manual-release"], [584, "manual-release"]], "Python package": [[581, "python-package"], [584, "python-package"]], "NPM package": [[581, "npm-package"], [584, "npm-package"]], "Automated releases with the Jupyter Releaser": [[581, "automated-releases-with-the-jupyter-releaser"], [584, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[581, "publishing-to-conda-forge"], [584, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[583, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[584, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[585, "change-log"]], "[Unreleased]": [[585, "unreleased"]], "Background Introduction": [[586, "background-introduction"]], "Neural Coder Extension in VSCode": [[586, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[586, "neural-coder-extension-usage"]], "1. Open": [[586, "open"]], "2. Search": [[586, "search"]], "3. Setting": [[586, "setting"]], "4. Icon": [[586, "icon"]], "5. optimization (quantization)": [[586, "optimization-quantization"]], "5.1 Enable": [[586, "enable"]], "5.2 Auto": [[586, "auto"]], "Welcome to your VS Code Extension": [[587, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[587, "what-s-in-the-folder"]], "Setup": [[587, "setup"]], "Get up and running straight away": [[587, "get-up-and-running-straight-away"]], "Make changes": [[587, "make-changes"]], "Explore the API": [[587, "explore-the-api"]], "Run tests": [[587, "run-tests"]], "Go further": [[587, "go-further"]], "Single Objective": [[588, "single-objective"]], "Multiple Objectives": [[588, "multiple-objectives"]], "Objective Support Matrix": [[588, "objective-support-matrix"]], "Get Started with Objective API": [[588, "get-started-with-objective-api"]], "Config Single Objective": [[588, "config-single-objective"]], "Config Multiple Objectives": [[588, "config-multiple-objectives"]], "Optimization Orchestration": [[589, "optimization-orchestration"]], "One-shot": [[589, "one-shot"]], "Orchestration Support Matrix": [[589, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[589, "get-started-with-orchestration-api"]], "SYSTEM CONFIGURATION": [[590, "system-configuration"]], "Neural Network Pruning": [[591, "neural-network-pruning"]], "Pruning Patterns": [[591, "pruning-patterns"]], "Pruning Criteria": [[591, "pruning-criteria"]], "Pruning Schedule": [[591, "pruning-schedule"]], "Pruning Types": [[591, "pruning-types"]], "Pruning Scope": [[591, "pruning-scope"]], "Sparsity Decay Types": [[591, "sparsity-decay-types"]], "Regularization": [[591, "regularization"]], "Pruning Support Matrix": [[591, "pruning-support-matrix"]], "Get Started with Pruning API": [[591, "get-started-with-pruning-api"]], "Sparse Model Deployment": [[591, "sparse-model-deployment"]], "Reference": [[591, "reference"], [594, "reference"], [598, "reference"]], "Full Publications/Events (59)": [[592, "full-publications-events-59"]], "2023 (6)": [[592, "id1"]], "2022 (34)": [[592, "id2"]], "2021 (15)": [[592, "id3"]], "2018 - 2020 (4)": [[592, "id4"]], "Pythonic Style Access for Configurations": [[593, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[593, "pythonic-api-for-user-configurations"], [593, "id1"]], "Pythonic API for Framework Configurations": [[593, "pythonic-api-for-framework-configurations"], [593, "id2"]], "Get Started with Pythonic API for Configurations": [[593, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[593, "nas"]], "Quantization Introduction": [[594, "quantization-introduction"]], "Quantization Fundamentals": [[594, "quantization-fundamentals"], [598, "quantization-fundamentals"]], "Quantization Support Matrix": [[594, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[594, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[594, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[594, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[594, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[594, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[594, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[594, "with-or-without-accuracy-aware-tuning"]], "Get Started": [[594, "get-started"]], "Post Training Quantization": [[594, "post-training-quantization"]], "Specify Quantization Rules": [[594, "specify-quantization-rules"]], "Specify Quantization Recipes": [[594, "specify-quantization-recipes"]], "Specify Quantization Backend": [[594, "specify-quantization-backend"]], "Turn OFF Auto Mixed Precision during Quantization": [[595, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[595, "tensorflow"]], "Release": [[596, "release"]], "Release Notes": [[596, "release-notes"]], "Known Issues": [[596, "known-issues"]], "Incompatible Changes": [[596, "incompatible-changes"]], "SigOpt Strategy": [[597, "sigopt-strategy"]], "Preparation": [[597, "preparation"]], "SigOpt Platform": [[597, "sigopt-platform"]], "Neural Compressor Configuration": [[597, "neural-compressor-configuration"]], "Performance": [[597, "performance"]], "Benefit of SigOpt Strategy": [[597, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[597, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[598, "smooth-quant"]], "Per-tensor & Per-channel": [[598, "per-tensor-per-channel"]], "Per-tensor example": [[598, "per-tensor-example"]], "Per-channel example": [[598, "per-channel-example"]], "Matmul quantization example": [[598, "matmul-quantization-example"]], "Per-channel limitation": [[598, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[598, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[598, "smoothquant"]], "Our enhancement:": [[598, "our-enhancement"]], "Algorithm: Layer-wise Auto-tuning of $\\alpha$.": [[598, "algorithm-layer-wise-auto-tuning-of-alpha"]], "Engineering": [[598, "engineering"]], "TensorBoard": [[599, "tensorboard"]], "Get Started with TensorBoard": [[599, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[599, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[599, "tensorflow-tensorboard"]], "PyTorch Examples": [[599, "pytorch-examples"]], "TensorFlow Examples": [[599, "tensorflow-examples"]], "Transform": [[600, "transform"]], "Transform Support List": [[600, "transform-support-list"]], "Pytorch": [[600, "pytorch"]], "Tuning Strategies": [[601, "tuning-strategies"]], "Strategy Design": [[601, "strategy-design"]], "Tuning Space": [[601, "tuning-space"]], "Exit Policy": [[601, "exit-policy"]], "Accuracy Criteria": [[601, "accuracy-criteria"]], "Tuning Process": [[601, "tuning-process"]], "Tuning Algorithms": [[601, "tuning-algorithms"]], "Auto": [[601, "auto"]], "Conservative Tuning": [[601, "conservative-tuning"]], "Basic": [[601, "basic"]], "MSE": [[601, "mse"]], "MSE_V2": [[601, "mse-v2"]], "HAWQ_V2": [[601, "hawq-v2"]], "Bayesian": [[601, "bayesian"]], "Exhaustive": [[601, "exhaustive"]], "Random": [[601, "random"]], "SigOpt": [[601, "sigopt"]], "TPE": [[601, "tpe"]], "Distributed Tuning": [[601, "distributed-tuning"]], "Customize a New Tuning Strategy": [[601, "customize-a-new-tuning-strategy"]], "User Guide": [[602, "user-guide"]], "Overview": [[602, "overview"]], "Python-based APIs": [[602, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[602, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[602, "advanced-topics"]], "User YAML Configuration Files": [[603, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[603, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[604, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.11.0": [[604, "tensorflow-models-with-intel-tensorflow-2-11-0"]], "PyTorch Models with Torch 1.13.0+cpu in PTQ Mode": [[604, "pytorch-models-with-torch-1-13-0-cpu-in-ptq-mode"]], "PyTorch Models with Torch 1.13.0+cpu in QAT Mode": [[604, "pytorch-models-with-torch-1-13-0-cpu-in-qat-mode"]], "PyTorch Models with Torch and Intel\u00ae Extension for PyTorch* 1.13.0+cpu": [[604, "pytorch-models-with-torch-and-intel-extension-for-pytorch-1-13-0-cpu"]], "ONNX Models with ONNX Runtime 1.13.1": [[604, "onnx-models-with-onnx-runtime-1-13-1"]], "MXNet Models with MXNet 1.9.1": [[604, "mxnet-models-with-mxnet-1-9-1"]], "Validated Pruning Examples": [[604, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[604, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[604, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"644ec953a7dc_pruning_support": [[0, "module-644ec953a7dc_pruning_support"]], "module": [[0, "module-644ec953a7dc_pruning_support"], [1, "module-6ece06672ed3_v1_14"], [2, "module-6f0d0f71d92e_v1_13"], [3, "module-9e89549a08c8_v1_11"], [4, "module-block_mask"], [5, "module-env"], [6, "module-neural_compressor.adaptor.adaptor"], [7, "module-neural_compressor.adaptor"], [8, "module-neural_compressor.adaptor.keras"], [9, "module-neural_compressor.adaptor.keras_utils.conv2d"], [10, "module-neural_compressor.adaptor.keras_utils.dense"], [11, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"], [12, "module-neural_compressor.adaptor.keras_utils"], [13, "module-neural_compressor.adaptor.keras_utils.quantizer"], [14, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"], [15, "module-neural_compressor.adaptor.mxnet"], [16, "module-neural_compressor.adaptor.mxnet_utils"], [17, "module-neural_compressor.adaptor.mxnet_utils.util"], [18, "module-neural_compressor.adaptor.onnxrt"], [19, "module-neural_compressor.adaptor.ox_utils.calibration"], [20, "module-neural_compressor.adaptor.ox_utils.calibrator"], [21, "module-neural_compressor.adaptor.ox_utils"], [22, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [23, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [24, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [25, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [26, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [27, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [28, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [29, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [30, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [31, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [32, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [33, "module-neural_compressor.adaptor.ox_utils.operators"], [34, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [35, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [36, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [37, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [38, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [39, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [40, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [41, "module-neural_compressor.adaptor.ox_utils.operators.split"], [42, "module-neural_compressor.adaptor.ox_utils.quantizer"], [43, "module-neural_compressor.adaptor.ox_utils.util"], [44, "module-neural_compressor.adaptor.pytorch"], [45, "module-neural_compressor.adaptor.query"], [46, "module-neural_compressor.adaptor.tensorflow"], [47, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [109, "module-neural_compressor.adaptor.tf_utils.graph_util"], [110, "module-neural_compressor.adaptor.tf_utils"], [111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [139, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [140, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [141, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [142, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [143, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [144, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [145, "module-neural_compressor.adaptor.tf_utils.util"], [146, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [147, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [148, "module-neural_compressor.adaptor.torch_utils"], [149, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [150, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [151, "module-neural_compressor.adaptor.torch_utils.util"], [152, "module-neural_compressor.algorithm.algorithm"], [153, "module-neural_compressor.algorithm.fast_bias_correction"], [154, "module-neural_compressor.algorithm"], [155, "module-neural_compressor.algorithm.smooth_quant"], [156, "module-neural_compressor.algorithm.weight_correction"], [157, "module-neural_compressor.benchmark"], [158, "module-neural_compressor.compression.callbacks"], [159, "module-neural_compressor.compression.distillation.criterions"], [160, "module-neural_compressor.compression.distillation"], [161, "module-neural_compressor.compression"], [162, "module-neural_compressor.compression.pruner.criteria"], [163, "module-neural_compressor.compression.pruner"], [164, "module-neural_compressor.compression.pruner.model_slim"], [165, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"], [166, "module-neural_compressor.compression.pruner.model_slim.weight_slim"], [167, "module-neural_compressor.compression.pruner.patterns"], [168, "module-neural_compressor.compression.pruner.pruners"], [169, "module-neural_compressor.compression.pruner.regs"], [170, "module-neural_compressor.compression.pruner.schedulers"], [171, "module-neural_compressor.compression.pruner.utils"], [172, "module-neural_compressor.conf.config"], [173, "module-neural_compressor.conf.dotdict"], [174, "module-neural_compressor.conf"], [175, "module-neural_compressor.conf.pythonic_config"], [176, "module-neural_compressor.config"], [177, "module-neural_compressor.contrib"], [178, "module-neural_compressor.contrib.strategy"], [179, "module-neural_compressor.contrib.strategy.sigopt"], [180, "module-neural_compressor.contrib.strategy.tpe"], [181, "module-neural_compressor.data.dataloaders.base_dataloader"], [182, "module-neural_compressor.data.dataloaders.dataloader"], [183, "module-neural_compressor.data.dataloaders.default_dataloader"], [184, "module-neural_compressor.data.dataloaders.fetcher"], [185, "module-neural_compressor.data.dataloaders"], [186, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [187, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [188, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [189, "module-neural_compressor.data.dataloaders.sampler"], [190, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [191, "module-neural_compressor.data.datasets.bert_dataset"], [192, "module-neural_compressor.data.datasets.coco_dataset"], [193, "module-neural_compressor.data.datasets.dataset"], [194, "module-neural_compressor.data.datasets.dummy_dataset"], [195, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [196, "module-neural_compressor.data.datasets.imagenet_dataset"], [197, "module-neural_compressor.data.datasets"], [198, "module-neural_compressor.data.datasets.style_transfer_dataset"], [199, "module-neural_compressor.data.filters.coco_filter"], [200, "module-neural_compressor.data.filters.filter"], [201, "module-neural_compressor.data.filters"], [202, "module-neural_compressor.data"], [203, "module-neural_compressor.data.transforms.coco_transform"], [204, "module-neural_compressor.data.transforms.imagenet_transform"], [205, "module-neural_compressor.data.transforms"], [206, "module-neural_compressor.data.transforms.postprocess"], [207, "module-neural_compressor.data.transforms.tokenization"], [208, "module-neural_compressor.data.transforms.transform"], [209, "module-neural_compressor.experimental.benchmark"], [210, "module-neural_compressor.experimental.common.criterion"], [211, "module-neural_compressor.experimental.common.dataloader"], [212, "module-neural_compressor.experimental.common"], [213, "module-neural_compressor.experimental.common.metric"], [214, "module-neural_compressor.experimental.common.model"], [215, "module-neural_compressor.experimental.common.optimizer"], [216, "module-neural_compressor.experimental.common.postprocess"], [217, "module-neural_compressor.experimental.common.torch_utils"], [218, "module-neural_compressor.experimental.component"], [219, "module-neural_compressor.experimental.compression"], [220, "module-neural_compressor.experimental.compression.pruning"], [221, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [222, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [223, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [224, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [225, "module-neural_compressor.experimental.data.dataloaders"], [226, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [227, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [228, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [229, "module-neural_compressor.experimental.data.dataloaders.sampler"], [230, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [231, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [232, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [233, "module-neural_compressor.experimental.data.datasets.dataset"], [234, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [235, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [236, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [237, "module-neural_compressor.experimental.data.datasets"], [238, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [239, "module-neural_compressor.experimental.data.filters.coco_filter"], [240, "module-neural_compressor.experimental.data.filters.filter"], [241, "module-neural_compressor.experimental.data.filters"], [242, "module-neural_compressor.experimental.data"], [243, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [244, "module-neural_compressor.experimental.data.transforms"], [245, "module-neural_compressor.experimental.data.transforms.tokenization"], [246, "module-neural_compressor.experimental.data.transforms.transform"], [247, "module-neural_compressor.experimental.distillation"], [248, "module-neural_compressor.experimental.export"], [249, "module-neural_compressor.experimental.export.qlinear2qdq"], [250, "module-neural_compressor.experimental.export.tf2onnx"], [251, "module-neural_compressor.experimental.export.torch2onnx"], [252, "module-neural_compressor.experimental.export.utils"], [253, "module-neural_compressor.experimental.graph_optimization"], [254, "module-neural_compressor.experimental"], [255, "module-neural_compressor.experimental.metric.bleu"], [256, "module-neural_compressor.experimental.metric.bleu_util"], [257, "module-neural_compressor.experimental.metric.coco_label_map"], [258, "module-neural_compressor.experimental.metric.coco_tools"], [259, "module-neural_compressor.experimental.metric.evaluate_squad"], [260, "module-neural_compressor.experimental.metric.f1"], [261, "module-neural_compressor.experimental.metric"], [262, "module-neural_compressor.experimental.metric.metric"], [263, "module-neural_compressor.experimental.mixed_precision"], [264, "module-neural_compressor.experimental.model_conversion"], [265, "module-neural_compressor.experimental.nas.basic_nas"], [266, "module-neural_compressor.experimental.nas.dynas"], [267, "module-neural_compressor.experimental.nas"], [268, "module-neural_compressor.experimental.nas.nas"], [269, "module-neural_compressor.experimental.nas.nas_utils"], [270, "module-neural_compressor.experimental.nas.search_algorithms"], [271, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [272, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [273, "module-neural_compressor.experimental.pruner_legacy"], [274, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [275, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [276, "module-neural_compressor.experimental.pruner_legacy.pruner"], [277, "module-neural_compressor.experimental.pruning"], [278, "module-neural_compressor.experimental.pruning_recipes"], [279, "module-neural_compressor.experimental.pruning_recipes.patterns"], [280, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [281, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [282, "module-neural_compressor.experimental.pruning_v2"], [283, "module-neural_compressor.experimental.pytorch_pruner"], [284, "module-neural_compressor.experimental.pytorch_pruner.logger"], [285, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [286, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [287, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [288, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [289, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [290, "module-neural_compressor.experimental.quantization"], [291, "module-neural_compressor.experimental.scheduler"], [292, "module-neural_compressor"], [293, "module-neural_compressor.metric.bleu"], [294, "module-neural_compressor.metric.bleu_util"], [295, "module-neural_compressor.metric.coco_label_map"], [296, "module-neural_compressor.metric.coco_tools"], [297, "module-neural_compressor.metric.evaluate_squad"], [298, "module-neural_compressor.metric.f1"], [299, "module-neural_compressor.metric"], [300, "module-neural_compressor.metric.metric"], [301, "module-neural_compressor.mix_precision"], [302, "module-neural_compressor.model.base_model"], [303, "module-neural_compressor.model"], [304, "module-neural_compressor.model.keras_model"], [305, "module-neural_compressor.model.model"], [306, "module-neural_compressor.model.mxnet_model"], [307, "module-neural_compressor.model.nets_factory"], [308, "module-neural_compressor.model.onnx_model"], [309, "module-neural_compressor.model.tensorflow_model"], [310, "module-neural_compressor.model.torch_model"], [311, "module-neural_compressor.objective"], [312, "module-neural_compressor.quantization"], [313, "module-neural_compressor.strategy.auto"], [314, "module-neural_compressor.strategy.auto_mixed_precision"], [315, "module-neural_compressor.strategy.basic"], [316, "module-neural_compressor.strategy.bayesian"], [317, "module-neural_compressor.strategy.conservative"], [318, "module-neural_compressor.strategy.exhaustive"], [319, "module-neural_compressor.strategy.hawq_v2"], [320, "module-neural_compressor.strategy"], [321, "module-neural_compressor.strategy.mse"], [322, "module-neural_compressor.strategy.mse_v2"], [323, "module-neural_compressor.strategy.random"], [324, "module-neural_compressor.strategy.strategy"], [325, "module-neural_compressor.strategy.utils.constant"], [326, "module-neural_compressor.strategy.utils"], [327, "module-neural_compressor.strategy.utils.tuning_sampler"], [328, "module-neural_compressor.strategy.utils.tuning_space"], [329, "module-neural_compressor.strategy.utils.tuning_structs"], [330, "module-neural_compressor.strategy.utils.utility"], [331, "module-neural_compressor.template.api_doc_example"], [332, "module-neural_compressor.template"], [333, "module-neural_compressor.training"], [334, "module-neural_compressor.utils.collect_layer_histogram"], [335, "module-neural_compressor.utils.constant"], [336, "module-neural_compressor.utils.create_obj_from_config"], [337, "module-neural_compressor.utils"], [338, "module-neural_compressor.utils.kl_divergence"], [339, "module-neural_compressor.utils.load_huggingface"], [340, "module-neural_compressor.utils.logger"], [341, "module-neural_compressor.utils.options"], [342, "module-neural_compressor.utils.pytorch"], [343, "module-neural_compressor.utils.utility"], [344, "module-neural_compressor.ux.components.benchmark.benchmark"], [345, "module-neural_compressor.ux.components.benchmark.benchmark_model"], [346, "module-neural_compressor.ux.components.benchmark.execute_benchmark"], [347, "module-neural_compressor.ux.components.benchmark"], [348, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"], [349, "module-neural_compressor.ux.components.config_generator.config_generator"], [350, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"], [351, "module-neural_compressor.ux.components.config_generator"], [352, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"], [353, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"], [354, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"], [355, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"], [356, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"], [357, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"], [358, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"], [359, "module-neural_compressor.ux.components.configuration_wizard"], [360, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"], [361, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"], [362, "module-neural_compressor.ux.components.db_manager.db_manager"], [363, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"], [364, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"], [365, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"], [366, "module-neural_compressor.ux.components.db_manager.db_models.dataset"], [367, "module-neural_compressor.ux.components.db_manager.db_models.domain"], [368, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"], [369, "module-neural_compressor.ux.components.db_manager.db_models.example"], [370, "module-neural_compressor.ux.components.db_manager.db_models.framework"], [371, "module-neural_compressor.ux.components.db_manager.db_models"], [372, "module-neural_compressor.ux.components.db_manager.db_models.metric"], [373, "module-neural_compressor.ux.components.db_manager.db_models.model"], [374, "module-neural_compressor.ux.components.db_manager.db_models.optimization"], [375, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"], [376, "module-neural_compressor.ux.components.db_manager.db_models.precision"], [377, "module-neural_compressor.ux.components.db_manager.db_models.profiling"], [378, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"], [379, "module-neural_compressor.ux.components.db_manager.db_models.project"], [380, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"], [381, "module-neural_compressor.ux.components.db_manager.db_models.transform"], [382, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"], [383, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"], [384, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"], [385, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"], [386, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"], [387, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"], [388, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"], [389, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"], [390, "module-neural_compressor.ux.components.db_manager.db_operations"], [391, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"], [392, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"], [393, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"], [394, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"], [395, "module-neural_compressor.ux.components.db_manager"], [396, "module-neural_compressor.ux.components.db_manager.params_interfaces"], [397, "module-neural_compressor.ux.components.db_manager.utils"], [398, "module-neural_compressor.ux.components.diagnosis.diagnosis"], [399, "module-neural_compressor.ux.components.diagnosis.factory"], [400, "module-neural_compressor.ux.components.diagnosis"], [401, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"], [402, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"], [403, "module-neural_compressor.ux.components.diagnosis.op_details"], [404, "module-neural_compressor.ux.components.diagnosis.op_entry"], [405, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"], [406, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"], [407, "module-neural_compressor.ux.components.file_browser.file_browser"], [408, "module-neural_compressor.ux.components.file_browser"], [409, "module-neural_compressor.ux.components.graph.attribute"], [410, "module-neural_compressor.ux.components.graph.collapser"], [411, "module-neural_compressor.ux.components.graph.edge"], [412, "module-neural_compressor.ux.components.graph.graph"], [413, "module-neural_compressor.ux.components.graph.graph_reader"], [414, "module-neural_compressor.ux.components.graph"], [415, "module-neural_compressor.ux.components.graph.node"], [416, "module-neural_compressor.ux.components.graph.reader"], [417, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"], [418, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"], [419, "module-neural_compressor.ux.components"], [420, "module-neural_compressor.ux.components.jobs_management"], [421, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"], [422, "module-neural_compressor.ux.components.jobs_management.jobs_manager"], [423, "module-neural_compressor.ux.components.jobs_management.request"], [424, "module-neural_compressor.ux.components.manage_workspace"], [425, "module-neural_compressor.ux.components.model.domain"], [426, "module-neural_compressor.ux.components.model"], [427, "module-neural_compressor.ux.components.model.model"], [428, "module-neural_compressor.ux.components.model.model_type_getter"], [429, "module-neural_compressor.ux.components.model.onnxrt"], [430, "module-neural_compressor.ux.components.model.onnxrt.model"], [431, "module-neural_compressor.ux.components.model.pytorch"], [432, "module-neural_compressor.ux.components.model.pytorch.model"], [433, "module-neural_compressor.ux.components.model.repository"], [434, "module-neural_compressor.ux.components.model.shape"], [435, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"], [436, "module-neural_compressor.ux.components.model.tensorflow"], [437, "module-neural_compressor.ux.components.model.tensorflow.keras"], [438, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"], [439, "module-neural_compressor.ux.components.model.tensorflow.model"], [440, "module-neural_compressor.ux.components.model.tensorflow.saved_model"], [441, "module-neural_compressor.ux.components.model.tensorflow.utils"], [442, "module-neural_compressor.ux.components.model_zoo.download_config"], [443, "module-neural_compressor.ux.components.model_zoo.download_model"], [444, "module-neural_compressor.ux.components.model_zoo.downloader"], [445, "module-neural_compressor.ux.components.model_zoo"], [446, "module-neural_compressor.ux.components.model_zoo.list_models"], [447, "module-neural_compressor.ux.components.names_mapper"], [448, "module-neural_compressor.ux.components.names_mapper.names_mapper"], [449, "module-neural_compressor.ux.components.optimization.execute_optimization"], [450, "module-neural_compressor.ux.components.optimization.factory"], [451, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"], [452, "module-neural_compressor.ux.components.optimization.graph_optimizer"], [453, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"], [454, "module-neural_compressor.ux.components.optimization"], [455, "module-neural_compressor.ux.components.optimization.mixed_precision"], [456, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"], [457, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"], [458, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"], [459, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"], [460, "module-neural_compressor.ux.components.optimization.optimization"], [461, "module-neural_compressor.ux.components.optimization.pruning"], [462, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"], [463, "module-neural_compressor.ux.components.optimization.pruning.pruning"], [464, "module-neural_compressor.ux.components.optimization.tune"], [465, "module-neural_compressor.ux.components.optimization.tune.tune_model"], [466, "module-neural_compressor.ux.components.optimization.tune.tuning"], [467, "module-neural_compressor.ux.components.optimization.tuning_history"], [468, "module-neural_compressor.ux.components.profiling.execute_profiling"], [469, "module-neural_compressor.ux.components.profiling.factory"], [470, "module-neural_compressor.ux.components.profiling"], [471, "module-neural_compressor.ux.components.profiling.profile_model"], [472, "module-neural_compressor.ux.components.profiling.profiler"], [473, "module-neural_compressor.ux.components.profiling.profiling"], [474, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"], [475, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"], [476, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"], [477, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"], [478, "module-neural_compressor.ux.inc_bench"], [479, "module-neural_compressor.ux"], [480, "module-neural_compressor.ux.utils.consts"], [481, "module-neural_compressor.ux.utils.environment"], [482, "module-neural_compressor.ux.utils.exceptions"], [483, "module-neural_compressor.ux.utils.executor"], [484, "module-neural_compressor.ux.utils.expiring_dict"], [485, "module-neural_compressor.ux.utils.github_info"], [486, "module-neural_compressor.ux.utils.hw_info"], [487, "module-neural_compressor.ux.utils"], [488, "module-neural_compressor.ux.utils.json_serializer"], [489, "module-neural_compressor.ux.utils.logger"], [490, "module-neural_compressor.ux.utils.parser"], [491, "module-neural_compressor.ux.utils.proc"], [492, "module-neural_compressor.ux.utils.processes"], [493, "module-neural_compressor.ux.utils.singleton"], [494, "module-neural_compressor.ux.utils.status_updates"], [495, "module-neural_compressor.ux.utils.templates"], [496, "module-neural_compressor.ux.utils.templates.metric"], [497, "module-neural_compressor.ux.utils.templates.workdir"], [498, "module-neural_compressor.ux.utils.utils"], [499, "module-neural_compressor.ux.utils.workload.config"], [500, "module-neural_compressor.ux.utils.workload.dataloader"], [501, "module-neural_compressor.ux.utils.workload.evaluation"], [502, "module-neural_compressor.ux.utils.workload.graph_optimization"], [503, "module-neural_compressor.ux.utils.workload"], [504, "module-neural_compressor.ux.utils.workload.mixed_precision"], [505, "module-neural_compressor.ux.utils.workload.model"], [506, "module-neural_compressor.ux.utils.workload.pruning"], [507, "module-neural_compressor.ux.utils.workload.quantization"], [508, "module-neural_compressor.ux.utils.workload.tuning"], [509, "module-neural_compressor.ux.utils.yaml_utils"], [510, "module-neural_compressor.ux.web.communication"], [511, "module-neural_compressor.ux.web.configuration"], [512, "module-neural_compressor.ux.web.exceptions"], [513, "module-neural_compressor.ux.web"], [514, "module-neural_compressor.ux.web.router"], [515, "module-neural_compressor.ux.web.server"], [516, "module-neural_compressor.ux.web.service.benchmark"], [517, "module-neural_compressor.ux.web.service.history_snapshot_parser"], [518, "module-neural_compressor.ux.web.service"], [519, "module-neural_compressor.ux.web.service.model"], [520, "module-neural_compressor.ux.web.service.optimization"], [521, "module-neural_compressor.ux.web.service.profiling"], [522, "module-neural_compressor.ux.web.service.request_data_processor"], [523, "module-neural_compressor.ux.web.service.response_generator"], [524, "module-neural_compressor.ux.web.service.workload"], [525, "module-neural_compressor.version"]], "6ece06672ed3_v1_14": [[1, "module-6ece06672ed3_v1_14"]], "update_dataloaders() (in module 6ece06672ed3_v1_14)": [[1, "ece06672ed3_v1_14.update_dataloaders"]], "update_transformations() (in module 6ece06672ed3_v1_14)": [[1, "ece06672ed3_v1_14.update_transformations"]], "6f0d0f71d92e_v1_13": [[2, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[3, "module-9e89549a08c8_v1_11"]], "block_mask": [[4, "module-block_mask"]], "env": [[5, "module-env"]], "run_migrations_offline() (in module env)": [[5, "env.run_migrations_offline"]], "run_migrations_online() (in module env)": [[5, "env.run_migrations_online"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[6, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[6, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "neural_compressor.adaptor.adaptor": [[6, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[7, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor"]], "neural_compressor.adaptor.keras": [[8, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[9, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[10, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[11, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[12, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[13, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[14, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "mxnetquery (class in neural_compressor.adaptor.mxnet)": [[15, "neural_compressor.adaptor.mxnet.MXNetQuery"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[15, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "neural_compressor.adaptor.mxnet": [[15, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[16, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[17, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[18, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[18, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[18, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[18, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt": [[18, "module-neural_compressor.adaptor.onnxrt"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[19, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration": [[19, "module-neural_compressor.adaptor.ox_utils.calibration"]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[20, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase"]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[20, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector"]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[20, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator"]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[20, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator"]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[20, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator"]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[20, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry"]], "neural_compressor.adaptor.ox_utils.calibrator": [[20, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[20, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution"]], "neural_compressor.adaptor.ox_utils": [[21, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[22, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[22, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[22, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[22, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[23, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[23, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[23, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[24, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[24, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[24, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[25, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[25, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[25, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[26, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[26, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[26, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[27, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[27, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[27, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[28, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[28, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[28, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[29, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[29, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[29, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[30, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[30, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[30, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[31, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[31, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[31, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[32, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[32, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[32, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[33, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[34, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[34, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[35, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[35, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[35, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[36, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[36, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[36, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[37, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[37, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[37, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[37, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[37, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[38, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[38, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[38, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[39, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[39, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[39, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[40, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[40, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[40, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[41, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[41, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[41, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[42, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer": [[42, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "adjust_weights_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.adjust_weights_per_input"]], "adjust_weights_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.adjust_weights_per_op"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "get_smooth_scales_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.get_smooth_scales_per_input"]], "get_smooth_scales_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.get_smooth_scales_per_op"]], "insert_smooth_mul_op_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.insert_smooth_mul_op_per_input"]], "insert_smooth_mul_op_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.insert_smooth_mul_op_per_op"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchquery (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorchQuery"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "neural_compressor.adaptor.pytorch": [[44, "module-neural_compressor.adaptor.pytorch"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[45, "neural_compressor.adaptor.query.QueryBackendCapability"]], "neural_compressor.adaptor.query": [[45, "module-neural_compressor.adaptor.query"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow": [[46, "module-neural_compressor.adaptor.tensorflow"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[47, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[48, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[49, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[109, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[109, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[110, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[139, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[139, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[140, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[140, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[141, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[141, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[142, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[143, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[144, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[145, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[146, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[146, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[146, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[146, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[147, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[147, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[147, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[147, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[147, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[148, "module-neural_compressor.adaptor.torch_utils"]], "graphtrace (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[149, "neural_compressor.adaptor.torch_utils.smooth_quant.GraphTrace"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[149, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[149, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[150, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[150, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[150, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[151, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[151, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[151, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[151, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[151, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[151, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[151, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[151, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[151, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[151, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[151, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[151, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[151, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[151, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[151, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[151, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[151, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern"]], "neural_compressor.adaptor.torch_utils.util": [[151, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[151, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[151, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[151, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[152, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[152, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[152, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[152, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[152, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[153, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[153, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[154, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[155, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[155, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[156, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[156, "module-neural_compressor.algorithm.weight_correction"]], "fit() (in module neural_compressor.benchmark)": [[157, "neural_compressor.benchmark.fit"]], "get_architecture() (in module neural_compressor.benchmark)": [[157, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[157, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[157, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[157, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[157, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[157, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[157, "module-neural_compressor.benchmark"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[157, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[157, "neural_compressor.benchmark.set_env_var"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[158, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[158, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[158, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[158, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[158, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[158, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[158, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[158, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "neural_compressor.compression.callbacks": [[158, "module-neural_compressor.compression.callbacks"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[159, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[159, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[159, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[159, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[159, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[159, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[159, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[159, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[159, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[159, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[159, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[159, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[159, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[159, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[159, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[159, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[159, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "neural_compressor.compression.distillation.criterions": [[159, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[160, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[161, "module-neural_compressor.compression"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[162, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[162, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[162, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[162, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[162, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumblockcriterion (class in neural_compressor.compression.pruner.criteria)": [[162, "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[162, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[162, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[162, "module-neural_compressor.compression.pruner.criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[162, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[162, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[162, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[162, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[162, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[162, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumblockcriterion attribute)": [[162, "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[162, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.compression.pruner": [[163, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.model_slim": [[164, "module-neural_compressor.compression.pruner.model_slim"]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher"]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher"]], "pathsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.PathSearcher"]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher"]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.pathsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.PathSearcher.current_pattern"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.pathsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.PathSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.pathsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.PathSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph"]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.pathsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.PathSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[165, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.pathsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.PathSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.pathsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.PathSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.pathsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.PathSearcher.target_layers"]], "target_op (neural_compressor.compression.pruner.model_slim.pattern_analyzer.pathsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.PathSearcher.target_op"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.pathsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.PathSearcher.target_op_lut"]], "target_path (neural_compressor.compression.pruner.model_slim.pattern_analyzer.pathsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.PathSearcher.target_path"]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets"]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[166, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression"]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[166, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator"]], "mhacompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[166, "neural_compressor.compression.pruner.model_slim.weight_slim.MHACompression"]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[166, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils"]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[166, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device"]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[166, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1"]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[166, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2"]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[166, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[166, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "basepattern (class in neural_compressor.compression.pruner.patterns)": [[167, "neural_compressor.compression.pruner.patterns.BasePattern"]], "m (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[167, "neural_compressor.compression.pruner.patterns.PatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[167, "neural_compressor.compression.pruner.patterns.PatternNInM.N"]], "patternninm (class in neural_compressor.compression.pruner.patterns)": [[167, "neural_compressor.compression.pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.compression.pruner.patterns)": [[167, "neural_compressor.compression.pruner.patterns.PatternNxM"]], "block_size (neural_compressor.compression.pruner.patterns.patternnxm attribute)": [[167, "neural_compressor.compression.pruner.patterns.PatternNxM.block_size"]], "config (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.BasePattern.config"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[167, "neural_compressor.compression.pruner.patterns.get_pattern"]], "invalid_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.BasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.BasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.BasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.BasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.BasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.BasePattern.modules"]], "neural_compressor.compression.pruner.patterns": [[167, "module-neural_compressor.compression.pruner.patterns"]], "pattern (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.BasePattern.pattern"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns)": [[167, "neural_compressor.compression.pruner.patterns.register_pattern"]], "target_sparsity (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.BasePattern.target_sparsity"]], "basepruner (class in neural_compressor.compression.pruner.pruners)": [[168, "neural_compressor.compression.pruner.pruners.BasePruner"]], "basicpruner (class in neural_compressor.compression.pruner.pruners)": [[168, "neural_compressor.compression.pruner.pruners.BasicPruner"]], "blockmaskpruner (class in neural_compressor.compression.pruner.pruners)": [[168, "neural_compressor.compression.pruner.pruners.BlockMaskPruner"]], "patternlockpruner (class in neural_compressor.compression.pruner.pruners)": [[168, "neural_compressor.compression.pruner.pruners.PatternLockPruner"]], "progressivepruner (class in neural_compressor.compression.pruner.pruners)": [[168, "neural_compressor.compression.pruner.pruners.ProgressivePruner"]], "retrainfreepruner (class in neural_compressor.compression.pruner.pruners)": [[168, "neural_compressor.compression.pruner.pruners.RetrainFreePruner"]], "config (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[168, "neural_compressor.compression.pruner.pruners.BasePruner.config"]], "criterion (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[168, "neural_compressor.compression.pruner.pruners.BasicPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[168, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[168, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.criterion"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[168, "neural_compressor.compression.pruner.pruners.BasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[168, "neural_compressor.compression.pruner.pruners.BasePruner.end_step"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[168, "neural_compressor.compression.pruner.pruners.get_pruner"]], "global_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[168, "neural_compressor.compression.pruner.pruners.BasePruner.global_step"]], "masks (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[168, "neural_compressor.compression.pruner.pruners.BasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[168, "neural_compressor.compression.pruner.pruners.BasePruner.max_sparsity_ratio_per_op"]], "model_slim() (in module neural_compressor.compression.pruner.pruners)": [[168, "neural_compressor.compression.pruner.pruners.model_slim"]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.pruners)": [[168, "neural_compressor.compression.pruner.pruners.model_slim_ffn2"]], "model_slim_mha() (in module neural_compressor.compression.pruner.pruners)": [[168, "neural_compressor.compression.pruner.pruners.model_slim_mha"]], "modules (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[168, "neural_compressor.compression.pruner.pruners.BasePruner.modules"]], "neural_compressor.compression.pruner.pruners": [[168, "module-neural_compressor.compression.pruner.pruners"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[168, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pattern (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[168, "neural_compressor.compression.pruner.pruners.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[168, "neural_compressor.compression.pruner.pruners.BasicPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[168, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[168, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.pattern"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[168, "neural_compressor.compression.pruner.pruners.BasePruner.pruning_frequency"]], "reg (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[168, "neural_compressor.compression.pruner.pruners.BasicPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[168, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[168, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.reg"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners)": [[168, "neural_compressor.compression.pruner.pruners.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[168, "neural_compressor.compression.pruner.pruners.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[168, "neural_compressor.compression.pruner.pruners.BasicPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[168, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[168, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[168, "neural_compressor.compression.pruner.pruners.BasePruner.scores"]], "start_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[168, "neural_compressor.compression.pruner.pruners.BasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[168, "neural_compressor.compression.pruner.pruners.BasePruner.target_sparsity_ratio"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[169, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[169, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[169, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[169, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[169, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[169, "module-neural_compressor.compression.pruner.regs"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[169, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[169, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[170, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[170, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[170, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[170, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[170, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[170, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[170, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[171, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[171, "neural_compressor.compression.pruner.utils.check_key_validity"]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.utils)": [[171, "neural_compressor.compression.pruner.utils.generate_ffn2_pruning_config"]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.utils)": [[171, "neural_compressor.compression.pruner.utils.generate_mha_pruning_config"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[171, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[171, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "neural_compressor.compression.pruner.utils": [[171, "module-neural_compressor.compression.pruner.utils"]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.utils)": [[171, "neural_compressor.compression.pruner.utils.parse_auto_slim_config"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[171, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[171, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[171, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[171, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[171, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[171, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[171, "neural_compressor.compression.pruner.utils.update_params"]], "benchmark_conf (class in neural_compressor.conf.config)": [[172, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[172, "neural_compressor.conf.config.Conf"]], "distillation_conf (class in neural_compressor.conf.config)": [[172, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[172, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[172, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[172, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[172, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[172, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[172, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[172, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[173, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[173, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[173, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[173, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[174, "module-neural_compressor.conf"]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[175, "neural_compressor.conf.pythonic_config.QuantizationConfig"]], "neural_compressor.conf.pythonic_config": [[175, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[176, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[176, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[176, "neural_compressor.config.DistillationConfig"]], "exportconfig (class in neural_compressor.config)": [[176, "neural_compressor.config.ExportConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[176, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[176, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mixedprecisionconfig (class in neural_compressor.config)": [[176, "neural_compressor.config.MixedPrecisionConfig"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[176, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[176, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[176, "neural_compressor.config.PostTrainingQuantConfig"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[176, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[176, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[176, "neural_compressor.config.TF2ONNXConfig"]], "torch2onnxconfig (class in neural_compressor.config)": [[176, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[176, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[176, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[176, "module-neural_compressor.config"]], "neural_compressor.contrib": [[177, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[178, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[179, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[179, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[180, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[180, "module-neural_compressor.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[181, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader": [[181, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[182, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[182, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[183, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[183, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[183, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[184, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[184, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[184, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[184, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[185, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[186, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[186, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[187, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[187, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[187, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[188, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[188, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[189, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[189, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[189, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[189, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[189, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[190, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[190, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[190, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[190, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[190, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[191, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[191, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[191, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[191, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[191, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[191, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[191, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[191, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[191, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[192, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[192, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[192, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[192, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[192, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[193, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[193, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[193, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[193, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[193, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[193, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[193, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[193, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[193, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[193, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[193, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[193, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[193, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[193, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[193, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[193, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[193, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[193, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[193, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[193, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[193, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[193, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[193, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[193, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[193, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[193, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[193, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[193, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[193, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[193, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[193, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[193, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[193, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[193, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[193, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[193, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[193, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[193, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[193, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[194, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[194, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[195, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[195, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[195, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[196, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[196, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[196, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[196, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[196, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[196, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[196, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[197, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[198, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[198, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[199, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[199, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[199, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[200, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[200, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[200, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[200, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[200, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[200, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[200, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[200, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[200, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[201, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[202, "module-neural_compressor.data"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[203, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[203, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[204, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[204, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[204, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[204, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[204, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[204, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[204, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[204, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[204, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[204, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[205, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[206, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[206, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[207, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[207, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[207, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[207, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[207, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[207, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[207, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[207, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.TRANSFORMS"], [208, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[208, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[208, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[209, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[209, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[209, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[209, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[209, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[209, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[209, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[209, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[209, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[209, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[210, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[210, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[210, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[210, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[210, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[210, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[210, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[210, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[210, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[210, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[210, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[210, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[210, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[210, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[210, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[210, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[210, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[210, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[210, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[210, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[210, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[211, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[211, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[212, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[213, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[213, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[214, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[214, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[214, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[215, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[215, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[215, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[215, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[215, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[215, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[215, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[215, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[215, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[216, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[216, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[217, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[217, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[217, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[218, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[218, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[219, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[220, "module-neural_compressor.experimental.compression.pruning"]], "prepare_pruning() (in module neural_compressor.experimental.compression.pruning)": [[220, "neural_compressor.experimental.compression.pruning.prepare_pruning"]], "save() (in module neural_compressor.experimental.compression.pruning)": [[220, "neural_compressor.experimental.compression.pruning.save"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[221, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[221, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[222, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[223, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[223, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[223, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[224, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[224, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[224, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[224, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[225, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[226, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[226, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[227, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[227, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[227, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[228, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[228, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[229, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[229, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[229, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[229, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[229, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[230, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[230, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[230, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[230, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[230, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[231, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[231, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[231, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[231, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[231, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[231, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[231, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[231, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[231, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[232, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[232, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[232, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[232, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[232, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[233, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[233, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[233, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[233, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[233, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[233, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[233, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[233, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[233, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[233, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[233, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[233, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[233, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[233, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[233, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[233, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[233, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[233, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[233, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[233, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[233, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[233, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[233, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[233, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[233, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[233, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[233, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[233, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[233, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[233, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[233, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[233, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[233, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[233, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[233, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[233, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[233, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[233, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[233, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[234, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[234, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[235, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[235, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[235, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[236, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[236, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[236, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[236, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[236, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[236, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[236, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[237, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[238, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[238, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[239, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[239, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[239, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[240, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[240, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[240, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[240, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[240, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[240, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[240, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[240, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[240, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[241, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[242, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[243, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[243, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[243, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[243, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[243, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[243, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[243, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[243, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[243, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[243, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[244, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[245, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[245, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[245, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[245, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[245, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[245, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[245, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[245, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [246, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[246, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[246, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[247, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[247, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[247, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[247, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[247, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[247, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[248, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[249, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[249, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[249, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[250, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[250, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[250, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "build_scale_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[251, "neural_compressor.experimental.export.torch2onnx.build_scale_mapping"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[251, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[251, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[251, "module-neural_compressor.experimental.export.torch2onnx"]], "qdq_fp32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[251, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias"]], "qdq_fp32_bias_qdq() (in module neural_compressor.experimental.export.torch2onnx)": [[251, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias_qdq"]], "qdq_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[251, "neural_compressor.experimental.export.torch2onnx.qdq_int32_bias"]], "recalculate_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[251, "neural_compressor.experimental.export.torch2onnx.recalculate_bias"]], "remove_nodes_by_name() (in module neural_compressor.experimental.export.torch2onnx)": [[251, "neural_compressor.experimental.export.torch2onnx.remove_nodes_by_name"]], "set_data_type() (in module neural_compressor.experimental.export.torch2onnx)": [[251, "neural_compressor.experimental.export.torch2onnx.set_data_type"]], "set_scale_info() (in module neural_compressor.experimental.export.torch2onnx)": [[251, "neural_compressor.experimental.export.torch2onnx.set_scale_info"]], "sub_graph_with_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[251, "neural_compressor.experimental.export.torch2onnx.sub_graph_with_int32_bias"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[251, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[251, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "update_weight_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[251, "neural_compressor.experimental.export.torch2onnx.update_weight_bias"]], "dummydatareader (class in neural_compressor.experimental.export.utils)": [[252, "neural_compressor.experimental.export.utils.DummyDataReader"]], "onnx2numpy_dtype() (in module neural_compressor.experimental.export.utils)": [[252, "neural_compressor.experimental.export.utils.ONNX2Numpy_dtype"]], "neural_compressor.experimental.export.utils": [[252, "module-neural_compressor.experimental.export.utils"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[253, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[253, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[254, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[255, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[255, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[255, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[255, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[255, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[255, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[255, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[255, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[255, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[256, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[256, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[257, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[258, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[258, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[258, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[258, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[258, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[258, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[258, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[258, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[259, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[259, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[259, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[259, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[259, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[260, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[260, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[260, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[260, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[260, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[261, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[262, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[262, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[262, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[262, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[262, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[262, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[262, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[262, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[262, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[262, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[262, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[262, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[262, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[262, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[262, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[262, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[262, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[262, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[262, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[262, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[262, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[262, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[262, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[262, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[262, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[262, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[262, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[262, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[262, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[262, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[262, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[262, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[262, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[262, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[262, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[262, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[262, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[262, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[262, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[262, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[262, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[262, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[262, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[262, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[262, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[262, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[262, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[262, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[262, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[262, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[262, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[262, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[262, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[263, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[263, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[264, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[264, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[265, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[265, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[266, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[266, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[267, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[268, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[268, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[268, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[269, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[269, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[269, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[269, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[270, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[270, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[270, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[270, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[270, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[271, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[271, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[272, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[272, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[273, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[274, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[274, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[275, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[275, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[276, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[276, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[276, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[277, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[277, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[277, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[277, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[277, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[278, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[279, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[280, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[280, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[280, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[280, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[280, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[281, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[281, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[281, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[281, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[281, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[281, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[281, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[282, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[282, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[282, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[282, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[282, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[283, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[284, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[285, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[285, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[285, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[285, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[285, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[285, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[285, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[285, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[285, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[285, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[285, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[286, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[286, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[286, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[286, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[286, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[286, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[286, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[287, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[287, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[287, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[287, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[287, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[287, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[287, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[287, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[287, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[287, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[287, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[287, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[287, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[287, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[287, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[287, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[287, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[287, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[287, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[287, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[287, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[288, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[288, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[289, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[289, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[289, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[289, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[289, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[289, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[289, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[290, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[290, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[291, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[291, "module-neural_compressor.experimental.scheduler"]], "neural_compressor": [[292, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[293, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[293, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[293, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[293, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[293, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[293, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[293, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[293, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[293, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[294, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[294, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[295, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[296, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[296, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[296, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[296, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[296, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[296, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[296, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[296, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[297, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[297, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[297, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[297, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[297, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[298, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[298, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[298, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[298, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[298, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[299, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[300, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[300, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[300, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[300, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[300, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[300, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[300, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[300, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[300, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[300, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[300, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[300, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[300, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[300, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[300, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[300, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[300, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[300, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[300, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[300, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[300, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[300, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[300, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[300, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[300, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[300, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[300, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[300, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[300, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[300, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[300, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[300, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[300, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[300, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[300, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[300, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[300, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[300, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[300, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[300, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[300, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[300, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[300, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[300, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[300, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[300, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[300, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[300, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[300, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[300, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[300, "neural_compressor.metric.metric.MSE.pred_list"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[300, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[300, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[300, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[301, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[301, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[302, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[302, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[303, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[304, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[304, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[305, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[305, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[305, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[306, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[306, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[307, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[307, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[308, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[308, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[309, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[309, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[309, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[309, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[309, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[309, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[309, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[309, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[309, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[309, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[309, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[309, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[309, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[309, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[309, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[309, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[309, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[309, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[310, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[310, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[310, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[310, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[310, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[311, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[311, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[311, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[311, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[311, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[311, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[311, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[311, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[311, "neural_compressor.objective.objective_registry"]], "fit() (in module neural_compressor.quantization)": [[312, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[312, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[313, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[313, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[314, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[314, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[315, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[315, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[316, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[316, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[316, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[316, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[316, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[317, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[317, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[318, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[318, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[319, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[319, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[320, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[321, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[321, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[322, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[322, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[323, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[323, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[324, "neural_compressor.strategy.strategy.TuneStrategy"]], "neural_compressor.strategy.strategy": [[324, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[324, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[325, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[326, "module-neural_compressor.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[327, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[327, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[327, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[327, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[327, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[327, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.strategy.utils.tuning_sampler)": [[327, "neural_compressor.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_sampler": [[327, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[328, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[328, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "get_op_mode_by_query_order() (in module neural_compressor.strategy.utils.tuning_space)": [[328, "neural_compressor.strategy.utils.tuning_space.get_op_mode_by_query_order"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[328, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[328, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[328, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[328, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[328, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[329, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[329, "module-neural_compressor.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[330, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[330, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[330, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[330, "module-neural_compressor.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[330, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[331, "neural_compressor.template.api_doc_example.ExampleClass"]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[331, "neural_compressor.template.api_doc_example.ExampleClass.attr1"]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[331, "neural_compressor.template.api_doc_example.ExampleClass.attr2"]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[331, "neural_compressor.template.api_doc_example.ExampleClass.attr5"]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[331, "neural_compressor.template.api_doc_example.attribute1"]], "function1() (in module neural_compressor.template.api_doc_example)": [[331, "neural_compressor.template.api_doc_example.function1"]], "function2() (in module neural_compressor.template.api_doc_example)": [[331, "neural_compressor.template.api_doc_example.function2"]], "function3() (in module neural_compressor.template.api_doc_example)": [[331, "neural_compressor.template.api_doc_example.function3"]], "generator1() (in module neural_compressor.template.api_doc_example)": [[331, "neural_compressor.template.api_doc_example.generator1"]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[331, "neural_compressor.template.api_doc_example.module_debug_level1"]], "neural_compressor.template.api_doc_example": [[331, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[332, "module-neural_compressor.template"]], "callbacks (class in neural_compressor.training)": [[333, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[333, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[333, "neural_compressor.training.fit"]], "neural_compressor.training": [[333, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[333, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[334, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[334, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[335, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[336, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[336, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[336, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[336, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[336, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[336, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[336, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[336, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[336, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[336, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[337, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[338, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[338, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[339, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "neural_compressor.utils.load_huggingface": [[339, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[339, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[340, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[340, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[340, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[340, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[340, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[340, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[340, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[340, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[340, "neural_compressor.utils.logger.warning"]], "neural_compressor.utils.options": [[341, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[341, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[342, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[342, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[342, "module-neural_compressor.utils.pytorch"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[343, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[343, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[343, "neural_compressor.utils.utility.Dequantize"]], "dequantizeweight() (in module neural_compressor.utils.utility)": [[343, "neural_compressor.utils.utility.DequantizeWeight"]], "global_state (class in neural_compressor.utils.utility)": [[343, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[343, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[343, "neural_compressor.utils.utility.MODE"]], "statistics (class in neural_compressor.utils.utility)": [[343, "neural_compressor.utils.utility.Statistics"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[343, "neural_compressor.utils.utility.combine_histogram"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[343, "neural_compressor.utils.utility.compute_sparsity"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[343, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[343, "neural_compressor.utils.utility.dump_elapsed_time"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[343, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[343, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[343, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_size() (in module neural_compressor.utils.utility)": [[343, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[343, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[343, "neural_compressor.utils.utility.get_tuning_history"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[343, "neural_compressor.utils.utility.load_data_from_pkl"]], "neural_compressor.utils.utility": [[343, "module-neural_compressor.utils.utility"]], "recover() (in module neural_compressor.utils.utility)": [[343, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[343, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[343, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[343, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[343, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[343, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[343, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[343, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[343, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[343, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[343, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[343, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[343, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[343, "neural_compressor.utils.utility.version1_lte_version2"]], "benchmark (class in neural_compressor.ux.components.benchmark.benchmark)": [[344, "neural_compressor.ux.components.benchmark.benchmark.Benchmark"]], "dataloaderinterface (class in neural_compressor.ux.components.benchmark.benchmark)": [[344, "neural_compressor.ux.components.benchmark.benchmark.DataloaderInterface"]], "neural_compressor.ux.components.benchmark.benchmark": [[344, "module-neural_compressor.ux.components.benchmark.benchmark"]], "benchmark_model() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[345, "neural_compressor.ux.components.benchmark.benchmark_model.benchmark_model"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[345, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "parse_args() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[345, "neural_compressor.ux.components.benchmark.benchmark_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[345, "neural_compressor.ux.components.benchmark.benchmark_model.set_eager_execution"]], "benchmark_result_update() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[346, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update"]], "benchmark_result_update_pytorch_script() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[346, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update_pytorch_script"]], "execute_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[346, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_benchmark"]], "execute_real_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[346, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_real_benchmark"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[346, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "pytorch_script_bench_optimizations() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[346, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_optimizations"]], "pytorch_script_bench_original_model() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[346, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_original_model"]], "benchmarks (class in neural_compressor.ux.components.benchmark)": [[347, "neural_compressor.ux.components.benchmark.Benchmarks"]], "neural_compressor.ux.components.benchmark": [[347, "module-neural_compressor.ux.components.benchmark"]], "benchmarkconfiggenerator (class in neural_compressor.ux.components.config_generator.benchmark_config_generator)": [[348, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[348, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "configgenerator (class in neural_compressor.ux.components.config_generator.config_generator)": [[349, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator"]], "neural_compressor.ux.components.config_generator.config_generator": [[349, "module-neural_compressor.ux.components.config_generator.config_generator"]], "graphoptimizationconfiggenerator (class in neural_compressor.ux.components.config_generator.graph_optimization_config_generator)": [[350, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[350, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[351, "module-neural_compressor.ux.components.config_generator"]], "mixedprecisionconfiggenerator (class in neural_compressor.ux.components.config_generator.mixed_precision_config_generator)": [[352, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[352, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "profilingconfiggenerator (class in neural_compressor.ux.components.config_generator.profiling_config_generator)": [[353, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[353, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "pruningconfiggenerator (class in neural_compressor.ux.components.config_generator.pruning_config_generator)": [[354, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[354, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "quantizationconfiggenerator (class in neural_compressor.ux.components.config_generator.quantization_config_generator)": [[355, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[355, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "configurationparser (class in neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[356, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[356, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "normalize_string_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[356, "neural_compressor.ux.components.configuration_wizard.configuration_parser.normalize_string_list"]], "parse_list_value() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[356, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_list_value"]], "parse_multidim_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[356, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_multidim_list"]], "get_boundary_nodes() (in module neural_compressor.ux.components.configuration_wizard.get_boundary_nodes)": [[357, "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[357, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "get_predefined_configuration() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[358, "neural_compressor.ux.components.configuration_wizard.get_configuration.get_predefined_configuration"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[358, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "update_config_to_machine_specification() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[358, "neural_compressor.ux.components.configuration_wizard.get_configuration.update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard": [[359, "module-neural_compressor.ux.components.configuration_wizard"]], "feeder (class in neural_compressor.ux.components.configuration_wizard.params_feeder)": [[360, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder"]], "get_possible_values() (in module neural_compressor.ux.components.configuration_wizard.params_feeder)": [[360, "neural_compressor.ux.components.configuration_wizard.params_feeder.get_possible_values"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[360, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "pruningconfigparser (class in neural_compressor.ux.components.configuration_wizard.pruning_config_parser)": [[361, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[361, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "dbmanager (class in neural_compressor.ux.components.db_manager.db_manager)": [[362, "neural_compressor.ux.components.db_manager.db_manager.DBManager"]], "neural_compressor.ux.components.db_manager.db_manager": [[362, "module-neural_compressor.ux.components.db_manager.db_manager"]], "benchmark (class in neural_compressor.ux.components.db_manager.db_models.benchmark)": [[363, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[363, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "benchmarkresult (class in neural_compressor.ux.components.db_manager.db_models.benchmark_result)": [[364, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[364, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "dataloader (class in neural_compressor.ux.components.db_manager.db_models.dataloader)": [[365, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.dataloader)": [[365, "neural_compressor.ux.components.db_manager.db_models.dataloader.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[365, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "dataset (class in neural_compressor.ux.components.db_manager.db_models.dataset)": [[366, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[366, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "domain (class in neural_compressor.ux.components.db_manager.db_models.domain)": [[367, "neural_compressor.ux.components.db_manager.db_models.domain.Domain"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain)": [[367, "neural_compressor.ux.components.db_manager.db_models.domain.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[367, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "domainflavour (class in neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[368, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[368, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[368, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "example (class in neural_compressor.ux.components.db_manager.db_models.example)": [[369, "neural_compressor.ux.components.db_manager.db_models.example.Example"]], "neural_compressor.ux.components.db_manager.db_models.example": [[369, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "framework (class in neural_compressor.ux.components.db_manager.db_models.framework)": [[370, "neural_compressor.ux.components.db_manager.db_models.framework.Framework"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.framework)": [[370, "neural_compressor.ux.components.db_manager.db_models.framework.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[370, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[371, "module-neural_compressor.ux.components.db_manager.db_models"]], "metric (class in neural_compressor.ux.components.db_manager.db_models.metric)": [[372, "neural_compressor.ux.components.db_manager.db_models.metric.Metric"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.metric)": [[372, "neural_compressor.ux.components.db_manager.db_models.metric.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[372, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "model (class in neural_compressor.ux.components.db_manager.db_models.model)": [[373, "neural_compressor.ux.components.db_manager.db_models.model.Model"]], "neural_compressor.ux.components.db_manager.db_models.model": [[373, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "optimization (class in neural_compressor.ux.components.db_manager.db_models.optimization)": [[374, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[374, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "optimizationtype (class in neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[375, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[375, "neural_compressor.ux.components.db_manager.db_models.optimization_type.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[375, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "precision (class in neural_compressor.ux.components.db_manager.db_models.precision)": [[376, "neural_compressor.ux.components.db_manager.db_models.precision.Precision"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.precision)": [[376, "neural_compressor.ux.components.db_manager.db_models.precision.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[376, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "profiling (class in neural_compressor.ux.components.db_manager.db_models.profiling)": [[377, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[377, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "profilingresult (class in neural_compressor.ux.components.db_manager.db_models.profiling_result)": [[378, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[378, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "project (class in neural_compressor.ux.components.db_manager.db_models.project)": [[379, "neural_compressor.ux.components.db_manager.db_models.project.Project"]], "neural_compressor.ux.components.db_manager.db_models.project": [[379, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "pruningdetails (class in neural_compressor.ux.components.db_manager.db_models.pruning_details)": [[380, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[380, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "transform (class in neural_compressor.ux.components.db_manager.db_models.transform)": [[381, "neural_compressor.ux.components.db_manager.db_models.transform.Transform"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.transform)": [[381, "neural_compressor.ux.components.db_manager.db_models.transform.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[381, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "tuningdetails (class in neural_compressor.ux.components.db_manager.db_models.tuning_details)": [[382, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[382, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "tuninghistory (class in neural_compressor.ux.components.db_manager.db_models.tuning_history)": [[383, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[383, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[384, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface"]], "before_delete_benchmark_entry() (in module neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[384, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.before_delete_benchmark_entry"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[384, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[385, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[385, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[385, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_precision_optimization_types_association"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[385, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[385, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[385, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[385, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.set_database_version"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[386, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[386, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_precision_optimization_types_association"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[386, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[386, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[386, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[386, "neural_compressor.ux.components.db_manager.db_operations.db_operations.set_database_version"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface)": [[387, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[387, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface)": [[388, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[388, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.examples_api_interface)": [[389, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[389, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations": [[390, "module-neural_compressor.ux.components.db_manager.db_operations"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.model_api_interface)": [[391, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[391, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface)": [[392, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[392, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface)": [[393, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[393, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.project_api_interface)": [[394, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[394, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "neural_compressor.ux.components.db_manager": [[395, "module-neural_compressor.ux.components.db_manager"]], "benchmarkaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[396, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkAddParamsInterface"]], "benchmarkeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[396, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkEditParamsInterface"]], "datasetaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[396, "neural_compressor.ux.components.db_manager.params_interfaces.DatasetAddParamsInterface"]], "diagnosisoptimizationparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[396, "neural_compressor.ux.components.db_manager.params_interfaces.DiagnosisOptimizationParamsInterface"]], "modeladdparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[396, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface"]], "optimizationaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[396, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationAddParamsInterface"]], "optimizationeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[396, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationEditParamsInterface"]], "profilingaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[396, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingAddParamsInterface"]], "profilingeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[396, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingEditParamsInterface"]], "profilingresultaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[396, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingResultAddParamsInterface"]], "tuninghistoryinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[396, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface"]], "tuninghistoryiteminterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[396, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[396, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "get_framework_dataloaders_config() (in module neural_compressor.ux.components.db_manager.utils)": [[397, "neural_compressor.ux.components.db_manager.utils.get_framework_dataloaders_config"]], "get_framework_transforms_config() (in module neural_compressor.ux.components.db_manager.utils)": [[397, "neural_compressor.ux.components.db_manager.utils.get_framework_transforms_config"]], "neural_compressor.ux.components.db_manager.utils": [[397, "module-neural_compressor.ux.components.db_manager.utils"]], "update_dataloaders_params() (in module neural_compressor.ux.components.db_manager.utils)": [[397, "neural_compressor.ux.components.db_manager.utils.update_dataloaders_params"]], "diagnosis (class in neural_compressor.ux.components.diagnosis.diagnosis)": [[398, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[398, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "diagnosisfactory (class in neural_compressor.ux.components.diagnosis.factory)": [[399, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory"]], "neural_compressor.ux.components.diagnosis.factory": [[399, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[400, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[401, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "onnxrtdiagnosis (class in neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis)": [[402, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[402, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "opactivation (class in neural_compressor.ux.components.diagnosis.op_details)": [[403, "neural_compressor.ux.components.diagnosis.op_details.OpActivation"]], "opdetails (class in neural_compressor.ux.components.diagnosis.op_details)": [[403, "neural_compressor.ux.components.diagnosis.op_details.OpDetails"]], "oppattern (class in neural_compressor.ux.components.diagnosis.op_details)": [[403, "neural_compressor.ux.components.diagnosis.op_details.OpPattern"]], "opweights (class in neural_compressor.ux.components.diagnosis.op_details)": [[403, "neural_compressor.ux.components.diagnosis.op_details.OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details": [[403, "module-neural_compressor.ux.components.diagnosis.op_details"]], "opentry (class in neural_compressor.ux.components.diagnosis.op_entry)": [[404, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry": [[404, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[405, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "tensorflowdiagnosis (class in neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis)": [[406, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[406, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "create_dir_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[407, "neural_compressor.ux.components.file_browser.file_browser.create_dir_entry"]], "create_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[407, "neural_compressor.ux.components.file_browser.file_browser.create_entry"]], "create_file_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[407, "neural_compressor.ux.components.file_browser.file_browser.create_file_entry"]], "filter_requested_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[407, "neural_compressor.ux.components.file_browser.file_browser.filter_requested_entries"]], "get_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[407, "neural_compressor.ux.components.file_browser.file_browser.get_directory_entries"]], "get_filter_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[407, "neural_compressor.ux.components.file_browser.file_browser.get_filter_value"]], "get_non_hidden_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[407, "neural_compressor.ux.components.file_browser.file_browser.get_non_hidden_directory_entries"]], "get_requested_path() (in module neural_compressor.ux.components.file_browser.file_browser)": [[407, "neural_compressor.ux.components.file_browser.file_browser.get_requested_path"]], "get_setting_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[407, "neural_compressor.ux.components.file_browser.file_browser.get_setting_value"]], "is_dataset_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[407, "neural_compressor.ux.components.file_browser.file_browser.is_dataset_or_directory_entry"]], "is_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[407, "neural_compressor.ux.components.file_browser.file_browser.is_directory_entry"]], "is_model_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[407, "neural_compressor.ux.components.file_browser.file_browser.is_model_or_directory_entry"]], "neural_compressor.ux.components.file_browser.file_browser": [[407, "module-neural_compressor.ux.components.file_browser.file_browser"]], "should_show_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[407, "neural_compressor.ux.components.file_browser.file_browser.should_show_files"]], "should_show_only_model_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[407, "neural_compressor.ux.components.file_browser.file_browser.should_show_only_model_files"]], "sort_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[407, "neural_compressor.ux.components.file_browser.file_browser.sort_entries"]], "neural_compressor.ux.components.file_browser": [[408, "module-neural_compressor.ux.components.file_browser"]], "attribute (class in neural_compressor.ux.components.graph.attribute)": [[409, "neural_compressor.ux.components.graph.attribute.Attribute"]], "neural_compressor.ux.components.graph.attribute": [[409, "module-neural_compressor.ux.components.graph.attribute"]], "collapser (class in neural_compressor.ux.components.graph.collapser)": [[410, "neural_compressor.ux.components.graph.collapser.Collapser"]], "neural_compressor.ux.components.graph.collapser": [[410, "module-neural_compressor.ux.components.graph.collapser"]], "edge (class in neural_compressor.ux.components.graph.edge)": [[411, "neural_compressor.ux.components.graph.edge.Edge"]], "neural_compressor.ux.components.graph.edge": [[411, "module-neural_compressor.ux.components.graph.edge"]], "graph (class in neural_compressor.ux.components.graph.graph)": [[412, "neural_compressor.ux.components.graph.graph.Graph"]], "neural_compressor.ux.components.graph.graph": [[412, "module-neural_compressor.ux.components.graph.graph"]], "graphreader (class in neural_compressor.ux.components.graph.graph_reader)": [[413, "neural_compressor.ux.components.graph.graph_reader.GraphReader"]], "neural_compressor.ux.components.graph.graph_reader": [[413, "module-neural_compressor.ux.components.graph.graph_reader"]], "neural_compressor.ux.components.graph": [[414, "module-neural_compressor.ux.components.graph"]], "groupnode (class in neural_compressor.ux.components.graph.node)": [[415, "neural_compressor.ux.components.graph.node.GroupNode"]], "node (class in neural_compressor.ux.components.graph.node)": [[415, "neural_compressor.ux.components.graph.node.Node"]], "neural_compressor.ux.components.graph.node": [[415, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[416, "module-neural_compressor.ux.components.graph.reader"]], "onnxrtreader (class in neural_compressor.ux.components.graph.reader.onnxrt_reader)": [[417, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[417, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "tensorflowreader (class in neural_compressor.ux.components.graph.reader.tensorflow_reader)": [[418, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[418, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "neural_compressor.ux.components": [[419, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[420, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[421, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[422, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[423, "module-neural_compressor.ux.components.jobs_management.request"]], "get_default_path() (in module neural_compressor.ux.components.manage_workspace)": [[424, "neural_compressor.ux.components.manage_workspace.get_default_path"]], "neural_compressor.ux.components.manage_workspace": [[424, "module-neural_compressor.ux.components.manage_workspace"]], "domain (class in neural_compressor.ux.components.model.domain)": [[425, "neural_compressor.ux.components.model.domain.Domain"]], "neural_compressor.ux.components.model.domain": [[425, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[426, "module-neural_compressor.ux.components.model"]], "model (class in neural_compressor.ux.components.model.model)": [[427, "neural_compressor.ux.components.model.model.Model"]], "neural_compressor.ux.components.model.model": [[427, "module-neural_compressor.ux.components.model.model"]], "get_model_type() (in module neural_compressor.ux.components.model.model_type_getter)": [[428, "neural_compressor.ux.components.model.model_type_getter.get_model_type"]], "neural_compressor.ux.components.model.model_type_getter": [[428, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[429, "module-neural_compressor.ux.components.model.onnxrt"]], "onnxrtmodel (class in neural_compressor.ux.components.model.onnxrt.model)": [[430, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel"]], "neural_compressor.ux.components.model.onnxrt.model": [[430, "module-neural_compressor.ux.components.model.onnxrt.model"]], "remove_number_of_samples_from_shape() (in module neural_compressor.ux.components.model.onnxrt.model)": [[430, "neural_compressor.ux.components.model.onnxrt.model.remove_number_of_samples_from_shape"]], "neural_compressor.ux.components.model.pytorch": [[431, "module-neural_compressor.ux.components.model.pytorch"]], "pytorchscriptmodel (class in neural_compressor.ux.components.model.pytorch.model)": [[432, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel"]], "neural_compressor.ux.components.model.pytorch.model": [[432, "module-neural_compressor.ux.components.model.pytorch.model"]], "modelrepository (class in neural_compressor.ux.components.model.repository)": [[433, "neural_compressor.ux.components.model.repository.ModelRepository"]], "neural_compressor.ux.components.model.repository": [[433, "module-neural_compressor.ux.components.model.repository"]], "shape (class in neural_compressor.ux.components.model.shape)": [[434, "neural_compressor.ux.components.model.shape.Shape"]], "neural_compressor.ux.components.model.shape": [[434, "module-neural_compressor.ux.components.model.shape"]], "frozenpbmodel (class in neural_compressor.ux.components.model.tensorflow.frozen_pb)": [[435, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[435, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "neural_compressor.ux.components.model.tensorflow": [[436, "module-neural_compressor.ux.components.model.tensorflow"]], "kerasmodel (class in neural_compressor.ux.components.model.tensorflow.keras)": [[437, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel"]], "neural_compressor.ux.components.model.tensorflow.keras": [[437, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "metagraphmodel (class in neural_compressor.ux.components.model.tensorflow.meta_graph)": [[438, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[438, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "tensorflowmodel (class in neural_compressor.ux.components.model.tensorflow.model)": [[439, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel"]], "neural_compressor.ux.components.model.tensorflow.model": [[439, "module-neural_compressor.ux.components.model.tensorflow.model"]], "savedmodelmodel (class in neural_compressor.ux.components.model.tensorflow.saved_model)": [[440, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[440, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "get_input_shape() (in module neural_compressor.ux.components.model.tensorflow.utils)": [[441, "neural_compressor.ux.components.model.tensorflow.utils.get_input_shape"]], "neural_compressor.ux.components.model.tensorflow.utils": [[441, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "download_config() (in module neural_compressor.ux.components.model_zoo.download_config)": [[442, "neural_compressor.ux.components.model_zoo.download_config.download_config"]], "neural_compressor.ux.components.model_zoo.download_config": [[442, "module-neural_compressor.ux.components.model_zoo.download_config"]], "download_model() (in module neural_compressor.ux.components.model_zoo.download_model)": [[443, "neural_compressor.ux.components.model_zoo.download_model.download_model"]], "neural_compressor.ux.components.model_zoo.download_model": [[443, "module-neural_compressor.ux.components.model_zoo.download_model"]], "downloader (class in neural_compressor.ux.components.model_zoo.downloader)": [[444, "neural_compressor.ux.components.model_zoo.downloader.Downloader"]], "neural_compressor.ux.components.model_zoo.downloader": [[444, "module-neural_compressor.ux.components.model_zoo.downloader"]], "neural_compressor.ux.components.model_zoo": [[445, "module-neural_compressor.ux.components.model_zoo"]], "check_version() (in module neural_compressor.ux.components.model_zoo.list_models)": [[446, "neural_compressor.ux.components.model_zoo.list_models.check_version"]], "get_available_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[446, "neural_compressor.ux.components.model_zoo.list_models.get_available_models"]], "get_framework_module_name() (in module neural_compressor.ux.components.model_zoo.list_models)": [[446, "neural_compressor.ux.components.model_zoo.list_models.get_framework_module_name"]], "get_installed_frameworks() (in module neural_compressor.ux.components.model_zoo.list_models)": [[446, "neural_compressor.ux.components.model_zoo.list_models.get_installed_frameworks"]], "list_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[446, "neural_compressor.ux.components.model_zoo.list_models.list_models"]], "neural_compressor.ux.components.model_zoo.list_models": [[446, "module-neural_compressor.ux.components.model_zoo.list_models"]], "validate_model_list() (in module neural_compressor.ux.components.model_zoo.list_models)": [[446, "neural_compressor.ux.components.model_zoo.list_models.validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[447, "module-neural_compressor.ux.components.names_mapper"]], "mappingdirection (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[448, "neural_compressor.ux.components.names_mapper.names_mapper.MappingDirection"]], "namesmapper (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[448, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[448, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "check_if_collect_tuning_history() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[449, "neural_compressor.ux.components.optimization.execute_optimization.check_if_collect_tuning_history"]], "execute_optimization() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[449, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization"]], "execute_optimization_pytorch_script() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[449, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_pytorch_script"]], "execute_optimization_regular() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[449, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_regular"]], "neural_compressor.ux.components.optimization.execute_optimization": [[449, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "parse_logs() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[449, "neural_compressor.ux.components.optimization.execute_optimization.parse_logs"]], "parse_model_data_to_bench_names() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[449, "neural_compressor.ux.components.optimization.execute_optimization.parse_model_data_to_bench_names"]], "optimizationfactory (class in neural_compressor.ux.components.optimization.factory)": [[450, "neural_compressor.ux.components.optimization.factory.OptimizationFactory"]], "neural_compressor.ux.components.optimization.factory": [[450, "module-neural_compressor.ux.components.optimization.factory"]], "graphoptimization (class in neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization)": [[451, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[451, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[452, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[453, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[453, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[453, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[453, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[453, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.set_eager_execution"]], "optimizations (class in neural_compressor.ux.components.optimization)": [[454, "neural_compressor.ux.components.optimization.Optimizations"]], "neural_compressor.ux.components.optimization": [[454, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[455, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "mixedprecision (class in neural_compressor.ux.components.optimization.mixed_precision.mixed_precision)": [[456, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[456, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[457, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[457, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[457, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[457, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[457, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[458, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[459, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "optimize_pt_script() (in module neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model)": [[459, "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model.optimize_pt_script"]], "dataloaderinterface (class in neural_compressor.ux.components.optimization.optimization)": [[460, "neural_compressor.ux.components.optimization.optimization.DataloaderInterface"]], "optimization (class in neural_compressor.ux.components.optimization.optimization)": [[460, "neural_compressor.ux.components.optimization.optimization.Optimization"]], "optimizationinterface (class in neural_compressor.ux.components.optimization.optimization)": [[460, "neural_compressor.ux.components.optimization.optimization.OptimizationInterface"]], "neural_compressor.ux.components.optimization.optimization": [[460, "module-neural_compressor.ux.components.optimization.optimization"]], "neural_compressor.ux.components.optimization.pruning": [[461, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[462, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "optimize_model() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[462, "neural_compressor.ux.components.optimization.pruning.optimize_model.optimize_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[462, "neural_compressor.ux.components.optimization.pruning.optimize_model.parse_args"]], "pruning (class in neural_compressor.ux.components.optimization.pruning.pruning)": [[463, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[463, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "neural_compressor.ux.components.optimization.tune": [[464, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[465, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[465, "neural_compressor.ux.components.optimization.tune.tune_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[465, "neural_compressor.ux.components.optimization.tune.tune_model.set_eager_execution"]], "tune_model() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[465, "neural_compressor.ux.components.optimization.tune.tune_model.tune_model"]], "accuracycriterion (class in neural_compressor.ux.components.optimization.tune.tuning)": [[466, "neural_compressor.ux.components.optimization.tune.tuning.AccuracyCriterion"]], "tuning (class in neural_compressor.ux.components.optimization.tune.tuning)": [[466, "neural_compressor.ux.components.optimization.tune.tuning.Tuning"]], "tuningdetails (class in neural_compressor.ux.components.optimization.tune.tuning)": [[466, "neural_compressor.ux.components.optimization.tune.tuning.TuningDetails"]], "neural_compressor.ux.components.optimization.tune.tuning": [[466, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "tuninghistory (class in neural_compressor.ux.components.optimization.tuning_history)": [[467, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory"]], "watcher (class in neural_compressor.ux.components.optimization.tuning_history)": [[467, "neural_compressor.ux.components.optimization.tuning_history.Watcher"]], "neural_compressor.ux.components.optimization.tuning_history": [[467, "module-neural_compressor.ux.components.optimization.tuning_history"]], "tuning_history() (in module neural_compressor.ux.components.optimization.tuning_history)": [[467, "neural_compressor.ux.components.optimization.tuning_history.tuning_history"]], "tuning_history_path() (in module neural_compressor.ux.components.optimization.tuning_history)": [[467, "neural_compressor.ux.components.optimization.tuning_history.tuning_history_path"]], "execute_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[468, "neural_compressor.ux.components.profiling.execute_profiling.execute_profiling"]], "execute_real_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[468, "neural_compressor.ux.components.profiling.execute_profiling.execute_real_profiling"]], "neural_compressor.ux.components.profiling.execute_profiling": [[468, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "profilerfactory (class in neural_compressor.ux.components.profiling.factory)": [[469, "neural_compressor.ux.components.profiling.factory.ProfilerFactory"]], "neural_compressor.ux.components.profiling.factory": [[469, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[470, "module-neural_compressor.ux.components.profiling"]], "load_profiling_details() (in module neural_compressor.ux.components.profiling.profile_model)": [[471, "neural_compressor.ux.components.profiling.profile_model.load_profiling_details"]], "neural_compressor.ux.components.profiling.profile_model": [[471, "module-neural_compressor.ux.components.profiling.profile_model"]], "parse_args() (in module neural_compressor.ux.components.profiling.profile_model)": [[471, "neural_compressor.ux.components.profiling.profile_model.parse_args"]], "profiler (class in neural_compressor.ux.components.profiling.profiler)": [[472, "neural_compressor.ux.components.profiling.profiler.Profiler"]], "neural_compressor.ux.components.profiling.profiler": [[472, "module-neural_compressor.ux.components.profiling.profiler"]], "dataloaderinterface (class in neural_compressor.ux.components.profiling.profiling)": [[473, "neural_compressor.ux.components.profiling.profiling.DataloaderInterface"]], "profiling (class in neural_compressor.ux.components.profiling.profiling)": [[473, "neural_compressor.ux.components.profiling.profiling.Profiling"]], "neural_compressor.ux.components.profiling.profiling": [[473, "module-neural_compressor.ux.components.profiling.profiling"]], "profilerfactory (class in neural_compressor.ux.components.profiling.tensorflow_profiler.factory)": [[474, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[474, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[475, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "profiler (class in neural_compressor.ux.components.profiling.tensorflow_profiler.profiler)": [[476, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[476, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "delete_assign() (in module neural_compressor.ux.components.profiling.tensorflow_profiler.utils)": [[477, "neural_compressor.ux.components.profiling.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[477, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "main() (in module neural_compressor.ux.inc_bench)": [[478, "neural_compressor.ux.inc_bench.main"]], "neural_compressor.ux.inc_bench": [[478, "module-neural_compressor.ux.inc_bench"]], "prepare_environment() (in module neural_compressor.ux.inc_bench)": [[478, "neural_compressor.ux.inc_bench.prepare_environment"]], "neural_compressor.ux": [[479, "module-neural_compressor.ux"]], "domainflavours (class in neural_compressor.ux.utils.consts)": [[480, "neural_compressor.ux.utils.consts.DomainFlavours"]], "domains (class in neural_compressor.ux.utils.consts)": [[480, "neural_compressor.ux.utils.consts.Domains"]], "executionstatus (class in neural_compressor.ux.utils.consts)": [[480, "neural_compressor.ux.utils.consts.ExecutionStatus"]], "frameworks (class in neural_compressor.ux.utils.consts)": [[480, "neural_compressor.ux.utils.consts.Frameworks"]], "optimizationtypes (class in neural_compressor.ux.utils.consts)": [[480, "neural_compressor.ux.utils.consts.OptimizationTypes"]], "precisions (class in neural_compressor.ux.utils.consts)": [[480, "neural_compressor.ux.utils.consts.Precisions"]], "strategies (class in neural_compressor.ux.utils.consts)": [[480, "neural_compressor.ux.utils.consts.Strategies"]], "neural_compressor.ux.utils.consts": [[480, "module-neural_compressor.ux.utils.consts"]], "environment (class in neural_compressor.ux.utils.environment)": [[481, "neural_compressor.ux.utils.environment.Environment"]], "neural_compressor.ux.utils.environment": [[481, "module-neural_compressor.ux.utils.environment"]], "accessdeniedexception": [[482, "neural_compressor.ux.utils.exceptions.AccessDeniedException"]], "clienterrorexception": [[482, "neural_compressor.ux.utils.exceptions.ClientErrorException"]], "internalexception": [[482, "neural_compressor.ux.utils.exceptions.InternalException"]], "notfoundexception": [[482, "neural_compressor.ux.utils.exceptions.NotFoundException"]], "neural_compressor.ux.utils.exceptions": [[482, "module-neural_compressor.ux.utils.exceptions"]], "executor (class in neural_compressor.ux.utils.executor)": [[483, "neural_compressor.ux.utils.executor.Executor"]], "neural_compressor.ux.utils.executor": [[483, "module-neural_compressor.ux.utils.executor"]], "expiringdict (class in neural_compressor.ux.utils.expiring_dict)": [[484, "neural_compressor.ux.utils.expiring_dict.ExpiringDict"]], "expiringdictitem (class in neural_compressor.ux.utils.expiring_dict)": [[484, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem"]], "neural_compressor.ux.utils.expiring_dict": [[484, "module-neural_compressor.ux.utils.expiring_dict"]], "githubinfo (class in neural_compressor.ux.utils.github_info)": [[485, "neural_compressor.ux.utils.github_info.GithubInfo"]], "neural_compressor.ux.utils.github_info": [[485, "module-neural_compressor.ux.utils.github_info"]], "hwinfo (class in neural_compressor.ux.utils.hw_info)": [[486, "neural_compressor.ux.utils.hw_info.HWInfo"]], "get_bios_version() (in module neural_compressor.ux.utils.hw_info)": [[486, "neural_compressor.ux.utils.hw_info.get_bios_version"]], "get_distribution() (in module neural_compressor.ux.utils.hw_info)": [[486, "neural_compressor.ux.utils.hw_info.get_distribution"]], "get_framework_dependency_info() (in module neural_compressor.ux.utils.hw_info)": [[486, "neural_compressor.ux.utils.hw_info.get_framework_dependency_info"]], "get_framework_info() (in module neural_compressor.ux.utils.hw_info)": [[486, "neural_compressor.ux.utils.hw_info.get_framework_info"]], "get_kernel_version() (in module neural_compressor.ux.utils.hw_info)": [[486, "neural_compressor.ux.utils.hw_info.get_kernel_version"]], "get_number_of_sockets() (in module neural_compressor.ux.utils.hw_info)": [[486, "neural_compressor.ux.utils.hw_info.get_number_of_sockets"]], "is_turbo_boost_enabled() (in module neural_compressor.ux.utils.hw_info)": [[486, "neural_compressor.ux.utils.hw_info.is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info": [[486, "module-neural_compressor.ux.utils.hw_info"]], "neural_compressor.ux.utils": [[487, "module-neural_compressor.ux.utils"]], "jsonserializer (class in neural_compressor.ux.utils.json_serializer)": [[488, "neural_compressor.ux.utils.json_serializer.JsonSerializer"]], "neural_compressor.ux.utils.json_serializer": [[488, "module-neural_compressor.ux.utils.json_serializer"]], "change_log_level() (in module neural_compressor.ux.utils.logger)": [[489, "neural_compressor.ux.utils.logger.change_log_level"]], "neural_compressor.ux.utils.logger": [[489, "module-neural_compressor.ux.utils.logger"]], "accuracyparser (class in neural_compressor.ux.utils.parser)": [[490, "neural_compressor.ux.utils.parser.AccuracyParser"]], "benchmarkparserfactory (class in neural_compressor.ux.utils.parser)": [[490, "neural_compressor.ux.utils.parser.BenchmarkParserFactory"]], "optimizationparser (class in neural_compressor.ux.utils.parser)": [[490, "neural_compressor.ux.utils.parser.OptimizationParser"]], "parser (class in neural_compressor.ux.utils.parser)": [[490, "neural_compressor.ux.utils.parser.Parser"]], "performanceparser (class in neural_compressor.ux.utils.parser)": [[490, "neural_compressor.ux.utils.parser.PerformanceParser"]], "profilingparser (class in neural_compressor.ux.utils.parser)": [[490, "neural_compressor.ux.utils.parser.ProfilingParser"]], "neural_compressor.ux.utils.parser": [[490, "module-neural_compressor.ux.utils.parser"]], "proc (class in neural_compressor.ux.utils.proc)": [[491, "neural_compressor.ux.utils.proc.Proc"]], "neural_compressor.ux.utils.proc": [[491, "module-neural_compressor.ux.utils.proc"]], "ncprocesses (class in neural_compressor.ux.utils.processes)": [[492, "neural_compressor.ux.utils.processes.NCProcesses"]], "neural_compressor.ux.utils.processes": [[492, "module-neural_compressor.ux.utils.processes"]], "singleton (class in neural_compressor.ux.utils.singleton)": [[493, "neural_compressor.ux.utils.singleton.Singleton"]], "neural_compressor.ux.utils.singleton": [[493, "module-neural_compressor.ux.utils.singleton"]], "get_status_update_function() (in module neural_compressor.ux.utils.status_updates)": [[494, "neural_compressor.ux.utils.status_updates.get_status_update_function"]], "neural_compressor.ux.utils.status_updates": [[494, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[495, "module-neural_compressor.ux.utils.templates"]], "metric (class in neural_compressor.ux.utils.templates.metric)": [[496, "neural_compressor.ux.utils.templates.metric.Metric"]], "neural_compressor.ux.utils.templates.metric": [[496, "module-neural_compressor.ux.utils.templates.metric"]], "workdir (class in neural_compressor.ux.utils.templates.workdir)": [[497, "neural_compressor.ux.utils.templates.workdir.Workdir"]], "neural_compressor.ux.utils.templates.workdir": [[497, "module-neural_compressor.ux.utils.templates.workdir"]], "are_archive_filenames_valid() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.are_archive_filenames_valid"]], "check_module() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.check_module"]], "deprecated() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.deprecated"]], "determine_ip() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.determine_ip"]], "export_to_csv() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.export_to_csv"]], "filter_transforms() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.filter_transforms"]], "get_dataset_path() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.get_dataset_path"]], "get_default_pruning_config_path() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.get_default_pruning_config_path"]], "get_file_extension() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.get_file_extension"]], "get_framework_from_path() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.get_framework_from_path"]], "get_height_width_from_size() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.get_height_width_from_size"]], "get_metrics_dict() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.get_metrics_dict"]], "get_model_zoo_config_path() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.get_model_zoo_config_path"]], "get_model_zoo_model_path() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.get_model_zoo_model_path"]], "get_module_version() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.get_module_version"]], "get_predefined_config_path() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.get_predefined_config_path"]], "get_shape_from_transforms() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.get_shape_from_transforms"]], "get_size() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.get_size"]], "is_dataset_file() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.is_dataset_file"]], "is_development_env() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.is_development_env"]], "is_hidden() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.is_hidden"]], "load_dataloader_config() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.load_dataloader_config"]], "load_help_nc_params() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.load_help_nc_params"]], "load_metrics_config() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.load_metrics_config"]], "load_model_config() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.load_model_config"]], "load_model_wise_params() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.load_model_wise_params"]], "load_precisions_config() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.load_precisions_config"]], "load_pruning_details_config() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.load_pruning_details_config"]], "load_transforms_config() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.load_transforms_config"]], "load_transforms_filter_config() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.load_transforms_filter_config"]], "neural_compressor.ux.utils.utils": [[498, "module-neural_compressor.ux.utils.utils"]], "normalize_domain() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.normalize_domain"]], "normalize_framework() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.normalize_framework"]], "normalize_string() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.normalize_string"]], "parse_bool_value() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.parse_bool_value"]], "parse_to_float_list() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.parse_to_float_list"]], "parse_to_string_list() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.parse_to_string_list"]], "parse_version() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.parse_version"]], "release_tag() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.release_tag"]], "replace_with_values() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.replace_with_values"]], "safe_extract_archive() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.safe_extract_archive"]], "verify_file_path() (in module neural_compressor.ux.utils.utils)": [[498, "neural_compressor.ux.utils.utils.verify_file_path"]], "config (class in neural_compressor.ux.utils.workload.config)": [[499, "neural_compressor.ux.utils.workload.config.Config"]], "neural_compressor.ux.utils.workload.config": [[499, "module-neural_compressor.ux.utils.workload.config"]], "dataloader (class in neural_compressor.ux.utils.workload.dataloader)": [[500, "neural_compressor.ux.utils.workload.dataloader.Dataloader"]], "dataset (class in neural_compressor.ux.utils.workload.dataloader)": [[500, "neural_compressor.ux.utils.workload.dataloader.Dataset"]], "filter (class in neural_compressor.ux.utils.workload.dataloader)": [[500, "neural_compressor.ux.utils.workload.dataloader.Filter"]], "labelbalance (class in neural_compressor.ux.utils.workload.dataloader)": [[500, "neural_compressor.ux.utils.workload.dataloader.LabelBalance"]], "transform (class in neural_compressor.ux.utils.workload.dataloader)": [[500, "neural_compressor.ux.utils.workload.dataloader.Transform"]], "neural_compressor.ux.utils.workload.dataloader": [[500, "module-neural_compressor.ux.utils.workload.dataloader"]], "accuracy (class in neural_compressor.ux.utils.workload.evaluation)": [[501, "neural_compressor.ux.utils.workload.evaluation.Accuracy"]], "configs (class in neural_compressor.ux.utils.workload.evaluation)": [[501, "neural_compressor.ux.utils.workload.evaluation.Configs"]], "evaluation (class in neural_compressor.ux.utils.workload.evaluation)": [[501, "neural_compressor.ux.utils.workload.evaluation.Evaluation"]], "metric (class in neural_compressor.ux.utils.workload.evaluation)": [[501, "neural_compressor.ux.utils.workload.evaluation.Metric"]], "performance (class in neural_compressor.ux.utils.workload.evaluation)": [[501, "neural_compressor.ux.utils.workload.evaluation.Performance"]], "postprocess (class in neural_compressor.ux.utils.workload.evaluation)": [[501, "neural_compressor.ux.utils.workload.evaluation.Postprocess"]], "postprocessschema (class in neural_compressor.ux.utils.workload.evaluation)": [[501, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema"]], "neural_compressor.ux.utils.workload.evaluation": [[501, "module-neural_compressor.ux.utils.workload.evaluation"]], "graphoptimization (class in neural_compressor.ux.utils.workload.graph_optimization)": [[502, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization": [[502, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "neural_compressor.ux.utils.workload": [[503, "module-neural_compressor.ux.utils.workload"]], "mixedprecision (class in neural_compressor.ux.utils.workload.mixed_precision)": [[504, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision": [[504, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "model (class in neural_compressor.ux.utils.workload.model)": [[505, "neural_compressor.ux.utils.workload.model.Model"]], "neural_compressor.ux.utils.workload.model": [[505, "module-neural_compressor.ux.utils.workload.model"]], "adamoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[506, "neural_compressor.ux.utils.workload.pruning.AdamOptimizer"]], "adamwoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[506, "neural_compressor.ux.utils.workload.pruning.AdamWOptimizer"]], "approach (class in neural_compressor.ux.utils.workload.pruning)": [[506, "neural_compressor.ux.utils.workload.pruning.Approach"]], "criterion (class in neural_compressor.ux.utils.workload.pruning)": [[506, "neural_compressor.ux.utils.workload.pruning.Criterion"]], "crossentropylosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[506, "neural_compressor.ux.utils.workload.pruning.CrossEntropyLossCriterion"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[506, "neural_compressor.ux.utils.workload.pruning.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationlosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[506, "neural_compressor.ux.utils.workload.pruning.KnowledgeDistillationLossCriterion"]], "optimizer (class in neural_compressor.ux.utils.workload.pruning)": [[506, "neural_compressor.ux.utils.workload.pruning.Optimizer"]], "pruning (class in neural_compressor.ux.utils.workload.pruning)": [[506, "neural_compressor.ux.utils.workload.pruning.Pruning"]], "sgdoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[506, "neural_compressor.ux.utils.workload.pruning.SGDOptimizer"]], "selfknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[506, "neural_compressor.ux.utils.workload.pruning.SelfKnowledgeDistillationLoss"]], "sparsecategoricalcrossentropycriterion (class in neural_compressor.ux.utils.workload.pruning)": [[506, "neural_compressor.ux.utils.workload.pruning.SparseCategoricalCrossentropyCriterion"]], "train (class in neural_compressor.ux.utils.workload.pruning)": [[506, "neural_compressor.ux.utils.workload.pruning.Train"]], "weightcompressionapproach (class in neural_compressor.ux.utils.workload.pruning)": [[506, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach"]], "neural_compressor.ux.utils.workload.pruning": [[506, "module-neural_compressor.ux.utils.workload.pruning"]], "parse_dict_value_to_float() (in module neural_compressor.ux.utils.workload.pruning)": [[506, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_float"]], "parse_dict_value_to_int() (in module neural_compressor.ux.utils.workload.pruning)": [[506, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_int"]], "advance (class in neural_compressor.ux.utils.workload.quantization)": [[507, "neural_compressor.ux.utils.workload.quantization.Advance"]], "calibration (class in neural_compressor.ux.utils.workload.quantization)": [[507, "neural_compressor.ux.utils.workload.quantization.Calibration"]], "quantization (class in neural_compressor.ux.utils.workload.quantization)": [[507, "neural_compressor.ux.utils.workload.quantization.Quantization"]], "wiseconfig (class in neural_compressor.ux.utils.workload.quantization)": [[507, "neural_compressor.ux.utils.workload.quantization.WiseConfig"]], "wiseconfigdetails (class in neural_compressor.ux.utils.workload.quantization)": [[507, "neural_compressor.ux.utils.workload.quantization.WiseConfigDetails"]], "neural_compressor.ux.utils.workload.quantization": [[507, "module-neural_compressor.ux.utils.workload.quantization"]], "acccriterion (class in neural_compressor.ux.utils.workload.tuning)": [[508, "neural_compressor.ux.utils.workload.tuning.AccCriterion"]], "diagnosis (class in neural_compressor.ux.utils.workload.tuning)": [[508, "neural_compressor.ux.utils.workload.tuning.Diagnosis"]], "exitpolicy (class in neural_compressor.ux.utils.workload.tuning)": [[508, "neural_compressor.ux.utils.workload.tuning.ExitPolicy"]], "multiobjectives (class in neural_compressor.ux.utils.workload.tuning)": [[508, "neural_compressor.ux.utils.workload.tuning.MultiObjectives"]], "strategy (class in neural_compressor.ux.utils.workload.tuning)": [[508, "neural_compressor.ux.utils.workload.tuning.Strategy"]], "tuning (class in neural_compressor.ux.utils.workload.tuning)": [[508, "neural_compressor.ux.utils.workload.tuning.Tuning"]], "workspace (class in neural_compressor.ux.utils.workload.tuning)": [[508, "neural_compressor.ux.utils.workload.tuning.Workspace"]], "neural_compressor.ux.utils.workload.tuning": [[508, "module-neural_compressor.ux.utils.workload.tuning"]], "float_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[509, "neural_compressor.ux.utils.yaml_utils.float_representer"]], "neural_compressor.ux.utils.yaml_utils": [[509, "module-neural_compressor.ux.utils.yaml_utils"]], "pruner_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[509, "neural_compressor.ux.utils.yaml_utils.pruner_representer"]], "message (class in neural_compressor.ux.web.communication)": [[510, "neural_compressor.ux.web.communication.Message"]], "messagequeue (class in neural_compressor.ux.web.communication)": [[510, "neural_compressor.ux.web.communication.MessageQueue"]], "request (class in neural_compressor.ux.web.communication)": [[510, "neural_compressor.ux.web.communication.Request"]], "response (class in neural_compressor.ux.web.communication)": [[510, "neural_compressor.ux.web.communication.Response"]], "create_simple_response() (in module neural_compressor.ux.web.communication)": [[510, "neural_compressor.ux.web.communication.create_simple_response"]], "neural_compressor.ux.web.communication": [[510, "module-neural_compressor.ux.web.communication"]], "configuration (class in neural_compressor.ux.web.configuration)": [[511, "neural_compressor.ux.web.configuration.Configuration"]], "neural_compressor.ux.web.configuration": [[511, "module-neural_compressor.ux.web.configuration"]], "servicenotfoundexception": [[512, "neural_compressor.ux.web.exceptions.ServiceNotFoundException"]], "neural_compressor.ux.web.exceptions": [[512, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[513, "module-neural_compressor.ux.web"]], "deferredroutingdefinition (class in neural_compressor.ux.web.router)": [[514, "neural_compressor.ux.web.router.DeferredRoutingDefinition"]], "deferredsubprocessroutingdefinition (class in neural_compressor.ux.web.router)": [[514, "neural_compressor.ux.web.router.DeferredSubprocessRoutingDefinition"]], "realtimeroutingdefinition (class in neural_compressor.ux.web.router)": [[514, "neural_compressor.ux.web.router.RealtimeRoutingDefinition"]], "router (class in neural_compressor.ux.web.router)": [[514, "neural_compressor.ux.web.router.Router"]], "routingdefinition (class in neural_compressor.ux.web.router)": [[514, "neural_compressor.ux.web.router.RoutingDefinition"]], "find_pattern_in_graph() (in module neural_compressor.ux.web.router)": [[514, "neural_compressor.ux.web.router.find_pattern_in_graph"]], "get_model_graph() (in module neural_compressor.ux.web.router)": [[514, "neural_compressor.ux.web.router.get_model_graph"]], "get_system_info() (in module neural_compressor.ux.web.router)": [[514, "neural_compressor.ux.web.router.get_system_info"]], "neural_compressor.ux.web.router": [[514, "module-neural_compressor.ux.web.router"]], "allow_api_call() (in module neural_compressor.ux.web.server)": [[515, "neural_compressor.ux.web.server.allow_api_call"]], "block_iframe() (in module neural_compressor.ux.web.server)": [[515, "neural_compressor.ux.web.server.block_iframe"]], "block_sniffing() (in module neural_compressor.ux.web.server)": [[515, "neural_compressor.ux.web.server.block_sniffing"]], "build_parameters() (in module neural_compressor.ux.web.server)": [[515, "neural_compressor.ux.web.server.build_parameters"]], "disable_cache() (in module neural_compressor.ux.web.server)": [[515, "neural_compressor.ux.web.server.disable_cache"]], "get_tls_args() (in module neural_compressor.ux.web.server)": [[515, "neural_compressor.ux.web.server.get_tls_args"]], "handle_api_call() (in module neural_compressor.ux.web.server)": [[515, "neural_compressor.ux.web.server.handle_api_call"]], "neural_compressor.ux.web.server": [[515, "module-neural_compressor.ux.web.server"]], "page_not_found() (in module neural_compressor.ux.web.server)": [[515, "neural_compressor.ux.web.server.page_not_found"]], "require_api_token() (in module neural_compressor.ux.web.server)": [[515, "neural_compressor.ux.web.server.require_api_token"]], "root() (in module neural_compressor.ux.web.server)": [[515, "neural_compressor.ux.web.server.root"]], "run_server() (in module neural_compressor.ux.web.server)": [[515, "neural_compressor.ux.web.server.run_server"]], "web_socket_publisher() (in module neural_compressor.ux.web.server)": [[515, "neural_compressor.ux.web.server.web_socket_publisher"]], "benchmarkservice (class in neural_compressor.ux.web.service.benchmark)": [[516, "neural_compressor.ux.web.service.benchmark.BenchmarkService"]], "neural_compressor.ux.web.service.benchmark": [[516, "module-neural_compressor.ux.web.service.benchmark"]], "historysnapshotparser (class in neural_compressor.ux.web.service.history_snapshot_parser)": [[517, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[517, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "neural_compressor.ux.web.service": [[518, "module-neural_compressor.ux.web.service"]], "modelservice (class in neural_compressor.ux.web.service.model)": [[519, "neural_compressor.ux.web.service.model.ModelService"]], "neural_compressor.ux.web.service.model": [[519, "module-neural_compressor.ux.web.service.model"]], "optimizationservice (class in neural_compressor.ux.web.service.optimization)": [[520, "neural_compressor.ux.web.service.optimization.OptimizationService"]], "neural_compressor.ux.web.service.optimization": [[520, "module-neural_compressor.ux.web.service.optimization"]], "profilingservice (class in neural_compressor.ux.web.service.profiling)": [[521, "neural_compressor.ux.web.service.profiling.ProfilingService"]], "neural_compressor.ux.web.service.profiling": [[521, "module-neural_compressor.ux.web.service.profiling"]], "requestdataprocessor (class in neural_compressor.ux.web.service.request_data_processor)": [[522, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor"]], "neural_compressor.ux.web.service.request_data_processor": [[522, "module-neural_compressor.ux.web.service.request_data_processor"]], "responsegenerator (class in neural_compressor.ux.web.service.response_generator)": [[523, "neural_compressor.ux.web.service.response_generator.ResponseGenerator"]], "neural_compressor.ux.web.service.response_generator": [[523, "module-neural_compressor.ux.web.service.response_generator"]], "workloadservice (class in neural_compressor.ux.web.service.workload)": [[524, "neural_compressor.ux.web.service.workload.WorkloadService"]], "neural_compressor.ux.web.service.workload": [[524, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[525, "module-neural_compressor.version"]]}})